; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Cockpit\cpmanager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?cockpitFlightData@@3VFlightData@@A		; cockpitFlightData
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?gDoCockpitHack@@3HA				; gDoCockpitHack
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?cockpitFolder@@3PADA				; cockpitFolder
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?gpTemplateSurface@@3PAVImageBuffer@@A		; gpTemplateSurface
PUBLIC	?gpTemplateImage@@3PAEA				; gpTemplateImage
PUBLIC	?gpTemplatePalette@@3PAKA			; gpTemplatePalette
PUBLIC	?TemplateInfo@@3PAVTemplateInfoClass@@A		; TemplateInfo
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
_BSS	SEGMENT
?cockpitFlightData@@3VFlightData@@A DB 07a8H DUP (?)	; cockpitFlightData
?gDoCockpitHack@@3HA DD 01H DUP (?)			; gDoCockpitHack
?cockpitFolder@@3PADA DB 0104H DUP (?)			; cockpitFolder
?gpTemplateSurface@@3PAVImageBuffer@@A DD 01H DUP (?)	; gpTemplateSurface
?gpTemplateImage@@3PAEA DD 01H DUP (?)			; gpTemplateImage
?gpTemplatePalette@@3PAKA DD 01H DUP (?)		; gpTemplatePalette
?TemplateInfo@@3PAVTemplateInfoClass@@A DD 01H DUP (?)	; TemplateInfo
_BSS	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	?strpbrk@@YAPADPADPBD@Z				; strpbrk
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?_Init_atomic_counter@std@@YAXAAKK@Z		; std::_Init_atomic_counter
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::system_error::system_error
PUBLIC	?_Makestr@system_error@std@@AAEXXZ		; std::system_error::_Makestr
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1
PUBLIC	?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	__tcsspnp
PUBLIC	?Callsign@LogBookData@@QAEPADXZ			; LogBookData::Callsign
PUBLIC	?ObjectDetailLevel@PlayerOptionsClass@@QAEMXZ	; PlayerOptionsClass::ObjectDetailLevel
PUBLIC	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ	; std::allocator<TextureHandle *>::allocator<TextureHandle *>
PUBLIC	?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::deallocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TextureHandle *> >::_Vector_val<std::_Simple_types<TextureHandle *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVTextureHandle@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
PUBLIC	??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >
PUBLIC	??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >
PUBLIC	?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy
PUBLIC	?_Tidy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Tidy
PUBLIC	?targetXres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetXres
PUBLIC	?targetYres@ImageBuffer@@QAEHXZ			; ImageBuffer::targetYres
PUBLIC	?RedMask@ImageBuffer@@QAEKXZ			; ImageBuffer::RedMask
PUBLIC	?GreenMask@ImageBuffer@@QAEKXZ			; ImageBuffer::GreenMask
PUBLIC	?BlueMask@ImageBuffer@@QAEKXZ			; ImageBuffer::BlueMask
PUBLIC	?RedShift@ImageBuffer@@QAEHXZ			; ImageBuffer::RedShift
PUBLIC	?GreenShift@ImageBuffer@@QAEHXZ			; ImageBuffer::GreenShift
PUBLIC	?BlueShift@ImageBuffer@@QAEHXZ			; ImageBuffer::BlueShift
PUBLIC	?PixelSize@ImageBuffer@@QAEHXZ			; ImageBuffer::PixelSize
PUBLIC	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z		; ImageBuffer::Pixel
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ	; VirtualDisplay::ZeroRotationAboutOrigin
PUBLIC	?GetObjectTextureState@Render3D@@QAEHXZ		; Render3D::GetObjectTextureState
PUBLIC	?GetGreenMode@RenderOTW@@QAE_NXZ		; RenderOTW::GetGreenMode
PUBLIC	?glReleaseMemory@@YAXPAX@Z			; glReleaseMemory
PUBLIC	?glGetFileExtension@@YAXPBDPAD@Z		; glGetFileExtension
PUBLIC	??1CFileIO@@UAE@XZ				; CFileIO::~CFileIO
PUBLIC	??_GCFileIO@@UAEPAXI@Z				; CFileIO::`scalar deleting destructor'
PUBLIC	??1CFileMemory@@UAE@XZ				; CFileMemory::~CFileMemory
PUBLIC	??_GCFileMemory@@UAEPAXI@Z			; CFileMemory::`scalar deleting destructor'
PUBLIC	??1CImageFileMemory@@UAE@XZ			; CImageFileMemory::~CImageFileMemory
PUBLIC	??_GCImageFileMemory@@UAEPAXI@Z			; CImageFileMemory::`scalar deleting destructor'
PUBLIC	?CheckImageType@@YAHPBD@Z			; CheckImageType
PUBLIC	?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z	; ReadTextureImage
PUBLIC	?InSim@SimulationLoopControl@@SA_NXZ		; SimulationLoopControl::InSim
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?SetSwitch@SimMoverClass@@QAEXHH@Z		; SimMoverClass::SetSwitch
PUBLIC	?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInteriorLight
PUBLIC	?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInstrumentLight
PUBLIC	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ	; AircraftClass::EWSPGM
PUBLIC	?SetPGM@AircraftClass@@QAEXW4EWSPGMSwitch@1@@Z	; AircraftClass::SetPGM
PUBLIC	?InSim@SimulationDriver@@QBE_NXZ		; SimulationDriver::InSim
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	??0SourceButtonViewType@@QAE@XZ			; SourceButtonViewType::SourceButtonViewType
PUBLIC	??1SourceButtonViewType@@QAE@XZ			; SourceButtonViewType::~SourceButtonViewType
PUBLIC	??_ESourceButtonViewType@@QAEPAXI@Z		; SourceButtonViewType::`vector deleting destructor'
PUBLIC	??0?$allocator@PAVCPButtonView@@@std@@QAE@XZ	; std::allocator<CPButtonView *>::allocator<CPButtonView *>
PUBLIC	?deallocate@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@I@Z ; std::allocator<CPButtonView *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCPButtonView@@@std@@QAEPAPAVCPButtonView@@I@Z ; std::allocator<CPButtonView *>::allocate
PUBLIC	?construct@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@ABQAV3@@Z ; std::allocator<CPButtonView *>::construct
PUBLIC	?max_size@?$allocator@PAVCPButtonView@@@std@@QBEIXZ ; std::allocator<CPButtonView *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAIABV?$allocator@PAVCPButtonView@@@2@@Z ; std::allocator_traits<std::allocator<CPButtonView *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::_Wrap_alloc<std::allocator<CPButtonView *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEPAPAVCPButtonView@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPButtonView *> >::_Vector_val<std::_Simple_types<CPButtonView *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonView@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
PUBLIC	??0?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::vector<CPButtonView *,std::allocator<CPButtonView *> >
PUBLIC	??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::~vector<CPButtonView *,std::allocator<CPButtonView *> >
PUBLIC	?capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size
PUBLIC	?max_size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::max_size
PUBLIC	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
PUBLIC	?push_back@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXABQAVCPButtonView@@@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::push_back
PUBLIC	?clear@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEII@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBE_NPBQAVCPButtonView@@@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Orphan_range
PUBLIC	?GetId@CPButtonObject@@QBEHXZ			; CPButtonObject::GetId
PUBLIC	??_GCPButtonObject@@QAEPAXI@Z			; CPButtonObject::`scalar deleting destructor'
PUBLIC	??_GCPButtonView@@QAEPAXI@Z			; CPButtonView::`scalar deleting destructor'
PUBLIC	?IsICPSet@ICPClass@@QAEHH@Z			; ICPClass::IsICPSet
PUBLIC	?GetICPPrimaryMode@ICPClass@@QAEJXZ		; ICPClass::GetICPPrimaryMode
PUBLIC	?GetICPSecondaryMode@ICPClass@@QAEJXZ		; ICPClass::GetICPSecondaryMode
PUBLIC	?GetICPTertiaryMode@ICPClass@@QAEJXZ		; ICPClass::GetICPTertiaryMode
PUBLIC	?SetICPTertiaryMode@ICPClass@@QAEXJ@Z		; ICPClass::SetICPTertiaryMode
PUBLIC	??_GICPClass@@QAEPAXI@Z				; ICPClass::`scalar deleting destructor'
PUBLIC	?HudFont@CPPanel@@QAEHXZ			; CPPanel::HudFont
PUBLIC	?MFDFont@CPPanel@@QAEHXZ			; CPPanel::MFDFont
PUBLIC	?DEDFont@CPPanel@@QAEHXZ			; CPPanel::DEDFont
PUBLIC	?FindToken@@YAPADPAPADPBD@Z			; FindToken
PUBLIC	?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z ; CreateCockpitGeometry
PUBLIC	?ReadImage@@YAXPADPAPAEPAPAK@Z			; ReadImage
PUBLIC	?Translate8to16@@YAXPAGPAEPAVImageBuffer@@@Z	; Translate8to16
PUBLIC	?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z	; Translate8to32
PUBLIC	?ApplyLightingToPalette@@YAXPAK0MMM@Z		; ApplyLightingToPalette
PUBLIC	?CalculateColor@@YAKKMMM@Z			; CalculateColor
PUBLIC	?CalculateNVGColor@@YAKK@Z			; CalculateNVGColor
PUBLIC	?InvertRGBOrder@@YAKK@Z				; InvertRGBOrder
PUBLIC	?FileExists@@YAHPAD@Z				; FileExists
PUBLIC	?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z	; FindCockpit
PUBLIC	?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z ; FindCockpitResolution
PUBLIC	?Pixel32toPixel16@TemplateInfoClass@@QAEGK@Z	; TemplateInfoClass::Pixel32toPixel16
PUBLIC	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z	; TemplateInfoClass::Pixel32toPixel32
PUBLIC	??0?$allocator@PAVCPSurface@@@std@@QAE@XZ	; std::allocator<CPSurface *>::allocator<CPSurface *>
PUBLIC	?deallocate@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@I@Z ; std::allocator<CPSurface *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCPSurface@@@std@@QAEPAPAVCPSurface@@I@Z ; std::allocator<CPSurface *>::allocate
PUBLIC	?construct@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@ABQAV3@@Z ; std::allocator<CPSurface *>::construct
PUBLIC	?max_size@?$allocator@PAVCPSurface@@@std@@QBEIXZ ; std::allocator<CPSurface *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAIABV?$allocator@PAVCPSurface@@@2@@Z ; std::allocator_traits<std::allocator<CPSurface *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPSurface *> >::_Wrap_alloc<std::allocator<CPSurface *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEPAPAVCPSurface@@I@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPSurface *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPSurface *> >::_Vector_val<std::_Simple_types<CPSurface *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPSurface@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
PUBLIC	??0?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::vector<CPSurface *,std::allocator<CPSurface *> >
PUBLIC	??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::~vector<CPSurface *,std::allocator<CPSurface *> >
PUBLIC	?capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size
PUBLIC	?max_size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::max_size
PUBLIC	??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[]
PUBLIC	?push_back@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXABQAVCPSurface@@@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::push_back
PUBLIC	?clear@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEII@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBE_NPBQAVCPSurface@@@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Orphan_range
PUBLIC	??0?$allocator@PAVCPPanel@@@std@@QAE@XZ		; std::allocator<CPPanel *>::allocator<CPPanel *>
PUBLIC	?deallocate@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@I@Z ; std::allocator<CPPanel *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCPPanel@@@std@@QAEPAPAVCPPanel@@I@Z ; std::allocator<CPPanel *>::allocate
PUBLIC	?construct@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@ABQAV3@@Z ; std::allocator<CPPanel *>::construct
PUBLIC	?max_size@?$allocator@PAVCPPanel@@@std@@QBEIXZ	; std::allocator<CPPanel *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAIABV?$allocator@PAVCPPanel@@@2@@Z ; std::allocator_traits<std::allocator<CPPanel *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPPanel *> >::_Wrap_alloc<std::allocator<CPPanel *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEPAPAVCPPanel@@I@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPPanel *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPPanel *> >::_Vector_val<std::_Simple_types<CPPanel *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPPanel@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
PUBLIC	??0?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::vector<CPPanel *,std::allocator<CPPanel *> >
PUBLIC	??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::~vector<CPPanel *,std::allocator<CPPanel *> >
PUBLIC	?capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size
PUBLIC	?max_size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::max_size
PUBLIC	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
PUBLIC	?push_back@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXABQAVCPPanel@@@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::push_back
PUBLIC	?clear@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEII@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBE_NPBQAVCPPanel@@@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Orphan_range
PUBLIC	??0?$allocator@PAVCPObject@@@std@@QAE@XZ	; std::allocator<CPObject *>::allocator<CPObject *>
PUBLIC	?deallocate@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@I@Z ; std::allocator<CPObject *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCPObject@@@std@@QAEPAPAVCPObject@@I@Z ; std::allocator<CPObject *>::allocate
PUBLIC	?construct@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@ABQAV3@@Z ; std::allocator<CPObject *>::construct
PUBLIC	?max_size@?$allocator@PAVCPObject@@@std@@QBEIXZ	; std::allocator<CPObject *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAIABV?$allocator@PAVCPObject@@@2@@Z ; std::allocator_traits<std::allocator<CPObject *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPObject *> >::_Wrap_alloc<std::allocator<CPObject *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEPAPAVCPObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPObject *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCPObject@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPObject *> >::_Vector_val<std::_Simple_types<CPObject *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPObject@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
PUBLIC	??0?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::vector<CPObject *,std::allocator<CPObject *> >::vector<CPObject *,std::allocator<CPObject *> >
PUBLIC	??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::vector<CPObject *,std::allocator<CPObject *> >::~vector<CPObject *,std::allocator<CPObject *> >
PUBLIC	?capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::size
PUBLIC	?max_size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::max_size
PUBLIC	??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[]
PUBLIC	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back
PUBLIC	?clear@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEII@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBE_NPBQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Orphan_range
PUBLIC	??0?$allocator@PAVCPCursor@@@std@@QAE@XZ	; std::allocator<CPCursor *>::allocator<CPCursor *>
PUBLIC	?deallocate@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@I@Z ; std::allocator<CPCursor *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCPCursor@@@std@@QAEPAPAVCPCursor@@I@Z ; std::allocator<CPCursor *>::allocate
PUBLIC	?construct@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@ABQAV3@@Z ; std::allocator<CPCursor *>::construct
PUBLIC	?max_size@?$allocator@PAVCPCursor@@@std@@QBEIXZ	; std::allocator<CPCursor *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAIABV?$allocator@PAVCPCursor@@@2@@Z ; std::allocator_traits<std::allocator<CPCursor *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPCursor *> >::_Wrap_alloc<std::allocator<CPCursor *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEPAPAVCPCursor@@I@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPCursor *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPCursor *> >::_Vector_val<std::_Simple_types<CPCursor *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPCursor@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
PUBLIC	??0?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::vector<CPCursor *,std::allocator<CPCursor *> >
PUBLIC	??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::~vector<CPCursor *,std::allocator<CPCursor *> >
PUBLIC	?capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size
PUBLIC	?max_size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::max_size
PUBLIC	??A?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEAAPAVCPCursor@@I@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::operator[]
PUBLIC	?push_back@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXABQAVCPCursor@@@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::push_back
PUBLIC	?clear@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEII@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBE_NPBQAVCPCursor@@@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Orphan_range
PUBLIC	??0?$allocator@PAVCPButtonObject@@@std@@QAE@XZ	; std::allocator<CPButtonObject *>::allocator<CPButtonObject *>
PUBLIC	?deallocate@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@I@Z ; std::allocator<CPButtonObject *>::deallocate
PUBLIC	?allocate@?$allocator@PAVCPButtonObject@@@std@@QAEPAPAVCPButtonObject@@I@Z ; std::allocator<CPButtonObject *>::allocate
PUBLIC	?construct@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@ABQAV3@@Z ; std::allocator<CPButtonObject *>::construct
PUBLIC	?max_size@?$allocator@PAVCPButtonObject@@@std@@QBEIXZ ; std::allocator<CPButtonObject *>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAIABV?$allocator@PAVCPButtonObject@@@2@@Z ; std::allocator_traits<std::allocator<CPButtonObject *> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::_Wrap_alloc<std::allocator<CPButtonObject *> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEPAPAVCPButtonObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::max_size
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPButtonObject *> >::_Vector_val<std::_Simple_types<CPButtonObject *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonObject@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
PUBLIC	??0?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::vector<CPButtonObject *,std::allocator<CPButtonObject *> >
PUBLIC	??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::~vector<CPButtonObject *,std::allocator<CPButtonObject *> >
PUBLIC	?capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::capacity
PUBLIC	?_Unused_capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Unused_capacity
PUBLIC	?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size
PUBLIC	?max_size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::max_size
PUBLIC	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
PUBLIC	?push_back@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXABQAVCPButtonObject@@@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::push_back
PUBLIC	?clear@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Destroy
PUBLIC	?_Grow_to@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEII@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Grow_to
PUBLIC	?_Inside@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBE_NPBQAVCPButtonObject@@@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Inside
PUBLIC	?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reserve
PUBLIC	?_Tidy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Tidy
PUBLIC	?_Xlen@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Orphan_range
PUBLIC	?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreateText
PUBLIC	?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateChevron
PUBLIC	?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateLiftLine
PUBLIC	?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateSurface
PUBLIC	?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreatePanel
PUBLIC	?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreateLight
PUBLIC	?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateButton
PUBLIC	?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateButtonView
PUBLIC	?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateIndicator
PUBLIC	?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreateDial
PUBLIC	?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateCursor
PUBLIC	?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreateDed
PUBLIC	?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreateAdi
PUBLIC	?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateMachAsi
PUBLIC	?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateHsiView
PUBLIC	?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateDigits
PUBLIC	?CreateSound@CockpitManager@@AAEXHPAU_iobuf@@@Z	; CockpitManager::CreateSound
PUBLIC	?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateKneeView
PUBLIC	?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateMirror
PUBLIC	?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z	; CockpitManager::LoadBuffer
PUBLIC	?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z ; CockpitManager::SetupControlTemplate
PUBLIC	?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z ; CockpitManager::ParseManagerInfo
PUBLIC	?ResolveReferences@CockpitManager@@AAEXXZ	; CockpitManager::ResolveReferences
PUBLIC	?TimeUpdateCallback@CockpitManager@@CAXPAX@Z	; CockpitManager::TimeUpdateCallback
PUBLIC	??1CockpitManager@@QAE@XZ			; CockpitManager::~CockpitManager
PUBLIC	??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z ; CockpitManager::CockpitManager
PUBLIC	?Exec@CockpitManager@@QAEXXZ			; CockpitManager::Exec
PUBLIC	?DisplayBlit@CockpitManager@@QAEXXZ		; CockpitManager::DisplayBlit
PUBLIC	?DisplayDraw@CockpitManager@@QAEXXZ		; CockpitManager::DisplayDraw
PUBLIC	?GeometryDraw@CockpitManager@@QAEXXZ		; CockpitManager::GeometryDraw
PUBLIC	?Dispatch@CockpitManager@@QAEHHHH@Z		; CockpitManager::Dispatch
PUBLIC	?Dispatch@CockpitManager@@QAEXHH@Z		; CockpitManager::Dispatch
PUBLIC	?POVDispatch@CockpitManager@@QAEHHHH@Z		; CockpitManager::POVDispatch
PUBLIC	?DisplayBlit3D@CockpitManager@@QAEXXZ		; CockpitManager::DisplayBlit3D
PUBLIC	?InitialiseInstruments@CockpitManager@@QAEXXZ	; CockpitManager::InitialiseInstruments
PUBLIC	?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z ; CockpitManager::GetButtonPointer
PUBLIC	?SetActivePanel@CockpitManager@@QAE_NH@Z	; CockpitManager::SetActivePanel
PUBLIC	?SetOwnship@CockpitManager@@QAEXPAVSimBaseClass@@@Z ; CockpitManager::SetOwnship
PUBLIC	?ShowHud@CockpitManager@@QAEHXZ			; CockpitManager::ShowHud
PUBLIC	?ShowMfd@CockpitManager@@QAEHXZ			; CockpitManager::ShowMfd
PUBLIC	?ShowRwr@CockpitManager@@QAEHXZ			; CockpitManager::ShowRwr
PUBLIC	?GetViewportBounds@CockpitManager@@QAEHPAUViewportBounds@@H@Z ; CockpitManager::GetViewportBounds
PUBLIC	?GetCockpitMaskTop@CockpitManager@@QAEMXZ	; CockpitManager::GetCockpitMaskTop
PUBLIC	?SetNextView@CockpitManager@@QAEXXZ		; CockpitManager::SetNextView
PUBLIC	?GetPan@CockpitManager@@QAEMXZ			; CockpitManager::GetPan
PUBLIC	?GetTilt@CockpitManager@@QAEMXZ			; CockpitManager::GetTilt
PUBLIC	?SetTOD@CockpitManager@@QAEXM@Z			; CockpitManager::SetTOD
PUBLIC	?UpdatePalette@CockpitManager@@QAEXXZ		; CockpitManager::UpdatePalette
PUBLIC	?ImageCopy@CockpitManager@@QAEXPAE0HPAUtagRECT@@@Z ; CockpitManager::ImageCopy
PUBLIC	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy
PUBLIC	?LoadCockpitDefaults@CockpitManager@@QAEXXZ	; CockpitManager::LoadCockpitDefaults
PUBLIC	?SaveCockpitDefaults@CockpitManager@@QAEXXZ	; CockpitManager::SaveCockpitDefaults
PUBLIC	?HudFont@CockpitManager@@QAEHXZ			; CockpitManager::HudFont
PUBLIC	?MFDFont@CockpitManager@@QAEHXZ			; CockpitManager::MFDFont
PUBLIC	?DEDFont@CockpitManager@@QAEHXZ			; CockpitManager::DEDFont
PUBLIC	?ApplyLighting@CockpitManager@@QAEKK_N@Z	; CockpitManager::ApplyLighting
PUBLIC	?ApplyLightingToRGB@CockpitManager@@QAEKK_N@Z	; CockpitManager::ApplyLightingToRGB
PUBLIC	?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z	; CockpitManager::ComputeLightFactors
PUBLIC	?GetNumPanels@CockpitManager@@QAEHXZ		; CockpitManager::GetNumPanels
PUBLIC	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z	; CockpitManager::GetPanel
PUBLIC	?Set2DPanelDirection@CockpitManager@@QAEHMM@Z	; CockpitManager::Set2DPanelDirection
PUBLIC	?GetPanelNum@CockpitManager@@QAEHH@Z		; CockpitManager::GetPanelNum
PUBLIC	?CockAttachWeapons@CockpitManager@@QAEXXZ	; CockpitManager::CockAttachWeapons
PUBLIC	?CockDetachWeapons@CockpitManager@@QAEXXZ	; CockpitManager::CockDetachWeapons
PUBLIC	?AddTurbulence@CockpitManager@@QAEXPAUTwoDVertex@@@Z ; CockpitManager::AddTurbulence
PUBLIC	?SetTurbulence@CockpitManager@@QAEXXZ		; CockpitManager::SetTurbulence
PUBLIC	?AddTurbulenceVp@CockpitManager@@QAEXPAUViewportBounds@@@Z ; CockpitManager::AddTurbulenceVp
PUBLIC	??0SourceLightType@@QAE@XZ			; SourceLightType::SourceLightType
PUBLIC	??1SourceLightType@@QAE@XZ			; SourceLightType::~SourceLightType
PUBLIC	??_ESourceLightType@@QAEPAXI@Z			; SourceLightType::`vector deleting destructor'
PUBLIC	??0SourceIndicatorType@@QAE@XZ			; SourceIndicatorType::SourceIndicatorType
PUBLIC	??1SourceIndicatorType@@QAE@XZ			; SourceIndicatorType::~SourceIndicatorType
PUBLIC	??_ESourceIndicatorType@@QAEPAXI@Z		; SourceIndicatorType::`vector deleting destructor'
PUBLIC	??0SourceDigitType@@QAE@XZ			; SourceDigitType::SourceDigitType
PUBLIC	??1SourceDigitType@@QAE@XZ			; SourceDigitType::~SourceDigitType
PUBLIC	??_ESourceDigitType@@QAEPAXI@Z			; SourceDigitType::`vector deleting destructor'
PUBLIC	?GetLightLevel@CTimeOfDay@@QAEMXZ		; CTimeOfDay::GetLightLevel
PUBLIC	??_GCPSoundList@@QAEPAXI@Z			; CPSoundList::`scalar deleting destructor'
PUBLIC	?GetNTextureSet@ObjectInstance@@QAEHXZ		; ObjectInstance::GetNTextureSet
PUBLIC	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ	; DrawableObject::GetClass
PUBLIC	?SetScale@DrawableObject@@QAEXM@Z		; DrawableObject::SetScale
PUBLIC	?SetTextureSet@DrawableBSP@@QAEXK@Z		; DrawableBSP::SetTextureSet
PUBLIC	?GetNTextureSet@DrawableBSP@@QAEHXZ		; DrawableBSP::GetNTextureSet
PUBLIC	?GetTextureSet@DrawableBSP@@QAEKXZ		; DrawableBSP::GetTextureSet
PUBLIC	?GetID@DrawableBSP@@QAEHXZ			; DrawableBSP::GetID
PUBLIC	?LockAndLoad@DrawableBSP@@SAXH@Z		; DrawableBSP::LockAndLoad
PUBLIC	?Unlock@DrawableBSP@@SAXH@Z			; DrawableBSP::Unlock
PUBLIC	?NumHardpoints@SMSBaseClass@@QAEHXZ		; SMSBaseClass::NumHardpoints
PUBLIC	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
PUBLIC	?SetMasterArm@SMSBaseClass@@QAEXW4MasterArmState@1@@Z ; SMSBaseClass::SetMasterArm
PUBLIC	?CockpitError@@YAXHH@Z				; CockpitError
PUBLIC	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
PUBLIC	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
PUBLIC	??$addressof@QAVCPButtonView@@@std@@YAPBQAVCPButtonView@@ABQAV1@@Z ; std::addressof<CPButtonView * const>
PUBLIC	??$construct@PAVCPButtonView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>
PUBLIC	??$construct@PAVCPButtonView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>
PUBLIC	??$addressof@QAVCPSurface@@@std@@YAPBQAVCPSurface@@ABQAV1@@Z ; std::addressof<CPSurface * const>
PUBLIC	??$construct@PAVCPSurface@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>
PUBLIC	??$construct@PAVCPSurface@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>
PUBLIC	??$addressof@QAVCPPanel@@@std@@YAPBQAVCPPanel@@ABQAV1@@Z ; std::addressof<CPPanel * const>
PUBLIC	??$construct@PAVCPPanel@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>
PUBLIC	??$construct@PAVCPPanel@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>
PUBLIC	??$addressof@QAVCPObject@@@std@@YAPBQAVCPObject@@ABQAV1@@Z ; std::addressof<CPObject * const>
PUBLIC	??$construct@PAVCPObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>
PUBLIC	??$construct@PAVCPObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>
PUBLIC	??$addressof@QAVCPCursor@@@std@@YAPBQAVCPCursor@@ABQAV1@@Z ; std::addressof<CPCursor * const>
PUBLIC	??$construct@PAVCPCursor@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>
PUBLIC	??$construct@PAVCPCursor@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>
PUBLIC	??$addressof@QAVCPButtonObject@@@std@@YAPBQAVCPButtonObject@@ABQAV1@@Z ; std::addressof<CPButtonObject * const>
PUBLIC	??$construct@PAVCPButtonObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>
PUBLIC	??$construct@PAVCPButtonObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$_Umove@PAPAVCPButtonView@@@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEPAPAVCPButtonView@@PAPAV2@00@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Umove<CPButtonView * *>
PUBLIC	??$_Umove@PAPAVCPSurface@@@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEPAPAVCPSurface@@PAPAV2@00@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Umove<CPSurface * *>
PUBLIC	??$_Umove@PAPAVCPPanel@@@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEPAPAVCPPanel@@PAPAV2@00@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Umove<CPPanel * *>
PUBLIC	??$_Umove@PAPAVCPObject@@@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEPAPAVCPObject@@PAPAV2@00@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Umove<CPObject * *>
PUBLIC	??$_Umove@PAPAVCPCursor@@@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEPAPAVCPCursor@@PAPAV2@00@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Umove<CPCursor * *>
PUBLIC	??$_Umove@PAPAVCPButtonObject@@@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEPAPAVCPButtonObject@@PAPAV2@00@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Umove<CPButtonObject * *>
PUBLIC	??$_Allocate@PAVCPButtonView@@@std@@YAPAPAVCPButtonView@@IPAPAV1@@Z ; std::_Allocate<CPButtonView *>
PUBLIC	??$_Allocate@PAVCPSurface@@@std@@YAPAPAVCPSurface@@IPAPAV1@@Z ; std::_Allocate<CPSurface *>
PUBLIC	??$_Allocate@PAVCPPanel@@@std@@YAPAPAVCPPanel@@IPAPAV1@@Z ; std::_Allocate<CPPanel *>
PUBLIC	??$_Allocate@PAVCPObject@@@std@@YAPAPAVCPObject@@IPAPAV1@@Z ; std::_Allocate<CPObject *>
PUBLIC	??$_Allocate@PAVCPCursor@@@std@@YAPAPAVCPCursor@@IPAPAV1@@Z ; std::_Allocate<CPCursor *>
PUBLIC	??$_Allocate@PAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@IPAPAV1@@Z ; std::_Allocate<CPButtonObject *>
PUBLIC	??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z ; std::forward<CPButtonView * &>
PUBLIC	??$construct@PAVCPButtonView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>
PUBLIC	??$forward@ABQAVCPButtonView@@@std@@YAABQAVCPButtonView@@ABQAV1@@Z ; std::forward<CPButtonView * const &>
PUBLIC	??$construct@PAVCPButtonView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>
PUBLIC	??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z ; std::forward<CPSurface * &>
PUBLIC	??$construct@PAVCPSurface@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>
PUBLIC	??$forward@ABQAVCPSurface@@@std@@YAABQAVCPSurface@@ABQAV1@@Z ; std::forward<CPSurface * const &>
PUBLIC	??$construct@PAVCPSurface@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>
PUBLIC	??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z ; std::forward<CPPanel * &>
PUBLIC	??$construct@PAVCPPanel@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>
PUBLIC	??$forward@ABQAVCPPanel@@@std@@YAABQAVCPPanel@@ABQAV1@@Z ; std::forward<CPPanel * const &>
PUBLIC	??$construct@PAVCPPanel@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>
PUBLIC	??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z ; std::forward<CPObject * &>
PUBLIC	??$construct@PAVCPObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>
PUBLIC	??$forward@ABQAVCPObject@@@std@@YAABQAVCPObject@@ABQAV1@@Z ; std::forward<CPObject * const &>
PUBLIC	??$construct@PAVCPObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>
PUBLIC	??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z ; std::forward<CPCursor * &>
PUBLIC	??$construct@PAVCPCursor@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>
PUBLIC	??$forward@ABQAVCPCursor@@@std@@YAABQAVCPCursor@@ABQAV1@@Z ; std::forward<CPCursor * const &>
PUBLIC	??$construct@PAVCPCursor@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>
PUBLIC	??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z ; std::forward<CPButtonObject * &>
PUBLIC	??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>
PUBLIC	??$forward@ABQAVCPButtonObject@@@std@@YAABQAVCPButtonObject@@ABQAV1@@Z ; std::forward<CPButtonObject * const &>
PUBLIC	??$construct@PAVCPButtonObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Ptr_cat@PAVCPButtonView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonView@@0@Z ; std::_Ptr_cat<CPButtonView *,CPButtonView *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >
PUBLIC	??$_Ptr_cat@PAVCPSurface@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPSurface@@0@Z ; std::_Ptr_cat<CPSurface *,CPSurface *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >
PUBLIC	??$_Ptr_cat@PAVCPPanel@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPPanel@@0@Z ; std::_Ptr_cat<CPPanel *,CPPanel *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >
PUBLIC	??$_Ptr_cat@PAVCPObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPObject@@0@Z ; std::_Ptr_cat<CPObject *,CPObject *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >
PUBLIC	??$_Ptr_cat@PAVCPCursor@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPCursor@@0@Z ; std::_Ptr_cat<CPCursor *,CPCursor *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >
PUBLIC	??$_Ptr_cat@PAVCPButtonObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonObject@@0@Z ; std::_Ptr_cat<CPButtonObject *,CPButtonObject *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
PUBLIC	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCPButtonView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z ; std::_Uninitialized_move<CPButtonView * *,CPButtonView * *,std::_Wrap_alloc<std::allocator<CPButtonView *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCPSurface@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z ; std::_Uninitialized_move<CPSurface * *,CPSurface * *,std::_Wrap_alloc<std::allocator<CPSurface *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCPPanel@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z ; std::_Uninitialized_move<CPPanel * *,CPPanel * *,std::_Wrap_alloc<std::allocator<CPPanel *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCPObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z ; std::_Uninitialized_move<CPObject * *,CPObject * *,std::_Wrap_alloc<std::allocator<CPObject *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCPCursor@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z ; std::_Uninitialized_move<CPCursor * *,CPCursor * *,std::_Wrap_alloc<std::allocator<CPCursor *> > >
PUBLIC	??$_Uninitialized_move@PAPAVCPButtonObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z ; std::_Uninitialized_move<CPButtonObject * *,CPButtonObject * *,std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
PUBLIC	??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z ; std::allocator<CPButtonView *>::construct<CPButtonView *,CPButtonView * &>
PUBLIC	??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z ; std::allocator<CPSurface *>::construct<CPSurface *,CPSurface * &>
PUBLIC	??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z ; std::allocator<CPPanel *>::construct<CPPanel *,CPPanel * &>
PUBLIC	??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z ; std::allocator<CPObject *>::construct<CPObject *,CPObject * &>
PUBLIC	??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z ; std::allocator<CPCursor *>::construct<CPCursor *,CPCursor * &>
PUBLIC	??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z ; std::allocator<CPButtonObject *>::construct<CPButtonObject *,CPButtonObject * &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$_Val_type@PAPAVCPButtonView@@@std@@YAPAPAVCPButtonView@@PAPAV1@@Z ; std::_Val_type<CPButtonView * *>
PUBLIC	??$_Uninit_move@PAVCPButtonView@@PAV1@PAV1@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPButtonView *,CPButtonView *,CPButtonView *>
PUBLIC	??$_Val_type@PAPAVCPSurface@@@std@@YAPAPAVCPSurface@@PAPAV1@@Z ; std::_Val_type<CPSurface * *>
PUBLIC	??$_Uninit_move@PAVCPSurface@@PAV1@PAV1@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPSurface *,CPSurface *,CPSurface *>
PUBLIC	??$_Val_type@PAPAVCPPanel@@@std@@YAPAPAVCPPanel@@PAPAV1@@Z ; std::_Val_type<CPPanel * *>
PUBLIC	??$_Uninit_move@PAVCPPanel@@PAV1@PAV1@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPPanel *,CPPanel *,CPPanel *>
PUBLIC	??$_Val_type@PAPAVCPObject@@@std@@YAPAPAVCPObject@@PAPAV1@@Z ; std::_Val_type<CPObject * *>
PUBLIC	??$_Uninit_move@PAVCPObject@@PAV1@PAV1@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPObject *,CPObject *,CPObject *>
PUBLIC	??$_Val_type@PAPAVCPCursor@@@std@@YAPAPAVCPCursor@@PAPAV1@@Z ; std::_Val_type<CPCursor * *>
PUBLIC	??$_Uninit_move@PAVCPCursor@@PAV1@PAV1@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPCursor *,CPCursor *,CPCursor *>
PUBLIC	??$_Val_type@PAPAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@PAPAV1@@Z ; std::_Val_type<CPButtonObject * *>
PUBLIC	??$_Uninit_move@PAVCPButtonObject@@PAV1@PAV1@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPButtonObject *,CPButtonObject *,CPButtonObject *>
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@EI@AEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	__TI4?AVfailure@ios_base@std@@
PUBLIC	__CTA4?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7CFileIO@@6B@				; CFileIO::`vftable'
PUBLIC	??_7CFileMemory@@6B@				; CFileMemory::`vftable'
PUBLIC	??_7CImageFileMemory@@6B@			; CImageFileMemory::`vftable'
PUBLIC	??_C@_03BBABOKL@GIF?$AA@			; `string'
PUBLIC	??_C@_03DJLAKPIA@LBM?$AA@			; `string'
PUBLIC	??_C@_03BFAIMLIE@PCX?$AA@			; `string'
PUBLIC	??_C@_03CNFPPDJC@BMP?$AA@			; `string'
PUBLIC	??_C@_03MNGDDBAC@APL?$AA@			; `string'
PUBLIC	??_C@_03GGDFNBH@TGA?$AA@			; `string'
PUBLIC	??_C@_03CMMIMEAC@DDS?$AA@			; `string'
PUBLIC	??_C@_0GC@FGLCMBHA@Critical?52D?5Cockpit?5Error?5Detect@ ; `string'
PUBLIC	??_C@_0P@HBKCJIG@Critical?5Error?$AA@		; `string'
PUBLIC	??_C@_0DD@DBPOGJMH@2D?5Cockpit?5Error?5Detected?5in?5Blo@ ; `string'
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_0BH@IONHGOFE@Failed?5to?5read?5image?3?5?$AA@ ; `string'
PUBLIC	??_C@_0M@CFLADCE@Feb?518?52013?$AA@		; `string'
PUBLIC	??_C@_0O@KOHLGLHA@cpmanager?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0M@HDJBMLCH@8_ckpit?4dat?$AA@		; `string'
PUBLIC	??_C@_0M@CIACFAIC@8_plock?4dat?$AA@		; `string'
PUBLIC	??_C@_05OPEIBKFE@?$CFd?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_07GCOHIDPL@MANAGER?$AA@			; `string'
PUBLIC	??_C@_04OEPMCOLO@TEXT?$AA@			; `string'
PUBLIC	??_C@_07NGNFBAGN@CHEVRON?$AA@			; `string'
PUBLIC	??_C@_08CLFDHBFD@LIFTLINE?$AA@			; `string'
PUBLIC	??_C@_07HKBGKBDH@SURFACE?$AA@			; `string'
PUBLIC	??_C@_05HGHGEHHO@PANEL?$AA@			; `string'
PUBLIC	??_C@_05MFNJIKNP@LIGHT?$AA@			; `string'
PUBLIC	??_C@_06HBIEIEBN@BUTTON?$AA@			; `string'
PUBLIC	??_C@_0L@OOEGIJJP@BUTTONVIEW?$AA@		; `string'
PUBLIC	??_C@_09EPLFPLCO@INDICATOR?$AA@			; `string'
PUBLIC	??_C@_06MGMDBFK@DIGITS?$AA@			; `string'
PUBLIC	??_C@_03KLDLMOOL@ADI?$AA@			; `string'
PUBLIC	??_C@_04FPCGAGCC@DIAL?$AA@			; `string'
PUBLIC	??_C@_06CDBDBPON@CURSOR?$AA@			; `string'
PUBLIC	??_C@_03CIIJCKKD@DED?$AA@			; `string'
PUBLIC	??_C@_07EHJPLJNA@MACHASI?$AA@			; `string'
PUBLIC	??_C@_03MPFKDEJE@HSI?$AA@			; `string'
PUBLIC	??_C@_05MEGDOMG@SOUND?$AA@			; `string'
PUBLIC	??_C@_08OCGEMODB@KNEEVIEW?$AA@			; `string'
PUBLIC	??_C@_06LPIEMBDF@MIRROR?$AA@			; `string'
PUBLIC	??_C@_06HKFEAHGA@BUFFER?$AA@			; `string'
PUBLIC	??_C@_0BB@DLLMHPOI@mpCockpitCritSec?$AA@	; `string'
PUBLIC	??_C@_0NG@IJGPFJLB@Verify?5error?5detected?$CB?6?6NumSurfa@ ; `string'
PUBLIC	??_C@_0BM@HICFCKNL@Falcon?54?40?5Cockpit?5Verifier?$AA@ ; `string'
PUBLIC	??_C@_0L@JAKJDFBN@No?5errors?4?$AA@		; `string'
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	??_C@_03OCLOCGE@?$DN?$DL?6?$AA@			; `string'
PUBLIC	??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@		; `string'
PUBLIC	??_C@_04PAJMBCIO@?$CDend?$AA@			; `string'
PUBLIC	??_C@_0M@KBCOJPLI@numsurfaces?$AA@		; `string'
PUBLIC	??_C@_07PNADDHHC@mfdleft?$AA@			; `string'
PUBLIC	??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_08KEAJBMEO@mfdright?$AA@			; `string'
PUBLIC	??_C@_04PNIHBFAN@mfd3?$AA@			; `string'
PUBLIC	??_C@_04LCMGIDMK@mfd4?$AA@			; `string'
PUBLIC	??_C@_03HDICPLBH@hud?$AA@			; `string'
PUBLIC	??_C@_03FDDKCNFF@rwr?$AA@			; `string'
PUBLIC	??_C@_09GCGEEKAC@numpanels?$AA@			; `string'
PUBLIC	??_C@_0L@LILAFCIM@numobjects?$AA@		; `string'
PUBLIC	??_C@_09KHKEEBMF@numsounds?$AA@			; `string'
PUBLIC	??_C@_0L@LOPHKBNK@numbuttons?$AA@		; `string'
PUBLIC	??_C@_0P@HLMMFAAF@numbuttonviews?$AA@		; `string'
PUBLIC	??_C@_0L@DBIMEFN@numcursors?$AA@		; `string'
PUBLIC	??_C@_0M@DBHGAIJM@mouseborder?$AA@		; `string'
PUBLIC	??_C@_07MIMLBGDI@hudfont?$AA@			; `string'
PUBLIC	??_C@_07NGBNJOAP@mfdfont?$AA@			; `string'
PUBLIC	??_C@_07PILKJPLJ@dedfont?$AA@			; `string'
PUBLIC	??_C@_09MOJAANJ@popupfont?$AA@			; `string'
PUBLIC	??_C@_08PPDLIEGK@kneefont?$AA@			; `string'
PUBLIC	??_C@_0M@OABGFHLI@generalfont?$AA@		; `string'
PUBLIC	??_C@_09DOHPBHPD@saboxfont?$AA@			; `string'
PUBLIC	??_C@_09NEONNCFF@labelfont?$AA@			; `string'
PUBLIC	??_C@_0N@LICNMFFG@templatefile?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0L@CBADCHBJ@dogeometry?$AA@		; `string'
PUBLIC	??_C@_09CPIJGJKD@cockpit2d?$AA@			; `string'
PUBLIC	??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@		; `string'
PUBLIC	??_C@_08DOFAMBBG@altpanel?$AA@			; `string'
PUBLIC	??_C@_0L@FCFIFBMP@floodlight?$AA@		; `string'
PUBLIC	??_C@_02NJNOFBBI@?$CFx?$AA@			; `string'
PUBLIC	??_C@_09NIAALGLF@instLight?$AA@			; `string'
PUBLIC	??_C@_08NPHEHNFF@hudcolor?$AA@			; `string'
PUBLIC	??_C@_02CBLDBPFN@?1?1?$AA@			; `string'
PUBLIC	??_C@_05HNNDEAND@entry?$AA@			; `string'
PUBLIC	??_C@_03DECLHMDM@?$CK?1?2?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_07HGFHNNDO@?$CFs?$CFd?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@	; `string'
PUBLIC	??_C@_0L@JDIJOBFO@buffersize?$AA@		; `string'
PUBLIC	??_C@_09MCNIDEEJ@cyclebits?$AA@			; `string'
PUBLIC	??_C@_07OKLNCIDH@destloc?$AA@			; `string'
PUBLIC	??_C@_0N@BALDINCG@callbackslot?$AA@		; `string'
PUBLIC	??_C@_0L@FBNFHHBP@numstrings?$AA@		; `string'
PUBLIC	??_C@_07GJFAOIEN@pantilt?$AA@			; `string'
PUBLIC	??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@		; `string'
PUBLIC	??_C@_0N@KGDEIIEF@pantiltlabel?$AA@		; `string'
PUBLIC	??_C@_06JGNLDMKC@color0?$AA@			; `string'
PUBLIC	??_C@_03OPHMLOFF@?$CFlx?$AA@			; `string'
PUBLIC	??_C@_07NCIJPOHC@dedtype?$AA@			; `string'
PUBLIC	??_C@_03CFHCOHNP@ded?$AA@			; `string'
PUBLIC	??_C@_03DAJGBDEG@pfl?$AA@			; `string'
PUBLIC	??_C@_06FLMALHKC@srcloc?$AA@			; `string'
PUBLIC	??_C@_07KJALOCCP@hotspot?$AA@			; `string'
PUBLIC	??_C@_09EIFFFPLD@numdigits?$AA@			; `string'
PUBLIC	??_C@_0L@LEFEFEBM@persistant?$AA@		; `string'
PUBLIC	??_C@_06EPACOAOG@minval?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_06EMPBAAKJ@maxval?$AA@			; `string'
PUBLIC	??_C@_06KNKNJMKO@minpos?$AA@			; `string'
PUBLIC	??_C@_06KOFOHMOB@maxpos?$AA@			; `string'
PUBLIC	??_C@_08JGFGJBPO@numtapes?$AA@			; `string'
PUBLIC	??_C@_0P@NNIOPPFJ@calibrationval?$AA@		; `string'
PUBLIC	??_C@_0M@KPMDGEHG@orientation?$AA@		; `string'
PUBLIC	??_C@_0L@LMMKHPOB@horizontal?$AA@		; `string'
PUBLIC	??_C@_08NEOMLJGJ@vertical?$AA@			; `string'
PUBLIC	??_C@_0N@NJACGLBK@numendpoints?$AA@		; `string'
PUBLIC	??_C@_06GPGIDCJA@points?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_07ILDOBJAO@radius0?$AA@			; `string'
PUBLIC	??_C@_07JCCFCIEP@radius1?$AA@			; `string'
PUBLIC	??_C@_07LJAIHLIM@radius2?$AA@			; `string'
PUBLIC	??_C@_06IPMAANOD@color1?$AA@			; `string'
PUBLIC	??_C@_06KEONFOCA@color2?$AA@			; `string'
PUBLIC	??_C@_07DBEABAHD@bsrcloc?$AA@			; `string'
PUBLIC	??_C@_08BLADEKNC@bdestloc?$AA@			; `string'
PUBLIC	??_C@_08HGPFHPFG@bsurface?$AA@			; `string'
PUBLIC	??_C@_0N@IHJMLMAG@renderneedle?$AA@		; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_07KEJHJGKM@?$CFs?$CFs?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_0M@PEDCGPJO@mousebounds?$AA@		; `string'
PUBLIC	??_C@_09CCBBEOKE@adjpanels?$AA@			; `string'
PUBLIC	??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_08FGPNIDBO@surfaces?$AA@			; `string'
PUBLIC	??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@		; `string'
PUBLIC	??_C@_0BF@LGPKAOB@?$CFd?5?$CFd?5?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0M@CEEDCJLA@transparent?$AA@		; `string'
PUBLIC	??_C@_06CJCOLNBB@opaque?$AA@			; `string'
PUBLIC	??_C@_07JPLKJBI@objects?$AA@			; `string'
PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_0M@FPJEKPBD@buttonviews?$AA@		; `string'
PUBLIC	??_C@_07BHEPCJLO@masktop?$AA@			; `string'
PUBLIC	??_C@_08PCCKKBCO@cursorid?$AA@			; `string'
PUBLIC	??_C@_07FMJJGAHL@osbleft?$AA@			; `string'
PUBLIC	??_C@_08NNHEDOLN@osbright?$AA@			; `string'
PUBLIC	??_C@_04OEANJNHC@osb3?$AA@			; `string'
PUBLIC	??_C@_04KLEMALLF@osb4?$AA@			; `string'
PUBLIC	??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_06CFKBOPCI@states?$AA@			; `string'
PUBLIC	??_C@_09DLKJFLMF@initstate?$AA@			; `string'
PUBLIC	??_C@_0N@MDIPHOIK@parentbutton?$AA@		; `string'
PUBLIC	??_C@_05EKJCMADO@delay?$AA@			; `string'
PUBLIC	??_C@_06CFPJNMHJ@sound1?$AA@			; `string'
PUBLIC	??_C@_06ONEIPLK@sound2?$AA@			; `string'
PUBLIC	??_C@_09LKIEMFDP@ilslimits?$AA@			; `string'
PUBLIC	??_C@_0P@BIMEBLHC@blitbackground?$AA@		; `string'
PUBLIC	??_C@_08NCOBPHPA@backdest?$AA@			; `string'
PUBLIC	??_C@_07CFHPHAIB@backsrc?$AA@			; `string'
PUBLIC	??_C@_06LNPGGPGB@color3?$AA@			; `string'
PUBLIC	??_C@_06PCLHPJKG@color4?$AA@			; `string'
PUBLIC	??_C@_08NMFHNMGB@warnflag?$AA@			; `string'
PUBLIC	??_C@_06OLKMMIOH@color5?$AA@			; `string'
PUBLIC	??_C@_06MAIBJLCE@color6?$AA@			; `string'
PUBLIC	??_C@_06NJJKKKGF@color7?$AA@			; `string'
PUBLIC	??_C@_06FOACLGKK@color8?$AA@			; `string'
PUBLIC	??_C@_06EHBJIHOL@color9?$AA@			; `string'
PUBLIC	??_C@_08KPIGICAK@endangle?$AA@			; `string'
PUBLIC	??_C@_09IBLLDDAH@endlength?$AA@			; `string'
PUBLIC	??_C@_0L@KLEMNPPO@startangle?$AA@		; `string'
PUBLIC	??_C@_09MIGBCLAB@arclength?$AA@			; `string'
PUBLIC	??_C@_0N@KLFHMCOD@needleradius?$AA@		; `string'
PUBLIC	??_C@_0CE@LIBGJLEH@Cannot?5Change?5to?5Next?5Active?5Pan@ ; `string'
PUBLIC	??_C@_0BB@LIABIPNP@?$CFs?2config?2?$CFs?4ini?$AA@ ; `string'
PUBLIC	??_C@_05PDOBBJNA@Color?$AA@			; `string'
PUBLIC	??_C@_03NDLAFECJ@Hud?$AA@			; `string'
PUBLIC	??_C@_06GBGCJLOH@Scales?$AA@			; `string'
PUBLIC	??_C@_0L@JCLLFKLB@Brightness?$AA@		; `string'
PUBLIC	??_C@_03EJKPDIPK@FPM?$AA@			; `string'
PUBLIC	??_C@_08LIFBEL@Velocity?$AA@			; `string'
PUBLIC	??_C@_03PHINJBAN@Alt?$AA@			; `string'
PUBLIC	??_C@_0M@CKGFALAG@SymWheelPos?$AA@		; `string'
PUBLIC	??_C@_0L@FNKDFNPE@MasterMode?$AA@		; `string'
PUBLIC	??_C@_03PAMAFJJJ@ICP?$AA@			; `string'
PUBLIC	??_C@_02PGHGPEOM@?91?$AA@			; `string'
PUBLIC	??_C@_09HGKGPEIN@PrimaryId?$AA@			; `string'
PUBLIC	??_C@_0M@EBCIHLHK@PrimaryMode?$AA@		; `string'
PUBLIC	??_C@_0M@MFIJDIMF@SecondaryId?$AA@		; `string'
PUBLIC	??_C@_0O@OLFKIDMD@SecondaryMode?$AA@		; `string'
PUBLIC	??_C@_0L@KLOHMKCE@TertiaryId?$AA@		; `string'
PUBLIC	??_C@_0N@PPIMLMDA@TertiaryMode?$AA@		; `string'
PUBLIC	??_C@_09EHBHBFJG@Display?$CFd?$AA@		; `string'
PUBLIC	??_C@_03FHMHNLHA@MFD?$AA@			; `string'
PUBLIC	??_C@_0BA@CDNCFJNA@Display?$CFd?9?$CFd?9?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BC@OKGOADC@Display?$CFd?9?$CFd?9csel?$AA@ ; `string'
PUBLIC	??_C@_0M@BEMKKIIH@Flare?5Bingo?$AA@		; `string'
PUBLIC	??_C@_03IKBELOEO@EWS?$AA@			; `string'
PUBLIC	??_C@_0M@EDBDLIIL@Chaff?5Bingo?$AA@		; `string'
PUBLIC	??_C@_06LKLLFINE@Jammer?$AA@			; `string'
PUBLIC	??_C@_05OMILMKPK@Bingo?$AA@			; `string'
PUBLIC	??_C@_0BA@JBJLLJMG@PGM?5?$CFd?5Chaff?5BQ?$AA@	; `string'
PUBLIC	??_C@_0BA@BDIACBJP@PGM?5?$CFd?5Chaff?5BI?$AA@	; `string'
PUBLIC	??_C@_0BA@IMHPHAIB@PGM?5?$CFd?5Chaff?5SQ?$AA@	; `string'
PUBLIC	??_C@_0BA@OGEOINI@PGM?5?$CFd?5Chaff?5SI?$AA@	; `string'
PUBLIC	??_C@_0BA@IAKBMICO@PGM?5?$CFd?5Flare?5BQ?$AA@	; `string'
PUBLIC	??_C@_0BA@CLKFAHH@PGM?5?$CFd?5Flare?5BI?$AA@	; `string'
PUBLIC	??_C@_0BA@JNEFABGJ@PGM?5?$CFd?5Flare?5SQ?$AA@	; `string'
PUBLIC	??_C@_0BA@BPFOJJDA@PGM?5?$CFd?5Flare?5SI?$AA@	; `string'
PUBLIC	??_C@_0P@FKEDIMOB@Mode?5Selection?$AA@		; `string'
PUBLIC	??_C@_0BB@GHALBOOF@Number?5Selection?$AA@	; `string'
PUBLIC	??_C@_0BC@PPLJKMEA@BullseyeInfoOnMFD?$AA@	; `string'
PUBLIC	??_C@_08MPCCOHIH@Bullseye?$AA@			; `string'
PUBLIC	??_C@_07GEFBFHJJ@LaserST?$AA@			; `string'
PUBLIC	??_C@_05LIGKNHHL@Laser?$AA@			; `string'
PUBLIC	??_C@_08DILOOOHJ@WideView?$AA@			; `string'
PUBLIC	??_C@_0N@LFKIFFIM@Cockpit?5View?$AA@		; `string'
PUBLIC	??_C@_04KNKPIPFB@Mode?$AA@			; `string'
PUBLIC	??_C@_03IDIDCFHH@OTW?$AA@			; `string'
PUBLIC	??_C@_05JDINLGBN@Comm1?$AA@			; `string'
PUBLIC	??_C@_05JNPIHJOC@COMMS?$AA@			; `string'
PUBLIC	??_C@_05LIKAOFNO@Comm2?$AA@			; `string'
PUBLIC	??_C@_09HJHEFHPP@MasterArm?$AA@			; `string'
PUBLIC	??_C@_07DNEKOHB@Weapons?$AA@			; `string'
PUBLIC	??_C@_08JHKGGCCB@?$CFs?2?$CFd?2?$CFs?$AA@	; `string'
PUBLIC	??_C@_0N@LCGKJIDE@art?2ckptart?2?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileIO@@6B@				; CFileIO::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileIO@@@8				; CFileIO `RTTI Type Descriptor'
PUBLIC	??_R3CFileIO@@8					; CFileIO::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileIO@@8					; CFileIO::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileIO@@8			; CFileIO::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileMemory@@6B@				; CFileMemory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileMemory@@@8				; CFileMemory `RTTI Type Descriptor'
PUBLIC	??_R3CFileMemory@@8				; CFileMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileMemory@@8				; CFileMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileMemory@@8			; CFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CImageFileMemory@@6B@			; CImageFileMemory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImageFileMemory@@@8			; CImageFileMemory `RTTI Type Descriptor'
PUBLIC	??_R3CImageFileMemory@@8			; CImageFileMemory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImageFileMemory@@8			; CImageFileMemory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImageFileMemory@@8		; CImageFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3e19999a
PUBLIC	__real@3e570a3d
PUBLIC	__real@3eb33333
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3fc00000
PUBLIC	__real@40000000
PUBLIC	__real@41200000
PUBLIC	__real@437f0000
PUBLIC	__real@447a0000
PUBLIC	__real@bd0efa34
PUBLIC	__real@be32b8c1
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_isspace:PROC
EXTRN	_memchr:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strchr:PROC
EXTRN	_strncmp:PROC
EXTRN	_strpbrk:PROC
EXTRN	_strrchr:PROC
EXTRN	_strcmpi:PROC
EXTRN	_strnicmp:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	__imp__WritePrivateProfileStringA@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_exit:PROC
EXTRN	_free:PROC
EXTRN	_fclose:PROC
EXTRN	_fgets:PROC
EXTRN	_fopen:PROC
EXTRN	_sscanf:PROC
EXTRN	_sprintf:PROC
EXTRN	_fabs:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??0bad_cast@std@@QAE@PBD@Z:PROC			; std::bad_cast::bad_cast
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	_MonoPrint:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?F4IsBadCodePtr@@YA_NPAX@Z:PROC			; F4IsBadCodePtr
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	__mbsspnp:PROC
EXTRN	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMultTranspose
EXTRN	??0ImageBuffer@@QAE@XZ:PROC			; ImageBuffer::ImageBuffer
EXTRN	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:PROC ; ImageBuffer::Setup
EXTRN	?Cleanup@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Cleanup
EXTRN	?SetChromaKey@ImageBuffer@@QAEXK@Z:PROC		; ImageBuffer::SetChromaKey
EXTRN	?Lock@ImageBuffer@@QAEPAX_N0@Z:PROC		; ImageBuffer::Lock
EXTRN	?Unlock@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Unlock
EXTRN	?SetCamera@Render3D@@QAEXPBUTpoint@@PBUTrotation@@@Z:PROC ; Render3D::SetCamera
EXTRN	?SetLightDirection@Render3D@@QAEXPBUTpoint@@@Z:PROC ; Render3D::SetLightDirection
EXTRN	?GetLightDirection@Render3D@@QAEXPAUTpoint@@@Z:PROC ; Render3D::GetLightDirection
EXTRN	?SetObjectTextureState@Render3D@@QAEXH@Z:PROC	; Render3D::SetObjectTextureState
EXTRN	_F4CreateCriticalSection:PROC
EXTRN	_F4DestroyCriticalSection:PROC
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?closefile@CFileIO@@QAEXXZ:PROC			; CFileIO::closefile
EXTRN	??_ECFileIO@@UAEPAXI@Z:PROC			; CFileIO::`vector deleting destructor'
EXTRN	?glOpenFileMem@CFileMemory@@QAEHPBD@Z:PROC	; CFileMemory::glOpenFileMem
EXTRN	?glReadFileMem@CFileMemory@@QAEXXZ:PROC		; CFileMemory::glReadFileMem
EXTRN	?glCloseFileMem@CFileMemory@@QAEXXZ:PROC	; CFileMemory::glCloseFileMem
EXTRN	??_ECFileMemory@@UAEPAXI@Z:PROC			; CFileMemory::`vector deleting destructor'
EXTRN	??0CImageFileMemory@@QAE@XZ:PROC		; CImageFileMemory::CImageFileMemory
EXTRN	??_ECImageFileMemory@@UAEPAXI@Z:PROC		; CImageFileMemory::`vector deleting destructor'
EXTRN	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackGIF
EXTRN	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackLBM
EXTRN	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z:PROC	; UnpackPCX
EXTRN	?ReadBMP@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadBMP
EXTRN	?ReadAPL@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadAPL
EXTRN	?ReadTGA@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadTGA
EXTRN	?ReadDDS@@YAHPAVCImageFileMemory@@@Z:PROC	; ReadDDS
EXTRN	_F4SoundFXSetDist:PROC
EXTRN	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z:PROC ; OTWDriverClass::SetOTWDisplayMode
EXTRN	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ:PROC ; OTWDriverClass::GetOTWDisplayMode
EXTRN	?SetFOV@OTWDriverClass@@QAEXM@Z:PROC		; OTWDriverClass::SetFOV
EXTRN	?GetFOV@OTWDriverClass@@QAEMXZ:PROC		; OTWDriverClass::GetFOV
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?GetTeam@FalconSessionEntity@@QAEEXZ:PROC	; FalconSessionEntity::GetTeam
EXTRN	?SetAcStatusBits@AircraftClass@@QAEXH@Z:PROC	; AircraftClass::SetAcStatusBits
EXTRN	?ClearAcStatusBits@AircraftClass@@QAEXH@Z:PROC	; AircraftClass::ClearAcStatusBits
EXTRN	?CopyAnimationsToPit@AircraftClass@@QAEXPAVDrawableBSP@@@Z:PROC ; AircraftClass::CopyAnimationsToPit
EXTRN	?GetTurbulence@AircraftClass@@QAE?AUTpoint@@XZ:PROC ; AircraftClass::GetTurbulence
EXTRN	?MapVisId@@YAKK@Z:PROC				; MapVisId
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??0CPSurface@@QAE@PAUSurfaceInitStr@@@Z:PROC	; CPSurface::CPSurface
EXTRN	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z:PROC ; ConvertRecttoVBounds
EXTRN	?GetSound@CPButtonObject@@QBEHH@Z:PROC		; CPButtonObject::GetSound
EXTRN	?SetSound@CPButtonObject@@QAEXHH@Z:PROC		; CPButtonObject::SetSound
EXTRN	?AddView@CPButtonObject@@QAEXPAVCPButtonView@@@Z:PROC ; CPButtonObject::AddView
EXTRN	?HandleMouseEvent@CPButtonObject@@QAEXH@Z:PROC	; CPButtonObject::HandleMouseEvent
EXTRN	?HandleEvent@CPButtonObject@@QAEXH@Z:PROC	; CPButtonObject::HandleEvent
EXTRN	?UpdateStatus@CPButtonObject@@QAEXXZ:PROC	; CPButtonObject::UpdateStatus
EXTRN	??0CPButtonObject@@QAE@PAUButtonObjectInitStr@@@Z:PROC ; CPButtonObject::CPButtonObject
EXTRN	??1CPButtonObject@@QAE@XZ:PROC			; CPButtonObject::~CPButtonObject
EXTRN	?GetId@CPButtonView@@QAEHXZ:PROC		; CPButtonView::GetId
EXTRN	?GetParentButton@CPButtonView@@QAEHXZ:PROC	; CPButtonView::GetParentButton
EXTRN	??0CPButtonView@@QAE@PAUButtonViewInitStr@@@Z:PROC ; CPButtonView::CPButtonView
EXTRN	??1CPButtonView@@QAE@XZ:PROC			; CPButtonView::~CPButtonView
EXTRN	?ChangeToCNI@ICPClass@@QAEXXZ:PROC		; ICPClass::ChangeToCNI
EXTRN	??0ICPClass@@QAE@XZ:PROC			; ICPClass::ICPClass
EXTRN	??1ICPClass@@QAE@XZ:PROC			; ICPClass::~ICPClass
EXTRN	?SetOwnship@ICPClass@@QAEXXZ:PROC		; ICPClass::SetOwnship
EXTRN	?GetTertiaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ:PROC ; ICPClass::GetTertiaryExclusiveButton
EXTRN	?GetSecondaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ:PROC ; ICPClass::GetSecondaryExclusiveButton
EXTRN	?InitPrimaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z:PROC ; ICPClass::InitPrimaryExclusiveButton
EXTRN	?InitTertiaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z:PROC ; ICPClass::InitTertiaryExclusiveButton
EXTRN	?GetPrimaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ:PROC ; ICPClass::GetPrimaryExclusiveButton
EXTRN	??0CPPanel@@QAE@PAUPanelInitStr@@@Z:PROC	; CPPanel::CPPanel
EXTRN	?Exec@CPPanel@@QAEXPAVSimBaseClass@@H@Z:PROC	; CPPanel::Exec
EXTRN	?CreateLitSurfaces@CPPanel@@QAEXM@Z:PROC	; CPPanel::CreateLitSurfaces
EXTRN	?DiscardLitSurfaces@CPPanel@@QAEXXZ:PROC	; CPPanel::DiscardLitSurfaces
EXTRN	?SetPalette@CPPanel@@QAEXXZ:PROC		; CPPanel::SetPalette
EXTRN	?DisplayBlit@CPPanel@@QAEXXZ:PROC		; CPPanel::DisplayBlit
EXTRN	?DisplayDraw@CPPanel@@QAEXXZ:PROC		; CPPanel::DisplayDraw
EXTRN	?DoGeometry@CPPanel@@QAEHXZ:PROC		; CPPanel::DoGeometry
EXTRN	?Dispatch@CPPanel@@QAEHPAHHHH@Z:PROC		; CPPanel::Dispatch
EXTRN	?POVDispatch@CPPanel@@QAEHH@Z:PROC		; CPPanel::POVDispatch
EXTRN	?SetDirtyFlags@CPPanel@@QAEXXZ:PROC		; CPPanel::SetDirtyFlags
EXTRN	?GetViewportBounds@CPPanel@@QAEHPAUViewportBounds@@H@Z:PROC ; CPPanel::GetViewportBounds
EXTRN	?DisplayBlit3D@CPPanel@@QAEXXZ:PROC		; CPPanel::DisplayBlit3D
EXTRN	??0CPCursor@@QAE@PAUCursorInitStr@@@Z:PROC	; CPCursor::CPCursor
EXTRN	??0CPMisc@@QAE@XZ:PROC				; CPMisc::CPMisc
EXTRN	??0CPMirror@@QAE@ABUObjectInitStr@@@Z:PROC	; CPMirror::CPMirror
EXTRN	_ResFOpen:PROC
EXTRN	_ResFClose:PROC
EXTRN	_ResExistFile:PROC
EXTRN	??0CPChevron@@QAE@PAUObjectInitStr@@PAUChevronInitStr@@@Z:PROC ; CPChevron::CPChevron
EXTRN	??0CPLight@@QAE@PAUObjectInitStr@@PAULightButtonInitStr@@@Z:PROC ; CPLight::CPLight
EXTRN	??0CPIndicator@@QAE@PAUObjectInitStr@@PAUIndicatorInitStr@@@Z:PROC ; CPIndicator::CPIndicator
EXTRN	??0CPDial@@QAE@PAUObjectInitStr@@PAUDialInitStr@@@Z:PROC ; CPDial::CPDial
EXTRN	??0KneeBoard@@QAE@XZ:PROC			; KneeBoard::KneeBoard
EXTRN	??0CPDed@@QAE@PAUObjectInitStr@@PAUDedInitStr@@@Z:PROC ; CPDed::CPDed
EXTRN	??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z:PROC ; CPAdi::CPAdi
EXTRN	??0CPMachAsi@@QAE@PAUObjectInitStr@@PAUMachAsiInitStr@@@Z:PROC ; CPMachAsi::CPMachAsi
EXTRN	??0CPHsi@@QAE@XZ:PROC				; CPHsi::CPHsi
EXTRN	??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z:PROC ; CPHsiView::CPHsiView
EXTRN	??0CPDigits@@QAE@PAUObjectInitStr@@PAUDigitsInitStr@@@Z:PROC ; CPDigits::CPDigits
EXTRN	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::RegisterTimeUpdateCB
EXTRN	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z:PROC ; TimeManager::ReleaseTimeUpdateCB
EXTRN	??0CPLiftLine@@QAE@PAUObjectInitStr@@PAULiftInitStr@@@Z:PROC ; CPLiftLine::CPLiftLine
EXTRN	?GetSoundIndex@CPSoundList@@QAEHH@Z:PROC	; CPSoundList::GetSoundIndex
EXTRN	?AddSound@CPSoundList@@QAEXHH@Z:PROC		; CPSoundList::AddSound
EXTRN	??0CPSoundList@@QAE@H@Z:PROC			; CPSoundList::CPSoundList
EXTRN	??1CPSoundList@@QAE@XZ:PROC			; CPSoundList::~CPSoundList
EXTRN	?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z:PROC	; MFDClass::SetNewMode
EXTRN	??0CPText@@QAE@PAUObjectInitStr@@H@Z:PROC	; CPText::CPText
EXTRN	?ReferenceWithFetch@ObjectParent@@QAEXXZ:PROC	; ObjectParent::ReferenceWithFetch
EXTRN	?Release@ObjectParent@@QAEX_N@Z:PROC		; ObjectParent::Release
EXTRN	?SetTextureSet@ObjectInstance@@QAEXH@Z:PROC	; ObjectInstance::SetTextureSet
EXTRN	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z:PROC ; DrawableBSP::DrawableBSP
EXTRN	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z:PROC	; DrawableBSP::AttachChild
EXTRN	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z:PROC	; DrawableBSP::DetachChild
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	??0CPKneeView@@QAE@PAUObjectInitStr@@PAVKneeBoard@@@Z:PROC ; CPKneeView::CPKneeView
EXTRN	?GetHudColor@HudClass@@QAEKXZ:PROC		; HudClass::GetHudColor
EXTRN	?SetHudColor@HudClass@@QAEXK@Z:PROC		; HudClass::SetHudColor
EXTRN	?SetLightLevel@HudClass@@QAEXXZ:PROC		; HudClass::SetLightLevel
EXTRN	?GetScalesSwitch@HudClass@@QAEHXZ:PROC		; HudClass::GetScalesSwitch
EXTRN	?SetScalesSwitch@HudClass@@QAEXW4ScalesSwitch@1@@Z:PROC ; HudClass::SetScalesSwitch
EXTRN	?GetFPMSwitch@HudClass@@QAEHXZ:PROC		; HudClass::GetFPMSwitch
EXTRN	?SetFPMSwitch@HudClass@@QAEXW4FPMSwitch@1@@Z:PROC ; HudClass::SetFPMSwitch
EXTRN	?GetDEDSwitch@HudClass@@QAEHXZ:PROC		; HudClass::GetDEDSwitch
EXTRN	?SetDEDSwitch@HudClass@@QAEXW4DEDSwitch@1@@Z:PROC ; HudClass::SetDEDSwitch
EXTRN	?GetVelocitySwitch@HudClass@@QAEHXZ:PROC	; HudClass::GetVelocitySwitch
EXTRN	?SetVelocitySwitch@HudClass@@QAEXW4VelocitySwitch@1@@Z:PROC ; HudClass::SetVelocitySwitch
EXTRN	?GetRadarSwitch@HudClass@@QAEHXZ:PROC		; HudClass::GetRadarSwitch
EXTRN	?SetRadarSwitch@HudClass@@QAEXW4RadarSwitch@1@@Z:PROC ; HudClass::SetRadarSwitch
EXTRN	?GetBrightnessSwitch@HudClass@@QAEHXZ:PROC	; HudClass::GetBrightnessSwitch
EXTRN	?SetBrightnessSwitch@HudClass@@QAEXW4BrightnessSwitch@1@@Z:PROC ; HudClass::SetBrightnessSwitch
EXTRN	?SimICPAA@@YAXKHPAX@Z:PROC			; SimICPAA
EXTRN	?SimICPAG@@YAXKHPAX@Z:PROC			; SimICPAG
EXTRN	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z:PROC	; VoiceManager::ChangeRadioFreq
EXTRN	?GetRadioFreq@VoiceManager@@QAEHH@Z:PROC	; VoiceManager::GetRadioFreq
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?_BADOFF@std@@3_JB:QWORD			; std::_BADOFF
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?LogBook@@3VLogBookData@@A:BYTE			; LogBook
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?Origin@@3UTpoint@@B:BYTE			; Origin
EXTRN	?IMatrix@@3UTrotation@@B:BYTE			; IMatrix
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A:DWORD ; SimulationLoopControl::currentMode
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?TheTimeManager@@3VTimeManager@@A:BYTE		; TheTimeManager
EXTRN	?TheTimeOfDay@@3VCTimeOfDay@@A:BYTE		; TheTimeOfDay
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?MfdDisplay@@3PAPAVMFDClass@@A:BYTE		; MfdDisplay
EXTRN	?TheObjectList@@3PAVObjectParent@@A:DWORD	; TheObjectList
EXTRN	?FalconDataDirectory@@3PADA:BYTE		; FalconDataDirectory
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	?g_bEnableCockpitVerifier@@3_NA:BYTE		; g_bEnableCockpitVerifier
EXTRN	?g_bStartIn3Dpit@@3_NA:BYTE			; g_bStartIn3Dpit
EXTRN	?g_b2DPitWingFOVFix@@3_NA:BYTE			; g_b2DPitWingFOVFix
EXTRN	?g_nShow2DPitErrors@@3HA:DWORD			; g_nShow2DPitErrors
EXTRN	?g_bResizeUsesResMgr@@3_NA:BYTE			; g_bResizeUsesResMgr
EXTRN	?g_bUse_DX_Engine@@3_NA:BYTE			; g_bUse_DX_Engine
EXTRN	?g_fHUDonlySize@@3MA:DWORD			; g_fHUDonlySize
EXTRN	?FalconCockpitThrDirectory@@3PADA:BYTE		; FalconCockpitThrDirectory
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_gDebugLineNum DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@be32b8c1
CONST	SEGMENT
__real@be32b8c1 DD 0be32b8c1r			; -0.174533
CONST	ENDS
;	COMDAT __real@bd0efa34
CONST	SEGMENT
__real@bd0efa34 DD 0bd0efa34r			; -0.0349066
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e570a3d
CONST	SEGMENT
__real@3e570a3d DD 03e570a3dr			; 0.21
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CImageFileMemory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImageFileMemory@@8 DD FLAT:??_R0?AVCImageFileMemory@@@8 ; CImageFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R2CImageFileMemory@@8
rdata$r	SEGMENT
??_R2CImageFileMemory@@8 DD FLAT:??_R1A@?0A@EA@CImageFileMemory@@8 ; CImageFileMemory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R3CImageFileMemory@@8
rdata$r	SEGMENT
??_R3CImageFileMemory@@8 DD 00H				; CImageFileMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImageFileMemory@@@8
_DATA	SEGMENT
??_R0?AVCImageFileMemory@@@8 DD FLAT:??_7type_info@@6B@	; CImageFileMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImageFileMemory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CImageFileMemory@@6B@
rdata$r	SEGMENT
??_R4CImageFileMemory@@6B@ DD 00H			; CImageFileMemory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImageFileMemory@@@8
	DD	FLAT:??_R3CImageFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileMemory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileMemory@@8 DD FLAT:??_R0?AVCFileMemory@@@8 ; CFileMemory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileMemory@@8
rdata$r	SEGMENT
??_R2CFileMemory@@8 DD FLAT:??_R1A@?0A@EA@CFileMemory@@8 ; CFileMemory::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileMemory@@8
rdata$r	SEGMENT
??_R3CFileMemory@@8 DD 00H				; CFileMemory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileMemory@@@8
_DATA	SEGMENT
??_R0?AVCFileMemory@@@8 DD FLAT:??_7type_info@@6B@	; CFileMemory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileMemory@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFileMemory@@6B@
rdata$r	SEGMENT
??_R4CFileMemory@@6B@ DD 00H				; CFileMemory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileMemory@@@8
	DD	FLAT:??_R3CFileMemory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileIO@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileIO@@8 DD FLAT:??_R0?AVCFileIO@@@8	; CFileIO::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileIO@@8
rdata$r	SEGMENT
??_R2CFileIO@@8 DD FLAT:??_R1A@?0A@EA@CFileIO@@8	; CFileIO::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileIO@@8
rdata$r	SEGMENT
??_R3CFileIO@@8 DD 00H					; CFileIO::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileIO@@@8
_DATA	SEGMENT
??_R0?AVCFileIO@@@8 DD FLAT:??_7type_info@@6B@		; CFileIO `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileIO@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFileIO@@6B@
rdata$r	SEGMENT
??_R4CFileIO@@6B@ DD 00H				; CFileIO::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileIO@@@8
	DD	FLAT:??_R3CFileIO@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
_DATA	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
_DATA	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
_DATA	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
_DATA	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	050H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCGKJIDE@art?2ckptart?2?$AA@
CONST	SEGMENT
??_C@_0N@LCGKJIDE@art?2ckptart?2?$AA@ DB 'art\ckptart\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHKGGCCB@?$CFs?2?$CFd?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08JHKGGCCB@?$CFs?2?$CFd?2?$CFs?$AA@ DB '%s\%d\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DNEKOHB@Weapons?$AA@
CONST	SEGMENT
??_C@_07DNEKOHB@Weapons?$AA@ DB 'Weapons', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HJHEFHPP@MasterArm?$AA@
CONST	SEGMENT
??_C@_09HJHEFHPP@MasterArm?$AA@ DB 'MasterArm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIKAOFNO@Comm2?$AA@
CONST	SEGMENT
??_C@_05LIKAOFNO@Comm2?$AA@ DB 'Comm2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JNPIHJOC@COMMS?$AA@
CONST	SEGMENT
??_C@_05JNPIHJOC@COMMS?$AA@ DB 'COMMS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDINLGBN@Comm1?$AA@
CONST	SEGMENT
??_C@_05JDINLGBN@Comm1?$AA@ DB 'Comm1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDIDCFHH@OTW?$AA@
CONST	SEGMENT
??_C@_03IDIDCFHH@OTW?$AA@ DB 'OTW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KNKPIPFB@Mode?$AA@
CONST	SEGMENT
??_C@_04KNKPIPFB@Mode?$AA@ DB 'Mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFKIFFIM@Cockpit?5View?$AA@
CONST	SEGMENT
??_C@_0N@LFKIFFIM@Cockpit?5View?$AA@ DB 'Cockpit View', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DILOOOHJ@WideView?$AA@
CONST	SEGMENT
??_C@_08DILOOOHJ@WideView?$AA@ DB 'WideView', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIGKNHHL@Laser?$AA@
CONST	SEGMENT
??_C@_05LIGKNHHL@Laser?$AA@ DB 'Laser', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GEFBFHJJ@LaserST?$AA@
CONST	SEGMENT
??_C@_07GEFBFHJJ@LaserST?$AA@ DB 'LaserST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MPCCOHIH@Bullseye?$AA@
CONST	SEGMENT
??_C@_08MPCCOHIH@Bullseye?$AA@ DB 'Bullseye', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PPLJKMEA@BullseyeInfoOnMFD?$AA@
CONST	SEGMENT
??_C@_0BC@PPLJKMEA@BullseyeInfoOnMFD?$AA@ DB 'BullseyeInfoOnMFD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GHALBOOF@Number?5Selection?$AA@
CONST	SEGMENT
??_C@_0BB@GHALBOOF@Number?5Selection?$AA@ DB 'Number Selection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FKEDIMOB@Mode?5Selection?$AA@
CONST	SEGMENT
??_C@_0P@FKEDIMOB@Mode?5Selection?$AA@ DB 'Mode Selection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BPFOJJDA@PGM?5?$CFd?5Flare?5SI?$AA@
CONST	SEGMENT
??_C@_0BA@BPFOJJDA@PGM?5?$CFd?5Flare?5SI?$AA@ DB 'PGM %d Flare SI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNEFABGJ@PGM?5?$CFd?5Flare?5SQ?$AA@
CONST	SEGMENT
??_C@_0BA@JNEFABGJ@PGM?5?$CFd?5Flare?5SQ?$AA@ DB 'PGM %d Flare SQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CLKFAHH@PGM?5?$CFd?5Flare?5BI?$AA@
CONST	SEGMENT
??_C@_0BA@CLKFAHH@PGM?5?$CFd?5Flare?5BI?$AA@ DB 'PGM %d Flare BI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IAKBMICO@PGM?5?$CFd?5Flare?5BQ?$AA@
CONST	SEGMENT
??_C@_0BA@IAKBMICO@PGM?5?$CFd?5Flare?5BQ?$AA@ DB 'PGM %d Flare BQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OGEOINI@PGM?5?$CFd?5Chaff?5SI?$AA@
CONST	SEGMENT
??_C@_0BA@OGEOINI@PGM?5?$CFd?5Chaff?5SI?$AA@ DB 'PGM %d Chaff SI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IMHPHAIB@PGM?5?$CFd?5Chaff?5SQ?$AA@
CONST	SEGMENT
??_C@_0BA@IMHPHAIB@PGM?5?$CFd?5Chaff?5SQ?$AA@ DB 'PGM %d Chaff SQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BDIACBJP@PGM?5?$CFd?5Chaff?5BI?$AA@
CONST	SEGMENT
??_C@_0BA@BDIACBJP@PGM?5?$CFd?5Chaff?5BI?$AA@ DB 'PGM %d Chaff BI', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JBJLLJMG@PGM?5?$CFd?5Chaff?5BQ?$AA@
CONST	SEGMENT
??_C@_0BA@JBJLLJMG@PGM?5?$CFd?5Chaff?5BQ?$AA@ DB 'PGM %d Chaff BQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMILMKPK@Bingo?$AA@
CONST	SEGMENT
??_C@_05OMILMKPK@Bingo?$AA@ DB 'Bingo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKLLFINE@Jammer?$AA@
CONST	SEGMENT
??_C@_06LKLLFINE@Jammer?$AA@ DB 'Jammer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EDBDLIIL@Chaff?5Bingo?$AA@
CONST	SEGMENT
??_C@_0M@EDBDLIIL@Chaff?5Bingo?$AA@ DB 'Chaff Bingo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKBELOEO@EWS?$AA@
CONST	SEGMENT
??_C@_03IKBELOEO@EWS?$AA@ DB 'EWS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BEMKKIIH@Flare?5Bingo?$AA@
CONST	SEGMENT
??_C@_0M@BEMKKIIH@Flare?5Bingo?$AA@ DB 'Flare Bingo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OKGOADC@Display?$CFd?9?$CFd?9csel?$AA@
CONST	SEGMENT
??_C@_0BC@OKGOADC@Display?$CFd?9?$CFd?9csel?$AA@ DB 'Display%d-%d-csel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CDNCFJNA@Display?$CFd?9?$CFd?9?$CFd?$AA@
CONST	SEGMENT
??_C@_0BA@CDNCFJNA@Display?$CFd?9?$CFd?9?$CFd?$AA@ DB 'Display%d-%d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FHMHNLHA@MFD?$AA@
CONST	SEGMENT
??_C@_03FHMHNLHA@MFD?$AA@ DB 'MFD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EHBHBFJG@Display?$CFd?$AA@
CONST	SEGMENT
??_C@_09EHBHBFJG@Display?$CFd?$AA@ DB 'Display%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PPIMLMDA@TertiaryMode?$AA@
CONST	SEGMENT
??_C@_0N@PPIMLMDA@TertiaryMode?$AA@ DB 'TertiaryMode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KLOHMKCE@TertiaryId?$AA@
CONST	SEGMENT
??_C@_0L@KLOHMKCE@TertiaryId?$AA@ DB 'TertiaryId', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLFKIDMD@SecondaryMode?$AA@
CONST	SEGMENT
??_C@_0O@OLFKIDMD@SecondaryMode?$AA@ DB 'SecondaryMode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MFIJDIMF@SecondaryId?$AA@
CONST	SEGMENT
??_C@_0M@MFIJDIMF@SecondaryId?$AA@ DB 'SecondaryId', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EBCIHLHK@PrimaryMode?$AA@
CONST	SEGMENT
??_C@_0M@EBCIHLHK@PrimaryMode?$AA@ DB 'PrimaryMode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HGKGPEIN@PrimaryId?$AA@
CONST	SEGMENT
??_C@_09HGKGPEIN@PrimaryId?$AA@ DB 'PrimaryId', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PGHGPEOM@?91?$AA@
CONST	SEGMENT
??_C@_02PGHGPEOM@?91?$AA@ DB '-1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PAMAFJJJ@ICP?$AA@
CONST	SEGMENT
??_C@_03PAMAFJJJ@ICP?$AA@ DB 'ICP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FNKDFNPE@MasterMode?$AA@
CONST	SEGMENT
??_C@_0L@FNKDFNPE@MasterMode?$AA@ DB 'MasterMode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKGFALAG@SymWheelPos?$AA@
CONST	SEGMENT
??_C@_0M@CKGFALAG@SymWheelPos?$AA@ DB 'SymWheelPos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHINJBAN@Alt?$AA@
CONST	SEGMENT
??_C@_03PHINJBAN@Alt?$AA@ DB 'Alt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LIFBEL@Velocity?$AA@
CONST	SEGMENT
??_C@_08LIFBEL@Velocity?$AA@ DB 'Velocity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJKPDIPK@FPM?$AA@
CONST	SEGMENT
??_C@_03EJKPDIPK@FPM?$AA@ DB 'FPM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JCLLFKLB@Brightness?$AA@
CONST	SEGMENT
??_C@_0L@JCLLFKLB@Brightness?$AA@ DB 'Brightness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBGCJLOH@Scales?$AA@
CONST	SEGMENT
??_C@_06GBGCJLOH@Scales?$AA@ DB 'Scales', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDLAFECJ@Hud?$AA@
CONST	SEGMENT
??_C@_03NDLAFECJ@Hud?$AA@ DB 'Hud', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDOBBJNA@Color?$AA@
CONST	SEGMENT
??_C@_05PDOBBJNA@Color?$AA@ DB 'Color', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LIABIPNP@?$CFs?2config?2?$CFs?4ini?$AA@
CONST	SEGMENT
??_C@_0BB@LIABIPNP@?$CFs?2config?2?$CFs?4ini?$AA@ DB '%s\config\%s.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LIBGJLEH@Cannot?5Change?5to?5Next?5Active?5Pan@
CONST	SEGMENT
??_C@_0CE@LIBGJLEH@Cannot?5Change?5to?5Next?5Active?5Pan@ DB 'Cannot Chan'
	DB	'ge to Next Active Panel', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLFHMCOD@needleradius?$AA@
CONST	SEGMENT
??_C@_0N@KLFHMCOD@needleradius?$AA@ DB 'needleradius', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MIGBCLAB@arclength?$AA@
CONST	SEGMENT
??_C@_09MIGBCLAB@arclength?$AA@ DB 'arclength', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KLEMNPPO@startangle?$AA@
CONST	SEGMENT
??_C@_0L@KLEMNPPO@startangle?$AA@ DB 'startangle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBLLDDAH@endlength?$AA@
CONST	SEGMENT
??_C@_09IBLLDDAH@endlength?$AA@ DB 'endlength', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPIGICAK@endangle?$AA@
CONST	SEGMENT
??_C@_08KPIGICAK@endangle?$AA@ DB 'endangle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EHBJIHOL@color9?$AA@
CONST	SEGMENT
??_C@_06EHBJIHOL@color9?$AA@ DB 'color9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOACLGKK@color8?$AA@
CONST	SEGMENT
??_C@_06FOACLGKK@color8?$AA@ DB 'color8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NJJKKKGF@color7?$AA@
CONST	SEGMENT
??_C@_06NJJKKKGF@color7?$AA@ DB 'color7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAIBJLCE@color6?$AA@
CONST	SEGMENT
??_C@_06MAIBJLCE@color6?$AA@ DB 'color6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLKMMIOH@color5?$AA@
CONST	SEGMENT
??_C@_06OLKMMIOH@color5?$AA@ DB 'color5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NMFHNMGB@warnflag?$AA@
CONST	SEGMENT
??_C@_08NMFHNMGB@warnflag?$AA@ DB 'warnflag', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCLHPJKG@color4?$AA@
CONST	SEGMENT
??_C@_06PCLHPJKG@color4?$AA@ DB 'color4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNPGGPGB@color3?$AA@
CONST	SEGMENT
??_C@_06LNPGGPGB@color3?$AA@ DB 'color3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFHPHAIB@backsrc?$AA@
CONST	SEGMENT
??_C@_07CFHPHAIB@backsrc?$AA@ DB 'backsrc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NCOBPHPA@backdest?$AA@
CONST	SEGMENT
??_C@_08NCOBPHPA@backdest?$AA@ DB 'backdest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BIMEBLHC@blitbackground?$AA@
CONST	SEGMENT
??_C@_0P@BIMEBLHC@blitbackground?$AA@ DB 'blitbackground', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LKIEMFDP@ilslimits?$AA@
CONST	SEGMENT
??_C@_09LKIEMFDP@ilslimits?$AA@ DB 'ilslimits', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONEIPLK@sound2?$AA@
CONST	SEGMENT
??_C@_06ONEIPLK@sound2?$AA@ DB 'sound2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFPJNMHJ@sound1?$AA@
CONST	SEGMENT
??_C@_06CFPJNMHJ@sound1?$AA@ DB 'sound1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKJCMADO@delay?$AA@
CONST	SEGMENT
??_C@_05EKJCMADO@delay?$AA@ DB 'delay', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MDIPHOIK@parentbutton?$AA@
CONST	SEGMENT
??_C@_0N@MDIPHOIK@parentbutton?$AA@ DB 'parentbutton', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DLKJFLMF@initstate?$AA@
CONST	SEGMENT
??_C@_09DLKJFLMF@initstate?$AA@ DB 'initstate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CFKBOPCI@states?$AA@
CONST	SEGMENT
??_C@_06CFKBOPCI@states?$AA@ DB 'states', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%s %d %d %d '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLEMALLF@osb4?$AA@
CONST	SEGMENT
??_C@_04KLEMALLF@osb4?$AA@ DB 'osb4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEANJNHC@osb3?$AA@
CONST	SEGMENT
??_C@_04OEANJNHC@osb3?$AA@ DB 'osb3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NNHEDOLN@osbright?$AA@
CONST	SEGMENT
??_C@_08NNHEDOLN@osbright?$AA@ DB 'osbright', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMJJGAHL@osbleft?$AA@
CONST	SEGMENT
??_C@_07FMJJGAHL@osbleft?$AA@ DB 'osbleft', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PCCKKBCO@cursorid?$AA@
CONST	SEGMENT
??_C@_08PCCKKBCO@cursorid?$AA@ DB 'cursorid', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BHEPCJLO@masktop?$AA@
CONST	SEGMENT
??_C@_07BHEPCJLO@masktop?$AA@ DB 'masktop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FPJEKPBD@buttonviews?$AA@
CONST	SEGMENT
??_C@_0M@FPJEKPBD@buttonviews?$AA@ DB 'buttonviews', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPLKJBI@objects?$AA@
CONST	SEGMENT
??_C@_07JPLKJBI@objects?$AA@ DB 'objects', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJCOLNBB@opaque?$AA@
CONST	SEGMENT
??_C@_06CJCOLNBB@opaque?$AA@ DB 'opaque', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEEDCJLA@transparent?$AA@
CONST	SEGMENT
??_C@_0M@CEEDCJLA@transparent?$AA@ DB 'transparent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LGPKAOB@?$CFd?5?$CFd?5?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@LGPKAOB@?$CFd?5?$CFd?5?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%'
	DB	'd %d %s %d %d %d %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
CONST	SEGMENT
??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@ DB 0aH, '=;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGPNIDBO@surfaces?$AA@
CONST	SEGMENT
??_C@_08FGPNIDBO@surfaces?$AA@ DB 'surfaces', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%'
	DB	'd %d %d %d %d %d %d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CCBBEOKE@adjpanels?$AA@
CONST	SEGMENT
??_C@_09CCBBEOKE@adjpanels?$AA@ DB 'adjpanels', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PEDCGPJO@mousebounds?$AA@
CONST	SEGMENT
??_C@_0M@PEDCGPJO@mousebounds?$AA@ DB 'mousebounds', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEJHJGKM@?$CFs?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_07KEJHJGKM@?$CFs?$CFs?2?$CFs?$AA@ DB '%s%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IHJMLMAG@renderneedle?$AA@
CONST	SEGMENT
??_C@_0N@IHJMLMAG@renderneedle?$AA@ DB 'renderneedle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGPFHPFG@bsurface?$AA@
CONST	SEGMENT
??_C@_08HGPFHPFG@bsurface?$AA@ DB 'bsurface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLADEKNC@bdestloc?$AA@
CONST	SEGMENT
??_C@_08BLADEKNC@bdestloc?$AA@ DB 'bdestloc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBEABAHD@bsrcloc?$AA@
CONST	SEGMENT
??_C@_07DBEABAHD@bsrcloc?$AA@ DB 'bsrcloc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KEONFOCA@color2?$AA@
CONST	SEGMENT
??_C@_06KEONFOCA@color2?$AA@ DB 'color2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPMAANOD@color1?$AA@
CONST	SEGMENT
??_C@_06IPMAANOD@color1?$AA@ DB 'color1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LJAIHLIM@radius2?$AA@
CONST	SEGMENT
??_C@_07LJAIHLIM@radius2?$AA@ DB 'radius2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JCCFCIEP@radius1?$AA@
CONST	SEGMENT
??_C@_07JCCFCIEP@radius1?$AA@ DB 'radius1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ILDOBJAO@radius0?$AA@
CONST	SEGMENT
??_C@_07ILDOBJAO@radius0?$AA@ DB 'radius0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPGIDCJA@points?$AA@
CONST	SEGMENT
??_C@_06GPGIDCJA@points?$AA@ DB 'points', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJACGLBK@numendpoints?$AA@
CONST	SEGMENT
??_C@_0N@NJACGLBK@numendpoints?$AA@ DB 'numendpoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NEOMLJGJ@vertical?$AA@
CONST	SEGMENT
??_C@_08NEOMLJGJ@vertical?$AA@ DB 'vertical', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMMKHPOB@horizontal?$AA@
CONST	SEGMENT
??_C@_0L@LMMKHPOB@horizontal?$AA@ DB 'horizontal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KPMDGEHG@orientation?$AA@
CONST	SEGMENT
??_C@_0M@KPMDGEHG@orientation?$AA@ DB 'orientation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NNIOPPFJ@calibrationval?$AA@
CONST	SEGMENT
??_C@_0P@NNIOPPFJ@calibrationval?$AA@ DB 'calibrationval', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGFGJBPO@numtapes?$AA@
CONST	SEGMENT
??_C@_08JGFGJBPO@numtapes?$AA@ DB 'numtapes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KOFOHMOB@maxpos?$AA@
CONST	SEGMENT
??_C@_06KOFOHMOB@maxpos?$AA@ DB 'maxpos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNKNJMKO@minpos?$AA@
CONST	SEGMENT
??_C@_06KNKNJMKO@minpos?$AA@ DB 'minpos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMPBAAKJ@maxval?$AA@
CONST	SEGMENT
??_C@_06EMPBAAKJ@maxval?$AA@ DB 'maxval', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPACOAOG@minval?$AA@
CONST	SEGMENT
??_C@_06EPACOAOG@minval?$AA@ DB 'minval', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LEFEFEBM@persistant?$AA@
CONST	SEGMENT
??_C@_0L@LEFEFEBM@persistant?$AA@ DB 'persistant', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EIFFFPLD@numdigits?$AA@
CONST	SEGMENT
??_C@_09EIFFFPLD@numdigits?$AA@ DB 'numdigits', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJALOCCP@hotspot?$AA@
CONST	SEGMENT
??_C@_07KJALOCCP@hotspot?$AA@ DB 'hotspot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FLMALHKC@srcloc?$AA@
CONST	SEGMENT
??_C@_06FLMALHKC@srcloc?$AA@ DB 'srcloc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAJGBDEG@pfl?$AA@
CONST	SEGMENT
??_C@_03DAJGBDEG@pfl?$AA@ DB 'pfl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFHCOHNP@ded?$AA@
CONST	SEGMENT
??_C@_03CFHCOHNP@ded?$AA@ DB 'ded', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NCIJPOHC@dedtype?$AA@
CONST	SEGMENT
??_C@_07NCIJPOHC@dedtype?$AA@ DB 'dedtype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPHMLOFF@?$CFlx?$AA@
CONST	SEGMENT
??_C@_03OPHMLOFF@?$CFlx?$AA@ DB '%lx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGNLDMKC@color0?$AA@
CONST	SEGMENT
??_C@_06JGNLDMKC@color0?$AA@ DB 'color0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KGDEIIEF@pantiltlabel?$AA@
CONST	SEGMENT
??_C@_0N@KGDEIIEF@pantiltlabel?$AA@ DB 'pantiltlabel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
CONST	SEGMENT
??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@ DB '%f %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GJFAOIEN@pantilt?$AA@
CONST	SEGMENT
??_C@_07GJFAOIEN@pantilt?$AA@ DB 'pantilt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBNFHHBP@numstrings?$AA@
CONST	SEGMENT
??_C@_0L@FBNFHHBP@numstrings?$AA@ DB 'numstrings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BALDINCG@callbackslot?$AA@
CONST	SEGMENT
??_C@_0N@BALDINCG@callbackslot?$AA@ DB 'callbackslot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKLNCIDH@destloc?$AA@
CONST	SEGMENT
??_C@_07OKLNCIDH@destloc?$AA@ DB 'destloc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MCNIDEEJ@cyclebits?$AA@
CONST	SEGMENT
??_C@_09MCNIDEEJ@cyclebits?$AA@ DB 'cyclebits', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDIJOBFO@buffersize?$AA@
CONST	SEGMENT
??_C@_0L@JDIJOBFO@buffersize?$AA@ DB 'buffersize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@ DB '%s\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGFHNNDO@?$CFs?$CFd?2?$CFs?$AA@
CONST	SEGMENT
??_C@_07HGFHNNDO@?$CFs?$CFd?2?$CFs?$AA@ DB '%s%d\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@ DB '%s\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DECLHMDM@?$CK?1?2?$AA@
CONST	SEGMENT
??_C@_03DECLHMDM@?$CK?1?2?$AA@ DB '*/\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNNDEAND@entry?$AA@
CONST	SEGMENT
??_C@_05HNNDEAND@entry?$AA@ DB 'entry', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CBLDBPFN@?1?1?$AA@
CONST	SEGMENT
??_C@_02CBLDBPFN@?1?1?$AA@ DB '//', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPHEHNFF@hudcolor?$AA@
CONST	SEGMENT
??_C@_08NPHEHNFF@hudcolor?$AA@ DB 'hudcolor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIAALGLF@instLight?$AA@
CONST	SEGMENT
??_C@_09NIAALGLF@instLight?$AA@ DB 'instLight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNOFBBI@?$CFx?$AA@
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx?$AA@ DB '%x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCFIFBMP@floodlight?$AA@
CONST	SEGMENT
??_C@_0L@FCFIFBMP@floodlight?$AA@ DB 'floodlight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOFAMBBG@altpanel?$AA@
CONST	SEGMENT
??_C@_08DOFAMBBG@altpanel?$AA@ DB 'altpanel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@ DB '%d %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CPIJGJKD@cockpit2d?$AA@
CONST	SEGMENT
??_C@_09CPIJGJKD@cockpit2d?$AA@ DB 'cockpit2d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CBADCHBJ@dogeometry?$AA@
CONST	SEGMENT
??_C@_0L@CBADCHBJ@dogeometry?$AA@ DB 'dogeometry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LICNMFFG@templatefile?$AA@
CONST	SEGMENT
??_C@_0N@LICNMFFG@templatefile?$AA@ DB 'templatefile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NEONNCFF@labelfont?$AA@
CONST	SEGMENT
??_C@_09NEONNCFF@labelfont?$AA@ DB 'labelfont', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DOHPBHPD@saboxfont?$AA@
CONST	SEGMENT
??_C@_09DOHPBHPD@saboxfont?$AA@ DB 'saboxfont', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OABGFHLI@generalfont?$AA@
CONST	SEGMENT
??_C@_0M@OABGFHLI@generalfont?$AA@ DB 'generalfont', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPDLIEGK@kneefont?$AA@
CONST	SEGMENT
??_C@_08PPDLIEGK@kneefont?$AA@ DB 'kneefont', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MOJAANJ@popupfont?$AA@
CONST	SEGMENT
??_C@_09MOJAANJ@popupfont?$AA@ DB 'popupfont', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PILKJPLJ@dedfont?$AA@
CONST	SEGMENT
??_C@_07PILKJPLJ@dedfont?$AA@ DB 'dedfont', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGBNJOAP@mfdfont?$AA@
CONST	SEGMENT
??_C@_07NGBNJOAP@mfdfont?$AA@ DB 'mfdfont', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIMLBGDI@hudfont?$AA@
CONST	SEGMENT
??_C@_07MIMLBGDI@hudfont?$AA@ DB 'hudfont', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DBHGAIJM@mouseborder?$AA@
CONST	SEGMENT
??_C@_0M@DBHGAIJM@mouseborder?$AA@ DB 'mouseborder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBIMEFN@numcursors?$AA@
CONST	SEGMENT
??_C@_0L@DBIMEFN@numcursors?$AA@ DB 'numcursors', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HLMMFAAF@numbuttonviews?$AA@
CONST	SEGMENT
??_C@_0P@HLMMFAAF@numbuttonviews?$AA@ DB 'numbuttonviews', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOPHKBNK@numbuttons?$AA@
CONST	SEGMENT
??_C@_0L@LOPHKBNK@numbuttons?$AA@ DB 'numbuttons', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHKEEBMF@numsounds?$AA@
CONST	SEGMENT
??_C@_09KHKEEBMF@numsounds?$AA@ DB 'numsounds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LILAFCIM@numobjects?$AA@
CONST	SEGMENT
??_C@_0L@LILAFCIM@numobjects?$AA@ DB 'numobjects', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCGEEKAC@numpanels?$AA@
CONST	SEGMENT
??_C@_09GCGEEKAC@numpanels?$AA@ DB 'numpanels', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03FDDKCNFF@rwr?$AA@
CONST	SEGMENT
??_C@_03FDDKCNFF@rwr?$AA@ DB 'rwr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HDICPLBH@hud?$AA@
CONST	SEGMENT
??_C@_03HDICPLBH@hud?$AA@ DB 'hud', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCMGIDMK@mfd4?$AA@
CONST	SEGMENT
??_C@_04LCMGIDMK@mfd4?$AA@ DB 'mfd4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNIHBFAN@mfd3?$AA@
CONST	SEGMENT
??_C@_04PNIHBFAN@mfd3?$AA@ DB 'mfd3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEAJBMEO@mfdright?$AA@
CONST	SEGMENT
??_C@_08KEAJBMEO@mfdright?$AA@ DB 'mfdright', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@ DB '%d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PNADDHHC@mfdleft?$AA@
CONST	SEGMENT
??_C@_07PNADDHHC@mfdleft?$AA@ DB 'mfdleft', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBCOJPLI@numsurfaces?$AA@
CONST	SEGMENT
??_C@_0M@KBCOJPLI@numsurfaces?$AA@ DB 'numsurfaces', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PAJMBCIO@?$CDend?$AA@
CONST	SEGMENT
??_C@_04PAJMBCIO@?$CDend?$AA@ DB '#end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@
CONST	SEGMENT
??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@ DB '%d.%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
CONST	SEGMENT
??_C@_03OCLOCGE@?$DN?$DL?6?$AA@ DB '=;', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAKJDFBN@No?5errors?4?$AA@
CONST	SEGMENT
??_C@_0L@JAKJDFBN@No?5errors?4?$AA@ DB 'No errors.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HICFCKNL@Falcon?54?40?5Cockpit?5Verifier?$AA@
CONST	SEGMENT
??_C@_0BM@HICFCKNL@Falcon?54?40?5Cockpit?5Verifier?$AA@ DB 'Falcon 4.0 Co'
	DB	'ckpit Verifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0NG@IJGPFJLB@Verify?5error?5detected?$CB?6?6NumSurfa@
CONST	SEGMENT
??_C@_0NG@IJGPFJLB@Verify?5error?5detected?$CB?6?6NumSurfa@ DB 'Verify er'
	DB	'ror detected!', 0aH, 0aH, 'NumSurfaces:', 09H, '%.3d', 09H, 09H
	DB	'SurfaceTally:', 09H, '%.3d', 0aH, 'NumObjects:', 09H, '%.3d', 09H
	DB	09H, 'ObjectTally:', 09H, '%.3d', 0aH, 'NumPanels:', 09H, '%.3'
	DB	'd', 09H, 09H, 'PanelTally:', 09H, '%.3d', 0aH, 'NumButtons:', 09H
	DB	'%.3d', 09H, 09H, 'ButtonTally:', 09H, '%.3d', 0aH, 'NumButton'
	DB	'Views:', 09H, '%.3d', 09H, 09H, 'ButtonViewTally:', 09H, '%.3'
	DB	'd', 09H, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DLLMHPOI@mpCockpitCritSec?$AA@
CONST	SEGMENT
??_C@_0BB@DLLMHPOI@mpCockpitCritSec?$AA@ DB 'mpCockpitCritSec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HKFEAHGA@BUFFER?$AA@
CONST	SEGMENT
??_C@_06HKFEAHGA@BUFFER?$AA@ DB 'BUFFER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPIEMBDF@MIRROR?$AA@
CONST	SEGMENT
??_C@_06LPIEMBDF@MIRROR?$AA@ DB 'MIRROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCGEMODB@KNEEVIEW?$AA@
CONST	SEGMENT
??_C@_08OCGEMODB@KNEEVIEW?$AA@ DB 'KNEEVIEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEGDOMG@SOUND?$AA@
CONST	SEGMENT
??_C@_05MEGDOMG@SOUND?$AA@ DB 'SOUND', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPFKDEJE@HSI?$AA@
CONST	SEGMENT
??_C@_03MPFKDEJE@HSI?$AA@ DB 'HSI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EHJPLJNA@MACHASI?$AA@
CONST	SEGMENT
??_C@_07EHJPLJNA@MACHASI?$AA@ DB 'MACHASI', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIIJCKKD@DED?$AA@
CONST	SEGMENT
??_C@_03CIIJCKKD@DED?$AA@ DB 'DED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDBDBPON@CURSOR?$AA@
CONST	SEGMENT
??_C@_06CDBDBPON@CURSOR?$AA@ DB 'CURSOR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPCGAGCC@DIAL?$AA@
CONST	SEGMENT
??_C@_04FPCGAGCC@DIAL?$AA@ DB 'DIAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLDLMOOL@ADI?$AA@
CONST	SEGMENT
??_C@_03KLDLMOOL@ADI?$AA@ DB 'ADI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGMDBFK@DIGITS?$AA@
CONST	SEGMENT
??_C@_06MGMDBFK@DIGITS?$AA@ DB 'DIGITS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EPLFPLCO@INDICATOR?$AA@
CONST	SEGMENT
??_C@_09EPLFPLCO@INDICATOR?$AA@ DB 'INDICATOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOEGIJJP@BUTTONVIEW?$AA@
CONST	SEGMENT
??_C@_0L@OOEGIJJP@BUTTONVIEW?$AA@ DB 'BUTTONVIEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBIEIEBN@BUTTON?$AA@
CONST	SEGMENT
??_C@_06HBIEIEBN@BUTTON?$AA@ DB 'BUTTON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFNJIKNP@LIGHT?$AA@
CONST	SEGMENT
??_C@_05MFNJIKNP@LIGHT?$AA@ DB 'LIGHT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGHGEHHO@PANEL?$AA@
CONST	SEGMENT
??_C@_05HGHGEHHO@PANEL?$AA@ DB 'PANEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKBGKBDH@SURFACE?$AA@
CONST	SEGMENT
??_C@_07HKBGKBDH@SURFACE?$AA@ DB 'SURFACE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLFDHBFD@LIFTLINE?$AA@
CONST	SEGMENT
??_C@_08CLFDHBFD@LIFTLINE?$AA@ DB 'LIFTLINE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGNFBAGN@CHEVRON?$AA@
CONST	SEGMENT
??_C@_07NGNFBAGN@CHEVRON?$AA@ DB 'CHEVRON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEPMCOLO@TEXT?$AA@
CONST	SEGMENT
??_C@_04OEPMCOLO@TEXT?$AA@ DB 'TEXT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GCOHIDPL@MANAGER?$AA@
CONST	SEGMENT
??_C@_07GCOHIDPL@MANAGER?$AA@ DB 'MANAGER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OPEIBKFE@?$CFd?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05OPEIBKFE@?$CFd?5?$CFs?$AA@ DB '%d %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIACFAIC@8_plock?4dat?$AA@
CONST	SEGMENT
??_C@_0M@CIACFAIC@8_plock?4dat?$AA@ DB '8_plock.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HDJBMLCH@8_ckpit?4dat?$AA@
CONST	SEGMENT
??_C@_0M@HDJBMLCH@8_ckpit?4dat?$AA@ DB '8_ckpit.dat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@ DB 'Error:  %'
	DB	'0d  %s  %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KOHLGLHA@cpmanager?4cpp?$AA@
CONST	SEGMENT
??_C@_0O@KOHLGLHA@cpmanager?4cpp?$AA@ DB 'cpmanager.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
CONST	SEGMENT
??_C@_0M@CFLADCE@Feb?518?52013?$AA@ DB 'Feb 18 2013', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IONHGOFE@Failed?5to?5read?5image?3?5?$AA@
CONST	SEGMENT
??_C@_0BH@IONHGOFE@Failed?5to?5read?5image?3?5?$AA@ DB 'Failed to read im'
	DB	'age: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	050H
CONST	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@EI@AEXXZ
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@DBPOGJMH@2D?5Cockpit?5Error?5Detected?5in?5Blo@
CONST	SEGMENT
??_C@_0DD@DBPOGJMH@2D?5Cockpit?5Error?5Detected?5in?5Blo@ DB '2D Cockpit '
	DB	'Error Detected in Block Before Line %d.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HBKCJIG@Critical?5Error?$AA@
CONST	SEGMENT
??_C@_0P@HBKCJIG@Critical?5Error?$AA@ DB 'Critical Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@FGLCMBHA@Critical?52D?5Cockpit?5Error?5Detect@
CONST	SEGMENT
??_C@_0GC@FGLCMBHA@Critical?52D?5Cockpit?5Error?5Detect@ DB 'Critical 2D '
	DB	'Cockpit Error Detected in Block Before Line %d.  System Stabi'
	DB	'lity May Be Compromised.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMMIMEAC@DDS?$AA@
CONST	SEGMENT
??_C@_03CMMIMEAC@DDS?$AA@ DB 'DDS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GGDFNBH@TGA?$AA@
CONST	SEGMENT
??_C@_03GGDFNBH@TGA?$AA@ DB 'TGA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MNGDDBAC@APL?$AA@
CONST	SEGMENT
??_C@_03MNGDDBAC@APL?$AA@ DB 'APL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CNFPPDJC@BMP?$AA@
CONST	SEGMENT
??_C@_03CNFPPDJC@BMP?$AA@ DB 'BMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BFAIMLIE@PCX?$AA@
CONST	SEGMENT
??_C@_03BFAIMLIE@PCX?$AA@ DB 'PCX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DJLAKPIA@LBM?$AA@
CONST	SEGMENT
??_C@_03DJLAKPIA@LBM?$AA@ DB 'LBM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBABOKL@GIF?$AA@
CONST	SEGMENT
??_C@_03BBABOKL@GIF?$AA@ DB 'GIF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CImageFileMemory@@6B@
CONST	SEGMENT
??_7CImageFileMemory@@6B@ DD FLAT:??_R4CImageFileMemory@@6B@ ; CImageFileMemory::`vftable'
	DD	FLAT:??_ECImageFileMemory@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFileMemory@@6B@
CONST	SEGMENT
??_7CFileMemory@@6B@ DD FLAT:??_R4CFileMemory@@6B@	; CFileMemory::`vftable'
	DD	FLAT:??_ECFileMemory@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFileIO@@6B@
CONST	SEGMENT
??_7CFileIO@@6B@ DD FLAT:??_R4CFileIO@@6B@		; CFileIO::`vftable'
	DD	FLAT:??_ECFileIO@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
_DATA	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
_DATA	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA4?AVfailure@ios_base@std@@ DD 04H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI4?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
_DATA	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z$0
__ehfuncinfo$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0
__ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
__ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z$0
__unwindtable$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z$0
__unwindtable$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
__unwindtable$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z$0
__unwindtable$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1
__unwindtable$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z$1
__unwindtable$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z$1
__unwindtable$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z$1
__unwindtable$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z$1
__unwindtable$?ReadImage@@YAXPADPAPAEPAPAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadImage@@YAXPADPAPAEPAPAK@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadImage@@YAXPADPAPAEPAPAK@Z$1
__ehfuncinfo$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1CockpitManager@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CockpitManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ReadImage@@YAXPADPAPAEPAPAK@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadImage@@YAXPADPAPAEPAPAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CockpitManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CockpitManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CockpitManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CockpitManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CockpitManager@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CockpitManager@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CockpitManager@@QAE@XZ$5
__unwindtable$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$3
__unwindtable$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$3
__unwindtable$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$3
__unwindtable$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0facet@locale@std@@IAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0facet@locale@std@@IAE@I@Z$0
__ehfuncinfo$??0facet@locale@std@@IAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0facet@locale@std@@IAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@EI@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@EI@AEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
	sub	ecx, DWORD PTR [ecx-4]
	sub	ecx, 72					; 00000048H
	jmp	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@EI@AEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
	sub	ecx, DWORD PTR [ecx-4]
	jmp	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
	sub	ecx, DWORD PTR [ecx-4]
	jmp	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
	sub	ecx, DWORD PTR [ecx-4]
	jmp	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCPButtonObject@@PAV1@PAV1@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCPButtonObject@@PAV1@PAV1@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CPButtonObject *,CPButtonObject *,CPButtonObject *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVCPButtonObject@@PAV1@PAV1@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CPButtonObject *,CPButtonObject *,CPButtonObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@PAPAV1@@Z PROC ; std::_Val_type<CPButtonObject * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@PAPAV1@@Z ENDP ; std::_Val_type<CPButtonObject * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCPCursor@@PAV1@PAV1@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCPCursor@@PAV1@PAV1@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CPCursor *,CPCursor *,CPCursor *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVCPCursor@@PAV1@PAV1@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CPCursor *,CPCursor *,CPCursor *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCPCursor@@@std@@YAPAPAVCPCursor@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCPCursor@@@std@@YAPAPAVCPCursor@@PAPAV1@@Z PROC ; std::_Val_type<CPCursor * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVCPCursor@@@std@@YAPAPAVCPCursor@@PAPAV1@@Z ENDP ; std::_Val_type<CPCursor * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCPObject@@PAV1@PAV1@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCPObject@@PAV1@PAV1@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CPObject *,CPObject *,CPObject *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVCPObject@@PAV1@PAV1@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CPObject *,CPObject *,CPObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCPObject@@@std@@YAPAPAVCPObject@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCPObject@@@std@@YAPAPAVCPObject@@PAPAV1@@Z PROC ; std::_Val_type<CPObject * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVCPObject@@@std@@YAPAPAVCPObject@@PAPAV1@@Z ENDP ; std::_Val_type<CPObject * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCPPanel@@PAV1@PAV1@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCPPanel@@PAV1@PAV1@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CPPanel *,CPPanel *,CPPanel *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVCPPanel@@PAV1@PAV1@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CPPanel *,CPPanel *,CPPanel *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCPPanel@@@std@@YAPAPAVCPPanel@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCPPanel@@@std@@YAPAPAVCPPanel@@PAPAV1@@Z PROC ; std::_Val_type<CPPanel * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVCPPanel@@@std@@YAPAPAVCPPanel@@PAPAV1@@Z ENDP ; std::_Val_type<CPPanel * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCPSurface@@PAV1@PAV1@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCPSurface@@PAV1@PAV1@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CPSurface *,CPSurface *,CPSurface *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVCPSurface@@PAV1@PAV1@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CPSurface *,CPSurface *,CPSurface *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCPSurface@@@std@@YAPAPAVCPSurface@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCPSurface@@@std@@YAPAPAVCPSurface@@PAPAV1@@Z PROC ; std::_Val_type<CPSurface * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVCPSurface@@@std@@YAPAPAVCPSurface@@PAPAV1@@Z ENDP ; std::_Val_type<CPSurface * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCPButtonView@@PAV1@PAV1@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCPButtonView@@PAV1@PAV1@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CPButtonView *,CPButtonView *,CPButtonView *>, COMDAT

; 458  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 459  : 	_DEBUG_RANGE(_First, _Last);
; 460  : 	_DEBUG_POINTER(_Dest);
; 461  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 462  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 463  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 464  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVCPButtonView@@PAV1@PAV1@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CPButtonView *,CPButtonView *,CPButtonView *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCPButtonView@@@std@@YAPAPAVCPButtonView@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCPButtonView@@@std@@YAPAPAVCPButtonView@@PAPAV1@@Z PROC ; std::_Val_type<CPButtonView * *>, COMDAT

; 710  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp

; 711  : 	return (0);

	xor	eax, eax

; 712  : 	}

	pop	ebp
	ret	0
??$_Val_type@PAPAVCPButtonView@@@std@@YAPAPAVCPButtonView@@PAPAV1@@Z ENDP ; std::_Val_type<CPButtonView * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z PROC ; std::allocator<CPButtonObject *>::construct<CPButtonObject *,CPButtonObject * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z ; std::forward<CPButtonObject * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z ENDP ; std::allocator<CPButtonObject *>::construct<CPButtonObject *,CPButtonObject * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z PROC ; std::allocator<CPCursor *>::construct<CPCursor *,CPCursor * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z ; std::forward<CPCursor * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z ENDP ; std::allocator<CPCursor *>::construct<CPCursor *,CPCursor * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z PROC ; std::allocator<CPObject *>::construct<CPObject *,CPObject * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z ; std::forward<CPObject * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z ENDP ; std::allocator<CPObject *>::construct<CPObject *,CPObject * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z PROC ; std::allocator<CPPanel *>::construct<CPPanel *,CPPanel * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z ; std::forward<CPPanel * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z ENDP ; std::allocator<CPPanel *>::construct<CPPanel *,CPPanel * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z PROC ; std::allocator<CPSurface *>::construct<CPSurface *,CPSurface * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z ; std::forward<CPSurface * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z ENDP ; std::allocator<CPSurface *>::construct<CPSurface *,CPSurface * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z PROC ; std::allocator<CPButtonView *>::construct<CPButtonView *,CPButtonView * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z ; std::forward<CPButtonView * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z ENDP ; std::allocator<CPButtonView *>::construct<CPButtonView *,CPButtonView * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPButtonObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPButtonObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CPButtonObject * *,CPButtonObject * *,std::_Wrap_alloc<std::allocator<CPButtonObject *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPButtonObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonObject@@0@Z ; std::_Ptr_cat<CPButtonObject *,CPButtonObject *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@PAPAV1@@Z ; std::_Val_type<CPButtonObject * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVCPButtonObject@@PAV1@PAV1@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPButtonObject *,CPButtonObject *,CPButtonObject *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVCPButtonObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CPButtonObject * *,CPButtonObject * *,std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPCursor@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPCursor@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CPCursor * *,CPCursor * *,std::_Wrap_alloc<std::allocator<CPCursor *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPCursor@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPCursor@@0@Z ; std::_Ptr_cat<CPCursor *,CPCursor *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVCPCursor@@@std@@YAPAPAVCPCursor@@PAPAV1@@Z ; std::_Val_type<CPCursor * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVCPCursor@@PAV1@PAV1@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPCursor *,CPCursor *,CPCursor *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVCPCursor@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CPCursor * *,CPCursor * *,std::_Wrap_alloc<std::allocator<CPCursor *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CPObject * *,CPObject * *,std::_Wrap_alloc<std::allocator<CPObject *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPObject@@0@Z ; std::_Ptr_cat<CPObject *,CPObject *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVCPObject@@@std@@YAPAPAVCPObject@@PAPAV1@@Z ; std::_Val_type<CPObject * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVCPObject@@PAV1@PAV1@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPObject *,CPObject *,CPObject *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVCPObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CPObject * *,CPObject * *,std::_Wrap_alloc<std::allocator<CPObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPPanel@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPPanel@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CPPanel * *,CPPanel * *,std::_Wrap_alloc<std::allocator<CPPanel *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPPanel@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPPanel@@0@Z ; std::_Ptr_cat<CPPanel *,CPPanel *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVCPPanel@@@std@@YAPAPAVCPPanel@@PAPAV1@@Z ; std::_Val_type<CPPanel * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVCPPanel@@PAV1@PAV1@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPPanel *,CPPanel *,CPPanel *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVCPPanel@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CPPanel * *,CPPanel * *,std::_Wrap_alloc<std::allocator<CPPanel *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPSurface@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPSurface@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CPSurface * *,CPSurface * *,std::_Wrap_alloc<std::allocator<CPSurface *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPSurface@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPSurface@@0@Z ; std::_Ptr_cat<CPSurface *,CPSurface *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVCPSurface@@@std@@YAPAPAVCPSurface@@PAPAV1@@Z ; std::_Val_type<CPSurface * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVCPSurface@@PAV1@PAV1@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPSurface *,CPSurface *,CPSurface *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVCPSurface@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CPSurface * *,CPSurface * *,std::_Wrap_alloc<std::allocator<CPSurface *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCPButtonView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCPButtonView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CPButtonView * *,CPButtonView * *,std::_Wrap_alloc<std::allocator<CPButtonView *> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPButtonView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonView@@0@Z ; std::_Ptr_cat<CPButtonView *,CPButtonView *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVCPButtonView@@@std@@YAPAPAVCPButtonView@@PAPAV1@@Z ; std::_Val_type<CPButtonView * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVCPButtonView@@PAV1@PAV1@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CPButtonView *,CPButtonView *,CPButtonView *>
	add	esp, 24					; 00000018H

; 474  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVCPButtonView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CPButtonView * *,CPButtonView * *,std::_Wrap_alloc<std::allocator<CPButtonView *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z PROC ; std::_Ptr_cat<TextureHandle *,TextureHandle *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ENDP ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPButtonObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonObject@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPButtonObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonObject@@0@Z PROC ; std::_Ptr_cat<CPButtonObject *,CPButtonObject *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCPButtonObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonObject@@0@Z ENDP ; std::_Ptr_cat<CPButtonObject *,CPButtonObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPCursor@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPCursor@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPCursor@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPCursor@@0@Z PROC ; std::_Ptr_cat<CPCursor *,CPCursor *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCPCursor@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPCursor@@0@Z ENDP ; std::_Ptr_cat<CPCursor *,CPCursor *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPObject@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPObject@@0@Z PROC ; std::_Ptr_cat<CPObject *,CPObject *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCPObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPObject@@0@Z ENDP ; std::_Ptr_cat<CPObject *,CPObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPPanel@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPPanel@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPPanel@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPPanel@@0@Z PROC ; std::_Ptr_cat<CPPanel *,CPPanel *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCPPanel@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPPanel@@0@Z ENDP ; std::_Ptr_cat<CPPanel *,CPPanel *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPSurface@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPSurface@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPSurface@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPSurface@@0@Z PROC ; std::_Ptr_cat<CPSurface *,CPSurface *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCPSurface@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPSurface@@0@Z ENDP ; std::_Ptr_cat<CPSurface *,CPSurface *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 97   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPButtonView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonView@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPButtonView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonView@@0@Z PROC ; std::_Ptr_cat<CPButtonView *,CPButtonView *>, COMDAT

; 437  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 440  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@PAVCPButtonView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonView@@0@Z ENDP ; std::_Ptr_cat<CPButtonView *,CPButtonView *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPButtonObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPButtonObject@@@std@@YAABQAVCPButtonObject@@ABQAV1@@Z ; std::forward<CPButtonObject * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@ABQAV3@@Z ; std::allocator<CPButtonObject *>::construct
	pop	ebp
	ret	0
??$construct@PAVCPButtonObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCPButtonObject@@@std@@YAABQAVCPButtonObject@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCPButtonObject@@@std@@YAABQAVCPButtonObject@@ABQAV1@@Z PROC ; std::forward<CPButtonObject * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVCPButtonObject@@@std@@YAABQAVCPButtonObject@@ABQAV1@@Z ENDP ; std::forward<CPButtonObject * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z ; std::forward<CPButtonObject * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z ; std::allocator<CPButtonObject *>::construct<CPButtonObject *,CPButtonObject * &>
	pop	ebp
	ret	0
??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z PROC ; std::forward<CPButtonObject * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z ENDP ; std::forward<CPButtonObject * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPCursor@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPCursor@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPCursor@@@std@@YAABQAVCPCursor@@ABQAV1@@Z ; std::forward<CPCursor * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@ABQAV3@@Z ; std::allocator<CPCursor *>::construct
	pop	ebp
	ret	0
??$construct@PAVCPCursor@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCPCursor@@@std@@YAABQAVCPCursor@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCPCursor@@@std@@YAABQAVCPCursor@@ABQAV1@@Z PROC ; std::forward<CPCursor * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVCPCursor@@@std@@YAABQAVCPCursor@@ABQAV1@@Z ENDP ; std::forward<CPCursor * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPCursor@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPCursor@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z ; std::forward<CPCursor * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVCPCursor@@AAPAV1@@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z ; std::allocator<CPCursor *>::construct<CPCursor *,CPCursor * &>
	pop	ebp
	ret	0
??$construct@PAVCPCursor@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z PROC ; std::forward<CPCursor * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z ENDP ; std::forward<CPCursor * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPObject@@@std@@YAABQAVCPObject@@ABQAV1@@Z ; std::forward<CPObject * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@ABQAV3@@Z ; std::allocator<CPObject *>::construct
	pop	ebp
	ret	0
??$construct@PAVCPObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCPObject@@@std@@YAABQAVCPObject@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCPObject@@@std@@YAABQAVCPObject@@ABQAV1@@Z PROC ; std::forward<CPObject * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVCPObject@@@std@@YAABQAVCPObject@@ABQAV1@@Z ENDP ; std::forward<CPObject * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z ; std::forward<CPObject * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVCPObject@@AAPAV1@@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z ; std::allocator<CPObject *>::construct<CPObject *,CPObject * &>
	pop	ebp
	ret	0
??$construct@PAVCPObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z PROC ; std::forward<CPObject * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z ENDP ; std::forward<CPObject * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPPanel@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPPanel@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPPanel@@@std@@YAABQAVCPPanel@@ABQAV1@@Z ; std::forward<CPPanel * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@ABQAV3@@Z ; std::allocator<CPPanel *>::construct
	pop	ebp
	ret	0
??$construct@PAVCPPanel@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCPPanel@@@std@@YAABQAVCPPanel@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCPPanel@@@std@@YAABQAVCPPanel@@ABQAV1@@Z PROC ; std::forward<CPPanel * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVCPPanel@@@std@@YAABQAVCPPanel@@ABQAV1@@Z ENDP ; std::forward<CPPanel * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPPanel@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPPanel@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z ; std::forward<CPPanel * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVCPPanel@@AAPAV1@@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z ; std::allocator<CPPanel *>::construct<CPPanel *,CPPanel * &>
	pop	ebp
	ret	0
??$construct@PAVCPPanel@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z PROC ; std::forward<CPPanel * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z ENDP ; std::forward<CPPanel * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPSurface@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPSurface@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPSurface@@@std@@YAABQAVCPSurface@@ABQAV1@@Z ; std::forward<CPSurface * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@ABQAV3@@Z ; std::allocator<CPSurface *>::construct
	pop	ebp
	ret	0
??$construct@PAVCPSurface@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCPSurface@@@std@@YAABQAVCPSurface@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCPSurface@@@std@@YAABQAVCPSurface@@ABQAV1@@Z PROC ; std::forward<CPSurface * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVCPSurface@@@std@@YAABQAVCPSurface@@ABQAV1@@Z ENDP ; std::forward<CPSurface * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPSurface@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPSurface@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z ; std::forward<CPSurface * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVCPSurface@@AAPAV1@@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z ; std::allocator<CPSurface *>::construct<CPSurface *,CPSurface * &>
	pop	ebp
	ret	0
??$construct@PAVCPSurface@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z PROC ; std::forward<CPSurface * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z ENDP ; std::forward<CPSurface * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@ABQAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPButtonView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@ABQAV3@@Z PROC ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPButtonView@@@std@@YAABQAVCPButtonView@@ABQAV1@@Z ; std::forward<CPButtonView * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?construct@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@ABQAV3@@Z ; std::allocator<CPButtonView *>::construct
	pop	ebp
	ret	0
??$construct@PAVCPButtonView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@ABQAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAVCPButtonView@@@std@@YAABQAVCPButtonView@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVCPButtonView@@@std@@YAABQAVCPButtonView@@ABQAV1@@Z PROC ; std::forward<CPButtonView * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVCPButtonView@@@std@@YAABQAVCPButtonView@@ABQAV1@@Z ENDP ; std::forward<CPButtonView * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@AAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAVCPButtonView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@AAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z ; std::forward<CPButtonView * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PAVCPButtonView@@AAPAV1@@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z ; std::allocator<CPButtonView *>::construct<CPButtonView *,CPButtonView * &>
	pop	ebp
	ret	0
??$construct@PAVCPButtonView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@AAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z PROC ; std::forward<CPButtonView * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z ENDP ; std::forward<CPButtonView * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@IPAPAV1@@Z PROC ; std::_Allocate<CPButtonObject *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@IPAPAV1@@Z ENDP ; std::_Allocate<CPButtonObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCPCursor@@@std@@YAPAPAVCPCursor@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPCursor@@@std@@YAPAPAVCPCursor@@IPAPAV1@@Z PROC ; std::_Allocate<CPCursor *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCPCursor@@@std@@YAPAPAVCPCursor@@IPAPAV1@@Z ENDP ; std::_Allocate<CPCursor *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCPObject@@@std@@YAPAPAVCPObject@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPObject@@@std@@YAPAPAVCPObject@@IPAPAV1@@Z PROC ; std::_Allocate<CPObject *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCPObject@@@std@@YAPAPAVCPObject@@IPAPAV1@@Z ENDP ; std::_Allocate<CPObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCPPanel@@@std@@YAPAPAVCPPanel@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPPanel@@@std@@YAPAPAVCPPanel@@IPAPAV1@@Z PROC ; std::_Allocate<CPPanel *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCPPanel@@@std@@YAPAPAVCPPanel@@IPAPAV1@@Z ENDP ; std::_Allocate<CPPanel *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCPSurface@@@std@@YAPAPAVCPSurface@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPSurface@@@std@@YAPAPAVCPSurface@@IPAPAV1@@Z PROC ; std::_Allocate<CPSurface *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCPSurface@@@std@@YAPAPAVCPSurface@@IPAPAV1@@Z ENDP ; std::_Allocate<CPSurface *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PAVCPButtonView@@@std@@YAPAPAVCPButtonView@@IPAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPButtonView@@@std@@YAPAPAVCPButtonView@@IPAPAV1@@Z PROC ; std::_Allocate<CPButtonView *>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCPButtonView@@@std@@YAPAPAVCPButtonView@@IPAPAV1@@Z ENDP ; std::_Allocate<CPButtonView *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCPButtonObject@@@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEPAPAVCPButtonObject@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCPButtonObject@@@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEPAPAVCPButtonObject@@PAPAV2@00@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Umove<CPButtonObject * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVCPButtonObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAPAPAVCPButtonObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z ; std::_Uninitialized_move<CPButtonObject * *,CPButtonObject * *,std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCPButtonObject@@@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEPAPAVCPButtonObject@@PAPAV2@00@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Umove<CPButtonObject * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCPCursor@@@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEPAPAVCPCursor@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCPCursor@@@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEPAPAVCPCursor@@PAPAV2@00@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Umove<CPCursor * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVCPCursor@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAPAPAVCPCursor@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z ; std::_Uninitialized_move<CPCursor * *,CPCursor * *,std::_Wrap_alloc<std::allocator<CPCursor *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCPCursor@@@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEPAPAVCPCursor@@PAPAV2@00@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Umove<CPCursor * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCPObject@@@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEPAPAVCPObject@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCPObject@@@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEPAPAVCPObject@@PAPAV2@00@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Umove<CPObject * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVCPObject@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAPAPAVCPObject@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z ; std::_Uninitialized_move<CPObject * *,CPObject * *,std::_Wrap_alloc<std::allocator<CPObject *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCPObject@@@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEPAPAVCPObject@@PAPAV2@00@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Umove<CPObject * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCPPanel@@@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEPAPAVCPPanel@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCPPanel@@@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEPAPAVCPPanel@@PAPAV2@00@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Umove<CPPanel * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVCPPanel@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAPAPAVCPPanel@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z ; std::_Uninitialized_move<CPPanel * *,CPPanel * *,std::_Wrap_alloc<std::allocator<CPPanel *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCPPanel@@@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEPAPAVCPPanel@@PAPAV2@00@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Umove<CPPanel * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCPSurface@@@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEPAPAVCPSurface@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCPSurface@@@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEPAPAVCPSurface@@PAPAV2@00@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Umove<CPSurface * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVCPSurface@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAPAPAVCPSurface@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z ; std::_Uninitialized_move<CPSurface * *,CPSurface * *,std::_Wrap_alloc<std::allocator<CPSurface *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCPSurface@@@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEPAPAVCPSurface@@PAPAV2@00@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Umove<CPSurface * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCPButtonView@@@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEPAPAVCPButtonView@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCPButtonView@@@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEPAPAVCPButtonView@@PAPAV2@00@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Umove<CPButtonView * *>, COMDAT
; _this$ = ecx

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal

; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_move@PAPAVCPButtonView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAPAPAVCPButtonView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z ; std::_Uninitialized_move<CPButtonView * *,CPButtonView * *,std::_Wrap_alloc<std::allocator<CPButtonView *> > >
	add	esp, 16					; 00000010H

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVCPButtonView@@@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEPAPAVCPButtonView@@PAPAV2@00@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Umove<CPButtonView * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVTextureHandle@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVTextureHandle@@0@Z ; std::_Ptr_cat<TextureHandle *,TextureHandle *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPButtonObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonObject@@0@Z ; std::_Ptr_cat<CPButtonObject *,CPButtonObject *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPCursor@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPCursor@@0@Z ; std::_Ptr_cat<CPCursor *,CPCursor *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPObject@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPObject@@0@Z ; std::_Ptr_cat<CPObject *,CPObject *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPPanel@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPPanel@@0@Z ; std::_Ptr_cat<CPPanel *,CPPanel *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPSurface@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPSurface@@0@Z ; std::_Ptr_cat<CPSurface *,CPSurface *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVCPButtonView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCPButtonView@@0@Z ; std::_Ptr_cat<CPButtonView *,CPButtonView *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >
	add	esp, 16					; 00000010H

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPButtonObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPButtonObject@@@std@@YAABQAVCPButtonObject@@ABQAV1@@Z ; std::forward<CPButtonObject * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPButtonObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPButtonObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPButtonObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPButtonObject@@@std@@YAAAPAVCPButtonObject@@AAPAV1@@Z ; std::forward<CPButtonObject * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPButtonObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonObject@@@1@PAPAVCPButtonObject@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPButtonObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCPButtonObject@@@std@@YAPBQAVCPButtonObject@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCPButtonObject@@@std@@YAPBQAVCPButtonObject@@ABQAV1@@Z PROC ; std::addressof<CPButtonObject * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVCPButtonObject@@@std@@YAPBQAVCPButtonObject@@ABQAV1@@Z ENDP ; std::addressof<CPButtonObject * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPCursor@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPCursor@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPCursor@@@std@@YAABQAVCPCursor@@ABQAV1@@Z ; std::forward<CPCursor * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPCursor@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPCursor@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPCursor@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPCursor@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPCursor@@@std@@YAAAPAVCPCursor@@AAPAV1@@Z ; std::forward<CPCursor * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPCursor@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAXAAV?$allocator@PAVCPCursor@@@1@PAPAVCPCursor@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPCursor@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCPCursor@@@std@@YAPBQAVCPCursor@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCPCursor@@@std@@YAPBQAVCPCursor@@ABQAV1@@Z PROC ; std::addressof<CPCursor * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVCPCursor@@@std@@YAPBQAVCPCursor@@ABQAV1@@Z ENDP ; std::addressof<CPCursor * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPObject@@@std@@YAABQAVCPObject@@ABQAV1@@Z ; std::forward<CPObject * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPObject@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPObject@@@std@@YAAAPAVCPObject@@AAPAV1@@Z ; std::forward<CPObject * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPObject@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAXAAV?$allocator@PAVCPObject@@@1@PAPAVCPObject@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCPObject@@@std@@YAPBQAVCPObject@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCPObject@@@std@@YAPBQAVCPObject@@ABQAV1@@Z PROC ; std::addressof<CPObject * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVCPObject@@@std@@YAPBQAVCPObject@@ABQAV1@@Z ENDP ; std::addressof<CPObject * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPPanel@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPPanel@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPPanel@@@std@@YAABQAVCPPanel@@ABQAV1@@Z ; std::forward<CPPanel * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPPanel@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPPanel@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPPanel@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPPanel@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPPanel@@@std@@YAAAPAVCPPanel@@AAPAV1@@Z ; std::forward<CPPanel * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPPanel@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAXAAV?$allocator@PAVCPPanel@@@1@PAPAVCPPanel@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPPanel@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCPPanel@@@std@@YAPBQAVCPPanel@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCPPanel@@@std@@YAPBQAVCPPanel@@ABQAV1@@Z PROC ; std::addressof<CPPanel * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVCPPanel@@@std@@YAPBQAVCPPanel@@ABQAV1@@Z ENDP ; std::addressof<CPPanel * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPSurface@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPSurface@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPSurface@@@std@@YAABQAVCPSurface@@ABQAV1@@Z ; std::forward<CPSurface * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPSurface@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPSurface@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPSurface@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPSurface@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPSurface@@@std@@YAAAPAVCPSurface@@AAPAV1@@Z ; std::forward<CPSurface * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPSurface@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAXAAV?$allocator@PAVCPSurface@@@1@PAPAVCPSurface@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPSurface@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCPSurface@@@std@@YAPBQAVCPSurface@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCPSurface@@@std@@YAPBQAVCPSurface@@ABQAV1@@Z PROC ; std::addressof<CPSurface * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVCPSurface@@@std@@YAPBQAVCPSurface@@ABQAV1@@Z ENDP ; std::addressof<CPSurface * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@ABQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPButtonView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@ABQAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@ABQAVCPButtonView@@@std@@YAABQAVCPButtonView@@ABQAV1@@Z ; std::forward<CPButtonView * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPButtonView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@ABQAV3@@Z ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPButtonView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@ABQAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCPButtonView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAVCPButtonView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAVCPButtonView@@@std@@YAAAPAVCPButtonView@@AAPAV1@@Z ; std::forward<CPButtonView * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PAVCPButtonView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAXAAV?$allocator@PAVCPButtonView@@@1@PAPAVCPButtonView@@AAPAV3@@Z ; std::allocator_traits<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PAVCPButtonView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@QAVCPButtonView@@@std@@YAPBQAVCPButtonView@@ABQAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVCPButtonView@@@std@@YAPBQAVCPButtonView@@ABQAV1@@Z PROC ; std::addressof<CPButtonView * const>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@QAVCPButtonView@@@std@@YAPBQAVCPButtonView@@ABQAV1@@Z ENDP ; std::addressof<CPButtonView * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 67   : 		{	// return offset

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx+8]
	mov	esi, DWORD PTR [eax+4]
	adc	esi, DWORD PTR [ecx+12]
	mov	eax, edx
	mov	edx, esi

; 69   : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with stream offset

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Off$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 44   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*, COMDAT
; _this$ = ecx

; 146  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN4@
$LN3@:
	mov	DWORD PTR tv67[ebp], -1
$LN4@:
	mov	eax, DWORD PTR tv67[ebp]

; 148  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 133  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  :  #if _HAS_EXCEPTIONS
; 135  : 			if (!_XSTD uncaught_exception())

	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry

; 136  : 				this->_Myostr._Osfx();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 137  : 
; 138  :  #else /* _HAS_EXCEPTIONS */
; 139  : 			this->_Myostr._Osfx();
; 140  :  #endif /* _HAS_EXCEPTIONS */
; 141  : 			}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	esp, ebp
	pop	ebp
	ret	0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 126  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 127  : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?good@ios_base@std@@QBE_NXZ		; std::ios_base::good
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@sentry
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
	test	eax, eax
	je	SHORT $LN1@sentry

; 128  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
	mov	ecx, eax
	call	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN1@sentry:

; 129  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?good@ios_base@std@@QBE_NXZ		; std::ios_base::good
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 130  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv86 = -12						; size = 4
_this$ = -8						; size = 4
tv72 = -4						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 109  : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 111  : 				_Myostr.rdbuf()->_Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv86[ebp], edx
	mov	eax, DWORD PTR tv86[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv86[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv92[ebp], eax
	mov	eax, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Sentry_bas:

; 112  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv87 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 103  : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 104  : 			if (_Myostr.rdbuf() != 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 105  : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN2@Sentry_bas:

; 106  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT
; _this$ = ecx

; 344  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 345  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++

; 346  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 347  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 334  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 		return ((reference)**(_Mybase *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 336  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 317  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 318  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat, COMDAT
; _this$ = ecx

; 264  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT
; _this$ = ecx

; 202  : 		{	// return difference of iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 204  : 		return (this->_Ptr - _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx]

; 205  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT
; _this$ = ecx

; 102  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 103  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 104  : 		if (this->_Getcont() == 0
; 105  : 			|| this->_Ptr == 0
; 106  : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 107  : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 108  : 			{	// report error
; 109  : 			_DEBUG_ERROR("string iterator not incrementable");
; 110  : 			_SCL_SECURE_OUT_OF_RANGE;
; 111  : 			}
; 112  : 
; 113  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 114  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 115  : 		_SCL_SECURE_VALIDATE_RANGE(
; 116  : 			this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 117  : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 118  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 119  : 
; 120  : 		++this->_Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 121  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 122  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 71   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 73   : 		if (this->_Getcont() == 0
; 74   : 			|| this->_Ptr == 0
; 75   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 77   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 78   : 			{	// report error
; 79   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 80   : 			_SCL_SECURE_OUT_OF_RANGE;
; 81   : 			}
; 82   : 
; 83   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 84   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(
; 86   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 87   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 88   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 89   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 90   : 
; 91   : 		_Analysis_assume_(this->_Ptr != 0);
; 92   : 
; 93   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 94   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 51   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   : 		{	// construct with pointer _Parg
; 53   : 		this->_Adopt(_Pstring);

	mov	eax, DWORD PTR __Pstring$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 54   : 		this->_Ptr = _Parg;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], edx

; 55   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
__Ans$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 1
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 80   : 	{	// return string + character

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 81   : 	basic_string<_Elem, _Traits, _Alloc> _Ans;

	lea	ecx, DWORD PTR __Ans$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 82   : 	_Ans.reserve(_Left.size() + 1);

	mov	ecx, DWORD PTR __Left$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR __Ans$[ebp]
	call	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 83   : 	_Ans += _Left;

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ans$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 84   : 	_Ans += _Right;

	movzx	ecx, BYTE PTR __Right$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Ans$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 85   : 	return (_Ans);

	lea	edx, DWORD PTR __Ans$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Ans$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 86   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z$0:
	lea	ecx, DWORD PTR __Ans$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
$T2 = -88						; size = 4
$T3 = -84						; size = 4
_len$ = -80						; size = 4
$T4 = -76						; size = 4
_i$5 = -72						; size = 4
_pos$ = -68						; size = 4
_invalid_chars$ = -64					; size = 24
_outstr$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_instr$ = 12						; size = 4
?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; RemoveInvalidChars

; 1072 : string RemoveInvalidChars(const string &instr){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T4[ebp], 0

; 1073 : 	string outstr = instr + '\0';

	push	0
	mov	eax, DWORD PTR _instr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outstr$[ebp]
	push	ecx
	call	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@D@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1074 :     string invalid_chars = "*/\\";

	push	OFFSET ??_C@_03DECLHMDM@?$CK?1?2?$AA@
	lea	ecx, DWORD PTR _invalid_chars$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1075 : 
; 1076 :     std::string::iterator pos = outstr.begin();

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	lea	ecx, DWORD PTR _outstr$[ebp]
	call	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin

; 1077 :     int len = strlen(outstr.c_str());

	lea	ecx, DWORD PTR _outstr$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 1078 : 
; 1079 :     for (int i = 0; i < len; ++i)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN6@RemoveInva
$LN5@RemoveInva:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN6@RemoveInva:
	mov	ecx, DWORD PTR _i$5[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@RemoveInva

; 1080 :         if (isspace(static_cast<unsigned char>(*pos)) || (invalid_chars.find(*pos) != string::npos))

	lea	ecx, DWORD PTR _pos$[ebp]
	call	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
	movzx	edx, BYTE PTR [eax]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@RemoveInva
	push	0
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	lea	ecx, DWORD PTR _invalid_chars$[ebp]
	call	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
	cmp	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
	je	SHORT $LN3@RemoveInva
$LN2@RemoveInva:

; 1081 :             outstr.erase(pos); // this increments pos

	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outstr$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN1@RemoveInva
$LN3@RemoveInva:

; 1082 :         else ++pos;

	lea	ecx, DWORD PTR _pos$[ebp]
	call	??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
$LN1@RemoveInva:
	jmp	SHORT $LN5@RemoveInva
$LN4@RemoveInva:

; 1083 : 
; 1084 :     return outstr;

	lea	edx, DWORD PTR _outstr$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T4[ebp]
	or	eax, 1
	mov	DWORD PTR $T4[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _invalid_chars$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outstr$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1085 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$0:
	lea	ecx, DWORD PTR _outstr$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z$1:
	lea	ecx, DWORD PTR _invalid_chars$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; RemoveInvalidChars
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -124						; size = 8
tv286 = -116						; size = 8
tv337 = -108						; size = 8
tv325 = -100						; size = 8
tv135 = -92						; size = 8
__Count$ = -84						; size = 8
__Pad$ = -76						; size = 8
$T2 = -68						; size = 4
$T3 = -64						; size = 4
$T4 = -60						; size = 4
tv289 = -56						; size = 4
tv288 = -52						; size = 4
tv285 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
tv284 = -36						; size = 4
tv283 = -32						; size = 4
tv137 = -28						; size = 4
__State$ = -24						; size = 4
tv287 = -18						; size = 1
tv282 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 783  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 784  : 	typedef char _Elem;
; 785  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 786  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 787  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 788  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 789  : 		? 0 : _Ostr.width() - _Count;

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv325[ebp], eax
	mov	DWORD PTR tv325[ebp+4], edx
	cmp	DWORD PTR tv325[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR tv325[ebp], 0
	jbe	SHORT $LN17@operator
$LN24@operator:
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv337[ebp], eax
	mov	DWORD PTR tv337[ebp+4], edx
	mov	eax, DWORD PTR tv337[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	mov	ecx, DWORD PTR tv337[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR tv135[ebp], xmm0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 790  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 791  : 
; 792  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
	cmp	eax, -1
	jne	SHORT $LN14@operator

; 793  : 		_State |= ios_base::badbit;

	mov	ecx, DWORD PTR __State$[ebp]
	or	ecx, 4
	mov	DWORD PTR __State$[ebp], ecx

; 794  : 	else

	jmp	$LN13@operator
$LN14@operator:

; 795  : 		{	// state okay, insert
; 796  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 797  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp]
	and	ecx, 448				; 000001c0H
	cmp	ecx, 64					; 00000040H
	je	$LN11@operator

; 798  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	jmp	SHORT $LN10@operator
$LN9@operator:
	mov	edx, DWORD PTR __Pad$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR __Pad$[ebp+4]
	sbb	eax, 0
	mov	DWORD PTR __Pad$[ebp], edx
	mov	DWORD PTR __Pad$[ebp+4], eax
$LN10@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	SHORT $LN11@operator
	jg	SHORT $LN26@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	SHORT $LN11@operator
$LN26@operator:

; 799  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 800  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv282[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv283[ebp], eax
	movzx	eax, BYTE PTR tv282[ebp]
	push	eax
	mov	ecx, DWORD PTR tv283[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@operator

; 801  : 					{	// insertion failed, quit
; 802  : 					_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx

; 803  : 					break;

	jmp	SHORT $LN11@operator
$LN7@operator:

; 804  : 					}
; 805  : 
; 806  : 		if (_State == ios_base::goodbit

	jmp	$LN9@operator
$LN11@operator:

; 807  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv285[ebp], eax
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv285[ebp]
	call	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
	mov	DWORD PTR tv286[ebp], eax
	mov	DWORD PTR tv286[ebp+4], edx
	mov	eax, DWORD PTR tv286[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN27@operator
	mov	ecx, DWORD PTR tv286[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN6@operator
$LN27@operator:

; 808  : 			_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN6@operator:

; 809  : 
; 810  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator

; 811  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	SHORT $LN5@operator
	jg	SHORT $LN28@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	SHORT $LN5@operator
$LN28@operator:

; 812  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 813  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv287[ebp], al
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv288[ebp], eax
	movzx	eax, BYTE PTR tv287[ebp]
	push	eax
	mov	ecx, DWORD PTR tv288[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv289[ebp], eax
	mov	ecx, DWORD PTR tv289[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator

; 814  : 					{	// insertion failed, quit
; 815  : 					_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx

; 816  : 					break;

	jmp	SHORT $LN5@operator
$LN1@operator:

; 817  : 					}

	jmp	$LN3@operator
$LN5@operator:

; 818  : 		_Ostr.width(0);

	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?width@ios_base@std@@QAE_J_J@Z		; std::ios_base::width
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 819  : 		_CATCH_IO_(_Ostr)

	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
	mov	eax, $LN23@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN13@operator
$LN23@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator:

; 820  : 		}
; 821  : 
; 822  : 	_Ostr.setstate(_State);

	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 823  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]

; 824  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
	mov	esp, ebp
	pop	ebp
	ret	0
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 80					; 00000050H
	call	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 80					; 00000050H
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 80					; 00000050H
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__State$ = -4						; size = 4
__Mode$ = 8						; size = 4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; _this$ = ecx

; 359  : 		{	// convert open mode to stream state bits

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 360  : 		_Strstate _State = (_Strstate)0;

	mov	DWORD PTR __State$[ebp], 0

; 361  : 		if (!(_Mode & ios_base::in))

	mov	eax, DWORD PTR __Mode$[ebp]
	and	eax, 1
	jne	SHORT $LN4@Getstate

; 362  : 			_State |= _Noread;

	mov	ecx, DWORD PTR __State$[ebp]
	or	ecx, 4
	mov	DWORD PTR __State$[ebp], ecx
$LN4@Getstate:

; 363  : 		if (!(_Mode & ios_base::out))

	mov	edx, DWORD PTR __Mode$[ebp]
	and	edx, 2
	jne	SHORT $LN3@Getstate

; 364  : 			_State |= _Constant;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 2
	mov	DWORD PTR __State$[ebp], eax
$LN3@Getstate:

; 365  : 		if (_Mode & ios_base::app)

	mov	ecx, DWORD PTR __Mode$[ebp]
	and	ecx, 8
	je	SHORT $LN2@Getstate

; 366  : 			_State |= _Append;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 8
	mov	DWORD PTR __State$[ebp], edx
$LN2@Getstate:

; 367  : 		if (_Mode & ios_base::ate)

	mov	eax, DWORD PTR __Mode$[ebp]
	and	eax, 4
	je	SHORT $LN1@Getstate

; 368  : 			_State |= _Atend;

	mov	ecx, DWORD PTR __State$[ebp]
	or	ecx, 16					; 00000010H
	mov	DWORD PTR __State$[ebp], ecx
$LN1@Getstate:

; 369  : 		return (_State);

	mov	eax, DWORD PTR __State$[ebp]

; 370  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 342  : 		{	// discard any allocated buffer and clear pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 		if (_Mystate & _Allocated)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 1
	je	SHORT $LN1@Tidy

; 344  : 			_Al.deallocate(_Mysb::eback(),
; 345  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 346  : 					: _Mysb::egptr()) - _Mysb::eback());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN4@Tidy
	mov	ecx, DWORD PTR _this$[ebp]
	call	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN5@Tidy
$LN4@Tidy:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
	mov	DWORD PTR tv88[ebp], eax
$LN5@Tidy:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	edx, DWORD PTR tv88[ebp]
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN1@Tidy:

; 347  : 		_Mysb::setg(0, 0, 0);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 348  : 		_Mysb::setp(0, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 349  : 		_Seekhigh = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 350  : 		_Mystate &= ~_Allocated;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], edx

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z
_TEXT	SEGMENT
tv137 = -12						; size = 4
__Pnew$1 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__State$ = 16						; size = 4
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT
; _this$ = ecx

; 315  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 		_Seekhigh = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 317  : 		_Mystate = _State;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __State$[ebp]
	mov	DWORD PTR [ecx+60], edx

; 318  : 
; 319  : 		if (_Count != 0
; 320  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

	cmp	DWORD PTR __Count$[ebp], 0
	je	$LN5@Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 6
	cmp	ecx, 6
	je	$LN5@Init

; 321  : 			{	// finite buffer that can be read or written, set it up
; 322  : 			_Elem *_Pnew = _Al.allocate(_Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __Pnew$1[ebp], eax

; 323  : 			_Traits::copy(_Pnew, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnew$1[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 324  : 			_Seekhigh = _Pnew + _Count;

	mov	eax, DWORD PTR __Pnew$1[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 325  : 
; 326  : 			if (!(_Mystate & _Noread))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	and	eax, 4
	jne	SHORT $LN3@Init

; 327  : 				_Mysb::setg(_Pnew, _Pnew,
; 328  : 					_Pnew + _Count);	// setup read buffer

	mov	ecx, DWORD PTR __Pnew$1[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnew$1[ebp]
	push	edx
	mov	eax, DWORD PTR __Pnew$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN3@Init:

; 329  : 			if (!(_Mystate & _Constant))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	and	edx, 2
	jne	SHORT $LN2@Init

; 330  : 				{	// setup write buffer, and maybe read buffer
; 331  : 				_Mysb::setp(_Pnew,
; 332  : 					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
; 333  : 					_Pnew + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 16					; 00000010H
	je	SHORT $LN7@Init
	mov	edx, DWORD PTR __Pnew$1[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv137[ebp], edx
	jmp	SHORT $LN8@Init
$LN7@Init:
	mov	eax, DWORD PTR __Pnew$1[ebp]
	mov	DWORD PTR tv137[ebp], eax
$LN8@Init:
	mov	ecx, DWORD PTR __Pnew$1[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	mov	eax, DWORD PTR __Pnew$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 334  : 				if (_Mysb::gptr() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	test	eax, eax
	jne	SHORT $LN2@Init

; 335  : 					_Mysb::setg(_Pnew, 0, _Pnew);

	mov	ecx, DWORD PTR __Pnew$1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Pnew$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN2@Init:

; 336  : 				}
; 337  : 			_Mystate |= _Allocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx
$LN5@Init:

; 338  : 			}
; 339  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
tv306 = -28						; size = 8
tv268 = -20						; size = 8
__Off$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Ptr$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 281  : 		{	// change position to _Pos, according to _Mode

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 		streamoff _Off = (streamoff)_Ptr;

	lea	ecx, DWORD PTR __Ptr$[ebp]
	call	??B?$fpos@H@std@@QBE_JXZ		; std::fpos<int>::operator __int64
	mov	DWORD PTR __Off$[ebp], eax
	mov	DWORD PTR __Off$[ebp+4], edx

; 283  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN12@seekpos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], eax
	jae	SHORT $LN12@seekpos

; 284  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax
$LN12@seekpos:

; 285  : 
; 286  : 		if (_Off == _BADOFF)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR ?_BADOFF@std@@3_JB
	jne	SHORT $LN11@seekpos
	mov	ecx, DWORD PTR __Off$[ebp+4]
	cmp	ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
	jne	SHORT $LN11@seekpos
	jmp	$LN10@seekpos
$LN11@seekpos:

; 287  : 			;
; 288  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

	mov	edx, DWORD PTR __Mode$[ebp]
	and	edx, 1
	je	$LN9@seekpos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	test	eax, eax
	je	$LN9@seekpos

; 289  : 			{	// position within read buffer
; 290  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	cmp	DWORD PTR __Off$[ebp+4], 0
	jl	$LN8@seekpos
	jg	SHORT $LN15@seekpos
	cmp	DWORD PTR __Off$[ebp], 0
	jb	$LN8@seekpos
$LN15@seekpos:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	DWORD PTR tv268[ebp], eax
	mov	DWORD PTR tv268[ebp+4], edx
	mov	eax, DWORD PTR __Off$[ebp+4]
	cmp	eax, DWORD PTR tv268[ebp+4]
	jg	SHORT $LN8@seekpos
	jl	SHORT $LN16@seekpos
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR tv268[ebp]
	ja	SHORT $LN8@seekpos
$LN16@seekpos:

; 291  : 				{	// change read position
; 292  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	sub	esi, eax
	mov	eax, esi
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 293  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

	mov	edx, DWORD PTR __Mode$[ebp]
	and	edx, 2
	je	SHORT $LN7@seekpos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN7@seekpos

; 294  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 295  : 						_Mysb::epptr());	// change write position to match

	mov	ecx, DWORD PTR _this$[ebp]
	call	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
$LN7@seekpos:

; 296  : 				}
; 297  : 			else

	jmp	SHORT $LN6@seekpos
$LN8@seekpos:

; 298  : 				_Off = _BADOFF;

	mov	eax, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], eax
	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], ecx
$LN6@seekpos:
	jmp	$LN10@seekpos
$LN9@seekpos:

; 299  : 			}
; 300  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

	mov	edx, DWORD PTR __Mode$[ebp]
	and	edx, 2
	je	$LN4@seekpos
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN4@seekpos

; 301  : 			{	// position within write buffer
; 302  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	cmp	DWORD PTR __Off$[ebp+4], 0
	jl	SHORT $LN3@seekpos
	jg	SHORT $LN17@seekpos
	cmp	DWORD PTR __Off$[ebp], 0
	jb	SHORT $LN3@seekpos
$LN17@seekpos:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	DWORD PTR tv306[ebp], eax
	mov	DWORD PTR tv306[ebp+4], edx
	mov	eax, DWORD PTR __Off$[ebp+4]
	cmp	eax, DWORD PTR tv306[ebp+4]
	jg	SHORT $LN3@seekpos
	jl	SHORT $LN18@seekpos
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR tv306[ebp]
	ja	SHORT $LN3@seekpos
$LN18@seekpos:

; 303  : 				_Mysb::pbump((int)(_Mysb::eback()
; 304  : 					- _Mysb::pptr() + _Off));	// change write position

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	sub	esi, eax
	mov	eax, esi
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump

; 305  : 			else

	jmp	SHORT $LN2@seekpos
$LN3@seekpos:

; 306  : 				_Off = _BADOFF;

	mov	edx, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], edx
	mov	eax, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], eax
$LN2@seekpos:

; 307  : 			}
; 308  : 		else

	jmp	SHORT $LN10@seekpos
$LN4@seekpos:

; 309  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], ecx
	mov	edx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], edx
$LN10@seekpos:

; 310  : 		return (streampos(_Off));

	mov	eax, DWORD PTR __Off$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$fpos@H@std@@QAE@_J@Z		; std::fpos<int>::fpos<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 311  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
tv405 = -20						; size = 8
tv342 = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
__Which$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 228  : 		{	// change position by _Off, according to _Way, _Mode

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN21@seekoff
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], eax
	jae	SHORT $LN21@seekoff

; 230  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax
$LN21@seekoff:

; 231  : 
; 232  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

	mov	eax, DWORD PTR __Which$[ebp]
	and	eax, 1
	je	$LN20@seekoff
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	test	eax, eax
	je	$LN20@seekoff

; 233  : 			{	// position within read buffer
; 234  : 			if (_Way == ios_base::end)

	cmp	DWORD PTR __Way$[ebp], 2
	jne	SHORT $LN19@seekoff

; 235  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, edx
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	mov	DWORD PTR __Off$[ebp], eax
	mov	DWORD PTR __Off$[ebp+4], edx

; 236  : 			else if (_Way == ios_base::cur

	jmp	SHORT $LN18@seekoff
$LN19@seekoff:

; 237  : 				&& (_Which & ios_base::out) == 0)

	cmp	DWORD PTR __Way$[ebp], 1
	jne	SHORT $LN17@seekoff
	mov	eax, DWORD PTR __Which$[ebp]
	and	eax, 2
	jne	SHORT $LN17@seekoff

; 238  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	sub	esi, eax
	mov	eax, esi
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	mov	DWORD PTR __Off$[ebp], eax
	mov	DWORD PTR __Off$[ebp+4], edx
	jmp	SHORT $LN18@seekoff
$LN17@seekoff:

; 239  : 			else if (_Way != ios_base::beg)

	cmp	DWORD PTR __Way$[ebp], 0
	je	SHORT $LN18@seekoff

; 240  : 				_Off = _BADOFF;

	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], ecx
	mov	edx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], edx
$LN18@seekoff:

; 241  : 
; 242  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	cmp	DWORD PTR __Off$[ebp+4], 0
	jl	$LN14@seekoff
	jg	SHORT $LN24@seekoff
	cmp	DWORD PTR __Off$[ebp], 0
	jb	$LN14@seekoff
$LN24@seekoff:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, edx
	cdq
	mov	DWORD PTR tv342[ebp], eax
	mov	DWORD PTR tv342[ebp+4], edx
	mov	eax, DWORD PTR __Off$[ebp+4]
	cmp	eax, DWORD PTR tv342[ebp+4]
	jg	SHORT $LN14@seekoff
	jl	SHORT $LN25@seekoff
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR tv342[ebp]
	ja	SHORT $LN14@seekoff
$LN25@seekoff:

; 243  : 				{	// change read position
; 244  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	sub	esi, eax
	mov	eax, esi
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 245  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

	mov	edx, DWORD PTR __Which$[ebp]
	and	edx, 2
	je	SHORT $LN13@seekoff
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN13@seekoff

; 246  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
; 247  : 						_Mysb::epptr());	// change write position to match

	mov	ecx, DWORD PTR _this$[ebp]
	call	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
$LN13@seekoff:

; 248  : 				}
; 249  : 			else

	jmp	SHORT $LN12@seekoff
$LN14@seekoff:

; 250  : 				_Off = _BADOFF;

	mov	eax, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], eax
	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], ecx
$LN12@seekoff:
	jmp	$LN11@seekoff
$LN20@seekoff:

; 251  : 			}
; 252  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

	mov	edx, DWORD PTR __Which$[ebp]
	and	edx, 2
	je	$LN10@seekoff
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	$LN10@seekoff

; 253  : 			{	// position within write buffer
; 254  : 			if (_Way == ios_base::end)

	cmp	DWORD PTR __Way$[ebp], 2
	jne	SHORT $LN9@seekoff

; 255  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, eax
	mov	eax, edx
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	mov	DWORD PTR __Off$[ebp], eax
	mov	DWORD PTR __Off$[ebp+4], edx
	jmp	SHORT $LN8@seekoff
$LN9@seekoff:

; 256  : 			else if (_Way == ios_base::cur)

	cmp	DWORD PTR __Way$[ebp], 1
	jne	SHORT $LN7@seekoff

; 257  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	sub	esi, eax
	mov	eax, esi
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	mov	DWORD PTR __Off$[ebp], eax
	mov	DWORD PTR __Off$[ebp+4], edx
	jmp	SHORT $LN8@seekoff
$LN7@seekoff:

; 258  : 			else if (_Way != ios_base::beg)

	cmp	DWORD PTR __Way$[ebp], 0
	je	SHORT $LN8@seekoff

; 259  : 				_Off = _BADOFF;

	mov	eax, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], eax
	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], ecx
$LN8@seekoff:

; 260  : 
; 261  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

	cmp	DWORD PTR __Off$[ebp+4], 0
	jl	SHORT $LN4@seekoff
	jg	SHORT $LN26@seekoff
	cmp	DWORD PTR __Off$[ebp], 0
	jb	SHORT $LN4@seekoff
$LN26@seekoff:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	mov	DWORD PTR tv405[ebp], eax
	mov	DWORD PTR tv405[ebp+4], edx
	mov	edx, DWORD PTR __Off$[ebp+4]
	cmp	edx, DWORD PTR tv405[ebp+4]
	jg	SHORT $LN4@seekoff
	jl	SHORT $LN27@seekoff
	mov	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR tv405[ebp]
	ja	SHORT $LN4@seekoff
$LN27@seekoff:

; 262  : 				_Mysb::pbump((int)(_Mysb::eback()
; 263  : 					- _Mysb::pptr() + _Off));	// change write position

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	sub	esi, eax
	mov	eax, esi
	cdq
	add	eax, DWORD PTR __Off$[ebp]
	adc	edx, DWORD PTR __Off$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump

; 264  : 			else

	jmp	SHORT $LN3@seekoff
$LN4@seekoff:

; 265  : 				_Off = _BADOFF;

	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], ecx
	mov	edx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], edx
$LN3@seekoff:
	jmp	SHORT $LN11@seekoff
$LN10@seekoff:

; 266  : 			}
; 267  : 
; 268  :  #if _HAS_CPP0X
; 269  : 		else if (_Off != 0)

	mov	eax, DWORD PTR __Off$[ebp]
	or	eax, DWORD PTR __Off$[ebp+4]
	je	SHORT $LN11@seekoff

; 270  : 
; 271  :  #else /* _HAS_CPP0X */
; 272  : 		else
; 273  :  #endif /* _HAS_CPP0X */
; 274  : 
; 275  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB
	mov	DWORD PTR __Off$[ebp], ecx
	mov	edx, DWORD PTR ?_BADOFF@std@@3_JB+4
	mov	DWORD PTR __Off$[ebp+4], edx
$LN11@seekoff:

; 276  : 		return (pos_type(_Off));

	mov	eax, DWORD PTR __Off$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$fpos@H@std@@QAE@_J@Z		; std::fpos<int>::fpos<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 277  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 208  : 		{	// get an element from stream, but don't point past it

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 209  : 		if (_Mysb::gptr() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	test	eax, eax
	jne	SHORT $LN8@underflow

; 210  : 			return (_Traits::eof());	// no character buffer, fail

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	jmp	$LN9@underflow
	jmp	$LN9@underflow
$LN8@underflow:

; 211  : 		else if (_Mysb::gptr() < _Mysb::egptr())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
	cmp	esi, eax
	jae	SHORT $LN6@underflow

; 212  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	push	eax
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	jmp	$LN9@underflow

; 213  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0

	jmp	$LN9@underflow
$LN6@underflow:

; 214  : 			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 4
	jne	SHORT $LN3@underflow
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN3@underflow
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	cmp	esi, eax
	ja	SHORT $LN4@underflow
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], eax
	ja	SHORT $LN4@underflow
$LN3@underflow:

; 215  : 			return (_Traits::eof());	// can't read, fail

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	jmp	SHORT $LN9@underflow

; 216  : 		else

	jmp	SHORT $LN9@underflow
$LN4@underflow:

; 217  : 			{	// extend read buffer into written area, then return buffered
; 218  : 			if (_Seekhigh < _Mysb::pptr())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], eax
	jae	SHORT $LN1@underflow

; 219  : 				_Seekhigh = _Mysb::pptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax
$LN1@underflow:

; 220  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 221  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	push	eax
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
$LN9@underflow:

; 222  : 			}
; 223  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 191  : 		{	// put an element back to stream

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 		if (_Mysb::gptr() == 0
; 193  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 194  : 			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
; 195  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 196  : 			&& _Mystate & _Constant)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	test	eax, eax
	je	SHORT $LN3@pbackfail
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	cmp	esi, eax
	jbe	SHORT $LN3@pbackfail
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR __Meta$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@pbackfail
	lea	eax, DWORD PTR __Meta$[ebp]
	push	eax
	call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
	add	esp, 4
	mov	BYTE PTR $T3[ebp], al
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	mov	ecx, 1
	imul	ecx, -1
	add	eax, ecx
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	?eq@?$char_traits@D@std@@SA_NABD0@Z	; std::char_traits<char>::eq
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@pbackfail
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	and	edx, 2
	je	SHORT $LN4@pbackfail
$LN3@pbackfail:

; 197  : 			return (_Traits::eof());	// can't put back, fail

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	jmp	SHORT $LN5@pbackfail

; 198  : 		else

	jmp	SHORT $LN5@pbackfail
$LN4@pbackfail:

; 199  : 			{	// back up one position and store put-back character
; 200  : 			_Mysb::gbump(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 201  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR __Meta$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@pbackfail

; 202  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

	lea	eax, DWORD PTR __Meta$[ebp]
	push	eax
	call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
	add	esp, 4
	mov	bl, al
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	mov	BYTE PTR [eax], bl
$LN1@pbackfail:

; 203  : 			return (_Traits::not_eof(_Meta));

	lea	ecx, DWORD PTR __Meta$[ebp]
	push	ecx
	call	?not_eof@?$char_traits@D@std@@SAHABH@Z	; std::char_traits<char>::not_eof
	add	esp, 4
$LN5@pbackfail:

; 204  : 			}
; 205  : 		}

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
tv199 = -32						; size = 4
tv195 = -28						; size = 4
__Oldsize$2 = -24					; size = 4
__Oldptr$3 = -20					; size = 4
__Inc$4 = -16						; size = 4
__Newsize$5 = -12					; size = 4
__Newptr$6 = -8						; size = 4
_this$ = -4						; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 121  : 		{	// put an element to stream

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (_Mystate & _Constant)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 2
	je	SHORT $LN17@overflow

; 123  : 			return (_Traits::eof());	// array nonmutable, fail

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	jmp	$LN18@overflow
	jmp	SHORT $LN16@overflow
$LN17@overflow:

; 124  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T1[ebp], eax
	lea	edx, DWORD PTR __Meta$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@overflow

; 125  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

	lea	edx, DWORD PTR __Meta$[ebp]
	push	edx
	call	?not_eof@?$char_traits@D@std@@SAHABH@Z	; std::char_traits<char>::not_eof
	add	esp, 4
	jmp	$LN18@overflow
$LN16@overflow:

; 126  : 
; 127  : 		if (_Mystate & _Append
; 128  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 8
	je	SHORT $LN14@overflow
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN14@overflow
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+56]
	jae	SHORT $LN14@overflow

; 129  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
$LN14@overflow:

; 130  : 
; 131  : 		if (_Mysb::pptr() != 0
; 132  : 			&& _Mysb::pptr() < _Mysb::epptr())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN13@overflow
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
	cmp	esi, eax
	jae	SHORT $LN13@overflow

; 133  : 			{	// room in buffer, store it
; 134  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

	lea	edx, DWORD PTR __Meta$[ebp]
	push	edx
	call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
	add	esp, 4
	mov	bl, al
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
	mov	BYTE PTR [eax], bl

; 135  : 			return (_Meta);

	mov	eax, DWORD PTR __Meta$[ebp]
	jmp	$LN18@overflow

; 136  : 			}
; 137  : 		else

	jmp	$LN18@overflow
$LN13@overflow:

; 138  : 			{	// grow buffer and store element
; 139  : 			size_t _Oldsize = _Mysb::pptr() == 0
; 140  : 				? 0 : _Mysb::epptr() - _Mysb::eback();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	jne	SHORT $LN20@overflow
	mov	DWORD PTR tv195[ebp], 0
	jmp	SHORT $LN21@overflow
$LN20@overflow:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	sub	esi, eax
	mov	DWORD PTR tv195[ebp], esi
$LN21@overflow:
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR __Oldsize$2[ebp], eax

; 141  : 			size_t _Newsize = _Oldsize;

	mov	ecx, DWORD PTR __Oldsize$2[ebp]
	mov	DWORD PTR __Newsize$5[ebp], ecx

; 142  : 			size_t _Inc = _Newsize / 2 < _MINSIZE
; 143  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent

	mov	edx, DWORD PTR __Newsize$5[ebp]
	shr	edx, 1
	cmp	edx, 32					; 00000020H
	jae	SHORT $LN22@overflow
	mov	DWORD PTR tv199[ebp], 32		; 00000020H
	jmp	SHORT $LN23@overflow
$LN22@overflow:
	mov	eax, DWORD PTR __Newsize$5[ebp]
	shr	eax, 1
	mov	DWORD PTR tv199[ebp], eax
$LN23@overflow:
	mov	ecx, DWORD PTR tv199[ebp]
	mov	DWORD PTR __Inc$4[ebp], ecx
$LN11@overflow:

; 144  : 
; 145  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

	cmp	DWORD PTR __Inc$4[ebp], 0
	jbe	SHORT $LN10@overflow
	mov	edx, 2147483647				; 7fffffffH
	sub	edx, DWORD PTR __Inc$4[ebp]
	cmp	edx, DWORD PTR __Newsize$5[ebp]
	jae	SHORT $LN10@overflow

; 146  : 				_Inc /= 2;	// increment causes overflow, halve it

	mov	eax, DWORD PTR __Inc$4[ebp]
	shr	eax, 1
	mov	DWORD PTR __Inc$4[ebp], eax
	jmp	SHORT $LN11@overflow
$LN10@overflow:

; 147  : 			if (_Inc == 0)

	cmp	DWORD PTR __Inc$4[ebp], 0
	jne	SHORT $LN9@overflow

; 148  : 				return (_Traits::eof());	// buffer can't grow, fail

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	jmp	$LN18@overflow
$LN9@overflow:

; 149  : 
; 150  : 			_Newsize += _Inc;

	mov	ecx, DWORD PTR __Newsize$5[ebp]
	add	ecx, DWORD PTR __Inc$4[ebp]
	mov	DWORD PTR __Newsize$5[ebp], ecx

; 151  : 
; 152  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

	mov	edx, DWORD PTR __Newsize$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __Newptr$6[ebp], eax

; 153  : 			_Elem *_Oldptr = _Mysb::eback();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	mov	DWORD PTR __Oldptr$3[ebp], eax

; 154  : 
; 155  : 			if (0 < _Oldsize)

	cmp	DWORD PTR __Oldsize$2[ebp], 0
	jbe	SHORT $LN8@overflow

; 156  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

	mov	eax, DWORD PTR __Oldsize$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldptr$3[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newptr$6[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN8@overflow:

; 157  : 
; 158  : 			if (_Oldsize == 0)

	cmp	DWORD PTR __Oldsize$2[ebp], 0
	jne	SHORT $LN7@overflow

; 159  : 				{	// first growth, set up pointers
; 160  : 				_Seekhigh = _Newptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newptr$6[ebp]
	mov	DWORD PTR [eax+56], ecx

; 161  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

	mov	edx, DWORD PTR __Newptr$6[ebp]
	add	edx, DWORD PTR __Newsize$5[ebp]
	push	edx
	mov	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 162  : 				if (_Mystate & _Noread)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	and	edx, 4
	je	SHORT $LN6@overflow

; 163  : 					_Mysb::setg(_Newptr, 0, _Newptr);

	mov	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Newptr$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 164  : 				else

	jmp	SHORT $LN5@overflow
$LN6@overflow:

; 165  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

	mov	edx, DWORD PTR __Newptr$6[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newptr$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN5@overflow:

; 166  : 				}
; 167  : 			else

	jmp	$LN4@overflow
$LN7@overflow:

; 168  : 				{	// not first growth, adjust pointers
; 169  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	sub	eax, DWORD PTR __Oldptr$3[ebp]
	add	eax, DWORD PTR __Newptr$6[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 170  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
; 171  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 172  : 					_Newptr + _Newsize);

	mov	edx, DWORD PTR __Newptr$6[ebp]
	add	edx, DWORD PTR __Newsize$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	sub	eax, DWORD PTR __Oldptr$3[ebp]
	add	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
	sub	eax, DWORD PTR __Oldptr$3[ebp]
	add	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 173  : 				if (_Mystate & _Noread)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 4
	je	SHORT $LN3@overflow

; 174  : 					_Mysb::setg(_Newptr, 0, _Newptr);

	mov	edx, DWORD PTR __Newptr$6[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 175  : 				else

	jmp	SHORT $LN4@overflow
$LN3@overflow:

; 176  : 					_Mysb::setg(_Newptr,
; 177  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 178  : 						_Mysb::pptr() + 1);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	sub	eax, DWORD PTR __Oldptr$3[ebp]
	add	eax, DWORD PTR __Newptr$6[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newptr$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN4@overflow:

; 179  : 				}
; 180  : 
; 181  : 			if (_Mystate & _Allocated)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	and	eax, 1
	je	SHORT $LN1@overflow

; 182  : 				_Al.deallocate(_Oldptr, _Oldsize);

	mov	ecx, DWORD PTR __Oldsize$2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldptr$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN1@overflow:

; 183  : 			_Mystate |= _Allocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 184  : 
; 185  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

	lea	eax, DWORD PTR __Meta$[ebp]
	push	eax
	call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
	add	esp, 4
	mov	bl, al
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
	mov	BYTE PTR [eax], bl

; 186  : 			return (_Meta);

	mov	eax, DWORD PTR __Meta$[ebp]
$LN18@overflow:

; 187  : 			}
; 188  : 		}

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
tv91 = -88						; size = 4
$T1 = -84						; size = 4
_this$ = -80						; size = 4
__Str$2 = -76						; size = 24
__Str$3 = -52						; size = 24
__Nul$4 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 94   : 		{	// return string copy of character array

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 95   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	and	ecx, 2
	jne	SHORT $LN4@str
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	test	eax, eax
	je	SHORT $LN4@str

; 96   : 			{	// writable, make string from write buffer
; 97   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
; 98   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], eax
	jae	SHORT $LN7@str
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN8@str
$LN7@str:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv91[ebp], ecx
$LN8@str:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
	mov	edx, DWORD PTR tv91[ebp]
	sub	edx, eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
	push	eax
	lea	ecx, DWORD PTR __Str$2[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 99   : 			return (_Str);

	lea	eax, DWORD PTR __Str$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	lea	ecx, DWORD PTR __Str$2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN5@str
	jmp	$LN5@str
$LN4@str:

; 100  : 			}
; 101  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	and	eax, 4
	jne	SHORT $LN2@str
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	test	eax, eax
	je	SHORT $LN2@str

; 102  : 			{	// readable, make string from read buffer
; 103  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	sub	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
	push	eax
	lea	ecx, DWORD PTR __Str$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 104  : 			return (_Str);

	lea	ecx, DWORD PTR __Str$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	lea	ecx, DWORD PTR __Str$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@str

; 105  : 			}
; 106  : 		else

	jmp	SHORT $LN5@str
$LN2@str:

; 107  : 			{	// inaccessible, return empty string
; 108  : 			_Mystr _Nul;

	lea	ecx, DWORD PTR __Nul$4[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 109  : 			return (_Nul);

	lea	eax, DWORD PTR __Nul$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	lea	ecx, DWORD PTR __Nul$4[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@str:

; 110  : 			}
; 111  : 		}

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 76   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 77   : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 78   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode
; 31   : 		_Init(0, 0, _Getstate(_Mode));

	mov	ecx, DWORD PTR __Mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init

; 32   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 552  : 		{	// return string copy of character array

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 553  : 		return (_Stringbuffer.str());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 543  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-80]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-80]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-80]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx-84], eax

; 544  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 76					; 0000004cH
	call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 72					; 00000048H
	call	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\sstream
;	COMDAT ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 498  : 		{	// construct empty writable character buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	cmp	DWORD PTR _$initVBases$[ebp], 0
	je	SHORT $LN1@basic_ostr
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
$LN1@basic_ostr:
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx-4], eax
	mov	eax, DWORD PTR __Mode$[ebp]
	or	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >

; 499  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@basic_ostr
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
	ret	0
__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_temp$ = -156						; size = 150
__$ArrayPad$ = -4					; size = 4
_line$ = 8						; size = 4
_errorpriority$ = 12					; size = 4
?CockpitError@@YAXHH@Z PROC				; CockpitError

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 133  : 	char temp[150];		//Wombat778 4-22-04 changed to 150
; 134  : 
; 135  : 	if (FalconDisplay.displayFullScreen)				//we dont want this to run in fullscreen mode because that causes problems

	cmp	DWORD PTR ?FalconDisplay@@3VFalconDisplayConfiguration@@A+504, 0
	je	SHORT $LN4@CockpitErr

; 136  : 		return;	

	jmp	$LN5@CockpitErr
$LN4@CockpitErr:

; 137  : 	//Wombat778 4-11-04 rewrote to be better
; 138  : 	if (errorpriority == 1 && g_nShow2DPitErrors >= errorpriority)		

	cmp	DWORD PTR _errorpriority$[ebp], 1
	jne	SHORT $LN3@CockpitErr
	mov	eax, DWORD PTR ?g_nShow2DPitErrors@@3HA	; g_nShow2DPitErrors
	cmp	eax, DWORD PTR _errorpriority$[ebp]
	jl	SHORT $LN3@CockpitErr

; 139  : 	{
; 140  : 		sprintf (temp, "Critical 2D Cockpit Error Detected in Block Before Line %d.  System Stability May Be Compromised.", line);

	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	push	OFFSET ??_C@_0GC@FGLCMBHA@Critical?52D?5Cockpit?5Error?5Detect@
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 141  : 		MessageBox(NULL, temp, "Critical Error", MB_OK | MB_ICONSTOP | MB_SETFOREGROUND);

	push	65552					; 00010010H
	push	OFFSET ??_C@_0P@HBKCJIG@Critical?5Error?$AA@
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	jmp	SHORT $LN5@CockpitErr
$LN3@CockpitErr:

; 142  : 	}
; 143  : 	else if (errorpriority == 2 && g_nShow2DPitErrors >= errorpriority)

	cmp	DWORD PTR _errorpriority$[ebp], 2
	jne	SHORT $LN5@CockpitErr
	mov	ecx, DWORD PTR ?g_nShow2DPitErrors@@3HA	; g_nShow2DPitErrors
	cmp	ecx, DWORD PTR _errorpriority$[ebp]
	jl	SHORT $LN5@CockpitErr

; 144  : 	{
; 145  : 		sprintf (temp, "2D Cockpit Error Detected in Block Before Line %d.", line);

	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	push	OFFSET ??_C@_0DD@DBPOGJMH@2D?5Cockpit?5Error?5Detected?5in?5Blo@
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 146  : 		MessageBox(NULL, temp, "Error", MB_OK | MB_ICONSTOP | MB_SETFOREGROUND);

	push	65552					; 00010010H
	push	OFFSET ??_C@_05NAOIJFC@Error?$AA@
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
$LN5@CockpitErr:

; 147  : 	}
; 148  : 
; 149  : 
; 150  : 
; 151  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CockpitError@@YAXHH@Z ENDP				; CockpitError
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetMasterArm@SMSBaseClass@@QAEXW4MasterArmState@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newState$ = 8						; size = 4
?SetMasterArm@SMSBaseClass@@QAEXW4MasterArmState@1@@Z PROC ; SMSBaseClass::SetMasterArm, COMDAT
; _this$ = ecx

; 93   : 	void SetMasterArm (MasterArmState newState) {masterArm = newState;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newState$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMasterArm@SMSBaseClass@@QAEXW4MasterArmState@1@@Z ENDP ; SMSBaseClass::SetMasterArm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ PROC ; SMSBaseClass::MasterArm, COMDAT
; _this$ = ecx

; 92   : 	MasterArmState MasterArm(void) {return masterArm;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ENDP ; SMSBaseClass::MasterArm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?NumHardpoints@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumHardpoints@SMSBaseClass@@QAEHXZ PROC		; SMSBaseClass::NumHardpoints, COMDAT
; _this$ = ecx

; 87   : 	int NumHardpoints (void) {return numHardpoints;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumHardpoints@SMSBaseClass@@QAEHXZ ENDP		; SMSBaseClass::NumHardpoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?Unlock@DrawableBSP@@SAXH@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
?Unlock@DrawableBSP@@SAXH@Z PROC			; DrawableBSP::Unlock, COMDAT

; 76   : 	static void	Unlock( int id )			{ TheObjectList[id].Release();  };

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	add	ecx, DWORD PTR ?TheObjectList@@3PAVObjectParent@@A ; TheObjectList
	call	?Release@ObjectParent@@QAEX_N@Z		; ObjectParent::Release
	pop	ebp
	ret	0
?Unlock@DrawableBSP@@SAXH@Z ENDP			; DrawableBSP::Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?LockAndLoad@DrawableBSP@@SAXH@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
?LockAndLoad@DrawableBSP@@SAXH@Z PROC			; DrawableBSP::LockAndLoad, COMDAT

; 75   : 	static void	LockAndLoad( int id )		{ TheObjectList[id].ReferenceWithFetch(); };

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _id$[ebp]
	shl	ecx, 6
	add	ecx, DWORD PTR ?TheObjectList@@3PAVObjectParent@@A ; TheObjectList
	call	?ReferenceWithFetch@ObjectParent@@QAEXXZ ; ObjectParent::ReferenceWithFetch
	pop	ebp
	ret	0
?LockAndLoad@DrawableBSP@@SAXH@Z ENDP			; DrawableBSP::LockAndLoad
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetID@DrawableBSP@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetID@DrawableBSP@@QAEHXZ PROC				; DrawableBSP::GetID, COMDAT
; _this$ = ecx

; 72   : 	int  GetID( void )			{ return id; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+120]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@DrawableBSP@@QAEHXZ ENDP				; DrawableBSP::GetID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetTextureSet@DrawableBSP@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTextureSet@DrawableBSP@@QAEKXZ PROC			; DrawableBSP::GetTextureSet, COMDAT
; _this$ = ecx

; 60   : 	UInt32	GetTextureSet( void)	{ return instance.TextureSet; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextureSet@DrawableBSP@@QAEKXZ ENDP			; DrawableBSP::GetTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetNTextureSet@DrawableBSP@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNTextureSet@DrawableBSP@@QAEHXZ PROC		; DrawableBSP::GetNTextureSet, COMDAT
; _this$ = ecx

; 50   : 	int GetNTextureSet() { return instance.GetNTextureSet(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?GetNTextureSet@ObjectInstance@@QAEHXZ	; ObjectInstance::GetNTextureSet
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNTextureSet@DrawableBSP@@QAEHXZ ENDP		; DrawableBSP::GetNTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?SetTextureSet@DrawableBSP@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?SetTextureSet@DrawableBSP@@QAEXK@Z PROC		; DrawableBSP::SetTextureSet, COMDAT
; _this$ = ecx

; 49   : 	void SetTextureSet( UInt32 set )	{ instance.SetTextureSet( set ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?SetTextureSet@ObjectInstance@@QAEXH@Z	; ObjectInstance::SetTextureSet
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextureSet@DrawableBSP@@QAEXK@Z ENDP		; DrawableBSP::SetTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetScale@DrawableObject@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetScale@DrawableObject@@QAEXM@Z PROC			; DrawableObject::SetScale, COMDAT
; _this$ = ecx

; 34   :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   :         radius = (s/scale)*radius; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	divss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 36   :         scale = s; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 37   :     };

	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@DrawableObject@@QAEXM@Z ENDP			; DrawableObject::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ PROC	; DrawableObject::GetClass, COMDAT
; _this$ = ecx

; 26   : 	DrawClass GetClass() const { return drawClassID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ENDP	; DrawableObject::GetClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\objectinstance.h
;	COMDAT ?GetNTextureSet@ObjectInstance@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNTextureSet@ObjectInstance@@QAEHXZ PROC		; ObjectInstance::GetNTextureSet, COMDAT
; _this$ = ecx

; 39   : 	int	GetNTextureSet() { return ParentObject->nTextureSets; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movsx	eax, WORD PTR [ecx+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNTextureSet@ObjectInstance@@QAEHXZ ENDP		; ObjectInstance::GetNTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCPSoundList@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPSoundList@@QAEPAXI@Z PROC				; CPSoundList::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPSoundList@@QAE@XZ			; CPSoundList::~CPSoundList
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPSoundList@@QAEPAXI@Z ENDP				; CPSoundList::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\tod.h
;	COMDAT ?GetLightLevel@CTimeOfDay@@QAEMXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?GetLightLevel@CTimeOfDay@@QAEMXZ PROC			; CTimeOfDay::GetLightLevel, COMDAT
; _this$ = ecx

; 108  : 	float GetLightLevel()						{ return Ambient + Diffuse; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	addss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLightLevel@CTimeOfDay@@QAEMXZ ENDP			; CTimeOfDay::GetLightLevel
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ESourceDigitType@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESourceDigitType@@QAEPAXI@Z PROC			; SourceDigitType::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1SourceDigitType@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SourceDigitType@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESourceDigitType@@QAEPAXI@Z ENDP			; SourceDigitType::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SourceDigitType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SourceDigitType@@QAE@XZ PROC				; SourceDigitType::~SourceDigitType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1SourceDigitType@@QAE@XZ ENDP				; SourceDigitType::~SourceDigitType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0SourceDigitType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SourceDigitType@@QAE@XZ PROC				; SourceDigitType::SourceDigitType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SourceDigitType@@QAE@XZ ENDP				; SourceDigitType::SourceDigitType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ESourceIndicatorType@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESourceIndicatorType@@QAEPAXI@Z PROC			; SourceIndicatorType::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1SourceIndicatorType@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SourceIndicatorType@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESourceIndicatorType@@QAEPAXI@Z ENDP			; SourceIndicatorType::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SourceIndicatorType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SourceIndicatorType@@QAE@XZ PROC			; SourceIndicatorType::~SourceIndicatorType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1SourceIndicatorType@@QAE@XZ ENDP			; SourceIndicatorType::~SourceIndicatorType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0SourceIndicatorType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SourceIndicatorType@@QAE@XZ PROC			; SourceIndicatorType::SourceIndicatorType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SourceIndicatorType@@QAE@XZ ENDP			; SourceIndicatorType::SourceIndicatorType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ESourceLightType@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESourceLightType@@QAEPAXI@Z PROC			; SourceLightType::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1SourceLightType@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SourceLightType@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESourceLightType@@QAEPAXI@Z ENDP			; SourceLightType::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SourceLightType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SourceLightType@@QAE@XZ PROC				; SourceLightType::~SourceLightType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1SourceLightType@@QAE@XZ ENDP				; SourceLightType::~SourceLightType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0SourceLightType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SourceLightType@@QAE@XZ PROC				; SourceLightType::SourceLightType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SourceLightType@@QAE@XZ ENDP				; SourceLightType::SourceLightType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_playerAC$ = -32					; size = 4
_this$ = -28						; size = 4
_OffsetX$ = -24						; size = 4
_OffsetY$ = -20						; size = 4
_Turbulence$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_Vp$ = 8						; size = 4
?AddTurbulenceVp@CockpitManager@@QAEXPAUViewportBounds@@@Z PROC ; CockpitManager::AddTurbulenceVp
; _this$ = ecx

; 5647 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5648 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 5649 : 	Tpoint	Turbulence = playerAC->GetTurbulence();

	lea	eax, DWORD PTR _Turbulence$[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetTurbulence@AircraftClass@@QAE?AUTpoint@@XZ ; AircraftClass::GetTurbulence

; 5650 : 	// to avoid shift of viewports coming from decimals, use it only if integer offsets available
; 5651 : 	float	OffsetX= PitTurbulence.x * 2.0f / DisplayOptions.DispWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+728]
	mulss	xmm0, DWORD PTR __real@40000000
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	movss	DWORD PTR _OffsetX$[ebp], xmm0

; 5652 : 	float	OffsetY= -PitTurbulence.y * 2.0f / DisplayOptions.DispHeight;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+732]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm1, ecx
	divss	xmm0, xmm1
	movss	DWORD PTR _OffsetY$[ebp], xmm0

; 5653 : 	Vp->left+=OffsetX;

	mov	edx, DWORD PTR _Vp$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR _OffsetX$[ebp]
	mov	eax, DWORD PTR _Vp$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 5654 : 	Vp->right+=OffsetX;

	mov	ecx, DWORD PTR _Vp$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	addss	xmm0, DWORD PTR _OffsetX$[ebp]
	mov	edx, DWORD PTR _Vp$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 5655 : 	Vp->top+=OffsetY;

	mov	eax, DWORD PTR _Vp$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _OffsetY$[ebp]
	mov	ecx, DWORD PTR _Vp$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 5656 : 	Vp->bottom+=OffsetY;

	mov	edx, DWORD PTR _Vp$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR _OffsetY$[ebp]
	mov	eax, DWORD PTR _Vp$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 5657 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?AddTurbulenceVp@CockpitManager@@QAEXPAUViewportBounds@@@Z ENDP ; CockpitManager::AddTurbulenceVp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv204 = -40						; size = 4
_playerAC$ = -36					; size = 4
tv198 = -32						; size = 4
tv206 = -28						; size = 4
tv184 = -24						; size = 4
_this$ = -20						; size = 4
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?SetTurbulence@CockpitManager@@QAEXXZ PROC		; CockpitManager::SetTurbulence
; _this$ = ecx

; 5611 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5612 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 5613 : 	PitTurbulence = playerAC->GetTurbulence();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?GetTurbulence@AircraftClass@@QAE?AUTpoint@@XZ ; AircraftClass::GetTurbulence
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 728				; 000002d8H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 5614 : 	// Scale to pixels
; 5615 : 	PitTurbulence.y=PitTurbulence.z * DisplayOptions.DispHeight;

	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+736]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+732], xmm0

; 5616 : 	PitTurbulence.x=PitTurbulence.x * DisplayOptions.DispWidth;

	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+728]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+728], xmm0

; 5617 : 	// Being 2D Pit with no depth, differently from 3D Pith, shaking may be too much violent
; 5618 : 	// so, we r going to apply a Square mantaining to shake values sign to it and then multiply by 2
; 5619 : 	// Pu239 Someone forgot to consider what happens when PitTurbulence values are 0	
; 5620 :     if(PitTurbulence.y > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+732]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@SetTurbule

; 5621 :     {
; 5622 :         PitTurbulence.y = (float)((int)(PitTurbulence.y * 2.0f / sqrtf(PitTurbulence.y)));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+732]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [eax+732]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv204[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv184[ebp]
	movss	xmm0, DWORD PTR tv204[ebp]
	divss	xmm0, DWORD PTR tv184[ebp]
	cvttss2si ecx, xmm0
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+732], xmm0

; 5623 :     }
; 5624 :     else

	jmp	SHORT $LN3@SetTurbule
$LN4@SetTurbule:

; 5625 :     {
; 5626 :         PitTurbulence.y = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+732], xmm0
$LN3@SetTurbule:

; 5627 :     }
; 5628 :     if(PitTurbulence.x > 0)	

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+728]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@SetTurbule

; 5629 :     {
; 5630 :         PitTurbulence.x = (float)((int)(PitTurbulence.x * 2.0f / sqrtf(PitTurbulence.x)));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+728]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [eax+728]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv206[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv198[ebp]
	movss	xmm0, DWORD PTR tv206[ebp]
	divss	xmm0, DWORD PTR tv198[ebp]
	cvttss2si ecx, xmm0
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+728], xmm0

; 5631 :     }
; 5632 :     else

	jmp	SHORT $LN1@SetTurbule
$LN2@SetTurbule:

; 5633 :     {
; 5634 :         PitTurbulence.x = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+728], xmm0
$LN1@SetTurbule:

; 5635 :     }
; 5636 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTurbulence@CockpitManager@@QAEXXZ ENDP		; CockpitManager::SetTurbulence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$1 = -4						; size = 4
_pVtx$ = 8						; size = 4
?AddTurbulence@CockpitManager@@QAEXPAUTwoDVertex@@@Z PROC ; CockpitManager::AddTurbulence
; _this$ = ecx

; 5641 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5642 : 	for(DWORD a=0; a<4; a++) { pVtx[a].x+=PitTurbulence.x; pVtx[a].y+=PitTurbulence.y; };

	mov	DWORD PTR _a$1[ebp], 0
	jmp	SHORT $LN3@AddTurbule
$LN2@AddTurbule:
	mov	eax, DWORD PTR _a$1[ebp]
	add	eax, 1
	mov	DWORD PTR _a$1[ebp], eax
$LN3@AddTurbule:
	cmp	DWORD PTR _a$1[ebp], 4
	jae	SHORT $LN1@AddTurbule
	mov	ecx, DWORD PTR _a$1[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _pVtx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	addss	xmm0, DWORD PTR [eax+728]
	mov	ecx, DWORD PTR _a$1[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0
	mov	eax, DWORD PTR _a$1[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _pVtx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+4]
	addss	xmm0, DWORD PTR [edx+732]
	mov	eax, DWORD PTR _a$1[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _pVtx$[ebp]
	movss	DWORD PTR [ecx+eax+4], xmm0
	jmp	SHORT $LN2@AddTurbule
$LN1@AddTurbule:

; 5643 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AddTurbulence@CockpitManager@@QAEXPAUTwoDVertex@@@Z ENDP ; CockpitManager::AddTurbulence
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_child$ = -12						; size = 4
_sms$ = -8						; size = 4
_stationNum$ = -4					; size = 4
?CockDetachWeapons@CockpitManager@@QAEXXZ PROC		; CockpitManager::CockDetachWeapons
; _this$ = ecx

; 3827 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3828 : 	int				stationNum;
; 3829 : 	SMSClass		*sms = SimDriver.GetPlayerAircraft()->Sms;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+940]
	mov	DWORD PTR _sms$[ebp], eax

; 3830 : 	DrawableBSP*	child;
; 3831 : 	for (stationNum=1; stationNum < sms->NumHardpoints(); stationNum++)

	mov	DWORD PTR _stationNum$[ebp], 1
	jmp	SHORT $LN4@CockDetach
$LN3@CockDetach:
	mov	ecx, DWORD PTR _stationNum$[ebp]
	add	ecx, 1
	mov	DWORD PTR _stationNum$[ebp], ecx
$LN4@CockDetach:
	mov	ecx, DWORD PTR _sms$[ebp]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _stationNum$[ebp], eax
	jge	SHORT $LN5@CockDetach

; 3832 : 	{
; 3833 : 		// MLR 2/20/2004 - new rack code, compatible with SP3 still
; 3834 : 		child = sms->hardPoint[stationNum]->GetTopDrawable();

	mov	edx, DWORD PTR _sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _stationNum$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _stationNum$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _child$[ebp], eax

; 3835 : 		if (child) mpGeometry->DetachChild( child, stationNum-1 );

	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN1@CockDetach
	mov	ecx, DWORD PTR _stationNum$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _child$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild
$LN1@CockDetach:

; 3836 : 	}

	jmp	SHORT $LN3@CockDetach
$LN5@CockDetach:

; 3837 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CockDetachWeapons@CockpitManager@@QAEXXZ ENDP		; CockpitManager::CockDetachWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_child$ = -12						; size = 4
_sms$ = -8						; size = 4
_stationNum$ = -4					; size = 4
?CockAttachWeapons@CockpitManager@@QAEXXZ PROC		; CockpitManager::CockAttachWeapons
; _this$ = ecx

; 3813 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 3814 : 	int				stationNum;
; 3815 : 	SMSClass		*sms = SimDriver.GetPlayerAircraft()->Sms;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+940]
	mov	DWORD PTR _sms$[ebp], eax

; 3816 : 	DrawableBSP*	child;
; 3817 : 	for (stationNum=1; stationNum < sms->NumHardpoints(); stationNum++)

	mov	DWORD PTR _stationNum$[ebp], 1
	jmp	SHORT $LN4@CockAttach
$LN3@CockAttach:
	mov	ecx, DWORD PTR _stationNum$[ebp]
	add	ecx, 1
	mov	DWORD PTR _stationNum$[ebp], ecx
$LN4@CockAttach:
	mov	ecx, DWORD PTR _sms$[ebp]
	call	?NumHardpoints@SMSBaseClass@@QAEHXZ	; SMSBaseClass::NumHardpoints
	cmp	DWORD PTR _stationNum$[ebp], eax
	jge	SHORT $LN5@CockAttach

; 3818 : 	{
; 3819 : 		// MLR 2/20/2004 - new rack code, compatible with SP3 still
; 3820 : 		child = sms->hardPoint[stationNum]->GetTopDrawable();

	mov	edx, DWORD PTR _sms$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _stationNum$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _sms$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _stationNum$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _child$[ebp], eax

; 3821 : 		if (child) mpGeometry->AttachChild( child, stationNum-1 );

	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN1@CockAttach
	mov	ecx, DWORD PTR _stationNum$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _child$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild
$LN1@CockAttach:

; 3822 : 	}

	jmp	SHORT $LN3@CockAttach
$LN5@CockAttach:

; 3823 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CockAttachWeapons@CockpitManager@@QAEXXZ ENDP		; CockpitManager::CockAttachWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_numpanels$ = -12					; size = 4
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_mIdNum$ = 8						; size = 4
?GetPanelNum@CockpitManager@@QAEHH@Z PROC		; CockpitManager::GetPanelNum
; _this$ = ecx

; 5516 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 5517 : 	int numpanels = GetNumPanels();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumPanels@CockpitManager@@QAEHXZ	; CockpitManager::GetNumPanels
	mov	DWORD PTR _numpanels$[ebp], eax

; 5518 : 
; 5519 : 	for (int i = 0; i < numpanels; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetPanelNu
$LN3@GetPanelNu:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetPanelNu:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _numpanels$[ebp]
	jge	SHORT $LN2@GetPanelNu

; 5520 : 		if (GetPanel(i)->mIdNum == mIdNum)

	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR _mIdNum$[ebp]
	jne	SHORT $LN1@GetPanelNu

; 5521 : 			return i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN5@GetPanelNu
$LN1@GetPanelNu:

; 5522 : 	return -1;

	jmp	SHORT $LN3@GetPanelNu
$LN2@GetPanelNu:
	or	eax, -1
$LN5@GetPanelNu:

; 5523 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPanelNum@CockpitManager@@QAEHH@Z ENDP		; CockpitManager::GetPanelNum
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv273 = -52						; size = 4
tv287 = -48						; size = 4
tv265 = -44						; size = 4
tv238 = -40						; size = 4
tv285 = -36						; size = 4
tv230 = -32						; size = 4
_currentpanel$ = -28					; size = 4
_lastpanel$ = -24					; size = 4
_newpanelnum$ = -20					; size = 4
_lastpanelnum$ = -16					; size = 4
_newpanel$ = -12					; size = 4
_this$ = -8						; size = 4
_bestpan$ = -2						; size = 1
_besttilt$ = -1						; size = 1
_pan$ = 8						; size = 4
_tilt$ = 12						; size = 4
?Set2DPanelDirection@CockpitManager@@QAEHMM@Z PROC	; CockpitManager::Set2DPanelDirection
; _this$ = ecx

; 5532 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 5533 : 
; 5534 : 	CPPanel *currentpanel;
; 5535 : 
; 5536 : 	if (mpActivePanel)			//Wombat778 11-17-04 added for security against changing views

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN23@Set2DPanel

; 5537 : 		currentpanel = mpActivePanel;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR _currentpanel$[ebp], edx
	jmp	SHORT $LN20@Set2DPanel
$LN23@Set2DPanel:

; 5538 : 	else if (mpNextActivePanel)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	je	SHORT $LN21@Set2DPanel

; 5539 : 		currentpanel = mpNextActivePanel;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	DWORD PTR _currentpanel$[ebp], edx

; 5540 : 	else 

	jmp	SHORT $LN20@Set2DPanel
$LN21@Set2DPanel:

; 5541 : 		return false;			//this is a bad place to be in because we have no starting panels.

	xor	eax, eax
	jmp	$LN24@Set2DPanel
$LN20@Set2DPanel:

; 5542 : 
; 5543 : 	int newpanel = currentpanel->mIdNum;

	mov	eax, DWORD PTR _currentpanel$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _newpanel$[ebp], ecx

; 5544 : 	int newpanelnum = GetPanelNum(newpanel);

	mov	edx, DWORD PTR _newpanel$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanelNum@CockpitManager@@QAEHH@Z	; CockpitManager::GetPanelNum
	mov	DWORD PTR _newpanelnum$[ebp], eax

; 5545 : 	int lastpanel = newpanel;

	mov	eax, DWORD PTR _newpanel$[ebp]
	mov	DWORD PTR _lastpanel$[ebp], eax

; 5546 : 	int lastpanelnum = newpanelnum;

	mov	ecx, DWORD PTR _newpanelnum$[ebp]
	mov	DWORD PTR _lastpanelnum$[ebp], ecx

; 5547 : 
; 5548 : 	bool bestpan = false;

	mov	BYTE PTR _bestpan$[ebp], 0

; 5549 : 	bool besttilt = false;

	mov	BYTE PTR _besttilt$[ebp], 0
$LN19@Set2DPanel:

; 5550 : 
; 5551 : 	while (!besttilt)

	movzx	edx, BYTE PTR _besttilt$[ebp]
	test	edx, edx
	jne	$LN18@Set2DPanel

; 5552 : 	{
; 5553 : 		if (tilt > GetPanel(lastpanelnum)->mTilt)

	mov	eax, DWORD PTR _lastpanelnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR _tilt$[ebp]
	comiss	xmm0, DWORD PTR [eax+84]
	jbe	SHORT $LN17@Set2DPanel

; 5554 : 			newpanel = GetPanel(lastpanelnum)->mAdjacentPanels.S;

	mov	ecx, DWORD PTR _lastpanelnum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	mov	edx, DWORD PTR [eax+60]
	mov	DWORD PTR _newpanel$[ebp], edx
	jmp	SHORT $LN14@Set2DPanel
$LN17@Set2DPanel:

; 5555 : 		else if (tilt < GetPanel(lastpanelnum)->mTilt)

	mov	eax, DWORD PTR _lastpanelnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR [eax+84]
	comiss	xmm0, DWORD PTR _tilt$[ebp]
	jbe	SHORT $LN15@Set2DPanel

; 5556 : 			newpanel = GetPanel(lastpanelnum)->mAdjacentPanels.N;

	mov	ecx, DWORD PTR _lastpanelnum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	mov	edx, DWORD PTR [eax+44]
	mov	DWORD PTR _newpanel$[ebp], edx
	jmp	SHORT $LN14@Set2DPanel
$LN15@Set2DPanel:

; 5557 : 		else besttilt = true;

	mov	BYTE PTR _besttilt$[ebp], 1
$LN14@Set2DPanel:

; 5558 : 		if(newpanel >= 0) 

	cmp	DWORD PTR _newpanel$[ebp], 0
	jl	SHORT $LN13@Set2DPanel

; 5559 : 			newpanelnum = GetPanelNum(newpanel);

	mov	eax, DWORD PTR _newpanel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanelNum@CockpitManager@@QAEHH@Z	; CockpitManager::GetPanelNum
	mov	DWORD PTR _newpanelnum$[ebp], eax

; 5560 : 		else 

	jmp	SHORT $LN12@Set2DPanel
$LN13@Set2DPanel:

; 5561 : 		{
; 5562 : 			newpanel = lastpanel;

	mov	ecx, DWORD PTR _lastpanel$[ebp]
	mov	DWORD PTR _newpanel$[ebp], ecx

; 5563 : 			besttilt = true;

	mov	BYTE PTR _besttilt$[ebp], 1
$LN12@Set2DPanel:

; 5564 : 		}
; 5565 : 		if (fabs(GetPanel(newpanelnum)->mTilt - tilt) >= fabs(GetPanel(lastpanelnum)->mTilt - tilt))

	mov	edx, DWORD PTR _newpanelnum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR [eax+84]
	subss	xmm0, DWORD PTR _tilt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv230[ebp]
	movss	xmm0, DWORD PTR tv230[ebp]
	mov	eax, DWORD PTR _lastpanelnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv285[ebp], xmm0
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR [eax+84]
	subss	xmm0, DWORD PTR _tilt$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv238[ebp]
	movss	xmm0, DWORD PTR tv285[ebp]
	comiss	xmm0, DWORD PTR tv238[ebp]
	jb	SHORT $LN11@Set2DPanel

; 5566 : 		{
; 5567 : 			newpanel = lastpanel;

	mov	ecx, DWORD PTR _lastpanel$[ebp]
	mov	DWORD PTR _newpanel$[ebp], ecx

; 5568 : 			newpanelnum = lastpanelnum;

	mov	edx, DWORD PTR _lastpanelnum$[ebp]
	mov	DWORD PTR _newpanelnum$[ebp], edx

; 5569 : 			besttilt = true;

	mov	BYTE PTR _besttilt$[ebp], 1
$LN11@Set2DPanel:

; 5570 : 		}
; 5571 : 		lastpanel = newpanel;

	mov	eax, DWORD PTR _newpanel$[ebp]
	mov	DWORD PTR _lastpanel$[ebp], eax

; 5572 : 		lastpanelnum = newpanelnum;

	mov	ecx, DWORD PTR _newpanelnum$[ebp]
	mov	DWORD PTR _lastpanelnum$[ebp], ecx

; 5573 : 	}

	jmp	$LN19@Set2DPanel
$LN18@Set2DPanel:

; 5574 : 	while (!bestpan)

	movzx	edx, BYTE PTR _bestpan$[ebp]
	test	edx, edx
	jne	$LN9@Set2DPanel

; 5575 : 	{
; 5576 : 
; 5577 : 		if (pan > GetPanel(lastpanelnum)->mPan)

	mov	eax, DWORD PTR _lastpanelnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR _pan$[ebp]
	comiss	xmm0, DWORD PTR [eax+80]
	jbe	SHORT $LN8@Set2DPanel

; 5578 : 			newpanel = GetPanel(lastpanelnum)->mAdjacentPanels.E;

	mov	ecx, DWORD PTR _lastpanelnum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR _newpanel$[ebp], edx
	jmp	SHORT $LN5@Set2DPanel
$LN8@Set2DPanel:

; 5579 : 		else if (pan < GetPanel(lastpanelnum)->mPan)

	mov	eax, DWORD PTR _lastpanelnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR _pan$[ebp]
	jbe	SHORT $LN6@Set2DPanel

; 5580 : 			newpanel = GetPanel(lastpanelnum)->mAdjacentPanels.W;

	mov	ecx, DWORD PTR _lastpanelnum$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	mov	edx, DWORD PTR [eax+68]
	mov	DWORD PTR _newpanel$[ebp], edx
	jmp	SHORT $LN5@Set2DPanel
$LN6@Set2DPanel:

; 5581 : 		else bestpan = true;

	mov	BYTE PTR _bestpan$[ebp], 1
$LN5@Set2DPanel:

; 5582 : 		if(newpanel >= 0) 

	cmp	DWORD PTR _newpanel$[ebp], 0
	jl	SHORT $LN4@Set2DPanel

; 5583 : 			newpanelnum = GetPanelNum(newpanel);

	mov	eax, DWORD PTR _newpanel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanelNum@CockpitManager@@QAEHH@Z	; CockpitManager::GetPanelNum
	mov	DWORD PTR _newpanelnum$[ebp], eax

; 5584 : 		else 

	jmp	SHORT $LN3@Set2DPanel
$LN4@Set2DPanel:

; 5585 : 		{
; 5586 : 			newpanel = lastpanel;

	mov	ecx, DWORD PTR _lastpanel$[ebp]
	mov	DWORD PTR _newpanel$[ebp], ecx

; 5587 : 			bestpan = true;

	mov	BYTE PTR _bestpan$[ebp], 1
$LN3@Set2DPanel:

; 5588 : 		}		
; 5589 : 		if (fabs(GetPanel(newpanelnum)->mPan - pan) >= fabs(GetPanel(lastpanelnum)->mPan - pan))

	mov	edx, DWORD PTR _newpanelnum$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR [eax+80]
	subss	xmm0, DWORD PTR _pan$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv265[ebp]
	movss	xmm0, DWORD PTR tv265[ebp]
	mov	eax, DWORD PTR _lastpanelnum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv287[ebp], xmm0
	call	?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ; CockpitManager::GetPanel
	movss	xmm0, DWORD PTR [eax+80]
	subss	xmm0, DWORD PTR _pan$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv273[ebp]
	movss	xmm0, DWORD PTR tv287[ebp]
	comiss	xmm0, DWORD PTR tv273[ebp]
	jb	SHORT $LN2@Set2DPanel

; 5590 : 		{
; 5591 : 			newpanel = lastpanel;

	mov	ecx, DWORD PTR _lastpanel$[ebp]
	mov	DWORD PTR _newpanel$[ebp], ecx

; 5592 : 			newpanelnum = lastpanelnum;

	mov	edx, DWORD PTR _lastpanelnum$[ebp]
	mov	DWORD PTR _newpanelnum$[ebp], edx

; 5593 : 			bestpan = true;

	mov	BYTE PTR _bestpan$[ebp], 1
$LN2@Set2DPanel:

; 5594 : 		}
; 5595 : 		lastpanel = newpanel;

	mov	eax, DWORD PTR _newpanel$[ebp]
	mov	DWORD PTR _lastpanel$[ebp], eax

; 5596 : 		lastpanelnum = newpanelnum;

	mov	ecx, DWORD PTR _newpanelnum$[ebp]
	mov	DWORD PTR _lastpanelnum$[ebp], ecx

; 5597 : 	}

	jmp	$LN18@Set2DPanel
$LN9@Set2DPanel:

; 5598 : 
; 5599 : 	if (newpanel != currentpanel->mIdNum)

	mov	edx, DWORD PTR _currentpanel$[ebp]
	mov	eax, DWORD PTR _newpanel$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN1@Set2DPanel

; 5600 : 	{
; 5601 : 		SetActivePanel(newpanel);

	mov	ecx, DWORD PTR _newpanel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel

; 5602 : 		return true;

	mov	eax, 1
	jmp	SHORT $LN24@Set2DPanel
$LN1@Set2DPanel:

; 5603 : 	}
; 5604 : 	return false;

	xor	eax, eax
$LN24@Set2DPanel:

; 5605 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Set2DPanelDirection@CockpitManager@@QAEHMM@Z ENDP	; CockpitManager::Set2DPanelDirection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpmanager.h
;	COMDAT ?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z PROC	; CockpitManager::GetPanel, COMDAT
; _this$ = ecx

; 615  : 	CPPanel* 	GetPanel(int num) {return mpPanels[num];}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPanel@CockpitManager@@QAEPAVCPPanel@@H@Z ENDP	; CockpitManager::GetPanel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpmanager.h
;	COMDAT ?GetNumPanels@CockpitManager@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumPanels@CockpitManager@@QAEHXZ PROC		; CockpitManager::GetNumPanels, COMDAT
; _this$ = ecx

; 614  : 	int			GetNumPanels(void) {return mNumPanels;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumPanels@CockpitManager@@QAEHXZ ENDP		; CockpitManager::GetNumPanels
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv179 = -60						; size = 4
_instFactor$ = -56					; size = 4
_instAux$1 = -52					; size = 4
tv147 = -48						; size = 4
_floodFactor$ = -44					; size = 4
tv85 = -40						; size = 4
tv67 = -36						; size = 4
_eLight$ = -32						; size = 4
_this$ = -28						; size = 4
_floodAux$2 = -24					; size = 4
_i$3 = -20						; size = 4
_pAircraft$ = -16					; size = 4
_i$4 = -12						; size = 4
_i$5 = -8						; size = 4
_instOn$6 = -4						; size = 1
_floodOn$7 = -3						; size = 1
tv155 = -2						; size = 1
tv94 = -1						; size = 1
_cLight$ = 8						; size = 4
_iLight$ = 12						; size = 4
?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z PROC	; CockpitManager::ComputeLightFactors
; _this$ = ecx

; 5069 : void CockpitManager::ComputeLightFactors(float *cLight, float *iLight){

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 5070 : 	// minimum cockpit lighting, from enviroment
; 5071 : 	float eLight = (lightLevel < 0.01f) ? 0.01f : lightLevel;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR [eax+280]
	jbe	SHORT $LN17@ComputeLig
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv67[ebp], xmm0
	jmp	SHORT $LN18@ComputeLig
$LN17@ComputeLig:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+280]
	movss	DWORD PTR tv67[ebp], xmm0
$LN18@ComputeLig:
	movss	xmm0, DWORD PTR tv67[ebp]
	movss	DWORD PTR _eLight$[ebp], xmm0

; 5072 : 	// use one light for each color
; 5073 : 	for (int i=0;i<3;i++){

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN14@ComputeLig
$LN13@ComputeLig:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN14@ComputeLig:
	cmp	DWORD PTR _i$3[ebp], 3
	jge	SHORT $LN12@ComputeLig

; 5074 : 		cLight[i] = eLight;

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _cLight$[ebp]
	movss	xmm0, DWORD PTR _eLight$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0

; 5075 : 		iLight[i] = eLight;

	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR _iLight$[ebp]
	movss	xmm0, DWORD PTR _eLight$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0

; 5076 : 	}

	jmp	SHORT $LN13@ComputeLig
$LN12@ComputeLig:

; 5077 : 	float floodFactor = 1.0f, instFactor = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _floodFactor$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _instFactor$[ebp], xmm0

; 5078 : 
; 5079 : 	// COBRA - RED - Do it if still a Player Entity available
; 5080 : 	AircraftClass *pAircraft = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _pAircraft$[ebp], eax

; 5081 : 	if (pAircraft){

	cmp	DWORD PTR _pAircraft$[ebp], 0
	je	$LN1@ComputeLig

; 5082 : 		//flood
; 5083 : 		int floodAux = pAircraft->GetInteriorLight();

	mov	ecx, DWORD PTR _pAircraft$[ebp]
	call	?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInteriorLight
	mov	DWORD PTR _floodAux$2[ebp], eax

; 5084 : 		// sfr: this is totally out of place
; 5085 : 		pAircraft->SetSwitch( COMP_3DPIT_INTERIOR_LIGHTS, (floodAux)?1:0);

	cmp	DWORD PTR _floodAux$2[ebp], 0
	je	SHORT $LN19@ComputeLig
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN20@ComputeLig
$LN19@ComputeLig:
	mov	DWORD PTR tv85[ebp], 0
$LN20@ComputeLig:
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	push	127					; 0000007fH
	mov	ecx, DWORD PTR _pAircraft$[ebp]
	call	?SetSwitch@SimMoverClass@@QAEXHH@Z	; SimMoverClass::SetSwitch

; 5086 : 		if (floodAux) pAircraft->SetAcStatusBits(AircraftClass::ACSTATUS_PITLIGHT);

	cmp	DWORD PTR _floodAux$2[ebp], 0
	je	SHORT $LN10@ComputeLig
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pAircraft$[ebp]
	call	?SetAcStatusBits@AircraftClass@@QAEXH@Z	; AircraftClass::SetAcStatusBits
	jmp	SHORT $LN9@ComputeLig
$LN10@ComputeLig:

; 5087 : 		else pAircraft->ClearAcStatusBits(AircraftClass::ACSTATUS_PITLIGHT);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _pAircraft$[ebp]
	call	?ClearAcStatusBits@AircraftClass@@QAEXH@Z ; AircraftClass::ClearAcStatusBits
$LN9@ComputeLig:

; 5088 : 		bool floodOn = (floodAux > 0) ? true : false;

	cmp	DWORD PTR _floodAux$2[ebp], 0
	jle	SHORT $LN21@ComputeLig
	mov	BYTE PTR tv94[ebp], 1
	jmp	SHORT $LN22@ComputeLig
$LN21@ComputeLig:
	mov	BYTE PTR tv94[ebp], 0
$LN22@ComputeLig:
	mov	dl, BYTE PTR tv94[ebp]
	mov	BYTE PTR _floodOn$7[ebp], dl

; 5089 : 		floodFactor = (float)(floodAux) / 2.0f;

	cvtsi2ss xmm0, DWORD PTR _floodAux$2[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _floodFactor$[ebp], xmm0

; 5090 : 		// add lightLevel
; 5091 : 		if (floodOn){

	movzx	eax, BYTE PTR _floodOn$7[ebp]
	test	eax, eax
	je	$LN5@ComputeLig

; 5092 : 			for (int i=0;i<3;i++){

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN7@ComputeLig
$LN6@ComputeLig:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN7@ComputeLig:
	cmp	DWORD PTR _i$5[ebp], 3
	jge	SHORT $LN5@ComputeLig

; 5093 : 				cLight[i] = mFloodLight[i]*floodFactor + eLight;

	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+256]
	mulss	xmm0, DWORD PTR _floodFactor$[ebp]
	addss	xmm0, DWORD PTR _eLight$[ebp]
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR _cLight$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0

; 5094 : 				cLight[i] = (cLight[i] > 1.0f) ? 1.0f : cLight[i];

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _cLight$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN23@ComputeLig
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN24@ComputeLig
$LN23@ComputeLig:
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _cLight$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv147[ebp], xmm0
$LN24@ComputeLig:
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR _cLight$[ebp]
	movss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0

; 5095 : 				iLight[i] = cLight[i];

	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR _iLight$[ebp]
	mov	edx, DWORD PTR _i$5[ebp]
	mov	esi, DWORD PTR _cLight$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 5096 : 			}

	jmp	$LN6@ComputeLig
$LN5@ComputeLig:

; 5097 : 		}
; 5098 : 
; 5099 : 		//instrument
; 5100 : 		int instAux = pAircraft->GetInstrumentLight();

	mov	ecx, DWORD PTR _pAircraft$[ebp]
	call	?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ; AircraftClass::GetInstrumentLight
	mov	DWORD PTR _instAux$1[ebp], eax

; 5101 : 		bool instOn = (instAux > 0) ? true : false;

	cmp	DWORD PTR _instAux$1[ebp], 0
	jle	SHORT $LN25@ComputeLig
	mov	BYTE PTR tv155[ebp], 1
	jmp	SHORT $LN26@ComputeLig
$LN25@ComputeLig:
	mov	BYTE PTR tv155[ebp], 0
$LN26@ComputeLig:
	mov	al, BYTE PTR tv155[ebp]
	mov	BYTE PTR _instOn$6[ebp], al

; 5102 : 		instFactor = (float)(instAux) / 2.0f;

	cvtsi2ss xmm0, DWORD PTR _instAux$1[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _instFactor$[ebp], xmm0

; 5103 : 		//instrument lights with own illumination, but they can be less than flood
; 5104 : 		//instrument light is added to existing flood light
; 5105 : 		if (instOn){

	movzx	ecx, BYTE PTR _instOn$6[ebp]
	test	ecx, ecx
	je	$LN1@ComputeLig

; 5106 : 			for (int i=0;i<3;i++){

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN3@ComputeLig
$LN2@ComputeLig:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN3@ComputeLig:
	cmp	DWORD PTR _i$4[ebp], 3
	jge	SHORT $LN1@ComputeLig

; 5107 : 				iLight[i] = mInstLight[i]*instFactor + cLight[i] + eLight;

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+268]
	mulss	xmm0, DWORD PTR _instFactor$[ebp]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _cLight$[ebp]
	addss	xmm0, DWORD PTR [eax+edx*4]
	addss	xmm0, DWORD PTR _eLight$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _iLight$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0

; 5108 : 				iLight[i] = (iLight[i] > 1.0f) ? 1.0f : iLight[i];

	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR _iLight$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN27@ComputeLig
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv179[ebp], xmm0
	jmp	SHORT $LN28@ComputeLig
$LN27@ComputeLig:
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR _iLight$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv179[ebp], xmm0
$LN28@ComputeLig:
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR _iLight$[ebp]
	movss	xmm0, DWORD PTR tv179[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0

; 5109 : 			}

	jmp	$LN2@ComputeLig
$LN1@ComputeLig:

; 5110 : 		}	
; 5111 : 	}
; 5112 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z ENDP	; CockpitManager::ComputeLightFactors
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_colorBGR$ = -60					; size = 4
_this$ = -56						; size = 4
_red$ = -52						; size = 4
_blue$ = -48						; size = 4
_green$ = -44						; size = 4
tv69 = -40						; size = 4
tv137 = -36						; size = 4
_light$ = -32						; size = 4
_iLight$ = -28						; size = 12
_cLight$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_inColor$ = 8						; size = 4
_useInst$ = 12						; size = 1
?ApplyLightingToRGB@CockpitManager@@QAEKK_N@Z PROC	; CockpitManager::ApplyLightingToRGB
; _this$ = ecx

; 5049 : DWORD CockpitManager::ApplyLightingToRGB(DWORD inColor, bool useInst){

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5050 : 	float cLight[3], iLight[3];
; 5051 : 	ComputeLightFactors(cLight, iLight);

	lea	eax, DWORD PTR _iLight$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cLight$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z ; CockpitManager::ComputeLightFactors

; 5052 : 
; 5053 : 	float *light = (useInst) ? iLight : cLight;

	movzx	edx, BYTE PTR _useInst$[ebp]
	test	edx, edx
	je	SHORT $LN3@ApplyLight
	lea	eax, DWORD PTR _iLight$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@ApplyLight
$LN3@ApplyLight:
	lea	ecx, DWORD PTR _cLight$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
$LN4@ApplyLight:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _light$[ebp], edx

; 5054 : 
; 5055 : 	//invert color components
; 5056 : 	DWORD red = inColor & 0xff0000;

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, 16711680				; 00ff0000H
	mov	DWORD PTR _red$[ebp], eax

; 5057 : 	DWORD green = inColor & 0x00ff00;

	mov	ecx, DWORD PTR _inColor$[ebp]
	and	ecx, 65280				; 0000ff00H
	mov	DWORD PTR _green$[ebp], ecx

; 5058 : 	DWORD blue = inColor & 0x0000ff;

	mov	edx, DWORD PTR _inColor$[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _blue$[ebp], edx

; 5059 : 	DWORD colorBGR = (red) | (green << 8) | (blue << 16);

	mov	eax, DWORD PTR _green$[ebp]
	shl	eax, 8
	or	eax, DWORD PTR _red$[ebp]
	mov	ecx, DWORD PTR _blue$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _colorBGR$[ebp], eax

; 5060 : 
; 5061 : 	return (OTWDriver.renderer->GetGreenMode()) ?
; 5062 : 		CalculateNVGColor(CalculateColor(inColor, light[0], light[1], light[2])):
; 5063 : 		CalculateColor(inColor, light[0], light[1], light[2])
; 5064 : 	;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@ApplyLight
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _inColor$[ebp]
	push	eax
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN6@ApplyLight
$LN5@ApplyLight:
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _inColor$[ebp]
	push	ecx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv137[ebp], eax
$LN6@ApplyLight:
	mov	eax, DWORD PTR tv137[ebp]

; 5065 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?ApplyLightingToRGB@CockpitManager@@QAEKK_N@Z ENDP	; CockpitManager::ApplyLightingToRGB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
tv69 = -40						; size = 4
tv130 = -36						; size = 4
_light$ = -32						; size = 4
_cLight$ = -28						; size = 12
_iLight$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_inColor$ = 8						; size = 4
_useInst$ = 12						; size = 1
?ApplyLighting@CockpitManager@@QAEKK_N@Z PROC		; CockpitManager::ApplyLighting
; _this$ = ecx

; 5036 : DWORD CockpitManager::ApplyLighting(DWORD inColor, bool useInst){

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5037 : 	float cLight[3], iLight[3];
; 5038 : 	ComputeLightFactors(cLight, iLight);

	lea	eax, DWORD PTR _iLight$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cLight$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z ; CockpitManager::ComputeLightFactors

; 5039 : 
; 5040 : 	float *light = (useInst) ? iLight : cLight;

	movzx	edx, BYTE PTR _useInst$[ebp]
	test	edx, edx
	je	SHORT $LN3@ApplyLight
	lea	eax, DWORD PTR _iLight$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@ApplyLight
$LN3@ApplyLight:
	lea	ecx, DWORD PTR _cLight$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
$LN4@ApplyLight:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _light$[ebp], edx

; 5041 : 
; 5042 : 	return (OTWDriver.renderer->GetGreenMode()) ?
; 5043 : 		CalculateNVGColor(CalculateColor(inColor, light[0], light[1], light[2])):
; 5044 : 		CalculateColor(inColor, light[0], light[1], light[2])
; 5045 : 	;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@ApplyLight
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _inColor$[ebp]
	push	ecx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN6@ApplyLight
$LN5@ApplyLight:
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _light$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _inColor$[ebp]
	push	edx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv130[ebp], eax
$LN6@ApplyLight:
	mov	eax, DWORD PTR tv130[ebp]

; 5046 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?ApplyLighting@CockpitManager@@QAEKK_N@Z ENDP		; CockpitManager::ApplyLighting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?DEDFont@CockpitManager@@QAEHXZ PROC			; CockpitManager::DEDFont
; _this$ = ecx

; 4305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4306 : 	int retval;
; 4307 : 
; 4308 : 	if(mpActivePanel)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN2@DEDFont

; 4309 : 	{
; 4310 : 		retval = mpActivePanel->DEDFont();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?DEDFont@CPPanel@@QAEHXZ		; CPPanel::DEDFont
	mov	DWORD PTR _retval$[ebp], eax

; 4311 : 	}
; 4312 : 	else

	jmp	SHORT $LN1@DEDFont
$LN2@DEDFont:

; 4313 : 	{
; 4314 : 		retval = mDEDFont;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _retval$[ebp], eax
$LN1@DEDFont:

; 4315 : 	}
; 4316 : 
; 4317 : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 4318 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DEDFont@CockpitManager@@QAEHXZ ENDP			; CockpitManager::DEDFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?MFDFont@CockpitManager@@QAEHXZ PROC			; CockpitManager::MFDFont
; _this$ = ecx

; 4289 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4290 : 	int retval;
; 4291 : 
; 4292 : 	if(mpActivePanel)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN2@MFDFont

; 4293 : 	{
; 4294 : 		retval = mpActivePanel->MFDFont();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?MFDFont@CPPanel@@QAEHXZ		; CPPanel::MFDFont
	mov	DWORD PTR _retval$[ebp], eax

; 4295 : 	}
; 4296 : 	else

	jmp	SHORT $LN1@MFDFont
$LN2@MFDFont:

; 4297 : 	{
; 4298 : 		retval = mMFDFont;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _retval$[ebp], eax
$LN1@MFDFont:

; 4299 : 	}
; 4300 : 
; 4301 : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 4302 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MFDFont@CockpitManager@@QAEHXZ ENDP			; CockpitManager::MFDFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?HudFont@CockpitManager@@QAEHXZ PROC			; CockpitManager::HudFont
; _this$ = ecx

; 4273 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4274 : 	int retval;
; 4275 : 
; 4276 : 	if(mpActivePanel)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN2@HudFont

; 4277 : 	{
; 4278 : 		retval = mpActivePanel->HudFont();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?HudFont@CPPanel@@QAEHXZ		; CPPanel::HudFont
	mov	DWORD PTR _retval$[ebp], eax

; 4279 : 	}
; 4280 : 	else

	jmp	SHORT $LN1@HudFont
$LN2@HudFont:

; 4281 : 	{
; 4282 : 		retval = mHudFont;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _retval$[ebp], eax
$LN1@HudFont:

; 4283 : 	}
; 4284 : 
; 4285 : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 4286 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HudFont@CockpitManager@@QAEHXZ ENDP			; CockpitManager::HudFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv627 = -820						; size = 4
tv434 = -816						; size = 4
tv600 = -812						; size = 4
tv420 = -808						; size = 4
_j$1 = -804						; size = 4
_mm$2 = -800						; size = 4
_playerAC$ = -796					; size = 4
_i$ = -792						; size = 4
_this$ = -788						; size = 4
_dataFileName$ = -784					; size = 260
_tmpStr1$ = -524					; size = 260
_tmpStr$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
?SaveCockpitDefaults@CockpitManager@@QAEXXZ PROC	; CockpitManager::SaveCockpitDefaults
; _this$ = ecx

; 4447 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 820				; 00000334H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4448 : 	char dataFileName[_MAX_PATH];
; 4449 : 	char tmpStr[_MAX_PATH];
; 4450 : 	char tmpStr1[_MAX_PATH];
; 4451 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 4452 :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 4453 : 
; 4454 : 	sprintf (dataFileName, "%s\\config\\%s.ini", FalconDataDirectory, LogBook.Callsign());

	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BB@LIABIPNP@?$CFs?2config?2?$CFs?4ini?$AA@
	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 4455 : 
; 4456 : 	// Save HUD Data			 COBRA - RED - No more used
; 4457 : 	sprintf (tmpStr, "%d", TheHud->GetHudColor());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetHudColor@HudClass@@QAEKXZ		; HudClass::GetHudColor
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4458 : 	WritePrivateProfileString("Hud", "Color", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_05PDOBBJNA@Color?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4459 : 
; 4460 : 	sprintf (tmpStr, "%d", TheHud->GetScalesSwitch());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetScalesSwitch@HudClass@@QAEHXZ	; HudClass::GetScalesSwitch
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4461 : 	WritePrivateProfileString("Hud", "Scales", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_06GBGCJLOH@Scales?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4462 : 
; 4463 : 	sprintf (tmpStr, "%d", TheHud->GetBrightnessSwitch());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetBrightnessSwitch@HudClass@@QAEHXZ	; HudClass::GetBrightnessSwitch
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4464 : 	WritePrivateProfileString("Hud", "Brightness", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@JCLLFKLB@Brightness?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4465 : 
; 4466 : 	sprintf (tmpStr, "%d", TheHud->GetFPMSwitch());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetFPMSwitch@HudClass@@QAEHXZ		; HudClass::GetFPMSwitch
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4467 : 	WritePrivateProfileString("Hud", "FPM", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03EJKPDIPK@FPM?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4468 : 
; 4469 : 	sprintf (tmpStr, "%d", TheHud->GetDEDSwitch());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetDEDSwitch@HudClass@@QAEHXZ		; HudClass::GetDEDSwitch
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4470 : 	WritePrivateProfileString("Hud", "DED", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03CIIJCKKD@DED?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4471 : 
; 4472 : 	sprintf (tmpStr, "%d", TheHud->GetVelocitySwitch());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetVelocitySwitch@HudClass@@QAEHXZ	; HudClass::GetVelocitySwitch
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4473 : 	WritePrivateProfileString("Hud", "Velocity", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_08LIFBEL@Velocity?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4474 : 
; 4475 : 	sprintf (tmpStr, "%d", TheHud->GetRadarSwitch());

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetRadarSwitch@HudClass@@QAEHXZ	; HudClass::GetRadarSwitch
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4476 : 	WritePrivateProfileString("Hud", "Alt", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03PHINJBAN@Alt?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4477 : 
; 4478 : 	//MI
; 4479 : 	sprintf(tmpStr, "%d", (int)(TheHud->SymWheelPos * 1000));

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR [ecx+5136]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4480 : 	WritePrivateProfileString("Hud", "SymWheelPos", tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@CKGFALAG@SymWheelPos?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4481 : 
; 4482 : 	// Save the ICP Master Mode
; 4483 : 	if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN32@SaveCockpi

; 4484 : 	{
; 4485 : 		if(mpIcp)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+688], 0
	je	$LN27@SaveCockpi

; 4486 : 		{
; 4487 : 			if(mpIcp->IsICPSet(ICPClass::MODE_A_G))

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN30@SaveCockpi

; 4488 : 			{
; 4489 : 				sprintf(tmpStr, "%d", 1);

	push	1
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4490 : 				WritePrivateProfileString("ICP", "MasterMode", tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@FNKDFNPE@MasterMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
	jmp	$LN27@SaveCockpi
$LN30@SaveCockpi:

; 4491 : 			}
; 4492 : 			else if(mpIcp->IsICPSet(ICPClass::MODE_A_A))

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN28@SaveCockpi

; 4493 : 			{
; 4494 : 				sprintf(tmpStr, "%d", 2);

	push	2
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4495 : 				WritePrivateProfileString("ICP", "MasterMode", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@FNKDFNPE@MasterMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4496 : 			}
; 4497 : 			else

	jmp	SHORT $LN27@SaveCockpi
$LN28@SaveCockpi:

; 4498 : 			{
; 4499 : 				sprintf(tmpStr, "%d", 0);

	push	0
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4500 : 				WritePrivateProfileString("ICP", "MasterMode", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@FNKDFNPE@MasterMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN27@SaveCockpi:

; 4501 : 			}
; 4502 : 		}
; 4503 : 	}
; 4504 : 	else

	jmp	$LN26@SaveCockpi
$LN32@SaveCockpi:

; 4505 : 	{
; 4506 : 		if (mpIcp->GetPrimaryExclusiveButton())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+688]
	call	?GetPrimaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetPrimaryExclusiveButton
	test	eax, eax
	je	SHORT $LN25@SaveCockpi

; 4507 : 		{
; 4508 : 			sprintf (tmpStr, "%d", mpIcp->GetPrimaryExclusiveButton()->GetId());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?GetPrimaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetPrimaryExclusiveButton
	mov	ecx, eax
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4509 : 			sprintf (tmpStr1, "%d", mpIcp->GetICPPrimaryMode());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+688]
	call	?GetICPPrimaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPPrimaryMode
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4510 : 		}
; 4511 : 		else

	jmp	SHORT $LN24@SaveCockpi
$LN25@SaveCockpi:

; 4512 : 		{
; 4513 : 			sprintf (tmpStr, "-1");

	push	OFFSET ??_C@_02PGHGPEOM@?91?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 4514 : 			sprintf (tmpStr1, "-1");

	push	OFFSET ??_C@_02PGHGPEOM@?91?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8
$LN24@SaveCockpi:

; 4515 : 		}
; 4516 : 		WritePrivateProfileString("ICP", "PrimaryId", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_09HGKGPEIN@PrimaryId?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4517 : 		WritePrivateProfileString("ICP", "PrimaryMode", tmpStr1, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@EBCIHLHK@PrimaryMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4518 : 
; 4519 : 		if (mpIcp->GetSecondaryExclusiveButton())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?GetSecondaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetSecondaryExclusiveButton
	test	eax, eax
	je	SHORT $LN23@SaveCockpi

; 4520 : 		{
; 4521 : 			sprintf (tmpStr, "%d", mpIcp->GetSecondaryExclusiveButton()->GetId());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+688]
	call	?GetSecondaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetSecondaryExclusiveButton
	mov	ecx, eax
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4522 : 			sprintf (tmpStr1, "%d", mpIcp->GetICPSecondaryMode());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?GetICPSecondaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPSecondaryMode
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4523 : 		}
; 4524 : 		else

	jmp	SHORT $LN22@SaveCockpi
$LN23@SaveCockpi:

; 4525 : 		{
; 4526 : 			sprintf (tmpStr, "-1");

	push	OFFSET ??_C@_02PGHGPEOM@?91?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8

; 4527 : 			sprintf (tmpStr1, "-1");

	push	OFFSET ??_C@_02PGHGPEOM@?91?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
$LN22@SaveCockpi:

; 4528 : 		}
; 4529 : 		WritePrivateProfileString("ICP", "SecondaryId", tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@MFIJDIMF@SecondaryId?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4530 : 		WritePrivateProfileString("ICP", "SecondaryMode", tmpStr1, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_0O@OLFKIDMD@SecondaryMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4531 : 
; 4532 : 		if (mpIcp->GetTertiaryExclusiveButton())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?GetTertiaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetTertiaryExclusiveButton
	test	eax, eax
	je	SHORT $LN21@SaveCockpi

; 4533 : 		{
; 4534 : 			sprintf (tmpStr, "%d", mpIcp->GetTertiaryExclusiveButton()->GetId());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?GetTertiaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetTertiaryExclusiveButton
	mov	ecx, eax
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4535 : 			sprintf (tmpStr1, "%d", mpIcp->GetICPTertiaryMode());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?GetICPTertiaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPTertiaryMode
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4536 : 		}
; 4537 : 		else

	jmp	SHORT $LN20@SaveCockpi
$LN21@SaveCockpi:

; 4538 : 		{
; 4539 : 			sprintf (tmpStr, "-1");

	push	OFFSET ??_C@_02PGHGPEOM@?91?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8

; 4540 : 			sprintf (tmpStr1, "-1");

	push	OFFSET ??_C@_02PGHGPEOM@?91?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
$LN20@SaveCockpi:

; 4541 : 		}
; 4542 : 		WritePrivateProfileString("ICP", "TertiaryId", tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@KLOHMKCE@TertiaryId?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4543 : 		WritePrivateProfileString("ICP", "TertiaryMode", tmpStr1, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@PPIMLMDA@TertiaryMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN26@SaveCockpi:

; 4544 : 	}
; 4545 : 
; 4546 : 	// Save the MFD States
; 4547 : 	for (i=0; i<NUM_MFDS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@SaveCockpi
$LN18@SaveCockpi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN19@SaveCockpi:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN17@SaveCockpi

; 4548 : 	{
; 4549 : 		sprintf (tmpStr1, "Display%d", i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_09EHBHBFJG@Display?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4550 : 		sprintf (tmpStr, "%d", MfdDisplay[i]->mode);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4551 : 		WritePrivateProfileString("MFD", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03FHMHNLHA@MFD?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4552 : 		// JPO - having written old format, dump the new format
; 4553 : 		for (int mm = 0; mm < MFDClass::MAXMM; mm++) {

	mov	DWORD PTR _mm$2[ebp], 0
	jmp	SHORT $LN16@SaveCockpi
$LN15@SaveCockpi:
	mov	edx, DWORD PTR _mm$2[ebp]
	add	edx, 1
	mov	DWORD PTR _mm$2[ebp], edx
$LN16@SaveCockpi:
	cmp	DWORD PTR _mm$2[ebp], 5
	jge	$LN14@SaveCockpi

; 4554 : 			for (int j = 0; j < 3; j++) {

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN13@SaveCockpi
$LN12@SaveCockpi:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN13@SaveCockpi:
	cmp	DWORD PTR _j$1[ebp], 3
	jge	$LN11@SaveCockpi

; 4555 : 				sprintf (tmpStr1, "Display%d-%d-%d", i, mm, j);

	mov	ecx, DWORD PTR _j$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _mm$2[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@CDNCFJNA@Display?$CFd?9?$CFd?9?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 4556 : 				sprintf (tmpStr, "%d", MfdDisplay[i]->primarySecondary[mm][j]);

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx*4]
	mov	ecx, DWORD PTR _mm$2[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+ecx+20]
	mov	eax, DWORD PTR _j$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4557 : 				WritePrivateProfileString("MFD", tmpStr1, tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	push	OFFSET ??_C@_03FHMHNLHA@MFD?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4558 : 			}

	jmp	$LN12@SaveCockpi
$LN11@SaveCockpi:

; 4559 : 			sprintf(tmpStr1, "Display%d-%d-csel", i, mm);

	mov	eax, DWORD PTR _mm$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BC@OKGOADC@Display?$CFd?9?$CFd?9csel?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 4560 : 			sprintf(tmpStr, "%d", MfdDisplay[i]->cursel[mm]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	mov	edx, DWORD PTR _mm$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+80]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4561 : 			WritePrivateProfileString("MFD", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03FHMHNLHA@MFD?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4562 : 		}

	jmp	$LN15@SaveCockpi
$LN14@SaveCockpi:

; 4563 : 
; 4564 : 	}

	jmp	$LN18@SaveCockpi
$LN17@SaveCockpi:

; 4565 : 	//MI save EWS stuff
; 4566 : 	if(mpIcp)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	$LN10@SaveCockpi

; 4567 : 	{
; 4568 : 		//Chaff and Flare Bingo
; 4569 : 		sprintf(tmpStr1, "Flare Bingo");

	push	OFFSET ??_C@_0M@BEMKKIIH@Flare?5Bingo?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 4570 : 		sprintf(tmpStr,"%d", mpIcp->FlareBingo);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	eax, DWORD PTR [edx+488]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4571 : 		WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4572 : 
; 4573 : 		sprintf(tmpStr1, "Chaff Bingo");

	push	OFFSET ??_C@_0M@EDBDLIIL@Chaff?5Bingo?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8

; 4574 : 		sprintf(tmpStr,"%d", mpIcp->ChaffBingo);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR [ecx+492]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4575 : 		WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4576 : 
; 4577 : 		sprintf(tmpStr1, "Jammer");

	push	OFFSET ??_C@_06LKLLFINE@Jammer?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8

; 4578 : 		sprintf(tmpStr,"%d", mpIcp->EWS_JAMMER_ON ? 1 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	movzx	ecx, BYTE PTR [eax+483]
	test	ecx, ecx
	je	SHORT $LN35@SaveCockpi
	mov	DWORD PTR tv420[ebp], 1
	jmp	SHORT $LN36@SaveCockpi
$LN35@SaveCockpi:
	mov	DWORD PTR tv420[ebp], 0
$LN36@SaveCockpi:
	mov	edx, DWORD PTR tv420[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4579 : 		WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4580 : 
; 4581 : 		sprintf(tmpStr1, "Bingo");

	push	OFFSET ??_C@_05OMILMKPK@Bingo?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8

; 4582 : 		sprintf(tmpStr,"%d", mpIcp->EWS_BINGO_ON ? 1 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	movzx	ecx, BYTE PTR [eax+484]
	test	ecx, ecx
	je	SHORT $LN37@SaveCockpi
	mov	DWORD PTR tv434[ebp], 1
	jmp	SHORT $LN38@SaveCockpi
$LN37@SaveCockpi:
	mov	DWORD PTR tv434[ebp], 0
$LN38@SaveCockpi:
	mov	edx, DWORD PTR tv434[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4583 : 		WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN10@SaveCockpi:

; 4584 : 
; 4585 : 	}
; 4586 : 	for(i = 0; i < MAX_PGMS - 1; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@SaveCockpi
$LN8@SaveCockpi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@SaveCockpi:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN7@SaveCockpi

; 4587 : 	{
; 4588 : 		if(mpIcp)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	$LN6@SaveCockpi

; 4589 : 		{
; 4590 : 			//Chaff Burst quantity
; 4591 : 			sprintf(tmpStr1,"PGM %d Chaff BQ" , i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@JBJLLJMG@PGM?5?$CFd?5Chaff?5BQ?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4592 : 			sprintf(tmpStr,"%d", mpIcp->iCHAFF_BQ[i]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+500]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4593 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4594 : 
; 4595 : 			//Chaff Burst Interval
; 4596 : 			sprintf(tmpStr1,"PGM %d Chaff BI" , i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@BDIACBJP@PGM?5?$CFd?5Chaff?5BI?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4597 : 			sprintf(tmpStr,"%d", (int)(mpIcp->fCHAFF_BI[i] * 1000));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4+580]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4598 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4599 : 
; 4600 : 			//Chaff Salvo quantity
; 4601 : 			sprintf(tmpStr1, "PGM %d Chaff SQ", i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@IMHPHAIB@PGM?5?$CFd?5Chaff?5SQ?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4602 : 			sprintf(tmpStr, "%d", mpIcp->iCHAFF_SQ[i]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+520]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4603 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4604 : 
; 4605 : 			//Chaff Salvo Interval
; 4606 : 			sprintf(tmpStr1,"PGM %d Chaff SI" , i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@OGEOINI@PGM?5?$CFd?5Chaff?5SI?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4607 : 			sprintf(tmpStr,"%d", (int)(mpIcp->fCHAFF_SI[i] * 1000));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+600]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4608 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4609 : 
; 4610 : 			//Flare Burst quantity
; 4611 : 			sprintf(tmpStr1,"PGM %d Flare BQ" , i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@IAKBMICO@PGM?5?$CFd?5Flare?5BQ?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4612 : 			sprintf(tmpStr,"%d", mpIcp->iFLARE_BQ[i]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+540]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4613 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4614 : 
; 4615 : 			//Flare Burst Interval
; 4616 : 			sprintf(tmpStr1,"PGM %d Flare BI" , i);

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@CLKFAHH@PGM?5?$CFd?5Flare?5BI?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4617 : 			sprintf(tmpStr,"%d", (int)(mpIcp->fFLARE_BI[i] * 1000));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4+620]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si ecx, xmm0
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4618 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4619 : 
; 4620 : 			//Flare Salvo quantity
; 4621 : 			sprintf(tmpStr1, "PGM %d Flare SQ", i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@JNEFABGJ@PGM?5?$CFd?5Flare?5SQ?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4622 : 			sprintf(tmpStr, "%d", mpIcp->iFLARE_SQ[i]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+560]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4623 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4624 : 
; 4625 : 			//Flare Salvo Interval
; 4626 : 			sprintf(tmpStr1,"PGM %d Flare SI" , i);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@BPFOJJDA@PGM?5?$CFd?5Flare?5SI?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4627 : 			sprintf(tmpStr,"%d", (int)(mpIcp->fFLARE_SI[i] * 1000));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4+640]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si eax, xmm0
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4628 : 			WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN6@SaveCockpi:

; 4629 : 		}
; 4630 : 	}

	jmp	$LN8@SaveCockpi
$LN7@SaveCockpi:

; 4631 : 
; 4632 : 	//Save the current PGM and number selection
; 4633 : 	if (playerAC){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN5@SaveCockpi

; 4634 : 		sprintf(tmpStr1, "Mode Selection");

	push	OFFSET ??_C@_0P@FKEDIMOB@Mode?5Selection?$AA@
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8

; 4635 : 		sprintf(tmpStr, "%d", playerAC->EWSPGM());

	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4636 : 		WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4637 : 
; 4638 : 		sprintf(tmpStr1, "Number Selection");

	push	OFFSET ??_C@_0BB@GHALBOOF@Number?5Selection?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8

; 4639 : 		sprintf(tmpStr, "%d", playerAC->EWSProgNum);

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+1500]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4640 : 		WritePrivateProfileString("EWS", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN5@SaveCockpi:

; 4641 : 	}
; 4642 : 	//MI save Bullseye show option
; 4643 : 	if(mpIcp)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	SHORT $LN4@SaveCockpi

; 4644 : 	{
; 4645 : 		//Chaff and Flare Bingo
; 4646 : 		sprintf(tmpStr1, "BullseyeInfoOnMFD");

	push	OFFSET ??_C@_0BC@PPLJKMEA@BullseyeInfoOnMFD?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 4647 : 		sprintf(tmpStr,"%d", mpIcp->ShowBullseyeInfo ? 1 : 0);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	movzx	eax, BYTE PTR [edx+300]
	test	eax, eax
	je	SHORT $LN39@SaveCockpi
	mov	DWORD PTR tv600[ebp], 1
	jmp	SHORT $LN40@SaveCockpi
$LN39@SaveCockpi:
	mov	DWORD PTR tv600[ebp], 0
$LN40@SaveCockpi:
	mov	ecx, DWORD PTR tv600[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4648 : 		WritePrivateProfileString("Bullseye", tmpStr1, tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	push	OFFSET ??_C@_08MPCCOHIH@Bullseye?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN4@SaveCockpi:

; 4649 : 	}
; 4650 : 
; 4651 : 	//MI load the laser starting time
; 4652 : 	if(mpIcp)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+688], 0
	je	SHORT $LN3@SaveCockpi

; 4653 : 	{
; 4654 : 		sprintf(tmpStr1, "LaserST");

	push	OFFSET ??_C@_07GEFBFHJJ@LaserST?$AA@
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8

; 4655 : 		sprintf(tmpStr,"%d", mpIcp->LaserTime);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR [eax+1656]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4656 : 		WritePrivateProfileString("Laser", tmpStr1, tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmpStr1$[ebp]
	push	edx
	push	OFFSET ??_C@_05LIGKNHHL@Laser?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN3@SaveCockpi:

; 4657 : 	}
; 4658 : 
; 4659 : 	//MI save Cockpit selection
; 4660 : 	if(playerAC)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN2@SaveCockpi

; 4661 : 	{
; 4662 : 		sprintf(tmpStr1, "WideView");

	push	OFFSET ??_C@_08DILOOOHJ@WideView?$AA@
	lea	eax, DWORD PTR _tmpStr1$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 4663 : 		sprintf(tmpStr,"%d", playerAC->WideView ? 1 : 0);

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+1818]
	test	edx, edx
	je	SHORT $LN41@SaveCockpi
	mov	DWORD PTR tv627[ebp], 1
	jmp	SHORT $LN42@SaveCockpi
$LN41@SaveCockpi:
	mov	DWORD PTR tv627[ebp], 0
$LN42@SaveCockpi:
	mov	eax, DWORD PTR tv627[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4664 : 		WritePrivateProfileString("Cockpit View", tmpStr1, tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr1$[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@LFKIFFIM@Cockpit?5View?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN2@SaveCockpi:

; 4665 : 	}
; 4666 : 
; 4667 : 
; 4668 : 	// Save the current OTW View
; 4669 : 	sprintf (tmpStr, "%d", OTWDriver.GetOTWDisplayMode());

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4670 : 	WritePrivateProfileString("OTW", "Mode", tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_04KNKPIPFB@Mode?$AA@
	push	OFFSET ??_C@_03IDIDCFHH@OTW?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4671 : 
; 4672 : 	sprintf(tmpStr, "%d", VM->GetRadioFreq(0));

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?GetRadioFreq@VoiceManager@@QAEHH@Z	; VoiceManager::GetRadioFreq
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4673 : 	WritePrivateProfileString("COMMS", "Comm1", tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_05JDINLGBN@Comm1?$AA@
	push	OFFSET ??_C@_05JNPIHJOC@COMMS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4674 : 	sprintf(tmpStr, "%d",  VM->GetRadioFreq(1));

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?GetRadioFreq@VoiceManager@@QAEHH@Z	; VoiceManager::GetRadioFreq
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4675 : 	WritePrivateProfileString("COMMS", "Comm2", tmpStr, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_05LIKAOFNO@Comm2?$AA@
	push	OFFSET ??_C@_05JNPIHJOC@COMMS?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16

; 4676 : 
; 4677 : 	// Master Arm switch
; 4678 : 	if (playerAC && playerAC->Sms) // JB 010628 CTD // JPO CTD fix

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN1@SaveCockpi
	mov	edx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [edx+940], 0
	je	SHORT $LN1@SaveCockpi

; 4679 : 	{
; 4680 : 		sprintf (tmpStr, "%d", playerAC->Sms->MasterArm());

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4681 : 		WritePrivateProfileString("Weapons", "MasterArm", tmpStr, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_09HJHEFHPP@MasterArm?$AA@
	push	OFFSET ??_C@_07DNEKOHB@Weapons?$AA@
	call	DWORD PTR __imp__WritePrivateProfileStringA@16
$LN1@SaveCockpi:

; 4682 : 	}
; 4683 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveCockpitDefaults@CockpitManager@@QAEXXZ ENDP	; CockpitManager::SaveCockpitDefaults
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_tMode$ = -936						; size = 4
tv1099 = -932						; size = 8
_sMode$ = -924						; size = 4
tv1132 = -920						; size = 8
tv1198 = -912						; size = 8
_pMode$ = -904						; size = 4
tv1165 = -900						; size = 8
tv912 = -892						; size = 8
_sButton$ = -884					; size = 4
_temp$1 = -880						; size = 4
_val$2 = -876						; size = 4
_tButton$ = -872					; size = 4
_pButton$ = -868					; size = 4
_temp$3 = -864						; size = 4
tv203 = -860						; size = 4
tv1096 = -856						; size = 4
tv211 = -852						; size = 4
tv909 = -848						; size = 4
tv1195 = -844						; size = 4
tv210 = -840						; size = 4
tv1162 = -836						; size = 4
tv1129 = -832						; size = 4
_Mode$4 = -828						; size = 4
tv224 = -824						; size = 4
_temp$5 = -820						; size = 4
_temp$6 = -816						; size = 4
_j$7 = -812						; size = 4
_buttonId$ = -808					; size = 4
_mm$8 = -804						; size = 4
_i$9 = -800						; size = 4
_theButton$ = -796					; size = 4
_playerAC$ = -792					; size = 4
_i$ = -788						; size = 4
_i$10 = -784						; size = 4
_this$ = -780						; size = 4
_tmpStr$ = -776						; size = 512
_dataFileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?LoadCockpitDefaults@CockpitManager@@QAEXXZ PROC	; CockpitManager::LoadCockpitDefaults
; _this$ = ecx

; 4688 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 936				; 000003a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4689 : 	char dataFileName[_MAX_PATH], tmpStr[512];
; 4690 : 	int pMode, sMode, tMode, i;
; 4691 : 	int pButton, sButton, tButton, buttonId;
; 4692 : 	CPButtonObject* theButton;
; 4693 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 4694 : 
; 4695 : 	sprintf (dataFileName, "%s\\config\\%s.ini", FalconDataDirectory, LogBook.Callsign());

	mov	ecx, OFFSET ?LogBook@@3VLogBookData@@A	; LogBook
	call	?Callsign@LogBookData@@QAEPADXZ		; LogBookData::Callsign
	push	eax
	push	OFFSET ?FalconDataDirectory@@3PADA	; FalconDataDirectory
	push	OFFSET ??_C@_0BB@LIABIPNP@?$CFs?2config?2?$CFs?4ini?$AA@
	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 4696 : 
; 4697 : 	// Load HUD Data
; 4698 : 	TheHud->SetHudColor(GetPrivateProfileInt("Hud", "Color", TheHud->GetHudColor(), dataFileName)); // COBRA - RED - NO MORE USED

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetHudColor@HudClass@@QAEKXZ		; HudClass::GetHudColor
	push	eax
	push	OFFSET ??_C@_05PDOBBJNA@Color?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetHudColor@HudClass@@QAEXK@Z		; HudClass::SetHudColor

; 4699 : 	TheHud->SetScalesSwitch((HudClass::ScalesSwitch)GetPrivateProfileInt("Hud", "Scales", TheHud->GetScalesSwitch(), dataFileName));

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetScalesSwitch@HudClass@@QAEHXZ	; HudClass::GetScalesSwitch
	push	eax
	push	OFFSET ??_C@_06GBGCJLOH@Scales?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetScalesSwitch@HudClass@@QAEXW4ScalesSwitch@1@@Z ; HudClass::SetScalesSwitch

; 4700 : 	OTWDriver.pCockpitManager->Dispatch(1066, 0);

	push	0
	push	1066					; 0000042aH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 4701 : 	TheHud->SetFPMSwitch((HudClass::FPMSwitch)GetPrivateProfileInt("Hud", "FPM", TheHud->GetFPMSwitch(), dataFileName));

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetFPMSwitch@HudClass@@QAEHXZ		; HudClass::GetFPMSwitch
	push	eax
	push	OFFSET ??_C@_03EJKPDIPK@FPM?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetFPMSwitch@HudClass@@QAEXW4FPMSwitch@1@@Z ; HudClass::SetFPMSwitch

; 4702 : 	OTWDriver.pCockpitManager->Dispatch(1067, 0);

	push	0
	push	1067					; 0000042bH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 4703 : 	TheHud->SetDEDSwitch((HudClass::DEDSwitch)GetPrivateProfileInt("Hud", "DED", TheHud->GetDEDSwitch(), dataFileName));

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetDEDSwitch@HudClass@@QAEHXZ		; HudClass::GetDEDSwitch
	push	eax
	push	OFFSET ??_C@_03CIIJCKKD@DED?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetDEDSwitch@HudClass@@QAEXW4DEDSwitch@1@@Z ; HudClass::SetDEDSwitch

; 4704 : 	OTWDriver.pCockpitManager->Dispatch(1068, 0);

	push	0
	push	1068					; 0000042cH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 4705 : 	TheHud->SetVelocitySwitch((HudClass::VelocitySwitch)GetPrivateProfileInt("Hud", "Velocity", TheHud->GetVelocitySwitch(), dataFileName));

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetVelocitySwitch@HudClass@@QAEHXZ	; HudClass::GetVelocitySwitch
	push	eax
	push	OFFSET ??_C@_08LIFBEL@Velocity?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetVelocitySwitch@HudClass@@QAEXW4VelocitySwitch@1@@Z ; HudClass::SetVelocitySwitch

; 4706 : 	OTWDriver.pCockpitManager->Dispatch(1069, 0);

	push	0
	push	1069					; 0000042dH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 4707 : 	TheHud->SetRadarSwitch((HudClass::RadarSwitch)GetPrivateProfileInt("Hud", "Alt", TheHud->GetRadarSwitch(), dataFileName));

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetRadarSwitch@HudClass@@QAEHXZ	; HudClass::GetRadarSwitch
	push	eax
	push	OFFSET ??_C@_03PHINJBAN@Alt?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetRadarSwitch@HudClass@@QAEXW4RadarSwitch@1@@Z ; HudClass::SetRadarSwitch

; 4708 : 	OTWDriver.pCockpitManager->Dispatch(1070, 0);

	push	0
	push	1070					; 0000042eH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 4709 : 	TheHud->SetBrightnessSwitch((HudClass::BrightnessSwitch)GetPrivateProfileInt("Hud", "Brightness", TheHud->GetBrightnessSwitch(), dataFileName));

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetBrightnessSwitch@HudClass@@QAEHXZ	; HudClass::GetBrightnessSwitch
	push	eax
	push	OFFSET ??_C@_0L@JCLLFKLB@Brightness?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetBrightnessSwitch@HudClass@@QAEXW4BrightnessSwitch@1@@Z ; HudClass::SetBrightnessSwitch

; 4710 : 	OTWDriver.pCockpitManager->Dispatch(1071, 0);

	push	0
	push	1071					; 0000042fH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 4711 : 
; 4712 : 	//MI
; 4713 : 	//ATARIBABY/WOMBAT Hud sym wheel ramp start fix 
; 4714 : 	if (TheHud->SymWheelPos > 0.5F)

	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR [edx+5136]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	$LN67@LoadCockpi

; 4715 : 	{
; 4716 : 		TheHud->SymWheelPos = (float)GetPrivateProfileInt("Hud", "SymWheelPos", 1000, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	1000					; 000003e8H
	push	OFFSET ??_C@_0M@CKGFALAG@SymWheelPos?$AA@
	push	OFFSET ??_C@_03NDLAFECJ@Hud?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv909[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv909[ebp]
	mov	ecx, DWORD PTR tv909[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv912[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv912[ebp]
	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	DWORD PTR [edx+5136], xmm0

; 4717 : 		TheHud->SymWheelPos /= 1000.0F;

	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR [eax+5136]
	divss	xmm0, DWORD PTR __real@447a0000
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	DWORD PTR [ecx+5136], xmm0

; 4718 : 		TheHud->SymWheelPos = max(0.5F,min(TheHud->SymWheelPos, 1.0F));

	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+5136]
	jbe	SHORT $LN70@LoadCockpi
	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR [eax+5136]
	movss	DWORD PTR tv203[ebp], xmm0
	jmp	SHORT $LN71@LoadCockpi
$LN70@LoadCockpi:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv203[ebp], xmm0
$LN71@LoadCockpi:
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR tv203[ebp]
	jbe	SHORT $LN74@LoadCockpi
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv211[ebp], xmm0
	jmp	SHORT $LN75@LoadCockpi
$LN74@LoadCockpi:
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [ecx+5136]
	jbe	SHORT $LN72@LoadCockpi
	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR [edx+5136]
	movss	DWORD PTR tv210[ebp], xmm0
	jmp	SHORT $LN73@LoadCockpi
$LN72@LoadCockpi:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv210[ebp], xmm0
$LN73@LoadCockpi:
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR tv211[ebp], xmm0
$LN75@LoadCockpi:
	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR tv211[ebp]
	movss	DWORD PTR [eax+5136], xmm0

; 4719 : 		TheHud->SetLightLevel();

	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetLightLevel@HudClass@@QAEXXZ		; HudClass::SetLightLevel
$LN67@LoadCockpi:

; 4720 : 	}   
; 4721 : 
; 4722 : 	// Reload the ICP Master Mode
; 4723 : 	//MI
; 4724 : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN66@LoadCockpi

; 4725 : 	{
; 4726 : 		int Mode = GetPrivateProfileInt("ICP", "MasterMode", -1, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	-1
	push	OFFSET ??_C@_0L@FNKDFNPE@MasterMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _Mode$4[ebp], eax

; 4727 : 		if(Mode >= 0 && Mode < 3)

	cmp	DWORD PTR _Mode$4[ebp], 0
	jl	$LN64@LoadCockpi
	cmp	DWORD PTR _Mode$4[ebp], 3
	jge	$LN64@LoadCockpi

; 4728 : 		{
; 4729 : 			if(mpIcp)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+688], 0
	je	$LN64@LoadCockpi

; 4730 : 			{
; 4731 : 				switch(Mode)

	mov	ecx, DWORD PTR _Mode$4[ebp]
	mov	DWORD PTR tv224[ebp], ecx
	cmp	DWORD PTR tv224[ebp], 0
	je	SHORT $LN61@LoadCockpi
	cmp	DWORD PTR tv224[ebp], 1
	je	SHORT $LN57@LoadCockpi
	cmp	DWORD PTR tv224[ebp], 2
	je	SHORT $LN55@LoadCockpi
	jmp	$LN53@LoadCockpi
$LN61@LoadCockpi:

; 4732 : 				{
; 4733 : 					case 0:	//NAV
; 4734 : 						if(mpIcp->IsICPSet(ICPClass::MODE_A_G))

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN60@LoadCockpi

; 4735 : 						{
; 4736 : 							SimICPAG(0, KEY_DOWN, NULL);

	push	0
	push	8
	push	0
	call	?SimICPAG@@YAXKHPAX@Z			; SimICPAG
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN58@LoadCockpi
$LN60@LoadCockpi:

; 4737 : 						}
; 4738 : 						else if(mpIcp->IsICPSet(ICPClass::MODE_A_A))

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN58@LoadCockpi

; 4739 : 						{
; 4740 : 							SimICPAA(0, KEY_DOWN, NULL);

	push	0
	push	8
	push	0
	call	?SimICPAA@@YAXKHPAX@Z			; SimICPAA
	add	esp, 12					; 0000000cH
$LN58@LoadCockpi:

; 4741 : 						}
; 4742 : 						break;

	jmp	SHORT $LN62@LoadCockpi
$LN57@LoadCockpi:

; 4743 : 					case 1:	//AG
; 4744 : 						if(!mpIcp->IsICPSet(ICPClass::MODE_A_G))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+688]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN56@LoadCockpi

; 4745 : 						{
; 4746 : 							SimICPAG(0, KEY_DOWN, NULL);

	push	0
	push	8
	push	0
	call	?SimICPAG@@YAXKHPAX@Z			; SimICPAG
	add	esp, 12					; 0000000cH
$LN56@LoadCockpi:

; 4747 : 						}
; 4748 : 						break;

	jmp	SHORT $LN62@LoadCockpi
$LN55@LoadCockpi:

; 4749 : 					case 2:	//AA
; 4750 : 						if(!mpIcp->IsICPSet(ICPClass::MODE_A_A))

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN54@LoadCockpi

; 4751 : 						{
; 4752 : 							SimICPAA(0, KEY_DOWN, NULL);

	push	0
	push	8
	push	0
	call	?SimICPAA@@YAXKHPAX@Z			; SimICPAA
	add	esp, 12					; 0000000cH
$LN54@LoadCockpi:
$LN53@LoadCockpi:
$LN62@LoadCockpi:

; 4753 : 						}
; 4754 : 						break;
; 4755 : 					default:
; 4756 : 						break;
; 4757 : 				}
; 4758 : 				mpIcp->ChangeToCNI();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?ChangeToCNI@ICPClass@@QAEXXZ		; ICPClass::ChangeToCNI

; 4759 : 				mpIcp->LastMode = CNI_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	DWORD PTR [edx+1380], 27		; 0000001bH

; 4760 : 				mpIcp->SetICPTertiaryMode(CNI_MODE);

	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?SetICPTertiaryMode@ICPClass@@QAEXJ@Z	; ICPClass::SetICPTertiaryMode
$LN64@LoadCockpi:

; 4761 : 			}
; 4762 : 		}
; 4763 : 	}
; 4764 : 	else

	jmp	$LN36@LoadCockpi
$LN66@LoadCockpi:

; 4765 : 	{
; 4766 : 		pButton = GetPrivateProfileInt("ICP", "PrimaryId", -1, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	-1
	push	OFFSET ??_C@_09HGKGPEIN@PrimaryId?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _pButton$[ebp], eax

; 4767 : 		sButton = GetPrivateProfileInt("ICP", "SecondaryId", -1, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	-1
	push	OFFSET ??_C@_0M@MFIJDIMF@SecondaryId?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _sButton$[ebp], eax

; 4768 : 		tButton = GetPrivateProfileInt("ICP", "TertiaryId", -1, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0L@KLOHMKCE@TertiaryId?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _tButton$[ebp], eax

; 4769 : 		pMode = GetPrivateProfileInt("ICP", "PrimaryMode", mpIcp->GetICPPrimaryMode(), dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?GetICPPrimaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPPrimaryMode
	push	eax
	push	OFFSET ??_C@_0M@EBCIHLHK@PrimaryMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _pMode$[ebp], eax

; 4770 : 		sMode = GetPrivateProfileInt("ICP", "SecondaryMode", mpIcp->GetICPSecondaryMode(), dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+688]
	call	?GetICPSecondaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPSecondaryMode
	push	eax
	push	OFFSET ??_C@_0O@OLFKIDMD@SecondaryMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _sMode$[ebp], eax

; 4771 : 		tMode = GetPrivateProfileInt("ICP", "TertiaryMode", mpIcp->GetICPTertiaryMode(), dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?GetICPTertiaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPTertiaryMode
	push	eax
	push	OFFSET ??_C@_0N@PPIMLMDA@TertiaryMode?$AA@
	push	OFFSET ??_C@_03PAMAFJJJ@ICP?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _tMode$[ebp], eax

; 4772 : 
; 4773 : 
; 4774 : 
; 4775 : 		if (VM)

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	SHORT $LN51@LoadCockpi

; 4776 : 		{
; 4777 : 			VM->ChangeRadioFreq(GetPrivateProfileInt("COMMS", "Comm1", rcfFlight1, dataFileName), 0);

	push	0
	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	1
	push	OFFSET ??_C@_05JDINLGBN@Comm1?$AA@
	push	OFFSET ??_C@_05JNPIHJOC@COMMS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z	; VoiceManager::ChangeRadioFreq

; 4778 : 			VM->ChangeRadioFreq(GetPrivateProfileInt("COMMS", "Comm2", rcfPackage1, dataFileName), 1);

	push	1
	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	6
	push	OFFSET ??_C@_05LIKAOFNO@Comm2?$AA@
	push	OFFSET ??_C@_05JNPIHJOC@COMMS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ChangeRadioFreq@VoiceManager@@QAEXHH@Z	; VoiceManager::ChangeRadioFreq
$LN51@LoadCockpi:

; 4779 : 		}
; 4780 : 
; 4781 : 		// Find the primary mode button
; 4782 : 		buttonId		= pButton;

	mov	eax, DWORD PTR _pButton$[ebp]
	mov	DWORD PTR _buttonId$[ebp], eax

; 4783 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 4784 : 		theButton = NULL;

	mov	DWORD PTR _theButton$[ebp], 0
$LN50@LoadCockpi:

; 4785 : 
; 4786 : 		// search cpmanager's list of button pointers
; 4787 : 		while(i < mButtonTally)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jge	SHORT $LN49@LoadCockpi

; 4788 : 		{
; 4789 : 			if(mpButtonObjects[i]->GetId() == buttonId){

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN48@LoadCockpi

; 4790 : 				theButton = mpButtonObjects[i];

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _theButton$[ebp], edx

; 4791 : 				break;

	jmp	SHORT $LN49@LoadCockpi

; 4792 : 			}
; 4793 : 			else {

	jmp	SHORT $LN47@LoadCockpi
$LN48@LoadCockpi:

; 4794 : 				i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN47@LoadCockpi:

; 4795 : 			}
; 4796 : 		}

	jmp	SHORT $LN50@LoadCockpi
$LN49@LoadCockpi:

; 4797 : 
; 4798 : 		// If found, push it
; 4799 : 		if (theButton)

	cmp	DWORD PTR _theButton$[ebp], 0
	je	SHORT $LN46@LoadCockpi

; 4800 : 		{
; 4801 : 			theButton->HandleMouseEvent(3);  //Button 0 down

	push	3
	mov	ecx, DWORD PTR _theButton$[ebp]
	call	?HandleMouseEvent@CPButtonObject@@QAEXH@Z ; CPButtonObject::HandleMouseEvent

; 4802 : 			theButton->HandleEvent(buttonId);

	mov	ecx, DWORD PTR _buttonId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theButton$[ebp]
	call	?HandleEvent@CPButtonObject@@QAEXH@Z	; CPButtonObject::HandleEvent
$LN46@LoadCockpi:

; 4803 : 		}
; 4804 : 
; 4805 : 		// Find the secondary mode button
; 4806 : 		theButton = NULL;

	mov	DWORD PTR _theButton$[ebp], 0

; 4807 : 		buttonId		= sButton;

	mov	edx, DWORD PTR _sButton$[ebp]
	mov	DWORD PTR _buttonId$[ebp], edx

; 4808 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN45@LoadCockpi:

; 4809 : 
; 4810 : 		// search cpmanager's list of button pointers
; 4811 : 		while(i < mButtonTally)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN44@LoadCockpi

; 4812 : 		{
; 4813 : 			if(mpButtonObjects[i]->GetId() == buttonId){

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN43@LoadCockpi

; 4814 : 				theButton = mpButtonObjects[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _theButton$[ebp], ecx

; 4815 : 				break;

	jmp	SHORT $LN44@LoadCockpi

; 4816 : 			}
; 4817 : 			else {

	jmp	SHORT $LN42@LoadCockpi
$LN43@LoadCockpi:

; 4818 : 				i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN42@LoadCockpi:

; 4819 : 			}
; 4820 : 		}

	jmp	SHORT $LN45@LoadCockpi
$LN44@LoadCockpi:

; 4821 : 
; 4822 : 		// If found, push it
; 4823 : 		if (theButton)

	cmp	DWORD PTR _theButton$[ebp], 0
	je	SHORT $LN41@LoadCockpi

; 4824 : 		{
; 4825 : 			theButton->HandleMouseEvent(3);  //Button 0 down

	push	3
	mov	ecx, DWORD PTR _theButton$[ebp]
	call	?HandleMouseEvent@CPButtonObject@@QAEXH@Z ; CPButtonObject::HandleMouseEvent

; 4826 : 			theButton->HandleEvent(buttonId);

	mov	eax, DWORD PTR _buttonId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _theButton$[ebp]
	call	?HandleEvent@CPButtonObject@@QAEXH@Z	; CPButtonObject::HandleEvent
$LN41@LoadCockpi:

; 4827 : 		}
; 4828 : 
; 4829 : 
; 4830 : 		// Find the tertiary mode button
; 4831 : 		theButton = NULL;

	mov	DWORD PTR _theButton$[ebp], 0

; 4832 : 		buttonId		= tButton;

	mov	ecx, DWORD PTR _tButton$[ebp]
	mov	DWORD PTR _buttonId$[ebp], ecx

; 4833 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN40@LoadCockpi:

; 4834 : 
; 4835 : 		// search cpmanager's list of button pointers
; 4836 : 		while(i < mButtonTally)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jge	SHORT $LN39@LoadCockpi

; 4837 : 		{
; 4838 : 			if(mpButtonObjects[i]->GetId() == buttonId){

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN38@LoadCockpi

; 4839 : 				theButton = mpButtonObjects[i];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _theButton$[ebp], eax

; 4840 : 				break;

	jmp	SHORT $LN39@LoadCockpi

; 4841 : 			}
; 4842 : 			else {

	jmp	SHORT $LN37@LoadCockpi
$LN38@LoadCockpi:

; 4843 : 				i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN37@LoadCockpi:

; 4844 : 			}
; 4845 : 		}

	jmp	SHORT $LN40@LoadCockpi
$LN39@LoadCockpi:

; 4846 : 
; 4847 : 		// If found, push it
; 4848 : 		if (theButton)

	cmp	DWORD PTR _theButton$[ebp], 0
	je	SHORT $LN36@LoadCockpi

; 4849 : 		{
; 4850 : 			theButton->HandleMouseEvent(3);  //Button 0 down

	push	3
	mov	ecx, DWORD PTR _theButton$[ebp]
	call	?HandleMouseEvent@CPButtonObject@@QAEXH@Z ; CPButtonObject::HandleMouseEvent

; 4851 : 			theButton->HandleEvent(buttonId);

	mov	edx, DWORD PTR _buttonId$[ebp]
	push	edx
	mov	ecx, DWORD PTR _theButton$[ebp]
	call	?HandleEvent@CPButtonObject@@QAEXH@Z	; CPButtonObject::HandleEvent
$LN36@LoadCockpi:

; 4852 : 		}
; 4853 : 	}
; 4854 : 
; 4855 : 	// load the OTW View - Cobra - override OTW mode with cobra.cfg setting
; 4856 : 	if (g_bStartIn3Dpit)

	movzx	eax, BYTE PTR ?g_bStartIn3Dpit@@3_NA	; g_bStartIn3Dpit
	test	eax, eax
	je	SHORT $LN35@LoadCockpi

; 4857 : 	{
; 4858 : 		OTWDriver.SetOTWDisplayMode(OTWDriverClass::Mode3DCockpit);

	push	3
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::SetOTWDisplayMode

; 4859 : 	}
; 4860 : 	else {

	jmp	SHORT $LN34@LoadCockpi
$LN35@LoadCockpi:

; 4861 : 		OTWDriver.SetOTWDisplayMode(
; 4862 : 			(OTWDriverClass::OTWDisplayMode)GetPrivateProfileInt(
; 4863 : 				"OTW", "Mode", OTWDriver.GetOTWDisplayMode(), dataFileName));

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetOTWDisplayMode@OTWDriverClass@@QAE?AW4OTWDisplayMode@1@XZ ; OTWDriverClass::GetOTWDisplayMode
	push	eax
	push	OFFSET ??_C@_04KNKPIPFB@Mode?$AA@
	push	OFFSET ??_C@_03IDIDCFHH@OTW?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetOTWDisplayMode@OTWDriverClass@@QAEXW4OTWDisplayMode@1@@Z ; OTWDriverClass::SetOTWDisplayMode
$LN34@LoadCockpi:

; 4864 : 	}
; 4865 : 
; 4866 : 	// Load the MFD States
; 4867 : 	for (int i=0; i<NUM_MFDS; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN33@LoadCockpi
$LN32@LoadCockpi:
	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx
$LN33@LoadCockpi:
	cmp	DWORD PTR _i$9[ebp], 4
	jge	$LN31@LoadCockpi

; 4868 : 	{
; 4869 : 		// JPO ignore the old format in favour of newer stuff
; 4870 : 		//THW 2003-11-14 reactivated to make it work
; 4871 : 		sprintf (tmpStr, "Display%d", i);

	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	push	OFFSET ??_C@_09EHBHBFJG@Display?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4872 : 		MfdDisplay[i]->SetNewMode ((MFDClass::MfdMode)GetPrivateProfileInt("MFD", tmpStr, MfdDisplay[i]->mode, dataFileName));

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03FHMHNLHA@MFD?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	call	?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z ; MFDClass::SetNewMode

; 4873 : 		//THW end
; 4874 : 		for (int mm = 0; mm < MFDClass::MAXMM; mm++) {

	mov	DWORD PTR _mm$8[ebp], 0
	jmp	SHORT $LN30@LoadCockpi
$LN29@LoadCockpi:
	mov	edx, DWORD PTR _mm$8[ebp]
	add	edx, 1
	mov	DWORD PTR _mm$8[ebp], edx
$LN30@LoadCockpi:
	cmp	DWORD PTR _mm$8[ebp], 5
	jge	$LN28@LoadCockpi

; 4875 : 			for (int j = 0; j < 3; j++) {

	mov	DWORD PTR _j$7[ebp], 0
	jmp	SHORT $LN27@LoadCockpi
$LN26@LoadCockpi:
	mov	eax, DWORD PTR _j$7[ebp]
	add	eax, 1
	mov	DWORD PTR _j$7[ebp], eax
$LN27@LoadCockpi:
	cmp	DWORD PTR _j$7[ebp], 3
	jge	$LN25@LoadCockpi

; 4876 : 				sprintf (tmpStr, "Display%d-%d-%d", i, mm, j);

	mov	ecx, DWORD PTR _j$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _mm$8[ebp]
	push	edx
	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@CDNCFJNA@Display?$CFd?9?$CFd?9?$CFd?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 4877 : 				int val = GetPrivateProfileInt("MFD", tmpStr, MfdDisplay[i]->primarySecondary[mm][j], dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	mov	edx, DWORD PTR _mm$8[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _j$7[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03FHMHNLHA@MFD?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _val$2[ebp], eax

; 4878 : 				MfdDisplay[i]->primarySecondary[mm][j] = (MFDClass::MfdMode)val;

	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	mov	eax, DWORD PTR _mm$8[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR [edx+eax+20]
	mov	edx, DWORD PTR _j$7[ebp]
	mov	eax, DWORD PTR _val$2[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 4879 : 			}

	jmp	$LN26@LoadCockpi
$LN25@LoadCockpi:

; 4880 : 			//sprintf (tmpStr, "Display%d-%d-curmm", i, mm);
; 4881 : 			sprintf (tmpStr, "Display%d-%d-csel", i, mm);	//THW 2003-11-14 fixed typo

	mov	ecx, DWORD PTR _mm$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$9[ebp]
	push	edx
	push	OFFSET ??_C@_0BC@OKGOADC@Display?$CFd?9?$CFd?9csel?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 4882 : 			MfdDisplay[i]->cursel[mm] = GetPrivateProfileInt("MFD", tmpStr, MfdDisplay[i]->cursel[mm], dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$9[ebp]
	mov	eax, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx*4]
	mov	ecx, DWORD PTR _mm$8[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+80]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03FHMHNLHA@MFD?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _i$9[ebp]
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	mov	ecx, DWORD PTR _mm$8[ebp]
	mov	DWORD PTR [edx+ecx*4+80], eax

; 4883 : 		}

	jmp	$LN29@LoadCockpi
$LN28@LoadCockpi:

; 4884 : 	}

	jmp	$LN32@LoadCockpi
$LN31@LoadCockpi:

; 4885 : 
; 4886 : 	//MI EWS stuff
; 4887 : 	if(mpIcp && SimDriver.GetPlayerEntity() && !F4IsBadReadPtr(SimDriver.GetPlayerEntity(), sizeof(AircraftClass)))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	$LN20@LoadCockpi
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN20@LoadCockpi
	push	3624					; 00000e28H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	$LN20@LoadCockpi

; 4888 : 	{
; 4889 : 		//Chaff and Flare Bingo
; 4890 : 		mpIcp->FlareBingo = GetPrivateProfileInt("EWS", "Flare Bingo", 
; 4891 : 				mpIcp->FlareBingo, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR [eax+488]
	push	ecx
	push	OFFSET ??_C@_0M@BEMKKIIH@Flare?5Bingo?$AA@
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	mov	DWORD PTR [ecx+488], eax

; 4892 : 
; 4893 : 		mpIcp->ChaffBingo = GetPrivateProfileInt("EWS", "Chaff Bingo", 
; 4894 : 				mpIcp->FlareBingo, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR [ecx+488]
	push	edx
	push	OFFSET ??_C@_0M@EDBDLIIL@Chaff?5Bingo?$AA@
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	DWORD PTR [edx+492], eax

; 4895 : 
; 4896 : 		//Jammer and Bingo
; 4897 : 		int temp = GetPrivateProfileInt("EWS", "Jammer", playerAC->EWSProgNum, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+1500]
	push	edx
	push	OFFSET ??_C@_06LKLLFINE@Jammer?$AA@
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _temp$5[ebp], eax

; 4898 : 		if(temp == 1)

	cmp	DWORD PTR _temp$5[ebp], 1
	jne	SHORT $LN23@LoadCockpi

; 4899 : 		{
; 4900 : 			mpIcp->EWS_JAMMER_ON = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	BYTE PTR [ecx+483], 1

; 4901 : 		}
; 4902 : 		else

	jmp	SHORT $LN22@LoadCockpi
$LN23@LoadCockpi:

; 4903 : 		{
; 4904 : 			mpIcp->EWS_JAMMER_ON = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	BYTE PTR [eax+483], 0
$LN22@LoadCockpi:

; 4905 : 		}
; 4906 : 
; 4907 : 		temp = GetPrivateProfileInt("EWS", "Bingo", playerAC->EWSProgNum, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+1500]
	push	eax
	push	OFFSET ??_C@_05OMILMKPK@Bingo?$AA@
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _temp$5[ebp], eax

; 4908 : 
; 4909 : 		if(temp == 1)

	cmp	DWORD PTR _temp$5[ebp], 1
	jne	SHORT $LN21@LoadCockpi

; 4910 : 		{
; 4911 : 			mpIcp->EWS_BINGO_ON = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	BYTE PTR [edx+484], 1

; 4912 : 		}
; 4913 : 		else

	jmp	SHORT $LN20@LoadCockpi
$LN21@LoadCockpi:

; 4914 : 		{
; 4915 : 			mpIcp->EWS_BINGO_ON = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	BYTE PTR [ecx+484], 0
$LN20@LoadCockpi:

; 4916 : 		}
; 4917 : 	}
; 4918 : 	for(int i = 0; i < MAX_PGMS - 1; i++)

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN19@LoadCockpi
$LN18@LoadCockpi:
	mov	edx, DWORD PTR _i$10[ebp]
	add	edx, 1
	mov	DWORD PTR _i$10[ebp], edx
$LN19@LoadCockpi:
	cmp	DWORD PTR _i$10[ebp], 4
	jge	$LN17@LoadCockpi

; 4919 : 	{
; 4920 : 		if(mpIcp)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+688], 0
	je	$LN16@LoadCockpi

; 4921 : 		{
; 4922 : 			sprintf(tmpStr, "PGM %d Chaff BQ", i);

	mov	ecx, DWORD PTR _i$10[ebp]
	push	ecx
	push	OFFSET ??_C@_0BA@JBJLLJMG@PGM?5?$CFd?5Chaff?5BQ?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4923 : 			mpIcp->iCHAFF_BQ[i] = GetPrivateProfileInt("EWS", tmpStr, mpIcp->iCHAFF_BQ[i],
; 4924 : 					dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	eax, DWORD PTR _i$10[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+500]
	push	ecx
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	DWORD PTR [edx+ecx*4+500], eax

; 4925 : 
; 4926 : 			sprintf(tmpStr, "PGM %d Chaff BI", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@BDIACBJP@PGM?5?$CFd?5Chaff?5BI?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4927 : 			mpIcp->fCHAFF_BI[i] = (float)GetPrivateProfileInt("EWS", tmpStr, (int)(mpIcp->fCHAFF_BI[i] * 1000),
; 4928 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+580]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv1096[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1096[ebp]
	mov	ecx, DWORD PTR tv1096[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1099[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1099[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+580], xmm0

; 4929 : 			mpIcp->fCHAFF_BI[i] /= 1000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+580]
	divss	xmm0, DWORD PTR __real@447a0000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+580], xmm0

; 4930 : 
; 4931 : 			sprintf(tmpStr, "PGM %d Chaff SQ", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@IMHPHAIB@PGM?5?$CFd?5Chaff?5SQ?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4932 : 			mpIcp->iCHAFF_SQ[i] = GetPrivateProfileInt("EWS", tmpStr, mpIcp->iCHAFF_SQ[i],
; 4933 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+520]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	DWORD PTR [edx+ecx*4+520], eax

; 4934 : 
; 4935 : 			sprintf(tmpStr, "PGM %d Chaff SI", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@OGEOINI@PGM?5?$CFd?5Chaff?5SI?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4936 : 			mpIcp->fCHAFF_SI[i] = (float)GetPrivateProfileInt("EWS", tmpStr, (int)(mpIcp->fCHAFF_SI[i] * 1000),
; 4937 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+600]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv1129[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1129[ebp]
	mov	ecx, DWORD PTR tv1129[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1132[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1132[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+600], xmm0

; 4938 : 			mpIcp->fCHAFF_SI[i] /= 1000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+600]
	divss	xmm0, DWORD PTR __real@447a0000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+600], xmm0

; 4939 : 
; 4940 : 
; 4941 : 			sprintf(tmpStr, "PGM %d Flare BQ", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@IAKBMICO@PGM?5?$CFd?5Flare?5BQ?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4942 : 			mpIcp->iFLARE_BQ[i] = GetPrivateProfileInt("EWS", tmpStr, mpIcp->iFLARE_BQ[i],
; 4943 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+540]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	DWORD PTR [edx+ecx*4+540], eax

; 4944 : 
; 4945 : 			sprintf(tmpStr, "PGM %d Flare BI", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@CLKFAHH@PGM?5?$CFd?5Flare?5BI?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4946 : 			mpIcp->fFLARE_BI[i] = (float)GetPrivateProfileInt("EWS", tmpStr, (int)(mpIcp->fFLARE_BI[i] * 1000),
; 4947 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+620]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv1162[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1162[ebp]
	mov	ecx, DWORD PTR tv1162[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1165[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1165[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+620], xmm0

; 4948 : 			mpIcp->fFLARE_BI[i] /= 1000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+620]
	divss	xmm0, DWORD PTR __real@447a0000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+620], xmm0

; 4949 : 
; 4950 : 			sprintf(tmpStr, "PGM %d Flare SQ", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@JNEFABGJ@PGM?5?$CFd?5Flare?5SQ?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4951 : 			mpIcp->iFLARE_SQ[i] = GetPrivateProfileInt("EWS", tmpStr, mpIcp->iFLARE_SQ[i],
; 4952 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+560]
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	DWORD PTR [edx+ecx*4+560], eax

; 4953 : 
; 4954 : 			sprintf(tmpStr, "PGM %d Flare SI", i);

	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@BPFOJJDA@PGM?5?$CFd?5Flare?5SI?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 4955 : 			mpIcp->fFLARE_SI[i] = (float)GetPrivateProfileInt("EWS", tmpStr, (int)(mpIcp->fFLARE_SI[i] * 1000),
; 4956 : 					dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+640]
	mulss	xmm0, DWORD PTR __real@447a0000
	cvttss2si edx, xmm0
	push	edx
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR tv1195[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1195[ebp]
	mov	ecx, DWORD PTR tv1195[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1198[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1198[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+640], xmm0

; 4957 : 			mpIcp->fFLARE_SI[i] /= 1000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	xmm0, DWORD PTR [eax+ecx*4+640]
	divss	xmm0, DWORD PTR __real@447a0000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _i$10[ebp]
	movss	DWORD PTR [eax+ecx*4+640], xmm0
$LN16@LoadCockpi:

; 4958 : 		}
; 4959 : 	}

	jmp	$LN18@LoadCockpi
$LN17@LoadCockpi:

; 4960 : 	//MI save Bullseye show option
; 4961 : 	if(mpIcp)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	SHORT $LN13@LoadCockpi

; 4962 : 	{
; 4963 : 		//Chaff and Flare Bingo
; 4964 : 		sprintf(tmpStr, "BullseyeInfoOnMFD");

	push	OFFSET ??_C@_0BC@PPLJKMEA@BullseyeInfoOnMFD?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 4965 : 		int temp = GetPrivateProfileInt("Bullseye", tmpStr, 0, dataFileName);

	lea	ecx, DWORD PTR _dataFileName$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	OFFSET ??_C@_08MPCCOHIH@Bullseye?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _temp$1[ebp], eax

; 4966 : 		if(temp <= 0)

	cmp	DWORD PTR _temp$1[ebp], 0
	jg	SHORT $LN14@LoadCockpi

; 4967 : 			mpIcp->ShowBullseyeInfo = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	BYTE PTR [ecx+300], 0

; 4968 : 		else 

	jmp	SHORT $LN13@LoadCockpi
$LN14@LoadCockpi:

; 4969 : 			mpIcp->ShowBullseyeInfo = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	BYTE PTR [eax+300], 1
$LN13@LoadCockpi:

; 4970 : 	}
; 4971 : 	//MI load the laser starting time
; 4972 : 	if(mpIcp)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+688], 0
	je	$LN8@LoadCockpi

; 4973 : 	{
; 4974 : 		sprintf(tmpStr, "LaserST");

	push	OFFSET ??_C@_07GEFBFHJJ@LaserST?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8

; 4975 : 		int temp = GetPrivateProfileInt("Laser", tmpStr, 8, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	push	8
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_05LIGKNHHL@Laser?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _temp$6[ebp], eax

; 4976 : 		if(temp < 0)

	cmp	DWORD PTR _temp$6[ebp], 0
	jge	SHORT $LN11@LoadCockpi

; 4977 : 			mpIcp->LaserTime = 8;	//standard

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	DWORD PTR [eax+1656], 8
	jmp	SHORT $LN8@LoadCockpi
$LN11@LoadCockpi:

; 4978 : 		else if(temp > 176)

	cmp	DWORD PTR _temp$6[ebp], 176		; 000000b0H
	jle	SHORT $LN9@LoadCockpi

; 4979 : 			mpIcp->LaserTime = 176;	//maximum

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	mov	DWORD PTR [edx+1656], 176		; 000000b0H

; 4980 : 		else 

	jmp	SHORT $LN8@LoadCockpi
$LN9@LoadCockpi:

; 4981 : 			mpIcp->LaserTime = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _temp$6[ebp]
	mov	DWORD PTR [ecx+1656], edx
$LN8@LoadCockpi:

; 4982 : 	}
; 4983 : 	//MI save Cockpit selection
; 4984 : 	if(SimDriver.GetPlayerEntity() && !F4IsBadReadPtr(SimDriver.GetPlayerEntity(), sizeof(AircraftClass)))

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	je	$LN2@LoadCockpi
	push	3624					; 00000e28H
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	$LN2@LoadCockpi

; 4985 : 	{
; 4986 : 		sprintf(tmpStr, "WideView");

	push	OFFSET ??_C@_08DILOOOHJ@WideView?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 8

; 4987 : 		int temp = GetPrivateProfileInt("Cockpit View", tmpStr, 0, dataFileName);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@LFKIFFIM@Cockpit?5View?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	DWORD PTR _temp$3[ebp], eax

; 4988 : 		if(temp <= 0)

	cmp	DWORD PTR _temp$3[ebp], 0
	jg	SHORT $LN6@LoadCockpi

; 4989 : 		{
; 4990 : 			playerAC->WideView = FALSE;

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [ecx+1818], 0

; 4991 : 		}
; 4992 : 		else

	jmp	SHORT $LN5@LoadCockpi
$LN6@LoadCockpi:

; 4993 : 		{
; 4994 : 			playerAC->WideView = TRUE;

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [edx+1818], 1
$LN5@LoadCockpi:

; 4995 : 		}
; 4996 : 
; 4997 : 		if(OTWDriver.pCockpitManager) 

	cmp	DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684, 0
	je	SHORT $LN2@LoadCockpi

; 4998 : 		{
; 4999 : 			if(playerAC->WideView)

	mov	eax, DWORD PTR _playerAC$[ebp]
	movzx	ecx, BYTE PTR [eax+1818]
	test	ecx, ecx
	je	SHORT $LN3@LoadCockpi

; 5000 : 			{
; 5001 : 				OTWDriver.pCockpitManager->SetActivePanel(91100);

	push	91100					; 000163dcH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel

; 5002 : 			}
; 5003 : 			else 

	jmp	SHORT $LN2@LoadCockpi
$LN3@LoadCockpi:

; 5004 : 			{
; 5005 : 				OTWDriver.pCockpitManager->SetActivePanel(1100);

	push	1100					; 0000044cH
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel
$LN2@LoadCockpi:

; 5006 : 			}
; 5007 : 		}
; 5008 : 	}
; 5009 : 
; 5010 : 	// Master Arm
; 5011 : 	//if (SimDriver.GetPlayerEntity()) // JB 010220 CTD
; 5012 : 	// sfr: TODO take this JB hack out
; 5013 : 	if (playerAC && 
; 5014 : 		playerAC->Sms && 
; 5015 : 		!F4IsBadReadPtr(playerAC, sizeof(AircraftClass)) && 
; 5016 : 		!F4IsBadCodePtr((FARPROC) playerAC->Sms))

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN1@LoadCockpi
	mov	edx, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [edx+940], 0
	je	$LN1@LoadCockpi
	push	3624					; 00000e28H
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN1@LoadCockpi
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+940]
	push	eax
	call	?F4IsBadCodePtr@@YA_NPAX@Z		; F4IsBadCodePtr
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN1@LoadCockpi

; 5017 : 	{ // JB 010220 CTD
; 5018 : 		playerAC->Sms->SetMasterArm(
; 5019 : 			(SMSBaseClass::MasterArmState)GetPrivateProfileInt(
; 5020 : 				"Weapons", "MasterArm", playerAC->Sms->MasterArm(), dataFileName
; 5021 : 			)
; 5022 : 		);

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	push	eax
	push	OFFSET ??_C@_09HJHEFHPP@MasterArm?$AA@
	push	OFFSET ??_C@_07DNEKOHB@Weapons?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?SetMasterArm@SMSBaseClass@@QAEXW4MasterArmState@1@@Z ; SMSBaseClass::SetMasterArm

; 5023 : 
; 5024 : 		//MI EWS stuff
; 5025 : 		playerAC->SetPGM((AircraftClass::EWSPGMSwitch)GetPrivateProfileInt("EWS", "Mode Selection",
; 5026 : 					playerAC->EWSPGM(), dataFileName));

	lea	edx, DWORD PTR _dataFileName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ; AircraftClass::EWSPGM
	push	eax
	push	OFFSET ??_C@_0P@FKEDIMOB@Mode?5Selection?$AA@
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?SetPGM@AircraftClass@@QAEXW4EWSPGMSwitch@1@@Z ; AircraftClass::SetPGM

; 5027 : 
; 5028 : 		playerAC->EWSProgNum = GetPrivateProfileInt("EWS", "Number Selection",
; 5029 : 				playerAC->EWSProgNum, dataFileName);

	lea	eax, DWORD PTR _dataFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+1500]
	push	edx
	push	OFFSET ??_C@_0BB@GHALBOOF@Number?5Selection?$AA@
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	call	DWORD PTR __imp__GetPrivateProfileIntA@16
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [ecx+1500], eax
$LN1@LoadCockpi:

; 5030 : 	}
; 5031 : 	OTWDriver.pCockpitManager->Dispatch(1097, 0);

	push	0
	push	1097					; 00000449H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?Dispatch@CockpitManager@@QAEXHH@Z	; CockpitManager::Dispatch

; 5032 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadCockpitDefaults@CockpitManager@@QAEXXZ ENDP	; CockpitManager::LoadCockpitDefaults
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rowIndex$ = -20					; size = 4
_n$ = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_clearbuffer$ = -1					; size = 1
_ploadBuffer$ = 8					; size = 4
_psrcBuffer$ = 12					; size = 4
_height$ = 16						; size = 4
_width$ = 20						; size = 4
_psrcRect$ = 24						; size = 4
?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z PROC ; CockpitManager::SafeImageCopy
; _this$ = ecx

; 2124 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2125 : 	bool clearbuffer = false;

	mov	BYTE PTR _clearbuffer$[ebp], 0

; 2126 : 
; 2127 : 	//Wombat778 4-13-04 move the check for a bad pointer here.
; 2128 : 	if (!psrcBuffer)

	cmp	DWORD PTR _psrcBuffer$[ebp], 0
	jne	SHORT $LN11@SafeImageC

; 2129 : 	{
; 2130 : 		CockpitError(gDebugLineNum,1);

	push	1
	mov	eax, DWORD PTR _gDebugLineNum
	push	eax
	call	?CockpitError@@YAXHH@Z			; CockpitError
	add	esp, 8

; 2131 : 		return;

	jmp	$LN12@SafeImageC
$LN11@SafeImageC:

; 2132 : 	}
; 2133 : 
; 2134 : 	if (psrcRect->top < 0 || psrcRect->left < 0 || psrcRect->bottom > height||psrcRect->right > width)		//Wombat778 4-11-04 added another check for src rectangles below 0

	mov	ecx, DWORD PTR _psrcRect$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN9@SafeImageC
	mov	edx, DWORD PTR _psrcRect$[ebp]
	cmp	DWORD PTR [edx], 0
	jl	SHORT $LN9@SafeImageC
	mov	eax, DWORD PTR _psrcRect$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR _height$[ebp]
	jg	SHORT $LN9@SafeImageC
	mov	edx, DWORD PTR _psrcRect$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _width$[ebp]
	jle	SHORT $LN10@SafeImageC
$LN9@SafeImageC:

; 2135 : 	{		
; 2136 : 		CockpitError(gDebugLineNum,2);		//Wombat778 4-11-04 throw up an error

	push	2
	mov	ecx, DWORD PTR _gDebugLineNum
	push	ecx
	call	?CockpitError@@YAXHH@Z			; CockpitError
	add	esp, 8

; 2137 : 		clearbuffer = true;					//Wombat778 4-13-04 since this is just a buffer size error, we still want to clear the texture with chroma blue

	mov	BYTE PTR _clearbuffer$[ebp], 1
$LN10@SafeImageC:

; 2138 : 	}
; 2139 : 
; 2140 : 	int	i, j, n;
; 2141 : 	int	rowIndex;
; 2142 : 
; 2143 : 	for(i = psrcRect->top, n = 0; i < psrcRect->bottom; i++) {

	mov	edx, DWORD PTR _psrcRect$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN8@SafeImageC
$LN7@SafeImageC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@SafeImageC:
	mov	edx, DWORD PTR _psrcRect$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jge	SHORT $LN12@SafeImageC

; 2144 : 		rowIndex = i * width;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _rowIndex$[ebp], ecx

; 2145 : 		for(j = psrcRect->left; j < psrcRect->right; j++, n++) {

	mov	edx, DWORD PTR _psrcRect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN5@SafeImageC
$LN4@SafeImageC:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN5@SafeImageC:
	mov	eax, DWORD PTR _psrcRect$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN3@SafeImageC

; 2146 : 			if (!clearbuffer) 

	movzx	edx, BYTE PTR _clearbuffer$[ebp]
	test	edx, edx
	jne	SHORT $LN2@SafeImageC

; 2147 : 				psrcBuffer[n] = ploadBuffer[rowIndex + j];		

	mov	eax, DWORD PTR _rowIndex$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _psrcBuffer$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _ploadBuffer$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx], al

; 2148 : 			else 

	jmp	SHORT $LN1@SafeImageC
$LN2@SafeImageC:

; 2149 : 				psrcBuffer[n] = 0;			//Wombat778 4-13-04 fill the texture with the chroma value

	mov	ecx, DWORD PTR _psrcBuffer$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	BYTE PTR [ecx], 0
$LN1@SafeImageC:

; 2150 : 		}

	jmp	SHORT $LN4@SafeImageC
$LN3@SafeImageC:

; 2151 : 	}

	jmp	SHORT $LN7@SafeImageC
$LN12@SafeImageC:

; 2152 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ENDP ; CockpitManager::SafeImageCopy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_rowIndex$ = -16					; size = 4
_n$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_ploadBuffer$ = 8					; size = 4
_psrcBuffer$ = 12					; size = 4
_width$ = 16						; size = 4
_psrcRect$ = 20						; size = 4
?ImageCopy@CockpitManager@@QAEXPAE0HPAUtagRECT@@@Z PROC	; CockpitManager::ImageCopy
; _this$ = ecx

; 2102 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2103 : 	int	i, j, n;
; 2104 : 	int	rowIndex;
; 2105 : 
; 2106 : 	for(i = psrcRect->top, n = 0; i < psrcRect->bottom; i++) {

	mov	eax, DWORD PTR _psrcRect$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$[ebp], ecx
	mov	DWORD PTR _n$[ebp], 0
	jmp	SHORT $LN6@ImageCopy
$LN5@ImageCopy:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@ImageCopy:
	mov	eax, DWORD PTR _psrcRect$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jge	SHORT $LN7@ImageCopy

; 2107 : 		rowIndex = i * width;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _rowIndex$[ebp], edx

; 2108 : 		for(j = psrcRect->left; j < psrcRect->right; j++, n++) {

	mov	eax, DWORD PTR _psrcRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _j$[ebp], ecx
	jmp	SHORT $LN3@ImageCopy
$LN2@ImageCopy:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN3@ImageCopy:
	mov	ecx, DWORD PTR _psrcRect$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jge	SHORT $LN1@ImageCopy

; 2109 : 			psrcBuffer[n] = ploadBuffer[rowIndex + j];		

	mov	eax, DWORD PTR _rowIndex$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _psrcBuffer$[ebp]
	add	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _ploadBuffer$[ebp]
	mov	al, BYTE PTR [edx+eax]
	mov	BYTE PTR [ecx], al

; 2110 : 		}

	jmp	SHORT $LN2@ImageCopy
$LN1@ImageCopy:

; 2111 : 	}

	jmp	SHORT $LN5@ImageCopy
$LN7@ImageCopy:

; 2112 : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ImageCopy@CockpitManager@@QAEXPAE0HPAUtagRECT@@@Z ENDP	; CockpitManager::ImageCopy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdatePalette@CockpitManager@@QAEXXZ PROC		; CockpitManager::UpdatePalette
; _this$ = ecx

; 4429 : void CockpitManager::UpdatePalette() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4430 : 	// Apply lighting effects to palette here
; 4431 : 	if(mpActivePanel) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN2@UpdatePale

; 4432 : 		mpActivePanel->SetPalette();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?SetPalette@CPPanel@@QAEXXZ		; CPPanel::SetPalette
$LN2@UpdatePale:

; 4433 : 	}
; 4434 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdatePalette@CockpitManager@@QAEXXZ ENDP		; CockpitManager::UpdatePalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newLightLevel$ = 8					; size = 4
?SetTOD@CockpitManager@@QAEXM@Z PROC			; CockpitManager::SetTOD
; _this$ = ecx

; 4414 : void CockpitManager::SetTOD(float newLightLevel) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4415 : 
; 4416 : 	/*	if ((fabs(lightLevel - newLightLevel) <= COCKPIT_LIGHT_CHANGE_TOLERANCE) &&
; 4417 : 			(OTWDriver.renderer->GetGreenMode() != inNVGmode)) {
; 4418 : 			return;
; 4419 : 			}*/
; 4420 : 
; 4421 : 	lightLevel	= newLightLevel;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newLightLevel$[ebp]
	movss	DWORD PTR [eax+280], xmm0

; 4422 : 
; 4423 : 	// Apply lighting effects to palette here
; 4424 : 	if(mpActivePanel) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN1@SetTOD

; 4425 : 		mpActivePanel->SetPalette();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	call	?SetPalette@CPPanel@@QAEXXZ		; CPPanel::SetPalette
$LN1@SetTOD:

; 4426 : 	}
; 4427 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTOD@CockpitManager@@QAEXM@Z ENDP			; CockpitManager::SetTOD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?GetTilt@CockpitManager@@QAEMXZ PROC			; CockpitManager::GetTilt
; _this$ = ecx

; 4386 : float	CockpitManager::GetTilt(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4387 : 
; 4388 : 	if(mpActivePanel && !gDoCockpitHack) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN1@GetTilt
	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	jne	SHORT $LN1@GetTilt

; 4389 : 		return (mpActivePanel->mTilt);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	movss	xmm0, DWORD PTR [edx+84]
	movss	DWORD PTR tv74[ebp], xmm0
	fld	DWORD PTR tv74[ebp]
	jmp	SHORT $LN2@GetTilt
$LN1@GetTilt:

; 4390 : 	}
; 4391 : 
; 4392 : 	return (0.0F);

	fldz
$LN2@GetTilt:

; 4393 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTilt@CockpitManager@@QAEMXZ ENDP			; CockpitManager::GetTilt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?GetPan@CockpitManager@@QAEMXZ PROC			; CockpitManager::GetPan
; _this$ = ecx

; 4377 : float	CockpitManager::GetPan(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4378 : 
; 4379 : 	if(mpActivePanel && !gDoCockpitHack) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN1@GetPan
	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	jne	SHORT $LN1@GetPan

; 4380 : 		return (mpActivePanel->mPan);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	movss	xmm0, DWORD PTR [edx+80]
	movss	DWORD PTR tv74[ebp], xmm0
	fld	DWORD PTR tv74[ebp]
	jmp	SHORT $LN2@GetPan
$LN1@GetPan:

; 4381 : 	}
; 4382 : 
; 4383 : 	return (0.0F);

	fldz
$LN2@GetPan:

; 4384 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPan@CockpitManager@@QAEMXZ ENDP			; CockpitManager::GetPan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetNextView@CockpitManager@@QAEXXZ PROC		; CockpitManager::SetNextView
; _this$ = ecx

; 4346 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4347 : 	F4EnterCriticalSection(mpCockpitCritSec);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+660]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 4348 : 
; 4349 : 	if(!mIsNextInitialized && mpNextActivePanel) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+208], 0
	jne	$LN2@SetNextVie
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	je	$LN2@SetNextVie

; 4350 : 		if(mpNextActivePanel != mpActivePanel) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+176]
	cmp	eax, DWORD PTR [edx+172]
	je	$LN2@SetNextVie

; 4351 : 
; 4352 : 			// OW
; 4353 : 			// keep them all in video memory, otherwise the texture manger eats up all the video memory and we have to create them in system memory
; 4354 : 			//			if(!PlayerOptions.bFast2DCockpit)
; 4355 : 			{	
; 4356 : 				if (mpActivePanel)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN1@SetNextVie

; 4357 : 					mpActivePanel->DiscardLitSurfaces();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	call	?DiscardLitSurfaces@CPPanel@@QAEXXZ	; CPPanel::DiscardLitSurfaces
$LN1@SetNextVie:

; 4358 : 			}
; 4359 : 
; 4360 : 			mpNextActivePanel->CreateLitSurfaces(lightLevel);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+280]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+176]
	call	?CreateLitSurfaces@CPPanel@@QAEXM@Z	; CPPanel::CreateLitSurfaces

; 4361 : 			mpActivePanel	= mpNextActivePanel;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR [edx+172], ecx

; 4362 : 
; 4363 : 			mMouseBounds	= mpActivePanel->mMouseBounds;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 4364 : 			mpActivePanel->SetDirtyFlags();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?SetDirtyFlags@CPPanel@@QAEXXZ		; CPPanel::SetDirtyFlags

; 4365 : 
; 4366 : 			mpNextActivePanel = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+176], 0

; 4367 : 			mIsInitialized		= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+204], 0

; 4368 : 			mViewChanging		= TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+656], 1
$LN2@SetNextVie:

; 4369 : 		}
; 4370 : 	}
; 4371 : 
; 4372 : 	F4LeaveCriticalSection(mpCockpitCritSec);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+660]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 4373 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetNextView@CockpitManager@@QAEXXZ ENDP		; CockpitManager::SetNextView
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_returnValue$ = -8					; size = 4
_this$ = -4						; size = 4
?GetCockpitMaskTop@CockpitManager@@QAEMXZ PROC		; CockpitManager::GetCockpitMaskTop
; _this$ = ecx

; 4155 : float CockpitManager::GetCockpitMaskTop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4156 : 
; 4157 : 	float returnValue;
; 4158 : 
; 4159 : #if DO_HIRESCOCK_HACK
; 4160 : 	if(mpActivePanel && !gDoCockpitHack){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN2@GetCockpit
	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	jne	SHORT $LN2@GetCockpit

; 4161 : 		returnValue = mpActivePanel->mMaskTop;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	movss	xmm0, DWORD PTR [edx+88]
	movss	DWORD PTR _returnValue$[ebp], xmm0

; 4162 : 	}
; 4163 : 	else {

	jmp	SHORT $LN1@GetCockpit
$LN2@GetCockpit:

; 4164 : 		returnValue = -1.0F;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _returnValue$[ebp], xmm0
$LN1@GetCockpit:

; 4165 : 	}
; 4166 : #else
; 4167 : 	if(mpActivePanel){
; 4168 : 		returnValue = mpActivePanel->mMaskTop;
; 4169 : 	}
; 4170 : 	else {
; 4171 : 		returnValue = -1.0F;
; 4172 : 	}
; 4173 : #endif
; 4174 : 	return(returnValue);

	fld	DWORD PTR _returnValue$[ebp]

; 4175 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCockpitMaskTop@CockpitManager@@QAEMXZ ENDP		; CockpitManager::GetCockpitMaskTop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_returnValue$ = -8					; size = 4
_this$ = -4						; size = 4
_bounds$ = 8						; size = 4
_viewPort$ = 12						; size = 4
?GetViewportBounds@CockpitManager@@QAEHPAUViewportBounds@@H@Z PROC ; CockpitManager::GetViewportBounds
; _this$ = ecx

; 4322 : BOOL CockpitManager::GetViewportBounds(ViewportBounds* bounds, int viewPort) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4323 : 
; 4324 : 	BOOL returnValue = FALSE;

	mov	DWORD PTR _returnValue$[ebp], 0

; 4325 : #if DO_HIRESCOCK_HACK
; 4326 : 	if(mpActivePanel && !gDoCockpitHack) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN3@GetViewpor
	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	jne	SHORT $LN3@GetViewpor

; 4327 : 		returnValue		= mpActivePanel->GetViewportBounds(bounds, viewPort);

	mov	ecx, DWORD PTR _viewPort$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bounds$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	?GetViewportBounds@CPPanel@@QAEHPAUViewportBounds@@H@Z ; CPPanel::GetViewportBounds
	mov	DWORD PTR _returnValue$[ebp], eax
	jmp	SHORT $LN2@GetViewpor
$LN3@GetViewpor:

; 4328 : 	}
; 4329 : 	else if(mpViewBounds[viewPort]) {

	mov	ecx, DWORD PTR _viewPort$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+664], 0
	je	SHORT $LN2@GetViewpor

; 4330 : 		*bounds			= *mpViewBounds[viewPort];

	mov	eax, DWORD PTR _viewPort$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+664]
	mov	eax, DWORD PTR _bounds$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 4331 : 		returnValue		= TRUE;

	mov	DWORD PTR _returnValue$[ebp], 1
$LN2@GetViewpor:

; 4332 : 	}
; 4333 : #else
; 4334 : 	if(mpActivePanel) {
; 4335 : 		returnValue		= mpActivePanel->GetViewportBounds(bounds, viewPort);
; 4336 : 	}
; 4337 : 	else if(mpViewBounds[viewPort]) {
; 4338 : 		*bounds			= *mpViewBounds[viewPort];
; 4339 : 		returnValue		= TRUE;
; 4340 : 	}
; 4341 : #endif
; 4342 : 	return(returnValue);

	mov	eax, DWORD PTR _returnValue$[ebp]

; 4343 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetViewportBounds@CockpitManager@@QAEHPAUViewportBounds@@H@Z ENDP ; CockpitManager::GetViewportBounds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowRwr@CockpitManager@@QAEHXZ PROC			; CockpitManager::ShowRwr
; _this$ = ecx

; 4229 : BOOL CockpitManager::ShowRwr(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4230 : 
; 4231 : 	if(mpViewBounds[BOUNDS_RWR]) {

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+664], 0
	je	SHORT $LN3@ShowRwr

; 4232 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowRwr
	jmp	SHORT $LN2@ShowRwr
$LN3@ShowRwr:

; 4233 : 	}
; 4234 : 	else if(mpActivePanel && mpActivePanel->mpViewBounds[BOUNDS_RWR]) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+172], 0
	je	SHORT $LN2@ShowRwr
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	edx, 4
	shl	edx, 0
	cmp	DWORD PTR [ecx+edx+92], 0
	je	SHORT $LN2@ShowRwr

; 4235 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowRwr
$LN2@ShowRwr:

; 4236 : 	}
; 4237 : 
; 4238 : 	return (FALSE);

	xor	eax, eax
$LN4@ShowRwr:

; 4239 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ShowRwr@CockpitManager@@QAEHXZ ENDP			; CockpitManager::ShowRwr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowMfd@CockpitManager@@QAEHXZ PROC			; CockpitManager::ShowMfd
; _this$ = ecx

; 4260 : BOOL CockpitManager::ShowMfd(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4261 : 
; 4262 : 	if(mpViewBounds[BOUNDS_MFDLEFT] && mpViewBounds[BOUNDS_MFDRIGHT]) {

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+664], 0
	je	SHORT $LN3@ShowMfd
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+664], 0
	je	SHORT $LN3@ShowMfd

; 4263 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowMfd
	jmp	SHORT $LN2@ShowMfd
$LN3@ShowMfd:

; 4264 : 	}
; 4265 : 	else if(mpActivePanel && mpActivePanel->mpViewBounds[BOUNDS_MFDLEFT] && mpActivePanel->mpViewBounds[BOUNDS_MFDRIGHT]) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN2@ShowMfd
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, 4
	shl	ecx, 1
	cmp	DWORD PTR [eax+ecx+92], 0
	je	SHORT $LN2@ShowMfd
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, 4
	imul	ecx, 3
	cmp	DWORD PTR [eax+ecx+92], 0
	je	SHORT $LN2@ShowMfd

; 4266 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowMfd
$LN2@ShowMfd:

; 4267 : 	}
; 4268 : 
; 4269 : 	return (FALSE);

	xor	eax, eax
$LN4@ShowMfd:

; 4270 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ShowMfd@CockpitManager@@QAEHXZ ENDP			; CockpitManager::ShowMfd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShowHud@CockpitManager@@QAEHXZ PROC			; CockpitManager::ShowHud
; _this$ = ecx

; 4245 : BOOL CockpitManager::ShowHud(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4246 : 
; 4247 : 	if(mpViewBounds[BOUNDS_HUD]) {

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+664], 0
	je	SHORT $LN3@ShowHud

; 4248 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowHud
	jmp	SHORT $LN2@ShowHud
$LN3@ShowHud:

; 4249 : 	}
; 4250 : 	else if(mpActivePanel && mpActivePanel->mpViewBounds[BOUNDS_HUD]) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+172], 0
	je	SHORT $LN2@ShowHud
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	edx, 4
	imul	edx, 0
	cmp	DWORD PTR [ecx+edx+92], 0
	je	SHORT $LN2@ShowHud

; 4251 : 		return(TRUE);

	mov	eax, 1
	jmp	SHORT $LN4@ShowHud
$LN2@ShowHud:

; 4252 : 	}
; 4253 : 
; 4254 : 	return (FALSE);

	xor	eax, eax
$LN4@ShowHud:

; 4255 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ShowHud@CockpitManager@@QAEHXZ ENDP			; CockpitManager::ShowHud
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_paircraftClass$ = 8					; size = 4
?SetOwnship@CockpitManager@@QAEXPAVSimBaseClass@@@Z PROC ; CockpitManager::SetOwnship
; _this$ = ecx

; 4142 : void CockpitManager::SetOwnship(SimBaseClass* paircraftClass) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4143 : 
; 4144 : 	mpOwnship				= paircraftClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _paircraftClass$[ebp]
	mov	DWORD PTR [eax+720], ecx

; 4145 : 
; 4146 : 	if(mpIcp) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	SHORT $LN2@SetOwnship

; 4147 : 		mpIcp->SetOwnship();		// necessary for now, may not need when done

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?SetOwnship@ICPClass@@QAEXXZ		; ICPClass::SetOwnship
$LN2@SetOwnship:

; 4148 : 	}
; 4149 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetOwnship@CockpitManager@@QAEXPAVSimBaseClass@@@Z ENDP ; CockpitManager::SetOwnship
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_i$ = -12						; size = 4
_this$ = -8						; size = 4
_found$ = -1						; size = 1
_panelId$ = 8						; size = 4
?SetActivePanel@CockpitManager@@QAE_NH@Z PROC		; CockpitManager::SetActivePanel
; _this$ = ecx

; 4182 : bool CockpitManager::SetActivePanel(int panelId) {		//Wombat778 changed return to bool

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 4183 : 
; 4184 : 	int i			= 0;

	mov	DWORD PTR _i$[ebp], 0

; 4185 : 	bool found	= FALSE;			//Wombat778 4-13-04 changed to bool

	mov	BYTE PTR _found$[ebp], 0

; 4186 : 
; 4187 : 	mCycleBit = BEGIN_CYCLE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 1

; 4188 : 
; 4189 : 	if(panelId == PANELS_INACTIVE) {

	cmp	DWORD PTR _panelId$[ebp], -1
	jne	SHORT $LN9@SetActiveP

; 4190 : 
; 4191 : 		F4EnterCriticalSection(mpCockpitCritSec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 4192 : 
; 4193 : 		if(mpActivePanel) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $LN8@SetActiveP

; 4194 : 			mpActivePanel->DiscardLitSurfaces();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?DiscardLitSurfaces@CPPanel@@QAEXXZ	; CPPanel::DiscardLitSurfaces
$LN8@SetActiveP:

; 4195 : 		}
; 4196 : 		mpActivePanel		= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0

; 4197 : 		mpNextActivePanel	= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], 0

; 4198 : 
; 4199 : 		F4LeaveCriticalSection(mpCockpitCritSec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 4200 : 
; 4201 : 		mIsNextInitialized = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], 0
	jmp	$LN7@SetActiveP
$LN9@SetActiveP:

; 4202 : 	}
; 4203 : 	else if(mpActivePanel == NULL || mpActivePanel->mIdNum != panelId) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN4@SetActiveP
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _panelId$[ebp]
	je	$LN7@SetActiveP
$LN4@SetActiveP:

; 4204 : 
; 4205 : 		// loop thru all the panels
; 4206 : 		while((!found) && (i < mPanelTally)) {

	movzx	edx, BYTE PTR _found$[ebp]
	test	edx, edx
	jne	$LN7@SetActiveP
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jge	SHORT $LN7@SetActiveP

; 4207 : 			// if we find the panel with our id, make it active
; 4208 : 			if(mpPanels[i]->mIdNum == panelId) {

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _panelId$[ebp]
	jne	SHORT $LN2@SetActiveP

; 4209 : 
; 4210 : 				F4EnterCriticalSection(mpCockpitCritSec);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+660]
	push	eax
	call	_F4EnterCriticalSection
	add	esp, 4

; 4211 : 				mpNextActivePanel		= mpPanels[i];

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+176], eax

; 4212 : 				F4LeaveCriticalSection(mpCockpitCritSec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4

; 4213 : 				mIsNextInitialized	= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+208], 0

; 4214 : 				found						= TRUE;

	mov	BYTE PTR _found$[ebp], 1

; 4215 : 			}
; 4216 : 			else {

	jmp	SHORT $LN1@SetActiveP
$LN2@SetActiveP:

; 4217 : 				i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN1@SetActiveP:

; 4218 : 			}
; 4219 : 		}

	jmp	$LN4@SetActiveP
$LN7@SetActiveP:

; 4220 : 		F4Assert(found);
; 4221 : 	}
; 4222 : 	//	MonoPrint("panelID == %d\n", panelId);
; 4223 : 	return found;						//Wombat778 4-13-04 return the status

	mov	al, BYTE PTR _found$[ebp]

; 4224 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetActivePanel@CockpitManager@@QAE_NH@Z ENDP		; CockpitManager::SetActivePanel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_preturnValue$ = -16					; size = 4
_found$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_buttonId$ = 8						; size = 4
?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z PROC ; CockpitManager::GetButtonPointer
; _this$ = ecx

; 4022 : CPButtonObject* CockpitManager::GetButtonPointer(int buttonId) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 4023 : 
; 4024 : 	BOOL					found			= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 4025 : 	int					i				= 0;	

	mov	DWORD PTR _i$[ebp], 0

; 4026 : 	CPButtonObject*	preturnValue = NULL;

	mov	DWORD PTR _preturnValue$[ebp], 0
$LN4@GetButtonP:

; 4027 : 
; 4028 : 	while(!found && i < mNumButtons) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN3@GetButtonP
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+56]
	jge	SHORT $LN3@GetButtonP

; 4029 : 		if(mpButtonObjects[i]->GetId() == buttonId) {

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN2@GetButtonP

; 4030 : 			found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 4031 : 			preturnValue = mpButtonObjects[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _preturnValue$[ebp], ecx

; 4032 : 		}
; 4033 : 		else {

	jmp	SHORT $LN1@GetButtonP
$LN2@GetButtonP:

; 4034 : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN1@GetButtonP:

; 4035 : 		}
; 4036 : 	}

	jmp	SHORT $LN4@GetButtonP
$LN3@GetButtonP:

; 4037 : 
; 4038 : 	F4Assert(found);
; 4039 : 	return(preturnValue);

	mov	eax, DWORD PTR _preturnValue$[ebp]

; 4040 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z ENDP ; CockpitManager::GetButtonPointer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?InitialiseInstruments@CockpitManager@@QAEXXZ PROC	; CockpitManager::InitialiseInstruments
; _this$ = ecx

; 5240 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5241 : 	// actually for now - its jsut buttons that need to be up to date.
; 5242 : 	for (int i = 0; i< mButtonTally; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Initialise
$LN2@Initialise:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Initialise:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jge	SHORT $LN4@Initialise

; 5243 : 		mpButtonObjects[i]->UpdateStatus();

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?UpdateStatus@CPButtonObject@@QAEXXZ	; CPButtonObject::UpdateStatus

; 5244 : 	}

	jmp	SHORT $LN2@Initialise
$LN4@Initialise:

; 5245 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitialiseInstruments@CockpitManager@@QAEXXZ ENDP	; CockpitManager::InitialiseInstruments
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayBlit3D@CockpitManager@@QAEXXZ PROC		; CockpitManager::DisplayBlit3D
; _this$ = ecx

; 3972 : void CockpitManager::DisplayBlit3D(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3973 : #if DO_HIRESCOCK_HACK
; 3974 : 	if(gDoCockpitHack) {

	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	je	SHORT $LN2@DisplayBli

; 3975 : 		return;

	jmp	SHORT $LN3@DisplayBli
$LN2@DisplayBli:

; 3976 : 	}
; 3977 : 
; 3978 : 	if(mIsInitialized && mpActivePanel) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+204], 0
	je	SHORT $LN3@DisplayBli
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN3@DisplayBli

; 3979 : 		mpActivePanel->DisplayBlit3D();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	call	?DisplayBlit3D@CPPanel@@QAEXXZ		; CPPanel::DisplayBlit3D
$LN3@DisplayBli:

; 3980 : 	}
; 3981 : #else
; 3982 : 	if(mIsInitialized && mpActivePanel) {
; 3983 : 		mpActivePanel->DisplayBlit3D();
; 3984 : 	}
; 3985 : #endif
; 3986 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit3D@CockpitManager@@QAEXXZ ENDP		; CockpitManager::DisplayBlit3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_cursorIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_direction$ = 8						; size = 4
_curXPos$ = 12						; size = 4
_curYPos$ = 16						; size = 4
?POVDispatch@CockpitManager@@QAEHHHH@Z PROC		; CockpitManager::POVDispatch
; _this$ = ecx

; 4077 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4078 : 	int	cursorIndex = -1;

	mov	DWORD PTR _cursorIndex$[ebp], -1

; 4079 : 
; 4080 : 	if(SimDriver.InSim()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?InSim@SimulationDriver@@QBE_NXZ	; SimulationDriver::InSim
	movzx	eax, al
	test	eax, eax
	je	$LN7@POVDispatc

; 4081 : 		if(mpActivePanel) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN6@POVDispatc

; 4082 : 			if(mpActivePanel->POVDispatch(direction))

	mov	edx, DWORD PTR _direction$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	?POVDispatch@CPPanel@@QAEHH@Z		; CPPanel::POVDispatch
	test	eax, eax
	je	SHORT $LN5@POVDispatc

; 4083 : 			{
; 4084 : 				if (mpNextActivePanel)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+176], 0
	je	SHORT $LN4@POVDispatc

; 4085 : 				{
; 4086 : 					mpNextActivePanel->Dispatch(&cursorIndex, CP_MOUSE_MOVE, curXPos, curYPos);

	mov	edx, DWORD PTR _curYPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _curXPos$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _cursorIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?Dispatch@CPPanel@@QAEHPAHHHH@Z		; CPPanel::Dispatch

; 4087 : 				}
; 4088 : 				else

	jmp	SHORT $LN3@POVDispatc
$LN4@POVDispatc:

; 4089 : 				{
; 4090 : 					MonoPrint ("Cannot Change to Next Active Panel\n");

	push	OFFSET ??_C@_0CE@LIBGJLEH@Cannot?5Change?5to?5Next?5Active?5Pan@
	call	_MonoPrint
	add	esp, 4
$LN3@POVDispatc:

; 4091 : 				}
; 4092 : 				F4SoundFXSetDist(SFX_CP_CHNGVIEW, TRUE, 0.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	116					; 00000074H
	call	_F4SoundFXSetDist
	add	esp, 16					; 00000010H
$LN5@POVDispatc:

; 4093 : 			}
; 4094 : 		}
; 4095 : 		else {

	jmp	SHORT $LN2@POVDispatc
$LN6@POVDispatc:

; 4096 : 			cursorIndex = -1;

	mov	DWORD PTR _cursorIndex$[ebp], -1
$LN2@POVDispatc:

; 4097 : 		}
; 4098 : 	}
; 4099 : 	else {

	jmp	SHORT $LN1@POVDispatc
$LN7@POVDispatc:

; 4100 : 		cursorIndex = -1;

	mov	DWORD PTR _cursorIndex$[ebp], -1
$LN1@POVDispatc:

; 4101 : 	}
; 4102 : 
; 4103 : 	return cursorIndex;

	mov	eax, DWORD PTR _cursorIndex$[ebp]

; 4104 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?POVDispatch@CockpitManager@@QAEHHHH@Z ENDP		; CockpitManager::POVDispatch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_event$ = -16						; size = 4
_found$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_buttonId$ = 8						; size = 4
_mouseSide$ = 12					; size = 4
?Dispatch@CockpitManager@@QAEXHH@Z PROC			; CockpitManager::Dispatch
; _this$ = ecx

; 4047 : void CockpitManager::Dispatch(int buttonId, int mouseSide) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 4048 : 
; 4049 : 	BOOL	found	= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 4050 : 	int	i		= 0;	

	mov	DWORD PTR _i$[ebp], 0
$LN6@Dispatch:

; 4051 : 	int	event;
; 4052 : 
; 4053 : 	while(!found && i< mButtonTally) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN7@Dispatch
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN7@Dispatch

; 4054 : 		if(mpButtonObjects[i]->GetId() == buttonId) {

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN4@Dispatch

; 4055 : 			found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 4056 : 
; 4057 : 			if(mouseSide == STARTDAT_MOUSE_LEFT) {

	cmp	DWORD PTR _mouseSide$[ebp], 0
	jne	SHORT $LN3@Dispatch

; 4058 : 				event = CP_MOUSE_BUTTON0;

	mov	DWORD PTR _event$[ebp], 3

; 4059 : 			}
; 4060 : 			else {

	jmp	SHORT $LN2@Dispatch
$LN3@Dispatch:

; 4061 : 				event = CP_MOUSE_BUTTON1;

	mov	DWORD PTR _event$[ebp], 4
$LN2@Dispatch:

; 4062 : 			}
; 4063 : 
; 4064 : 			mpButtonObjects[i]->HandleEvent(event);

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?HandleEvent@CPButtonObject@@QAEXH@Z	; CPButtonObject::HandleEvent

; 4065 : 		}
; 4066 : 		else {

	jmp	SHORT $LN1@Dispatch
$LN4@Dispatch:

; 4067 : 			i++;

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN1@Dispatch:

; 4068 : 		}
; 4069 : 	}

	jmp	SHORT $LN6@Dispatch
$LN7@Dispatch:

; 4070 : 
; 4071 : 	//	F4Assert(found);
; 4072 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Dispatch@CockpitManager@@QAEXHH@Z ENDP			; CockpitManager::Dispatch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_cursorIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_event$ = 8						; size = 4
_xpos$ = 12						; size = 4
_ypos$ = 16						; size = 4
?Dispatch@CockpitManager@@QAEHHHH@Z PROC		; CockpitManager::Dispatch
; _this$ = ecx

; 4107 : int CockpitManager::Dispatch(int event, int xpos, int ypos) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4108 : 
; 4109 : 	int		cursorIndex;
; 4110 : 
; 4111 : 	if(SimDriver.InSim()) {

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?InSim@SimulationDriver@@QBE_NXZ	; SimulationDriver::InSim
	movzx	eax, al
	test	eax, eax
	je	$LN7@Dispatch

; 4112 : 		if(mpActivePanel) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	$LN6@Dispatch

; 4113 : 			if(mpActivePanel->Dispatch(&cursorIndex, event, xpos, ypos))

	mov	edx, DWORD PTR _ypos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _event$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cursorIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	?Dispatch@CPPanel@@QAEHPAHHHH@Z		; CPPanel::Dispatch
	test	eax, eax
	je	SHORT $LN5@Dispatch

; 4114 : 			{
; 4115 : 				if (mpNextActivePanel)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+176], 0
	je	SHORT $LN4@Dispatch

; 4116 : 				{
; 4117 : 					mpNextActivePanel->Dispatch(&cursorIndex, CP_MOUSE_MOVE, xpos, ypos);

	mov	edx, DWORD PTR _ypos$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpos$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _cursorIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	call	?Dispatch@CPPanel@@QAEHPAHHHH@Z		; CPPanel::Dispatch

; 4118 : 				}
; 4119 : 				else

	jmp	SHORT $LN3@Dispatch
$LN4@Dispatch:

; 4120 : 				{
; 4121 : 					MonoPrint ("Cannot Change to Next Active Panel\n");

	push	OFFSET ??_C@_0CE@LIBGJLEH@Cannot?5Change?5to?5Next?5Active?5Pan@
	call	_MonoPrint
	add	esp, 4
$LN3@Dispatch:

; 4122 : 				}
; 4123 : 				F4SoundFXSetDist(SFX_CP_CHNGVIEW, TRUE, 0.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	push	116					; 00000074H
	call	_F4SoundFXSetDist
	add	esp, 16					; 00000010H
$LN5@Dispatch:

; 4124 : 			}
; 4125 : 		}
; 4126 : 		else {

	jmp	SHORT $LN2@Dispatch
$LN6@Dispatch:

; 4127 : 			cursorIndex = -1;

	mov	DWORD PTR _cursorIndex$[ebp], -1
$LN2@Dispatch:

; 4128 : 		}
; 4129 : 	}
; 4130 : 	else {

	jmp	SHORT $LN1@Dispatch
$LN7@Dispatch:

; 4131 : 		cursorIndex = -1;

	mov	DWORD PTR _cursorIndex$[ebp], -1
$LN1@Dispatch:

; 4132 : 	}
; 4133 : 
; 4134 : 	return cursorIndex;

	mov	eax, DWORD PTR _cursorIndex$[ebp]

; 4135 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Dispatch@CockpitManager@@QAEHHHH@Z ENDP		; CockpitManager::Dispatch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_sms$1 = -100						; size = 4
_bsp$2 = -96						; size = 4
tv292 = -92						; size = 4
_tempfov$3 = -88					; size = 4
tv285 = -84						; size = 4
_oldState$4 = -80					; size = 4
_t$5 = -76						; size = 4
_drawOrdinance$ = -72					; size = 4
_drawWing$ = -68					; size = 4
_drawReflection$ = -64					; size = 4
_pac$ = -60						; size = 4
_this$ = -56						; size = 4
_tempLight$ = -52					; size = 12
_Turb$6 = -40						; size = 12
_worldLight$ = -28					; size = 12
_HeadOrigin$7 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?GeometryDraw@CockpitManager@@QAEXXZ PROC		; CockpitManager::GeometryDraw
; _this$ = ecx

; 3845 : void CockpitManager::GeometryDraw(void){

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 3846 : 	Tpoint			tempLight, worldLight;
; 3847 : 	BOOL				drawWing = TRUE;

	mov	DWORD PTR _drawWing$[ebp], 1

; 3848 : 	BOOL				drawReflection = TRUE;

	mov	DWORD PTR _drawReflection$[ebp], 1

; 3849 : 	BOOL				drawOrdinance = TRUE;

	mov	DWORD PTR _drawOrdinance$[ebp], 1

; 3850 : 	AircraftClass *pac = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _pac$[ebp], eax

; 3851 : 
; 3852 : 	if(mpActivePanel && mpGeometry){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	$LN1@GeometryDr
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+696], 0
	je	$LN1@GeometryDr

; 3853 : 		{   // MLR 2003-10-05 Get Texture set
; 3854 : 			// this needs to be placed somewhere where it only runs once
; 3855 : 			if (pac->drawPointer->GetClass()==DrawableObject::BSP)

	mov	edx, DWORD PTR _pac$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 1
	jne	SHORT $LN12@GeometryDr

; 3856 : 			{
; 3857 : 				DrawableBSP *bsp=(DrawableBSP*)SimDriver.GetPlayerEntity()->drawPointer;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	eax, DWORD PTR [eax+332]
	mov	DWORD PTR _bsp$2[ebp], eax

; 3858 : 				int t = bsp->GetTextureSet();

	mov	ecx, DWORD PTR _bsp$2[ebp]
	call	?GetTextureSet@DrawableBSP@@QAEKXZ	; DrawableBSP::GetTextureSet
	mov	DWORD PTR _t$5[ebp], eax

; 3859 : 				if (mpGeometry->GetNTextureSet() != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+696]
	call	?GetNTextureSet@DrawableBSP@@QAEHXZ	; DrawableBSP::GetNTextureSet
	test	eax, eax
	je	SHORT $LN13@GeometryDr

; 3860 : 					mpGeometry->SetTextureSet(t % mpGeometry->GetNTextureSet());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+696]
	call	?GetNTextureSet@DrawableBSP@@QAEHXZ	; DrawableBSP::GetNTextureSet
	mov	ecx, eax
	mov	eax, DWORD PTR _t$5[ebp]
	cdq
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+696]
	call	?SetTextureSet@DrawableBSP@@QAEXK@Z	; DrawableBSP::SetTextureSet

; 3861 : 				else

	jmp	SHORT $LN12@GeometryDr
$LN13@GeometryDr:

; 3862 : 					mpGeometry->SetTextureSet(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	call	?SetTextureSet@DrawableBSP@@QAEXK@Z	; DrawableBSP::SetTextureSet
$LN12@GeometryDr:

; 3863 : 			}
; 3864 : 		}
; 3865 : 
; 3866 : 		if ( !mpActivePanel->DoGeometry() || PlayerOptions.ObjectDetailLevel() < 1.5F) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?DoGeometry@CPPanel@@QAEHXZ		; CPPanel::DoGeometry
	test	eax, eax
	je	SHORT $LN10@GeometryDr
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ObjectDetailLevel@PlayerOptionsClass@@QAEMXZ ; PlayerOptionsClass::ObjectDetailLevel
	fstp	DWORD PTR tv285[ebp]
	movss	xmm0, DWORD PTR __real@3fc00000
	comiss	xmm0, DWORD PTR tv285[ebp]
	jbe	SHORT $LN11@GeometryDr
$LN10@GeometryDr:

; 3867 : 			drawOrdinance = FALSE;

	mov	DWORD PTR _drawOrdinance$[ebp], 0
$LN11@GeometryDr:

; 3868 : 		}
; 3869 : 
; 3870 : 		// MLR 2003-10-05 Commented this out.  Who wants to fly a plane with no wings?
; 3871 : 		// This switch seems to be unused by the 3d pits anyhow. 7 is put to better use
; 3872 : 		// a few lines down from here.
; 3873 : 		// MLR 2003-10-12 Uncommented this out, we'll just work around it later.
; 3874 : 		if ( mpActivePanel->DoGeometry() && PlayerOptions.ObjectDetailLevel() >= 1.0F) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	call	?DoGeometry@CPPanel@@QAEHXZ		; CPPanel::DoGeometry
	test	eax, eax
	je	SHORT $LN9@GeometryDr
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?ObjectDetailLevel@PlayerOptionsClass@@QAEMXZ ; PlayerOptionsClass::ObjectDetailLevel
	fstp	DWORD PTR tv292[ebp]
	movss	xmm0, DWORD PTR tv292[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN9@GeometryDr

; 3875 : 			mpGeometry->SetSwitchMask( 7, 1);

	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 3876 : 		}
; 3877 : 		else {

	jmp	SHORT $LN8@GeometryDr
$LN9@GeometryDr:

; 3878 : 			mpGeometry->SetSwitchMask( 7, 0);

	push	0
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+696]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 3879 : 			drawWing = FALSE;

	mov	DWORD PTR _drawWing$[ebp], 0
$LN8@GeometryDr:

; 3880 : 		}
; 3881 : 
; 3882 : 
; 3883 : 		if ( PlayerOptions.SimVisualCueMode == VCReflection || PlayerOptions.SimVisualCueMode == VCBoth) {

	cmp	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+80, 2
	je	SHORT $LN6@GeometryDr
	cmp	DWORD PTR ?PlayerOptions@@3VPlayerOptionsClass@@A+80, 3
	jne	SHORT $LN7@GeometryDr
$LN6@GeometryDr:

; 3884 : 			mpGeometry->SetSwitchMask( 3, 1);

	push	1
	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+696]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 3885 : 		}
; 3886 : 		else {

	jmp	SHORT $LN5@GeometryDr
$LN7@GeometryDr:

; 3887 : 			mpGeometry->SetSwitchMask( 3, 0);

	push	0
	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 3888 : 			drawReflection = FALSE;

	mov	DWORD PTR _drawReflection$[ebp], 0
$LN5@GeometryDr:

; 3889 : 		}
; 3890 : 
; 3891 : 		if(drawWing || drawReflection) {

	cmp	DWORD PTR _drawWing$[ebp], 0
	jne	SHORT $LN3@GeometryDr
	cmp	DWORD PTR _drawReflection$[ebp], 0
	je	$LN1@GeometryDr
$LN3@GeometryDr:

; 3892 : 
; 3893 : 			// Wombat778 2-24-04 Set the FOV back to 60 for drawing the wings and ordinance.  
; 3894 : 			// Fixes the disembodied wings phenomenon
; 3895 : 			// 2-25-04 Since there are a few very minor side effects, decided to make this optional.  
; 3896 : 			float tempfov;
; 3897 : 			if (g_b2DPitWingFOVFix){

	movzx	ecx, BYTE PTR ?g_b2DPitWingFOVFix@@3_NA	; g_b2DPitWingFOVFix
	test	ecx, ecx
	je	SHORT $LN2@GeometryDr

; 3898 : 				tempfov = OTWDriver.GetFOV();					

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetFOV@OTWDriverClass@@QAEMXZ		; OTWDriverClass::GetFOV
	fstp	DWORD PTR _tempfov$3[ebp]

; 3899 : 				OTWDriver.SetFOV(60.0f*DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetFOV@OTWDriverClass@@QAEXM@Z		; OTWDriverClass::SetFOV
$LN2@GeometryDr:

; 3900 : 			}
; 3901 : 
; 3902 : 			// Force object texture on for this part regardless of player settings
; 3903 : 			BOOL oldState = OTWDriver.renderer->GetObjectTextureState();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetObjectTextureState@Render3D@@QAEHXZ	; Render3D::GetObjectTextureState
	mov	DWORD PTR _oldState$4[ebp], eax

; 3904 : 			OTWDriver.renderer->SetObjectTextureState( TRUE );

	push	1
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetObjectTextureState@Render3D@@QAEXH@Z ; Render3D::SetObjectTextureState

; 3905 : 
; 3906 : 			// Setup the local lighting and transform environment (body relative)
; 3907 : 			OTWDriver.renderer->GetLightDirection( &worldLight );

	lea	edx, DWORD PTR _worldLight$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetLightDirection@Render3D@@QAEXPAUTpoint@@@Z ; Render3D::GetLightDirection

; 3908 : 			MatrixMultTranspose( &(OTWDriver.ownshipRot), &worldLight, &tempLight ); 

	lea	eax, DWORD PTR _tempLight$[ebp]
	push	eax
	lea	ecx, DWORD PTR _worldLight$[ebp]
	push	ecx
	push	OFFSET ?OTWDriver@@3VOTWDriverClass@@A+33580
	call	?MatrixMultTranspose@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMultTranspose
	add	esp, 12					; 0000000cH

; 3909 : 			OTWDriver.renderer->SetLightDirection( &tempLight );

	lea	edx, DWORD PTR _tempLight$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetLightDirection@Render3D@@QAEXPBUTpoint@@@Z ; Render3D::SetLightDirection

; 3910 : 			// COBRA - RED - Pit Vibrations
; 3911 : 			Tpoint	HeadOrigin=Origin;

	mov	eax, DWORD PTR ?Origin@@3UTpoint@@B
	mov	DWORD PTR _HeadOrigin$7[ebp], eax
	mov	ecx, DWORD PTR ?Origin@@3UTpoint@@B+4
	mov	DWORD PTR _HeadOrigin$7[ebp+4], ecx
	mov	edx, DWORD PTR ?Origin@@3UTpoint@@B+8
	mov	DWORD PTR _HeadOrigin$7[ebp+8], edx

; 3912 : 			Tpoint	Turb= pac->GetTurbulence();

	lea	eax, DWORD PTR _Turb$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pac$[ebp]
	call	?GetTurbulence@AircraftClass@@QAE?AUTpoint@@XZ ; AircraftClass::GetTurbulence

; 3913 : 			HeadOrigin.y=Turb.x;

	movss	xmm0, DWORD PTR _Turb$6[ebp]
	movss	DWORD PTR _HeadOrigin$7[ebp+4], xmm0

; 3914 : 			HeadOrigin.z-=Turb.z;

	movss	xmm0, DWORD PTR _HeadOrigin$7[ebp+8]
	subss	xmm0, DWORD PTR _Turb$6[ebp+8]
	movss	DWORD PTR _HeadOrigin$7[ebp+8], xmm0

; 3915 : 
; 3916 : 			OTWDriver.renderer->SetCamera( &HeadOrigin, &(OTWDriver.headMatrix) );

	push	OFFSET ?OTWDriver@@3VOTWDriverClass@@A+33616
	lea	ecx, DWORD PTR _HeadOrigin$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetCamera@Render3D@@QAEXPBUTpoint@@PBUTrotation@@@Z ; Render3D::SetCamera

; 3917 : 			SMSClass		*sms = pac->Sms;

	mov	edx, DWORD PTR _pac$[ebp]
	mov	eax, DWORD PTR [edx+940]
	mov	DWORD PTR _sms$1[ebp], eax

; 3918 : 
; 3919 : 			// COBRA - DX - if using DX Engine, Canopy has to be Oriented
; 3920 : 			mpGeometry->orientation=OTWDriver.ownshipRot;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [ecx+696]
	add	edi, 48					; 00000030H
	mov	ecx, 9
	mov	esi, OFFSET ?OTWDriver@@3VOTWDriverClass@@A+33580
	rep movsd

; 3921 : 			// Draw the cockpit object
; 3922 : 			mpGeometry->Draw( OTWDriver.renderer );

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+696]
	mov	edx, DWORD PTR [eax+16]
	call	edx

; 3923 : 
; 3924 : 			// Put the light back into world space
; 3925 : 			OTWDriver.renderer->SetLightDirection( &worldLight );

	lea	eax, DWORD PTR _worldLight$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetLightDirection@Render3D@@QAEXPBUTpoint@@@Z ; Render3D::SetLightDirection

; 3926 : 
; 3927 : 			// Restore camera
; 3928 : 			OTWDriver.renderer->SetCamera( &(OTWDriver.cameraPos), &(OTWDriver.cameraRot) );

	push	OFFSET ?OTWDriver@@3VOTWDriverClass@@A+33452
	push	OFFSET ?OTWDriver@@3VOTWDriverClass@@A+33440
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetCamera@Render3D@@QAEXPBUTpoint@@PBUTrotation@@@Z ; Render3D::SetCamera

; 3929 : 
; 3930 : 			// Restore the texture settings
; 3931 : 			OTWDriver.renderer->SetObjectTextureState( oldState );

	mov	ecx, DWORD PTR _oldState$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetObjectTextureState@Render3D@@QAEXH@Z ; Render3D::SetObjectTextureState

; 3932 : 
; 3933 : 			// MLR 2003-10-12
; 3934 : 			// I moved all my previous animation code to the AircraftClass, 
; 3935 : 			// it's more readily (more likely) to get updated there as new 
; 3936 : 			// DOFs and Switches are added.
; 3937 : 			//
; 3938 : 			// Also both 2d and 3d pit had the exact same duplicate code.
; 3939 : 			pac->CopyAnimationsToPit(mpGeometry);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	push	eax
	mov	ecx, DWORD PTR _pac$[ebp]
	call	?CopyAnimationsToPit@AircraftClass@@QAEXPAVDrawableBSP@@@Z ; AircraftClass::CopyAnimationsToPit

; 3940 : 
; 3941 : 			//Wombat778 2-25-04 Since there are a few very minor side effects, decided to make this optional.  		
; 3942 : 			if (g_b2DPitWingFOVFix){

	movzx	ecx, BYTE PTR ?g_b2DPitWingFOVFix@@3_NA	; g_b2DPitWingFOVFix
	test	ecx, ecx
	je	SHORT $LN1@GeometryDr

; 3943 : 				OTWDriver.SetFOV(tempfov);		//Wombat778 2-24-04 Set the FOV back to what it was

	push	ecx
	movss	xmm0, DWORD PTR _tempfov$3[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetFOV@OTWDriverClass@@QAEXM@Z		; OTWDriverClass::SetFOV
$LN1@GeometryDr:

; 3944 : 			}
; 3945 : 		}
; 3946 : 
; 3947 : 	}
; 3948 : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GeometryDraw@CockpitManager@@QAEXXZ ENDP		; CockpitManager::GeometryDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayDraw@CockpitManager@@QAEXXZ PROC		; CockpitManager::DisplayDraw
; _this$ = ecx

; 3992 : void CockpitManager::DisplayDraw(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3993 : 
; 3994 : #if DO_HIRESCOCK_HACK
; 3995 : 
; 3996 : 	if(gDoCockpitHack) {

	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	je	SHORT $LN2@DisplayDra

; 3997 : 		return;

	jmp	$LN3@DisplayDra
$LN2@DisplayDra:

; 3998 : 	}
; 3999 : 
; 4000 : 	if(mIsInitialized && mpActivePanel) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+204], 0
	je	$LN1@DisplayDra
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	$LN1@DisplayDra

; 4001 : 		OTWDriver.renderer->StartDraw();

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 4002 : 		OTWDriver.renderer->SetViewport(-1.0F, 1.0F, 1.0F, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 4003 : 		OTWDriver.renderer->CenterOriginInViewport();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 4004 : 		OTWDriver.renderer->ZeroRotationAboutOrigin();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 4005 : 
; 4006 : 		mpActivePanel->DisplayDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	?DisplayDraw@CPPanel@@QAEXXZ		; CPPanel::DisplayDraw

; 4007 : 		OTWDriver.renderer->EndDraw();

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	mov	edx, DWORD PTR [eax+20]
	call	edx
$LN1@DisplayDra:
$LN3@DisplayDra:

; 4008 : 	}
; 4009 : #else
; 4010 : 	if(mIsInitialized && mpActivePanel) {
; 4011 : 		OTWDriver.renderer->StartDraw();
; 4012 : 		OTWDriver.renderer->SetViewport(-1.0F, 1.0F, 1.0F, -1.0F);
; 4013 : 		OTWDriver.renderer->CenterOriginInViewport();
; 4014 : 		OTWDriver.renderer->ZeroRotationAboutOrigin();
; 4015 : 
; 4016 : 		mpActivePanel->DisplayDraw();
; 4017 : 		OTWDriver.renderer->EndDraw();
; 4018 : 	}
; 4019 : #endif
; 4020 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayDraw@CockpitManager@@QAEXXZ ENDP		; CockpitManager::DisplayDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DisplayBlit@CockpitManager@@QAEXXZ PROC		; CockpitManager::DisplayBlit
; _this$ = ecx

; 3955 : void CockpitManager::DisplayBlit(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3956 : #if DO_HIRESCOCK_HACK
; 3957 : 	if(gDoCockpitHack) {

	cmp	DWORD PTR ?gDoCockpitHack@@3HA, 0	; gDoCockpitHack
	je	SHORT $LN2@DisplayBli

; 3958 : 		return;

	jmp	SHORT $LN3@DisplayBli
$LN2@DisplayBli:

; 3959 : 	}
; 3960 : 
; 3961 : 	if(mIsInitialized && mpActivePanel) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+204], 0
	je	SHORT $LN3@DisplayBli
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	je	SHORT $LN3@DisplayBli

; 3962 : 		mpActivePanel->DisplayBlit();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	call	?DisplayBlit@CPPanel@@QAEXXZ		; CPPanel::DisplayBlit
$LN3@DisplayBli:

; 3963 : 	}
; 3964 : #else
; 3965 : 	if(mIsInitialized && mpActivePanel) {
; 3966 : 		mpActivePanel->DisplayBlit();
; 3967 : 	}
; 3968 : #endif
; 3969 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit@CockpitManager@@QAEXXZ ENDP		; CockpitManager::DisplayBlit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Exec@CockpitManager@@QAEXXZ PROC			; CockpitManager::Exec
; _this$ = ecx

; 3783 : void CockpitManager::Exec() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3784 : 
; 3785 : 	mViewChanging = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+656], 0

; 3786 : 
; 3787 : 	if(!mpActivePanel) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 0
	jne	SHORT $LN6@Exec

; 3788 : 		return;

	jmp	$LN7@Exec
$LN6@Exec:

; 3789 : 	}
; 3790 : 
; 3791 : 	if (!mpOwnship) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+720], 0
	jne	SHORT $LN5@Exec

; 3792 : 		return;

	jmp	$LN7@Exec
$LN5@Exec:

; 3793 : 	}
; 3794 : 
; 3795 : 	if(mIsInitialized == FALSE) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+204], 0
	jne	SHORT $LN4@Exec

; 3796 : 		mpActivePanel->Exec(mpOwnship, CYCLE_ALL); //RUN ALL

	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	?Exec@CPPanel@@QAEXPAVSimBaseClass@@H@Z	; CPPanel::Exec

; 3797 : 		mIsInitialized = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], 1

; 3798 : 		mIsNextInitialized = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+208], 1

; 3799 : 	}
; 3800 : 	else {

	jmp	SHORT $LN7@Exec
$LN4@Exec:

; 3801 : 		if(mCycleBit == END_CYCLE) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+228], 32768		; 00008000H
	jne	SHORT $LN2@Exec

; 3802 : 			mCycleBit = BEGIN_CYCLE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], 1

; 3803 : 		}
; 3804 : 		else {

	jmp	SHORT $LN1@Exec
$LN2@Exec:

; 3805 : 			mCycleBit = mCycleBit << 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+228], eax
$LN1@Exec:

; 3806 : 		}
; 3807 : 		mpActivePanel->Exec(mpOwnship, mCycleBit);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	?Exec@CPPanel@@QAEXPAVSimBaseClass@@H@Z	; CPPanel::Exec
$LN7@Exec:

; 3808 : 	}
; 3809 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Exec@CockpitManager@@QAEXXZ ENDP			; CockpitManager::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -1924					; size = 4
_presult$ = -1920					; size = 4
$T2 = -1916						; size = 4
$T3 = -1912						; size = 4
tv594 = -1908						; size = 4
$T4 = -1904						; size = 4
$T5 = -1900						; size = 4
tv494 = -1896						; size = 4
$T6 = -1892						; size = 4
tv240 = -1888						; size = 4
$T7 = -1884						; size = 4
$T8 = -1880						; size = 4
$T9 = -1876						; size = 4
tv232 = -1872						; size = 4
$T10 = -1868						; size = 4
tv248 = -1864						; size = 4
tv326 = -1860						; size = 4
$T11 = -1856						; size = 4
_quitFlag$ = -1852					; size = 4
_i$12 = -1848						; size = 4
_i$13 = -1844						; size = 4
_idNum$ = -1840						; size = 4
_pcockpitDataFile$ = -1836				; size = 4
_this$ = -1832						; size = 4
_buf$14 = -1828						; size = 1024
_strCPFile$ = -804					; size = 260
_plineBuffer$ = -544					; size = 512
_ptype$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pOTWImage$ = 8						; size = 4
_pCPFile$ = 12						; size = 4
_mainCockpit$ = 16					; size = 4
_hScale$ = 20						; size = 4
_vScale$ = 24						; size = 4
_doHack$ = 28						; size = 4
_eCPVisType$ = 32					; size = 4
_eCPName$ = 36						; size = 4
_eCPNameNCTR$ = 40					; size = 4
??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z PROC ; CockpitManager::CockpitManager
; _this$ = ecx

; 315  : ){		

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1912				; 00000778H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::vector<CPSurface *,std::allocator<CPSurface *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::vector<CPPanel *,std::allocator<CPPanel *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::vector<CPObject *,std::allocator<CPObject *> >::vector<CPObject *,std::allocator<CPObject *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::vector<CPCursor *,std::allocator<CPCursor *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??0?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::vector<CPButtonObject *,std::allocator<CPButtonObject *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::vector<CPButtonView *,std::allocator<CPButtonView *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	??0CPMisc@@QAE@XZ			; CPMisc::CPMisc

; 316  : 	//Wombat778 10-06-2003 Changes scale from int to float
; 317  : 
; 318  : 	CP_HANDLE*			pcockpitDataFile;
; 319  : 	const int			lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 320  : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 321  : 	char*				presult;
; 322  : 	BOOL				quitFlag  = FALSE;

	mov	DWORD PTR _quitFlag$[ebp], 0

; 323  : 	int					idNum;
; 324  : 	char				ptype[16] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptype$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptype$[ebp+1], eax
	mov	DWORD PTR _ptype$[ebp+5], eax
	mov	DWORD PTR _ptype$[ebp+9], eax
	mov	WORD PTR _ptype$[ebp+13], ax
	mov	BYTE PTR _ptype$[ebp+15], al

; 325  : 
; 326  : #if DO_HIRESCOCK_HACK
; 327  : 	gDoCockpitHack = doHack;

	mov	ecx, DWORD PTR _doHack$[ebp]
	mov	DWORD PTR ?gDoCockpitHack@@3HA, ecx	; gDoCockpitHack

; 328  : 	m_eCPVisType = eCPVisType;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _eCPVisType$[ebp]
	mov	DWORD PTR [edx+180], eax

; 329  : 	if (eCPName)

	cmp	DWORD PTR _eCPName$[ebp], 0
	je	$LN70@CockpitMan

; 330  : 	{
; 331  : 		strcpy(m_eCPName, eCPName);

	mov	ecx, DWORD PTR _eCPName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	call	_strcpy
	add	esp, 8

; 332  : 
; 333  : 		for (int i = 0; i < (int)strlen(m_eCPName); i++)

	mov	DWORD PTR _i$12[ebp], 0
	jmp	SHORT $LN72@CockpitMan
$LN71@CockpitMan:
	mov	eax, DWORD PTR _i$12[ebp]
	add	eax, 1
	mov	DWORD PTR _i$12[ebp], eax
$LN72@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _i$12[ebp], eax
	jge	$LN70@CockpitMan

; 334  : 		{
; 335  : 			if (m_eCPName[i] == '/' || m_eCPName[i] == '\\')

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$12[ebp]
	movsx	eax, BYTE PTR [edx+184]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN68@CockpitMan
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$12[ebp]
	movsx	edx, BYTE PTR [ecx+184]
	cmp	edx, 92					; 0000005cH
	jne	SHORT $LN66@CockpitMan
$LN68@CockpitMan:

; 336  : 			{
; 337  : 				if (i < (int)strlen(m_eCPName) - 1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 1
	cmp	DWORD PTR _i$12[ebp], eax
	jge	SHORT $LN67@CockpitMan

; 338  : 				{
; 339  : 					strcpy(m_eCPName + i, m_eCPName + i + 1);

	mov	ecx, DWORD PTR _i$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+185]
	push	eax
	mov	ecx, DWORD PTR _i$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+184]
	push	eax
	call	_strcpy
	add	esp, 8

; 340  : 					i--;

	mov	ecx, DWORD PTR _i$12[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$12[ebp], ecx

; 341  : 				}
; 342  : 				else

	jmp	SHORT $LN66@CockpitMan
$LN67@CockpitMan:

; 343  : 					m_eCPName[i] = 0;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$12[ebp]
	mov	BYTE PTR [edx+184], 0
$LN66@CockpitMan:

; 344  : 			}
; 345  : 		}

	jmp	$LN71@CockpitMan
$LN70@CockpitMan:

; 346  : 	}
; 347  : 
; 348  : 	if (eCPNameNCTR)

	cmp	DWORD PTR _eCPNameNCTR$[ebp], 0
	je	$LN62@CockpitMan

; 349  : 	{
; 350  : 		strcpy(m_eCPNameNCTR, eCPNameNCTR);

	mov	eax, DWORD PTR _eCPNameNCTR$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 199				; 000000c7H
	push	ecx
	call	_strcpy
	add	esp, 8

; 351  : 
; 352  : 		for (int i = 0; i < (int)strlen(m_eCPNameNCTR); i++)

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN64@CockpitMan
$LN63@CockpitMan:
	mov	edx, DWORD PTR _i$13[ebp]
	add	edx, 1
	mov	DWORD PTR _i$13[ebp], edx
$LN64@CockpitMan:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 199				; 000000c7H
	push	eax
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _i$13[ebp], eax
	jge	$LN62@CockpitMan

; 353  : 		{
; 354  : 			if (m_eCPNameNCTR[i] == '/' || m_eCPNameNCTR[i] == '\\')

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$13[ebp]
	movsx	edx, BYTE PTR [ecx+199]
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN60@CockpitMan
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$13[ebp]
	movsx	ecx, BYTE PTR [eax+199]
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN58@CockpitMan
$LN60@CockpitMan:

; 355  : 			{
; 356  : 				if (i < (int)strlen(m_eCPNameNCTR) - 1)

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 199				; 000000c7H
	push	edx
	call	_strlen
	add	esp, 4
	sub	eax, 1
	cmp	DWORD PTR _i$13[ebp], eax
	jge	SHORT $LN59@CockpitMan

; 357  : 				{
; 358  : 					strcpy(m_eCPName + i, m_eCPName + i + 1);

	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+185]
	push	edx
	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+184]
	push	edx
	call	_strcpy
	add	esp, 8

; 359  : 					i--;

	mov	eax, DWORD PTR _i$13[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$13[ebp], eax

; 360  : 				}
; 361  : 				else

	jmp	SHORT $LN58@CockpitMan
$LN59@CockpitMan:

; 362  : 					m_eCPNameNCTR[i] = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$13[ebp]
	mov	BYTE PTR [ecx+199], 0
$LN58@CockpitMan:

; 363  : 			}
; 364  : 		}

	jmp	$LN63@CockpitMan
$LN62@CockpitMan:

; 365  : 	}
; 366  : #endif
; 367  : 
; 368  : 	mpOTWImage			= pOTWImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pOTWImage$[ebp]
	mov	DWORD PTR [edx+716], eax

; 369  : 	mpOwnship			= NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+720], 0

; 370  : 
; 371  : 	mpSoundList			= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+652], 0

; 372  : 
; 373  : 	ADIGpDevReading	= -HORIZONTAL_SCALE;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@be32b8c1
	movss	DWORD PTR [eax+704], xmm0

; 374  : 	ADIGsDevReading	= -VERTICAL_SCALE;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bd0efa34
	movss	DWORD PTR [ecx+708], xmm0

; 375  : 	mHiddenFlag			= FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+712], 0

; 376  : 
; 377  : 	mHScale				= hScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hScale$[ebp]
	movss	DWORD PTR [eax+248], xmm0

; 378  : 	mVScale				= vScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vScale$[ebp]
	movss	DWORD PTR [ecx+252], xmm0

; 379  : 
; 380  : 	if(mainCockpit) {

	cmp	DWORD PTR _mainCockpit$[ebp], 0
	je	$LN57@CockpitMan

; 381  : 		mpIcp				= new ICPClass;

	push	1676					; 0000068cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN76@CockpitMan
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0ICPClass@@QAE@XZ			; ICPClass::ICPClass
	mov	DWORD PTR tv232[ebp], eax
	jmp	SHORT $LN77@CockpitMan
$LN76@CockpitMan:
	mov	DWORD PTR tv232[ebp], 0
$LN77@CockpitMan:
	mov	edx, DWORD PTR tv232[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+688], ecx

; 382  : 		mpHsi				= new CPHsi;

	push	92					; 0000005cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN78@CockpitMan
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0CPHsi@@QAE@XZ			; CPHsi::CPHsi
	mov	DWORD PTR tv240[ebp], eax
	jmp	SHORT $LN79@CockpitMan
$LN78@CockpitMan:
	mov	DWORD PTR tv240[ebp], 0
$LN79@CockpitMan:
	mov	edx, DWORD PTR tv240[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+692], ecx

; 383  : 		mpKneeBoard		= new KneeBoard;

	push	448					; 000001c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN80@CockpitMan
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0KneeBoard@@QAE@XZ			; KneeBoard::KneeBoard
	mov	DWORD PTR tv248[ebp], eax
	jmp	SHORT $LN81@CockpitMan
$LN80@CockpitMan:
	mov	DWORD PTR tv248[ebp], 0
$LN81@CockpitMan:
	mov	edx, DWORD PTR tv248[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+700], ecx

; 384  : 	}
; 385  : 	else {

	jmp	SHORT $LN56@CockpitMan
$LN57@CockpitMan:

; 386  : 		mpIcp				= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+688], 0

; 387  : 		mpHsi				= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+692], 0

; 388  : 		mpKneeBoard		= NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+700], 0
$LN56@CockpitMan:

; 389  : 	}
; 390  : 
; 391  : 	mSurfaceTally		= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 392  : 	mPanelTally			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 393  : 	mObjectTally		= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 394  : 	mButtonTally		= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0

; 395  : 	mCursorTally		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 396  : 	mButtonViewTally	= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 397  : 	mNumSurfaces      = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0

; 398  : 	mNumPanels        = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 399  : 	mNumObjects       = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 400  : 	mNumCursors       = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0

; 401  : 	mNumButtons       = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 402  : 	mNumButtonViews   = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 403  : 
; 404  : 	lightLevel			= 1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+280], xmm0

; 405  : 	//sfr: added flood and instrumentation lights
; 406  : 	mFloodLight[0]		= 0.35F;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [ecx+eax+256], xmm0

; 407  : 	mFloodLight[1]		= 0.15F;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [eax+edx+256], xmm0

; 408  : 	mFloodLight[2]		= 0.15F;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [edx+ecx+256], xmm0

; 409  : 	mInstLight[0]		= 1.0F;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax+268], xmm0

; 410  : 	mInstLight[1]		= 0.15F;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [eax+edx+268], xmm0

; 411  : 	mInstLight[2]		= 0.15F;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [edx+ecx+268], xmm0

; 412  : 
; 413  : 	mCycleBit			= BEGIN_CYCLE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 1

; 414  : 	mIsInitialized		= FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], 0

; 415  : 	mIsNextInitialized	= FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+208], 0

; 416  : 	mpGeometry			= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+696], 0

; 417  : 	mHudFont           = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 0

; 418  : 	mMFDFont           = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], 0

; 419  : 	mDEDFont				 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 420  : 	mGeneralFont		 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 0

; 421  : 	mPopUpFont			 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0

; 422  : 	mKneeFont			 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 423  : 	mSABoxFont			 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 0

; 424  : 	mLabelFont         = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 425  : 	mAltPanel			= 0;		//Wombat778 4-12-04

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0

; 426  : 	memset(&PitTurbulence, 0x00, sizeof(PitTurbulence));

	push	12					; 0000000cH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 728				; 000002d8H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 427  : 
; 428  : 
; 429  : 	char strCPFile[MAX_PATH];
; 430  : 
; 431  : 	// RV - Biker - Use fallback
; 432  : 	//m_eCPVisType = (Vis_Types)FindCockpit(pCPFile, eCPVisType, eCPName, eCPNameNCTR, strCPFile);
; 433  : 	m_eCPVisType = (Vis_Types)FindCockpit(pCPFile, eCPVisType, eCPName, eCPNameNCTR, strCPFile, TRUE);

	push	1
	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _eCPNameNCTR$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCPName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eCPVisType$[ebp]
	push	edx
	mov	eax, DWORD PTR _pCPFile$[ebp]
	push	eax
	call	?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z ; FindCockpit
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 434  : 
; 435  : 	pCPFile = strCPFile;

	lea	edx, DWORD PTR _strCPFile$[ebp]
	mov	DWORD PTR _pCPFile$[ebp], edx

; 436  : 
; 437  : 	pcockpitDataFile = CP_OPEN(pCPFile, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	mov	eax, DWORD PTR _pCPFile$[ebp]
	push	eax
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _pcockpitDataFile$[ebp], eax

; 438  : 
; 439  : 	if (!pcockpitDataFile)

	cmp	DWORD PTR _pcockpitDataFile$[ebp], 0
	jne	SHORT $LN55@CockpitMan

; 440  : 	{
; 441  : 		if (mainCockpit)

	cmp	DWORD PTR _mainCockpit$[ebp], 0
	je	SHORT $LN54@CockpitMan

; 442  : 		{
; 443  : 			// Try to use the 8x6 and doHack instead
; 444  : 			pcockpitDataFile = CP_OPEN (COCKPIT_FILE_8x6, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_0M@HDJBMLCH@8_ckpit?4dat?$AA@
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _pcockpitDataFile$[ebp], eax

; 445  : 		}
; 446  : 		else

	jmp	SHORT $LN53@CockpitMan
$LN54@CockpitMan:

; 447  : 		{
; 448  : 			pcockpitDataFile = CP_OPEN (PADLOCK_FILE_8x6, "r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	push	OFFSET ??_C@_0M@CIACFAIC@8_plock?4dat?$AA@
	call	_ResFOpen
	add	esp, 8
	mov	DWORD PTR _pcockpitDataFile$[ebp], eax
$LN53@CockpitMan:

; 449  : 		}
; 450  : 		gDoCockpitHack = TRUE;

	mov	DWORD PTR ?gDoCockpitHack@@3HA, 1	; gDoCockpitHack
$LN55@CockpitMan:

; 451  : 	}
; 452  : 	F4Assert(pcockpitDataFile);			//Error: Couldn't open file
; 453  : 	gDebugLineNum = 0;

	mov	DWORD PTR _gDebugLineNum, 0

; 454  : 
; 455  : 	// Load Buffer creation for DEMO release
; 456  : 	mpLoadBuffer = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 0
$LN52@CockpitMan:

; 457  : 
; 458  : 	while(!quitFlag) {

	cmp	DWORD PTR _quitFlag$[ebp], 0
	jne	$LN51@CockpitMan

; 459  : 		presult	= fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _presult$[ebp], eax

; 460  : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 461  : 		quitFlag	= (presult == NULL);

	cmp	DWORD PTR _presult$[ebp], 0
	jne	SHORT $LN82@CockpitMan
	mov	DWORD PTR tv326[ebp], 1
	jmp	SHORT $LN83@CockpitMan
$LN82@CockpitMan:
	mov	DWORD PTR tv326[ebp], 0
$LN83@CockpitMan:
	mov	edx, DWORD PTR tv326[ebp]
	mov	DWORD PTR _quitFlag$[ebp], edx

; 462  : 
; 463  : 		if((*plineBuffer == '#') && (!quitFlag)) {

	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _plineBuffer$[ebp+eax]
	cmp	ecx, 35					; 00000023H
	jne	$LN9@CockpitMan
	cmp	DWORD PTR _quitFlag$[ebp], 0
	jne	$LN9@CockpitMan

; 464  : 			sscanf((plineBuffer + 1), "%d %s", &idNum, ptype);

	lea	edx, DWORD PTR _ptype$[ebp]
	push	edx
	lea	eax, DWORD PTR _idNum$[ebp]
	push	eax
	push	OFFSET ??_C@_05OPEIBKFE@?$CFd?5?$CFs?$AA@
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_sscanf
	add	esp, 16					; 00000010H

; 465  : 
; 466  : 			if (!strcmpi(ptype, TYPE_MANAGER_STR)) {

	push	OFFSET ??_C@_07GCOHIDPL@MANAGER?$AA@
	lea	edx, DWORD PTR _ptype$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN49@CockpitMan

; 467  : 				ParseManagerInfo(pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z ; CockpitManager::ParseManagerInfo
	jmp	$LN9@CockpitMan
$LN49@CockpitMan:

; 468  : 			}
; 469  : 			else if (!strcmpi(ptype, TYPE_TEXT_STR)) {

	push	OFFSET ??_C@_04OEPMCOLO@TEXT?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN47@CockpitMan

; 470  : 				CreateText(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateText
	jmp	$LN9@CockpitMan
$LN47@CockpitMan:

; 471  : 			}
; 472  : 			else if (!strcmpi(ptype, TYPE_CHEVRON_STR)) {

	push	OFFSET ??_C@_07NGNFBAGN@CHEVRON?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN45@CockpitMan

; 473  : 				CreateChevron(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateChevron
	jmp	$LN9@CockpitMan
$LN45@CockpitMan:

; 474  : 			}
; 475  : 			else if (!strcmpi(ptype, TYPE_LIFTLINE_STR)) {

	push	OFFSET ??_C@_08CLFDHBFD@LIFTLINE?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN43@CockpitMan

; 476  : 				CreateLiftLine(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateLiftLine
	jmp	$LN9@CockpitMan
$LN43@CockpitMan:

; 477  : 			}
; 478  : 			else if (!strcmpi(ptype, TYPE_SURFACE_STR)) {

	push	OFFSET ??_C@_07HKBGKBDH@SURFACE?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@CockpitMan

; 479  : 				CreateSurface(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateSurface
	jmp	$LN9@CockpitMan
$LN41@CockpitMan:

; 480  : 			}
; 481  : 			else if (!strcmpi(ptype, TYPE_PANEL_STR)) {

	push	OFFSET ??_C@_05HGHGEHHO@PANEL?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@CockpitMan

; 482  : 				CreatePanel(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreatePanel
	jmp	$LN9@CockpitMan
$LN39@CockpitMan:

; 483  : 			}
; 484  : 			else if (!strcmpi(ptype, TYPE_LIGHT_STR)) {

	push	OFFSET ??_C@_05MFNJIKNP@LIGHT?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@CockpitMan

; 485  : 				CreateLight(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateLight
	jmp	$LN9@CockpitMan
$LN37@CockpitMan:

; 486  : 			}
; 487  : 			else if (!strcmpi(ptype, TYPE_BUTTON_STR)) {

	push	OFFSET ??_C@_06HBIEIEBN@BUTTON?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@CockpitMan

; 488  : 				CreateButton(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateButton
	jmp	$LN9@CockpitMan
$LN35@CockpitMan:

; 489  : 			}
; 490  : 			else if (!strcmpi(ptype, TYPE_BUTTONVIEW_STR)) {

	push	OFFSET ??_C@_0L@OOEGIJJP@BUTTONVIEW?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@CockpitMan

; 491  : 				CreateButtonView(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateButtonView
	jmp	$LN9@CockpitMan
$LN33@CockpitMan:

; 492  : 			}
; 493  : 			else if (!strcmpi(ptype, TYPE_INDICATOR_STR)) {

	push	OFFSET ??_C@_09EPLFPLCO@INDICATOR?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@CockpitMan

; 494  : 				CreateIndicator(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateIndicator
	jmp	$LN9@CockpitMan
$LN31@CockpitMan:

; 495  : 			}
; 496  : 			else if (!strcmpi(ptype, TYPE_DIGITS_STR)) {

	push	OFFSET ??_C@_06MGMDBFK@DIGITS?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@CockpitMan

; 497  : 				CreateDigits(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateDigits
	jmp	$LN9@CockpitMan
$LN29@CockpitMan:

; 498  : 			}
; 499  : 			else if (!strcmpi(ptype, TYPE_ADI_STR)) {

	push	OFFSET ??_C@_03KLDLMOOL@ADI?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@CockpitMan

; 500  : 				CreateAdi(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateAdi
	jmp	$LN9@CockpitMan
$LN27@CockpitMan:

; 501  : 			}
; 502  : 			else if (!strcmpi(ptype, TYPE_DIAL_STR)) {

	push	OFFSET ??_C@_04FPCGAGCC@DIAL?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@CockpitMan

; 503  : 				CreateDial(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateDial
	jmp	$LN9@CockpitMan
$LN25@CockpitMan:

; 504  : 			}
; 505  : 			else if (!strcmpi(ptype, TYPE_CURSOR_STR)) {

	push	OFFSET ??_C@_06CDBDBPON@CURSOR?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@CockpitMan

; 506  : 				CreateCursor(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateCursor
	jmp	$LN9@CockpitMan
$LN23@CockpitMan:

; 507  : 			}
; 508  : 			else if (!strcmpi(ptype, TYPE_DED_STR)) {

	push	OFFSET ??_C@_03CIIJCKKD@DED?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CockpitMan

; 509  : 				CreateDed(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateDed
	jmp	$LN9@CockpitMan
$LN21@CockpitMan:

; 510  : 			}
; 511  : 			else if (!strcmpi(ptype, TYPE_MACHASI_STR)) {

	push	OFFSET ??_C@_07EHJPLJNA@MACHASI?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CockpitMan

; 512  : 				CreateMachAsi(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateMachAsi
	jmp	$LN9@CockpitMan
$LN19@CockpitMan:

; 513  : 			}
; 514  : 			else if (!strcmpi(ptype, TYPE_HSI_STR)) {

	push	OFFSET ??_C@_03MPFKDEJE@HSI?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@CockpitMan

; 515  : 				CreateHsiView(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateHsiView
	jmp	$LN9@CockpitMan
$LN17@CockpitMan:

; 516  : 			}
; 517  : 			else if (!strcmpi(ptype, TYPE_SOUND_STR)) {

	push	OFFSET ??_C@_05MEGDOMG@SOUND?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CockpitMan

; 518  : 				CreateSound(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateSound@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateSound
	jmp	$LN9@CockpitMan
$LN15@CockpitMan:

; 519  : 			}
; 520  : 			else if (!strcmpi(ptype, TYPE_KNEEVIEW_STR)) {

	push	OFFSET ??_C@_08OCGEMODB@KNEEVIEW?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CockpitMan

; 521  : 				CreateKneeView(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateKneeView
	jmp	SHORT $LN9@CockpitMan
$LN13@CockpitMan:

; 522  : 			}
; 523  : 			else if (!strcmpi(ptype, TYPE_MIRROR_STR)){

	push	OFFSET ??_C@_06LPIEMBDF@MIRROR?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@CockpitMan

; 524  : 				CreateMirror(idNum, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _idNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z ; CockpitManager::CreateMirror
	jmp	SHORT $LN9@CockpitMan
$LN11@CockpitMan:

; 525  : 			}
; 526  : 			else if (!strcmpi(ptype, TYPE_BUFFER_STR)) {

	push	OFFSET ??_C@_06HKFEAHGA@BUFFER?$AA@
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CockpitMan

; 527  : 				LoadBuffer(pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z ; CockpitManager::LoadBuffer
$LN9@CockpitMan:

; 528  : 			}
; 529  : 			else {
; 530  : 				CockpitMessage(ptype, "Top Level", gDebugLineNum);
; 531  : 			}
; 532  : 		}
; 533  : 	}

	jmp	$LN52@CockpitMan
$LN51@CockpitMan:

; 534  : 
; 535  : 	CP_CLOSE(pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	call	_ResFClose
	add	esp, 4

; 536  : 
; 537  : 	glReleaseMemory((char*) mpLoadBuffer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 538  : 	mpLoadBuffer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], 0

; 539  : 
; 540  : 	ResolveReferences();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResolveReferences@CockpitManager@@AAEXXZ ; CockpitManager::ResolveReferences

; 541  : 
; 542  : 	if(mpSoundList) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+652], 0
	je	SHORT $LN85@CockpitMan

; 543  : 		delete mpSoundList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+652]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN84@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T9[ebp]
	call	??_GCPSoundList@@QAEPAXI@Z
	mov	DWORD PTR tv494[ebp], eax
	jmp	SHORT $LN85@CockpitMan
$LN84@CockpitMan:
	mov	DWORD PTR tv494[ebp], 0
$LN85@CockpitMan:

; 544  : 	}
; 545  : 
; 546  : 	mpActivePanel		= NULL;	// first panel in list

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0

; 547  : 	mpNextActivePanel	= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+176], 0

; 548  : 	mViewChanging		= TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+656], 1

; 549  : 
; 550  : 	// Initialize the lighting conditions and register for future time of day updates
; 551  : 	TimeUpdateCallback( this );

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?TimeUpdateCallback@CockpitManager@@CAXPAX@Z ; CockpitManager::TimeUpdateCallback
	add	esp, 4

; 552  : 	TheTimeManager.RegisterTimeUpdateCB( TimeUpdateCallback, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?TimeUpdateCallback@CockpitManager@@CAXPAX@Z ; CockpitManager::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?RegisterTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::RegisterTimeUpdateCB

; 553  : 
; 554  : 	mpCockpitCritSec = F4CreateCriticalSection("mpCockpitCritSec");

	push	OFFSET ??_C@_0BB@DLLMHPOI@mpCockpitCritSec?$AA@
	call	_F4CreateCriticalSection
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+660], eax

; 555  : 
; 556  : 	if(g_bEnableCockpitVerifier)

	movzx	edx, BYTE PTR ?g_bEnableCockpitVerifier@@3_NA ; g_bEnableCockpitVerifier
	test	edx, edx
	je	$LN3@CockpitMan

; 557  : 	{
; 558  : 		if(mSurfaceTally != mNumSurfaces ||
; 559  : 				mObjectTally != mNumObjects ||
; 560  : 				mPanelTally != mNumPanels ||
; 561  : 				mButtonTally != mNumButtons ||
; 562  : 				mButtonViewTally != mNumButtonViews)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+40]
	jne	SHORT $LN4@CockpitMan
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN4@CockpitMan
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN4@CockpitMan
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+56]
	jne	SHORT $LN4@CockpitMan
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+60]
	je	$LN5@CockpitMan
$LN4@CockpitMan:

; 563  : 		{
; 564  : 			char buf[0x400];
; 565  : 			sprintf(buf, "Verify error detected!\n\nNumSurfaces:\t%.3d\t\tSurfaceTally:\t%.3d\nNumObjects:\t%.3d\t\tObjectTally:\t%.3d\nNumPanels:\t%.3d\t\tPanelTally:\t%.3d\nNumButtons:\t%.3d\t\tButtonTally:\t%.3d\nNumButtonViews:\t%.3d\t\tButtonViewTally:\t%.3d\t\n",
; 566  : 					mNumSurfaces, mSurfaceTally, mNumObjects, mObjectTally, mNumPanels, mPanelTally, mNumButtons, mButtonTally, mNumButtonViews, mButtonViewTally);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	OFFSET ??_C@_0NG@IJGPFJLB@Verify?5error?5detected?$CB?6?6NumSurfa@
	lea	edx, DWORD PTR _buf$14[ebp]
	push	edx
	call	_sprintf
	add	esp, 48					; 00000030H

; 567  : 			::MessageBox(NULL, buf, "Falcon 4.0 Cockpit Verifier", MB_OK | MB_SETFOREGROUND);

	push	65536					; 00010000H
	push	OFFSET ??_C@_0BM@HICFCKNL@Falcon?54?40?5Cockpit?5Verifier?$AA@
	lea	eax, DWORD PTR _buf$14[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	jmp	SHORT $LN3@CockpitMan
$LN5@CockpitMan:

; 568  : 		}
; 569  : 
; 570  : 		else ::MessageBox(NULL, "No errors.", "Falcon 4.0 Cockpit Verifier", MB_OK | MB_SETFOREGROUND);

	push	65536					; 00010000H
	push	OFFSET ??_C@_0BM@HICFCKNL@Falcon?54?40?5Cockpit?5Verifier?$AA@
	push	OFFSET ??_C@_0L@JAKJDFBN@No?5errors?4?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
$LN3@CockpitMan:

; 571  : 	}
; 572  : 
; 573  : 	//Wombat778 10-18-2003 Hack for 1.25 resolutions 
; 574  : 	//setup a black imagebuffer the width of the screen
; 575  : 	//Only do this when not rendering
; 576  : 	/*
; 577  : 	if (!DisplayOptions.bRender2DCockpit && g_bCockpitAutoScale && g_bRatioHack && ((float) DisplayOptions.DispWidth / (float) DisplayOptions.DispHeight) == 1.25)		//Wombat778 11-04-2003 added g_bRatiohack in case user has an actual 1280x1024 pit 10-24-2003 added g_bCockpitAutoScale	//so we are in a 1.25 ratio
; 578  : 	{
; 579  : 		RatioBuffer = new ImageBuffer;
; 580  : 		RatioBuffer->Setup(&FalconDisplay.theDisplayDevice,DisplayOptions.DispWidth,FloatToInt32((DisplayOptions.DispHeight-(float)DisplayOptions.DispHeight*0.9375f)+0.5f),SystemMem,None,FALSE);  //Wombat778 10-06 2003 Setup a new imagebuffer.  Should begin as black  //Wombat778 10-24-2003 make the calc the same as later for rounding accuracy
; 581  : 		RatioBuffer->Clear(0x00000000);
; 582  : 	}*/	
; 583  : 
; 584  : 	//Wombat778 3-30-04 get rid of the template buffers if we dont need them anymore
; 585  : 	if (DisplayOptions.bRender2DCockpit)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	SHORT $LN1@CockpitMan

; 586  : 	{
; 587  : 		if(gpTemplateSurface) 

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	je	SHORT $LN1@CockpitMan

; 588  : 		{
; 589  : 			gpTemplateSurface->Cleanup();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 590  : 			delete gpTemplateSurface;	

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN86@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv594[ebp], eax
	jmp	SHORT $LN87@CockpitMan
$LN86@CockpitMan:
	mov	DWORD PTR tv594[ebp], 0
$LN87@CockpitMan:

; 591  : 			gpTemplateSurface = NULL;

	mov	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface

; 592  : 
; 593  : 			glReleaseMemory((char*) gpTemplateImage);

	mov	ecx, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 594  : 			gpTemplateImage = NULL;	

	mov	DWORD PTR ?gpTemplateImage@@3PAEA, 0	; gpTemplateImage
$LN1@CockpitMan:

; 595  : 		}
; 596  : 	}
; 597  : 
; 598  : 
; 599  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	jmp	??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::~vector<CPSurface *,std::allocator<CPSurface *> >
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::~vector<CPPanel *,std::allocator<CPPanel *> >
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::vector<CPObject *,std::allocator<CPObject *> >::~vector<CPObject *,std::allocator<CPObject *> >
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	jmp	??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::~vector<CPCursor *,std::allocator<CPCursor *> >
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::~vector<CPButtonObject *,std::allocator<CPButtonObject *> >
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::~vector<CPButtonView *,std::allocator<CPButtonView *> >
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$6:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$7:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z$8:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1916]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CockpitManager@@QAE@PAVImageBuffer@@PADHMMHW4Vis_Types@@11@Z ENDP ; CockpitManager::CockpitManager
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv305 = -172						; size = 4
$T2 = -168						; size = 4
$T3 = -164						; size = 4
tv191 = -160						; size = 4
$T4 = -156						; size = 4
tv87 = -152						; size = 4
tv276 = -148						; size = 4
_o$5 = -144						; size = 4
$T6 = -140						; size = 4
$T7 = -136						; size = 4
$T8 = -132						; size = 4
$T9 = -128						; size = 4
tv260 = -124						; size = 4
$T10 = -120						; size = 4
$T11 = -116						; size = 4
tv168 = -112						; size = 4
$T12 = -108						; size = 4
tv145 = -104						; size = 4
tv233 = -100						; size = 4
$T13 = -96						; size = 4
$T14 = -92						; size = 4
tv212 = -88						; size = 4
$T15 = -84						; size = 4
$T16 = -80						; size = 4
$T17 = -76						; size = 4
$T18 = -72						; size = 4
$T19 = -68						; size = 4
$T20 = -64						; size = 4
$T21 = -60						; size = 4
$T22 = -56						; size = 4
$T23 = -52						; size = 4
$T24 = -48						; size = 4
_i$25 = -44						; size = 4
_i$26 = -40						; size = 4
_i$27 = -36						; size = 4
_i$28 = -32						; size = 4
_i$29 = -28						; size = 4
_i$30 = -24						; size = 4
_i$31 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CockpitManager@@QAE@XZ PROC				; CockpitManager::~CockpitManager
; _this$ = ecx

; 606  : CockpitManager::~CockpitManager(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CockpitManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 607  : 	// Stop receiving time updates
; 608  : 	TheTimeManager.ReleaseTimeUpdateCB( TimeUpdateCallback, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?TimeUpdateCallback@CockpitManager@@CAXPAX@Z ; CockpitManager::TimeUpdateCallback
	mov	ecx, OFFSET ?TheTimeManager@@3VTimeManager@@A ; TheTimeManager
	call	?ReleaseTimeUpdateCB@TimeManager@@QAEXP6AXPAX@Z0@Z ; TimeManager::ReleaseTimeUpdateCB

; 609  : 
; 610  : 	if(gpTemplateSurface) {

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	je	SHORT $LN35@CockpitMan

; 611  : 		gpTemplateSurface->Cleanup();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 612  : 		delete gpTemplateSurface;	

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR $T13[ebp], ecx
	mov	edx, DWORD PTR $T13[ebp]
	mov	DWORD PTR $T24[ebp], edx
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN38@CockpitMan
	push	1
	mov	eax, DWORD PTR $T24[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T24[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN39@CockpitMan
$LN38@CockpitMan:
	mov	DWORD PTR tv87[ebp], 0
$LN39@CockpitMan:

; 613  : 		gpTemplateSurface = NULL;

	mov	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface

; 614  : 
; 615  : 		glReleaseMemory((char*) gpTemplateImage);

	mov	ecx, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	ecx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 616  : 		gpTemplateImage = NULL;		

	mov	DWORD PTR ?gpTemplateImage@@3PAEA, 0	; gpTemplateImage
$LN35@CockpitMan:

; 617  : 	}
; 618  : 	//Wombat778 3-30-04 Broke the palette out of above
; 619  : 
; 620  : 	if (gpTemplatePalette)

	cmp	DWORD PTR ?gpTemplatePalette@@3PAKA, 0	; gpTemplatePalette
	je	SHORT $LN34@CockpitMan

; 621  : 	{
; 622  : 		glReleaseMemory((char*) gpTemplatePalette);

	mov	edx, DWORD PTR ?gpTemplatePalette@@3PAKA ; gpTemplatePalette
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4

; 623  : 		gpTemplatePalette = NULL;

	mov	DWORD PTR ?gpTemplatePalette@@3PAKA, 0	; gpTemplatePalette
$LN34@CockpitMan:

; 624  : 	}
; 625  : 	//Wombat778 3-30-04 get rid of the templateinfo class
; 626  : 	if (TemplateInfo){

	cmp	DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A, 0 ; TemplateInfo
	je	SHORT $LN33@CockpitMan

; 627  : 		delete TemplateInfo;

	mov	eax, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR $T15[ebp], eax
	mov	ecx, DWORD PTR $T15[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 628  : 		TemplateInfo=NULL;

	mov	DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A, 0 ; TemplateInfo
$LN33@CockpitMan:

; 629  : 	}
; 630  : 
; 631  : 	for(int i = 0; i < (int)mpSurfaces.size(); i++){

	mov	DWORD PTR _i$28[ebp], 0
	jmp	SHORT $LN32@CockpitMan
$LN31@CockpitMan:
	mov	edx, DWORD PTR _i$28[ebp]
	add	edx, 1
	mov	DWORD PTR _i$28[ebp], edx
$LN32@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size
	cmp	DWORD PTR _i$28[ebp], eax
	jge	SHORT $LN30@CockpitMan

; 632  : 		if(mpSurfaces[i]) delete mpSurfaces[i];

	mov	eax, DWORD PTR _i$28[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN29@CockpitMan
	mov	ecx, DWORD PTR _i$28[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T20[ebp], eax
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN40@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T20[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T20[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN29@CockpitMan
$LN40@CockpitMan:
	mov	DWORD PTR tv145[ebp], 0
$LN29@CockpitMan:

; 633  : 	}

	jmp	SHORT $LN31@CockpitMan
$LN30@CockpitMan:

; 634  : 	mpSurfaces.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?clear@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::clear

; 635  : 
; 636  : 	for(int i = 0; i < (int)mpPanels.size(); i++){

	mov	DWORD PTR _i$26[ebp], 0
	jmp	SHORT $LN28@CockpitMan
$LN27@CockpitMan:
	mov	ecx, DWORD PTR _i$26[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$26[ebp], ecx
$LN28@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size
	cmp	DWORD PTR _i$26[ebp], eax
	jge	SHORT $LN26@CockpitMan

; 637  : 		if(mpPanels[i]) delete mpPanels[i];

	mov	edx, DWORD PTR _i$26[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN25@CockpitMan
	mov	eax, DWORD PTR _i$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T21[ebp], edx
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN42@CockpitMan
	push	1
	mov	eax, DWORD PTR $T21[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T21[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN25@CockpitMan
$LN42@CockpitMan:
	mov	DWORD PTR tv168[ebp], 0
$LN25@CockpitMan:

; 638  : 	}

	jmp	SHORT $LN27@CockpitMan
$LN26@CockpitMan:

; 639  : 	mpPanels.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?clear@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::clear

; 640  : 
; 641  : 	for(int i = 0; i < (int)mpObjects.size(); i++){

	mov	DWORD PTR _i$31[ebp], 0
	jmp	SHORT $LN24@CockpitMan
$LN23@CockpitMan:
	mov	ecx, DWORD PTR _i$31[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$31[ebp], ecx
$LN24@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::size
	cmp	DWORD PTR _i$31[ebp], eax
	jge	SHORT $LN22@CockpitMan

; 642  : 		if(mpObjects[i]){

	mov	edx, DWORD PTR _i$31[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN21@CockpitMan

; 643  : 			CPObject *o = mpObjects[i];

	mov	eax, DWORD PTR _i$31[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _o$5[ebp], ecx

; 644  : 			delete o;

	mov	edx, DWORD PTR _o$5[ebp]
	mov	DWORD PTR $T10[ebp], edx
	mov	eax, DWORD PTR $T10[ebp]
	mov	DWORD PTR $T19[ebp], eax
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN44@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T19[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T19[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN21@CockpitMan
$LN44@CockpitMan:
	mov	DWORD PTR tv191[ebp], 0
$LN21@CockpitMan:

; 645  : 		}
; 646  : 	}

	jmp	SHORT $LN23@CockpitMan
$LN22@CockpitMan:

; 647  : 	mpObjects.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?clear@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::clear

; 648  : 
; 649  : 	for(int i = 0; i < (int)mpButtonObjects.size(); i++) {

	mov	DWORD PTR _i$30[ebp], 0
	jmp	SHORT $LN20@CockpitMan
$LN19@CockpitMan:
	mov	ecx, DWORD PTR _i$30[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$30[ebp], ecx
$LN20@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size
	cmp	DWORD PTR _i$30[ebp], eax
	jge	SHORT $LN18@CockpitMan

; 650  : 		if(mpButtonObjects[i]) delete mpButtonObjects[i];

	mov	edx, DWORD PTR _i$30[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN17@CockpitMan
	mov	eax, DWORD PTR _i$30[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T9[ebp], ecx
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR $T18[ebp], edx
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN46@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T18[ebp]
	call	??_GCPButtonObject@@QAEPAXI@Z
	mov	DWORD PTR tv212[ebp], eax
	jmp	SHORT $LN17@CockpitMan
$LN46@CockpitMan:
	mov	DWORD PTR tv212[ebp], 0
$LN17@CockpitMan:

; 651  : 	}

	jmp	SHORT $LN19@CockpitMan
$LN18@CockpitMan:

; 652  : 	mpButtonObjects.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?clear@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::clear

; 653  : 
; 654  : 	for(int i = 0; i < (int)mpButtonViews.size(); i++){

	mov	DWORD PTR _i$29[ebp], 0
	jmp	SHORT $LN16@CockpitMan
$LN15@CockpitMan:
	mov	eax, DWORD PTR _i$29[ebp]
	add	eax, 1
	mov	DWORD PTR _i$29[ebp], eax
$LN16@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size
	cmp	DWORD PTR _i$29[ebp], eax
	jge	SHORT $LN14@CockpitMan

; 655  : 		if(mpButtonViews[i]) delete mpButtonViews[i];

	mov	ecx, DWORD PTR _i$29[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN13@CockpitMan
	mov	edx, DWORD PTR _i$29[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T14[ebp], eax
	mov	ecx, DWORD PTR $T14[ebp]
	mov	DWORD PTR $T17[ebp], ecx
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN48@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T17[ebp]
	call	??_GCPButtonView@@QAEPAXI@Z
	mov	DWORD PTR tv233[ebp], eax
	jmp	SHORT $LN13@CockpitMan
$LN48@CockpitMan:
	mov	DWORD PTR tv233[ebp], 0
$LN13@CockpitMan:

; 656  : 	}

	jmp	SHORT $LN15@CockpitMan
$LN14@CockpitMan:

; 657  : 	mpButtonViews.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?clear@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::clear

; 658  : 
; 659  : 	for(int i = 0; i < (int)mpCursors.size(); i++) {

	mov	DWORD PTR _i$27[ebp], 0
	jmp	SHORT $LN12@CockpitMan
$LN11@CockpitMan:
	mov	edx, DWORD PTR _i$27[ebp]
	add	edx, 1
	mov	DWORD PTR _i$27[ebp], edx
$LN12@CockpitMan:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size
	cmp	DWORD PTR _i$27[ebp], eax
	jge	SHORT $LN10@CockpitMan

; 660  : 		if(mpCursors[i]) delete mpCursors[i];

	mov	eax, DWORD PTR _i$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??A?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEAAPAVCPCursor@@I@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@CockpitMan
	mov	ecx, DWORD PTR _i$27[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??A?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEAAPAVCPCursor@@I@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T12[ebp], edx
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@CockpitMan:

; 661  : 	}

	jmp	SHORT $LN11@CockpitMan
$LN10@CockpitMan:

; 662  : 	mpCursors.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?clear@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::clear

; 663  : 
; 664  : 	if(mpIcp) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+688], 0
	je	SHORT $LN8@CockpitMan

; 665  : 		delete mpIcp;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	mov	DWORD PTR $T11[ebp], eax
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR $T16[ebp], ecx
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN50@CockpitMan
	push	1
	mov	ecx, DWORD PTR $T16[ebp]
	call	??_GICPClass@@QAEPAXI@Z
	mov	DWORD PTR tv260[ebp], eax
	jmp	SHORT $LN51@CockpitMan
$LN50@CockpitMan:
	mov	DWORD PTR tv260[ebp], 0
$LN51@CockpitMan:

; 666  : 		mpIcp = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+688], 0
$LN8@CockpitMan:

; 667  : 	}
; 668  : 
; 669  : 	if(mpHsi) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+692], 0
	je	SHORT $LN7@CockpitMan

; 670  : 		delete mpHsi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+692]
	mov	DWORD PTR $T8[ebp], edx
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 671  : 		mpHsi = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+692], 0
$LN7@CockpitMan:

; 672  : 	}
; 673  : 
; 674  : 	if (mpKneeBoard) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+700], 0
	je	SHORT $LN6@CockpitMan

; 675  : 		delete mpKneeBoard;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T23[ebp], edx
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN52@CockpitMan
	push	1
	mov	eax, DWORD PTR $T23[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T23[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv276[ebp], eax
	jmp	SHORT $LN53@CockpitMan
$LN52@CockpitMan:
	mov	DWORD PTR tv276[ebp], 0
$LN53@CockpitMan:

; 676  : 		mpKneeBoard = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+700], 0
$LN6@CockpitMan:

; 677  : 	}
; 678  : 
; 679  : 	for(int i = 0; i < BOUNDS_TOTAL; i++) {

	mov	DWORD PTR _i$25[ebp], 0
	jmp	SHORT $LN5@CockpitMan
$LN4@CockpitMan:
	mov	edx, DWORD PTR _i$25[ebp]
	add	edx, 1
	mov	DWORD PTR _i$25[ebp], edx
$LN5@CockpitMan:
	cmp	DWORD PTR _i$25[ebp], 6
	jge	SHORT $LN3@CockpitMan

; 680  : 		if(mpViewBounds[i]) {

	mov	eax, DWORD PTR _i$25[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+664], 0
	je	SHORT $LN2@CockpitMan

; 681  : 			delete mpViewBounds[i];

	mov	edx, DWORD PTR _i$25[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+664]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@CockpitMan:

; 682  : 		}
; 683  : 	}

	jmp	SHORT $LN4@CockpitMan
$LN3@CockpitMan:

; 684  : 	if(mpGeometry) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+696], 0
	je	SHORT $LN1@CockpitMan

; 685  : 		DrawableBSP::Unlock(mpGeometry->GetID());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+696]
	call	?GetID@DrawableBSP@@QAEHXZ		; DrawableBSP::GetID
	push	eax
	call	?Unlock@DrawableBSP@@SAXH@Z		; DrawableBSP::Unlock
	add	esp, 4

; 686  : 		delete mpGeometry;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T22[ebp], ecx
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN54@CockpitMan
	push	1
	mov	edx, DWORD PTR $T22[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T22[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv305[ebp], eax
	jmp	SHORT $LN55@CockpitMan
$LN54@CockpitMan:
	mov	DWORD PTR tv305[ebp], 0
$LN55@CockpitMan:

; 687  : 		mpGeometry = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+696], 0
$LN1@CockpitMan:

; 688  : 	}
; 689  : 
; 690  : 	F4DestroyCriticalSection(mpCockpitCritSec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	push	edx
	call	_F4DestroyCriticalSection
	add	esp, 4

; 691  : 	mpCockpitCritSec = NULL; // JB 010108

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+660], 0

; 692  : 
; 693  : 
; 694  : 	//Wombat778 10-18-2003 Kill the temp ratiobuffer
; 695  : 	//Only do this when not rendering
; 696  : 
; 697  : 	/*if (!DisplayOptions.bRender2DCockpit && g_bCockpitAutoScale && g_bRatioHack && ((float) DisplayOptions.DispWidth / (float) DisplayOptions.DispHeight) == 1.25)		//Wombat778 10-24-2003 added g_bCockpitAutoScale	//so we are in a 1.25 ratio
; 698  : 		delete RatioBuffer;*/
; 699  : 
; 700  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::~vector<CPButtonView *,std::allocator<CPButtonView *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::~vector<CPButtonObject *,std::allocator<CPButtonObject *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::~vector<CPCursor *,std::allocator<CPCursor *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::vector<CPObject *,std::allocator<CPObject *> >::~vector<CPObject *,std::allocator<CPObject *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::~vector<CPPanel *,std::allocator<CPPanel *> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::~vector<CPSurface *,std::allocator<CPSurface *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CockpitManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	jmp	??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::~vector<CPSurface *,std::allocator<CPSurface *> >
__unwindfunclet$??1CockpitManager@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::~vector<CPPanel *,std::allocator<CPPanel *> >
__unwindfunclet$??1CockpitManager@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::vector<CPObject *,std::allocator<CPObject *> >::~vector<CPObject *,std::allocator<CPObject *> >
__unwindfunclet$??1CockpitManager@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	jmp	??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::~vector<CPCursor *,std::allocator<CPCursor *> >
__unwindfunclet$??1CockpitManager@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::~vector<CPButtonObject *,std::allocator<CPButtonObject *> >
__unwindfunclet$??1CockpitManager@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::~vector<CPButtonView *,std::allocator<CPButtonView *> >
__ehhandler$??1CockpitManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CockpitManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CockpitManager@@QAE@XZ ENDP				; CockpitManager::~CockpitManager
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_self$ = 8						; size = 4
?TimeUpdateCallback@CockpitManager@@CAXPAX@Z PROC	; CockpitManager::TimeUpdateCallback

; 4440 : void CockpitManager::TimeUpdateCallback( void *self ) {

	push	ebp
	mov	ebp, esp

; 4441 : 	((CockpitManager*)self)->SetTOD( TheTimeOfDay.GetLightLevel() );

	mov	ecx, OFFSET ?TheTimeOfDay@@3VCTimeOfDay@@A ; TheTimeOfDay
	call	?GetLightLevel@CTimeOfDay@@QAEMXZ	; CTimeOfDay::GetLightLevel
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _self$[ebp]
	call	?SetTOD@CockpitManager@@QAEXM@Z		; CockpitManager::SetTOD

; 4442 : }

	pop	ebp
	ret	0
?TimeUpdateCallback@CockpitManager@@CAXPAX@Z ENDP	; CockpitManager::TimeUpdateCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_buttonViewId$ = -48					; size = 4
_panelButtonViews$ = -44				; size = 4
_objectId$ = -40					; size = 4
_panelObjects$ = -36					; size = 4
_surfaceId$ = -32					; size = 4
_panelSurfaces$ = -28					; size = 4
_buttonId$ = -24					; size = 4
_found$ = -20						; size = 4
_k$ = -16						; size = 4
_j$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?ResolveReferences@CockpitManager@@AAEXXZ PROC		; CockpitManager::ResolveReferences
; _this$ = ecx

; 2505 : void CockpitManager::ResolveReferences(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 2506 : 
; 2507 : 	int	i, j, k;
; 2508 : 	int	panelSurfaces;
; 2509 : 	int	panelObjects;
; 2510 : 	int	panelButtonViews;
; 2511 : 	int	surfaceId;
; 2512 : 	int	objectId;
; 2513 : 	int	buttonId;
; 2514 : 	int	buttonViewId;
; 2515 : 	BOOL	found;
; 2516 : 
; 2517 : 	// loop thru all panels
; 2518 : 	for(i = 0; i < mPanelTally; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN51@ResolveRef
$LN50@ResolveRef:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN51@ResolveRef:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jge	$LN49@ResolveRef

; 2519 : 		panelSurfaces	= mpPanels[i]->mNumSurfaces;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR _panelSurfaces$[ebp], edx

; 2520 : 
; 2521 : 		// loop thru each panel's list of surfaces
; 2522 : 		for(j = 0; j < panelSurfaces; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN48@ResolveRef
$LN47@ResolveRef:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN48@ResolveRef:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _panelSurfaces$[ebp]
	jge	$LN46@ResolveRef

; 2523 : 			surfaceId	= mpPanels[i]->mpSurfaceData[j].surfaceNum;

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+128]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _surfaceId$[ebp], eax

; 2524 : 			found			= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 2525 : 			k = 0;

	mov	DWORD PTR _k$[ebp], 0
$LN45@ResolveRef:

; 2526 : 
; 2527 : 			// search cpmanager's list of surface pointers 
; 2528 : 			while((!found) && (k < mSurfaceTally)) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN44@ResolveRef
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN44@ResolveRef

; 2529 : 				if(mpSurfaces[k]->mIdNum == surfaceId) {

	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _surfaceId$[ebp]
	jne	SHORT $LN43@ResolveRef

; 2530 : 					mpPanels[i]->mpSurfaceData[j].psurface = mpSurfaces[k];

	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+128]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [ecx+eax+12], edx

; 2531 : 					found	= TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 2532 : 				}
; 2533 : 				else {

	jmp	SHORT $LN42@ResolveRef
$LN43@ResolveRef:

; 2534 : 					k++;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN42@ResolveRef:

; 2535 : 				}
; 2536 : 			}

	jmp	SHORT $LN45@ResolveRef
$LN44@ResolveRef:

; 2537 : 			F4Assert(found);    //couldn't find the surface in our list
; 2538 : 		}

	jmp	$LN47@ResolveRef
$LN46@ResolveRef:

; 2539 : 	}

	jmp	$LN50@ResolveRef
$LN49@ResolveRef:

; 2540 : 
; 2541 : 	// loop thru all panels
; 2542 : 	for(i = 0; i < mPanelTally; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN41@ResolveRef
$LN40@ResolveRef:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN41@ResolveRef:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jge	$LN39@ResolveRef

; 2543 : 		panelObjects = mpPanels[i]->mNumObjects;

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR _panelObjects$[ebp], eax

; 2544 : 
; 2545 : 		// loop thru each of the panel's objects
; 2546 : 		for(j = 0; j < panelObjects; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN38@ResolveRef
$LN37@ResolveRef:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN38@ResolveRef:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _panelObjects$[ebp]
	jge	$LN36@ResolveRef

; 2547 : 			objectId		= mpPanels[i]->mpObjectIDs[j];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _objectId$[ebp], ecx

; 2548 : 			found			= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 2549 : 			k = 0;

	mov	DWORD PTR _k$[ebp], 0
$LN35@ResolveRef:

; 2550 : 
; 2551 : 			// search cpmanager's list of object pointers
; 2552 : 			while((!found) && (k < mObjectTally)) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN34@ResolveRef
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jge	SHORT $LN34@ResolveRef

; 2553 : 				if(mpObjects[k]->mIdNum == objectId) {

	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _objectId$[ebp]
	jne	SHORT $LN33@ResolveRef

; 2554 : 					mpPanels[i]->mpObjects[j] = mpObjects[k];

	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx+edx*4], eax

; 2555 : 					found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 2556 : 				}
; 2557 : 				else {

	jmp	SHORT $LN32@ResolveRef
$LN33@ResolveRef:

; 2558 : 					k++;

	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN32@ResolveRef:

; 2559 : 				}
; 2560 : 			}

	jmp	SHORT $LN35@ResolveRef
$LN34@ResolveRef:

; 2561 : 			F4Assert(found);		//couldn't find the object in our list
; 2562 : 		}

	jmp	$LN37@ResolveRef
$LN36@ResolveRef:

; 2563 : 	}

	jmp	$LN40@ResolveRef
$LN39@ResolveRef:

; 2564 : 
; 2565 : 	for(i = 0; i < mButtonViewTally; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@ResolveRef
$LN30@ResolveRef:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN31@ResolveRef:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jge	$LN29@ResolveRef

; 2566 : 
; 2567 : 		found		= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 2568 : 		j			= 0;

	mov	DWORD PTR _j$[ebp], 0

; 2569 : 		buttonId = mpButtonViews[i]->GetParentButton();

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetParentButton@CPButtonView@@QAEHXZ	; CPButtonView::GetParentButton
	mov	DWORD PTR _buttonId$[ebp], eax
$LN28@ResolveRef:

; 2570 : 
; 2571 : 		while(!found && j < mButtonTally) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN27@ResolveRef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN27@ResolveRef

; 2572 : 
; 2573 : 			if(mpButtonObjects[j]->GetId() == buttonId) {

	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN26@ResolveRef

; 2574 : 				mpButtonObjects[j]->AddView(mpButtonViews[i]);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?AddView@CPButtonObject@@QAEXPAVCPButtonView@@@Z ; CPButtonObject::AddView

; 2575 : 				found		= TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 2576 : 			}
; 2577 : 			else {

	jmp	SHORT $LN25@ResolveRef
$LN26@ResolveRef:

; 2578 : 				j++;

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN25@ResolveRef:

; 2579 : 			}
; 2580 : 		}

	jmp	SHORT $LN28@ResolveRef
$LN27@ResolveRef:

; 2581 : 
; 2582 : 		F4Assert(found);
; 2583 : 	}

	jmp	$LN30@ResolveRef
$LN29@ResolveRef:

; 2584 : 
; 2585 : 
; 2586 : 	for(i = 0; i < mButtonTally; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@ResolveRef
$LN23@ResolveRef:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN24@ResolveRef:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jge	$LN22@ResolveRef

; 2587 : 		if(mpButtonObjects[i]->GetSound(1) >= 0) {

	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetSound@CPButtonObject@@QBEHH@Z	; CPButtonObject::GetSound
	test	eax, eax
	jl	$LN21@ResolveRef

; 2588 : 			mpButtonObjects[i]->SetSound(1, mpSoundList->GetSoundIndex(mpButtonObjects[i]->GetSound(1)));

	push	1
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetSound@CPButtonObject@@QBEHH@Z	; CPButtonObject::GetSound
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	call	?GetSoundIndex@CPSoundList@@QAEHH@Z	; CPSoundList::GetSoundIndex
	push	eax
	push	1
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?SetSound@CPButtonObject@@QAEXHH@Z	; CPButtonObject::SetSound

; 2589 : 			if(mpButtonObjects[i]->GetSound(2) >= 0) {

	push	2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetSound@CPButtonObject@@QBEHH@Z	; CPButtonObject::GetSound
	test	eax, eax
	jl	SHORT $LN21@ResolveRef

; 2590 : 				mpButtonObjects[i]->SetSound(2, mpSoundList->GetSoundIndex(mpButtonObjects[i]->GetSound(2)));

	push	2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetSound@CPButtonObject@@QBEHH@Z	; CPButtonObject::GetSound
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+652]
	call	?GetSoundIndex@CPSoundList@@QAEHH@Z	; CPSoundList::GetSoundIndex
	push	eax
	push	2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?SetSound@CPButtonObject@@QAEXHH@Z	; CPButtonObject::SetSound
$LN21@ResolveRef:

; 2591 : 			}
; 2592 : 		}		
; 2593 : 	}

	jmp	$LN23@ResolveRef
$LN22@ResolveRef:

; 2594 : 
; 2595 : 
; 2596 : 	for(i = 0; i < mPanelTally; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@ResolveRef
$LN18@ResolveRef:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@ResolveRef:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jge	$LN17@ResolveRef

; 2597 : 		panelButtonViews = mpPanels[i]->mNumButtonViews;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR _panelButtonViews$[ebp], edx

; 2598 : 
; 2599 : 		// loop thru each of the panel's objects
; 2600 : 		for(j = 0; j < panelButtonViews; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN16@ResolveRef
$LN15@ResolveRef:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN16@ResolveRef:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _panelButtonViews$[ebp]
	jge	$LN14@ResolveRef

; 2601 : 			buttonViewId	= mpPanels[i]->mpButtonViewIDs[j];

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _buttonViewId$[ebp], eax

; 2602 : 			found				= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 2603 : 			k					= 0;

	mov	DWORD PTR _k$[ebp], 0
$LN13@ResolveRef:

; 2604 : 
; 2605 : 			// search cpmanager's list of object pointers
; 2606 : 			while((!found) && (k < mButtonViewTally)) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN12@ResolveRef
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jge	SHORT $LN12@ResolveRef

; 2607 : 				if(mpButtonViews[k]->GetId() == buttonViewId) {

	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonView@@QAEHXZ		; CPButtonView::GetId
	cmp	eax, DWORD PTR _buttonViewId$[ebp]
	jne	SHORT $LN11@ResolveRef

; 2608 : 					mpPanels[i]->mpButtonViews[j] = mpButtonViews[k];

	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx+edx*4], eax

; 2609 : 					found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 2610 : 				}
; 2611 : 				else {

	jmp	SHORT $LN10@ResolveRef
$LN11@ResolveRef:

; 2612 : 					k++;

	mov	ecx, DWORD PTR _k$[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$[ebp], ecx
$LN10@ResolveRef:

; 2613 : 				}
; 2614 : 			}

	jmp	SHORT $LN13@ResolveRef
$LN12@ResolveRef:

; 2615 : 			F4Assert(found);		//couldn't find the object in our list
; 2616 : 		}

	jmp	$LN15@ResolveRef
$LN14@ResolveRef:

; 2617 : 	}

	jmp	$LN18@ResolveRef
$LN17@ResolveRef:

; 2618 : 
; 2619 : 
; 2620 : 	if(mpIcp) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+688], 0
	je	$LN52@ResolveRef

; 2621 : 		// loop thru each of the panel's buttons
; 2622 : 		buttonId		= ICP_INITIAL_PRIMARY_BUTTON;

	mov	DWORD PTR _buttonId$[ebp], 1013		; 000003f5H

; 2623 : 		found			= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 2624 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN8@ResolveRef:

; 2625 : 
; 2626 : 		// search cpmanager's list of button pointers
; 2627 : 		while((!found) && (i < mButtonTally)) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN7@ResolveRef
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN7@ResolveRef

; 2628 : 			if(mpButtonObjects[i]->GetId() == buttonId) {

	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN6@ResolveRef

; 2629 : 				mpIcp->InitPrimaryExclusiveButton(mpButtonObjects[i]);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+688]
	call	?InitPrimaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z ; ICPClass::InitPrimaryExclusiveButton

; 2630 : 				found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 2631 : 			}
; 2632 : 			else {

	jmp	SHORT $LN5@ResolveRef
$LN6@ResolveRef:

; 2633 : 				i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@ResolveRef:

; 2634 : 			}
; 2635 : 		}

	jmp	SHORT $LN8@ResolveRef
$LN7@ResolveRef:

; 2636 : 
; 2637 : 		F4Assert(found);		//couldn't find the button in our list	
; 2638 : 
; 2639 : 
; 2640 : 		buttonId		= ICP_INITIAL_TERTIARY_BUTTON;

	mov	DWORD PTR _buttonId$[ebp], 1011		; 000003f3H

; 2641 : 		found			= FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 2642 : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN4@ResolveRef:

; 2643 : 
; 2644 : 		// search cpmanager's list of button pointers
; 2645 : 		while((!found) && (i < mButtonTally)) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN52@ResolveRef
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jge	SHORT $LN52@ResolveRef

; 2646 : 			if(mpButtonObjects[i]->GetId() == buttonId) {

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetId@CPButtonObject@@QBEHXZ		; CPButtonObject::GetId
	cmp	eax, DWORD PTR _buttonId$[ebp]
	jne	SHORT $LN2@ResolveRef

; 2647 : 				mpIcp->InitTertiaryExclusiveButton(mpButtonObjects[i]);

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	call	?InitTertiaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z ; ICPClass::InitTertiaryExclusiveButton

; 2648 : 				found = TRUE;

	mov	DWORD PTR _found$[ebp], 1

; 2649 : 			}
; 2650 : 			else {

	jmp	SHORT $LN1@ResolveRef
$LN2@ResolveRef:

; 2651 : 				i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN1@ResolveRef:

; 2652 : 			}
; 2653 : 		}

	jmp	SHORT $LN4@ResolveRef
$LN52@ResolveRef:

; 2654 : 
; 2655 : 		F4Assert(found);		//couldn't find the button in our list	
; 2656 : 
; 2657 : 	}
; 2658 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ResolveReferences@CockpitManager@@AAEXXZ ENDP		; CockpitManager::ResolveReferences
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -744					; size = 4
tv1200 = -740						; size = 8
tv1160 = -732						; size = 8
tv1211 = -724						; size = 8
_HudColor$2 = -716					; size = 4
tv1182 = -712						; size = 8
tv1222 = -704						; size = 8
tv1171 = -696						; size = 8
$T3 = -688						; size = 4
$T4 = -684						; size = 4
$T5 = -680						; size = 4
$T6 = -676						; size = 4
$T7 = -672						; size = 4
$T8 = -668						; size = 4
$T9 = -664						; size = 4
tv1157 = -660						; size = 4
tv1168 = -656						; size = 4
_ret$10 = -652						; size = 4
tv1197 = -648						; size = 4
_twodpit$ = -644					; size = 8
tv1208 = -636						; size = 4
$T11 = -632						; size = 4
tv1179 = -628						; size = 4
_numSounds$ = -624					; size = 4
tv1219 = -620						; size = 4
tv449 = -616						; size = 4
_tempInst$12 = -612					; size = 4
_tempFlood$13 = -608					; size = 4
_i$ = -604						; size = 4
_dogeometry$ = -597					; size = 1
_plinePtr$ = -596					; size = 4
_this$ = -592						; size = 4
_ptoken$ = -588						; size = 4
_viewBounds$ = -584					; size = 16
_plineBuffer$ = -568					; size = 512
_ptemplateFileName$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pcockpitDataFile$ = 8					; size = 4
?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z PROC ; CockpitManager::ParseManagerInfo
; _this$ = ecx

; 749  : void CockpitManager::ParseManagerInfo(FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 732				; 000002dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 750  : 
; 751  : 	const int	lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 752  : 	char			plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 753  : 	char*			plinePtr;
; 754  : 	char*			ptoken;
; 755  : 	char			pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 756  : 	char			ptemplateFileName[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptemplateFileName$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptemplateFileName$[ebp+1], eax
	mov	DWORD PTR _ptemplateFileName$[ebp+5], eax
	mov	DWORD PTR _ptemplateFileName$[ebp+9], eax
	mov	DWORD PTR _ptemplateFileName$[ebp+13], eax
	mov	DWORD PTR _ptemplateFileName$[ebp+17], eax
	mov	DWORD PTR _ptemplateFileName$[ebp+21], eax
	mov	DWORD PTR _ptemplateFileName$[ebp+25], eax
	mov	WORD PTR _ptemplateFileName$[ebp+29], ax
	mov	BYTE PTR _ptemplateFileName$[ebp+31], al

; 757  : 	int			i;
; 758  : 	RECT			viewBounds;
; 759  : 	int			numSounds;
; 760  : 	int		    twodpit[2] = { 1196, 1197 };

	mov	DWORD PTR _twodpit$[ebp], 1196		; 000004acH
	mov	DWORD PTR _twodpit$[ebp+4], 1197	; 000004adH

; 761  : 	bool		    dogeometry = false;

	mov	BYTE PTR _dogeometry$[ebp], 0

; 762  : 
; 763  : 
; 764  : 	for(i = 0; i < BOUNDS_TOTAL; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN73@ParseManag
$LN72@ParseManag:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN73@ParseManag:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN71@ParseManag

; 765  : 		mpViewBounds[i] = NULL;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+664], 0

; 766  : 	}

	jmp	SHORT $LN72@ParseManag
$LN71@ParseManag:

; 767  : 
; 768  : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 769  : 	gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 770  : 	plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 771  : 	ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 772  : 
; 773  : #if CPMANAGER_VERSION
; 774  : 	// sfr: parse version string. Must be first in manager because even manager can have new strings now
; 775  : 	if (!strcmpi(ptoken, PROP_VERSION_STR)){

	push	OFFSET ??_C@_07CPCPJPKL@version?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN70@ParseManag

; 776  : 		ptoken = FindToken(&plinePtr, "=;\n");

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 777  : 		int ret = sscanf(ptoken, "%d.%d", &mVersion.major, &mVersion.minor);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ??_C@_05KBEOJPB@?$CFd?4?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$10[ebp], eax

; 778  : 		if (ret <= 1){

	cmp	DWORD PTR _ret$10[ebp], 1
	jg	SHORT $LN69@ParseManag

; 779  : 			mVersion.minor = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN69@ParseManag:

; 780  : 		}
; 781  : 		if (ret == 0){

	cmp	DWORD PTR _ret$10[ebp], 0
	jne	SHORT $LN68@ParseManag

; 782  : 			// this shouldnt happen, parse error!
; 783  : 			mVersion.major = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN68@ParseManag:

; 784  : 		}
; 785  : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 786  : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 787  : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 788  : 		ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 789  : 	}
; 790  : 	else {

	jmp	SHORT $LN67@ParseManag
$LN70@ParseManag:

; 791  : 		mVersion.major = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 792  : 		mVersion.minor = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN67@ParseManag:

; 793  : 	}
; 794  : #endif
; 795  : 
; 796  : 	while (strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN65@ParseManag

; 797  : 
; 798  : 		if(!strcmpi(ptoken, PROP_NUMSURFACES_STR)) {

	push	OFFSET ??_C@_0M@KBCOJPLI@numsurfaces?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN64@ParseManag

; 799  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 800  : 			sscanf(ptoken, "%d", &mNumSurfaces);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN64@ParseManag:

; 801  : 		}
; 802  : 		else if(!strcmpi(ptoken, PROP_MFDLEFT_STR)) {

	push	OFFSET ??_C@_07PNADDHHC@mfdleft?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN62@ParseManag

; 803  : #ifdef USE_SH_POOLS
; 804  : 			mpViewBounds[BOUNDS_MFDLEFT]	= (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 805  : #else
; 806  : 			mpViewBounds[BOUNDS_MFDLEFT]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+edx+664], ecx

; 807  : #endif
; 808  : 
; 809  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 810  : 			sscanf(ptoken, "%d %d %d %d", &viewBounds.top, 
; 811  : 					&viewBounds.left, 
; 812  : 					&viewBounds.bottom, 
; 813  : 					&viewBounds.right);

	lea	eax, DWORD PTR _viewBounds$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _viewBounds$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 814  : 			ConvertRecttoVBounds(&viewBounds, mpViewBounds[BOUNDS_MFDLEFT], DisplayOptions.DispWidth, DisplayOptions.DispHeight, mHScale, mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	push	ecx
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+664]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp]
	push	eax
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H
	jmp	$LN3@ParseManag
$LN62@ParseManag:

; 815  : 		}
; 816  : 		else if(!strcmpi(ptoken, PROP_MFDRIGHT_STR)) {

	push	OFFSET ??_C@_08KEAJBMEO@mfdright?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN60@ParseManag

; 817  : #ifdef USE_SH_POOLS
; 818  : 			mpViewBounds[BOUNDS_MFDRIGHT]	= (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 819  : #else
; 820  : 			mpViewBounds[BOUNDS_MFDRIGHT]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [eax+edx+664], ecx

; 821  : #endif
; 822  : 
; 823  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 824  : 			sscanf(ptoken, "%d %d %d %d", &viewBounds.top, 
; 825  : 					&viewBounds.left, 
; 826  : 					&viewBounds.bottom, 
; 827  : 					&viewBounds.right);

	lea	eax, DWORD PTR _viewBounds$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _viewBounds$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 828  : 			ConvertRecttoVBounds(&viewBounds, mpViewBounds[BOUNDS_MFDRIGHT], DisplayOptions.DispWidth, DisplayOptions.DispHeight, mHScale, mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	push	ecx
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	push	edx
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+664]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp]
	push	eax
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H
	jmp	$LN3@ParseManag
$LN60@ParseManag:

; 829  : 		}
; 830  : 		//Wombat778 4-12-04 Add support for extra in cockpit MFDs
; 831  : 		else if(!strcmpi(ptoken, PROP_MFD3_STR)) {

	push	OFFSET ??_C@_04PNIHBFAN@mfd3?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN58@ParseManag

; 832  : #ifdef USE_SH_POOLS
; 833  : 			mpViewBounds[BOUNDS_MFD3]	= (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 834  : #else
; 835  : 			mpViewBounds[BOUNDS_MFD3]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax+edx+664], ecx

; 836  : #endif
; 837  : 
; 838  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 839  : 			sscanf(ptoken, "%d %d %d %d", &viewBounds.top, 
; 840  : 					&viewBounds.left, 
; 841  : 					&viewBounds.bottom, 
; 842  : 					&viewBounds.right);

	lea	eax, DWORD PTR _viewBounds$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _viewBounds$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 843  : 			ConvertRecttoVBounds(&viewBounds, mpViewBounds[BOUNDS_MFD3], DisplayOptions.DispWidth, DisplayOptions.DispHeight, mHScale, mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	push	ecx
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+664]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp]
	push	eax
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H
	jmp	$LN3@ParseManag
$LN58@ParseManag:

; 844  : 		}
; 845  : 		//Wombat778 4-12-04 Add support for extra in cockpit MFDs
; 846  : 		else if(!strcmpi(ptoken, PROP_MFD4_STR)) {

	push	OFFSET ??_C@_04LCMGIDMK@mfd4?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN56@ParseManag

; 847  : #ifdef USE_SH_POOLS
; 848  : 			mpViewBounds[BOUNDS_MFD4]	= (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 849  : #else
; 850  : 			mpViewBounds[BOUNDS_MFD4]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+edx+664], ecx

; 851  : #endif
; 852  : 
; 853  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 854  : 			sscanf(ptoken, "%d %d %d %d", &viewBounds.top, 
; 855  : 					&viewBounds.left, 
; 856  : 					&viewBounds.bottom, 
; 857  : 					&viewBounds.right);

	lea	eax, DWORD PTR _viewBounds$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _viewBounds$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 858  : 			ConvertRecttoVBounds(&viewBounds, mpViewBounds[BOUNDS_MFD4], DisplayOptions.DispWidth, DisplayOptions.DispHeight, mHScale, mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	push	ecx
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	push	edx
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+664]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp]
	push	eax
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H
	jmp	$LN3@ParseManag
$LN56@ParseManag:

; 859  : 		}
; 860  : 
; 861  : 
; 862  : 		else if(!strcmpi(ptoken, PROP_HUD_STR)) {

	push	OFFSET ??_C@_03HDICPLBH@hud?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN54@ParseManag

; 863  : 
; 864  : #ifdef USE_SH_POOLS
; 865  : 			mpViewBounds[BOUNDS_HUD]	= (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 866  : #else
; 867  : 			mpViewBounds[BOUNDS_HUD]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+edx+664], ecx

; 868  : #endif
; 869  : 
; 870  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 871  : 			sscanf(ptoken, "%d %d %d %d", &viewBounds.top, 
; 872  : 					&viewBounds.left, 
; 873  : 					&viewBounds.bottom, 
; 874  : 					&viewBounds.right);

	lea	eax, DWORD PTR _viewBounds$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _viewBounds$[ebp]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 875  : 
; 876  : 			if (g_fHUDonlySize)

	movss	xmm0, DWORD PTR ?g_fHUDonlySize@@3MA
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN53@ParseManag

; 877  : 			{
; 878  : 				viewBounds.top -= (viewBounds.bottom-viewBounds.top) * (LONG) g_fHUDonlySize;

	mov	edx, DWORD PTR _viewBounds$[ebp+12]
	sub	edx, DWORD PTR _viewBounds$[ebp+4]
	cvttss2si eax, DWORD PTR ?g_fHUDonlySize@@3MA
	imul	edx, eax
	mov	ecx, DWORD PTR _viewBounds$[ebp+4]
	sub	ecx, edx
	mov	DWORD PTR _viewBounds$[ebp+4], ecx

; 879  : 				viewBounds.bottom += (viewBounds.bottom-viewBounds.top) * (LONG) g_fHUDonlySize;

	mov	edx, DWORD PTR _viewBounds$[ebp+12]
	sub	edx, DWORD PTR _viewBounds$[ebp+4]
	cvttss2si eax, DWORD PTR ?g_fHUDonlySize@@3MA
	imul	edx, eax
	add	edx, DWORD PTR _viewBounds$[ebp+12]
	mov	DWORD PTR _viewBounds$[ebp+12], edx

; 880  : 				viewBounds.left -= (viewBounds.right-viewBounds.left) *  (LONG) g_fHUDonlySize;

	mov	ecx, DWORD PTR _viewBounds$[ebp+8]
	sub	ecx, DWORD PTR _viewBounds$[ebp]
	cvttss2si edx, DWORD PTR ?g_fHUDonlySize@@3MA
	imul	ecx, edx
	mov	eax, DWORD PTR _viewBounds$[ebp]
	sub	eax, ecx
	mov	DWORD PTR _viewBounds$[ebp], eax

; 881  : 				viewBounds.right += (viewBounds.right-viewBounds.left) *(LONG) g_fHUDonlySize;

	mov	ecx, DWORD PTR _viewBounds$[ebp+8]
	sub	ecx, DWORD PTR _viewBounds$[ebp]
	cvttss2si edx, DWORD PTR ?g_fHUDonlySize@@3MA
	imul	ecx, edx
	add	ecx, DWORD PTR _viewBounds$[ebp+8]
	mov	DWORD PTR _viewBounds$[ebp+8], ecx
$LN53@ParseManag:

; 882  : 			}
; 883  : 
; 884  : 			ConvertRecttoVBounds(&viewBounds, mpViewBounds[BOUNDS_HUD], DisplayOptions.DispWidth, DisplayOptions.DispHeight, mHScale, mVScale);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+248]
	movss	DWORD PTR [esp], xmm0
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	push	edx
	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+664]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp]
	push	ecx
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H
	jmp	$LN3@ParseManag
$LN54@ParseManag:

; 885  : 		}
; 886  : 		else if(!strcmpi(ptoken, PROP_RWR_STR)) {

	push	OFFSET ??_C@_03FDDKCNFF@rwr?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN51@ParseManag

; 887  : 
; 888  : #ifdef USE_SH_POOLS
; 889  : 			mpViewBounds[BOUNDS_RWR]	= (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 890  : #else
; 891  : 			mpViewBounds[BOUNDS_RWR]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+eax+664], edx

; 892  : #endif
; 893  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 894  : 			sscanf(ptoken, "%d %d %d %d", &(viewBounds.top), 
; 895  : 					&(viewBounds.left), 
; 896  : 					&(viewBounds.bottom), 
; 897  : 					&(viewBounds.right));

	lea	ecx, DWORD PTR _viewBounds$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _viewBounds$[ebp+12]
	push	edx
	lea	eax, DWORD PTR _viewBounds$[ebp]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H

; 898  : 			ConvertRecttoVBounds(&viewBounds, mpViewBounds[BOUNDS_RWR], DisplayOptions.DispWidth, DisplayOptions.DispHeight, mHScale, mVScale);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+248]
	movss	DWORD PTR [esp], xmm0
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	push	edx
	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+664]
	push	eax
	lea	ecx, DWORD PTR _viewBounds$[ebp]
	push	ecx
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H
	jmp	$LN3@ParseManag
$LN51@ParseManag:

; 899  : 		}
; 900  : 		else if (!strcmpi(ptoken, PROP_NUMPANELS_STR)) {

	push	OFFSET ??_C@_09GCGEEKAC@numpanels?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN49@ParseManag

; 901  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 902  : 			sscanf(ptoken, "%d", &mNumPanels);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN49@ParseManag:

; 903  : 		}
; 904  : 		else if (!strcmpi(ptoken, PROP_NUMOBJECTS_STR)) {

	push	OFFSET ??_C@_0L@LILAFCIM@numobjects?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN47@ParseManag

; 905  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 906  : 			sscanf(ptoken, "%d", &mNumObjects);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN47@ParseManag:

; 907  : 		}
; 908  : 		else if (!strcmpi(ptoken, PROP_NUMSOUNDS_STR)) {

	push	OFFSET ??_C@_09KHKEEBMF@numsounds?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN45@ParseManag

; 909  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 910  : 			sscanf(ptoken, "%d", &numSounds);

	lea	eax, DWORD PTR _numSounds$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 911  : 			if(numSounds > 0) {

	cmp	DWORD PTR _numSounds$[ebp], 0
	jle	SHORT $LN44@ParseManag

; 912  : 				mpSoundList = new CPSoundList(numSounds);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN76@ParseManag
	mov	edx, DWORD PTR _numSounds$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0CPSoundList@@QAE@H@Z			; CPSoundList::CPSoundList
	mov	DWORD PTR tv449[ebp], eax
	jmp	SHORT $LN77@ParseManag
$LN76@ParseManag:
	mov	DWORD PTR tv449[ebp], 0
$LN77@ParseManag:
	mov	eax, DWORD PTR tv449[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ecx+652], edx

; 913  : 			}
; 914  : 			else {

	jmp	SHORT $LN43@ParseManag
$LN44@ParseManag:

; 915  : 				mpSoundList = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+652], 0
$LN43@ParseManag:

; 916  : 			}

	jmp	$LN3@ParseManag
$LN45@ParseManag:

; 917  : 		}
; 918  : 		else if (!strcmpi(ptoken, PROP_NUMBUTTONS_STR)) {

	push	OFFSET ??_C@_0L@LOPHKBNK@numbuttons?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@ParseManag

; 919  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 920  : 			sscanf(ptoken, "%d", &mNumButtons);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN41@ParseManag:

; 921  : 		}
; 922  : 		else if (!strcmpi(ptoken, PROP_NUMBUTTONVIEWS_STR)) {

	push	OFFSET ??_C@_0P@HLMMFAAF@numbuttonviews?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@ParseManag

; 923  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 924  : 			sscanf(ptoken, "%d", &mNumButtonViews);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN39@ParseManag:

; 925  : 		}
; 926  : 		else if (!strcmpi(ptoken, PROP_NUMCURSORS_STR)) {

	push	OFFSET ??_C@_0L@DBIMEFN@numcursors?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@ParseManag

; 927  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 928  : 			sscanf(ptoken, "%d", &mNumCursors);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN37@ParseManag:

; 929  : 		}
; 930  : 		else if (!strcmpi(ptoken, PROP_MOUSEBORDER_STR)) {

	push	OFFSET ??_C@_0M@DBHGAIJM@mouseborder?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@ParseManag

; 931  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 932  : 			sscanf(ptoken, "%d", &mMouseBorder);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN35@ParseManag:

; 933  : 		}
; 934  : 		else if (!strcmpi(ptoken, PROP_HUDFONT)) {

	push	OFFSET ??_C@_07MIMLBGDI@hudfont?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@ParseManag

; 935  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 936  : 			sscanf(ptoken, "%d", &mHudFont);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN33@ParseManag:

; 937  : 		}
; 938  : 		else if (!strcmpi(ptoken, PROP_MFDFONT)) {

	push	OFFSET ??_C@_07NGBNJOAP@mfdfont?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@ParseManag

; 939  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 940  : 			sscanf(ptoken, "%d", &mMFDFont);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 68					; 00000044H
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN31@ParseManag:

; 941  : 		}
; 942  : 		else if (!strcmpi(ptoken, PROP_DEDFONT)) {

	push	OFFSET ??_C@_07PILKJPLJ@dedfont?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@ParseManag

; 943  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 944  : 			sscanf(ptoken, "%d", &mDEDFont);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN29@ParseManag:

; 945  : 		}
; 946  : 		else if (!strcmpi(ptoken, PROP_POPFONT)) {

	push	OFFSET ??_C@_09MOJAANJ@popupfont?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@ParseManag

; 947  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 948  : 			sscanf(ptoken, "%d", &mPopUpFont);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN27@ParseManag:

; 949  : 		}
; 950  : 		else if (!strcmpi(ptoken, PROP_KNEEFONT)) {

	push	OFFSET ??_C@_08PPDLIEGK@kneefont?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@ParseManag

; 951  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 952  : 			sscanf(ptoken, "%d", &mKneeFont);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN25@ParseManag:

; 953  : 		}
; 954  : 		else if (!strcmpi(ptoken, PROP_GENFONT)) {

	push	OFFSET ??_C@_0M@OABGFHLI@generalfont?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@ParseManag

; 955  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 956  : 			sscanf(ptoken, "%d", &mGeneralFont);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN23@ParseManag:

; 957  : 		}
; 958  : 		else if (!strcmpi(ptoken, PROP_SAFONT)) {

	push	OFFSET ??_C@_09DOHPBHPD@saboxfont?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@ParseManag

; 959  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 960  : 			sscanf(ptoken, "%d", &mSABoxFont);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN21@ParseManag:

; 961  : 		}
; 962  : 		else if (!strcmpi(ptoken, PROP_LABELFONT)) {

	push	OFFSET ??_C@_09NEONNCFF@labelfont?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@ParseManag

; 963  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 964  : 			sscanf(ptoken, "%d", &mLabelFont);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN19@ParseManag:

; 965  : 		}
; 966  : 		else if (!strcmpi(ptoken, PROP_TEMPLATEFILE_STR)) {

	push	OFFSET ??_C@_0N@LICNMFFG@templatefile?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN17@ParseManag

; 967  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 968  : 			sscanf(ptoken, "%d", &mTemplateWidth);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 969  : 
; 970  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 971  : 			sscanf(ptoken, "%d", &mTemplateHeight);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 240				; 000000f0H
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 972  : 
; 973  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 974  : 			sscanf(ptoken, "%s", ptemplateFileName);

	lea	eax, DWORD PTR _ptemplateFileName$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 975  : 
; 976  : 			SetupControlTemplate(ptemplateFileName, mTemplateWidth, mTemplateHeight);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+240]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	push	edx
	lea	eax, DWORD PTR _ptemplateFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z ; CockpitManager::SetupControlTemplate
	jmp	$LN3@ParseManag
$LN17@ParseManag:

; 977  : 		}
; 978  : 		else if (!strcmpi(ptoken, PROP_DOGEOMETRY_STR)) {

	push	OFFSET ??_C@_0L@CBADCHBJ@dogeometry?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@ParseManag

; 979  : 			dogeometry = true;

	mov	BYTE PTR _dogeometry$[ebp], 1
	jmp	$LN3@ParseManag
$LN15@ParseManag:

; 980  : 		}
; 981  : 		else if (!strcmpi(ptoken, PROP_DO2DPIT_STR)) {

	push	OFFSET ??_C@_09CPIJGJKD@cockpit2d?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ParseManag

; 982  : 			dogeometry = true;

	mov	BYTE PTR _dogeometry$[ebp], 1

; 983  : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 984  : 			sscanf(ptoken, "%d %d", &twodpit[0], &twodpit[1]);

	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _twodpit$[ebp+ecx]
	push	edx
	mov	eax, 4
	imul	eax, 0
	lea	ecx, DWORD PTR _twodpit$[ebp+eax]
	push	ecx
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H
	jmp	$LN3@ParseManag
$LN13@ParseManag:

; 985  : 		}
; 986  : 		//Wombat778 4-13-04		Read in a panel number to use for a special keystroke
; 987  : 		else if (!strcmpi(ptoken, PROP_ALTPANEL)) {

	push	OFFSET ??_C@_08DOFAMBBG@altpanel?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@ParseManag

; 988  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 989  : 			sscanf(ptoken, "%d", &mAltPanel);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@ParseManag
$LN11@ParseManag:

; 990  : 		}
; 991  : 		//sfr added for lights. Remember, falcon uses 0xAABBGGRR format
; 992  : 		else if (!strcmpi(ptoken, PROP_FLOODLIGHT)) {

	push	OFFSET ??_C@_0L@FCFIFBMP@floodlight?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN9@ParseManag

; 993  : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 994  : 			unsigned int tempFlood;
; 995  : 			sscanf(ptoken, "%x", &tempFlood);

	lea	edx, DWORD PTR _tempFlood$13[ebp]
	push	edx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 996  : 			mFloodLight[2] = (float)((tempFlood & 0xff0000) >> 16) / 0xff;

	mov	ecx, DWORD PTR _tempFlood$13[ebp]
	and	ecx, 16711680				; 00ff0000H
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR tv1157[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv1157[ebp]
	mov	edx, DWORD PTR tv1157[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv1160[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1160[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+256], xmm0

; 997  : 			mFloodLight[1] = (float)((tempFlood & 0x00ff00) >> 8) / 0xff;

	mov	edx, DWORD PTR _tempFlood$13[ebp]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	DWORD PTR tv1168[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1168[ebp]
	mov	eax, DWORD PTR tv1168[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1171[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1171[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+256], xmm0

; 998  : 			mFloodLight[0] = (float)((tempFlood & 0x0000ff) >> 0) / 0xff;

	mov	eax, DWORD PTR _tempFlood$13[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv1179[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1179[ebp]
	mov	ecx, DWORD PTR tv1179[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1182[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1182[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+256], xmm0
	jmp	$LN3@ParseManag
$LN9@ParseManag:

; 999  : 		}
; 1000 : 		else if (!strcmpi(ptoken, PROP_INSTLIGHT)) {

	push	OFFSET ??_C@_09NIAALGLF@instLight?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN7@ParseManag

; 1001 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1002 : 			unsigned int tempInst;
; 1003 : 			sscanf(ptoken, "%x", &tempInst);

	lea	ecx, DWORD PTR _tempInst$12[ebp]
	push	ecx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1004 : 			mInstLight[2] = (float)((tempInst & 0xff0000) >> 16) / 0xff;

	mov	eax, DWORD PTR _tempInst$12[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR tv1197[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv1197[ebp]
	mov	ecx, DWORD PTR tv1197[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv1200[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1200[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx+268], xmm0

; 1005 : 			mInstLight[1] = (float)((tempInst & 0x00ff00) >> 8) / 0xff;

	mov	ecx, DWORD PTR _tempInst$12[ebp]
	and	ecx, 65280				; 0000ff00H
	shr	ecx, 8
	mov	DWORD PTR tv1208[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv1208[ebp]
	mov	edx, DWORD PTR tv1208[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv1211[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1211[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax+268], xmm0

; 1006 : 			mInstLight[0] = (float)((tempInst & 0x0000ff) >> 0) / 0xff;

	mov	edx, DWORD PTR _tempInst$12[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR tv1219[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv1219[ebp]
	mov	eax, DWORD PTR tv1219[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv1222[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv1222[ebp]
	divss	xmm0, DWORD PTR __real@437f0000
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx+268], xmm0
	jmp	SHORT $LN3@ParseManag
$LN7@ParseManag:

; 1007 : 		}
; 1008 : 		else if (!strcmpi(ptoken, PROP_HUDCOLOR_STR)) {

	push	OFFSET ??_C@_08NPHEHNFF@hudcolor?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@ParseManag

; 1009 : 			unsigned int	HudColor;
; 1010 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1011 : 			sscanf(ptoken, "%x", &HudColor);

	lea	eax, DWORD PTR _HudColor$2[ebp]
	push	eax
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@ParseManag
$LN5@ParseManag:

; 1012 : 			//			TheHud->SetHudColor(HudColor);
; 1013 : 		}
; 1014 : 
; 1015 : 		// 2000-11-12 ADDED BY S.G. SO COMMENTED LINE DON'T TRIGGER AN ASSERT
; 1016 : 		else if(!strncmp(ptoken, "//",2))			//Wombat778 4-19-04 converted from strcmpi to strncmp so that comments dont need spaces after

	push	2
	push	OFFSET ??_C@_02CBLDBPFN@?1?1?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
$LN3@ParseManag:

; 1017 : 			;
; 1018 : 		// END OF ADDED SECTION
; 1019 : 		else {
; 1020 : 			// OW <- S.G. NO NEED ANYMORE?
; 1021 : 			CockpitMessage(ptoken, "Manager", gDebugLineNum);
; 1022 : 		}
; 1023 : 
; 1024 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1025 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1026 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1027 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1028 : 	}

	jmp	$LN67@ParseManag
$LN65@ParseManag:

; 1029 : 
; 1030 : 	if (dogeometry) {

	movzx	eax, BYTE PTR _dogeometry$[ebp]
	test	eax, eax
	je	SHORT $LN1@ParseManag

; 1031 : 		CreateCockpitGeometry(&mpGeometry, twodpit[0], twodpit[1]);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _twodpit$[ebp+ecx]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _twodpit$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 696				; 000002b8H
	push	edx
	call	?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z ; CreateCockpitGeometry
	add	esp, 12					; 0000000cH
$LN1@ParseManag:

; 1032 : 	}
; 1033 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-736]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseManagerInfo@CockpitManager@@AAEXPAU_iobuf@@@Z ENDP ; CockpitManager::ParseManagerInfo
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
$T2 = -548						; size = 4
$T3 = -544						; size = 4
$T4 = -540						; size = 4
tv72 = -536						; size = 4
_this$ = -532						; size = 4
_ptemplateFile$ = -528					; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pfileName$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z PROC	; CockpitManager::SetupControlTemplate
; _this$ = ecx

; 707  : void CockpitManager::SetupControlTemplate(char* pfileName, int width, int height) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 536				; 00000218H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 708  : 
; 709  : 	char ptemplateFile[MAX_LINE_BUFFER];
; 710  : 
; 711  : 	if(!gpTemplateSurface) {

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	$LN5@SetupContr

; 712  : 
; 713  : 		gpTemplateSurface	= new ImageBuffer;

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN7@SetupContr
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN8@SetupContr
$LN7@SetupContr:
	mov	DWORD PTR tv72[ebp], 0
$LN8@SetupContr:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, ecx ; gpTemplateSurface

; 714  : 
; 715  : 		// RV - Biker - Use fallback
; 716  : 		//FindCockpit(pfileName, m_eCPVisType, m_eCPName, m_eCPNameNCTR, ptemplateFile);
; 717  : 		FindCockpit(pfileName, m_eCPVisType, m_eCPName, m_eCPNameNCTR, ptemplateFile, TRUE);

	push	1
	lea	edx, DWORD PTR _ptemplateFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 199				; 000000c7H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	push	eax
	mov	ecx, DWORD PTR _pfileName$[ebp]
	push	ecx
	call	?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z ; FindCockpit
	add	esp, 24					; 00000018H

; 718  : 
; 719  : 		gpTemplateSurface->Setup(&FalconDisplay.theDisplayDevice,
; 720  : 				width,
; 721  : 				height,
; 722  : 				SystemMem,
; 723  : 				None);

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 724  : 		gpTemplateSurface->SetChromaKey(0xFFFF0000);

	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?SetChromaKey@ImageBuffer@@QAEXK@Z	; ImageBuffer::SetChromaKey

; 725  : 		if (gpTemplatePalette)

	cmp	DWORD PTR ?gpTemplatePalette@@3PAKA, 0	; gpTemplatePalette
	je	SHORT $LN3@SetupContr

; 726  : 			ReadImage(ptemplateFile, &gpTemplateImage, NULL);

	push	0
	push	OFFSET ?gpTemplateImage@@3PAEA		; gpTemplateImage
	lea	ecx, DWORD PTR _ptemplateFile$[ebp]
	push	ecx
	call	?ReadImage@@YAXPADPAPAEPAPAK@Z		; ReadImage
	add	esp, 12					; 0000000cH

; 727  : 		else

	jmp	SHORT $LN2@SetupContr
$LN3@SetupContr:

; 728  : 			ReadImage(ptemplateFile, &gpTemplateImage, &gpTemplatePalette);

	push	OFFSET ?gpTemplatePalette@@3PAKA	; gpTemplatePalette
	push	OFFSET ?gpTemplateImage@@3PAEA		; gpTemplateImage
	lea	edx, DWORD PTR _ptemplateFile$[ebp]
	push	edx
	call	?ReadImage@@YAXPADPAPAEPAPAK@Z		; ReadImage
	add	esp, 12					; 0000000cH
$LN2@SetupContr:

; 729  : 
; 730  : 		//Wombat778 3-30-04 Save the template information for later use if the cockpit is rendered. This will save a lot of memory because we can free the imagebuffer itself
; 731  : 		if (!TemplateInfo)

	cmp	DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A, 0 ; TemplateInfo
	jne	$LN5@SetupContr

; 732  : 		{
; 733  : 			TemplateInfo = new TemplateInfoClass;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A, eax ; TemplateInfo

; 734  : 			TemplateInfo->redShift = gpTemplateSurface->RedShift();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?RedShift@ImageBuffer@@QAEHXZ		; ImageBuffer::RedShift
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [ecx], eax

; 735  : 			TemplateInfo->blueShift = gpTemplateSurface->BlueShift();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?BlueShift@ImageBuffer@@QAEHXZ		; ImageBuffer::BlueShift
	mov	edx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [edx+16], eax

; 736  : 			TemplateInfo->greenShift = gpTemplateSurface->GreenShift();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?GreenShift@ImageBuffer@@QAEHXZ		; ImageBuffer::GreenShift
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [ecx+8], eax

; 737  : 			TemplateInfo->dwRBitMask = gpTemplateSurface->RedMask();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?RedMask@ImageBuffer@@QAEKXZ		; ImageBuffer::RedMask
	mov	edx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [edx+4], eax

; 738  : 			TemplateInfo->dwBBitMask = gpTemplateSurface->BlueMask();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?BlueMask@ImageBuffer@@QAEKXZ		; ImageBuffer::BlueMask
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [ecx+20], eax

; 739  : 			TemplateInfo->dwGBitMask = gpTemplateSurface->GreenMask();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?GreenMask@ImageBuffer@@QAEKXZ		; ImageBuffer::GreenMask
	mov	edx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [edx+12], eax

; 740  : 			TemplateInfo->pixelsize = gpTemplateSurface->PixelSize();

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	DWORD PTR [ecx+24], eax
$LN5@SetupContr:

; 741  : 		}
; 742  : 
; 743  : 	}
; 744  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetupControlTemplate@CockpitManager@@AAEXPADHH@Z ENDP	; CockpitManager::SetupControlTemplate
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -1196					; size = 4
tv264 = -1192						; size = 4
tv262 = -1188						; size = 4
tv259 = -1184						; size = 4
tv130 = -1180						; size = 4
_plinePtr$ = -1176					; size = 4
_ptoken$ = -1172					; size = 4
_this$ = -1168						; size = 4
$T2 = -1164						; size = 24
$T3 = -1140						; size = 24
_tmp_eCPName$4 = -1116					; size = 24
_tmp_eCPNameNCTR$5 = -1092				; size = 24
_plineBuffer$ = -1068					; size = 512
_psurfaceFile$ = -556					; size = 512
_pfileName$ = -44					; size = 20
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pcockpitDataFile$ = 8					; size = 4
?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z PROC	; CockpitManager::LoadBuffer
; _this$ = ecx

; 1091 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1184				; 000004a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 	char	psurfaceFile[MAX_LINE_BUFFER];
; 1093 : 	char	pfileName[20] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _pfileName$[ebp], al
	xor	ecx, ecx
	mov	DWORD PTR _pfileName$[ebp+1], ecx
	mov	DWORD PTR _pfileName$[ebp+5], ecx
	mov	DWORD PTR _pfileName$[ebp+9], ecx
	mov	DWORD PTR _pfileName$[ebp+13], ecx
	mov	WORD PTR _pfileName$[ebp+17], cx
	mov	BYTE PTR _pfileName$[ebp+19], cl

; 1094 : 	char*	plinePtr;
; 1095 : 	char*	ptoken;
; 1096 : 	char	plineBuffer[MAX_LINE_BUFFER] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], dl
	push	511					; 000001ffH
	push	0
	lea	eax, DWORD PTR _plineBuffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1097 : 	const int lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1098 : 	char	pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1099 : 
; 1100 : 
; 1101 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1102 : 	gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 1103 : 	plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 1104 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN12@LoadBuffer:

; 1105 : 
; 1106 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN11@LoadBuffer

; 1107 : 
; 1108 : 		if(!strcmpi(ptoken, PROP_FILENAME_STR)) {

	push	OFFSET ??_C@_08BABJIOEM@filename?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN10@LoadBuffer

; 1109 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1110 : 			sscanf(ptoken, "%s", pfileName);

	lea	edx, DWORD PTR _pfileName$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1111 : 
; 1112 : 			// RV - Biker - Check for valid naming here also
; 1113 : 			std::string tmp_eCPName     = RemoveInvalidChars(string(m_eCPName, 15));

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR tv264[ebp], eax
	mov	edx, DWORD PTR tv264[ebp]
	mov	DWORD PTR tv259[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv259[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp_eCPName$4[ebp]
	push	ecx
	call	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1114 : 			std::string tmp_eCPNameNCTR = RemoveInvalidChars(string(m_eCPNameNCTR, 5));

	push	5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 199				; 000000c7H
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR tv130[ebp], eax
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv262[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv262[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp_eCPNameNCTR$5[ebp]
	push	edx
	call	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1115 : 
; 1116 : 			if(m_eCPVisType == MapVisId(VIS_F16C)){

	push	1052					; 0000041cH
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+180], eax
	jne	SHORT $LN9@LoadBuffer

; 1117 : 				//sprintf(psurfaceFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pfileName);
; 1118 : 				sprintf(psurfaceFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pfileName);

	lea	edx, DWORD PTR _pfileName$[ebp]
	push	edx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _psurfaceFile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1119 : 			}
; 1120 : 			else

	jmp	$LN8@LoadBuffer
$LN9@LoadBuffer:

; 1121 : 			{
; 1122 : 				sprintf(psurfaceFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(m_eCPVisType), pfileName);

	lea	ecx, DWORD PTR _pfileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	push	eax
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_07HGFHNNDO@?$CFs?$CFd?2?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 1123 : 
; 1124 : 				//if(!ResExistFile(psurfaceFile))
; 1125 : 				if(!FileExists(psurfaceFile))

	lea	edx, DWORD PTR _psurfaceFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	jne	$LN8@LoadBuffer

; 1126 : 				{
; 1127 :                     //sprintf(psurfaceFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, m_eCPName, pfileName);
; 1128 : 					sprintf(psurfaceFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, tmp_eCPName.c_str(), pfileName);

	lea	eax, DWORD PTR _pfileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp_eCPName$4[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 1129 : 					
; 1130 : 					//if(!ResExistFile(psurfaceFile))
; 1131 : 					if(!FileExists(psurfaceFile))

	lea	edx, DWORD PTR _psurfaceFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@LoadBuffer

; 1132 : 					{
; 1133 : 						//sprintf(psurfaceFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, m_eCPNameNCTR, pfileName);
; 1134 : 						sprintf(psurfaceFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, tmp_eCPNameNCTR.c_str(), pfileName);

	lea	eax, DWORD PTR _pfileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$5[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 1135 : 
; 1136 : 						//if(!ResExistFile(psurfaceFile))
; 1137 : 						if(!FileExists(psurfaceFile))

	lea	edx, DWORD PTR _psurfaceFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@LoadBuffer

; 1138 : 						{
; 1139 : 							// F16C fallback
; 1140 : 							//sprintf(psurfaceFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pfileName);
; 1141 : 							sprintf(psurfaceFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pfileName);

	lea	eax, DWORD PTR _pfileName$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN8@LoadBuffer:

; 1142 : 						}
; 1143 : 					}
; 1144 : 				}
; 1145 : 			}
; 1146 : 		}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$5[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$4[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	jmp	SHORT $LN4@LoadBuffer
$LN10@LoadBuffer:

; 1147 : 		else if(!strcmpi(ptoken, PROP_BUFFERSIZE_STR)) {

	push	OFFSET ??_C@_0L@JDIJOBFO@buffersize?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@LoadBuffer

; 1148 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1149 : 			sscanf(ptoken, "%d %d", &mLoadBufferWidth, &mLoadBufferHeight);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 16					; 00000010H
$LN4@LoadBuffer:

; 1150 : 		}
; 1151 : 		else {
; 1152 : 			CockpitMessage(ptoken, "Template", gDebugLineNum);
; 1153 : 		}
; 1154 : 
; 1155 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1156 : 		gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 1157 : 		plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 1158 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1159 : 	}

	jmp	$LN12@LoadBuffer
$LN11@LoadBuffer:

; 1160 : 
; 1161 : 	if(mpLoadBuffer) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+232], 0
	je	SHORT $LN1@LoadBuffer

; 1162 : 		glReleaseMemory((char*) mpLoadBuffer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4
$LN1@LoadBuffer:

; 1163 : 	}
; 1164 : 
; 1165 : 	ReadImage(psurfaceFile, &mpLoadBuffer, NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	push	ecx
	lea	edx, DWORD PTR _psurfaceFile$[ebp]
	push	edx
	call	?ReadImage@@YAXPADPAPAEPAPAK@Z		; ReadImage
	add	esp, 12					; 0000000cH

; 1166 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$1:
	lea	ecx, DWORD PTR _tmp_eCPName$4[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z$3:
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$5[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z ENDP	; CockpitManager::LoadBuffer
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -696					; size = 4
$T2 = -692						; size = 4
$T3 = -688						; size = 4
_p$ = -684						; size = 4
$T4 = -680						; size = 4
tv223 = -676						; size = 4
_plinePtr$ = -672					; size = 4
_this$ = -668						; size = 4
_ptoken$ = -664						; size = 4
_objectInitStr$ = -660					; size = 92
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateMirror
; _this$ = ecx

; 2731 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 684				; 000002acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2732 : 	char plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2733 : 	char *plinePtr;
; 2734 : 	char *ptoken;
; 2735 : 	char pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 2736 : 	const int lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 2737 : 	char ptransparencyStr[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptransparencyStr$[ebp+1], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+5], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+9], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+13], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+17], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+21], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+25], eax
	mov	WORD PTR _ptransparencyStr$[ebp+29], ax
	mov	BYTE PTR _ptransparencyStr$[ebp+31], al

; 2738 : 
; 2739 : 	ObjectInitStr objectInitStr;
; 2740 : 	memset(&objectInitStr, 0, sizeof(objectInitStr));

	push	92					; 0000005cH
	push	0
	lea	ecx, DWORD PTR _objectInitStr$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2741 : 	objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1

; 2742 : 	objectInitStr.callbackSlot		= -1;

	mov	DWORD PTR _objectInitStr$[ebp+4], -1

; 2743 : 
; 2744 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 2745 : 	++gDebugLineNum;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 2746 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 2747 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN12@CreateMirr:

; 2748 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN11@CreateMirr

; 2749 : 		if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@CreateMirr

; 2750 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2751 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	edx, DWORD PTR _objectInitStr$[ebp+12]
	push	edx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMirr
$LN10@CreateMirr:

; 2752 : 		}
; 2753 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN8@CreateMirr

; 2754 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2755 : 			sscanf(ptoken, "%s %d %d %d %d", 
; 2756 : 				ptransparencyStr,
; 2757 : 				&(objectInitStr.destRect.top), 
; 2758 : 				&(objectInitStr.destRect.left), 
; 2759 : 				&(objectInitStr.destRect.bottom), 
; 2760 : 				&(objectInitStr.destRect.right)
; 2761 : 			);

	lea	eax, DWORD PTR _objectInitStr$[ebp+64]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+68]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+56]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+60]
	push	eax
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 2762 : 			if (!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CreateMirr

; 2763 : 				objectInitStr.transparencyType	= CPTRANSPARENT;

	mov	DWORD PTR _objectInitStr$[ebp+8], 1
	jmp	SHORT $LN5@CreateMirr
$LN7@CreateMirr:

; 2764 : 			}
; 2765 : 			else if (!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateMirr

; 2766 : 				objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0
$LN5@CreateMirr:

; 2767 : 			}
; 2768 : 		}

	jmp	$LN3@CreateMirr
$LN8@CreateMirr:

; 2769 : 		else if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@CreateMirr

; 2770 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2771 : 			sscanf(ptoken, "%d %d %d %d", 
; 2772 : 				&(objectInitStr.bsrcRect.top), 
; 2773 : 				&(objectInitStr.bsrcRect.left), 
; 2774 : 				&(objectInitStr.bsrcRect.bottom), 
; 2775 : 				&(objectInitStr.bsrcRect.right)
; 2776 : 			);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+32]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+36]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+24]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+28]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H

; 2777 : 			objectInitStr.bsrcRect.bottom++;

	mov	eax, DWORD PTR _objectInitStr$[ebp+36]
	add	eax, 1
	mov	DWORD PTR _objectInitStr$[ebp+36], eax

; 2778 : 			objectInitStr.bsrcRect.right++;

	mov	ecx, DWORD PTR _objectInitStr$[ebp+32]
	add	ecx, 1
	mov	DWORD PTR _objectInitStr$[ebp+32], ecx
$LN3@CreateMirr:

; 2779 : 		}
; 2780 : 		else {
; 2781 : 			CockpitMessage(ptoken, "Mirror", gDebugLineNum);
; 2782 : 		}
; 2783 : 
; 2784 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 2785 : 		++gDebugLineNum;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 2786 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 2787 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2788 : 	}

	jmp	$LN12@CreateMirr
$LN11@CreateMirr:

; 2789 : 
; 2790 : 	objectInitStr.hScale = mHScale;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 2791 : 	objectInitStr.vScale = mVScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 2792 : 	objectInitStr.idNum  = idNum;

	mov	ecx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], ecx

; 2793 : 	objectInitStr.pOTWImage = mpOTWImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], eax

; 2794 : 	objectInitStr.pTemplate = gpTemplateSurface;

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], ecx

; 2795 : 	objectInitStr.pCPManager = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], edx

; 2796 : 	// @TODO copy the mirror image to constructor
; 2797 : 	/*if ((source.bottom-source.top)* (source.right-source.left) >=0){
; 2798 : 		hsiInitStr.sourcehsi = new BYTE[(source.bottom-source.top)* (source.right-source.left)];	 
; 2799 : 	}
; 2800 : 	else {
; 2801 : 		hsiInitStr.sourcehsi = NULL;
; 2802 : 	}
; 2803 : 	SafeImageCopy(gpTemplateImage, hsiInitStr.sourcehsi, mTemplateHeight, mTemplateWidth, &source);*/
; 2804 : 
; 2805 : 	CPMirror *p = new CPMirror(objectInitStr);

	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@CreateMirr
	lea	eax, DWORD PTR _objectInitStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPMirror@@QAE@ABUObjectInitStr@@@Z	; CPMirror::CPMirror
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN16@CreateMirr
$LN15@CreateMirr:
	mov	DWORD PTR tv223[ebp], 0
$LN16@CreateMirr:
	mov	ecx, DWORD PTR tv223[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], edx

; 2806 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateMirr
	jmp	SHORT $LN13@CreateMirr
$LN1@CreateMirr:

; 2807 : 	mpObjects.push_back(p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 2808 : 	mObjectTally++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN13@CreateMirr:

; 2809 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-688]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateMirror@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateMirror
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -664					; size = 4
$T2 = -660						; size = 4
$T3 = -656						; size = 4
$T4 = -652						; size = 4
tv190 = -648						; size = 4
_p$ = -644						; size = 4
_plinePtr$ = -640					; size = 4
_this$ = -636						; size = 4
_ptoken$ = -632						; size = 4
_objectInitStr$ = -628					; size = 92
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateKneeView
; _this$ = ecx

; 2665 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 652				; 0000028cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2666 : 	char						plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2667 : 	char*						plinePtr;
; 2668 : 	char						*ptoken;
; 2669 : 	char						pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 2670 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 2671 : 	ObjectInitStr			objectInitStr;
; 2672 : 
; 2673 : 	objectInitStr.cycleBits			= 0x0000;

	mov	DWORD PTR _objectInitStr$[ebp+12], 0

; 2674 : 
; 2675 : 	objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 2676 : 	objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 2677 : 	objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 2678 : 	objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 2679 : 	objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	edx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], edx

; 2680 : 	objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1

; 2681 : 	objectInitStr.callbackSlot		= -1;

	mov	DWORD PTR _objectInitStr$[ebp+4], -1

; 2682 : 
; 2683 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 2684 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 2685 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 2686 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN7@CreateKnee:

; 2687 : 
; 2688 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN6@CreateKnee

; 2689 : 
; 2690 : 		if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateKnee

; 2691 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2692 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	eax, DWORD PTR _objectInitStr$[ebp+12]
	push	eax
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@CreateKnee
$LN5@CreateKnee:

; 2693 : 		}
; 2694 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@CreateKnee

; 2695 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2696 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.destRect.top), 
; 2697 : 					&(objectInitStr.destRect.left), 
; 2698 : 					&(objectInitStr.destRect.bottom), 
; 2699 : 					&(objectInitStr.destRect.right));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+64]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+68]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+60]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
$LN3@CreateKnee:

; 2700 : 
; 2701 : 		}
; 2702 : 		else {
; 2703 : 			CockpitMessage(ptoken, "Kneeboard", gDebugLineNum);
; 2704 : 		}
; 2705 : 
; 2706 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 2707 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 2708 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 2709 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2710 : 	}

	jmp	$LN7@CreateKnee
$LN6@CreateKnee:

; 2711 : 
; 2712 : 	objectInitStr.hScale			= mHScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 2713 : 	objectInitStr.vScale			= mVScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 2714 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 2715 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 2716 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 2717 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 2718 : 
; 2719 : 	CPKneeView *p = new CPKneeView(&objectInitStr, mpKneeBoard);

	push	263052					; 0004038cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN10@CreateKnee
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+700]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPKneeView@@QAE@PAUObjectInitStr@@PAVKneeBoard@@@Z ; CPKneeView::CPKneeView
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN11@CreateKnee
$LN10@CreateKnee:
	mov	DWORD PTR tv190[ebp], 0
$LN11@CreateKnee:
	mov	ecx, DWORD PTR tv190[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$[ebp], edx

; 2720 : 	ShiAssert(p);
; 2721 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateKnee
	jmp	SHORT $LN8@CreateKnee
$LN1@CreateKnee:

; 2722 : 
; 2723 : 	mpObjects.push_back(p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 2724 : 	mObjectTally++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN8@CreateKnee:

; 2725 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-656]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateKneeView@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateKneeView
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -544					; size = 4
_this$ = -540						; size = 4
_entry$ = -536						; size = 4
_plinePtr$ = -532					; size = 4
_ptoken$ = -528						; size = 4
_plineBuffer$ = -524					; size = 512
_pseparators$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateSound@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateSound
; _this$ = ecx

; 1038 : void CockpitManager::CreateSound(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	sub	esp, 544				; 00000220H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1039 : 
; 1040 : 	int entry=0;

	mov	DWORD PTR _entry$[ebp], 0

; 1041 : 	const int	lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1042 : 	char*			plinePtr=NULL;

	mov	DWORD PTR _plinePtr$[ebp], 0

; 1043 : 	char*			ptoken=NULL;

	mov	DWORD PTR _ptoken$[ebp], 0

; 1044 : 	char			plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1045 : 	char			pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1046 : 
; 1047 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 1048 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 1049 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 1050 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN4@CreateSoun:

; 1051 : 
; 1052 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN3@CreateSoun

; 1053 : 
; 1054 : 		if(!strcmpi(ptoken, PROP_ENTRY_STR)) {

	push	OFFSET ??_C@_05HNNDEAND@entry?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@CreateSoun

; 1055 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1056 : 			sscanf(ptoken, "%d", &entry);

	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN1@CreateSoun:

; 1057 : 		}
; 1058 : 		else {
; 1059 : 			CockpitMessage(ptoken, "Sound", gDebugLineNum);
; 1060 : 		}
; 1061 : 
; 1062 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1063 : 		gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 1064 : 		plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 1065 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1066 : 	}

	jmp	$LN4@CreateSoun
$LN3@CreateSoun:

; 1067 : 
; 1068 : 	mpSoundList->AddSound(idNum, entry);

	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _idNum$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	call	?AddSound@CPSoundList@@QAEXHH@Z		; CPSoundList::AddSound

; 1069 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?CreateSound@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateSound
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -724					; size = 4
$T2 = -720						; size = 4
$T3 = -716						; size = 4
$T4 = -712						; size = 4
$T5 = -708						; size = 4
$T6 = -704						; size = 4
$T7 = -700						; size = 4
tv274 = -696						; size = 4
_p$ = -692						; size = 4
$T8 = -688						; size = 4
tv376 = -684						; size = 4
_digitsInitStr$ = -680					; size = 16
$T9 = -664						; size = 4
_destIndex$ = -660					; size = 4
_srcIndex$ = -656					; size = 4
_pdestRects$ = -652					; size = 4
_plinePtr$ = -648					; size = 4
_this$ = -644						; size = 4
_i$10 = -640						; size = 4
_psrcRects$ = -636					; size = 4
_ptoken$ = -632						; size = 4
_objectInitStr$ = -628					; size = 92
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateDigits
; _this$ = ecx

; 1491 : void CockpitManager::CreateDigits(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 712				; 000002c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1492 : 
; 1493 : 	char					plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1494 : 	char*					plinePtr;
; 1495 : 	char					*ptoken;
; 1496 : 	char					pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1497 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1498 : 
; 1499 : 	DigitsInitStr			digitsInitStr={0};

	mov	DWORD PTR _digitsInitStr$[ebp], 0
	xor	edx, edx
	mov	DWORD PTR _digitsInitStr$[ebp+4], edx
	mov	DWORD PTR _digitsInitStr$[ebp+8], edx
	mov	DWORD PTR _digitsInitStr$[ebp+12], edx

; 1500 : 	ObjectInitStr			objectInitStr;
; 1501 : 	int						destIndex = 0;

	mov	DWORD PTR _destIndex$[ebp], 0

; 1502 : 	RECT					*pdestRects=NULL;

	mov	DWORD PTR _pdestRects$[ebp], 0

; 1503 : 	int						srcIndex =0;

	mov	DWORD PTR _srcIndex$[ebp], 0

; 1504 : 	RECT					*psrcRects;
; 1505 : 
; 1506 : #ifdef USE_SH_POOLS
; 1507 : 	psrcRects = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT)*10,FALSE);
; 1508 : #else
; 1509 : 	psrcRects	= new RECT[10];

	push	160					; 000000a0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _psrcRects$[ebp], eax

; 1510 : #endif
; 1511 : 
; 1512 : 	objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 1513 : 	objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 1514 : 	objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 1515 : 	objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 1516 : 	objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	ecx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], ecx

; 1517 : 	objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1

; 1518 : 	digitsInitStr.numDestDigits   = 0;

	mov	DWORD PTR _digitsInitStr$[ebp+4], 0

; 1519 : 
; 1520 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 1521 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 1522 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 1523 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN23@CreateDigi:

; 1524 : 
; 1525 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN22@CreateDigi

; 1526 : 
; 1527 : 		if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CreateDigi

; 1528 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1529 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	edx, DWORD PTR _objectInitStr$[ebp+12]
	push	edx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN11@CreateDigi
$LN21@CreateDigi:

; 1530 : 		}
; 1531 : 		else if(!strcmpi(ptoken, PROP_NUMDIGITS_STR)) {

	push	OFFSET ??_C@_09EIFFFPLD@numdigits?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CreateDigi

; 1532 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1533 : 			sscanf(ptoken, "%d", &digitsInitStr.numDestDigits);

	lea	ecx, DWORD PTR _digitsInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1534 : 
; 1535 : #ifdef USE_SH_POOLS
; 1536 : 			if(digitsInitStr.numDestDigits > 0) {
; 1537 : 				pdestRects = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT)*digitsInitStr.numDestDigits,FALSE);
; 1538 : 			}
; 1539 : #else
; 1540 : 			pdestRects = new RECT[digitsInitStr.numDestDigits];

	xor	ecx, ecx
	mov	eax, DWORD PTR _digitsInitStr$[ebp+4]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _pdestRects$[ebp], eax
	jmp	$LN11@CreateDigi
$LN19@CreateDigi:

; 1541 : #endif
; 1542 : 
; 1543 : 		}
; 1544 : 		else if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN17@CreateDigi

; 1545 : 			F4Assert(srcIndex < 10);
; 1546 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1547 : 			sscanf(ptoken, "%d %d %d %d", &(psrcRects[srcIndex].top), 
; 1548 : 					&(psrcRects[srcIndex].left), 
; 1549 : 					&(psrcRects[srcIndex].bottom), 
; 1550 : 					&(psrcRects[srcIndex].right));

	mov	eax, DWORD PTR _srcIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psrcRects$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _srcIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psrcRects$[ebp]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _srcIndex$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _psrcRects$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psrcRects$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 1551 : 			srcIndex++;

	mov	edx, DWORD PTR _srcIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _srcIndex$[ebp], edx
	jmp	$LN11@CreateDigi
$LN17@CreateDigi:

; 1552 : 		}
; 1553 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN15@CreateDigi

; 1554 : 			F4Assert(destIndex < digitsInitStr.numDestDigits);
; 1555 : 
; 1556 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1557 : 			sscanf(ptoken, "%d %d %d %d", &(pdestRects[destIndex].top), 
; 1558 : 					&(pdestRects[destIndex].left), 
; 1559 : 					&(pdestRects[destIndex].bottom), 
; 1560 : 					&(pdestRects[destIndex].right));

	mov	edx, DWORD PTR _destIndex$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pdestRects$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	mov	edx, DWORD PTR _destIndex$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _pdestRects$[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	mov	edx, DWORD PTR _destIndex$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _pdestRects$[ebp]
	push	edx
	mov	eax, DWORD PTR _destIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pdestRects$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H

; 1561 : 
; 1562 : 			destIndex++;

	mov	ecx, DWORD PTR _destIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destIndex$[ebp], ecx
	jmp	$LN11@CreateDigi
$LN15@CreateDigi:

; 1563 : 		}
; 1564 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CreateDigi

; 1565 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1566 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	edx, DWORD PTR _objectInitStr$[ebp+4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN11@CreateDigi
$LN13@CreateDigi:

; 1567 : 		}
; 1568 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@CreateDigi

; 1569 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1570 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+16]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN11@CreateDigi:

; 1571 : 		}
; 1572 : 		else {
; 1573 : 			CockpitMessage(ptoken, "Digit", gDebugLineNum);
; 1574 : 		}
; 1575 : 
; 1576 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1577 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1578 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1579 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1580 : 	}

	jmp	$LN23@CreateDigi
$LN22@CreateDigi:

; 1581 : 
; 1582 : 	digitsInitStr.psrcRects = psrcRects;

	mov	eax, DWORD PTR _psrcRects$[ebp]
	mov	DWORD PTR _digitsInitStr$[ebp], eax

; 1583 : 	digitsInitStr.pdestRects = pdestRects;

	mov	ecx, DWORD PTR _pdestRects$[ebp]
	mov	DWORD PTR _digitsInitStr$[ebp+8], ecx

; 1584 : 
; 1585 : 	objectInitStr.hScale			= mHScale;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 1586 : 	objectInitStr.vScale			= mVScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 1587 : 
; 1588 : 	//Wombat778 3-22-04 Code for rendering the digits instead of blitting
; 1589 : 	//Wombat778 4-11-04 added some error reporting
; 1590 : 
; 1591 : 	if (DisplayOptions.bRender2DCockpit)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	$LN2@CreateDigi

; 1592 : 	{
; 1593 : 		digitsInitStr.sourcedigits = new SourceDigitType[10];	 

	push	244					; 000000f4H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN26@CreateDigi
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx], 10			; 0000000aH
	push	OFFSET ??1SourceDigitType@@QAE@XZ
	push	OFFSET ??0SourceDigitType@@QAE@XZ
	push	10					; 0000000aH
	push	24					; 00000018H
	mov	eax, DWORD PTR $T9[ebp]
	add	eax, 4
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	ecx, DWORD PTR $T9[ebp]
	add	ecx, 4
	mov	DWORD PTR tv274[ebp], ecx
	jmp	SHORT $LN27@CreateDigi
$LN26@CreateDigi:
	mov	DWORD PTR tv274[ebp], 0
$LN27@CreateDigi:
	mov	edx, DWORD PTR tv274[ebp]
	mov	DWORD PTR $T6[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR _digitsInitStr$[ebp+12], eax

; 1594 : 		if (digitsInitStr.sourcedigits)

	cmp	DWORD PTR _digitsInitStr$[ebp+12], 0
	je	$LN8@CreateDigi

; 1595 : 			for(int i = 0; i < 10; i++)

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN7@CreateDigi
$LN6@CreateDigi:
	mov	ecx, DWORD PTR _i$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$10[ebp], ecx
$LN7@CreateDigi:
	cmp	DWORD PTR _i$10[ebp], 10		; 0000000aH
	jge	$LN5@CreateDigi

; 1596 : 			{										
; 1597 : 				//Wombat778 4-13-04 prevent a heap error with pit errors
; 1598 : 				if ((psrcRects[i].bottom-psrcRects[i].top)* (psrcRects[i].right-psrcRects[i].left) > 0)	//Wombat778 4-22-04 changed from >=  to >

	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psrcRects$[ebp]
	mov	esi, DWORD PTR _psrcRects$[ebp]
	mov	edx, DWORD PTR [ecx+edx+12]
	sub	edx, DWORD PTR [esi+eax+4]
	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 4
	mov	esi, DWORD PTR _psrcRects$[ebp]
	mov	edi, DWORD PTR _psrcRects$[ebp]
	mov	eax, DWORD PTR [esi+eax+8]
	sub	eax, DWORD PTR [edi+ecx]
	imul	edx, eax
	test	edx, edx
	jle	SHORT $LN4@CreateDigi

; 1599 : 					digitsInitStr.sourcedigits[i].digit = new BYTE[(psrcRects[i].bottom-psrcRects[i].top)* (psrcRects[i].right-psrcRects[i].left)];	 

	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _psrcRects$[ebp]
	mov	esi, DWORD PTR _psrcRects$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+12]
	sub	ecx, DWORD PTR [esi+edx+4]
	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 4
	mov	esi, DWORD PTR _psrcRects$[ebp]
	mov	edi, DWORD PTR _psrcRects$[ebp]
	mov	edx, DWORD PTR [esi+edx+8]
	sub	edx, DWORD PTR [edi+eax]
	imul	ecx, edx
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR _i$10[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _digitsInitStr$[ebp+12]
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 1600 : 				else 

	jmp	SHORT $LN3@CreateDigi
$LN4@CreateDigi:

; 1601 : 					digitsInitStr.sourcedigits[i].digit = NULL;		

	mov	eax, DWORD PTR _i$10[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _digitsInitStr$[ebp+12]
	mov	DWORD PTR [ecx+eax], 0
$LN3@CreateDigi:

; 1602 : 
; 1603 : 				SafeImageCopy(gpTemplateImage, digitsInitStr.sourcedigits[i].digit, mTemplateHeight, mTemplateWidth, &psrcRects[i]);					//wombat778 4-11-04 make safeimagecopy always used									

	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _psrcRects$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+240]
	push	eax
	mov	ecx, DWORD PTR _i$10[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _digitsInitStr$[ebp+12]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy

; 1604 : 			}

	jmp	$LN6@CreateDigi
$LN5@CreateDigi:
	jmp	SHORT $LN2@CreateDigi
$LN8@CreateDigi:

; 1605 : 		else
; 1606 : 			CockpitError(gDebugLineNum,1);	//Wombat778 4-11-04

	push	1
	mov	edx, DWORD PTR _gDebugLineNum
	push	edx
	call	?CockpitError@@YAXHH@Z			; CockpitError
	add	esp, 8
$LN2@CreateDigi:

; 1607 : 	}
; 1608 : 
; 1609 : 	//Wombat778 end
; 1610 : 
; 1611 : 	objectInitStr.idNum			= idNum;

	mov	eax, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], eax

; 1612 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], edx

; 1613 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	eax, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], eax

; 1614 : 	objectInitStr.pCPManager	= this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], ecx

; 1615 : 	objectInitStr.destRect		= digitsInitStr.pdestRects[0];

	mov	edx, 16					; 00000010H
	imul	edx, 0
	add	edx, DWORD PTR _digitsInitStr$[ebp+8]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _objectInitStr$[ebp+56], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _objectInitStr$[ebp+60], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _objectInitStr$[ebp+64], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _objectInitStr$[ebp+68], ecx

; 1616 : 	digitsInitStr.psrcRects		= psrcRects;

	mov	edx, DWORD PTR _psrcRects$[ebp]
	mov	DWORD PTR _digitsInitStr$[ebp], edx

; 1617 : 	digitsInitStr.pdestRects	= pdestRects;

	mov	eax, DWORD PTR _pdestRects$[ebp]
	mov	DWORD PTR _digitsInitStr$[ebp+8], eax

; 1618 : 
; 1619 : 	CPDigits *p = new CPDigits(&objectInitStr, &digitsInitStr);

	push	176					; 000000b0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN28@CreateDigi
	lea	ecx, DWORD PTR _digitsInitStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0CPDigits@@QAE@PAUObjectInitStr@@PAUDigitsInitStr@@@Z ; CPDigits::CPDigits
	mov	DWORD PTR tv376[ebp], eax
	jmp	SHORT $LN29@CreateDigi
$LN28@CreateDigi:
	mov	DWORD PTR tv376[ebp], 0
$LN29@CreateDigi:
	mov	eax, DWORD PTR tv376[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 1620 : 	ShiAssert(p);
; 1621 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateDigi
	jmp	SHORT $LN24@CreateDigi
$LN1@CreateDigi:

; 1622 : 
; 1623 : 	mpObjects.push_back(p);

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T7[ebp], edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1624 : 	mObjectTally++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN24@CreateDigi:

; 1625 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-724]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateDigits@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateDigits
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -876					; size = 4
$T2 = -872						; size = 4
$T3 = -868						; size = 4
$T4 = -864						; size = 4
$T5 = -860						; size = 4
_p$ = -856						; size = 4
tv542 = -852						; size = 4
_transparencyType$ = -848				; size = 4
_srccount$ = -844					; size = 4
_destcount$ = -840					; size = 4
_this$ = -836						; size = 4
_plinePtr$ = -832					; size = 4
_ptoken$ = -828						; size = 4
_objectInitStr$ = -824					; size = 92
_hsiInitStr$ = -732					; size = 132
_source$ = -600						; size = 16
_destination$ = -584					; size = 16
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateHsiView
; _this$ = ecx

; 3396 : void CockpitManager::CreateHsiView(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 864				; 00000360H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3397 : 
; 3398 : 	char						plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3399 : 	char*						plinePtr;
; 3400 : 	char						*ptoken;
; 3401 : 	char						pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 3402 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 3403 : 	ObjectInitStr			objectInitStr;
; 3404 : 	char						ptransparencyStr[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptransparencyStr$[ebp+1], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+5], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+9], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+13], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+17], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+21], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+25], eax
	mov	WORD PTR _ptransparencyStr$[ebp+29], ax
	mov	BYTE PTR _ptransparencyStr$[ebp+31], al

; 3405 : 	int						destcount = 0;

	mov	DWORD PTR _destcount$[ebp], 0

; 3406 : 	int						srccount = 0;

	mov	DWORD PTR _srccount$[ebp], 0

; 3407 : 	RECT						destination;
; 3408 : 	RECT						source;
; 3409 : 	int						transparencyType=0;

	mov	DWORD PTR _transparencyType$[ebp], 0

; 3410 : 	HsiInitStr				hsiInitStr;
; 3411 : 
; 3412 : 
; 3413 : 	//MI
; 3414 : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	$LN61@CreateHsiV

; 3415 : 	{
; 3416 : 		hsiInitStr.colors[HSI_COLOR_ARROWS] = 0xff1e6cff;

	mov	edx, 4
	imul	edx, 0
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -14783233 ; ff1e6cffH

; 3417 : 		hsiInitStr.colors[HSI_COLOR_ARROWGHOST] = 0xff1e6cff;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -14783233 ; ff1e6cffH

; 3418 : 		hsiInitStr.colors[HSI_COLOR_COURSEWARN] = 0xff0000ff;

	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _hsiInitStr$[ebp+ecx+88], -16776961 ; ff0000ffH

; 3419 : 		hsiInitStr.colors[HSI_COLOR_HEADINGMARK] = 0xff469646;

	mov	edx, 4
	imul	edx, 3
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -12151226 ; ff469646H

; 3420 : 		hsiInitStr.colors[HSI_COLOR_STATIONBEARING] = 0xff323cff;

	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -13484801 ; ff323cffH

; 3421 : 		hsiInitStr.colors[HSI_COLOR_COURSE] = 0xff73dcf0;

	mov	ecx, 4
	imul	ecx, 5
	mov	DWORD PTR _hsiInitStr$[ebp+ecx+88], -9184016 ; ff73dcf0H

; 3422 : 		hsiInitStr.colors[HSI_COLOR_AIRCRAFT] = 0xffe0e0e0;

	mov	edx, 4
	imul	edx, 6
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -2039584 ; ffe0e0e0H

; 3423 : 		hsiInitStr.colors[HSI_COLOR_CIRCLES] = 0xffe0e0e0;

	mov	eax, 4
	imul	eax, 7
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -2039584 ; ffe0e0e0H

; 3424 : 		hsiInitStr.colors[HSI_COLOR_DEVBAR] = 0xff73dcf0;

	mov	ecx, 4
	shl	ecx, 3
	mov	DWORD PTR _hsiInitStr$[ebp+ecx+88], -9184016 ; ff73dcf0H

; 3425 : 		hsiInitStr.colors[HSI_COLOR_ILSDEVWARN] = 0xff0000fd;

	mov	edx, 4
	imul	edx, 9
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -16776963 ; ff0000fdH

; 3426 : 	}
; 3427 : 	else

	jmp	$LN60@CreateHsiV
$LN61@CreateHsiV:

; 3428 : 	{
; 3429 : 		hsiInitStr.colors[HSI_COLOR_ARROWS] = 0xff0000ff;

	mov	eax, 4
	imul	eax, 0
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -16776961 ; ff0000ffH

; 3430 : 		hsiInitStr.colors[HSI_COLOR_ARROWGHOST] = 0xff0000ff;

	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _hsiInitStr$[ebp+ecx+88], -16776961 ; ff0000ffH

; 3431 : 		hsiInitStr.colors[HSI_COLOR_COURSEWARN] = 0xff0000ff;

	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -16776961 ; ff0000ffH

; 3432 : 		hsiInitStr.colors[HSI_COLOR_HEADINGMARK] = 0xffffffff;

	mov	eax, 4
	imul	eax, 3
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -1

; 3433 : 		hsiInitStr.colors[HSI_COLOR_STATIONBEARING] = 0xffffffff;

	mov	ecx, 4
	shl	ecx, 2
	mov	DWORD PTR _hsiInitStr$[ebp+ecx+88], -1

; 3434 : 		hsiInitStr.colors[HSI_COLOR_COURSE] = 0xffffffff;

	mov	edx, 4
	imul	edx, 5
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -1

; 3435 : 		hsiInitStr.colors[HSI_COLOR_AIRCRAFT] = 0xffffffff;

	mov	eax, 4
	imul	eax, 6
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -1

; 3436 : 		hsiInitStr.colors[HSI_COLOR_CIRCLES] = 0xffe0e0e0;

	mov	ecx, 4
	imul	ecx, 7
	mov	DWORD PTR _hsiInitStr$[ebp+ecx+88], -2039584 ; ffe0e0e0H

; 3437 : 		hsiInitStr.colors[HSI_COLOR_DEVBAR] = 0xffffffff;

	mov	edx, 4
	shl	edx, 3
	mov	DWORD PTR _hsiInitStr$[ebp+edx+88], -1

; 3438 : 		hsiInitStr.colors[HSI_COLOR_ILSDEVWARN] = 0xff0000fd;

	mov	eax, 4
	imul	eax, 9
	mov	DWORD PTR _hsiInitStr$[ebp+eax+88], -16776963 ; ff0000fdH
$LN60@CreateHsiV:

; 3439 : 	}
; 3440 : 
; 3441 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 3442 : 	gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 3443 : 	plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 3444 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN59@CreateHsiV:

; 3445 : 
; 3446 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN58@CreateHsiV

; 3447 : 
; 3448 : 		if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN57@CreateHsiV

; 3449 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3450 : 			sscanf(ptoken, "%d %d %d %d", &(source.top), 
; 3451 : 					&(source.left), 
; 3452 : 					&(source.bottom), 
; 3453 : 					&(source.right));

	lea	ecx, DWORD PTR _source$[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _source$[ebp+12]
	push	edx
	lea	eax, DWORD PTR _source$[ebp]
	push	eax
	lea	ecx, DWORD PTR _source$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H

; 3454 : 			if(srccount == 0) {

	cmp	DWORD PTR _srccount$[ebp], 0
	jne	SHORT $LN56@CreateHsiV

; 3455 : 				hsiInitStr.compassSrc = source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _hsiInitStr$[ebp+4], eax
	mov	ecx, DWORD PTR _source$[ebp+4]
	mov	DWORD PTR _hsiInitStr$[ebp+8], ecx
	mov	edx, DWORD PTR _source$[ebp+8]
	mov	DWORD PTR _hsiInitStr$[ebp+12], edx
	mov	eax, DWORD PTR _source$[ebp+12]
	mov	DWORD PTR _hsiInitStr$[ebp+16], eax
	jmp	SHORT $LN54@CreateHsiV
$LN56@CreateHsiV:

; 3456 : 			}
; 3457 : 			else if(srccount == 1) {

	cmp	DWORD PTR _srccount$[ebp], 1
	jne	SHORT $LN54@CreateHsiV

; 3458 : 				hsiInitStr.devSrc = source; // course deviation ring

	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _hsiInitStr$[ebp+36], ecx
	mov	edx, DWORD PTR _source$[ebp+4]
	mov	DWORD PTR _hsiInitStr$[ebp+40], edx
	mov	eax, DWORD PTR _source$[ebp+8]
	mov	DWORD PTR _hsiInitStr$[ebp+44], eax
	mov	ecx, DWORD PTR _source$[ebp+12]
	mov	DWORD PTR _hsiInitStr$[ebp+48], ecx
$LN54@CreateHsiV:

; 3459 : 			}
; 3460 : 			else {
; 3461 : 				ShiWarning("Bad HSI Source Count"); //couldn't read in transparency type
; 3462 : 			}
; 3463 : 
; 3464 : 			srccount++;

	mov	edx, DWORD PTR _srccount$[ebp]
	add	edx, 1
	mov	DWORD PTR _srccount$[ebp], edx
	jmp	$LN6@CreateHsiV
$LN57@CreateHsiV:

; 3465 : 		}
; 3466 : 		else if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN51@CreateHsiV

; 3467 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3468 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	edx, DWORD PTR _objectInitStr$[ebp+12]
	push	edx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN51@CreateHsiV:

; 3469 : 		}
; 3470 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN49@CreateHsiV

; 3471 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3472 : 			sscanf(ptoken, "%s %d %d %d %d", ptransparencyStr,
; 3473 : 					&(destination.top), 
; 3474 : 					&(destination.left), 
; 3475 : 					&(destination.bottom), 
; 3476 : 					&(destination.right));

	lea	eax, DWORD PTR _destination$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _destination$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _destination$[ebp]
	push	edx
	lea	eax, DWORD PTR _destination$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 3477 : 
; 3478 : 			if(!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN48@CreateHsiV

; 3479 : 				transparencyType	= CPTRANSPARENT;

	mov	DWORD PTR _transparencyType$[ebp], 1
	jmp	SHORT $LN46@CreateHsiV
$LN48@CreateHsiV:

; 3480 : 			}
; 3481 : 			else if(!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN46@CreateHsiV

; 3482 : 				objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0
$LN46@CreateHsiV:

; 3483 : 			}
; 3484 : 			else {
; 3485 : 				ShiWarning("Bad Transparency Type"); //couldn't read in transparency type
; 3486 : 			}
; 3487 : 
; 3488 : 			if(destcount == 0) {

	cmp	DWORD PTR _destcount$[ebp], 0
	jne	SHORT $LN44@CreateHsiV

; 3489 : 				objectInitStr.destRect = destination;

	mov	edx, DWORD PTR _destination$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+56], edx
	mov	eax, DWORD PTR _destination$[ebp+4]
	mov	DWORD PTR _objectInitStr$[ebp+60], eax
	mov	ecx, DWORD PTR _destination$[ebp+8]
	mov	DWORD PTR _objectInitStr$[ebp+64], ecx
	mov	edx, DWORD PTR _destination$[ebp+12]
	mov	DWORD PTR _objectInitStr$[ebp+68], edx

; 3490 : 				objectInitStr.transparencyType = transparencyType;

	mov	eax, DWORD PTR _transparencyType$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+8], eax
	jmp	$LN40@CreateHsiV
$LN44@CreateHsiV:

; 3491 : 			}
; 3492 : 			else if(destcount == 1) {

	cmp	DWORD PTR _destcount$[ebp], 1
	jne	SHORT $LN42@CreateHsiV

; 3493 : 				hsiInitStr.compassDest = destination;;

	mov	ecx, DWORD PTR _destination$[ebp]
	mov	DWORD PTR _hsiInitStr$[ebp+20], ecx
	mov	edx, DWORD PTR _destination$[ebp+4]
	mov	DWORD PTR _hsiInitStr$[ebp+24], edx
	mov	eax, DWORD PTR _destination$[ebp+8]
	mov	DWORD PTR _hsiInitStr$[ebp+28], eax
	mov	ecx, DWORD PTR _destination$[ebp+12]
	mov	DWORD PTR _hsiInitStr$[ebp+32], ecx

; 3494 : 				hsiInitStr.compassTransparencyType = transparencyType;

	mov	edx, DWORD PTR _transparencyType$[ebp]
	mov	DWORD PTR _hsiInitStr$[ebp], edx
	jmp	SHORT $LN40@CreateHsiV
$LN42@CreateHsiV:

; 3495 : 			}
; 3496 : 			else if(destcount == 2) {

	cmp	DWORD PTR _destcount$[ebp], 2
	jne	SHORT $LN40@CreateHsiV

; 3497 : 				hsiInitStr.devDest = destination;;

	mov	eax, DWORD PTR _destination$[ebp]
	mov	DWORD PTR _hsiInitStr$[ebp+52], eax
	mov	ecx, DWORD PTR _destination$[ebp+4]
	mov	DWORD PTR _hsiInitStr$[ebp+56], ecx
	mov	edx, DWORD PTR _destination$[ebp+8]
	mov	DWORD PTR _hsiInitStr$[ebp+60], edx
	mov	eax, DWORD PTR _destination$[ebp+12]
	mov	DWORD PTR _hsiInitStr$[ebp+64], eax
$LN40@CreateHsiV:

; 3498 : 			}
; 3499 : 			else {
; 3500 : 				ShiWarning("Bad dest count"); 
; 3501 : 			}
; 3502 : 
; 3503 : 			destcount++;

	mov	ecx, DWORD PTR _destcount$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destcount$[ebp], ecx
	jmp	$LN6@CreateHsiV
$LN49@CreateHsiV:

; 3504 : 		}
; 3505 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@CreateHsiV

; 3506 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3507 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	edx, DWORD PTR _objectInitStr$[ebp+4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN37@CreateHsiV:

; 3508 : 		}
; 3509 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN35@CreateHsiV

; 3510 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3511 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+16]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 3512 : 
; 3513 : 			if(!objectInitStr.persistant) {

	cmp	DWORD PTR _objectInitStr$[ebp+16], 0
	jne	SHORT $LN34@CreateHsiV

; 3514 : 				objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 3515 : 				objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 3516 : 				objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 3517 : 				objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 3518 : 
; 3519 : 				objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	eax, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], eax

; 3520 : 				objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1
$LN34@CreateHsiV:

; 3521 : 			}
; 3522 : 		}

	jmp	$LN6@CreateHsiV
$LN35@CreateHsiV:

; 3523 : 		else if(!strcmpi(ptoken, PROP_WARNFLAG_STR)) {

	push	OFFSET ??_C@_08NMFHNMGB@warnflag?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN32@CreateHsiV

; 3524 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3525 : 			sscanf(ptoken, "%d %d %d %d", &(hsiInitStr.warnFlag.top), 
; 3526 : 					&(hsiInitStr.warnFlag.left), 
; 3527 : 					&(hsiInitStr.warnFlag.bottom), 
; 3528 : 					&(hsiInitStr.warnFlag.right));

	lea	eax, DWORD PTR _hsiInitStr$[ebp+76]
	push	eax
	lea	ecx, DWORD PTR _hsiInitStr$[ebp+80]
	push	ecx
	lea	edx, DWORD PTR _hsiInitStr$[ebp+68]
	push	edx
	lea	eax, DWORD PTR _hsiInitStr$[ebp+72]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN6@CreateHsiV
$LN32@CreateHsiV:

; 3529 : 		}
; 3530 : 		else if(!strcmpi(ptoken, PROP_BSRCLOC_STR)) {

	push	OFFSET ??_C@_07DBEABAHD@bsrcloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN30@CreateHsiV

; 3531 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3532 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bsrcRect.top), 
; 3533 : 					&(objectInitStr.bsrcRect.left), 
; 3534 : 					&(objectInitStr.bsrcRect.bottom), 
; 3535 : 					&(objectInitStr.bsrcRect.right));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+32]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+36]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+24]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+28]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN6@CreateHsiV
$LN30@CreateHsiV:

; 3536 : 		}
; 3537 : 		else if(!strcmpi(ptoken, PROP_BDESTLOC_STR)) {

	push	OFFSET ??_C@_08BLADEKNC@bdestloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@CreateHsiV

; 3538 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3539 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bdestRect.top), 
; 3540 : 					&(objectInitStr.bdestRect.left), 
; 3541 : 					&(objectInitStr.bdestRect.bottom), 
; 3542 : 					&(objectInitStr.bdestRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+52]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+40]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+44]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN6@CreateHsiV
$LN28@CreateHsiV:

; 3543 : 		}
; 3544 : 		else if(!strcmpi(ptoken, PROP_BSURFACE_STR)) {

	push	OFFSET ??_C@_08HGPFHPFG@bsurface?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@CreateHsiV

; 3545 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3546 : 			sscanf(ptoken, "%d", &(objectInitStr.bsurface));

	lea	eax, DWORD PTR _objectInitStr$[ebp+20]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN26@CreateHsiV:

; 3547 : 		}
; 3548 : 		else if(!strcmpi(ptoken, PROP_COLOR0_STR)) {

	push	OFFSET ??_C@_06JGNLDMKC@color0?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN24@CreateHsiV

; 3549 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3550 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[0]);

	mov	edx, 4
	imul	edx, 0
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN24@CreateHsiV:

; 3551 : 		}
; 3552 : 		else if(!strcmpi(ptoken, PROP_COLOR1_STR)) {

	push	OFFSET ??_C@_06IPMAANOD@color1?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN22@CreateHsiV

; 3553 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3554 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[1]);

	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN22@CreateHsiV:

; 3555 : 		}
; 3556 : 		else if(!strcmpi(ptoken, PROP_COLOR2_STR)) {

	push	OFFSET ??_C@_06KEONFOCA@color2?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@CreateHsiV

; 3557 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3558 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[2]);

	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN20@CreateHsiV:

; 3559 : 		}
; 3560 : 		else if(!strcmpi(ptoken, PROP_COLOR3_STR)) {

	push	OFFSET ??_C@_06LNPGGPGB@color3?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@CreateHsiV

; 3561 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3562 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[3]);

	mov	edx, 4
	imul	edx, 3
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN18@CreateHsiV:

; 3563 : 		}
; 3564 : 		else if(!strcmpi(ptoken, PROP_COLOR4_STR)) {

	push	OFFSET ??_C@_06PCLHPJKG@color4?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@CreateHsiV

; 3565 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3566 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[4]);

	mov	edx, 4
	shl	edx, 2
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN16@CreateHsiV:

; 3567 : 		}
; 3568 : 		else if(!strcmpi(ptoken, PROP_COLOR5_STR)) {

	push	OFFSET ??_C@_06OLKMMIOH@color5?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@CreateHsiV

; 3569 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3570 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[5]);

	mov	edx, 4
	imul	edx, 5
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN14@CreateHsiV:

; 3571 : 		}
; 3572 : 		else if(!strcmpi(ptoken, PROP_COLOR6_STR)) {

	push	OFFSET ??_C@_06MAIBJLCE@color6?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@CreateHsiV

; 3573 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3574 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[6]);

	mov	edx, 4
	imul	edx, 6
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN12@CreateHsiV:

; 3575 : 		}
; 3576 : 		else if(!strcmpi(ptoken, PROP_COLOR7_STR)) {

	push	OFFSET ??_C@_06NJJKKKGF@color7?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@CreateHsiV

; 3577 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3578 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[7]);

	mov	edx, 4
	imul	edx, 7
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateHsiV
$LN10@CreateHsiV:

; 3579 : 		}
; 3580 : 		else if(!strcmpi(ptoken, PROP_COLOR8_STR)) {

	push	OFFSET ??_C@_06FOACLGKK@color8?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CreateHsiV

; 3581 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3582 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[8]);

	mov	edx, 4
	shl	edx, 3
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@CreateHsiV
$LN8@CreateHsiV:

; 3583 : 		}
; 3584 : 		else if(!strcmpi(ptoken, PROP_COLOR9_STR)) {

	push	OFFSET ??_C@_06EHBJIHOL@color9?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@CreateHsiV

; 3585 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3586 : 			sscanf(ptoken, "%lx", &hsiInitStr.colors[9]);

	mov	edx, 4
	imul	edx, 9
	lea	eax, DWORD PTR _hsiInitStr$[ebp+edx+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN6@CreateHsiV:

; 3587 : 		}
; 3588 : 		else {
; 3589 : 			CockpitMessage(ptoken, "HSI", gDebugLineNum);
; 3590 : 		}
; 3591 : 
; 3592 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 3593 : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 3594 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 3595 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3596 : 	}

	jmp	$LN59@CreateHsiV
$LN58@CreateHsiV:

; 3597 : 
; 3598 : 	//Wombat778 3-24-04 Code for rendering the HSI instead of blitting
; 3599 : 	//WOmbat778 4-11-04 added some error reporting
; 3600 : 
; 3601 : 	if (DisplayOptions.bRender2DCockpit)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	$LN4@CreateHsiV

; 3602 : 	{		
; 3603 : 		//Wombat778 4-13-04 prevent a heap error with pit errors
; 3604 : 		if ((source.bottom-source.top)* (source.right-source.left) >=0){

	mov	eax, DWORD PTR _source$[ebp+12]
	sub	eax, DWORD PTR _source$[ebp+4]
	mov	ecx, DWORD PTR _source$[ebp+8]
	sub	ecx, DWORD PTR _source$[ebp]
	imul	eax, ecx
	test	eax, eax
	jl	SHORT $LN3@CreateHsiV

; 3605 : 			hsiInitStr.sourcehsi = new BYTE[(source.bottom-source.top)* (source.right-source.left)];	 

	mov	edx, DWORD PTR _source$[ebp+12]
	sub	edx, DWORD PTR _source$[ebp+4]
	mov	eax, DWORD PTR _source$[ebp+8]
	sub	eax, DWORD PTR _source$[ebp]
	imul	edx, eax
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _hsiInitStr$[ebp+128], ecx

; 3606 : 		}
; 3607 : 		else {

	jmp	SHORT $LN2@CreateHsiV
$LN3@CreateHsiV:

; 3608 : 			hsiInitStr.sourcehsi = NULL;

	mov	DWORD PTR _hsiInitStr$[ebp+128], 0
$LN2@CreateHsiV:

; 3609 : 		}
; 3610 : 		//wombat778 4-11-04 make safeimagecopy always used			
; 3611 : 		SafeImageCopy(gpTemplateImage, hsiInitStr.sourcehsi, mTemplateHeight, mTemplateWidth, &source);					}

	lea	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+240]
	push	eax
	mov	ecx, DWORD PTR _hsiInitStr$[ebp+128]
	push	ecx
	mov	edx, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy
$LN4@CreateHsiV:

; 3612 : 
; 3613 : 	//Wombat778 end
; 3614 : 	objectInitStr.hScale			= mHScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 3615 : 	objectInitStr.vScale			= mVScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 3616 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 3617 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 3618 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 3619 : 
; 3620 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 3621 : 
; 3622 : 	hsiInitStr.pHsi				= mpHsi;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+692]
	mov	DWORD PTR _hsiInitStr$[ebp+84], edx

; 3623 : 
; 3624 : 	CPHsiView *p = new CPHsiView(&objectInitStr, &hsiInitStr);

	push	360					; 00000168H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN64@CreateHsiV
	lea	eax, DWORD PTR _hsiInitStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CPHsiView@@QAE@PAUObjectInitStr@@PAUHsiInitStr@@@Z ; CPHsiView::CPHsiView
	mov	DWORD PTR tv542[ebp], eax
	jmp	SHORT $LN65@CreateHsiV
$LN64@CreateHsiV:
	mov	DWORD PTR tv542[ebp], 0
$LN65@CreateHsiV:
	mov	edx, DWORD PTR tv542[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 3625 : 	ShiAssert(p);
; 3626 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateHsiV
	jmp	SHORT $LN62@CreateHsiV
$LN1@CreateHsiV:

; 3627 : 
; 3628 : 	mpObjects.push_back(p);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 3629 : 	mObjectTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN62@CreateHsiV:

; 3630 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-868]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateHsiView@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateHsiView
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -732					; size = 4
$T2 = -728						; size = 4
$T3 = -724						; size = 4
tv385 = -720						; size = 4
$T4 = -716						; size = 4
_p$ = -712						; size = 4
_this$ = -708						; size = 4
_plinePtr$ = -704					; size = 4
_ptoken$ = -700						; size = 4
_objectInitStr$ = -696					; size = 92
_machAsiInitStr$ = -604					; size = 36
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateMachAsi
; _this$ = ecx

; 3636 : void CockpitManager::CreateMachAsi(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 720				; 000002d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3637 : 
; 3638 : 	char						plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3639 : 	char*						plinePtr;
; 3640 : 	char						*ptoken;
; 3641 : 	char						pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 3642 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 3643 : 	ObjectInitStr			objectInitStr;
; 3644 : 	MachAsiInitStr			machAsiInitStr;
; 3645 : 	char						ptransparencyStr[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptransparencyStr$[ebp+1], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+5], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+9], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+13], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+17], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+21], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+25], eax
	mov	WORD PTR _ptransparencyStr$[ebp+29], ax
	mov	BYTE PTR _ptransparencyStr$[ebp+31], al

; 3646 : 
; 3647 : 	machAsiInitStr.color0 =  0xFF181842;

	mov	DWORD PTR _machAsiInitStr$[ebp+28], -15198142 ; ff181842H

; 3648 : 	machAsiInitStr.color1 =  0xFF0C0C7A;

	mov	DWORD PTR _machAsiInitStr$[ebp+32], -15987590 ; ff0c0c7aH

; 3649 : 	machAsiInitStr.end_angle = 1.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _machAsiInitStr$[ebp+24], xmm0

; 3650 : 	machAsiInitStr.end_radius = 0.21F;

	movss	xmm0, DWORD PTR __real@3e570a3d
	movss	DWORD PTR _machAsiInitStr$[ebp+20], xmm0

; 3651 : 
; 3652 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 3653 : 	gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 3654 : 	plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 3655 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN40@CreateMach:

; 3656 : 
; 3657 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN39@CreateMach

; 3658 : 
; 3659 : 
; 3660 : 		if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN38@CreateMach

; 3661 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3662 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN38@CreateMach:

; 3663 : 		}
; 3664 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN36@CreateMach

; 3665 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3666 : 			sscanf(ptoken, "%s %d %d %d %d", ptransparencyStr,
; 3667 : 					&(objectInitStr.destRect.top), 
; 3668 : 					&(objectInitStr.destRect.left), 
; 3669 : 					&(objectInitStr.destRect.bottom), 
; 3670 : 					&(objectInitStr.destRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+64]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+68]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+56]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+60]
	push	edx
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 3671 : 
; 3672 : 			if(!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	edx, DWORD PTR _ptransparencyStr$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@CreateMach

; 3673 : 				objectInitStr.transparencyType	= CPTRANSPARENT;

	mov	DWORD PTR _objectInitStr$[ebp+8], 1
	jmp	SHORT $LN33@CreateMach
$LN35@CreateMach:

; 3674 : 			}
; 3675 : 			else if(!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@CreateMach

; 3676 : 				objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0
$LN33@CreateMach:

; 3677 : 			}
; 3678 : 			else {
; 3679 : 				ShiWarning("Bad Transparency Type"); //couldn't read in transparency type
; 3680 : 			}

	jmp	$LN3@CreateMach
$LN36@CreateMach:

; 3681 : 		}
; 3682 : 		else if(!strcmpi(ptoken, PROP_COLOR0_STR)) {

	push	OFFSET ??_C@_06JGNLDMKC@color0?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN30@CreateMach

; 3683 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3684 : 			sscanf(ptoken, "%lx", &machAsiInitStr.color0);

	lea	ecx, DWORD PTR _machAsiInitStr$[ebp+28]
	push	ecx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN30@CreateMach:

; 3685 : 		}
; 3686 : 		else if(!strcmpi(ptoken, PROP_COLOR1_STR)) {

	push	OFFSET ??_C@_06IPMAANOD@color1?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@CreateMach

; 3687 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3688 : 			sscanf(ptoken, "%lx", &machAsiInitStr.color1);

	lea	eax, DWORD PTR _machAsiInitStr$[ebp+32]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN28@CreateMach:

; 3689 : 		}
; 3690 : 		else if(!strcmpi(ptoken, PROP_ENDANGLE)) {

	push	OFFSET ??_C@_08KPIGICAK@endangle?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@CreateMach

; 3691 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3692 : 			sscanf(ptoken, "%f", &machAsiInitStr.end_angle);

	lea	edx, DWORD PTR _machAsiInitStr$[ebp+24]
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN26@CreateMach:

; 3693 : 		}
; 3694 : 		else if(!strcmpi(ptoken, PROP_ENDLENGTH)) {

	push	OFFSET ??_C@_09IBLLDDAH@endlength?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN24@CreateMach

; 3695 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3696 : 			sscanf(ptoken, "%f", &machAsiInitStr.end_radius);

	lea	ecx, DWORD PTR _machAsiInitStr$[ebp+20]
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN24@CreateMach:

; 3697 : 		}
; 3698 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN22@CreateMach

; 3699 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3700 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	eax, DWORD PTR _objectInitStr$[ebp+4]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN22@CreateMach:

; 3701 : 		}
; 3702 : 		else if(!strcmpi(ptoken, PROP_MINVAL_STR)) {

	push	OFFSET ??_C@_06EPACOAOG@minval?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@CreateMach

; 3703 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3704 : 			sscanf(ptoken, "%f", &machAsiInitStr.min_dial_value);

	lea	edx, DWORD PTR _machAsiInitStr$[ebp]
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN20@CreateMach:

; 3705 : 		}
; 3706 : 		else if(!strcmpi(ptoken, PROP_MAXVAL_STR)) {

	push	OFFSET ??_C@_06EMPBAAKJ@maxval?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@CreateMach

; 3707 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3708 : 			sscanf(ptoken, "%f", &machAsiInitStr.max_dial_value);

	lea	ecx, DWORD PTR _machAsiInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN18@CreateMach:

; 3709 : 		}
; 3710 : 		else if(!strcmpi(ptoken, PROP_STARTANGLE_STR)) {

	push	OFFSET ??_C@_0L@KLEMNPPO@startangle?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@CreateMach

; 3711 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3712 : 			sscanf(ptoken, "%f", &machAsiInitStr.dial_start_angle);

	lea	eax, DWORD PTR _machAsiInitStr$[ebp+8]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN16@CreateMach:

; 3713 : 		}
; 3714 : 		else if(!strcmpi(ptoken, PROP_ARCLENGTH_STR)) {

	push	OFFSET ??_C@_09MIGBCLAB@arclength?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@CreateMach

; 3715 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3716 : 			sscanf(ptoken, "%f", &machAsiInitStr.dial_arc_length);

	lea	edx, DWORD PTR _machAsiInitStr$[ebp+12]
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN14@CreateMach:

; 3717 : 		}
; 3718 : 		else if(!strcmpi(ptoken, PROP_NEEDLERADIUS_STR)) {

	push	OFFSET ??_C@_0N@KLFHMCOD@needleradius?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@CreateMach

; 3719 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3720 : 			sscanf(ptoken, "%d", &machAsiInitStr.needle_radius);

	lea	ecx, DWORD PTR _machAsiInitStr$[ebp+16]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateMach
$LN12@CreateMach:

; 3721 : 		}
; 3722 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN10@CreateMach

; 3723 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3724 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	eax, DWORD PTR _objectInitStr$[ebp+16]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 3725 : 
; 3726 : 			if(!objectInitStr.persistant) {

	cmp	DWORD PTR _objectInitStr$[ebp+16], 0
	jne	SHORT $LN9@CreateMach

; 3727 : 				objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 3728 : 				objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 3729 : 				objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 3730 : 				objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 3731 : 
; 3732 : 				objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	edx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], edx

; 3733 : 				objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1
$LN9@CreateMach:

; 3734 : 			}
; 3735 : 		}

	jmp	$LN3@CreateMach
$LN10@CreateMach:

; 3736 : 		else if(!strcmpi(ptoken, PROP_BSRCLOC_STR)) {

	push	OFFSET ??_C@_07DBEABAHD@bsrcloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CreateMach

; 3737 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3738 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bsrcRect.top), 
; 3739 : 					&(objectInitStr.bsrcRect.left), 
; 3740 : 					&(objectInitStr.bsrcRect.bottom), 
; 3741 : 					&(objectInitStr.bsrcRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+32]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+36]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+28]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN3@CreateMach
$LN7@CreateMach:

; 3742 : 		}
; 3743 : 		else if(!strcmpi(ptoken, PROP_BDESTLOC_STR)) {

	push	OFFSET ??_C@_08BLADEKNC@bdestloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateMach

; 3744 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3745 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bdestRect.top), 
; 3746 : 					&(objectInitStr.bdestRect.left), 
; 3747 : 					&(objectInitStr.bdestRect.bottom), 
; 3748 : 					&(objectInitStr.bdestRect.right));

	lea	eax, DWORD PTR _objectInitStr$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+52]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+40]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+44]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	SHORT $LN3@CreateMach
$LN5@CreateMach:

; 3749 : 		}
; 3750 : 		else if(!strcmpi(ptoken, PROP_BSURFACE_STR)) {

	push	OFFSET ??_C@_08HGPFHPFG@bsurface?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@CreateMach

; 3751 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3752 : 			sscanf(ptoken, "%d", &(objectInitStr.bsurface));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+20]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN3@CreateMach:

; 3753 : 		}
; 3754 : 		else {
; 3755 : 			CockpitMessage(ptoken, "MachAsi", gDebugLineNum);
; 3756 : 		}
; 3757 : 
; 3758 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 3759 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 3760 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 3761 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3762 : 	}

	jmp	$LN40@CreateMach
$LN39@CreateMach:

; 3763 : 
; 3764 : 	objectInitStr.hScale			= mHScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 3765 : 	objectInitStr.vScale			= mVScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 3766 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 3767 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 3768 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 3769 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 3770 : 
; 3771 : 	CPMachAsi *p = new CPMachAsi(&objectInitStr, &machAsiInitStr);

	push	228					; 000000e4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN43@CreateMach
	lea	ecx, DWORD PTR _machAsiInitStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPMachAsi@@QAE@PAUObjectInitStr@@PAUMachAsiInitStr@@@Z ; CPMachAsi::CPMachAsi
	mov	DWORD PTR tv385[ebp], eax
	jmp	SHORT $LN44@CreateMach
$LN43@CreateMach:
	mov	DWORD PTR tv385[ebp], 0
$LN44@CreateMach:
	mov	eax, DWORD PTR tv385[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 3772 : 	ShiAssert(p);
; 3773 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateMach
	jmp	SHORT $LN41@CreateMach
$LN1@CreateMach:

; 3774 : 
; 3775 : 	mpObjects.push_back(p);

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 3776 : 	mObjectTally++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN41@CreateMach:

; 3777 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-724]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateMachAsi@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateMachAsi
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -816					; size = 4
$T2 = -812						; size = 4
$T3 = -808						; size = 4
$T4 = -804						; size = 4
$T5 = -800						; size = 4
$T6 = -796						; size = 4
tv476 = -792						; size = 4
_p$ = -788						; size = 4
_this$ = -784						; size = 4
_plinePtr$ = -780					; size = 4
_ptoken$ = -776						; size = 4
_objectInitStr$ = -772					; size = 92
_destRect$7 = -680					; size = 16
_adiInitStr$ = -664					; size = 96
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateAdi
; _this$ = ecx

; 3177 : void CockpitManager::CreateAdi(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 804				; 00000324H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3178 : 
; 3179 : 	char					plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3180 : 	char*					plinePtr;
; 3181 : 	char					*ptoken;
; 3182 : 	char					pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 3183 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 3184 : 	ObjectInitStr			objectInitStr;
; 3185 : 	char					ptransparencyStr[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptransparencyStr$[ebp+1], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+5], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+9], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+13], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+17], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+21], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+25], eax
	mov	WORD PTR _ptransparencyStr$[ebp+29], ax
	mov	BYTE PTR _ptransparencyStr$[ebp+31], al

; 3186 : 	ADIInitStr				adiInitStr={0};

	mov	DWORD PTR _adiInitStr$[ebp], 0
	push	92					; 0000005cH
	push	0
	lea	ecx, DWORD PTR _adiInitStr$[ebp+4]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3187 : 
; 3188 : 	adiInitStr.doBackRect = FALSE;

	mov	DWORD PTR _adiInitStr$[ebp+32], 0

; 3189 : 	adiInitStr.backSrc.top = 0;

	mov	DWORD PTR _adiInitStr$[ebp+4], 0

; 3190 : 	adiInitStr.backSrc.left = 0;

	mov	DWORD PTR _adiInitStr$[ebp], 0

; 3191 : 	adiInitStr.backSrc.bottom = 0;

	mov	DWORD PTR _adiInitStr$[ebp+12], 0

; 3192 : 	adiInitStr.backSrc.right = 0;

	mov	DWORD PTR _adiInitStr$[ebp+8], 0

; 3193 : 	adiInitStr.color0 = 0xFF20A2C8;

	mov	DWORD PTR _adiInitStr$[ebp+72], -14638392 ; ff20a2c8H

; 3194 : 	adiInitStr.color1 = 0xff808080;

	mov	DWORD PTR _adiInitStr$[ebp+76], -8355712 ; ff808080H

; 3195 : 	adiInitStr.color2 = 0xffffffff;

	mov	DWORD PTR _adiInitStr$[ebp+80], -1

; 3196 : 	adiInitStr.color3 = 0xFF6CF3F3;

	mov	DWORD PTR _adiInitStr$[ebp+84], -9636877 ; ff6cf3f3H

; 3197 : 	adiInitStr.color4 = 0xFF6CF3F3;

	mov	DWORD PTR _adiInitStr$[ebp+88], -9636877 ; ff6cf3f3H

; 3198 : 
; 3199 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 3200 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 3201 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 3202 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN46@CreateAdi:

; 3203 : 
; 3204 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN45@CreateAdi

; 3205 : 
; 3206 : 		if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN44@CreateAdi

; 3207 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3208 : 			sscanf(ptoken, "%d %d %d %d", &(adiInitStr.srcRect.top), 
; 3209 : 					&(adiInitStr.srcRect.left), 
; 3210 : 					&(adiInitStr.srcRect.bottom), 
; 3211 : 					&(adiInitStr.srcRect.right));

	lea	edx, DWORD PTR _adiInitStr$[ebp+44]
	push	edx
	lea	eax, DWORD PTR _adiInitStr$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _adiInitStr$[ebp+36]
	push	ecx
	lea	edx, DWORD PTR _adiInitStr$[ebp+40]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateAdi
$LN44@CreateAdi:

; 3212 : 		}
; 3213 : 		else if(!strcmpi(ptoken, PROP_ILSLIMITS_STR)) {

	push	OFFSET ??_C@_09LKIEMFDP@ilslimits?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN42@CreateAdi

; 3214 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3215 : 			sscanf(ptoken, "%d %d %d %d", &(adiInitStr.ilsLimits.top), 
; 3216 : 					&(adiInitStr.ilsLimits.left), 
; 3217 : 					&(adiInitStr.ilsLimits.bottom), 
; 3218 : 					&(adiInitStr.ilsLimits.right));

	lea	eax, DWORD PTR _adiInitStr$[ebp+60]
	push	eax
	lea	ecx, DWORD PTR _adiInitStr$[ebp+64]
	push	ecx
	lea	edx, DWORD PTR _adiInitStr$[ebp+52]
	push	edx
	lea	eax, DWORD PTR _adiInitStr$[ebp+56]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateAdi
$LN42@CreateAdi:

; 3219 : 
; 3220 : 		}
; 3221 : 		else if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN40@CreateAdi

; 3222 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3223 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateAdi
$LN40@CreateAdi:

; 3224 : 		}
; 3225 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN38@CreateAdi

; 3226 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3227 : 			sscanf(ptoken, "%s %d %d %d %d", ptransparencyStr,
; 3228 : 					&(objectInitStr.destRect.top), 
; 3229 : 					&(objectInitStr.destRect.left), 
; 3230 : 					&(objectInitStr.destRect.bottom), 
; 3231 : 					&(objectInitStr.destRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+64]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+68]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+56]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+60]
	push	edx
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 3232 : 
; 3233 : 			if(!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	edx, DWORD PTR _ptransparencyStr$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@CreateAdi

; 3234 : 				objectInitStr.transparencyType	= CPTRANSPARENT;

	mov	DWORD PTR _objectInitStr$[ebp+8], 1
	jmp	SHORT $LN35@CreateAdi
$LN37@CreateAdi:

; 3235 : 			}
; 3236 : 			else if(!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@CreateAdi

; 3237 : 				objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0
$LN35@CreateAdi:

; 3238 : 			}
; 3239 : 			else {
; 3240 : 				ShiWarning("Bad Transparency Type"); //couldn't read in transparency type
; 3241 : 			}

	jmp	$LN7@CreateAdi
$LN38@CreateAdi:

; 3242 : 		}
; 3243 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN32@CreateAdi

; 3244 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3245 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateAdi
$LN32@CreateAdi:

; 3246 : 		}
; 3247 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN30@CreateAdi

; 3248 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3249 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	eax, DWORD PTR _objectInitStr$[ebp+16]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 3250 : 
; 3251 : 			if(!objectInitStr.persistant) {

	cmp	DWORD PTR _objectInitStr$[ebp+16], 0
	jne	SHORT $LN29@CreateAdi

; 3252 : 				objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 3253 : 				objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 3254 : 				objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 3255 : 				objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 3256 : 
; 3257 : 				objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	edx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], edx

; 3258 : 				objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1
$LN29@CreateAdi:

; 3259 : 			}
; 3260 : 		}

	jmp	$LN7@CreateAdi
$LN30@CreateAdi:

; 3261 : 		else if(!strcmpi(ptoken, PROP_BSRCLOC_STR)) {

	push	OFFSET ??_C@_07DBEABAHD@bsrcloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@CreateAdi

; 3262 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3263 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bsrcRect.top), 
; 3264 : 					&(objectInitStr.bsrcRect.left), 
; 3265 : 					&(objectInitStr.bsrcRect.bottom), 
; 3266 : 					&(objectInitStr.bsrcRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+32]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+36]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+28]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateAdi
$LN27@CreateAdi:

; 3267 : 		}
; 3268 : 		else if(!strcmpi(ptoken, PROP_BDESTLOC_STR)) {

	push	OFFSET ??_C@_08BLADEKNC@bdestloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@CreateAdi

; 3269 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3270 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bdestRect.top), 
; 3271 : 					&(objectInitStr.bdestRect.left), 
; 3272 : 					&(objectInitStr.bdestRect.bottom), 
; 3273 : 					&(objectInitStr.bdestRect.right));

	lea	eax, DWORD PTR _objectInitStr$[ebp+48]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+52]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+40]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+44]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateAdi
$LN25@CreateAdi:

; 3274 : 		}
; 3275 : 		else if(!strcmpi(ptoken, PROP_BSURFACE_STR)) {

	push	OFFSET ??_C@_08HGPFHPFG@bsurface?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@CreateAdi

; 3276 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3277 : 			sscanf(ptoken, "%d", &(objectInitStr.bsurface));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+20]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateAdi
$LN23@CreateAdi:

; 3278 : 		}
; 3279 : 
; 3280 : 		else if(!strcmpi(ptoken, PROP_BLITBACKGROUND_STR)) {

	push	OFFSET ??_C@_0P@BIMEBLHC@blitbackground?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CreateAdi

; 3281 : 			adiInitStr.doBackRect = TRUE;

	mov	DWORD PTR _adiInitStr$[ebp+32], 1

; 3282 : 			LoadBuffer(pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadBuffer@CockpitManager@@AAEXPAU_iobuf@@@Z ; CockpitManager::LoadBuffer
	jmp	$LN7@CreateAdi
$LN21@CreateAdi:

; 3283 : 		}
; 3284 : 		else if(!strcmpi(ptoken, PROP_BACKDEST_STR)) {

	push	OFFSET ??_C@_08NCOBPHPA@backdest?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CreateAdi

; 3285 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3286 : 
; 3287 : 			sscanf(ptoken, "%d %d %d %d", &(adiInitStr.backDest.top), 
; 3288 : 					&(adiInitStr.backDest.left), 
; 3289 : 					&(adiInitStr.backDest.bottom), 
; 3290 : 					&(adiInitStr.backDest.right));

	lea	ecx, DWORD PTR _adiInitStr$[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _adiInitStr$[ebp+28]
	push	edx
	lea	eax, DWORD PTR _adiInitStr$[ebp+16]
	push	eax
	lea	ecx, DWORD PTR _adiInitStr$[ebp+20]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateAdi
$LN19@CreateAdi:

; 3291 : 		}
; 3292 : 		else if(!strcmpi(ptoken, PROP_BACKSRC_STR)) {

	push	OFFSET ??_C@_07CFHPHAIB@backsrc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@CreateAdi

; 3293 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3294 : 
; 3295 : 			sscanf(ptoken, "%d %d %d %d", &(adiInitStr.backSrc.top), 
; 3296 : 					&(adiInitStr.backSrc.left), 
; 3297 : 					&(adiInitStr.backSrc.bottom), 
; 3298 : 					&(adiInitStr.backSrc.right));

	lea	edx, DWORD PTR _adiInitStr$[ebp+8]
	push	edx
	lea	eax, DWORD PTR _adiInitStr$[ebp+12]
	push	eax
	lea	ecx, DWORD PTR _adiInitStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _adiInitStr$[ebp+4]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateAdi
$LN17@CreateAdi:

; 3299 : 		}
; 3300 : 		else if(!strcmpi(ptoken, PROP_COLOR0_STR)) {

	push	OFFSET ??_C@_06JGNLDMKC@color0?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CreateAdi

; 3301 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3302 : 			sscanf(ptoken, "%lx", &adiInitStr.color0);

	lea	ecx, DWORD PTR _adiInitStr$[ebp+72]
	push	ecx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateAdi
$LN15@CreateAdi:

; 3303 : 		}
; 3304 : 		else if(!strcmpi(ptoken, PROP_COLOR1_STR)) {

	push	OFFSET ??_C@_06IPMAANOD@color1?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CreateAdi

; 3305 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3306 : 			sscanf(ptoken, "%lx", &adiInitStr.color1);

	lea	eax, DWORD PTR _adiInitStr$[ebp+76]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateAdi
$LN13@CreateAdi:

; 3307 : 		}
; 3308 : 		else if(!strcmpi(ptoken, PROP_COLOR2_STR)) {

	push	OFFSET ??_C@_06KEONFOCA@color2?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@CreateAdi

; 3309 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3310 : 			sscanf(ptoken, "%lx", &adiInitStr.color2);

	lea	edx, DWORD PTR _adiInitStr$[ebp+80]
	push	edx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateAdi
$LN11@CreateAdi:

; 3311 : 		}
; 3312 : 		else if(!strcmpi(ptoken, PROP_COLOR3_STR)) {

	push	OFFSET ??_C@_06LNPGGPGB@color3?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CreateAdi

; 3313 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3314 : 			sscanf(ptoken, "%lx", &adiInitStr.color3);

	lea	ecx, DWORD PTR _adiInitStr$[ebp+84]
	push	ecx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@CreateAdi
$LN9@CreateAdi:

; 3315 : 		}
; 3316 : 		else if(!strcmpi(ptoken, PROP_COLOR4_STR)) {

	push	OFFSET ??_C@_06PCLHPJKG@color4?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CreateAdi

; 3317 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3318 : 			sscanf(ptoken, "%lx", &adiInitStr.color4);

	lea	eax, DWORD PTR _adiInitStr$[ebp+88]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN7@CreateAdi:

; 3319 : 		}
; 3320 : 		else {
; 3321 : 			CockpitMessage(ptoken, "ADI", gDebugLineNum);
; 3322 : 		}
; 3323 : 
; 3324 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 3325 : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 3326 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 3327 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3328 : 	}

	jmp	$LN46@CreateAdi
$LN45@CreateAdi:

; 3329 : 
; 3330 : 
; 3331 : 	if(adiInitStr.doBackRect) {

	cmp	DWORD PTR _adiInitStr$[ebp+32], 0
	je	$LN5@CreateAdi

; 3332 : 		RECT destRect;
; 3333 : 
; 3334 : 
; 3335 : 		destRect.top		= 0;

	mov	DWORD PTR _destRect$7[ebp+4], 0

; 3336 : 		destRect.left		= 0;

	mov	DWORD PTR _destRect$7[ebp], 0

; 3337 : 		destRect.bottom	= adiInitStr.backSrc.bottom - adiInitStr.backSrc.top + 1;

	mov	edx, DWORD PTR _adiInitStr$[ebp+12]
	sub	edx, DWORD PTR _adiInitStr$[ebp+4]
	add	edx, 1
	mov	DWORD PTR _destRect$7[ebp+12], edx

; 3338 : 		destRect.right		= adiInitStr.backSrc.right - adiInitStr.backSrc.left + 1;

	mov	eax, DWORD PTR _adiInitStr$[ebp+8]
	sub	eax, DWORD PTR _adiInitStr$[ebp]
	add	eax, 1
	mov	DWORD PTR _destRect$7[ebp+8], eax

; 3339 : 
; 3340 : #ifdef USE_SH_POOLS
; 3341 : 		adiInitStr.pBackground = (BYTE *)MemAllocPtr(gCockMemPool,sizeof(BYTE)*destRect.bottom*destRect.right,FALSE);
; 3342 : #else
; 3343 : 		adiInitStr.pBackground = new BYTE[destRect.bottom * destRect.right];

	mov	ecx, DWORD PTR _destRect$7[ebp+12]
	imul	ecx, DWORD PTR _destRect$7[ebp+8]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _adiInitStr$[ebp+68], edx

; 3344 : #endif
; 3345 : 
; 3346 : 		adiInitStr.backSrc.right	+= 1;

	mov	eax, DWORD PTR _adiInitStr$[ebp+8]
	add	eax, 1
	mov	DWORD PTR _adiInitStr$[ebp+8], eax

; 3347 : 		adiInitStr.backSrc.bottom += 1;

	mov	ecx, DWORD PTR _adiInitStr$[ebp+12]
	add	ecx, 1
	mov	DWORD PTR _adiInitStr$[ebp+12], ecx

; 3348 : 
; 3349 : 		SafeImageCopy(mpLoadBuffer, adiInitStr.pBackground, mLoadBufferHeight, mLoadBufferWidth, &adiInitStr.backSrc);					//wombat778 4-11-04 make safeimagecopy always used

	lea	edx, DWORD PTR _adiInitStr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _adiInitStr$[ebp+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy

; 3350 : 
; 3351 : 		adiInitStr.backSrc.top		= destRect.top;

	mov	ecx, DWORD PTR _destRect$7[ebp+4]
	mov	DWORD PTR _adiInitStr$[ebp+4], ecx

; 3352 : 		adiInitStr.backSrc.left		= destRect.left;

	mov	edx, DWORD PTR _destRect$7[ebp]
	mov	DWORD PTR _adiInitStr$[ebp], edx

; 3353 : 		adiInitStr.backSrc.bottom	= destRect.bottom;

	mov	eax, DWORD PTR _destRect$7[ebp+12]
	mov	DWORD PTR _adiInitStr$[ebp+12], eax

; 3354 : 		adiInitStr.backSrc.right	= destRect.right;

	mov	ecx, DWORD PTR _destRect$7[ebp+8]
	mov	DWORD PTR _adiInitStr$[ebp+8], ecx
$LN5@CreateAdi:

; 3355 : 	}
; 3356 : 
; 3357 : 
; 3358 : 	//Wombat778 3-24-04 Even though there already appears to be code above for rendering, it doesnt appear to get used, 
; 3359 : 	//and I dont know if it works properly, so I will add my own.
; 3360 : 
; 3361 : 	//Wombat778 4-11-04 Added some error reporting
; 3362 : 
; 3363 : 	if (DisplayOptions.bRender2DCockpit)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	$LN4@CreateAdi

; 3364 : 	{		
; 3365 : 		//Wombat778 4-13-04 prevent a heap error with pit errors
; 3366 : 		if ((adiInitStr.srcRect.bottom-adiInitStr.srcRect.top)* (adiInitStr.srcRect.right-adiInitStr.srcRect.left) > 0)		//Wombat778 4-22-04 changed from >=  to >

	mov	eax, DWORD PTR _adiInitStr$[ebp+48]
	sub	eax, DWORD PTR _adiInitStr$[ebp+40]
	mov	ecx, DWORD PTR _adiInitStr$[ebp+44]
	sub	ecx, DWORD PTR _adiInitStr$[ebp+36]
	imul	eax, ecx
	test	eax, eax
	jle	SHORT $LN3@CreateAdi

; 3367 : 			adiInitStr.sourceadi = new BYTE[(adiInitStr.srcRect.bottom-adiInitStr.srcRect.top)* (adiInitStr.srcRect.right-adiInitStr.srcRect.left)];	 

	mov	edx, DWORD PTR _adiInitStr$[ebp+48]
	sub	edx, DWORD PTR _adiInitStr$[ebp+40]
	mov	eax, DWORD PTR _adiInitStr$[ebp+44]
	sub	eax, DWORD PTR _adiInitStr$[ebp+36]
	imul	edx, eax
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _adiInitStr$[ebp+92], ecx

; 3368 : 		else 

	jmp	SHORT $LN2@CreateAdi
$LN3@CreateAdi:

; 3369 : 			adiInitStr.sourceadi = NULL;

	mov	DWORD PTR _adiInitStr$[ebp+92], 0
$LN2@CreateAdi:

; 3370 : 
; 3371 : 		SafeImageCopy(gpTemplateImage, adiInitStr.sourceadi, mTemplateHeight, mTemplateWidth, &adiInitStr.srcRect);					//wombat778 4-11-04 make safeimagecopy always used	

	lea	edx, DWORD PTR _adiInitStr$[ebp+36]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+240]
	push	eax
	mov	ecx, DWORD PTR _adiInitStr$[ebp+92]
	push	ecx
	mov	edx, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy
$LN4@CreateAdi:

; 3372 : 	}
; 3373 : 
; 3374 : 	//Wombat778 end
; 3375 : 
; 3376 : 
; 3377 : 	objectInitStr.hScale			= mHScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 3378 : 	objectInitStr.vScale			= mVScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 3379 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 3380 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 3381 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 3382 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 3383 : 
; 3384 : 	CPAdi *p = new CPAdi(&objectInitStr, &adiInitStr);

	push	488					; 000001e8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN49@CreateAdi
	lea	ecx, DWORD PTR _adiInitStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0CPAdi@@QAE@PAUObjectInitStr@@PAUADIInitStr@@@Z ; CPAdi::CPAdi
	mov	DWORD PTR tv476[ebp], eax
	jmp	SHORT $LN50@CreateAdi
$LN49@CreateAdi:
	mov	DWORD PTR tv476[ebp], 0
$LN50@CreateAdi:
	mov	eax, DWORD PTR tv476[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 3385 : 	ShiAssert(p);
; 3386 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateAdi
	jmp	SHORT $LN47@CreateAdi
$LN1@CreateAdi:

; 3387 : 
; 3388 : 	mpObjects.push_back(p);

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T4[ebp], edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 3389 : 	mObjectTally++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN47@CreateAdi:

; 3390 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-808]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateAdi@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateAdi
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -672					; size = 4
$T2 = -668						; size = 4
$T3 = -664						; size = 4
_p$ = -660						; size = 4
$T4 = -656						; size = 4
tv226 = -652						; size = 4
_dedInitStr$ = -648					; size = 8
_this$ = -640						; size = 4
_plinePtr$ = -636					; size = 4
_ptoken$ = -632						; size = 4
_objectInitStr$ = -628					; size = 92
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateDed
; _this$ = ecx

; 1359 : void CockpitManager::CreateDed(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 660				; 00000294H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1360 : 
; 1361 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1362 : 	char*				plinePtr;
; 1363 : 	char				*ptoken;
; 1364 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1365 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1366 : 	ObjectInitStr	objectInitStr;
; 1367 : 	DedInitStr  dedInitStr;
; 1368 : 
; 1369 : 	//MI fixup
; 1370 : 	if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN19@CreateDed

; 1371 : 		dedInitStr.color0 = 0xff38e0f8; // default JPO

	mov	DWORD PTR _dedInitStr$[ebp], -13049608	; ff38e0f8H

; 1372 : 	else

	jmp	SHORT $LN18@CreateDed
$LN19@CreateDed:

; 1373 : 		dedInitStr.color0 = 0xFF00FF9C;

	mov	DWORD PTR _dedInitStr$[ebp], -16711780	; ff00ff9cH
$LN18@CreateDed:

; 1374 : 	dedInitStr.dedtype = DEDT_DED;

	mov	DWORD PTR _dedInitStr$[ebp+4], 0

; 1375 : 
; 1376 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1377 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1378 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1379 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN17@CreateDed:

; 1380 : 
; 1381 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN16@CreateDed

; 1382 : 
; 1383 : 		if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CreateDed

; 1384 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1385 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	eax, DWORD PTR _objectInitStr$[ebp+12]
	push	eax
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateDed
$LN15@CreateDed:

; 1386 : 		}
; 1387 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CreateDed

; 1388 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1389 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.destRect.top), 
; 1390 : 					&(objectInitStr.destRect.left), 
; 1391 : 					&(objectInitStr.destRect.bottom), 
; 1392 : 					&(objectInitStr.destRect.right));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+64]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+68]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+60]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN7@CreateDed
$LN13@CreateDed:

; 1393 : 		}
; 1394 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@CreateDed

; 1395 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1396 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	eax, DWORD PTR _objectInitStr$[ebp+4]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN7@CreateDed
$LN11@CreateDed:

; 1397 : 		}
; 1398 : 		else if(!strcmpi(ptoken, PROP_COLOR0_STR)) {

	push	OFFSET ??_C@_06JGNLDMKC@color0?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CreateDed

; 1399 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1400 : 			sscanf(ptoken, "%lx", &dedInitStr.color0);

	lea	edx, DWORD PTR _dedInitStr$[ebp]
	push	edx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN7@CreateDed
$LN9@CreateDed:

; 1401 : 		}
; 1402 : 		else if (!strcmpi(ptoken, PROP_DED_TYPE)) {

	push	OFFSET ??_C@_07NCIJPOHC@dedtype?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CreateDed

; 1403 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1404 : 			if (!strcmpi(ptoken, PROP_DED_DED)) {

	push	OFFSET ??_C@_03CFHCOHNP@ded?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@CreateDed

; 1405 : 				dedInitStr.dedtype = DEDT_DED;

	mov	DWORD PTR _dedInitStr$[ebp+4], 0
	jmp	SHORT $LN4@CreateDed
$LN6@CreateDed:

; 1406 : 			}
; 1407 : 			else if (!strcmpi(ptoken, PROP_DED_PFL)) {

	push	OFFSET ??_C@_03DAJGBDEG@pfl?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@CreateDed

; 1408 : 				dedInitStr.dedtype = DEDT_PFL;

	mov	DWORD PTR _dedInitStr$[ebp+4], 1
$LN4@CreateDed:
$LN7@CreateDed:

; 1409 : 			}
; 1410 : 			else
; 1411 : 				CockpitMessage(ptoken, "DED", gDebugLineNum);
; 1412 : 		}
; 1413 : 		else {
; 1414 : 			CockpitMessage(ptoken, "DED", gDebugLineNum);
; 1415 : 		}
; 1416 : 
; 1417 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1418 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1419 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1420 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1421 : 	}

	jmp	$LN17@CreateDed
$LN16@CreateDed:

; 1422 : 
; 1423 : 	objectInitStr.hScale			= mHScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 1424 : 	objectInitStr.vScale			= mVScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 1425 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 1426 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 1427 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 1428 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 1429 : 
; 1430 : 	CPDed *p = new CPDed(&objectInitStr, &dedInitStr);

	push	252					; 000000fcH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN22@CreateDed
	lea	ecx, DWORD PTR _dedInitStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPDed@@QAE@PAUObjectInitStr@@PAUDedInitStr@@@Z ; CPDed::CPDed
	mov	DWORD PTR tv226[ebp], eax
	jmp	SHORT $LN23@CreateDed
$LN22@CreateDed:
	mov	DWORD PTR tv226[ebp], 0
$LN23@CreateDed:
	mov	eax, DWORD PTR tv226[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 1431 : 	ShiAssert(p);
; 1432 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateDed
	jmp	SHORT $LN20@CreateDed
$LN1@CreateDed:

; 1433 : 
; 1434 : 	mpObjects.push_back(p);

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1435 : 	mObjectTally++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN20@CreateDed:

; 1436 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-664]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateDed@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateDed
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -604					; size = 4
$T2 = -600						; size = 4
$T3 = -596						; size = 4
tv155 = -592						; size = 4
_p$ = -588						; size = 4
_this$ = -584						; size = 4
_plinePtr$ = -580					; size = 4
_ptoken$ = -576						; size = 4
_cursorInitStruct$ = -572				; size = 36
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateCursor
; _this$ = ecx

; 1442 : void CockpitManager::CreateCursor(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 592				; 00000250H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1443 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1444 : 	char*				plinePtr;
; 1445 : 	char				*ptoken;
; 1446 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1447 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1448 : 	CursorInitStr	cursorInitStruct;
; 1449 : 
; 1450 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 1451 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 1452 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 1453 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN7@CreateCurs:

; 1454 : 
; 1455 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN6@CreateCurs

; 1456 : 
; 1457 : 		if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateCurs

; 1458 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1459 : 			sscanf(ptoken, "%d %d %d %d", &(cursorInitStruct.srcRect.top), 
; 1460 : 					&(cursorInitStruct.srcRect.left), 
; 1461 : 					&(cursorInitStruct.srcRect.bottom), 
; 1462 : 					&(cursorInitStruct.srcRect.right));

	lea	edx, DWORD PTR _cursorInitStruct$[ebp+12]
	push	edx
	lea	eax, DWORD PTR _cursorInitStruct$[ebp+16]
	push	eax
	lea	ecx, DWORD PTR _cursorInitStruct$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _cursorInitStruct$[ebp+8]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	SHORT $LN4@CreateCurs
$LN5@CreateCurs:

; 1463 : 		}
; 1464 : 		else if(!strcmpi(ptoken, PROP_HOTSPOT_STR)) {

	push	OFFSET ??_C@_07KJALOCCP@hotspot?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@CreateCurs

; 1465 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1466 : 			sscanf(ptoken, "%d %d", &cursorInitStruct.xhotSpot, 
; 1467 : 					&cursorInitStruct.yhotSpot);

	lea	eax, DWORD PTR _cursorInitStruct$[ebp+24]
	push	eax
	lea	ecx, DWORD PTR _cursorInitStruct$[ebp+20]
	push	ecx
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H
$LN4@CreateCurs:

; 1468 : 		}
; 1469 : 		else {
; 1470 : 			CockpitMessage(ptoken, "Cursor", gDebugLineNum);
; 1471 : 		}
; 1472 : 
; 1473 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1474 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1475 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1476 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1477 : 	}

	jmp	$LN7@CreateCurs
$LN6@CreateCurs:

; 1478 : 
; 1479 : 	cursorInitStruct.idNum			= idNum;

	mov	eax, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _cursorInitStruct$[ebp], eax

; 1480 : 	cursorInitStruct.pOtwImage		= mpOTWImage;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+716]
	mov	DWORD PTR _cursorInitStruct$[ebp+28], edx

; 1481 : 	cursorInitStruct.pTemplate		= gpTemplateSurface;

	mov	eax, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _cursorInitStruct$[ebp+32], eax

; 1482 : 
; 1483 : 	CPCursor *p = new CPCursor(&cursorInitStruct);

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@CreateCurs
	lea	ecx, DWORD PTR _cursorInitStruct$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPCursor@@QAE@PAUCursorInitStr@@@Z	; CPCursor::CPCursor
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN11@CreateCurs
$LN10@CreateCurs:
	mov	DWORD PTR tv155[ebp], 0
$LN11@CreateCurs:
	mov	edx, DWORD PTR tv155[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 1484 : 	ShiAssert(p);
; 1485 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateCurs
	jmp	SHORT $LN8@CreateCurs
$LN1@CreateCurs:

; 1486 : 
; 1487 : 	mpCursors.push_back(p);

	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?push_back@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXABQAVCPCursor@@@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::push_back

; 1488 : 	mCursorTally++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN8@CreateCurs:

; 1489 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCursor@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateCursor
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -744					; size = 4
$T2 = -740						; size = 4
$T3 = -736						; size = 4
$T4 = -732						; size = 4
$T5 = -728						; size = 4
$T6 = -724						; size = 4
_p$ = -720						; size = 4
tv442 = -716						; size = 4
$T7 = -712						; size = 4
_pointsIndex$ = -708					; size = 4
_valuesIndex$ = -704					; size = 4
_this$ = -700						; size = 4
_plinePtr$ = -696					; size = 4
_ptoken$ = -692						; size = 4
_objectInitStr$ = -688					; size = 92
_dialInitStr$ = -596					; size = 60
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateDial
; _this$ = ecx

; 1810 : void CockpitManager::CreateDial(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 732				; 000002dcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1811 : 
; 1812 : 	char						plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1813 : 	char*						plinePtr;
; 1814 : 	char						*ptoken;
; 1815 : 	char						pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1816 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1817 : 	DialInitStr				dialInitStr={0};

	mov	DWORD PTR _dialInitStr$[ebp], 0
	push	56					; 00000038H
	push	0
	lea	edx, DWORD PTR _dialInitStr$[ebp+4]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1818 : 	ObjectInitStr			objectInitStr;
; 1819 : 	int						valuesIndex = 0;

	mov	DWORD PTR _valuesIndex$[ebp], 0

; 1820 : 	int						pointsIndex = 0;

	mov	DWORD PTR _pointsIndex$[ebp], 0

; 1821 : 
; 1822 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1823 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1824 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1825 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1826 : 	dialInitStr.ppoints = NULL;

	mov	DWORD PTR _dialInitStr$[ebp+32], 0

; 1827 : 	dialInitStr.pvalues = NULL;

	mov	DWORD PTR _dialInitStr$[ebp+28], 0

; 1828 : 	dialInitStr.IsRendered=false;			//Wombat778 3-26-04 the needle isnt rendered unless explicitly stated in the dat file

	mov	DWORD PTR _dialInitStr$[ebp+52], 0
$LN47@CreateDial:

; 1829 : 
; 1830 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN46@CreateDial

; 1831 : 
; 1832 : 		if(!strcmpi(ptoken, PROP_NUMENDPOINTS_STR)) {

	push	OFFSET ??_C@_0N@NJACGLBK@numendpoints?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN45@CreateDial

; 1833 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1834 : 			sscanf(ptoken, "%d", &dialInitStr.endPoints);

	lea	ecx, DWORD PTR _dialInitStr$[ebp+24]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1835 : #ifdef USE_SH_POOLS
; 1836 : 			if(dialInitStr.endPoints > 0) {
; 1837 : 				dialInitStr.ppoints = (float *)MemAllocPtr(gCockMemPool,sizeof(float)*dialInitStr.endPoints,FALSE);
; 1838 : 				dialInitStr.pvalues = (float *)MemAllocPtr(gCockMemPool,sizeof(float)*dialInitStr.endPoints,FALSE);
; 1839 : 			}
; 1840 : #else
; 1841 : 			dialInitStr.ppoints	= new float[dialInitStr.endPoints];

	xor	ecx, ecx
	mov	eax, DWORD PTR _dialInitStr$[ebp+24]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR _dialInitStr$[ebp+32], eax

; 1842 : 			dialInitStr.pvalues = new float[dialInitStr.endPoints];

	xor	ecx, ecx
	mov	eax, DWORD PTR _dialInitStr$[ebp+24]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _dialInitStr$[ebp+28], eax
	jmp	$LN6@CreateDial
$LN45@CreateDial:

; 1843 : #endif
; 1844 : 		}
; 1845 : 		else if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN43@CreateDial

; 1846 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1847 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	eax, DWORD PTR _objectInitStr$[ebp+12]
	push	eax
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN43@CreateDial:

; 1848 : 		}
; 1849 : 		else if(!strcmpi(ptoken, PROP_POINTS_STR)) {

	push	OFFSET ??_C@_06GPGIDCJA@points?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@CreateDial

; 1850 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN40@CreateDial:

; 1851 : 			while(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN39@CreateDial

; 1852 : 				sscanf(ptoken, "%f", &dialInitStr.ppoints[pointsIndex]);

	mov	edx, DWORD PTR _pointsIndex$[ebp]
	mov	eax, DWORD PTR _dialInitStr$[ebp+32]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1853 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1854 : 				pointsIndex++;

	mov	edx, DWORD PTR _pointsIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _pointsIndex$[ebp], edx

; 1855 : 			}

	jmp	SHORT $LN40@CreateDial
$LN39@CreateDial:

; 1856 : 		}
; 1857 : 		else if(!strcmpi(ptoken, PROP_VALUES_STR)) {

	jmp	$LN6@CreateDial
$LN41@CreateDial:
	push	OFFSET ??_C@_06GEKOPAHD@values?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@CreateDial

; 1858 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN36@CreateDial:

; 1859 : 			while(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN35@CreateDial

; 1860 : 				sscanf(ptoken, "%f", &dialInitStr.pvalues[valuesIndex]);

	mov	eax, DWORD PTR _valuesIndex$[ebp]
	mov	ecx, DWORD PTR _dialInitStr$[ebp+28]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1861 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1862 : 				valuesIndex++;

	mov	eax, DWORD PTR _valuesIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _valuesIndex$[ebp], eax

; 1863 : 			}

	jmp	SHORT $LN36@CreateDial
$LN35@CreateDial:

; 1864 : 		}
; 1865 : 		else if(!strcmpi(ptoken, PROP_RADIUS0_STR)) {

	jmp	$LN6@CreateDial
$LN37@CreateDial:
	push	OFFSET ??_C@_07ILDOBJAO@radius0?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@CreateDial

; 1866 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1867 : 			sscanf(ptoken, "%d", &dialInitStr.radius0);

	lea	ecx, DWORD PTR _dialInitStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN33@CreateDial:

; 1868 : 		}
; 1869 : 		else if(!strcmpi(ptoken, PROP_RADIUS1_STR)) {

	push	OFFSET ??_C@_07JCCFCIEP@radius1?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@CreateDial

; 1870 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1871 : 			sscanf(ptoken, "%d", &dialInitStr.radius1);

	lea	eax, DWORD PTR _dialInitStr$[ebp+4]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN31@CreateDial:

; 1872 : 		}
; 1873 : 		else if(!strcmpi(ptoken, PROP_RADIUS2_STR)) {

	push	OFFSET ??_C@_07LJAIHLIM@radius2?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@CreateDial

; 1874 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1875 : 			sscanf(ptoken, "%d", &dialInitStr.radius2);

	lea	edx, DWORD PTR _dialInitStr$[ebp+8]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN29@CreateDial:

; 1876 : 		}
; 1877 : 		else if(!strcmpi(ptoken, PROP_COLOR0_STR)) {

	push	OFFSET ??_C@_06JGNLDMKC@color0?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@CreateDial

; 1878 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1879 : 			sscanf(ptoken, "%lx", &dialInitStr.color0);

	lea	ecx, DWORD PTR _dialInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN27@CreateDial:

; 1880 : 		}
; 1881 : 		else if(!strcmpi(ptoken, PROP_COLOR1_STR)) {

	push	OFFSET ??_C@_06IPMAANOD@color1?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@CreateDial

; 1882 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1883 : 			sscanf(ptoken, "%lx", &dialInitStr.color1);

	lea	eax, DWORD PTR _dialInitStr$[ebp+16]
	push	eax
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN25@CreateDial:

; 1884 : 		}
; 1885 : 		else if(!strcmpi(ptoken, PROP_COLOR2_STR)) {

	push	OFFSET ??_C@_06KEONFOCA@color2?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@CreateDial

; 1886 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1887 : 			sscanf(ptoken, "%lx", &dialInitStr.color2);

	lea	edx, DWORD PTR _dialInitStr$[ebp+20]
	push	edx
	push	OFFSET ??_C@_03OPHMLOFF@?$CFlx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN23@CreateDial:

; 1888 : 		}
; 1889 : 
; 1890 : 		else if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CreateDial

; 1891 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1892 : 			sscanf(ptoken, "%d %d %d %d", &(dialInitStr.srcRect.top), 
; 1893 : 					&(dialInitStr.srcRect.left), 
; 1894 : 					&(dialInitStr.srcRect.bottom), 
; 1895 : 					&(dialInitStr.srcRect.right));

	lea	eax, DWORD PTR _dialInitStr$[ebp+44]
	push	eax
	lea	ecx, DWORD PTR _dialInitStr$[ebp+48]
	push	ecx
	lea	edx, DWORD PTR _dialInitStr$[ebp+36]
	push	edx
	lea	eax, DWORD PTR _dialInitStr$[ebp+40]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN6@CreateDial
$LN21@CreateDial:

; 1896 : 		}
; 1897 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CreateDial

; 1898 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1899 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.destRect.top), 
; 1900 : 					&(objectInitStr.destRect.left), 
; 1901 : 					&(objectInitStr.destRect.bottom), 
; 1902 : 					&(objectInitStr.destRect.right));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+64]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+68]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+60]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H

; 1903 : 
; 1904 : 			objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0
	jmp	$LN6@CreateDial
$LN19@CreateDial:

; 1905 : 		}
; 1906 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@CreateDial

; 1907 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1908 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	eax, DWORD PTR _objectInitStr$[ebp+4]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN6@CreateDial
$LN17@CreateDial:

; 1909 : 		}
; 1910 : 
; 1911 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN15@CreateDial

; 1912 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1913 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	edx, DWORD PTR _objectInitStr$[ebp+16]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1914 : 
; 1915 : 			if(!objectInitStr.persistant) {

	cmp	DWORD PTR _objectInitStr$[ebp+16], 0
	jne	SHORT $LN14@CreateDial

; 1916 : 				objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 1917 : 				objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 1918 : 				objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 1919 : 				objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 1920 : 
; 1921 : 				objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	ecx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], ecx

; 1922 : 				objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1
$LN14@CreateDial:

; 1923 : 			}
; 1924 : 		}

	jmp	$LN6@CreateDial
$LN15@CreateDial:

; 1925 : 		else if(!strcmpi(ptoken, PROP_BSRCLOC_STR)) {

	push	OFFSET ??_C@_07DBEABAHD@bsrcloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@CreateDial

; 1926 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1927 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bsrcRect.top), 
; 1928 : 					&(objectInitStr.bsrcRect.left), 
; 1929 : 					&(objectInitStr.bsrcRect.bottom), 
; 1930 : 					&(objectInitStr.bsrcRect.right));

	lea	ecx, DWORD PTR _objectInitStr$[ebp+32]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+36]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+24]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+28]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN6@CreateDial
$LN12@CreateDial:

; 1931 : 		}
; 1932 : 		else if(!strcmpi(ptoken, PROP_BDESTLOC_STR)) {

	push	OFFSET ??_C@_08BLADEKNC@bdestloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@CreateDial

; 1933 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1934 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.bdestRect.top), 
; 1935 : 					&(objectInitStr.bdestRect.left), 
; 1936 : 					&(objectInitStr.bdestRect.bottom), 
; 1937 : 					&(objectInitStr.bdestRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+52]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+40]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+44]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN6@CreateDial
$LN10@CreateDial:

; 1938 : 		}
; 1939 : 		else if(!strcmpi(ptoken, PROP_BSURFACE_STR)) {

	push	OFFSET ??_C@_08HGPFHPFG@bsurface?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@CreateDial

; 1940 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1941 : 			sscanf(ptoken, "%d", &(objectInitStr.bsurface));

	lea	eax, DWORD PTR _objectInitStr$[ebp+20]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN6@CreateDial
$LN8@CreateDial:

; 1942 : 		}
; 1943 : 		else if(!strcmpi(ptoken, PROP_RENDER_NEEDLE)) {			//Wombat778 3-26-04 support for rendered textured needles

	push	OFFSET ??_C@_0N@IHJMLMAG@renderneedle?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@CreateDial

; 1944 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1945 : 			sscanf(ptoken, "%d", &(dialInitStr.IsRendered));

	lea	ecx, DWORD PTR _dialInitStr$[ebp+52]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN6@CreateDial:

; 1946 : 		}
; 1947 : 
; 1948 : 		else {
; 1949 : 			CockpitMessage(ptoken, "Dial", gDebugLineNum);
; 1950 : 		}
; 1951 : 
; 1952 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1953 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1954 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1955 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1956 : 	}

	jmp	$LN47@CreateDial
$LN46@CreateDial:

; 1957 : 
; 1958 : 	//Wombat778 3-26-04 Code for rendering the dials instead of line drawing
; 1959 : 	//Wombat778 4-11-04 added some error reporting
; 1960 : 
; 1961 : 	if (DisplayOptions.bRender2DCockpit && dialInitStr.IsRendered)

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	eax, eax
	je	$LN4@CreateDial
	cmp	DWORD PTR _dialInitStr$[ebp+52], 0
	je	$LN4@CreateDial

; 1962 : 	{
; 1963 : 		//Wombat778 4-13-04 prevent a heap error with pit errors
; 1964 : 		if ((dialInitStr.srcRect.bottom-dialInitStr.srcRect.top)* (dialInitStr.srcRect.right-dialInitStr.srcRect.left) > 0)		//Wombat778 4-22-04 changed from >=  to >

	mov	ecx, DWORD PTR _dialInitStr$[ebp+48]
	sub	ecx, DWORD PTR _dialInitStr$[ebp+40]
	mov	edx, DWORD PTR _dialInitStr$[ebp+44]
	sub	edx, DWORD PTR _dialInitStr$[ebp+36]
	imul	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN3@CreateDial

; 1965 : 			dialInitStr.sourcedial = new BYTE[(dialInitStr.srcRect.bottom-dialInitStr.srcRect.top)* (dialInitStr.srcRect.right-dialInitStr.srcRect.left)];	 

	mov	eax, DWORD PTR _dialInitStr$[ebp+48]
	sub	eax, DWORD PTR _dialInitStr$[ebp+40]
	mov	ecx, DWORD PTR _dialInitStr$[ebp+44]
	sub	ecx, DWORD PTR _dialInitStr$[ebp+36]
	imul	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _dialInitStr$[ebp+56], edx

; 1966 : 		else 

	jmp	SHORT $LN2@CreateDial
$LN3@CreateDial:

; 1967 : 			dialInitStr.sourcedial = NULL;

	mov	DWORD PTR _dialInitStr$[ebp+56], 0
$LN2@CreateDial:

; 1968 : 
; 1969 : 		SafeImageCopy(gpTemplateImage, dialInitStr.sourcedial, mTemplateHeight,mTemplateWidth, &dialInitStr.srcRect);							//wombat778 4-11-04 make safeimagecopy always used

	lea	eax, DWORD PTR _dialInitStr$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	push	ecx
	mov	edx, DWORD PTR _dialInitStr$[ebp+56]
	push	edx
	mov	eax, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy
$LN4@CreateDial:

; 1970 : 	}
; 1971 : 	//Wombat778 end
; 1972 : 
; 1973 : 	objectInitStr.hScale				= mHScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 1974 : 	objectInitStr.vScale				= mVScale;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 1975 : 	objectInitStr.idNum				= idNum;

	mov	eax, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], eax

; 1976 : 	objectInitStr.pOTWImage			= mpOTWImage;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], edx

; 1977 : 	objectInitStr.pTemplate			= gpTemplateSurface;

	mov	eax, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], eax

; 1978 : 	objectInitStr.pCPManager		= this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], ecx

; 1979 : 
; 1980 : 	CPDial *p = new CPDial(&objectInitStr, &dialInitStr);

	push	272					; 00000110H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN50@CreateDial
	lea	edx, DWORD PTR _dialInitStr$[ebp]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0CPDial@@QAE@PAUObjectInitStr@@PAUDialInitStr@@@Z ; CPDial::CPDial
	mov	DWORD PTR tv442[ebp], eax
	jmp	SHORT $LN51@CreateDial
$LN50@CreateDial:
	mov	DWORD PTR tv442[ebp], 0
$LN51@CreateDial:
	mov	ecx, DWORD PTR tv442[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$[ebp], edx

; 1981 : 	ShiAssert(p);
; 1982 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateDial
	jmp	SHORT $LN48@CreateDial
$LN1@CreateDial:

; 1983 : 
; 1984 : 	mpObjects.push_back(p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1985 : 	mObjectTally++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN48@CreateDial:

; 1986 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-736]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateDial@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateDial
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -784					; size = 4
$T2 = -780						; size = 4
$T3 = -776						; size = 4
$T4 = -772						; size = 4
$T5 = -768						; size = 4
$T6 = -764						; size = 4
$T7 = -760						; size = 4
$T8 = -756						; size = 4
$T9 = -752						; size = 4
$T10 = -748						; size = 4
$T11 = -744						; size = 4
$T12 = -740						; size = 4
$T13 = -736						; size = 4
tv499 = -732						; size = 4
_p$ = -728						; size = 4
$T14 = -724						; size = 4
tv429 = -720						; size = 4
$T15 = -716						; size = 4
$T16 = -712						; size = 4
_tmpVar$17 = -708					; size = 4
_indicatorInitStr$ = -704				; size = 40
_this$ = -664						; size = 4
_destIndex$ = -660					; size = 4
_i$18 = -656						; size = 4
_plinePtr$ = -652					; size = 4
_ptoken$ = -648						; size = 4
_objectInitStr$ = -644					; size = 92
_plineBuffer$ = -552					; size = 512
_porientationStr$ = -40					; size = 15
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC ; CockpitManager::CreateIndicator
; _this$ = ecx

; 1627 : void CockpitManager::CreateIndicator(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 772				; 00000304H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1628 : 
; 1629 : 	char						plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1630 : 	char*						plinePtr;
; 1631 : 	char						*ptoken;
; 1632 : 	char						porientationStr[15] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _porientationStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _porientationStr$[ebp+1], eax
	mov	DWORD PTR _porientationStr$[ebp+5], eax
	mov	DWORD PTR _porientationStr$[ebp+9], eax
	mov	WORD PTR _porientationStr$[ebp+13], ax

; 1633 : 	char						pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1634 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1635 : 	IndicatorInitStr		indicatorInitStr={0};

	mov	DWORD PTR _indicatorInitStr$[ebp], 0
	xor	ecx, ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+4], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+8], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+12], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+16], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+20], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+24], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+28], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+32], ecx
	mov	DWORD PTR _indicatorInitStr$[ebp+36], ecx

; 1636 : 	ObjectInitStr			objectInitStr;
; 1637 : 	int						destIndex = 0;

	mov	DWORD PTR _destIndex$[ebp], 0

; 1638 : 
; 1639 : 
; 1640 : 	objectInitStr.bsrcRect.top			= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 1641 : 	objectInitStr.bsrcRect.left		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 1642 : 	objectInitStr.bsrcRect.bottom		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 1643 : 	objectInitStr.bsrcRect.right		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 1644 : 	objectInitStr.bdestRect				= objectInitStr.bsrcRect;

	mov	edx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], edx

; 1645 : 	objectInitStr.bsurface				= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1

; 1646 : 	indicatorInitStr.calibrationVal	= 0;

	mov	DWORD PTR _indicatorInitStr$[ebp+32], 0

; 1647 : 	indicatorInitStr.pdestRect       = NULL;

	mov	DWORD PTR _indicatorInitStr$[ebp+24], 0

; 1648 : 	indicatorInitStr.psrcRect        = NULL;

	mov	DWORD PTR _indicatorInitStr$[ebp+28], 0

; 1649 : 	indicatorInitStr.minPos          = NULL;

	mov	DWORD PTR _indicatorInitStr$[ebp+8], 0

; 1650 : 	indicatorInitStr.maxPos          = NULL;

	mov	DWORD PTR _indicatorInitStr$[ebp+16], 0

; 1651 : 	indicatorInitStr.numTapes        = 0;

	mov	DWORD PTR _indicatorInitStr$[ebp], 0

; 1652 : 
; 1653 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1654 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1655 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1656 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN45@CreateIndi:

; 1657 : 
; 1658 : 	while (strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN44@CreateIndi

; 1659 : 		if (!strcmpi(ptoken, PROP_MINVAL_STR)) {

	push	OFFSET ??_C@_06EPACOAOG@minval?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN43@CreateIndi

; 1660 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1661 : 			sscanf(ptoken, "%f", &indicatorInitStr.minVal);

	lea	ecx, DWORD PTR _indicatorInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN43@CreateIndi:

; 1662 : 		}
; 1663 : 		else if (!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@CreateIndi

; 1664 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1665 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	edx, DWORD PTR _objectInitStr$[ebp+12]
	push	edx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN41@CreateIndi:

; 1666 : 		}
; 1667 : 		else if (!strcmpi(ptoken, PROP_MAXVAL_STR)) {

	push	OFFSET ??_C@_06EMPBAAKJ@maxval?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@CreateIndi

; 1668 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1669 : 			sscanf(ptoken, "%f", &indicatorInitStr.maxVal);

	lea	ecx, DWORD PTR _indicatorInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN39@CreateIndi:

; 1670 : 		}
; 1671 : 		else if (!strcmpi(ptoken, PROP_MINPOS_STR)) {

	push	OFFSET ??_C@_06KNKNJMKO@minpos?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@CreateIndi

; 1672 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1673 : 			sscanf(ptoken, "%d", &indicatorInitStr.minPos[destIndex]);

	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN37@CreateIndi:

; 1674 : 		}
; 1675 : 		else if (!strcmpi(ptoken, PROP_MAXPOS_STR)) {

	push	OFFSET ??_C@_06KOFOHMOB@maxpos?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@CreateIndi

; 1676 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1677 : 			sscanf(ptoken, "%d", &indicatorInitStr.maxPos[destIndex]);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	edx, DWORD PTR _indicatorInitStr$[ebp+16]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN35@CreateIndi:

; 1678 : 		}
; 1679 : 		else if (!strcmpi(ptoken, PROP_NUMTAPES_STR)) {

	push	OFFSET ??_C@_08JGFGJBPO@numtapes?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN33@CreateIndi

; 1680 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1681 : 			sscanf(ptoken, "%d", &indicatorInitStr.numTapes);

	lea	edx, DWORD PTR _indicatorInitStr$[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1682 : #ifdef USE_SH_POOLS
; 1683 : 			if(indicatorInitStr.numTapes > 0) {
; 1684 : 				indicatorInitStr.pdestRect = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT)*indicatorInitStr.numTapes,FALSE);
; 1685 : 				indicatorInitStr.psrcRect = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT)*indicatorInitStr.numTapes,FALSE);
; 1686 : 				indicatorInitStr.minPos = (int *)MemAllocPtr(gCockMemPool,sizeof(int)*indicatorInitStr.numTapes,FALSE);
; 1687 : 				indicatorInitStr.maxPos = (int *)MemAllocPtr(gCockMemPool,sizeof(int)*indicatorInitStr.numTapes,FALSE);
; 1688 : 			}
; 1689 : #else
; 1690 : 			indicatorInitStr.pdestRect = new RECT[indicatorInitStr.numTapes];

	xor	ecx, ecx
	mov	eax, DWORD PTR _indicatorInitStr$[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR _indicatorInitStr$[ebp+24], eax

; 1691 : 			indicatorInitStr.psrcRect = new RECT[indicatorInitStr.numTapes];

	xor	ecx, ecx
	mov	eax, DWORD PTR _indicatorInitStr$[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	eax, DWORD PTR $T8[ebp]
	mov	DWORD PTR _indicatorInitStr$[ebp+28], eax

; 1692 : 			indicatorInitStr.minPos = new int[indicatorInitStr.numTapes];

	xor	ecx, ecx
	mov	eax, DWORD PTR _indicatorInitStr$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR _indicatorInitStr$[ebp+8], eax

; 1693 : 			indicatorInitStr.maxPos = new int[indicatorInitStr.numTapes];

	xor	ecx, ecx
	mov	eax, DWORD PTR _indicatorInitStr$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _indicatorInitStr$[ebp+16], eax
	jmp	$LN17@CreateIndi
$LN33@CreateIndi:

; 1694 : #endif
; 1695 : 		}
; 1696 : 		else if (!strcmpi(ptoken, PROP_CALIBRATIONVAL_STR)) {

	push	OFFSET ??_C@_0P@NNIOPPFJ@calibrationval?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@CreateIndi

; 1697 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1698 : 			sscanf(ptoken, "%d", &indicatorInitStr.calibrationVal);

	lea	ecx, DWORD PTR _indicatorInitStr$[ebp+32]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN31@CreateIndi:

; 1699 : 		}
; 1700 : 		else if (!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@CreateIndi

; 1701 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1702 : 			sscanf(ptoken, "%d %d %d %d", &(indicatorInitStr.psrcRect[destIndex].top), 
; 1703 : 					&(indicatorInitStr.psrcRect[destIndex].left), 
; 1704 : 					&(indicatorInitStr.psrcRect[destIndex].bottom), 
; 1705 : 					&(indicatorInitStr.psrcRect[destIndex].right));

	mov	edx, DWORD PTR _destIndex$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _indicatorInitStr$[ebp+28]
	lea	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	mov	edx, DWORD PTR _destIndex$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _indicatorInitStr$[ebp+28]
	lea	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	mov	edx, DWORD PTR _destIndex$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _indicatorInitStr$[ebp+28]
	push	edx
	mov	eax, DWORD PTR _destIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+28]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN17@CreateIndi
$LN29@CreateIndi:

; 1706 : 		}
; 1707 : 		else if (!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN27@CreateIndi

; 1708 : 			F4Assert(destIndex < indicatorInitStr.numTapes);
; 1709 : 
; 1710 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1711 : 			sscanf(ptoken, "%d %d %d %d", &(indicatorInitStr.pdestRect[destIndex].top), 
; 1712 : 					&(indicatorInitStr.pdestRect[destIndex].left), 
; 1713 : 					&(indicatorInitStr.pdestRect[destIndex].bottom), 
; 1714 : 					&(indicatorInitStr.pdestRect[destIndex].right));

	mov	eax, DWORD PTR _destIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+24]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _destIndex$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+24]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _destIndex$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _indicatorInitStr$[ebp+24]
	push	eax
	mov	ecx, DWORD PTR _destIndex$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _indicatorInitStr$[ebp+24]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 1715 : 
; 1716 : 			objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0

; 1717 : 			if (destIndex == 0){

	cmp	DWORD PTR _destIndex$[ebp], 0
	jne	$LN23@CreateIndi

; 1718 : 				for (int tmpVar=1; tmpVar<indicatorInitStr.numTapes; tmpVar++){

	mov	DWORD PTR _tmpVar$17[ebp], 1
	jmp	SHORT $LN25@CreateIndi
$LN24@CreateIndi:
	mov	edx, DWORD PTR _tmpVar$17[ebp]
	add	edx, 1
	mov	DWORD PTR _tmpVar$17[ebp], edx
$LN25@CreateIndi:
	mov	eax, DWORD PTR _tmpVar$17[ebp]
	cmp	eax, DWORD PTR _indicatorInitStr$[ebp]
	jge	SHORT $LN23@CreateIndi

; 1719 : 					indicatorInitStr.maxPos[tmpVar] = indicatorInitStr.maxPos[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _tmpVar$17[ebp]
	mov	eax, DWORD PTR _indicatorInitStr$[ebp+16]
	mov	esi, DWORD PTR _indicatorInitStr$[ebp+16]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx*4], ecx

; 1720 : 					indicatorInitStr.minPos[tmpVar] = indicatorInitStr.minPos[0];

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _tmpVar$17[ebp]
	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+8]
	mov	esi, DWORD PTR _indicatorInitStr$[ebp+8]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax*4], edx

; 1721 : 					indicatorInitStr.psrcRect[tmpVar] = indicatorInitStr.psrcRect[0];

	mov	eax, 16					; 00000010H
	imul	eax, 0
	add	eax, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	ecx, DWORD PTR _tmpVar$17[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 1722 : 				}

	jmp	$LN24@CreateIndi
$LN23@CreateIndi:

; 1723 : 			}
; 1724 : 			destIndex++;

	mov	ecx, DWORD PTR _destIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destIndex$[ebp], ecx
	jmp	$LN17@CreateIndi
$LN27@CreateIndi:

; 1725 : 		}
; 1726 : 		else if (!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@CreateIndi

; 1727 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1728 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	edx, DWORD PTR _objectInitStr$[ebp+4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN21@CreateIndi:

; 1729 : 		}
; 1730 : 		else if (!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@CreateIndi

; 1731 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1732 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+16]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN17@CreateIndi
$LN19@CreateIndi:

; 1733 : 		}
; 1734 : 		else if (!strcmpi(ptoken, PROP_ORIENTATION_STR)) {

	push	OFFSET ??_C@_0M@KPMDGEHG@orientation?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@CreateIndi

; 1735 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1736 : 			sscanf(ptoken, "%s", porientationStr);

	lea	eax, DWORD PTR _porientationStr$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 1737 : 			if (!strcmpi(porientationStr, PROP_HORIZONTAL_STR)) {

	push	OFFSET ??_C@_0L@LMMKHPOB@horizontal?$AA@
	lea	edx, DWORD PTR _porientationStr$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@CreateIndi

; 1738 : 				indicatorInitStr.orientation = IND_HORIZONTAL;

	mov	DWORD PTR _indicatorInitStr$[ebp+20], 1
	jmp	SHORT $LN14@CreateIndi
$LN16@CreateIndi:

; 1739 : 			}
; 1740 : 			else if (!strcmpi(porientationStr, PROP_VERTICAL_STR)) {

	push	OFFSET ??_C@_08NEOMLJGJ@vertical?$AA@
	lea	eax, DWORD PTR _porientationStr$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@CreateIndi

; 1741 : 				indicatorInitStr.orientation = IND_VERTICAL;

	mov	DWORD PTR _indicatorInitStr$[ebp+20], 0
$LN14@CreateIndi:
$LN17@CreateIndi:

; 1742 : 			}
; 1743 : 			else {
; 1744 : 				ShiWarning("Bad Orientation String");
; 1745 : 			}
; 1746 : 		}
; 1747 : 		else {
; 1748 : 			CockpitMessage(ptoken, "Indicator", gDebugLineNum);
; 1749 : 		}
; 1750 : 
; 1751 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1752 : 		gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 1753 : 		plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 1754 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1755 : 	}

	jmp	$LN45@CreateIndi
$LN44@CreateIndi:

; 1756 : 
; 1757 : 	//Wombat778 3-22-04 Code for rendering the indicators instead of blitting
; 1758 : 	//Wombat778 4-11-04 added some error reporting
; 1759 : 
; 1760 : 	if (DisplayOptions.bRender2DCockpit)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	$LN2@CreateIndi

; 1761 : 	{
; 1762 : 		//Wombat778 4-13-04 prevent a heap error with pit errors
; 1763 : 		if (indicatorInitStr.numTapes >= 0)

	cmp	DWORD PTR _indicatorInitStr$[ebp], 0
	jl	$LN10@CreateIndi

; 1764 : 			indicatorInitStr.sourceindicator = new SourceIndicatorType[indicatorInitStr.numTapes];	 

	mov	edx, DWORD PTR _indicatorInitStr$[ebp]
	mov	DWORD PTR $T15[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T15[ebp]
	mov	edx, 28					; 0000001cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN48@CreateIndi
	mov	ecx, DWORD PTR $T16[ebp]
	mov	edx, DWORD PTR $T15[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1SourceIndicatorType@@QAE@XZ
	push	OFFSET ??0SourceIndicatorType@@QAE@XZ
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	push	28					; 0000001cH
	mov	ecx, DWORD PTR $T16[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T16[ebp]
	add	edx, 4
	mov	DWORD PTR tv429[ebp], edx
	jmp	SHORT $LN49@CreateIndi
$LN48@CreateIndi:
	mov	DWORD PTR tv429[ebp], 0
$LN49@CreateIndi:
	mov	eax, DWORD PTR tv429[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _indicatorInitStr$[ebp+36], ecx

; 1765 : 		else

	jmp	SHORT $LN9@CreateIndi
$LN10@CreateIndi:

; 1766 : 			indicatorInitStr.sourceindicator = NULL;

	mov	DWORD PTR _indicatorInitStr$[ebp+36], 0
$LN9@CreateIndi:

; 1767 : 
; 1768 : 		if (indicatorInitStr.sourceindicator) 

	cmp	DWORD PTR _indicatorInitStr$[ebp+36], 0
	je	$LN8@CreateIndi

; 1769 : 			for(int i = 0; i < indicatorInitStr.numTapes; i++)

	mov	DWORD PTR _i$18[ebp], 0
	jmp	SHORT $LN7@CreateIndi
$LN6@CreateIndi:
	mov	edx, DWORD PTR _i$18[ebp]
	add	edx, 1
	mov	DWORD PTR _i$18[ebp], edx
$LN7@CreateIndi:
	mov	eax, DWORD PTR _i$18[ebp]
	cmp	eax, DWORD PTR _indicatorInitStr$[ebp]
	jge	$LN5@CreateIndi

; 1770 : 			{										
; 1771 : 				//Wombat778 4-13-04 prevent a heap error with pit errors
; 1772 : 				if ((indicatorInitStr.psrcRect[i].bottom-indicatorInitStr.psrcRect[i].top)* (indicatorInitStr.psrcRect[i].right-indicatorInitStr.psrcRect[i].left) > 0)		//Wombat778 4-22-04 changed from >=  to >

	mov	ecx, DWORD PTR _i$18[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$18[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	esi, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	ecx, DWORD PTR [eax+ecx+12]
	sub	ecx, DWORD PTR [esi+edx+4]
	mov	edx, DWORD PTR _i$18[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$18[ebp]
	shl	eax, 4
	mov	esi, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	edi, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	edx, DWORD PTR [esi+edx+8]
	sub	edx, DWORD PTR [edi+eax]
	imul	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN4@CreateIndi

; 1773 : 					indicatorInitStr.sourceindicator[i].indicator = new BYTE[(indicatorInitStr.psrcRect[i].bottom-indicatorInitStr.psrcRect[i].top)* (indicatorInitStr.psrcRect[i].right-indicatorInitStr.psrcRect[i].left)];	 

	mov	eax, DWORD PTR _i$18[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$18[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	esi, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	eax, DWORD PTR [edx+eax+12]
	sub	eax, DWORD PTR [esi+ecx+4]
	mov	ecx, DWORD PTR _i$18[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$18[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	edi, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	ecx, DWORD PTR [esi+ecx+8]
	sub	ecx, DWORD PTR [edi+edx]
	imul	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR _i$18[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _indicatorInitStr$[ebp+36]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 1774 : 				else 

	jmp	SHORT $LN3@CreateIndi
$LN4@CreateIndi:

; 1775 : 					indicatorInitStr.sourceindicator[i].indicator = NULL;

	mov	edx, DWORD PTR _i$18[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _indicatorInitStr$[ebp+36]
	mov	DWORD PTR [eax+edx], 0
$LN3@CreateIndi:

; 1776 : 
; 1777 : 				SafeImageCopy(gpTemplateImage, indicatorInitStr.sourceindicator[i].indicator, mTemplateHeight,mTemplateWidth, &indicatorInitStr.psrcRect[i]);					//wombat778 4-11-04 make safeimagecopy always used					

	mov	ecx, DWORD PTR _i$18[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _indicatorInitStr$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	push	edx
	mov	eax, DWORD PTR _i$18[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+36]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy

; 1778 : 			}

	jmp	$LN6@CreateIndi
$LN5@CreateIndi:
	jmp	SHORT $LN2@CreateIndi
$LN8@CreateIndi:

; 1779 : 		else 
; 1780 : 			CockpitError(gDebugLineNum,1);	//Wombat778 4-11-04

	push	1
	mov	ecx, DWORD PTR _gDebugLineNum
	push	ecx
	call	?CockpitError@@YAXHH@Z			; CockpitError
	add	esp, 8
$LN2@CreateIndi:

; 1781 : 	}
; 1782 : 
; 1783 : 	//Wombat778 end
; 1784 : 
; 1785 : 	objectInitStr.hScale			= mHScale;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 1786 : 	objectInitStr.vScale			= mVScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 1787 : 	objectInitStr.idNum			= idNum;

	mov	ecx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], ecx

; 1788 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], eax

; 1789 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], ecx

; 1790 : 	objectInitStr.pCPManager	= this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], edx

; 1791 : 	objectInitStr.destRect		= *indicatorInitStr.pdestRect;

	mov	eax, DWORD PTR _indicatorInitStr$[ebp+24]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _objectInitStr$[ebp+56], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _objectInitStr$[ebp+60], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _objectInitStr$[ebp+64], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _objectInitStr$[ebp+68], edx

; 1792 : 
; 1793 : 	CPIndicator *p = new CPIndicator(&objectInitStr, &indicatorInitStr);

	push	204					; 000000ccH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN50@CreateIndi
	lea	eax, DWORD PTR _indicatorInitStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0CPIndicator@@QAE@PAUObjectInitStr@@PAUIndicatorInitStr@@@Z ; CPIndicator::CPIndicator
	mov	DWORD PTR tv499[ebp], eax
	jmp	SHORT $LN51@CreateIndi
$LN50@CreateIndi:
	mov	DWORD PTR tv499[ebp], 0
$LN51@CreateIndi:
	mov	edx, DWORD PTR tv499[ebp]
	mov	DWORD PTR $T11[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T11[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 1794 : 	ShiAssert(p);
; 1795 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateIndi
	jmp	$LN46@CreateIndi
$LN1@CreateIndi:

; 1796 : 
; 1797 : 	delete [] indicatorInitStr.pdestRect;

	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+24]
	mov	DWORD PTR $T10[ebp], ecx
	mov	edx, DWORD PTR $T10[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1798 : 	delete [] indicatorInitStr.psrcRect;

	mov	eax, DWORD PTR _indicatorInitStr$[ebp+28]
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR $T9[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1799 : 	delete [] indicatorInitStr.minPos;

	mov	edx, DWORD PTR _indicatorInitStr$[ebp+8]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1800 : 	delete [] indicatorInitStr.maxPos;

	mov	ecx, DWORD PTR _indicatorInitStr$[ebp+16]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1801 : 
; 1802 : 	mpObjects.push_back(p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T12[ebp], eax
	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1803 : 	mObjectTally++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN46@CreateIndi:

; 1804 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z$1:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-784]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateIndicator@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP ; CockpitManager::CreateIndicator
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -692					; size = 4
$T2 = -688						; size = 4
$T3 = -684						; size = 4
$T4 = -680						; size = 4
$T5 = -676						; size = 4
tv298 = -672						; size = 4
_p$ = -668						; size = 4
$T6 = -664						; size = 4
tv366 = -660						; size = 4
$T7 = -656						; size = 4
$T8 = -652						; size = 4
_plinePtr$ = -648					; size = 4
_this$ = -644						; size = 4
_state$ = -640						; size = 4
_i$9 = -636						; size = 4
_ptoken$ = -632						; size = 4
_buttonViewInitStr$ = -628				; size = 60
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC ; CockpitManager::CreateButtonView
; _this$ = ecx

; 2965 : void CockpitManager::CreateButtonView(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2966 : 
; 2967 : 	char					plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2968 : 	char*					plinePtr;
; 2969 : 	char					*ptoken;
; 2970 : 	char					pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 2971 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 2972 : 	char					ptransparencyStr[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptransparencyStr$[ebp+1], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+5], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+9], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+13], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+17], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+21], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+25], eax
	mov	WORD PTR _ptransparencyStr$[ebp+29], ax
	mov	BYTE PTR _ptransparencyStr$[ebp+31], al

; 2973 : 	ButtonViewInitStr		buttonViewInitStr={0};

	mov	DWORD PTR _buttonViewInitStr$[ebp], 0
	push	56					; 00000038H
	push	0
	lea	ecx, DWORD PTR _buttonViewInitStr$[ebp+4]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2974 : 	int						state = 0;

	mov	DWORD PTR _state$[ebp], 0

; 2975 : 
; 2976 : 	buttonViewInitStr.objectId = idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _buttonViewInitStr$[ebp], edx

; 2977 : 	buttonViewInitStr.pSrcRect = NULL;

	mov	DWORD PTR _buttonViewInitStr$[ebp+36], 0

; 2978 : 	buttonViewInitStr.states = 0;

	mov	DWORD PTR _buttonViewInitStr$[ebp+12], 0

; 2979 : 
; 2980 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 2981 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 2982 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 2983 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN29@CreateButt:

; 2984 : 
; 2985 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN28@CreateButt

; 2986 : 
; 2987 : 
; 2988 : 		if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN27@CreateButt

; 2989 : 			F4Assert(state < buttonViewInitStr.states);
; 2990 : 
; 2991 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2992 : 			sscanf(ptoken, "%d %d %d %d", &(buttonViewInitStr.pSrcRect[state].top), 
; 2993 : 					&(buttonViewInitStr.pSrcRect[state].left), 
; 2994 : 					&(buttonViewInitStr.pSrcRect[state].bottom), 
; 2995 : 					&(buttonViewInitStr.pSrcRect[state].right));

	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _buttonViewInitStr$[ebp+36]
	lea	edx, DWORD PTR [ecx+eax+8]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _buttonViewInitStr$[ebp+36]
	lea	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _buttonViewInitStr$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _buttonViewInitStr$[ebp+36]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H

; 2996 : 			buttonViewInitStr.pSrcRect[state].bottom++;

	mov	edx, DWORD PTR _state$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	ecx, DWORD PTR [eax+edx+12]
	add	ecx, 1
	mov	edx, DWORD PTR _state$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	DWORD PTR [eax+edx+12], ecx

; 2997 : 			buttonViewInitStr.pSrcRect[state].right++;

	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	eax, DWORD PTR [edx+ecx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	DWORD PTR [edx+ecx+8], eax

; 2998 : 			state++;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 1
	mov	DWORD PTR _state$[ebp], eax
	jmp	$LN15@CreateButt
$LN27@CreateButt:

; 2999 : 		}
; 3000 : 
; 3001 : 		else if(!strcmpi(ptoken, PROP_STATES_STR)) {

	push	OFFSET ??_C@_06CFKBOPCI@states?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@CreateButt

; 3002 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3003 : 			sscanf(ptoken, "%d", &buttonViewInitStr.states);

	lea	ecx, DWORD PTR _buttonViewInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 3004 : #ifdef USE_SH_POOLS
; 3005 : 			if(buttonViewInitStr.states > 0) {
; 3006 : 				buttonViewInitStr.pSrcRect = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT)*buttonViewInitStr.states,FALSE);
; 3007 : 			}
; 3008 : #else
; 3009 : 			buttonViewInitStr.pSrcRect = new RECT[buttonViewInitStr.states];

	xor	ecx, ecx
	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+12]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _buttonViewInitStr$[ebp+36], eax
	jmp	$LN15@CreateButt
$LN25@CreateButt:

; 3010 : #endif
; 3011 : 		}
; 3012 : 		else if(!strcmpi(ptoken, PROP_PARENTBUTTON_STR)) {

	push	OFFSET ??_C@_0N@MDIPHOIK@parentbutton?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@CreateButt

; 3013 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3014 : 			sscanf(ptoken, "%d", &buttonViewInitStr.parentButton);

	lea	ecx, DWORD PTR _buttonViewInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN15@CreateButt
$LN23@CreateButt:

; 3015 : 		}
; 3016 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN21@CreateButt

; 3017 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3018 : 			sscanf(ptoken, "%s %d %d %d %d", ptransparencyStr,
; 3019 : 					&(buttonViewInitStr.destRect.top), 
; 3020 : 					&(buttonViewInitStr.destRect.left), 
; 3021 : 					&(buttonViewInitStr.destRect.bottom), 
; 3022 : 					&(buttonViewInitStr.destRect.right));

	lea	edx, DWORD PTR _buttonViewInitStr$[ebp+28]
	push	edx
	lea	eax, DWORD PTR _buttonViewInitStr$[ebp+32]
	push	eax
	lea	ecx, DWORD PTR _buttonViewInitStr$[ebp+20]
	push	ecx
	lea	edx, DWORD PTR _buttonViewInitStr$[ebp+24]
	push	edx
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 3023 : 
; 3024 : 			buttonViewInitStr.destRect.bottom++; 

	mov	edx, DWORD PTR _buttonViewInitStr$[ebp+32]
	add	edx, 1
	mov	DWORD PTR _buttonViewInitStr$[ebp+32], edx

; 3025 : 			buttonViewInitStr.destRect.right++;

	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+28]
	add	eax, 1
	mov	DWORD PTR _buttonViewInitStr$[ebp+28], eax

; 3026 : 
; 3027 : 			if(!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@CreateButt

; 3028 : 				buttonViewInitStr.transparencyType	= CPTRANSPARENT;

	mov	DWORD PTR _buttonViewInitStr$[ebp+8], 1
	jmp	SHORT $LN18@CreateButt
$LN20@CreateButt:

; 3029 : 			}
; 3030 : 			else if(!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	edx, DWORD PTR _ptransparencyStr$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@CreateButt

; 3031 : 				buttonViewInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _buttonViewInitStr$[ebp+8], 0
$LN18@CreateButt:

; 3032 : 			}
; 3033 : 			else {
; 3034 : 				ShiWarning("Bad Transparency Type"); //couldn't read in transparency type
; 3035 : 			}

	jmp	SHORT $LN15@CreateButt
$LN21@CreateButt:

; 3036 : 		}
; 3037 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CreateButt

; 3038 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3039 : 			sscanf(ptoken, "%d", &buttonViewInitStr.persistant);

	lea	eax, DWORD PTR _buttonViewInitStr$[ebp+16]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN15@CreateButt:

; 3040 : 		}
; 3041 : 		else {
; 3042 : 			CockpitMessage(ptoken, "ButtonView", gDebugLineNum);
; 3043 : 		}
; 3044 : 
; 3045 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 3046 : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 3047 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 3048 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3049 : 	}

	jmp	$LN29@CreateButt
$LN28@CreateButt:

; 3050 : 	//Wombat778 3-22-04 Code for rendering the buttonviews instead of blitting
; 3051 : 	//Wombat778 4-11-04 Added some error reporting
; 3052 : 
; 3053 : 	if (DisplayOptions.bRender2DCockpit)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	$LN2@CreateButt

; 3054 : 	{
; 3055 : 		//Wombat778 4-13-04 prevent a heap error with pit errors
; 3056 : 		if (buttonViewInitStr.states)			//Wombat778 4-18-04 dont create an error if the states = 0, because cockpits use this.

	cmp	DWORD PTR _buttonViewInitStr$[ebp+12], 0
	je	$LN12@CreateButt

; 3057 : 		{
; 3058 : 			if (buttonViewInitStr.states > 0)

	cmp	DWORD PTR _buttonViewInitStr$[ebp+12], 0
	jle	$LN11@CreateButt

; 3059 : 				buttonViewInitStr.sourcebuttonview = new SourceButtonViewType[buttonViewInitStr.states];

	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+12]
	mov	DWORD PTR $T7[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN32@CreateButt
	mov	ecx, DWORD PTR $T8[ebp]
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1SourceButtonViewType@@QAE@XZ
	push	OFFSET ??0SourceButtonViewType@@QAE@XZ
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T8[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T8[ebp]
	add	edx, 4
	mov	DWORD PTR tv298[ebp], edx
	jmp	SHORT $LN33@CreateButt
$LN32@CreateButt:
	mov	DWORD PTR tv298[ebp], 0
$LN33@CreateButt:
	mov	eax, DWORD PTR tv298[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _buttonViewInitStr$[ebp+56], ecx

; 3060 : 			else 

	jmp	SHORT $LN10@CreateButt
$LN11@CreateButt:

; 3061 : 				buttonViewInitStr.sourcebuttonview = NULL;

	mov	DWORD PTR _buttonViewInitStr$[ebp+56], 0
$LN10@CreateButt:

; 3062 : 
; 3063 : 			if (buttonViewInitStr.sourcebuttonview) 					

	cmp	DWORD PTR _buttonViewInitStr$[ebp+56], 0
	je	$LN9@CreateButt

; 3064 : 				for(int i = 0; i < buttonViewInitStr.states; i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN8@CreateButt
$LN7@CreateButt:
	mov	edx, DWORD PTR _i$9[ebp]
	add	edx, 1
	mov	DWORD PTR _i$9[ebp], edx
$LN8@CreateButt:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _buttonViewInitStr$[ebp+12]
	jge	$LN6@CreateButt

; 3065 : 				{										
; 3066 : 					//Wombat778 4-13-04 prevent a heap error with pit errors
; 3067 : 					if ((buttonViewInitStr.pSrcRect[i].bottom-buttonViewInitStr.pSrcRect[i].top)* (buttonViewInitStr.pSrcRect[i].right-buttonViewInitStr.pSrcRect[i].left) > 0)	//Wombat778 4-22-04 changed from >=  to >

	mov	ecx, DWORD PTR _i$9[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$9[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	esi, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	ecx, DWORD PTR [eax+ecx+12]
	sub	ecx, DWORD PTR [esi+edx+4]
	mov	edx, DWORD PTR _i$9[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$9[ebp]
	shl	eax, 4
	mov	esi, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	edi, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	edx, DWORD PTR [esi+edx+8]
	sub	edx, DWORD PTR [edi+eax]
	imul	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN5@CreateButt

; 3068 : 						buttonViewInitStr.sourcebuttonview[i].buttonview = new BYTE[(buttonViewInitStr.pSrcRect[i].bottom-buttonViewInitStr.pSrcRect[i].top)* (buttonViewInitStr.pSrcRect[i].right-buttonViewInitStr.pSrcRect[i].left)];	 

	mov	eax, DWORD PTR _i$9[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$9[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	esi, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	eax, DWORD PTR [edx+eax+12]
	sub	eax, DWORD PTR [esi+ecx+4]
	mov	ecx, DWORD PTR _i$9[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$9[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	edi, DWORD PTR _buttonViewInitStr$[ebp+36]
	mov	ecx, DWORD PTR [esi+ecx+8]
	sub	ecx, DWORD PTR [edi+edx]
	imul	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR _i$9[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+56]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 3069 : 					else 

	jmp	SHORT $LN4@CreateButt
$LN5@CreateButt:

; 3070 : 						buttonViewInitStr.sourcebuttonview[i].buttonview = NULL;

	mov	edx, DWORD PTR _i$9[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _buttonViewInitStr$[ebp+56]
	mov	DWORD PTR [eax+edx], 0
$LN4@CreateButt:

; 3071 : 
; 3072 : 					SafeImageCopy(gpTemplateImage, buttonViewInitStr.sourcebuttonview[i].buttonview, mTemplateHeight, mTemplateWidth, &buttonViewInitStr.pSrcRect[i]);					//wombat778 4-11-04 make safeimagecopy always used					

	mov	ecx, DWORD PTR _i$9[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _buttonViewInitStr$[ebp+36]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	push	edx
	mov	eax, DWORD PTR _i$9[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _buttonViewInitStr$[ebp+56]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy

; 3073 : 				}	

	jmp	$LN7@CreateButt
$LN6@CreateButt:
	jmp	SHORT $LN3@CreateButt
$LN9@CreateButt:

; 3074 : 			else
; 3075 : 				CockpitError(gDebugLineNum,1);	//Wombat778 4-11-04

	push	1
	mov	ecx, DWORD PTR _gDebugLineNum
	push	ecx
	call	?CockpitError@@YAXHH@Z			; CockpitError
	add	esp, 8
$LN3@CreateButt:

; 3076 : 		}
; 3077 : 		else

	jmp	SHORT $LN2@CreateButt
$LN12@CreateButt:

; 3078 : 			buttonViewInitStr.sourcebuttonview = NULL;

	mov	DWORD PTR _buttonViewInitStr$[ebp+56], 0
$LN2@CreateButt:

; 3079 : 	}
; 3080 : 
; 3081 : 	//Wombat778 end
; 3082 : 	buttonViewInitStr.hScale			= mHScale;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	movss	DWORD PTR _buttonViewInitStr$[ebp+48], xmm0

; 3083 : 	buttonViewInitStr.vScale			= mVScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _buttonViewInitStr$[ebp+52], xmm0

; 3084 : 	buttonViewInitStr.objectId		= idNum;

	mov	ecx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _buttonViewInitStr$[ebp], ecx

; 3085 : 	buttonViewInitStr.pOTWImage	= mpOTWImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+716]
	mov	DWORD PTR _buttonViewInitStr$[ebp+40], eax

; 3086 : 	buttonViewInitStr.pTemplate	= gpTemplateSurface;

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _buttonViewInitStr$[ebp+44], ecx

; 3087 : 
; 3088 : 	CPButtonView *p = new CPButtonView(&buttonViewInitStr);

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN34@CreateButt
	lea	edx, DWORD PTR _buttonViewInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0CPButtonView@@QAE@PAUButtonViewInitStr@@@Z ; CPButtonView::CPButtonView
	mov	DWORD PTR tv366[ebp], eax
	jmp	SHORT $LN35@CreateButt
$LN34@CreateButt:
	mov	DWORD PTR tv366[ebp], 0
$LN35@CreateButt:
	mov	eax, DWORD PTR tv366[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 3089 : 	ShiAssert(p);
; 3090 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateButt
	jmp	SHORT $LN30@CreateButt
$LN1@CreateButt:

; 3091 : 
; 3092 : 	mpButtonViews.push_back(p);

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?push_back@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXABQAVCPButtonView@@@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::push_back

; 3093 : 	mButtonViewTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx
$LN30@CreateButt:

; 3094 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z$1:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-692]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateButtonView@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP ; CockpitManager::CreateButtonView
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -604					; size = 4
$T2 = -600						; size = 4
$T3 = -596						; size = 4
tv242 = -592						; size = 4
_p$ = -588						; size = 4
_this$ = -584						; size = 4
_plinePtr$ = -580					; size = 4
_ptoken$ = -576						; size = 4
_buttonObjectInitStr$ = -572				; size = 36
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateButton
; _this$ = ecx

; 3100 : void CockpitManager::CreateButton(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 592				; 00000250H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3101 : 
; 3102 : 	char						plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 3103 : 	char*						plinePtr;
; 3104 : 	char						*ptoken;
; 3105 : 	char						pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 3106 : 	const int				lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 3107 : 	ButtonObjectInitStr	buttonObjectInitStr;
; 3108 : 
; 3109 : 
; 3110 : 	buttonObjectInitStr.objectId = idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _buttonObjectInitStr$[ebp], edx

; 3111 : 
; 3112 : 	buttonObjectInitStr.sound1 = -1;

	mov	DWORD PTR _buttonObjectInitStr$[ebp+28], -1

; 3113 : 	buttonObjectInitStr.sound2 = -1;

	mov	DWORD PTR _buttonObjectInitStr$[ebp+32], -1

; 3114 : 
; 3115 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 3116 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 3117 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 3118 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN19@CreateButt:

; 3119 : 
; 3120 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN18@CreateButt

; 3121 : 
; 3122 : 		if(!strcmpi(ptoken, PROP_STATES_STR)) {

	push	OFFSET ??_C@_06CFKBOPCI@states?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@CreateButt

; 3123 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3124 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.totalStates);

	lea	ecx, DWORD PTR _buttonObjectInitStr$[ebp+8]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN16@CreateButt
$LN17@CreateButt:

; 3125 : 		}
; 3126 : 		else if(!strcmpi(ptoken, PROP_DELAY_STR)) {

	push	OFFSET ??_C@_05EKJCMADO@delay?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CreateButt

; 3127 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3128 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.delay);

	lea	eax, DWORD PTR _buttonObjectInitStr$[ebp+24]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN16@CreateButt
$LN15@CreateButt:

; 3129 : 		}
; 3130 : 		else if(!strcmpi(ptoken, PROP_CURSORID_STR)) {

	push	OFFSET ??_C@_08PCCKKBCO@cursorid?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CreateButt

; 3131 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3132 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.cursorIndex);

	lea	edx, DWORD PTR _buttonObjectInitStr$[ebp+20]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN16@CreateButt
$LN13@CreateButt:

; 3133 : 		}
; 3134 : 		else if(!strcmpi(ptoken, PROP_INITSTATE_STR)) {

	push	OFFSET ??_C@_09DLKJFLMF@initstate?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@CreateButt

; 3135 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3136 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.normalState);

	lea	ecx, DWORD PTR _buttonObjectInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN16@CreateButt
$LN11@CreateButt:

; 3137 : 		}
; 3138 : 		else if(!strcmpi(ptoken, PROP_SOUND1_STR)) {

	push	OFFSET ??_C@_06CFPJNMHJ@sound1?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CreateButt

; 3139 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3140 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.sound1);

	lea	eax, DWORD PTR _buttonObjectInitStr$[ebp+28]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN16@CreateButt
$LN9@CreateButt:

; 3141 : 		}
; 3142 : 		else if(!strcmpi(ptoken, PROP_SOUND2_STR)) {

	push	OFFSET ??_C@_06ONEIPLK@sound2?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CreateButt

; 3143 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3144 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.sound2);

	lea	edx, DWORD PTR _buttonObjectInitStr$[ebp+32]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN16@CreateButt
$LN7@CreateButt:

; 3145 : 		}
; 3146 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateButt

; 3147 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3148 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.callbackSlot);

	lea	ecx, DWORD PTR _buttonObjectInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN16@CreateButt
$LN5@CreateButt:

; 3149 : 		}
; 3150 : 		else if(!strcmpi(ptoken, PROP_NUMBUTTONVIEWS_STR)) {

	push	OFFSET ??_C@_0P@HLMMFAAF@numbuttonviews?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@CreateButt

; 3151 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3152 : 			sscanf(ptoken, "%d", &buttonObjectInitStr.totalViews);

	lea	eax, DWORD PTR _buttonObjectInitStr$[ebp+16]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN16@CreateButt:

; 3153 : 		}
; 3154 : 		else {
; 3155 : 			CockpitMessage(ptoken, "Button", gDebugLineNum);
; 3156 : 		}
; 3157 : 
; 3158 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 3159 : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 3160 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 3161 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 3162 : 	}

	jmp	$LN19@CreateButt
$LN18@CreateButt:

; 3163 : 
; 3164 : 	CPButtonObject *p = new CPButtonObject(&buttonObjectInitStr);

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN22@CreateButt
	lea	edx, DWORD PTR _buttonObjectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPButtonObject@@QAE@PAUButtonObjectInitStr@@@Z ; CPButtonObject::CPButtonObject
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN23@CreateButt
$LN22@CreateButt:
	mov	DWORD PTR tv242[ebp], 0
$LN23@CreateButt:
	mov	eax, DWORD PTR tv242[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 3165 : 	ShiAssert(p);
; 3166 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateButt
	jmp	SHORT $LN20@CreateButt
$LN1@CreateButt:

; 3167 : 
; 3168 : 	mpButtonObjects.push_back(p);

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?push_back@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXABQAVCPButtonObject@@@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::push_back

; 3169 : 	mButtonTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN20@CreateButt:

; 3170 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateButton@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateButton
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -752					; size = 4
$T2 = -748						; size = 4
$T3 = -744						; size = 4
$T4 = -740						; size = 4
$T5 = -736						; size = 4
$T6 = -732						; size = 4
tv426 = -728						; size = 4
tv357 = -724						; size = 4
$T7 = -720						; size = 4
_p$ = -716						; size = 4
$T8 = -712						; size = 4
$T9 = -708						; size = 4
_lightButtonInitStr$ = -704				; size = 24
_state$ = -680						; size = 4
_this$ = -676						; size = 4
_plinePtr$ = -672					; size = 4
_i$10 = -668						; size = 4
_ptoken$ = -664						; size = 4
_objectInitStr$ = -660					; size = 92
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateLight
; _this$ = ecx

; 2815 : void CockpitManager::CreateLight(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 740				; 000002e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2816 : 
; 2817 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2818 : 	char*				plinePtr;
; 2819 : 	char				*ptoken;
; 2820 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 2821 : 	const int			lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 2822 : 	LightButtonInitStr	lightButtonInitStr={0};

	mov	DWORD PTR _lightButtonInitStr$[ebp], 0
	xor	edx, edx
	mov	DWORD PTR _lightButtonInitStr$[ebp+4], edx
	mov	DWORD PTR _lightButtonInitStr$[ebp+8], edx
	mov	DWORD PTR _lightButtonInitStr$[ebp+12], edx
	mov	DWORD PTR _lightButtonInitStr$[ebp+16], edx
	mov	DWORD PTR _lightButtonInitStr$[ebp+20], edx

; 2823 : 	ObjectInitStr		objectInitStr;
; 2824 : 	int					state = 0;

	mov	DWORD PTR _state$[ebp], 0

; 2825 : 	char				ptransparencyStr[32] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], al
	xor	ecx, ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+1], ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+5], ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+9], ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+13], ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+17], ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+21], ecx
	mov	DWORD PTR _ptransparencyStr$[ebp+25], ecx
	mov	WORD PTR _ptransparencyStr$[ebp+29], cx
	mov	BYTE PTR _ptransparencyStr$[ebp+31], cl

; 2826 : 
; 2827 : 	lightButtonInitStr.cursorId	= -1; // just so that we pass something nice to the light class

	mov	DWORD PTR _lightButtonInitStr$[ebp+4], -1

; 2828 : 	objectInitStr.cycleBits			= 0x0000;

	mov	DWORD PTR _objectInitStr$[ebp+12], 0

; 2829 : 
; 2830 : 	objectInitStr.bsrcRect.top		= 0;

	mov	DWORD PTR _objectInitStr$[ebp+28], 0

; 2831 : 	objectInitStr.bsrcRect.left	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+24], 0

; 2832 : 	objectInitStr.bsrcRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+36], 0

; 2833 : 	objectInitStr.bsrcRect.right	= 0;

	mov	DWORD PTR _objectInitStr$[ebp+32], 0

; 2834 : 	objectInitStr.bdestRect			= objectInitStr.bsrcRect;

	mov	edx, DWORD PTR _objectInitStr$[ebp+24]
	mov	DWORD PTR _objectInitStr$[ebp+40], edx
	mov	eax, DWORD PTR _objectInitStr$[ebp+28]
	mov	DWORD PTR _objectInitStr$[ebp+44], eax
	mov	ecx, DWORD PTR _objectInitStr$[ebp+32]
	mov	DWORD PTR _objectInitStr$[ebp+48], ecx
	mov	edx, DWORD PTR _objectInitStr$[ebp+36]
	mov	DWORD PTR _objectInitStr$[ebp+52], edx

; 2835 : 	objectInitStr.bsurface			= -1;

	mov	DWORD PTR _objectInitStr$[ebp+20], -1

; 2836 : 	lightButtonInitStr.psrcRect   = NULL;

	mov	DWORD PTR _lightButtonInitStr$[ebp+8], 0

; 2837 : 
; 2838 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 2839 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 2840 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 2841 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2842 : 	lightButtonInitStr.states = 0;

	mov	DWORD PTR _lightButtonInitStr$[ebp], 0
$LN33@CreateLigh:

; 2843 : 
; 2844 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN32@CreateLigh

; 2845 : 
; 2846 : 		if(!strcmpi(ptoken, PROP_STATES_STR)) {

	push	OFFSET ??_C@_06CFKBOPCI@states?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@CreateLigh

; 2847 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2848 : 			sscanf(ptoken, "%d", &lightButtonInitStr.states);

	lea	ecx, DWORD PTR _lightButtonInitStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2849 : #ifdef USE_SH_POOLS
; 2850 : 			if(lightButtonInitStr.states > 0) {
; 2851 : 				lightButtonInitStr.psrcRect = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT)*lightButtonInitStr.states,FALSE);
; 2852 : 			}
; 2853 : #else
; 2854 : 			lightButtonInitStr.psrcRect = new RECT[lightButtonInitStr.states];

	xor	ecx, ecx
	mov	eax, DWORD PTR _lightButtonInitStr$[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _lightButtonInitStr$[ebp+8], eax
	jmp	$LN13@CreateLigh
$LN31@CreateLigh:

; 2855 : #endif
; 2856 : 		}
; 2857 : 		else if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@CreateLigh

; 2858 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2859 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	eax, DWORD PTR _objectInitStr$[ebp+12]
	push	eax
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN13@CreateLigh
$LN29@CreateLigh:

; 2860 : 		}
; 2861 : 		else if(!strcmpi(ptoken, PROP_CURSORID_STR)) {

	push	OFFSET ??_C@_08PCCKKBCO@cursorid?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@CreateLigh

; 2862 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2863 : 			sscanf(ptoken, "%d", &lightButtonInitStr.cursorId);

	lea	edx, DWORD PTR _lightButtonInitStr$[ebp+4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN13@CreateLigh
$LN27@CreateLigh:

; 2864 : 		}
; 2865 : 		else if(!strcmpi(ptoken, PROP_INITSTATE_STR)) {

	push	OFFSET ??_C@_09DLKJFLMF@initstate?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@CreateLigh

; 2866 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2867 : 			sscanf(ptoken, "%d", &lightButtonInitStr.initialState);

	lea	ecx, DWORD PTR _lightButtonInitStr$[ebp+12]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN13@CreateLigh
$LN25@CreateLigh:

; 2868 : 		}
; 2869 : 		else if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN23@CreateLigh

; 2870 : 			F4Assert(state < lightButtonInitStr.states);
; 2871 : 
; 2872 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2873 : 			sscanf(ptoken, "%d %d %d %d", &(lightButtonInitStr.psrcRect[state].top), 
; 2874 : 					&(lightButtonInitStr.psrcRect[state].left), 
; 2875 : 					&(lightButtonInitStr.psrcRect[state].bottom), 
; 2876 : 					&(lightButtonInitStr.psrcRect[state].right));

	mov	edx, DWORD PTR _state$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _lightButtonInitStr$[ebp+8]
	lea	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _lightButtonInitStr$[ebp+8]
	lea	ecx, DWORD PTR [eax+edx+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _lightButtonInitStr$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _lightButtonInitStr$[ebp+8]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H

; 2877 : 			lightButtonInitStr.psrcRect[state].bottom++;

	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	eax, DWORD PTR [edx+ecx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	DWORD PTR [edx+ecx+12], eax

; 2878 : 			lightButtonInitStr.psrcRect[state].right++;

	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	edx, DWORD PTR [ecx+eax+8]
	add	edx, 1
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	DWORD PTR [ecx+eax+8], edx

; 2879 : 			state++;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 1
	mov	DWORD PTR _state$[ebp], edx
	jmp	$LN13@CreateLigh
$LN23@CreateLigh:

; 2880 : 		}
; 2881 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN21@CreateLigh

; 2882 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2883 : 			sscanf(ptoken, "%s %d %d %d %d", ptransparencyStr,
; 2884 : 					&(objectInitStr.destRect.top), 
; 2885 : 					&(objectInitStr.destRect.left), 
; 2886 : 					&(objectInitStr.destRect.bottom), 
; 2887 : 					&(objectInitStr.destRect.right));

	lea	edx, DWORD PTR _objectInitStr$[ebp+64]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+68]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+56]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+60]
	push	edx
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	push	OFFSET ??_C@_0P@GOFAHLEL@?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 28					; 0000001cH

; 2888 : 
; 2889 : 			if(!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	edx, DWORD PTR _ptransparencyStr$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@CreateLigh

; 2890 : 				objectInitStr.transparencyType	= CPTRANSPARENT;

	mov	DWORD PTR _objectInitStr$[ebp+8], 1
	jmp	SHORT $LN18@CreateLigh
$LN20@CreateLigh:

; 2891 : 			}
; 2892 : 			else if(!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	eax, DWORD PTR _ptransparencyStr$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@CreateLigh

; 2893 : 				objectInitStr.transparencyType	= CPOPAQUE;

	mov	DWORD PTR _objectInitStr$[ebp+8], 0
$LN18@CreateLigh:

; 2894 : 			}
; 2895 : 			else {
; 2896 : 				ShiWarning("Bad Transparency Type"); //couldn't read in transparency type
; 2897 : 			}

	jmp	$LN13@CreateLigh
$LN21@CreateLigh:

; 2898 : 		}
; 2899 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@CreateLigh

; 2900 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2901 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	ecx, DWORD PTR _objectInitStr$[ebp+4]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN13@CreateLigh
$LN15@CreateLigh:

; 2902 : 		}
; 2903 : 		else if(!strcmpi(ptoken, PROP_PERSISTANT_STR)) {

	push	OFFSET ??_C@_0L@LEFEFEBM@persistant?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@CreateLigh

; 2904 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2905 : 			sscanf(ptoken, "%d", &objectInitStr.persistant);

	lea	eax, DWORD PTR _objectInitStr$[ebp+16]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN13@CreateLigh:

; 2906 : 		}
; 2907 : 		else {
; 2908 : 			CockpitMessage(ptoken, "Light", gDebugLineNum);
; 2909 : 		}
; 2910 : 
; 2911 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 2912 : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 2913 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 2914 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2915 : 	}

	jmp	$LN33@CreateLigh
$LN32@CreateLigh:

; 2916 : 
; 2917 : 
; 2918 : 	//Wombat778 3-22-04 Code for rendering the lights instead of blitting
; 2919 : 	//Wombat778 4-11-04 Added some error reporting
; 2920 : 
; 2921 : 	if (DisplayOptions.bRender2DCockpit)

	movzx	edx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	edx, edx
	je	$LN2@CreateLigh

; 2922 : 	{
; 2923 : 		if (lightButtonInitStr.states >= 0)		//Wombat778 4-13-04 prevent a heap error with pit errors

	cmp	DWORD PTR _lightButtonInitStr$[ebp], 0
	jl	$LN10@CreateLigh

; 2924 : 			lightButtonInitStr.sourcelights = new SourceLightType[lightButtonInitStr.states];	 

	mov	eax, DWORD PTR _lightButtonInitStr$[ebp]
	mov	DWORD PTR $T8[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T8[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN36@CreateLigh
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1SourceLightType@@QAE@XZ
	push	OFFSET ??0SourceLightType@@QAE@XZ
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T9[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T9[ebp]
	add	edx, 4
	mov	DWORD PTR tv357[ebp], edx
	jmp	SHORT $LN37@CreateLigh
$LN36@CreateLigh:
	mov	DWORD PTR tv357[ebp], 0
$LN37@CreateLigh:
	mov	eax, DWORD PTR tv357[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _lightButtonInitStr$[ebp+20], ecx

; 2925 : 		else 

	jmp	SHORT $LN9@CreateLigh
$LN10@CreateLigh:

; 2926 : 			lightButtonInitStr.sourcelights = NULL;

	mov	DWORD PTR _lightButtonInitStr$[ebp+20], 0
$LN9@CreateLigh:

; 2927 : 
; 2928 : 		if (lightButtonInitStr.sourcelights) 			

	cmp	DWORD PTR _lightButtonInitStr$[ebp+20], 0
	je	$LN8@CreateLigh

; 2929 : 			for(int i = 0; i < lightButtonInitStr.states; i++)

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN7@CreateLigh
$LN6@CreateLigh:
	mov	edx, DWORD PTR _i$10[ebp]
	add	edx, 1
	mov	DWORD PTR _i$10[ebp], edx
$LN7@CreateLigh:
	mov	eax, DWORD PTR _i$10[ebp]
	cmp	eax, DWORD PTR _lightButtonInitStr$[ebp]
	jge	$LN5@CreateLigh

; 2930 : 			{										
; 2931 : 				//Wombat778 4-13-04 prevent a heap error with pit errors
; 2932 : 				if ((lightButtonInitStr.psrcRect[i].bottom-lightButtonInitStr.psrcRect[i].top)* (lightButtonInitStr.psrcRect[i].right-lightButtonInitStr.psrcRect[i].left) > 0)		//Wombat778 4-22-04 changed from >=  to >

	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	esi, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	ecx, DWORD PTR [eax+ecx+12]
	sub	ecx, DWORD PTR [esi+edx+4]
	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 4
	mov	esi, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	edi, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	edx, DWORD PTR [esi+edx+8]
	sub	edx, DWORD PTR [edi+eax]
	imul	ecx, edx
	test	ecx, ecx
	jle	SHORT $LN4@CreateLigh

; 2933 : 					lightButtonInitStr.sourcelights[i].light = new BYTE[(lightButtonInitStr.psrcRect[i].bottom-lightButtonInitStr.psrcRect[i].top)* (lightButtonInitStr.psrcRect[i].right-lightButtonInitStr.psrcRect[i].left)];	 

	mov	eax, DWORD PTR _i$10[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	esi, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	eax, DWORD PTR [edx+eax+12]
	sub	eax, DWORD PTR [esi+ecx+4]
	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _i$10[ebp]
	shl	edx, 4
	mov	esi, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	edi, DWORD PTR _lightButtonInitStr$[ebp+8]
	mov	ecx, DWORD PTR [esi+ecx+8]
	sub	ecx, DWORD PTR [edi+edx]
	imul	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	edx, DWORD PTR _i$10[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _lightButtonInitStr$[ebp+20]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 2934 : 				else 

	jmp	SHORT $LN3@CreateLigh
$LN4@CreateLigh:

; 2935 : 					lightButtonInitStr.sourcelights[i].light = NULL;

	mov	edx, DWORD PTR _i$10[ebp]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _lightButtonInitStr$[ebp+20]
	mov	DWORD PTR [eax+edx], 0
$LN3@CreateLigh:

; 2936 : 
; 2937 : 				SafeImageCopy(gpTemplateImage, lightButtonInitStr.sourcelights[i].light, mTemplateHeight, mTemplateWidth, &lightButtonInitStr.psrcRect[i]);					//wombat778 4-11-04 make safeimagecopy always used

	mov	ecx, DWORD PTR _i$10[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _lightButtonInitStr$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+240]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _lightButtonInitStr$[ebp+20]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy

; 2938 : 			}

	jmp	$LN6@CreateLigh
$LN5@CreateLigh:
	jmp	SHORT $LN2@CreateLigh
$LN8@CreateLigh:

; 2939 : 		else 
; 2940 : 			CockpitError(gDebugLineNum,1);	//Wombat778 4-11-04

	push	1
	mov	ecx, DWORD PTR _gDebugLineNum
	push	ecx
	call	?CockpitError@@YAXHH@Z			; CockpitError
	add	esp, 8
$LN2@CreateLigh:

; 2941 : 
; 2942 : 	}
; 2943 : 
; 2944 : 	//Wombat778 end
; 2945 : 	objectInitStr.hScale			= mHScale;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 2946 : 	objectInitStr.vScale			= mVScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 2947 : 	objectInitStr.idNum			= idNum;

	mov	ecx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], ecx

; 2948 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], eax

; 2949 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], ecx

; 2950 : 	objectInitStr.pCPManager	= this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], edx

; 2951 : 
; 2952 : 	CPLight *p = new CPLight(&objectInitStr, &lightButtonInitStr);

	push	164					; 000000a4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN38@CreateLigh
	lea	eax, DWORD PTR _lightButtonInitStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0CPLight@@QAE@PAUObjectInitStr@@PAULightButtonInitStr@@@Z ; CPLight::CPLight
	mov	DWORD PTR tv426[ebp], eax
	jmp	SHORT $LN39@CreateLigh
$LN38@CreateLigh:
	mov	DWORD PTR tv426[ebp], 0
$LN39@CreateLigh:
	mov	edx, DWORD PTR tv426[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 2953 : 	ShiAssert(p);
; 2954 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateLigh
	jmp	SHORT $LN34@CreateLigh
$LN1@CreateLigh:

; 2955 : 
; 2956 : 	mpObjects.push_back(p);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 2957 : 	mObjectTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN34@CreateLigh:

; 2958 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-752]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateLight@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateLight
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -664					; size = 4
$T2 = -660						; size = 4
$T3 = -656						; size = 4
$T4 = -652						; size = 4
$T5 = -648						; size = 4
$T6 = -644						; size = 4
$T7 = -640						; size = 4
$T8 = -636						; size = 4
$T9 = -632						; size = 4
$T10 = -628						; size = 4
$T11 = -624						; size = 4
$T12 = -620						; size = 4
$T13 = -616						; size = 4
_p$ = -612						; size = 4
tv943 = -608						; size = 4
_buttonViewIndex$ = -604				; size = 4
_objectIndex$ = -600					; size = 4
_this$ = -596						; size = 4
_surfaceIndex$ = -592					; size = 4
_osb3exists$ = -586					; size = 1
_osb4exists$ = -585					; size = 1
_plinePtr$ = -584					; size = 4
_i$ = -580						; size = 4
_ptoken$ = -576						; size = 4
_ppanelInitStr$ = -572					; size = 4
_plineBuffer$ = -568					; size = 512
_ptransparencyStr$ = -56				; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreatePanel
; _this$ = ecx

; 2161 : void CockpitManager::CreatePanel(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 652				; 0000028cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2162 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2163 : 	char*				plinePtr;
; 2164 : 	char				*ptoken;
; 2165 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 2166 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 2167 : 	PanelInitStr	*ppanelInitStr;
; 2168 : 	int				surfaceIndex = 0;

	mov	DWORD PTR _surfaceIndex$[ebp], 0

; 2169 : 	int				objectIndex = 0;

	mov	DWORD PTR _objectIndex$[ebp], 0

; 2170 : 	int				buttonViewIndex = 0;

	mov	DWORD PTR _buttonViewIndex$[ebp], 0

; 2171 : 	int            i;
; 2172 : 	char				ptransparencyStr[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _ptransparencyStr$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _ptransparencyStr$[ebp+1], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+5], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+9], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+13], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+17], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+21], eax
	mov	DWORD PTR _ptransparencyStr$[ebp+25], eax
	mov	WORD PTR _ptransparencyStr$[ebp+29], ax
	mov	BYTE PTR _ptransparencyStr$[ebp+31], al

; 2173 : 
; 2174 : 	bool			osb3exists = false;		//Wombat778 4-12-04

	mov	BYTE PTR _osb3exists$[ebp], 0

; 2175 : 	bool			osb4exists = false;		//Wombat778 4-12-04

	mov	BYTE PTR _osb4exists$[ebp], 0

; 2176 : 
; 2177 : #ifdef USE_SH_POOLS
; 2178 : 	ppanelInitStr = (PanelInitStr *)MemAllocPtr(gCockMemPool,sizeof(PanelInitStr),FALSE);
; 2179 : #else
; 2180 : 	ppanelInitStr = new PanelInitStr;

	push	800					; 00000320H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR _ppanelInitStr$[ebp], ecx

; 2181 : #endif
; 2182 : 
; 2183 : 	memset(ppanelInitStr->pviewRects, 0, sizeof(RECT*) * BOUNDS_TOTAL);

	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 2184 : 	ppanelInitStr->psurfaceData		= NULL;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [eax+132], 0

; 2185 : 	ppanelInitStr->pobjectIDs			= NULL;

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 2186 : 	ppanelInitStr->pbuttonViewIDs		= NULL;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [edx+40], 0

; 2187 : 	ppanelInitStr->numButtonViews		= NULL;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [eax+36], 0

; 2188 : 	ppanelInitStr->doGeometry	      = FALSE;

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 2189 : 	ppanelInitStr->mfdFont           = mMFDFont;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+792], ecx

; 2190 : 	ppanelInitStr->hudFont           = mHudFont;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+788], ecx

; 2191 : 	ppanelInitStr->dedFont           = mDEDFont;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR [edx+796], ecx

; 2192 : 	ppanelInitStr->pan = 0; // JPO more inits

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+4], xmm0

; 2193 : 	ppanelInitStr->tilt = 0;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2194 : 	ppanelInitStr->maskTop = 0;

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 2195 : 
; 2196 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 2197 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 2198 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 2199 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN86@CreatePane:

; 2200 : 
; 2201 : 	while(strcmpi(ptoken, END_MARKER)) {

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN85@CreatePane

; 2202 : 
; 2203 : 		if(!strcmpi(ptoken, PROP_NUMSURFACES_STR)) {

	push	OFFSET ??_C@_0M@KBCOJPLI@numsurfaces?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN84@CreatePane

; 2204 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2205 : 			sscanf(ptoken, "%d", &ppanelInitStr->numSurfaces);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2206 : #ifdef USE_SH_POOLS
; 2207 : 			if(ppanelInitStr->numSurfaces > 0) {
; 2208 : 				ppanelInitStr->psurfaceData = (PanelSurfaceStr *)MemAllocPtr(gCockMemPool,sizeof(PanelSurfaceStr)*ppanelInitStr->numSurfaces,FALSE);
; 2209 : 			}
; 2210 : #else
; 2211 : 			ppanelInitStr->psurfaceData = new PanelSurfaceStr[ppanelInitStr->numSurfaces];

	xor	ecx, ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+132], ecx
	jmp	$LN11@CreatePane
$LN84@CreatePane:

; 2212 : #endif
; 2213 : 		}
; 2214 : 		else if(!strcmpi(ptoken, PROP_DOGEOMETRY_STR)) {

	push	OFFSET ??_C@_0L@CBADCHBJ@dogeometry?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN82@CreatePane

; 2215 : 			ppanelInitStr->doGeometry	= TRUE;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [eax+136], 1
	jmp	$LN11@CreatePane
$LN82@CreatePane:

; 2216 : 		}
; 2217 : 		else if(!strcmpi(ptoken, PROP_MFDLEFT_STR)) {

	push	OFFSET ??_C@_07PNADDHHC@mfdleft?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN80@CreatePane

; 2218 : 
; 2219 : #ifdef USE_SH_POOLS
; 2220 : 			ppanelInitStr->pviewRects[BOUNDS_MFDLEFT]   = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT),FALSE);
; 2221 : #else
; 2222 : 			ppanelInitStr->pviewRects[BOUNDS_MFDLEFT]	= new RECT;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+edx+104], ecx

; 2223 : #endif
; 2224 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2225 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->pviewRects[BOUNDS_MFDLEFT]->top), 
; 2226 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFDLEFT]->left), 
; 2227 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFDLEFT]->bottom), 
; 2228 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFDLEFT]->right));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 8
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN80@CreatePane:

; 2229 : 		}
; 2230 : 		else if(!strcmpi(ptoken, PROP_MFDRIGHT_STR)) {

	push	OFFSET ??_C@_08KEAJBMEO@mfdright?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN78@CreatePane

; 2231 : 
; 2232 : #ifdef USE_SH_POOLS
; 2233 : 			ppanelInitStr->pviewRects[BOUNDS_MFDRIGHT]   = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT),FALSE);
; 2234 : #else
; 2235 : 			ppanelInitStr->pviewRects[BOUNDS_MFDRIGHT]	= new RECT;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+edx+104], ecx

; 2236 : #endif
; 2237 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2238 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->pviewRects[BOUNDS_MFDRIGHT]->top), 
; 2239 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFDRIGHT]->left), 
; 2240 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFDRIGHT]->bottom), 
; 2241 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFDRIGHT]->right));

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 8
	push	edx
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	push	edx
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN78@CreatePane:

; 2242 : 		}
; 2243 : 		//Wombat778 4-12-04 add support for additional in-cockpit mfds
; 2244 : 		else if(!strcmpi(ptoken, PROP_MFD3_STR)) {

	push	OFFSET ??_C@_04PNIHBFAN@mfd3?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN76@CreatePane

; 2245 : 
; 2246 : #ifdef USE_SH_POOLS
; 2247 : 			ppanelInitStr->pviewRects[BOUNDS_MFD3]   = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT),FALSE);
; 2248 : #else
; 2249 : 			ppanelInitStr->pviewRects[BOUNDS_MFD3]	= new RECT;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR [eax+edx+104], ecx

; 2250 : #endif
; 2251 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2252 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->pviewRects[BOUNDS_MFD3]->top), 
; 2253 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFD3]->left), 
; 2254 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFD3]->bottom), 
; 2255 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFD3]->right));

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 8
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN76@CreatePane:

; 2256 : 		}
; 2257 : 		//Wombat778 4-12-04 add support for additional in-cockpit mfds
; 2258 : 		else if(!strcmpi(ptoken, PROP_MFD4_STR)) {

	push	OFFSET ??_C@_04LCMGIDMK@mfd4?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN74@CreatePane

; 2259 : 
; 2260 : #ifdef USE_SH_POOLS
; 2261 : 			ppanelInitStr->pviewRects[BOUNDS_MFD4]   = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT),FALSE);
; 2262 : #else
; 2263 : 			ppanelInitStr->pviewRects[BOUNDS_MFD4]	= new RECT;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+edx+104], ecx

; 2264 : #endif
; 2265 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2266 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->pviewRects[BOUNDS_MFD4]->top), 
; 2267 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFD4]->left), 
; 2268 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFD4]->bottom), 
; 2269 : 					&(ppanelInitStr->pviewRects[BOUNDS_MFD4]->right));

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 8
	push	edx
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	push	edx
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN74@CreatePane:

; 2270 : 		}
; 2271 : 
; 2272 : 		else if(!strcmpi(ptoken, PROP_HUD_STR)) {

	push	OFFSET ??_C@_03HDICPLBH@hud?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN72@CreatePane

; 2273 : 
; 2274 : #ifdef USE_SH_POOLS
; 2275 : 			ppanelInitStr->pviewRects[BOUNDS_HUD]   = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT),FALSE);
; 2276 : #else
; 2277 : 			ppanelInitStr->pviewRects[BOUNDS_HUD]	= new RECT;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax+edx+104], ecx

; 2278 : #endif
; 2279 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2280 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->pviewRects[BOUNDS_HUD]->top), 
; 2281 : 					&(ppanelInitStr->pviewRects[BOUNDS_HUD]->left), 
; 2282 : 					&(ppanelInitStr->pviewRects[BOUNDS_HUD]->bottom), 
; 2283 : 					&(ppanelInitStr->pviewRects[BOUNDS_HUD]->right));

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 8
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	push	edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN72@CreatePane:

; 2284 : 		}
; 2285 : 		else if(!strcmpi(ptoken, PROP_RWR_STR)) {

	push	OFFSET ??_C@_03FDDKCNFF@rwr?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN70@CreatePane

; 2286 : 
; 2287 : #ifdef USE_SH_POOLS
; 2288 : 			ppanelInitStr->pviewRects[BOUNDS_RWR]   = (RECT *)MemAllocPtr(gCockMemPool,sizeof(RECT),FALSE);
; 2289 : #else
; 2290 : 			ppanelInitStr->pviewRects[BOUNDS_RWR]	= new RECT;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+edx+104], ecx

; 2291 : #endif
; 2292 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2293 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->pviewRects[BOUNDS_RWR]->top), 
; 2294 : 					&(ppanelInitStr->pviewRects[BOUNDS_RWR]->left), 
; 2295 : 					&(ppanelInitStr->pviewRects[BOUNDS_RWR]->bottom), 
; 2296 : 					&(ppanelInitStr->pviewRects[BOUNDS_RWR]->right));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 8
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+eax+104]
	add	edx, 4
	push	edx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN70@CreatePane:

; 2297 : 
; 2298 : 		}
; 2299 : 		else if(!strcmpi(ptoken, PROP_MOUSEBOUNDS_STR)) {

	push	OFFSET ??_C@_0M@PEDCGPJO@mousebounds?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN68@CreatePane

; 2300 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2301 : 			sscanf(ptoken, "%d %d %d %d", &(ppanelInitStr->mouseBounds.top), 
; 2302 : 					&(ppanelInitStr->mouseBounds.left), 
; 2303 : 					&(ppanelInitStr->mouseBounds.bottom), 
; 2304 : 					&(ppanelInitStr->mouseBounds.right));

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN11@CreatePane
$LN68@CreatePane:

; 2305 : 		}
; 2306 : 		else if(!strcmpi(ptoken, PROP_ADJPANELS_STR)) {

	push	OFFSET ??_C@_09CCBBEOKE@adjpanels?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN66@CreatePane

; 2307 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2308 : 			sscanf(ptoken, "%d %d %d %d %d %d %d %d", &(ppanelInitStr->adjacentPanels.N), 
; 2309 : 					&(ppanelInitStr->adjacentPanels.NE), 
; 2310 : 					&(ppanelInitStr->adjacentPanels.E), 
; 2311 : 					&(ppanelInitStr->adjacentPanels.SE),
; 2312 : 					&(ppanelInitStr->adjacentPanels.S),
; 2313 : 					&(ppanelInitStr->adjacentPanels.SW),
; 2314 : 					&(ppanelInitStr->adjacentPanels.W),
; 2315 : 					&(ppanelInitStr->adjacentPanels.NW));

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	push	OFFSET ??_C@_0BI@HDMMBKBM@?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 40					; 00000028H
	jmp	$LN11@CreatePane
$LN66@CreatePane:

; 2316 : 		}
; 2317 : 		else if(!strcmpi(ptoken, PROP_SURFACES_STR)) {

	push	OFFSET ??_C@_08FGPNIDBO@surfaces?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN64@CreatePane

; 2318 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2319 : 			sscanf(ptoken, "%d %d %s %d %d %d %d", &ppanelInitStr->psurfaceData[surfaceIndex].surfaceNum, 
; 2320 : 					&ppanelInitStr->psurfaceData[surfaceIndex].persistant,
; 2321 : 					ptransparencyStr,
; 2322 : 					&ppanelInitStr->psurfaceData[surfaceIndex].destRect.top, 
; 2323 : 					&ppanelInitStr->psurfaceData[surfaceIndex].destRect.left, 
; 2324 : 					&ppanelInitStr->psurfaceData[surfaceIndex].destRect.bottom, 
; 2325 : 					&ppanelInitStr->psurfaceData[surfaceIndex].destRect.right);

	mov	eax, DWORD PTR _surfaceIndex$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	lea	eax, DWORD PTR [edx+eax+24]
	push	eax
	mov	ecx, DWORD PTR _surfaceIndex$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+132]
	lea	ecx, DWORD PTR [eax+ecx+28]
	push	ecx
	mov	edx, DWORD PTR _surfaceIndex$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	lea	edx, DWORD PTR [ecx+edx+16]
	push	edx
	mov	eax, DWORD PTR _surfaceIndex$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	lea	eax, DWORD PTR [edx+eax+20]
	push	eax
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _surfaceIndex$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	lea	edx, DWORD PTR [ecx+edx+8]
	push	edx
	mov	eax, DWORD PTR _surfaceIndex$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	add	edx, eax
	push	edx
	push	OFFSET ??_C@_0BF@LGPKAOB@?$CFd?5?$CFd?5?$CFs?5?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 36					; 00000024H

; 2326 : 
; 2327 : 			ppanelInitStr->psurfaceData[surfaceIndex].psurface = NULL;			

	mov	ecx, DWORD PTR _surfaceIndex$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [eax+ecx+12], 0

; 2328 : 
; 2329 : 			if(!strcmpi(ptransparencyStr, PROP_TRANSPARENT_STR)) {

	push	OFFSET ??_C@_0M@CEEDCJLA@transparent?$AA@
	lea	ecx, DWORD PTR _ptransparencyStr$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN63@CreatePane

; 2330 : 				ppanelInitStr->psurfaceData[surfaceIndex].transparencyType = CPTRANSPARENT;

	mov	edx, DWORD PTR _surfaceIndex$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR [ecx+edx+4], 1
	jmp	SHORT $LN61@CreatePane
$LN63@CreatePane:

; 2331 : 			}
; 2332 : 			else if(!strcmpi(ptransparencyStr, PROP_OPAQUE_STR)) {

	push	OFFSET ??_C@_06CJCOLNBB@opaque?$AA@
	lea	edx, DWORD PTR _ptransparencyStr$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN61@CreatePane

; 2333 : 				ppanelInitStr->psurfaceData[surfaceIndex].transparencyType = CPOPAQUE;

	mov	eax, DWORD PTR _surfaceIndex$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [edx+eax+4], 0
$LN61@CreatePane:

; 2334 : 			}
; 2335 : 			else {
; 2336 : 				ShiWarning("Bad Transparency Type"); //couldn't read in transparency type
; 2337 : 			}
; 2338 : 
; 2339 : 			surfaceIndex++;

	mov	eax, DWORD PTR _surfaceIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _surfaceIndex$[ebp], eax
	jmp	$LN11@CreatePane
$LN64@CreatePane:

; 2340 : 		}
; 2341 : 		else if(!strcmpi(ptoken, PROP_NUMOBJECTS_STR)) {

	push	OFFSET ??_C@_0L@LILAFCIM@numobjects?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN58@CreatePane

; 2342 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2343 : 			sscanf(ptoken, "%d", &ppanelInitStr->numObjects);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2344 : #ifdef USE_SH_POOLS
; 2345 : 			if(ppanelInitStr->numObjects > 0) {
; 2346 : 				ppanelInitStr->pobjectIDs   = (int *)MemAllocPtr(gCockMemPool,sizeof(int)*ppanelInitStr->numObjects,FALSE);
; 2347 : 			}
; 2348 : #else
; 2349 : 			ppanelInitStr->pobjectIDs	= new int[ppanelInitStr->numObjects];

	xor	ecx, ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+32], ecx
	jmp	$LN11@CreatePane
$LN58@CreatePane:

; 2350 : #endif
; 2351 : 		}
; 2352 : 		else if(!strcmpi(ptoken, PROP_OBJECTS_STR)) {

	push	OFFSET ??_C@_07JPLKJBI@objects?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN56@CreatePane

; 2353 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN55@CreatePane:

; 2354 : 			while(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN54@CreatePane

; 2355 : 				sscanf(ptoken, "%d", &ppanelInitStr->pobjectIDs[objectIndex]);

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _objectIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2356 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2357 : 				objectIndex++;

	mov	eax, DWORD PTR _objectIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _objectIndex$[ebp], eax

; 2358 : 			}

	jmp	SHORT $LN55@CreatePane
$LN54@CreatePane:

; 2359 : 		}
; 2360 : 		else if(!strcmpi(ptoken, PROP_OFFSET_STR)) {

	jmp	$LN11@CreatePane
$LN56@CreatePane:
	push	OFFSET ??_C@_06KLHHMIGM@offset?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN52@CreatePane

; 2361 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2362 : 			sscanf(ptoken, "%d %d", &ppanelInitStr->xOffset, &ppanelInitStr->yOffset);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H
	jmp	$LN11@CreatePane
$LN52@CreatePane:

; 2363 : 		}
; 2364 : 		else if(!strcmpi(ptoken, PROP_NUMBUTTONVIEWS_STR)) {

	push	OFFSET ??_C@_0P@HLMMFAAF@numbuttonviews?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN50@CreatePane

; 2365 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2366 : 			sscanf(ptoken, "%d", &ppanelInitStr->numButtonViews);

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2367 : 			if(ppanelInitStr->numButtonViews > 0) {

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jle	SHORT $LN49@CreatePane

; 2368 : #ifdef USE_SH_POOLS
; 2369 : 				ppanelInitStr->pbuttonViewIDs   = (int *)MemAllocPtr(gCockMemPool,sizeof(int)*ppanelInitStr->numButtonViews,FALSE);
; 2370 : #else
; 2371 : 				ppanelInitStr->pbuttonViewIDs	= new int[ppanelInitStr->numButtonViews];

	xor	ecx, ecx
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN49@CreatePane:

; 2372 : #endif
; 2373 : 			}
; 2374 : 		}

	jmp	$LN11@CreatePane
$LN50@CreatePane:

; 2375 : 		else if(!strcmpi(ptoken, PROP_BUTTONVIEWS_STR)) {

	push	OFFSET ??_C@_0M@FPJEKPBD@buttonviews?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN47@CreatePane

; 2376 : 			ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN46@CreatePane:

; 2377 : 			while(ptoken) {

	cmp	DWORD PTR _ptoken$[ebp], 0
	je	SHORT $LN45@CreatePane

; 2378 : 				sscanf(ptoken, "%d", &ppanelInitStr->pbuttonViewIDs[buttonViewIndex]);

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _buttonViewIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2379 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2380 : 				buttonViewIndex++;

	mov	eax, DWORD PTR _buttonViewIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _buttonViewIndex$[ebp], eax

; 2381 : 			}

	jmp	SHORT $LN46@CreatePane
$LN45@CreatePane:

; 2382 : 		}
; 2383 : 		else if(!strcmpi(ptoken, PROP_PANTILT_STR)) {

	jmp	$LN11@CreatePane
$LN47@CreatePane:
	push	OFFSET ??_C@_07GJFAOIEN@pantilt?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN43@CreatePane

; 2384 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2385 : 			sscanf(ptoken, "%f %f", &ppanelInitStr->pan, &ppanelInitStr->tilt);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H

; 2386 : 			// RV - RED - Tilt must be conformed to vertical Scaling
; 2387 : 			ppanelInitStr->tilt*=(mVScale/mHScale);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	divss	xmm0, DWORD PTR [ecx+248]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mulss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	jmp	$LN11@CreatePane
$LN43@CreatePane:

; 2388 : 		}
; 2389 : 		else if(!strcmpi(ptoken, PROP_HUDFONT)) {

	push	OFFSET ??_C@_07MIMLBGDI@hudfont?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@CreatePane

; 2390 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2391 : 			sscanf(ptoken, "%d", &ppanelInitStr->hudFont);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 788				; 00000314H
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN11@CreatePane
$LN41@CreatePane:

; 2392 : 		}
; 2393 : 		else if(!strcmpi(ptoken, PROP_MFDFONT)) {

	push	OFFSET ??_C@_07NGBNJOAP@mfdfont?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@CreatePane

; 2394 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2395 : 			sscanf(ptoken, "%d", &ppanelInitStr->mfdFont);

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 792				; 00000318H
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN11@CreatePane
$LN39@CreatePane:

; 2396 : 		}
; 2397 : 		else if(!strcmpi(ptoken, PROP_DEDFONT)) {

	push	OFFSET ??_C@_07PILKJPLJ@dedfont?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN37@CreatePane

; 2398 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2399 : 			sscanf(ptoken, "%d", &ppanelInitStr->dedFont);

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 796				; 0000031cH
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN11@CreatePane
$LN37@CreatePane:

; 2400 : 		}
; 2401 : 		else if(!strcmpi(ptoken, PROP_MASKTOP_STR)) {

	push	OFFSET ??_C@_07BHEPCJLO@masktop?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@CreatePane

; 2402 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2403 : 			sscanf(ptoken, "%d", &ppanelInitStr->maskTop);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN11@CreatePane
$LN35@CreatePane:

; 2404 : 		}
; 2405 : 		else if(!strcmpi(ptoken, PROP_CURSORID_STR)) {

	push	OFFSET ??_C@_08PCCKKBCO@cursorid?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@CreatePane

; 2406 : 			ptoken = FindToken(&plinePtr, "\n=;");

	push	OFFSET ??_C@_03KBAHFJHM@?6?$DN?$DL?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2407 : 			sscanf(ptoken, "%d", &ppanelInitStr->defaultCursor);

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	add	ecx, 92					; 0000005cH
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN11@CreatePane
$LN33@CreatePane:

; 2408 : 		}
; 2409 : 		else if(!strcmpi(ptoken, PROP_OSBLEFT_STR)) {

	push	OFFSET ??_C@_07FMJJGAHL@osbleft?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN31@CreatePane

; 2410 : 			for (i=0; i<20; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@CreatePane
$LN29@CreatePane:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN30@CreatePane:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN28@CreatePane

; 2411 : 			{
; 2412 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2413 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[0][i][0]);

	mov	ecx, 160				; 000000a0H
	imul	ecx, 0
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	lea	eax, DWORD PTR [edx+ecx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, 4
	imul	eax, 0
	add	edx, eax
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2414 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2415 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[0][i][1]);

	mov	ecx, 160				; 000000a0H
	imul	ecx, 0
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	lea	eax, DWORD PTR [edx+ecx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, 4
	shl	eax, 0
	add	edx, eax
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2416 : 			}

	jmp	$LN29@CreatePane
$LN28@CreatePane:

; 2417 : 		}
; 2418 : 		else if(!strcmpi(ptoken, PROP_OSBRIGHT_STR)) {

	jmp	$LN11@CreatePane
$LN31@CreatePane:
	push	OFFSET ??_C@_08NNHEDOLN@osbright?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN26@CreatePane

; 2419 : 			for (i=0; i<20; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN25@CreatePane
$LN24@CreatePane:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@CreatePane:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN23@CreatePane

; 2420 : 			{
; 2421 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2422 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[1][i][0]);

	mov	eax, 160				; 000000a0H
	shl	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	lea	edx, DWORD PTR [ecx+eax+140]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, 4
	imul	edx, 0
	add	ecx, edx
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2423 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2424 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[1][i][1]);

	mov	eax, 160				; 000000a0H
	shl	eax, 0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	lea	edx, DWORD PTR [ecx+eax+140]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, 4
	shl	edx, 0
	add	ecx, edx
	push	ecx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2425 : 			}

	jmp	$LN24@CreatePane
$LN23@CreatePane:

; 2426 : 		}
; 2427 : 
; 2428 : 		//Wombat778 4-12-04 add support for separate osb labelling for MFD 3 and 4
; 2429 : 
; 2430 : 		else if(!strcmpi(ptoken, PROP_OSB3_STR)) {

	jmp	$LN11@CreatePane
$LN26@CreatePane:
	push	OFFSET ??_C@_04OEANJNHC@osb3?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN21@CreatePane

; 2431 : 			osb3exists=true;

	mov	BYTE PTR _osb3exists$[ebp], 1

; 2432 : 			for (i=0; i<20; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@CreatePane
$LN19@CreatePane:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN20@CreatePane:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN18@CreatePane

; 2433 : 			{
; 2434 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2435 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[2][i][0]);

	mov	edx, 160				; 000000a0H
	shl	edx, 1
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	lea	ecx, DWORD PTR [eax+edx+140]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, 4
	imul	ecx, 0
	add	eax, ecx
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2436 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2437 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[2][i][1]);

	mov	edx, 160				; 000000a0H
	shl	edx, 1
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	lea	ecx, DWORD PTR [eax+edx+140]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, 4
	shl	ecx, 0
	add	eax, ecx
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2438 : 			}

	jmp	$LN19@CreatePane
$LN18@CreatePane:

; 2439 : 		}
; 2440 : 		else if(!strcmpi(ptoken, PROP_OSB4_STR)) {

	jmp	$LN11@CreatePane
$LN21@CreatePane:
	push	OFFSET ??_C@_04KLEMALLF@osb4?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN16@CreatePane

; 2441 : 			osb4exists=true;

	mov	BYTE PTR _osb4exists$[ebp], 1

; 2442 : 			for (i=0; i<20; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@CreatePane
$LN14@CreatePane:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@CreatePane:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN13@CreatePane

; 2443 : 			{
; 2444 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2445 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[3][i][0]);

	mov	ecx, 160				; 000000a0H
	imul	ecx, 3
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	lea	eax, DWORD PTR [edx+ecx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, 4
	imul	eax, 0
	add	edx, eax
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2446 : 				ptoken = FindToken(&plinePtr, pseparators);

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2447 : 				sscanf(ptoken, "%f", &ppanelInitStr->osbLocation[3][i][1]);

	mov	ecx, 160				; 000000a0H
	imul	ecx, 3
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	lea	eax, DWORD PTR [edx+ecx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, 4
	shl	eax, 0
	add	edx, eax
	push	edx
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2448 : 			}

	jmp	$LN14@CreatePane
$LN13@CreatePane:

; 2449 : 		}
; 2450 : 
; 2451 : 		//Wombat778 end;
; 2452 : 
; 2453 : 
; 2454 : 		// 2000-11-12 ADDED BY S.G. SO COMMENTED LINE DON'T TRIGGER AN ASSERT
; 2455 : 		else if(!strncmp(ptoken, "//",2))			//Wombat778 4-19-04 converted from strcmpi to strncmp so that comments dont need spaces after

	jmp	SHORT $LN11@CreatePane
$LN16@CreatePane:
	push	2
	push	OFFSET ??_C@_02CBLDBPFN@?1?1?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
$LN11@CreatePane:

; 2456 : 			;
; 2457 : 		// END OF ADDED SECTION
; 2458 : 		else {
; 2459 : 			CockpitMessage(ptoken, "Panel", gDebugLineNum);
; 2460 : 		}
; 2461 : 
; 2462 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 2463 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 2464 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 2465 : 		ptoken	= FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2466 : 	}

	jmp	$LN86@CreatePane
$LN85@CreatePane:

; 2467 : 
; 2468 : 	F4Assert(surfaceIndex == ppanelInitStr->numSurfaces);		// should have as many surfaces as specified in file
; 2469 : 	F4Assert(objectIndex == ppanelInitStr->numObjects);		// should have as many objects as specified in file
; 2470 : 
; 2471 : 	//Wombat778 4-12-04  If no osb3 or osb4 lines exist, then fill that section with the info from osbleft and osbright
; 2472 : 	if (!osb3exists)

	movzx	eax, BYTE PTR _osb3exists$[ebp]
	test	eax, eax
	jne	$LN6@CreatePane

; 2473 : 		for (i=0; i<20; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@CreatePane
$LN7@CreatePane:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@CreatePane:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN6@CreatePane

; 2474 : 		{
; 2475 : 			ppanelInitStr->osbLocation[2][i][0]=ppanelInitStr->osbLocation[0][i][0];

	mov	edx, 160				; 000000a0H
	imul	edx, 0
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	lea	ecx, DWORD PTR [eax+edx+140]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, 160				; 000000a0H
	shl	edx, 1
	mov	esi, DWORD PTR _ppanelInitStr$[ebp]
	lea	edx, DWORD PTR [esi+edx+140]
	mov	esi, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	esi, 4
	imul	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 2476 : 			ppanelInitStr->osbLocation[2][i][1]=ppanelInitStr->osbLocation[0][i][1];

	mov	ecx, 160				; 000000a0H
	imul	ecx, 0
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	lea	eax, DWORD PTR [edx+ecx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 160				; 000000a0H
	shl	ecx, 1
	mov	esi, DWORD PTR _ppanelInitStr$[ebp]
	lea	ecx, DWORD PTR [esi+ecx+140]
	mov	esi, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [ecx+esi*8]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 2477 : 		}

	jmp	$LN7@CreatePane
$LN6@CreatePane:

; 2478 : 	if (!osb4exists)

	movzx	eax, BYTE PTR _osb4exists$[ebp]
	test	eax, eax
	jne	$LN2@CreatePane

; 2479 : 		for (i=0; i<20; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CreatePane
$LN3@CreatePane:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@CreatePane:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	$LN2@CreatePane

; 2480 : 		{
; 2481 : 			ppanelInitStr->osbLocation[3][i][0]=ppanelInitStr->osbLocation[1][i][0];

	mov	edx, 160				; 000000a0H
	shl	edx, 0
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	lea	ecx, DWORD PTR [eax+edx+140]
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, 160				; 000000a0H
	imul	edx, 3
	mov	esi, DWORD PTR _ppanelInitStr$[ebp]
	lea	edx, DWORD PTR [esi+edx+140]
	mov	esi, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [edx+esi*8]
	mov	esi, 4
	imul	esi, 0
	mov	eax, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+esi], eax

; 2482 : 			ppanelInitStr->osbLocation[3][i][1]=ppanelInitStr->osbLocation[1][i][1];

	mov	ecx, 160				; 000000a0H
	shl	ecx, 0
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	lea	eax, DWORD PTR [edx+ecx+140]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 160				; 000000a0H
	imul	ecx, 3
	mov	esi, DWORD PTR _ppanelInitStr$[ebp]
	lea	ecx, DWORD PTR [esi+ecx+140]
	mov	esi, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [ecx+esi*8]
	mov	esi, 4
	shl	esi, 0
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+esi], edx

; 2483 : 		}

	jmp	$LN3@CreatePane
$LN2@CreatePane:

; 2484 : 	//Wombat778 end
; 2485 : 
; 2486 : 	ppanelInitStr->hScale				= mHScale;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	DWORD PTR [eax+780], edx

; 2487 : 	ppanelInitStr->vScale				= mVScale;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	mov	DWORD PTR [eax+784], edx

; 2488 : 	ppanelInitStr->cockpitWidth	= DisplayOptions.DispWidth;

	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 2489 : 	ppanelInitStr->cockpitHeight	= DisplayOptions.DispHeight;

	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [eax+100], edx

; 2490 : 	ppanelInitStr->idNum				= idNum;

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR [ecx], edx

; 2491 : 	ppanelInitStr->pOtwImage		= OTWDriver.OTWImage;

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32040
	mov	DWORD PTR [eax+128], ecx

; 2492 : 
; 2493 : 	CPPanel *p = new CPPanel(ppanelInitStr);

	push	804					; 00000324H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN89@CreatePane
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0CPPanel@@QAE@PAUPanelInitStr@@@Z	; CPPanel::CPPanel
	mov	DWORD PTR tv943[ebp], eax
	jmp	SHORT $LN90@CreatePane
$LN89@CreatePane:
	mov	DWORD PTR tv943[ebp], 0
$LN90@CreatePane:
	mov	eax, DWORD PTR tv943[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 2494 : 	ShiAssert(p);
; 2495 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreatePane
	jmp	SHORT $LN87@CreatePane
$LN1@CreatePane:

; 2496 : 	mpPanels.push_back(p);

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?push_back@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXABQAVCPPanel@@@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::push_back

; 2497 : 	mPanelTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN87@CreatePane:

; 2498 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-660]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreatePanel@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreatePanel
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -1164					; size = 4
$T2 = -1160						; size = 4
$T3 = -1156						; size = 4
$T4 = -1152						; size = 4
tv255 = -1148						; size = 4
_p$ = -1144						; size = 4
_plinePtr$ = -1140					; size = 4
_ptoken$ = -1136					; size = 4
_this$ = -1132						; size = 4
_destRect$ = -1128					; size = 16
_surfaceInitStruct$ = -1112				; size = 32
_plineBuffer$ = -1080					; size = 512
_psurfaceFile$ = -568					; size = 512
_pfileName$ = -56					; size = 32
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateSurface
; _this$ = ecx

; 1993 : void CockpitManager::CreateSurface(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1152				; 00000480H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1994 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1995 : 	char*				plinePtr;
; 1996 : 	char				*ptoken;
; 1997 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1998 : 	char				pfileName[32] = "";

	mov	dl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _pfileName$[ebp], dl
	xor	eax, eax
	mov	DWORD PTR _pfileName$[ebp+1], eax
	mov	DWORD PTR _pfileName$[ebp+5], eax
	mov	DWORD PTR _pfileName$[ebp+9], eax
	mov	DWORD PTR _pfileName$[ebp+13], eax
	mov	DWORD PTR _pfileName$[ebp+17], eax
	mov	DWORD PTR _pfileName$[ebp+21], eax
	mov	DWORD PTR _pfileName$[ebp+25], eax
	mov	WORD PTR _pfileName$[ebp+29], ax
	mov	BYTE PTR _pfileName$[ebp+31], al

; 1999 : 	char				psurfaceFile[MAX_LINE_BUFFER];
; 2000 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 2001 : 	SurfaceInitStr surfaceInitStruct={0};

	mov	DWORD PTR _surfaceInitStruct$[ebp], 0
	xor	ecx, ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+4], ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+8], ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+12], ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+16], ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+20], ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+24], ecx
	mov	DWORD PTR _surfaceInitStruct$[ebp+28], ecx

; 2002 : 	RECT				destRect;
; 2003 : 
; 2004 : 
; 2005 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 2006 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 2007 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 2008 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2009 : 	surfaceInitStruct.srcRect.top = 0;

	mov	DWORD PTR _surfaceInitStruct$[ebp+20], 0

; 2010 : 	surfaceInitStruct.srcRect.bottom = 0;

	mov	DWORD PTR _surfaceInitStruct$[ebp+28], 0

; 2011 : 	surfaceInitStruct.srcRect.left = 0;

	mov	DWORD PTR _surfaceInitStruct$[ebp+16], 0

; 2012 : 	surfaceInitStruct.srcRect.right = 0;

	mov	DWORD PTR _surfaceInitStruct$[ebp+24], 0
$LN12@CreateSurf:

; 2013 : 
; 2014 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN11@CreateSurf

; 2015 : 
; 2016 : 		if(!strcmpi(ptoken, PROP_FILENAME_STR)) {

	push	OFFSET ??_C@_08BABJIOEM@filename?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	$LN10@CreateSurf

; 2017 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2018 : 			sscanf(ptoken, "%s", pfileName);

	lea	eax, DWORD PTR _pfileName$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 2019 : 
; 2020 : 			if(m_eCPVisType == MapVisId(VIS_F16C))

	push	1052					; 0000041cH
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+180], eax
	jne	SHORT $LN9@CreateSurf

; 2021 : 				sprintf(psurfaceFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pfileName);

	lea	eax, DWORD PTR _pfileName$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 2022 : 			else

	jmp	$LN8@CreateSurf
$LN9@CreateSurf:

; 2023 : 			{
; 2024 : 				sprintf(psurfaceFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(m_eCPVisType), pfileName);

	lea	edx, DWORD PTR _pfileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_07HGFHNNDO@?$CFs?$CFd?2?$CFs?$AA@
	lea	edx, DWORD PTR _psurfaceFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 2025 : 				
; 2026 : 				// RV - Biker - No more res manager
; 2027 : 				//if(!ResExistFile(psurfaceFile))
; 2028 : 				if(!FileExists(psurfaceFile))

	lea	eax, DWORD PTR _psurfaceFile$[ebp]
	push	eax
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	jne	$LN8@CreateSurf

; 2029 : 				{
; 2030 : 					sprintf(psurfaceFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, m_eCPName, pfileName);

	lea	ecx, DWORD PTR _pfileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_07KEJHJGKM@?$CFs?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _psurfaceFile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 2031 : 
; 2032 : 					// RV - Biker - No more res manager
; 2033 : 					//if(!ResExistFile(psurfaceFile))
; 2034 : 					if(!FileExists(psurfaceFile))

	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@CreateSurf

; 2035 : 					{
; 2036 : 						sprintf(psurfaceFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, m_eCPNameNCTR, pfileName);

	lea	edx, DWORD PTR _pfileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 199				; 000000c7H
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_07KEJHJGKM@?$CFs?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 2037 : 
; 2038 : 						// RV - Biker - No more res manager
; 2039 : 						//if(!ResExistFile(psurfaceFile))
; 2040 : 						if(!FileExists(psurfaceFile))

	lea	edx, DWORD PTR _psurfaceFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@CreateSurf

; 2041 : 						{
; 2042 : 							// F16C fallback
; 2043 : 							sprintf(psurfaceFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pfileName);

	lea	eax, DWORD PTR _pfileName$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	lea	ecx, DWORD PTR _psurfaceFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN8@CreateSurf:

; 2044 : 						}
; 2045 : 					}
; 2046 : 				}
; 2047 : 			}

	jmp	SHORT $LN4@CreateSurf
$LN10@CreateSurf:

; 2048 : 		}
; 2049 : 		else if(!strcmpi(ptoken, PROP_SRCLOC_STR)) {

	push	OFFSET ??_C@_06FLMALHKC@srcloc?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@CreateSurf

; 2050 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2051 : 			sscanf(ptoken, "%d %d %d %d", &(surfaceInitStruct.srcRect.top), 
; 2052 : 					&(surfaceInitStruct.srcRect.left), 
; 2053 : 					&(surfaceInitStruct.srcRect.bottom), 
; 2054 : 					&(surfaceInitStruct.srcRect.right));

	lea	ecx, DWORD PTR _surfaceInitStruct$[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _surfaceInitStruct$[ebp+28]
	push	edx
	lea	eax, DWORD PTR _surfaceInitStruct$[ebp+16]
	push	eax
	lea	ecx, DWORD PTR _surfaceInitStruct$[ebp+20]
	push	ecx
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
$LN4@CreateSurf:

; 2055 : 		}
; 2056 : 		else {
; 2057 : 			CockpitMessage(ptoken, "Surface", gDebugLineNum);
; 2058 : 		}
; 2059 : 
; 2060 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 2061 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 2062 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 2063 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 2064 : 	}

	jmp	$LN12@CreateSurf
$LN11@CreateSurf:

; 2065 : 
; 2066 : 	destRect.top		= 0;

	mov	DWORD PTR _destRect$[ebp+4], 0

; 2067 : 	destRect.left		= 0;

	mov	DWORD PTR _destRect$[ebp], 0

; 2068 : 	destRect.bottom	= surfaceInitStruct.srcRect.bottom - surfaceInitStruct.srcRect.top + 1;

	mov	eax, DWORD PTR _surfaceInitStruct$[ebp+28]
	sub	eax, DWORD PTR _surfaceInitStruct$[ebp+20]
	add	eax, 1
	mov	DWORD PTR _destRect$[ebp+12], eax

; 2069 : 	destRect.right		= surfaceInitStruct.srcRect.right - surfaceInitStruct.srcRect.left + 1;

	mov	ecx, DWORD PTR _surfaceInitStruct$[ebp+24]
	sub	ecx, DWORD PTR _surfaceInitStruct$[ebp+16]
	add	ecx, 1
	mov	DWORD PTR _destRect$[ebp+8], ecx

; 2070 : 
; 2071 : #ifdef USE_SH_POOLS
; 2072 : 	surfaceInitStruct.psrcBuffer = (BYTE *)MemAllocPtr(gCockMemPool,sizeof(BYTE)*destRect.bottom*destRect.right,FALSE);
; 2073 : #else
; 2074 : 	surfaceInitStruct.psrcBuffer = new BYTE[destRect.bottom * destRect.right];

	mov	edx, DWORD PTR _destRect$[ebp+12]
	imul	edx, DWORD PTR _destRect$[ebp+8]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _surfaceInitStruct$[ebp+8], eax

; 2075 : #endif
; 2076 : 
; 2077 : 	surfaceInitStruct.srcRect.right	+= 1;

	mov	ecx, DWORD PTR _surfaceInitStruct$[ebp+24]
	add	ecx, 1
	mov	DWORD PTR _surfaceInitStruct$[ebp+24], ecx

; 2078 : 	surfaceInitStruct.srcRect.bottom += 1;

	mov	edx, DWORD PTR _surfaceInitStruct$[ebp+28]
	add	edx, 1
	mov	DWORD PTR _surfaceInitStruct$[ebp+28], edx

; 2079 : 
; 2080 : 	SafeImageCopy(mpLoadBuffer, surfaceInitStruct.psrcBuffer, mLoadBufferHeight, mLoadBufferWidth, &surfaceInitStruct.srcRect);					//wombat778 4-11-04 make safeimagecopy always used

	lea	eax, DWORD PTR _surfaceInitStruct$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _surfaceInitStruct$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeImageCopy@CockpitManager@@QAEXPAE0HHPAUtagRECT@@@Z ; CockpitManager::SafeImageCopy

; 2081 : 
; 2082 : 	surfaceInitStruct.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _surfaceInitStruct$[ebp], edx

; 2083 : 
; 2084 : 	surfaceInitStruct.pOtwImage	= OTWDriver.OTWImage;

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32040
	mov	DWORD PTR _surfaceInitStruct$[ebp+12], eax

; 2085 : 
; 2086 : 	CPSurface *p = new CPSurface(&surfaceInitStruct);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@CreateSurf
	lea	ecx, DWORD PTR _surfaceInitStruct$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPSurface@@QAE@PAUSurfaceInitStr@@@Z	; CPSurface::CPSurface
	mov	DWORD PTR tv255[ebp], eax
	jmp	SHORT $LN16@CreateSurf
$LN15@CreateSurf:
	mov	DWORD PTR tv255[ebp], 0
$LN16@CreateSurf:
	mov	edx, DWORD PTR tv255[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 2087 : 	ShiAssert(p);
; 2088 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateSurf
	jmp	SHORT $LN13@CreateSurf
$LN1@CreateSurf:

; 2089 : 
; 2090 : 	mpSurfaces.push_back(p);

	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?push_back@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXABQAVCPSurface@@@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::push_back

; 2091 : 	mSurfaceTally++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN13@CreateSurf:

; 2092 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateSurface@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateSurface
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -684					; size = 4
$T2 = -680						; size = 4
$T3 = -676						; size = 4
_p$ = -672						; size = 4
$T4 = -668						; size = 4
tv146 = -664						; size = 4
_this$ = -660						; size = 4
_plinePtr$ = -656					; size = 4
_ptoken$ = -652						; size = 4
_objectInitStr$ = -648					; size = 92
_liftInitStr$ = -556					; size = 20
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateLiftLine
; _this$ = ecx

; 1294 : void CockpitManager::CreateLiftLine(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 672				; 000002a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1295 : 
; 1296 : 	char				plineBuffer[MAX_LINE_BUFFER];
; 1297 : 	char*				plinePtr;
; 1298 : 	char				*ptoken;
; 1299 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1300 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1301 : 	ObjectInitStr	objectInitStr;
; 1302 : 	LiftInitStr		liftInitStr;
; 1303 : 
; 1304 : 	liftInitStr.doLabel = FALSE;

	mov	DWORD PTR _liftInitStr$[ebp+16], 0

; 1305 : 
; 1306 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1307 : 	gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1308 : 	plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1309 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN7@CreateLift:

; 1310 : 
; 1311 : 	while (strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN6@CreateLift

; 1312 : 
; 1313 : 		if(!strcmpi(ptoken, PROP_PANTILT_STR)) {

	push	OFFSET ??_C@_07GJFAOIEN@pantilt?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateLift

; 1314 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1315 : 			sscanf(ptoken, "%f %f", &(liftInitStr.pan), &(liftInitStr.tilt));

	lea	eax, DWORD PTR _liftInitStr$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _liftInitStr$[ebp]
	push	ecx
	push	OFFSET ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN4@CreateLift
$LN5@CreateLift:

; 1316 : 		}
; 1317 : 		else if(!strcmpi(ptoken, PROP_PANTILTLABEL_STR)) {

	push	OFFSET ??_C@_0N@KGDEIIEF@pantiltlabel?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@CreateLift

; 1318 : 			liftInitStr.doLabel = TRUE;

	mov	DWORD PTR _liftInitStr$[ebp+16], 1

; 1319 : 
; 1320 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1321 : 			sscanf(ptoken, "%d %d", &(liftInitStr.panLabel), &(liftInitStr.tiltLabel));

	lea	edx, DWORD PTR _liftInitStr$[ebp+12]
	push	edx
	lea	eax, DWORD PTR _liftInitStr$[ebp+8]
	push	eax
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 16					; 00000010H
$LN4@CreateLift:

; 1322 : 		}
; 1323 : 		else {
; 1324 : 			CockpitMessage(ptoken, "Lift Line", gDebugLineNum);
; 1325 : 		}
; 1326 : 
; 1327 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 1328 : 		gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 1329 : 		plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 1330 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1331 : 	}

	jmp	$LN7@CreateLift
$LN6@CreateLift:

; 1332 : 
; 1333 : 	objectInitStr.destRect.top = 0;

	mov	DWORD PTR _objectInitStr$[ebp+60], 0

; 1334 : 	objectInitStr.destRect.left = 0;

	mov	DWORD PTR _objectInitStr$[ebp+56], 0

; 1335 : 	objectInitStr.destRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+68], 0

; 1336 : 	objectInitStr.destRect.right = 0;

	mov	DWORD PTR _objectInitStr$[ebp+64], 0

; 1337 : 
; 1338 : 	objectInitStr.callbackSlot	= 8;

	mov	DWORD PTR _objectInitStr$[ebp+4], 8

; 1339 : 	objectInitStr.cycleBits		= 0xFFFF;

	mov	DWORD PTR _objectInitStr$[ebp+12], 65535 ; 0000ffffH

; 1340 : 
; 1341 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 1342 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 1343 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 1344 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 1345 : 
; 1346 : 	CPLiftLine *p = new CPLiftLine(&objectInitStr, &liftInitStr);

	push	356					; 00000164H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN10@CreateLift
	lea	ecx, DWORD PTR _liftInitStr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPLiftLine@@QAE@PAUObjectInitStr@@PAULiftInitStr@@@Z ; CPLiftLine::CPLiftLine
	mov	DWORD PTR tv146[ebp], eax
	jmp	SHORT $LN11@CreateLift
$LN10@CreateLift:
	mov	DWORD PTR tv146[ebp], 0
$LN11@CreateLift:
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 1347 : 	ShiAssert(p);
; 1348 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateLift
	jmp	SHORT $LN8@CreateLift
$LN1@CreateLift:

; 1349 : 
; 1350 : 	mpObjects.push_back(p);

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1351 : 	mObjectTally++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN8@CreateLift:

; 1352 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-676]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateLiftLine@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateLiftLine
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -680					; size = 4
$T2 = -676						; size = 4
$T3 = -672						; size = 4
_p$ = -668						; size = 4
$T4 = -664						; size = 4
tv154 = -660						; size = 4
_this$ = -656						; size = 4
_plinePtr$ = -652					; size = 4
_ptoken$ = -648						; size = 4
_objectInitStr$ = -644					; size = 92
_chevInitStr$ = -552					; size = 16
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateChevron
; _this$ = ecx

; 1234 : void CockpitManager::CreateChevron(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 668				; 0000029cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1235 : 
; 1236 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1237 : 	char*				plinePtr;
; 1238 : 	char				*ptoken;
; 1239 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1240 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1241 : 	ObjectInitStr	objectInitStr;
; 1242 : 	ChevronInitStr		chevInitStr;
; 1243 : 
; 1244 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 1245 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 1246 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 1247 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN7@CreateChev:

; 1248 : 
; 1249 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN6@CreateChev

; 1250 : 
; 1251 : 		if(!strcmpi(ptoken, PROP_PANTILT_STR)) {

	push	OFFSET ??_C@_07GJFAOIEN@pantilt?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateChev

; 1252 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1253 : 			sscanf(ptoken, "%f %f", &(chevInitStr.pan), &(chevInitStr.tilt));

	lea	edx, DWORD PTR _chevInitStr$[ebp+4]
	push	edx
	lea	eax, DWORD PTR _chevInitStr$[ebp]
	push	eax
	push	OFFSET ??_C@_05KCDNKPCA@?$CFf?5?$CFf?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN4@CreateChev
$LN5@CreateChev:

; 1254 : 		}
; 1255 : 		else if(!strcmpi(ptoken, PROP_PANTILTLABEL_STR)) {

	push	OFFSET ??_C@_0N@KGDEIIEF@pantiltlabel?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@CreateChev

; 1256 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1257 : 			sscanf(ptoken, "%d %d", &(chevInitStr.panLabel), &(chevInitStr.tiltLabel));

	lea	ecx, DWORD PTR _chevInitStr$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _chevInitStr$[ebp+8]
	push	edx
	push	OFFSET ??_C@_05OKMLJOMC@?$CFd?5?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 16					; 00000010H
$LN4@CreateChev:

; 1258 : 		}
; 1259 : 		else {
; 1260 : 			CockpitMessage(ptoken, "Chevron", gDebugLineNum);
; 1261 : 		}
; 1262 : 
; 1263 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	ecx, DWORD PTR _pcockpitDataFile$[ebp]
	push	ecx
	push	511					; 000001ffH
	lea	edx, DWORD PTR _plineBuffer$[ebp]
	push	edx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1264 : 		gDebugLineNum ++;

	mov	eax, DWORD PTR _gDebugLineNum
	add	eax, 1
	mov	DWORD PTR _gDebugLineNum, eax

; 1265 : 		plinePtr = plineBuffer;

	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], ecx

; 1266 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1267 : 	}

	jmp	$LN7@CreateChev
$LN6@CreateChev:

; 1268 : 
; 1269 : 	objectInitStr.destRect.top = 0;

	mov	DWORD PTR _objectInitStr$[ebp+60], 0

; 1270 : 	objectInitStr.destRect.left = 0;

	mov	DWORD PTR _objectInitStr$[ebp+56], 0

; 1271 : 	objectInitStr.destRect.bottom = 0;

	mov	DWORD PTR _objectInitStr$[ebp+68], 0

; 1272 : 	objectInitStr.destRect.right = 0;

	mov	DWORD PTR _objectInitStr$[ebp+64], 0

; 1273 : 
; 1274 : 	objectInitStr.callbackSlot	= 8;

	mov	DWORD PTR _objectInitStr$[ebp+4], 8

; 1275 : 	objectInitStr.cycleBits		= 0xFFFF;

	mov	DWORD PTR _objectInitStr$[ebp+12], 65535 ; 0000ffffH

; 1276 : 
; 1277 : 	objectInitStr.idNum			= idNum;

	mov	ecx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], ecx

; 1278 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], eax

; 1279 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], ecx

; 1280 : 	objectInitStr.pCPManager	= this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], edx

; 1281 : 
; 1282 : 	CPChevron *p = new CPChevron(&objectInitStr, &chevInitStr);

	push	284					; 0000011cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN10@CreateChev
	lea	eax, DWORD PTR _chevInitStr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CPChevron@@QAE@PAUObjectInitStr@@PAUChevronInitStr@@@Z ; CPChevron::CPChevron
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN11@CreateChev
$LN10@CreateChev:
	mov	DWORD PTR tv154[ebp], 0
$LN11@CreateChev:
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 1283 : 	ShiAssert(p);
; 1284 : 	if(!p) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateChev
	jmp	SHORT $LN8@CreateChev
$LN1@CreateChev:

; 1285 : 
; 1286 : 	mpObjects.push_back(p);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1287 : 	mObjectTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN8@CreateChev:

; 1288 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-672]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateChevron@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateChevron
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_lineLen$ = -664					; size = 4
$T2 = -660						; size = 4
_numStrings$ = -656					; size = 4
_p$ = -652						; size = 4
$T3 = -648						; size = 4
tv212 = -644						; size = 4
_plinePtr$ = -640					; size = 4
_this$ = -636						; size = 4
_ptoken$ = -632						; size = 4
_objectInitStr$ = -628					; size = 92
_plineBuffer$ = -536					; size = 512
_pseparators$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_idNum$ = 8						; size = 4
_pcockpitDataFile$ = 12					; size = 4
?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z PROC	; CockpitManager::CreateText
; _this$ = ecx

; 1171 : void CockpitManager::CreateText(int idNum, FILE* pcockpitDataFile) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 652				; 0000028cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1172 : 	char				plineBuffer[MAX_LINE_BUFFER] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _plineBuffer$[ebp], al
	push	511					; 000001ffH
	push	0
	lea	ecx, DWORD PTR _plineBuffer$[ebp+1]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1173 : 	char*				plinePtr;
; 1174 : 	char				*ptoken;
; 1175 : 	char				pseparators[] = {0x20, 0x2c, 0x3d, 0x3b, 0x0d, 0x0a, 0x09, 0x00};

	mov	BYTE PTR _pseparators$[ebp], 32		; 00000020H
	mov	BYTE PTR _pseparators$[ebp+1], 44	; 0000002cH
	mov	BYTE PTR _pseparators$[ebp+2], 61	; 0000003dH
	mov	BYTE PTR _pseparators$[ebp+3], 59	; 0000003bH
	mov	BYTE PTR _pseparators$[ebp+4], 13	; 0000000dH
	mov	BYTE PTR _pseparators$[ebp+5], 10	; 0000000aH
	mov	BYTE PTR _pseparators$[ebp+6], 9
	mov	BYTE PTR _pseparators$[ebp+7], 0

; 1176 : 	const int		lineLen = MAX_LINE_BUFFER - 1;

	mov	DWORD PTR _lineLen$[ebp], 511		; 000001ffH

; 1177 : 	ObjectInitStr	objectInitStr;
; 1178 : 	int				numStrings = 0;

	mov	DWORD PTR _numStrings$[ebp], 0

; 1179 : 
; 1180 : 
; 1181 : 	fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	edx, DWORD PTR _pcockpitDataFile$[ebp]
	push	edx
	push	511					; 000001ffH
	lea	eax, DWORD PTR _plineBuffer$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH

; 1182 : 	gDebugLineNum ++;

	mov	ecx, DWORD PTR _gDebugLineNum
	add	ecx, 1
	mov	DWORD PTR _gDebugLineNum, ecx

; 1183 : 	plinePtr = plineBuffer;

	lea	edx, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], edx

; 1184 : 	ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax
$LN11@CreateText:

; 1185 : 
; 1186 : 	while(strcmpi(ptoken, END_MARKER)){

	push	OFFSET ??_C@_04PAJMBCIO@?$CDend?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	je	$LN10@CreateText

; 1187 : 
; 1188 : 		if(!strcmpi(ptoken, PROP_CYCLEBITS_STR)) {

	push	OFFSET ??_C@_09MCNIDEEJ@cyclebits?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@CreateText

; 1189 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1190 : 			sscanf(ptoken, "%x", &objectInitStr.cycleBits);

	lea	edx, DWORD PTR _objectInitStr$[ebp+12]
	push	edx
	push	OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	$LN3@CreateText
$LN9@CreateText:

; 1191 : 		}
; 1192 : 		else if(!strcmpi(ptoken, PROP_DESTLOC_STR)) {

	push	OFFSET ??_C@_07OKLNCIDH@destloc?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@CreateText

; 1193 : 			ptoken = FindToken(&plinePtr, "=;\n");	

	push	OFFSET ??_C@_03OCLOCGE@?$DN?$DL?6?$AA@
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1194 : 			sscanf(ptoken, "%d %d %d %d", &(objectInitStr.destRect.top), 
; 1195 : 					&(objectInitStr.destRect.left), 
; 1196 : 					&(objectInitStr.destRect.bottom), 
; 1197 : 					&(objectInitStr.destRect.right));

	lea	eax, DWORD PTR _objectInitStr$[ebp+64]
	push	eax
	lea	ecx, DWORD PTR _objectInitStr$[ebp+68]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp+56]
	push	edx
	lea	eax, DWORD PTR _objectInitStr$[ebp+60]
	push	eax
	push	OFFSET ??_C@_0M@FMGEODLN@?$CFd?5?$CFd?5?$CFd?5?$CFd?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	jmp	$LN3@CreateText
$LN7@CreateText:

; 1198 : 		}
; 1199 : 		else if(!strcmpi(ptoken, PROP_CALLBACKSLOT_STR)) {

	push	OFFSET ??_C@_0N@BALDINCG@callbackslot?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@CreateText

; 1200 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	eax, DWORD PTR _pseparators$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plinePtr$[ebp]
	push	ecx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1201 : 			sscanf(ptoken, "%d", &objectInitStr.callbackSlot);

	lea	edx, DWORD PTR _objectInitStr$[ebp+4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _ptoken$[ebp]
	push	eax
	call	_sscanf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@CreateText
$LN5@CreateText:

; 1202 : 		}
; 1203 : 		else if(!strcmpi(ptoken, PROP_NUMSTRINGS_STR)) {

	push	OFFSET ??_C@_0L@FBNFHHBP@numstrings?$AA@
	mov	ecx, DWORD PTR _ptoken$[ebp]
	push	ecx
	call	_strcmpi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@CreateText

; 1204 : 			ptoken = FindToken(&plinePtr, pseparators);	

	lea	edx, DWORD PTR _pseparators$[ebp]
	push	edx
	lea	eax, DWORD PTR _plinePtr$[ebp]
	push	eax
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1205 : 			sscanf(ptoken, "%d", &numStrings);

	lea	ecx, DWORD PTR _numStrings$[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _ptoken$[ebp]
	push	edx
	call	_sscanf
	add	esp, 12					; 0000000cH
$LN3@CreateText:

; 1206 : 		}
; 1207 : 		else {
; 1208 : 			CockpitMessage(ptoken, "Text", gDebugLineNum);
; 1209 : 		}
; 1210 : 
; 1211 : 		fgets(plineBuffer, lineLen, pcockpitDataFile);

	mov	eax, DWORD PTR _pcockpitDataFile$[ebp]
	push	eax
	push	511					; 000001ffH
	lea	ecx, DWORD PTR _plineBuffer$[ebp]
	push	ecx
	call	_fgets
	add	esp, 12					; 0000000cH

; 1212 : 		gDebugLineNum ++;

	mov	edx, DWORD PTR _gDebugLineNum
	add	edx, 1
	mov	DWORD PTR _gDebugLineNum, edx

; 1213 : 		plinePtr = plineBuffer;

	lea	eax, DWORD PTR _plineBuffer$[ebp]
	mov	DWORD PTR _plinePtr$[ebp], eax

; 1214 : 		ptoken = FindToken(&plinePtr, pseparators);	

	lea	ecx, DWORD PTR _pseparators$[ebp]
	push	ecx
	lea	edx, DWORD PTR _plinePtr$[ebp]
	push	edx
	call	?FindToken@@YAPADPAPADPBD@Z		; FindToken
	add	esp, 8
	mov	DWORD PTR _ptoken$[ebp], eax

; 1215 : 	}

	jmp	$LN11@CreateText
$LN10@CreateText:

; 1216 : 
; 1217 : 	objectInitStr.hScale			= mHScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	movss	DWORD PTR _objectInitStr$[ebp+84], xmm0

; 1218 : 	objectInitStr.vScale			= mVScale;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+252]
	movss	DWORD PTR _objectInitStr$[ebp+88], xmm0

; 1219 : 	objectInitStr.idNum			= idNum;

	mov	edx, DWORD PTR _idNum$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp], edx

; 1220 : 	objectInitStr.pOTWImage		= mpOTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+716]
	mov	DWORD PTR _objectInitStr$[ebp+72], ecx

; 1221 : 	objectInitStr.pTemplate		= gpTemplateSurface;

	mov	edx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	mov	DWORD PTR _objectInitStr$[ebp+76], edx

; 1222 : 	objectInitStr.pCPManager	= this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _objectInitStr$[ebp+80], eax

; 1223 : 
; 1224 : 	CPObject *p = new CPText(&objectInitStr, numStrings);

	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN14@CreateText
	mov	ecx, DWORD PTR _numStrings$[ebp]
	push	ecx
	lea	edx, DWORD PTR _objectInitStr$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPText@@QAE@PAUObjectInitStr@@H@Z	; CPText::CPText
	mov	DWORD PTR tv212[ebp], eax
	jmp	SHORT $LN15@CreateText
$LN14@CreateText:
	mov	DWORD PTR tv212[ebp], 0
$LN15@CreateText:
	mov	eax, DWORD PTR tv212[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 1225 : 	ShiAssert(p);
; 1226 : 	if(p == NULL) return;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@CreateText
	jmp	SHORT $LN12@CreateText
$LN1@CreateText:

; 1227 : 	mpObjects.push_back(p);

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back

; 1228 : 	mObjectTally++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN12@CreateText:

; 1229 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-656]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateText@CockpitManager@@AAEXHPAU_iobuf@@@Z ENDP	; CockpitManager::CreateText
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXPAPAVCPButtonObject@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXPAPAVCPButtonObject@@0@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXPAPAVCPButtonObject@@0@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEII@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEPAPAVCPButtonObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCPButtonObject@@@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEPAPAVCPButtonObject@@PAPAV2@00@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Umove<CPButtonObject * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBE_NPBQAVCPButtonObject@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBE_NPBQAVCPButtonObject@@@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBE_NPBQAVCPButtonObject@@@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEII@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEII@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@YAXPAPAVCPButtonObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonObject *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXABQAVCPButtonObject@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXABQAVCPButtonObject@@@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVCPButtonObject@@@std@@YAPBQAVCPButtonObject@@ABQAV1@@Z ; std::addressof<CPButtonObject * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBE_NPBQAVCPButtonObject@@@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVCPButtonObject@@@std@@YAPBQAVCPButtonObject@@ABQAV1@@Z ; std::addressof<CPButtonObject * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPButtonObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IBEXPAPAVCPButtonObject@@0@Z ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPButtonObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::construct<CPButtonObject *,CPButtonObject * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXABQAVCPButtonObject@@@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEAAPAVCPButtonObject@@I@Z ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::~vector<CPButtonObject *,std::allocator<CPButtonObject *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@IAEXXZ ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::~vector<CPButtonObject *,std::allocator<CPButtonObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ PROC ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::vector<CPButtonObject *,std::allocator<CPButtonObject *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVCPButtonObject@@@std@@QAE@XZ ; std::allocator<CPButtonObject *>::allocator<CPButtonObject *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonObject@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPButtonObject *,std::allocator<CPButtonObject *> >::vector<CPButtonObject *,std::allocator<CPButtonObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::_Wrap_alloc<std::allocator<CPButtonObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonObject@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonObject@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVCPButtonObject@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPButtonObject *> >::_Vector_val<std::_Simple_types<CPButtonObject *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonObject@@V?$allocator@PAVCPButtonObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonObject@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonObject *,std::allocator<CPButtonObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCPButtonObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCPButtonObject@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPButtonObject *> >::_Vector_val<std::_Simple_types<CPButtonObject *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVCPButtonObject@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPButtonObject *> >::_Vector_val<std::_Simple_types<CPButtonObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAIABV?$allocator@PAVCPButtonObject@@@2@@Z ; std::allocator_traits<std::allocator<CPButtonObject *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@I@Z ; std::allocator<CPButtonObject *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEXPAPAVCPButtonObject@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEPAPAVCPButtonObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEPAPAVCPButtonObject@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVCPButtonObject@@@std@@QAEPAPAVCPButtonObject@@I@Z ; std::allocator<CPButtonObject *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAEPAPAVCPButtonObject@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::_Wrap_alloc<std::allocator<CPButtonObject *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVCPButtonObject@@@std@@QAE@XZ ; std::allocator<CPButtonObject *>::allocator<CPButtonObject *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVCPButtonObject@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPButtonObject *> >::_Wrap_alloc<std::allocator<CPButtonObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAIABV?$allocator@PAVCPButtonObject@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAIABV?$allocator@PAVCPButtonObject@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPButtonObject *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVCPButtonObject@@@std@@QBEIXZ ; std::allocator<CPButtonObject *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVCPButtonObject@@@std@@@std@@SAIABV?$allocator@PAVCPButtonObject@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPButtonObject *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCPButtonObject@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVCPButtonObject@@@std@@QBEIXZ PROC ; std::allocator<CPButtonObject *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCPButtonObject@@@std@@QBEIXZ ENDP ; std::allocator<CPButtonObject *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@ABQAV3@@Z PROC ; std::allocator<CPButtonObject *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@ABQAV3@@Z ENDP ; std::allocator<CPButtonObject *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCPButtonObject@@@std@@QAEPAPAVCPButtonObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPButtonObject@@@std@@QAEPAPAVCPButtonObject@@I@Z PROC ; std::allocator<CPButtonObject *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCPButtonObject@@@std@@YAPAPAVCPButtonObject@@IPAPAV1@@Z ; std::_Allocate<CPButtonObject *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCPButtonObject@@@std@@QAEPAPAVCPButtonObject@@I@Z ENDP ; std::allocator<CPButtonObject *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@I@Z PROC ; std::allocator<CPButtonObject *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCPButtonObject@@@std@@QAEXPAPAVCPButtonObject@@I@Z ENDP ; std::allocator<CPButtonObject *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCPButtonObject@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCPButtonObject@@@std@@QAE@XZ PROC	; std::allocator<CPButtonObject *>::allocator<CPButtonObject *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCPButtonObject@@@std@@QAE@XZ ENDP	; std::allocator<CPButtonObject *>::allocator<CPButtonObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXPAPAVCPCursor@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXPAPAVCPCursor@@0@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXPAPAVCPCursor@@0@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEII@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEPAPAVCPCursor@@I@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCPCursor@@@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEPAPAVCPCursor@@PAPAV2@00@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Umove<CPCursor * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBE_NPBQAVCPCursor@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBE_NPBQAVCPCursor@@@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBE_NPBQAVCPCursor@@@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEII@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEII@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@YAXPAPAVCPCursor@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPCursor *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXABQAVCPCursor@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXABQAVCPCursor@@@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVCPCursor@@@std@@YAPBQAVCPCursor@@ABQAV1@@Z ; std::addressof<CPCursor * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBE_NPBQAVCPCursor@@@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVCPCursor@@@std@@YAPBQAVCPCursor@@ABQAV1@@Z ; std::addressof<CPCursor * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPCursor@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXI@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IBEXPAPAVCPCursor@@0@Z ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPCursor@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPCursor *> >::construct<CPCursor *,CPCursor * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXABQAVCPCursor@@@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEAAPAVCPCursor@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEAAPAVCPCursor@@I@Z PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAEAAPAVCPCursor@@I@Z ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPCursor *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::~vector<CPCursor *,std::allocator<CPCursor *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@IAEXXZ ; std::vector<CPCursor *,std::allocator<CPCursor *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::~vector<CPCursor *,std::allocator<CPCursor *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ PROC ; std::vector<CPCursor *,std::allocator<CPCursor *> >::vector<CPCursor *,std::allocator<CPCursor *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVCPCursor@@@std@@QAE@XZ ; std::allocator<CPCursor *>::allocator<CPCursor *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPCursor@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPCursor *,std::allocator<CPCursor *> >::vector<CPCursor *,std::allocator<CPCursor *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPCursor *> >::_Wrap_alloc<std::allocator<CPCursor *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPCursor@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPCursor@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVCPCursor@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPCursor *> >::_Vector_val<std::_Simple_types<CPCursor *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPCursor@@V?$allocator@PAVCPCursor@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPCursor@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >::_Vector_alloc<0,std::_Vec_base_types<CPCursor *,std::allocator<CPCursor *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCPCursor@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCPCursor@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPCursor *> >::_Vector_val<std::_Simple_types<CPCursor *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVCPCursor@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPCursor *> >::_Vector_val<std::_Simple_types<CPCursor *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPCursor *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAIABV?$allocator@PAVCPCursor@@@2@@Z ; std::allocator_traits<std::allocator<CPCursor *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPCursor *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPCursor *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@I@Z ; std::allocator<CPCursor *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEXPAPAVCPCursor@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPCursor *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEPAPAVCPCursor@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEPAPAVCPCursor@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPCursor *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVCPCursor@@@std@@QAEPAPAVCPCursor@@I@Z ; std::allocator<CPCursor *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAEPAPAVCPCursor@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPCursor *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPCursor *> >::_Wrap_alloc<std::allocator<CPCursor *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVCPCursor@@@std@@QAE@XZ ; std::allocator<CPCursor *>::allocator<CPCursor *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVCPCursor@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPCursor *> >::_Wrap_alloc<std::allocator<CPCursor *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAIABV?$allocator@PAVCPCursor@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAIABV?$allocator@PAVCPCursor@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPCursor *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVCPCursor@@@std@@QBEIXZ ; std::allocator<CPCursor *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVCPCursor@@@std@@@std@@SAIABV?$allocator@PAVCPCursor@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPCursor *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCPCursor@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVCPCursor@@@std@@QBEIXZ PROC	; std::allocator<CPCursor *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCPCursor@@@std@@QBEIXZ ENDP	; std::allocator<CPCursor *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@ABQAV3@@Z PROC ; std::allocator<CPCursor *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@ABQAV3@@Z ENDP ; std::allocator<CPCursor *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCPCursor@@@std@@QAEPAPAVCPCursor@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPCursor@@@std@@QAEPAPAVCPCursor@@I@Z PROC ; std::allocator<CPCursor *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCPCursor@@@std@@YAPAPAVCPCursor@@IPAPAV1@@Z ; std::_Allocate<CPCursor *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCPCursor@@@std@@QAEPAPAVCPCursor@@I@Z ENDP ; std::allocator<CPCursor *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@I@Z PROC ; std::allocator<CPCursor *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCPCursor@@@std@@QAEXPAPAVCPCursor@@I@Z ENDP ; std::allocator<CPCursor *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCPCursor@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCPCursor@@@std@@QAE@XZ PROC		; std::allocator<CPCursor *>::allocator<CPCursor *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCPCursor@@@std@@QAE@XZ ENDP		; std::allocator<CPCursor *>::allocator<CPCursor *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXPAPAVCPObject@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXPAPAVCPObject@@0@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXPAPAVCPObject@@0@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEII@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEPAPAVCPObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCPObject@@@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEPAPAVCPObject@@PAPAV2@00@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Umove<CPObject * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBE_NPBQAVCPObject@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBE_NPBQAVCPObject@@@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBE_NPBQAVCPObject@@@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEII@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEII@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@@std@@YAXPAPAVCPObject@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPObject *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVCPObject@@@std@@YAPBQAVCPObject@@ABQAV1@@Z ; std::addressof<CPObject * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBE_NPBQAVCPObject@@@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVCPObject@@@std@@YAPBQAVCPObject@@ABQAV1@@Z ; std::addressof<CPObject * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPObject@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXI@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IBEXPAPAVCPObject@@0@Z ; std::vector<CPObject *,std::allocator<CPObject *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPObject@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPObject *> >::construct<CPObject *,CPObject * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEXABQAVCPObject@@@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAEAAPAVCPObject@@I@Z ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPObject *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::~vector<CPObject *,std::allocator<CPObject *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@IAEXXZ ; std::vector<CPObject *,std::allocator<CPObject *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::~vector<CPObject *,std::allocator<CPObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ PROC ; std::vector<CPObject *,std::allocator<CPObject *> >::vector<CPObject *,std::allocator<CPObject *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVCPObject@@@std@@QAE@XZ ; std::allocator<CPObject *>::allocator<CPObject *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPObject@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPObject *,std::allocator<CPObject *> >::vector<CPObject *,std::allocator<CPObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPObject *> >::_Wrap_alloc<std::allocator<CPObject *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPObject@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPObject@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVCPObject@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPObject *> >::_Vector_val<std::_Simple_types<CPObject *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPObject@@V?$allocator@PAVCPObject@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPObject@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >::_Vector_alloc<0,std::_Vec_base_types<CPObject *,std::allocator<CPObject *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCPObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCPObject@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPObject *> >::_Vector_val<std::_Simple_types<CPObject *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVCPObject@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPObject *> >::_Vector_val<std::_Simple_types<CPObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPObject *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAIABV?$allocator@PAVCPObject@@@2@@Z ; std::allocator_traits<std::allocator<CPObject *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPObject *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPObject *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@I@Z ; std::allocator<CPObject *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEXPAPAVCPObject@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPObject *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEPAPAVCPObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEPAPAVCPObject@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPObject *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVCPObject@@@std@@QAEPAPAVCPObject@@I@Z ; std::allocator<CPObject *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAEPAPAVCPObject@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPObject *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPObject *> >::_Wrap_alloc<std::allocator<CPObject *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVCPObject@@@std@@QAE@XZ ; std::allocator<CPObject *>::allocator<CPObject *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVCPObject@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPObject *> >::_Wrap_alloc<std::allocator<CPObject *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAIABV?$allocator@PAVCPObject@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAIABV?$allocator@PAVCPObject@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPObject *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVCPObject@@@std@@QBEIXZ ; std::allocator<CPObject *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVCPObject@@@std@@@std@@SAIABV?$allocator@PAVCPObject@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPObject *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCPObject@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVCPObject@@@std@@QBEIXZ PROC	; std::allocator<CPObject *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCPObject@@@std@@QBEIXZ ENDP	; std::allocator<CPObject *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@ABQAV3@@Z PROC ; std::allocator<CPObject *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@ABQAV3@@Z ENDP ; std::allocator<CPObject *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCPObject@@@std@@QAEPAPAVCPObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPObject@@@std@@QAEPAPAVCPObject@@I@Z PROC ; std::allocator<CPObject *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCPObject@@@std@@YAPAPAVCPObject@@IPAPAV1@@Z ; std::_Allocate<CPObject *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCPObject@@@std@@QAEPAPAVCPObject@@I@Z ENDP ; std::allocator<CPObject *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@I@Z PROC ; std::allocator<CPObject *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCPObject@@@std@@QAEXPAPAVCPObject@@I@Z ENDP ; std::allocator<CPObject *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCPObject@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCPObject@@@std@@QAE@XZ PROC		; std::allocator<CPObject *>::allocator<CPObject *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCPObject@@@std@@QAE@XZ ENDP		; std::allocator<CPObject *>::allocator<CPObject *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXPAPAVCPPanel@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXPAPAVCPPanel@@0@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXPAPAVCPPanel@@0@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEII@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEPAPAVCPPanel@@I@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCPPanel@@@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEPAPAVCPPanel@@PAPAV2@00@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Umove<CPPanel * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBE_NPBQAVCPPanel@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBE_NPBQAVCPPanel@@@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBE_NPBQAVCPPanel@@@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEII@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEII@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@YAXPAPAVCPPanel@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPPanel *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXABQAVCPPanel@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXABQAVCPPanel@@@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVCPPanel@@@std@@YAPBQAVCPPanel@@ABQAV1@@Z ; std::addressof<CPPanel * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBE_NPBQAVCPPanel@@@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVCPPanel@@@std@@YAPBQAVCPPanel@@ABQAV1@@Z ; std::addressof<CPPanel * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPPanel@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXI@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IBEXPAPAVCPPanel@@0@Z ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPPanel@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPPanel *> >::construct<CPPanel *,CPPanel * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXABQAVCPPanel@@@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAEAAPAVCPPanel@@I@Z ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPPanel *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::~vector<CPPanel *,std::allocator<CPPanel *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@IAEXXZ ; std::vector<CPPanel *,std::allocator<CPPanel *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::~vector<CPPanel *,std::allocator<CPPanel *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ PROC ; std::vector<CPPanel *,std::allocator<CPPanel *> >::vector<CPPanel *,std::allocator<CPPanel *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVCPPanel@@@std@@QAE@XZ	; std::allocator<CPPanel *>::allocator<CPPanel *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPPanel@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPPanel *,std::allocator<CPPanel *> >::vector<CPPanel *,std::allocator<CPPanel *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPPanel *> >::_Wrap_alloc<std::allocator<CPPanel *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPPanel@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPPanel@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVCPPanel@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPPanel *> >::_Vector_val<std::_Simple_types<CPPanel *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPPanel@@V?$allocator@PAVCPPanel@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPPanel@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >::_Vector_alloc<0,std::_Vec_base_types<CPPanel *,std::allocator<CPPanel *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCPPanel@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCPPanel@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPPanel *> >::_Vector_val<std::_Simple_types<CPPanel *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVCPPanel@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPPanel *> >::_Vector_val<std::_Simple_types<CPPanel *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPPanel *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAIABV?$allocator@PAVCPPanel@@@2@@Z ; std::allocator_traits<std::allocator<CPPanel *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPPanel *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPPanel *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@I@Z ; std::allocator<CPPanel *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEXPAPAVCPPanel@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPPanel *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEPAPAVCPPanel@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEPAPAVCPPanel@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPPanel *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVCPPanel@@@std@@QAEPAPAVCPPanel@@I@Z ; std::allocator<CPPanel *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAEPAPAVCPPanel@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPPanel *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPPanel *> >::_Wrap_alloc<std::allocator<CPPanel *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVCPPanel@@@std@@QAE@XZ	; std::allocator<CPPanel *>::allocator<CPPanel *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVCPPanel@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPPanel *> >::_Wrap_alloc<std::allocator<CPPanel *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAIABV?$allocator@PAVCPPanel@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAIABV?$allocator@PAVCPPanel@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPPanel *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVCPPanel@@@std@@QBEIXZ ; std::allocator<CPPanel *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVCPPanel@@@std@@@std@@SAIABV?$allocator@PAVCPPanel@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPPanel *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCPPanel@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVCPPanel@@@std@@QBEIXZ PROC	; std::allocator<CPPanel *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCPPanel@@@std@@QBEIXZ ENDP	; std::allocator<CPPanel *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@ABQAV3@@Z PROC ; std::allocator<CPPanel *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@ABQAV3@@Z ENDP ; std::allocator<CPPanel *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCPPanel@@@std@@QAEPAPAVCPPanel@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPPanel@@@std@@QAEPAPAVCPPanel@@I@Z PROC ; std::allocator<CPPanel *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCPPanel@@@std@@YAPAPAVCPPanel@@IPAPAV1@@Z ; std::_Allocate<CPPanel *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCPPanel@@@std@@QAEPAPAVCPPanel@@I@Z ENDP ; std::allocator<CPPanel *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@I@Z PROC ; std::allocator<CPPanel *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCPPanel@@@std@@QAEXPAPAVCPPanel@@I@Z ENDP ; std::allocator<CPPanel *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCPPanel@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCPPanel@@@std@@QAE@XZ PROC		; std::allocator<CPPanel *>::allocator<CPPanel *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCPPanel@@@std@@QAE@XZ ENDP		; std::allocator<CPPanel *>::allocator<CPPanel *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXPAPAVCPSurface@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXPAPAVCPSurface@@0@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXPAPAVCPSurface@@0@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEII@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEPAPAVCPSurface@@I@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCPSurface@@@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEPAPAVCPSurface@@PAPAV2@00@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Umove<CPSurface * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBE_NPBQAVCPSurface@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBE_NPBQAVCPSurface@@@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBE_NPBQAVCPSurface@@@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEII@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEII@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@YAXPAPAVCPSurface@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPSurface *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXABQAVCPSurface@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXABQAVCPSurface@@@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVCPSurface@@@std@@YAPBQAVCPSurface@@ABQAV1@@Z ; std::addressof<CPSurface * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBE_NPBQAVCPSurface@@@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVCPSurface@@@std@@YAPBQAVCPSurface@@ABQAV1@@Z ; std::addressof<CPSurface * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPSurface@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXI@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IBEXPAPAVCPSurface@@0@Z ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPSurface@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPSurface *> >::construct<CPSurface *,CPSurface * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXABQAVCPSurface@@@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAEAAPAVCPSurface@@I@Z ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPSurface *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::~vector<CPSurface *,std::allocator<CPSurface *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@IAEXXZ ; std::vector<CPSurface *,std::allocator<CPSurface *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::~vector<CPSurface *,std::allocator<CPSurface *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ PROC ; std::vector<CPSurface *,std::allocator<CPSurface *> >::vector<CPSurface *,std::allocator<CPSurface *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVCPSurface@@@std@@QAE@XZ ; std::allocator<CPSurface *>::allocator<CPSurface *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPSurface@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPSurface *,std::allocator<CPSurface *> >::vector<CPSurface *,std::allocator<CPSurface *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPSurface *> >::_Wrap_alloc<std::allocator<CPSurface *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPSurface@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPSurface@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVCPSurface@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPSurface *> >::_Vector_val<std::_Simple_types<CPSurface *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPSurface@@V?$allocator@PAVCPSurface@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPSurface@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >::_Vector_alloc<0,std::_Vec_base_types<CPSurface *,std::allocator<CPSurface *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCPSurface@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCPSurface@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPSurface *> >::_Vector_val<std::_Simple_types<CPSurface *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVCPSurface@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPSurface *> >::_Vector_val<std::_Simple_types<CPSurface *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPSurface *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAIABV?$allocator@PAVCPSurface@@@2@@Z ; std::allocator_traits<std::allocator<CPSurface *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPSurface *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPSurface *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@I@Z ; std::allocator<CPSurface *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEXPAPAVCPSurface@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPSurface *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEPAPAVCPSurface@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEPAPAVCPSurface@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPSurface *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVCPSurface@@@std@@QAEPAPAVCPSurface@@I@Z ; std::allocator<CPSurface *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAEPAPAVCPSurface@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPSurface *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPSurface *> >::_Wrap_alloc<std::allocator<CPSurface *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVCPSurface@@@std@@QAE@XZ ; std::allocator<CPSurface *>::allocator<CPSurface *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVCPSurface@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPSurface *> >::_Wrap_alloc<std::allocator<CPSurface *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAIABV?$allocator@PAVCPSurface@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAIABV?$allocator@PAVCPSurface@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPSurface *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVCPSurface@@@std@@QBEIXZ ; std::allocator<CPSurface *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVCPSurface@@@std@@@std@@SAIABV?$allocator@PAVCPSurface@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPSurface *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCPSurface@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVCPSurface@@@std@@QBEIXZ PROC	; std::allocator<CPSurface *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCPSurface@@@std@@QBEIXZ ENDP	; std::allocator<CPSurface *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@ABQAV3@@Z PROC ; std::allocator<CPSurface *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@ABQAV3@@Z ENDP ; std::allocator<CPSurface *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCPSurface@@@std@@QAEPAPAVCPSurface@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPSurface@@@std@@QAEPAPAVCPSurface@@I@Z PROC ; std::allocator<CPSurface *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCPSurface@@@std@@YAPAPAVCPSurface@@IPAPAV1@@Z ; std::_Allocate<CPSurface *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCPSurface@@@std@@QAEPAPAVCPSurface@@I@Z ENDP ; std::allocator<CPSurface *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@I@Z PROC ; std::allocator<CPSurface *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCPSurface@@@std@@QAEXPAPAVCPSurface@@I@Z ENDP ; std::allocator<CPSurface *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCPSurface@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCPSurface@@@std@@QAE@XZ PROC		; std::allocator<CPSurface *>::allocator<CPSurface *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCPSurface@@@std@@QAE@XZ ENDP		; std::allocator<CPSurface *>::allocator<CPSurface *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
_ABGR$ = 8						; size = 4
?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z PROC	; TemplateInfoClass::Pixel32toPixel32
; _this$ = ecx

; 5483 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5484 : 	UInt32		color;
; 5485 : 
; 5486 : 	// RED
; 5487 : 	if (redShift >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN6@Pixel32toP

; 5488 : 		color = (ABGR >>  redShift) & dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _color$[ebp], edx

; 5489 : 	} else {

	jmp	SHORT $LN5@Pixel32toP
$LN6@Pixel32toP:

; 5490 : 		color = (ABGR << -redShift) & dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _color$[ebp], edx
$LN5@Pixel32toP:

; 5491 : 	}
; 5492 : 
; 5493 : 	// GREEN
; 5494 : 	if (greenShift >= 0) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jl	SHORT $LN4@Pixel32toP

; 5495 : 		color |= (ABGR >>  greenShift) & dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+12]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax

; 5496 : 	} else {

	jmp	SHORT $LN3@Pixel32toP
$LN4@Pixel32toP:

; 5497 : 		color |= (ABGR << -greenShift) & dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	neg	ecx
	mov	eax, DWORD PTR _ABGR$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+12]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax
$LN3@Pixel32toP:

; 5498 : 	}
; 5499 : 
; 5500 : 	// BLUE
; 5501 : 	if (blueShift >= 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jl	SHORT $LN2@Pixel32toP

; 5502 : 		color |= (ABGR >>  blueShift) & dwBBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+20]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx

; 5503 : 	} else {

	jmp	SHORT $LN1@Pixel32toP
$LN2@Pixel32toP:

; 5504 : 		color |= (ABGR << -blueShift) & dwBBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+20]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx
$LN1@Pixel32toP:

; 5505 : 	}
; 5506 : 
; 5507 : 	color |= ABGR & 0xff000000; 

	mov	ecx, DWORD PTR _ABGR$[ebp]
	and	ecx, -16777216				; ff000000H
	or	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], ecx

; 5508 : 
; 5509 : 	return color;

	mov	eax, DWORD PTR _color$[ebp]

; 5510 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ENDP	; TemplateInfoClass::Pixel32toPixel32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_color$ = -8						; size = 4
_this$ = -4						; size = 4
_ABGR$ = 8						; size = 4
?Pixel32toPixel16@TemplateInfoClass@@QAEGK@Z PROC	; TemplateInfoClass::Pixel32toPixel16
; _this$ = ecx

; 5455 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5456 : 	UInt32		color;
; 5457 : 
; 5458 : 	// RED
; 5459 : 	if (redShift >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN6@Pixel32toP

; 5460 : 		color = (ABGR >>  redShift) & dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _color$[ebp], edx

; 5461 : 	} else {

	jmp	SHORT $LN5@Pixel32toP
$LN6@Pixel32toP:

; 5462 : 		color = (ABGR << -redShift) & dwRBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _color$[ebp], edx
$LN5@Pixel32toP:

; 5463 : 	}
; 5464 : 
; 5465 : 	// GREEN
; 5466 : 	if (greenShift >= 0) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jl	SHORT $LN4@Pixel32toP

; 5467 : 		color |= (ABGR >>  greenShift) & dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+12]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax

; 5468 : 	} else {

	jmp	SHORT $LN3@Pixel32toP
$LN4@Pixel32toP:

; 5469 : 		color |= (ABGR << -greenShift) & dwGBitMask;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	neg	ecx
	mov	eax, DWORD PTR _ABGR$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+12]
	or	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], eax
$LN3@Pixel32toP:

; 5470 : 	}
; 5471 : 
; 5472 : 	// BLUE
; 5473 : 	if (blueShift >= 0) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jl	SHORT $LN2@Pixel32toP

; 5474 : 		color |= (ABGR >>  blueShift) & dwBBitMask;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ABGR$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+20]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx

; 5475 : 	} else {

	jmp	SHORT $LN1@Pixel32toP
$LN2@Pixel32toP:

; 5476 : 		color |= (ABGR << -blueShift) & dwBBitMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	neg	ecx
	mov	edx, DWORD PTR _ABGR$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+20]
	or	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _color$[ebp], edx
$LN1@Pixel32toP:

; 5477 : 	}
; 5478 : 
; 5479 : 	return (WORD)color;

	mov	ax, WORD PTR _color$[ebp]

; 5480 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Pixel32toPixel16@TemplateInfoClass@@QAEGK@Z ENDP	; TemplateInfoClass::Pixel32toPixel16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
$T2 = -460						; size = 4
$T3 = -456						; size = 4
$T4 = -452						; size = 4
tv305 = -448						; size = 4
tv239 = -444						; size = 4
$T5 = -440						; size = 4
tv64 = -436						; size = 4
$T6 = -432						; size = 4
tv236 = -428						; size = 4
$T7 = -424						; size = 4
$T8 = -420						; size = 4
$T9 = -416						; size = 4
$T10 = -412						; size = 4
$T11 = -408						; size = 4
$T12 = -404						; size = 4
$T13 = -400						; size = 4
$T14 = -396						; size = 4
$T15 = -392						; size = 4
$T16 = -388						; size = 4
$T17 = -384						; size = 4
_eCPNameNCTR$ = -380					; size = 4
_eCPName$ = -376					; size = 4
$T18 = -372						; size = 24
$T19 = -348						; size = 24
_tmp_eCPName$ = -324					; size = 24
_tmp_eCPNameNCTR$ = -300				; size = 24
_strCPFile$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pCPFile1$ = 8						; size = 4
_pCPFile2$ = 12						; size = 4
_pCPFile3$ = 16						; size = 4
_pCPFile4$ = 20						; size = 4
_pCPFile5$ = 24						; size = 4
_eCPVisType$ = 28					; size = 4
_eCPNameOrig$ = 32					; size = 4
_eCPNameNCTROrig$ = 36					; size = 4
?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z PROC ; FindCockpitResolution

; 5354 : ){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 448				; 000001c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5355 : 	// RV - Biker - This does not work always
; 5356 : 	//const char *eCPName = RemoveInvalidChars(string(eCPNameOrig, 15)).c_str();
; 5357 : 	//const char *eCPNameNCTR = RemoveInvalidChars(string(eCPNameNCTROrig, 5)).c_str();
; 5358 : 	std::string tmp_eCPName     = RemoveInvalidChars(string(eCPNameOrig, 15));

	push	15					; 0000000fH
	mov	eax, DWORD PTR _eCPNameOrig$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T18[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR tv305[ebp], eax
	mov	ecx, DWORD PTR tv305[ebp]
	mov	DWORD PTR tv236[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv236[ebp]
	push	edx
	lea	eax, DWORD PTR _tmp_eCPName$[ebp]
	push	eax
	call	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T18[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5359 : 	std::string tmp_eCPNameNCTR = RemoveInvalidChars(string(eCPNameNCTROrig, 5));

	push	5
	mov	ecx, DWORD PTR _eCPNameNCTROrig$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T19[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR tv64[ebp], eax
	mov	edx, DWORD PTR tv64[ebp]
	mov	DWORD PTR tv239[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv239[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	push	ecx
	call	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T19[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5360 : 
; 5361 : 	const char *eCPName = tmp_eCPName.c_str();

	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	DWORD PTR _eCPName$[ebp], eax

; 5362 : 	const char *eCPNameNCTR = tmp_eCPNameNCTR.c_str();

	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	DWORD PTR _eCPNameNCTR$[ebp], eax

; 5363 : 
; 5364 : 	TCHAR strCPFile[MAX_PATH];
; 5365 : 
; 5366 : //	sprintf(strCPFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(eCPVisType), pCPFile1);		
; 5367 : //	if(FileExists(strCPFile)) return 1;
; 5368 : 
; 5369 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile1);
; 5370 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile1);			

	mov	edx, DWORD PTR _pCPFile1$[ebp]
	push	edx
	mov	eax, DWORD PTR _eCPName$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5371 : 	if(FileExists(strCPFile)) return 1;

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN15@FindCockpi
	mov	DWORD PTR $T4[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN16@FindCockpi
$LN15@FindCockpi:

; 5372 : 
; 5373 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile1);
; 5374 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile1);

	mov	eax, DWORD PTR _pCPFile1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCPNameNCTR$[ebp]
	push	ecx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5375 : 	if(FileExists(strCPFile)) return 1;

	lea	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@FindCockpi
	mov	DWORD PTR $T2[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T2[ebp]
	jmp	$LN16@FindCockpi
$LN14@FindCockpi:

; 5376 : 
; 5377 : //	sprintf(strCPFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(eCPVisType), pCPFile2);		
; 5378 : //	if(FileExists(strCPFile)) return 2;
; 5379 : 
; 5380 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile2);
; 5381 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile2);			

	mov	ecx, DWORD PTR _pCPFile2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eCPName$[ebp]
	push	edx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 5382 : 	if(FileExists(strCPFile)) return 2;

	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@FindCockpi
	mov	DWORD PTR $T15[ebp], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T15[ebp]
	jmp	$LN16@FindCockpi
$LN13@FindCockpi:

; 5383 : 
; 5384 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile2);
; 5385 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile2);

	mov	edx, DWORD PTR _pCPFile2$[ebp]
	push	edx
	mov	eax, DWORD PTR _eCPNameNCTR$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5386 : 	if(FileExists(strCPFile)) return 2;

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@FindCockpi
	mov	DWORD PTR $T3[ebp], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T3[ebp]
	jmp	$LN16@FindCockpi
$LN12@FindCockpi:

; 5387 : 
; 5388 : //	sprintf(strCPFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(eCPVisType), pCPFile3);		
; 5389 : //	if(FileExists(strCPFile)) return 3;
; 5390 : 
; 5391 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile3);
; 5392 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile3);			

	mov	eax, DWORD PTR _pCPFile3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCPName$[ebp]
	push	ecx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5393 : 	if(FileExists(strCPFile)) return 3;

	lea	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@FindCockpi
	mov	DWORD PTR $T13[ebp], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T13[ebp]
	jmp	$LN16@FindCockpi
$LN11@FindCockpi:

; 5394 : 
; 5395 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile3);
; 5396 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile3);

	mov	ecx, DWORD PTR _pCPFile3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eCPNameNCTR$[ebp]
	push	edx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 5397 : 	if(FileExists(strCPFile)) return 3;

	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@FindCockpi
	mov	DWORD PTR $T6[ebp], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T6[ebp]
	jmp	$LN16@FindCockpi
$LN10@FindCockpi:

; 5398 : 
; 5399 : 	//Wombat778 4-15-04  Added 4-5
; 5400 : 
; 5401 : //	sprintf(strCPFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(eCPVisType), pCPFile4);		
; 5402 : //	if(FileExists(strCPFile)) return 4;
; 5403 : 
; 5404 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile4);
; 5405 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile4);			

	mov	edx, DWORD PTR _pCPFile4$[ebp]
	push	edx
	mov	eax, DWORD PTR _eCPName$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5406 : 	if(FileExists(strCPFile)) return 4;

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@FindCockpi
	mov	DWORD PTR $T11[ebp], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T11[ebp]
	jmp	$LN16@FindCockpi
$LN9@FindCockpi:

; 5407 : 
; 5408 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile4);
; 5409 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile4);

	mov	eax, DWORD PTR _pCPFile4$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCPNameNCTR$[ebp]
	push	ecx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5410 : 	if(FileExists(strCPFile)) return 4;

	lea	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@FindCockpi
	mov	DWORD PTR $T17[ebp], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T17[ebp]
	jmp	$LN16@FindCockpi
$LN8@FindCockpi:

; 5411 : 
; 5412 : //	sprintf(strCPFile, "%s%d\\%s", cockpitFolder /*COCKPIT_DIR*/, MapVisId(eCPVisType), pCPFile5);		
; 5413 : //	if(FileExists(strCPFile)) return 5;
; 5414 : 
; 5415 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile5);
; 5416 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPName, pCPFile5);			

	mov	ecx, DWORD PTR _pCPFile5$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eCPName$[ebp]
	push	edx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 5417 : 	if(FileExists(strCPFile)) return 5;

	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@FindCockpi
	mov	DWORD PTR $T9[ebp], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T9[ebp]
	jmp	$LN16@FindCockpi
$LN7@FindCockpi:

; 5418 : 
; 5419 : 	//sprintf(strCPFile, "%s%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile5);
; 5420 : 	sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder /*COCKPIT_DIR*/, eCPNameNCTR, pCPFile5);

	mov	edx, DWORD PTR _pCPFile5$[ebp]
	push	edx
	mov	eax, DWORD PTR _eCPNameNCTR$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5421 : 	if(FileExists(strCPFile)) return 5;

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@FindCockpi
	mov	DWORD PTR $T5[ebp], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T5[ebp]
	jmp	$LN16@FindCockpi
$LN6@FindCockpi:

; 5422 : 
; 5423 : 	//We have gotten here, no custom cockpit available, so do f-16
; 5424 : 
; 5425 : 	//sprintf(strCPFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile1);
; 5426 : 	sprintf(strCPFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile1);

	mov	eax, DWORD PTR _pCPFile1$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5427 : 	if(FileExists(strCPFile)) return 1;

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@FindCockpi
	mov	DWORD PTR $T7[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T7[ebp]
	jmp	$LN16@FindCockpi
$LN5@FindCockpi:

; 5428 : 
; 5429 : 	//sprintf(strCPFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile2);	//Wombat778 10-14-2003  Fixed stupid typo which caused 1600 pit not to scale down (pCPFile1 was set instead of pCPFile2)
; 5430 : 	sprintf(strCPFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile2);

	mov	eax, DWORD PTR _pCPFile2$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5431 : 	if(FileExists(strCPFile)) return 2;		

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@FindCockpi
	mov	DWORD PTR $T16[ebp], 2
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T16[ebp]
	jmp	$LN16@FindCockpi
$LN4@FindCockpi:

; 5432 : 
; 5433 : 	//sprintf(strCPFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile3);	//Wombat778 4-03-04
; 5434 : 	sprintf(strCPFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile3);

	mov	eax, DWORD PTR _pCPFile3$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5435 : 	if(FileExists(strCPFile)) return 3;		

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@FindCockpi
	mov	DWORD PTR $T14[ebp], 3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T14[ebp]
	jmp	$LN16@FindCockpi
$LN3@FindCockpi:

; 5436 : 
; 5437 : 	//sprintf(strCPFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile4);	//Wombat778 4-15-04
; 5438 : 	sprintf(strCPFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile4);

	mov	eax, DWORD PTR _pCPFile4$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5439 : 	if(FileExists(strCPFile)) return 4;		

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@FindCockpi
	mov	DWORD PTR $T12[ebp], 4
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T12[ebp]
	jmp	$LN16@FindCockpi
$LN2@FindCockpi:

; 5440 : 
; 5441 : 	//sprintf(strCPFile, "%s%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile5);	//Wombat778 4-15-04
; 5442 : 	sprintf(strCPFile, "%s\\%s", cockpitFolder /*COCKPIT_DIR*/, pCPFile5);

	mov	eax, DWORD PTR _pCPFile5$[ebp]
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	lea	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5443 : 	if(FileExists(strCPFile)) return 5;		

	lea	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@FindCockpi
	mov	DWORD PTR $T10[ebp], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T10[ebp]
	jmp	SHORT $LN16@FindCockpi
$LN1@FindCockpi:

; 5444 : 
; 5445 : 	return 0;

	mov	DWORD PTR $T8[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T8[ebp]
$LN16@FindCockpi:

; 5446 : 
; 5447 : 
; 5448 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$0:
	lea	ecx, DWORD PTR $T18[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$1:
	lea	ecx, DWORD PTR _tmp_eCPName$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$2:
	lea	ecx, DWORD PTR $T19[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z$3:
	lea	ecx, DWORD PTR _tmp_eCPNameNCTR$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-452]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindCockpitResolution@@YAHPBD0000W4Vis_Types@@00@Z ENDP ; FindCockpitResolution
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv190 = -136						; size = 4
tv183 = -132						; size = 4
tv80 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -120						; size = 4
tv187 = -116						; size = 4
$T4 = -112						; size = 24
$T5 = -88						; size = 24
_nameNCTR$6 = -64					; size = 24
_name$7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pCPFile$ = 8						; size = 4
_eCPVisType$ = 12					; size = 4
_eCPName$ = 16						; size = 4
_eCPNameNCTR$ = 20					; size = 4
_strCPFile$ = 24					; size = 4
_fallback$ = 28						; size = 4
?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z PROC		; FindCockpit

; 5292 : ){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5293 : 
; 5294 : 	// FO! sfr: plane number is no more
; 5295 : 	// try plane number
; 5296 : 	// FRB - Make cockpits switchable with theater
; 5297 : 	sprintf(cockpitFolder, "%s", FalconCockpitThrDirectory);

	push	OFFSET ?FalconCockpitThrDirectory@@3PADA ; FalconCockpitThrDirectory
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	call	_sprintf
	add	esp, 12					; 0000000cH

; 5298 : 	sprintf(strCPFile, "%s\\%d\\%s", cockpitFolder, MapVisId(eCPVisType), pCPFile);

	mov	eax, DWORD PTR _pCPFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eCPVisType$[ebp]
	push	ecx
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08JHKGGCCB@?$CFs?2?$CFd?2?$CFs?$AA@
	mov	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5299 : 	if(FileExists(strCPFile)){

	mov	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@FindCockpi

; 5300 : 		return (eCPVisType);

	mov	eax, DWORD PTR _eCPVisType$[ebp]
	jmp	$LN10@FindCockpi
$LN9@FindCockpi:

; 5301 : 	}
; 5302 : 
; 5303 : 	// try plane name (VCD name from DB, skips slashes and trim)
; 5304 : 	if (strlen(eCPName) > 0){

	mov	ecx, DWORD PTR _eCPName$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	test	eax, eax
	jbe	$LN8@FindCockpi

; 5305 : 		std::string name = RemoveInvalidChars(string(eCPName, 15));

	push	15					; 0000000fH
	mov	edx, DWORD PTR _eCPName$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR tv190[ebp], eax
	mov	eax, DWORD PTR tv190[ebp]
	mov	DWORD PTR tv183[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$7[ebp]
	push	edx
	call	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5306 : 		// RV - Biker - Make cockpits switchable with theater
; 5307 : 		sprintf(cockpitFolder, "%s", FalconCockpitThrDirectory);

	push	OFFSET ?FalconCockpitThrDirectory@@3PADA ; FalconCockpitThrDirectory
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	call	_sprintf
	add	esp, 12					; 0000000cH

; 5308 : 		sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder, name.c_str(), pCPFile);

	mov	eax, DWORD PTR _pCPFile$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$7[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	mov	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5309 : 		if(FileExists(strCPFile)){

	mov	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@FindCockpi

; 5310 : 			return (eCPVisType);

	mov	eax, DWORD PTR _eCPVisType$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$7[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T3[ebp]
	jmp	$LN10@FindCockpi
$LN7@FindCockpi:

; 5311 : 		}
; 5312 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$7[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN8@FindCockpi:

; 5313 : 
; 5314 : 	// try NCTR if it didnt work (skips slashes and trim)
; 5315 : 	if (strlen(eCPNameNCTR) > 0){

	mov	ecx, DWORD PTR _eCPNameNCTR$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	test	eax, eax
	jbe	$LN6@FindCockpi

; 5316 : 		std::string nameNCTR = RemoveInvalidChars(string(eCPNameNCTR, 5));

	push	5
	mov	edx, DWORD PTR _eCPNameNCTR$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv187[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv187[ebp]
	push	ecx
	lea	edx, DWORD PTR _nameNCTR$6[ebp]
	push	edx
	call	?RemoveInvalidChars@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; RemoveInvalidChars
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5317 : 		// RV - Biker - Make cockpits switchable with theater
; 5318 : 		sprintf(cockpitFolder, "%s", FalconCockpitThrDirectory);

	push	OFFSET ?FalconCockpitThrDirectory@@3PADA ; FalconCockpitThrDirectory
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	call	_sprintf
	add	esp, 12					; 0000000cH

; 5319 : 		sprintf(strCPFile, "%s\\%s\\%s", cockpitFolder, nameNCTR.c_str(), pCPFile);

	mov	eax, DWORD PTR _pCPFile$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nameNCTR$6[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_08EFGGCJLD@?$CFs?2?$CFs?2?$CFs?$AA@
	mov	ecx, DWORD PTR _strCPFile$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 5320 : 		if(FileExists(strCPFile)){

	mov	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@FindCockpi

; 5321 : 			return (eCPVisType);

	mov	eax, DWORD PTR _eCPVisType$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameNCTR$6[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T2[ebp]
	jmp	$LN10@FindCockpi
$LN5@FindCockpi:

; 5322 : 		}
; 5323 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameNCTR$6[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN6@FindCockpi:

; 5324 : 
; 5325 : 	// FRB - try the theater standard cockpit
; 5326 : 	if (fallback)

	cmp	DWORD PTR _fallback$[ebp], 0
	je	SHORT $LN4@FindCockpi

; 5327 : 	{	// FRB - Make cockpits switchable with theater
; 5328 : 		sprintf(cockpitFolder, "%s", FalconCockpitThrDirectory);

	push	OFFSET ?FalconCockpitThrDirectory@@3PADA ; FalconCockpitThrDirectory
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	call	_sprintf
	add	esp, 12					; 0000000cH

; 5329 : 		sprintf(strCPFile, "%s\\%s", cockpitFolder, pCPFile);

	mov	ecx, DWORD PTR _pCPFile$[ebp]
	push	ecx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	mov	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5330 : 		if(FileExists(strCPFile)){

	mov	eax, DWORD PTR _strCPFile$[ebp]
	push	eax
	call	?FileExists@@YAHPAD@Z			; FileExists
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@FindCockpi

; 5331 : 			return (eCPVisType);

	mov	eax, DWORD PTR _eCPVisType$[ebp]
	jmp	SHORT $LN10@FindCockpi
$LN4@FindCockpi:

; 5332 : 		}
; 5333 : 	}
; 5334 : 
; 5335 : 	// RV - Biker - For fallback use standard cockpit directory
; 5336 : 	if (fallback) {

	cmp	DWORD PTR _fallback$[ebp], 0
	je	SHORT $LN2@FindCockpi

; 5337 : 		sprintf(cockpitFolder, "%s", COCKPIT_DIR);

	push	OFFSET ??_C@_0N@LCGKJIDE@art?2ckptart?2?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	call	_sprintf
	add	esp, 12					; 0000000cH

; 5338 : 		sprintf(strCPFile, "%s%s", cockpitFolder, pCPFile);

	mov	ecx, DWORD PTR _pCPFile$[ebp]
	push	ecx
	push	OFFSET ?cockpitFolder@@3PADA		; cockpitFolder
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	mov	edx, DWORD PTR _strCPFile$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 5339 : 		return MapVisId(VIS_F16C);

	push	1052					; 0000041cH
	call	?MapVisId@@YAKK@Z			; MapVisId
	add	esp, 4
	jmp	SHORT $LN10@FindCockpi

; 5340 : 	}
; 5341 : 	else

	jmp	SHORT $LN10@FindCockpi
$LN2@FindCockpi:

; 5342 : 		return 0;

	xor	eax, eax
$LN10@FindCockpi:

; 5343 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$0:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$1:
	lea	ecx, DWORD PTR _name$7[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z$3:
	lea	ecx, DWORD PTR _nameNCTR$6[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindCockpit@@YAHPBDW4Vis_Types@@00PADH@Z ENDP		; FindCockpit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_fp$ = -4						; size = 4
_file$ = 8						; size = 4
?FileExists@@YAHPAD@Z PROC				; FileExists

; 5250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 5251 : 	FILE *fp;
; 5252 : 	int retval = false;

	mov	DWORD PTR _retval$[ebp], 0

; 5253 : 
; 5254 : 
; 5255 : 	if (g_bResizeUsesResMgr)

	movzx	eax, BYTE PTR ?g_bResizeUsesResMgr@@3_NA ; g_bResizeUsesResMgr
	test	eax, eax
	je	SHORT $LN2@FileExists

; 5256 : 		return ResExistFile(file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_ResExistFile
	add	esp, 4
	jmp	SHORT $LN3@FileExists
$LN2@FileExists:

; 5257 : 
; 5258 : #undef fopen
; 5259 : #undef fclose
; 5260 : 
; 5261 : 	fp = fopen(file,"r");

	push	OFFSET ??_C@_01KDCPPGHE@r?$AA@
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 5262 : 	if (fp)

	cmp	DWORD PTR _fp$[ebp], 0
	je	SHORT $LN1@FileExists

; 5263 : 	{
; 5264 : 		fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 5265 : 		retval = true;		

	mov	DWORD PTR _retval$[ebp], 1
$LN1@FileExists:

; 5266 : 	}
; 5267 : 
; 5268 : #define fopen       ResFOpen
; 5269 : #define fclose      ResFClose
; 5270 : 
; 5271 : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN3@FileExists:

; 5272 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FileExists@@YAHPAD@Z ENDP				; FileExists
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_outColor$ = -16					; size = 4
_c3$ = -12						; size = 4
_c2$ = -8						; size = 4
_c1$ = -4						; size = 4
_inColor$ = 8						; size = 4
?InvertRGBOrder@@YAKK@Z PROC				; InvertRGBOrder

; 5203 : DWORD InvertRGBOrder(DWORD inColor){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 5204 : 	int c1, c2, c3;
; 5205 : 
; 5206 : 	c1 = (inColor & 0xff0000);

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, 16711680				; 00ff0000H
	mov	DWORD PTR _c1$[ebp], eax

; 5207 : 	c2 = (inColor & 0x00ff00);

	mov	ecx, DWORD PTR _inColor$[ebp]
	and	ecx, 65280				; 0000ff00H
	mov	DWORD PTR _c2$[ebp], ecx

; 5208 : 	c3 = (inColor & 0x0000ff);

	mov	edx, DWORD PTR _inColor$[ebp]
	and	edx, 255				; 000000ffH
	mov	DWORD PTR _c3$[ebp], edx

; 5209 : 
; 5210 : 	DWORD outColor = (c1 >> 16) | (c2) | (c3 << 16);

	mov	eax, DWORD PTR _c1$[ebp]
	sar	eax, 16					; 00000010H
	or	eax, DWORD PTR _c2$[ebp]
	mov	ecx, DWORD PTR _c3$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _outColor$[ebp], eax

; 5211 : 	return outColor;

	mov	eax, DWORD PTR _outColor$[ebp]

; 5212 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InvertRGBOrder@@YAKK@Z ENDP				; InvertRGBOrder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_alpha$ = -20						; size = 4
_blue$ = -16						; size = 4
_green$ = -12						; size = 4
_red$ = -8						; size = 4
_nvgColor$ = -4						; size = 4
_inColor$ = 8						; size = 4
?CalculateNVGColor@@YAKK@Z PROC				; CalculateNVGColor

; 5215 : DWORD CalculateNVGColor(DWORD inColor) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 5216 : 	//transparent case
; 5217 : 	if (inColor == 0xffff0000){

	cmp	DWORD PTR _inColor$[ebp], -65536	; ffff0000H
	jne	SHORT $LN1@CalculateN

; 5218 : 		return inColor;

	mov	eax, DWORD PTR _inColor$[ebp]
	jmp	SHORT $LN2@CalculateN
$LN1@CalculateN:

; 5219 : 	}
; 5220 : 
; 5221 : 	DWORD nvgColor = 0;

	mov	DWORD PTR _nvgColor$[ebp], 0

; 5222 : 	DWORD alpha;
; 5223 : 	int red;
; 5224 : 	int green;
; 5225 : 	int blue;
; 5226 : 
; 5227 : 	red		= (inColor & 0x000000ff);

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _red$[ebp], eax

; 5228 : 	green	= (inColor & 0x0000ff00) >> 8;

	mov	ecx, DWORD PTR _inColor$[ebp]
	and	ecx, 65280				; 0000ff00H
	shr	ecx, 8
	mov	DWORD PTR _green$[ebp], ecx

; 5229 : 	blue	= (inColor & 0x00ff0000) >> 16;

	mov	edx, DWORD PTR _inColor$[ebp]
	and	edx, 16711680				; 00ff0000H
	shr	edx, 16					; 00000010H
	mov	DWORD PTR _blue$[ebp], edx

; 5230 : 	alpha	= inColor & 0xff000000;

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, -16777216				; ff000000H
	mov	DWORD PTR _alpha$[ebp], eax

; 5231 : 
; 5232 : 	nvgColor = (red + green + blue) / 3;

	mov	eax, DWORD PTR _red$[ebp]
	add	eax, DWORD PTR _green$[ebp]
	add	eax, DWORD PTR _blue$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _nvgColor$[ebp], eax

; 5233 : 	nvgColor = (nvgColor << 8) | alpha;

	mov	edx, DWORD PTR _nvgColor$[ebp]
	shl	edx, 8
	or	edx, DWORD PTR _alpha$[ebp]
	mov	DWORD PTR _nvgColor$[ebp], edx

; 5234 : 	return nvgColor;

	mov	eax, DWORD PTR _nvgColor$[ebp]
$LN2@CalculateN:

; 5235 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateNVGColor@@YAKK@Z ENDP				; CalculateNVGColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
tv143 = -56						; size = 8
tv134 = -48						; size = 8
tv93 = -40						; size = 8
_outColor$ = -32					; size = 4
_blue$ = -28						; size = 4
_green$ = -24						; size = 4
_red$ = -20						; size = 4
_alpha$ = -16						; size = 4
tv140 = -12						; size = 4
tv131 = -8						; size = 4
tv90 = -4						; size = 4
_inColor$ = 8						; size = 4
_rf$ = 12						; size = 4
_gf$ = 16						; size = 4
_bf$ = 20						; size = 4
?CalculateColor@@YAKKMMM@Z PROC				; CalculateColor

; 5181 : DWORD CalculateColor(DWORD inColor, float rf, float gf, float bf){

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 5182 : 	//transparent case
; 5183 : 	if (inColor == 0xffff0000){

	cmp	DWORD PTR _inColor$[ebp], -65536	; ffff0000H
	jne	SHORT $LN1@CalculateC

; 5184 : 		return inColor;

	mov	eax, DWORD PTR _inColor$[ebp]
	jmp	$LN2@CalculateC
$LN1@CalculateC:

; 5185 : 	}
; 5186 : 
; 5187 : 	//for now
; 5188 : 	int red, green, blue;
; 5189 : 	DWORD alpha;
; 5190 : 	DWORD outColor;
; 5191 : 
; 5192 : 	//we get RGB and preserve alpha
; 5193 : 	blue =	(int)(((inColor & 0x00ff0000) >> 16)*  bf);

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR tv90[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv90[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv93[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv93[ebp]
	mulss	xmm0, DWORD PTR _bf$[ebp]
	cvttss2si edx, xmm0
	mov	DWORD PTR _blue$[ebp], edx

; 5194 : 	green = (int)(((inColor & 0x0000ff00) >>  8)*  gf);

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	mov	DWORD PTR tv131[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv131[ebp]
	mov	ecx, DWORD PTR tv131[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv134[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv134[ebp]
	mulss	xmm0, DWORD PTR _gf$[ebp]
	cvttss2si edx, xmm0
	mov	DWORD PTR _green$[ebp], edx

; 5195 : 	red =	(int)(((inColor & 0x000000ff) >>  0)*  rf);

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv140[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR tv140[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv143[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv143[ebp]
	mulss	xmm0, DWORD PTR _rf$[ebp]
	cvttss2si edx, xmm0
	mov	DWORD PTR _red$[ebp], edx

; 5196 : 	alpha =	inColor & 0xff000000;

	mov	eax, DWORD PTR _inColor$[ebp]
	and	eax, -16777216				; ff000000H
	mov	DWORD PTR _alpha$[ebp], eax

; 5197 : 	outColor = (alpha) | (red << 0) | (green << 8) | (blue << 16);

	mov	ecx, DWORD PTR _alpha$[ebp]
	or	ecx, DWORD PTR _red$[ebp]
	mov	edx, DWORD PTR _green$[ebp]
	shl	edx, 8
	or	ecx, edx
	mov	eax, DWORD PTR _blue$[ebp]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	DWORD PTR _outColor$[ebp], ecx

; 5198 : 
; 5199 : 	return outColor;

	mov	eax, DWORD PTR _outColor$[ebp]
$LN2@CalculateC:

; 5200 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateColor@@YAKKMMM@Z ENDP				; CalculateColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_in$ = 8						; size = 4
_out$ = 12						; size = 4
_rf$ = 16						; size = 4
_gf$ = 20						; size = 4
_bf$ = 24						; size = 4
?ApplyLightingToPalette@@YAXPAK0MMM@Z PROC		; ApplyLightingToPalette

; 5172 : void ApplyLightingToPalette(DWORD *in, DWORD *out, float rf, float gf, float bf){

	push	ebp
	mov	ebp, esp
	push	ecx

; 5173 : 	for (int i=0;i<256;i++){

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@ApplyLight
$LN2@ApplyLight:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@ApplyLight:
	cmp	DWORD PTR _i$1[ebp], 256		; 00000100H
	jge	SHORT $LN1@ApplyLight

; 5174 : 		out[i] = CalculateColor(in[i], rf, gf, bf);

	push	ecx
	movss	xmm0, DWORD PTR _bf$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _gf$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rf$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 5175 : 	}

	jmp	SHORT $LN2@ApplyLight
$LN1@ApplyLight:

; 5176 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyLightingToPalette@@YAXPAK0MMM@Z ENDP		; ApplyLightingToPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_end$ = -16						; size = 4
_imgPtr$ = -12						; size = 4
_row$ = -8						; size = 4
_tgt$ = -4						; size = 4
_pal$ = 8						; size = 4
_src$ = 12						; size = 4
_image$ = 16						; size = 4
?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z PROC	; Translate8to32

; 226  : void Translate8to32( DWORD *pal, BYTE *src, ImageBuffer *image ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 227  : 	int		row;
; 228  : 	DWORD	*tgt;
; 229  : 	DWORD	*end;
; 230  : 	void	*imgPtr;
; 231  : 
; 232  : 	ShiAssert(FALSE == F4IsBadReadPtr(pal, 256 * sizeof(*pal)));
; 233  : 	ShiAssert( src );
; 234  : 	ShiAssert( image );
; 235  : 
; 236  : 	// OW FIXME
; 237  : 	//	ShiAssert( image->PixelSize() == sizeof(*tgt) );
; 238  : 
; 239  : 	imgPtr = image->Lock();

	push	1
	push	0
	mov	ecx, DWORD PTR _image$[ebp]
	call	?Lock@ImageBuffer@@QAEPAX_N0@Z		; ImageBuffer::Lock
	mov	DWORD PTR _imgPtr$[ebp], eax

; 240  : 
; 241  : 	for (row = 0; row < image->targetYres(); row++) {

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN5@Translate8
$LN4@Translate8:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN5@Translate8:
	mov	ecx, DWORD PTR _image$[ebp]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	cmp	DWORD PTR _row$[ebp], eax
	jge	SHORT $LN3@Translate8

; 242  : 		tgt = (DWORD*)image->Pixel( imgPtr, row, 0 );

	push	0
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imgPtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _image$[ebp]
	call	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z	; ImageBuffer::Pixel
	mov	DWORD PTR _tgt$[ebp], eax

; 243  : 		end = tgt + image->targetXres();

	mov	ecx, DWORD PTR _image$[ebp]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	mov	ecx, DWORD PTR _tgt$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _end$[ebp], edx
$LN2@Translate8:

; 244  : 		while (tgt < end) {

	mov	eax, DWORD PTR _tgt$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	SHORT $LN1@Translate8

; 245  : 			*tgt = pal[*src];

	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _tgt$[ebp]
	mov	ecx, DWORD PTR _pal$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax], edx

; 246  : 			tgt++;

	mov	eax, DWORD PTR _tgt$[ebp]
	add	eax, 4
	mov	DWORD PTR _tgt$[ebp], eax

; 247  : 			src++;

	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx

; 248  : 		}

	jmp	SHORT $LN2@Translate8
$LN1@Translate8:

; 249  : 	}

	jmp	SHORT $LN4@Translate8
$LN3@Translate8:

; 250  : 
; 251  : 	image->Unlock();

	mov	ecx, DWORD PTR _image$[ebp]
	call	?Unlock@ImageBuffer@@QAEXXZ		; ImageBuffer::Unlock

; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z ENDP	; Translate8to32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_end$ = -16						; size = 4
_imgPtr$ = -12						; size = 4
_row$ = -8						; size = 4
_tgt$ = -4						; size = 4
_pal$ = 8						; size = 4
_src$ = 12						; size = 4
_image$ = 16						; size = 4
?Translate8to16@@YAXPAGPAEPAVImageBuffer@@@Z PROC	; Translate8to16

; 198  : void Translate8to16( WORD *pal, BYTE *src, ImageBuffer *image ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 199  : 	int		row;
; 200  : 	WORD	*tgt;
; 201  : 	WORD	*end;
; 202  : 	void	*imgPtr;
; 203  : 
; 204  : 	ShiAssert(FALSE == F4IsBadReadPtr(pal, 256 * sizeof(*pal)));
; 205  : 	ShiAssert( src );
; 206  : 	ShiAssert( image );
; 207  : 
; 208  : 	// OW FIXME
; 209  : 	//	ShiAssert( image->PixelSize() == sizeof(*tgt) );
; 210  : 
; 211  : 	imgPtr = image->Lock();

	push	1
	push	0
	mov	ecx, DWORD PTR _image$[ebp]
	call	?Lock@ImageBuffer@@QAEPAX_N0@Z		; ImageBuffer::Lock
	mov	DWORD PTR _imgPtr$[ebp], eax

; 212  : 
; 213  : 	for (row = 0; row < image->targetYres(); row++) {

	mov	DWORD PTR _row$[ebp], 0
	jmp	SHORT $LN5@Translate8
$LN4@Translate8:
	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax
$LN5@Translate8:
	mov	ecx, DWORD PTR _image$[ebp]
	call	?targetYres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetYres
	cmp	DWORD PTR _row$[ebp], eax
	jge	SHORT $LN3@Translate8

; 214  : 		tgt = (WORD*)image->Pixel( imgPtr, row, 0 );

	push	0
	mov	ecx, DWORD PTR _row$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imgPtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _image$[ebp]
	call	?Pixel@ImageBuffer@@QAEPAXPAXHH@Z	; ImageBuffer::Pixel
	mov	DWORD PTR _tgt$[ebp], eax

; 215  : 		end = tgt + image->targetXres();

	mov	ecx, DWORD PTR _image$[ebp]
	call	?targetXres@ImageBuffer@@QAEHXZ		; ImageBuffer::targetXres
	mov	ecx, DWORD PTR _tgt$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _end$[ebp], edx
$LN2@Translate8:

; 216  : 		while (tgt < end) {

	mov	eax, DWORD PTR _tgt$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jae	SHORT $LN1@Translate8

; 217  : 			*tgt = pal[*src];

	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _tgt$[ebp]
	mov	ecx, DWORD PTR _pal$[ebp]
	mov	dx, WORD PTR [ecx+edx*2]
	mov	WORD PTR [eax], dx

; 218  : 			tgt++;

	mov	eax, DWORD PTR _tgt$[ebp]
	add	eax, 2
	mov	DWORD PTR _tgt$[ebp], eax

; 219  : 			src++;

	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx

; 220  : 		}

	jmp	SHORT $LN2@Translate8
$LN1@Translate8:

; 221  : 	}

	jmp	SHORT $LN4@Translate8
$LN3@Translate8:

; 222  : 
; 223  : 	image->Unlock();

	mov	ecx, DWORD PTR _image$[ebp]
	call	?Unlock@ImageBuffer@@QAEXXZ		; ImageBuffer::Unlock

; 224  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Translate8to16@@YAXPAGPAEPAVImageBuffer@@@Z ENDP	; Translate8to16
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_msg$2 = -1216						; size = 152
_totalWidth$ = -1064					; size = 4
tv152 = -1060						; size = 4
_result$ = -1056					; size = 4
_texFile$ = -1052					; size = 432
$T3 = -620						; size = 24
_buffer$4 = -596					; size = 580
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pfilename$ = 8						; size = 4
_image$ = 12						; size = 4
_palette$ = 16						; size = 4
?ReadImage@@YAXPADPAPAEPAPAK@Z PROC			; ReadImage

; 153  : void ReadImage(char* pfilename, GLubyte** image, GLulong** palette) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadImage@@YAXPADPAPAEPAPAK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1204				; 000004b4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 154  : 
; 155  : 	int					result;
; 156  : 	int					totalWidth;
; 157  : 	CImageFileMemory 	texFile;

	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??0CImageFileMemory@@QAE@XZ		; CImageFileMemory::CImageFileMemory
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 158  : 
; 159  : 	// Make sure we recognize this file type
; 160  : 	result = texFile.imageType = CheckImageType(pfilename );

	mov	eax, DWORD PTR _pfilename$[ebp]
	push	eax
	call	?CheckImageType@@YAHPBD@Z		; CheckImageType
	add	esp, 4
	mov	DWORD PTR _texFile$[ebp+28], eax
	mov	ecx, DWORD PTR _texFile$[ebp+28]
	mov	DWORD PTR _result$[ebp], ecx

; 161  : 	ShiAssert( texFile.imageType != IMAGE_TYPE_UNKNOWN );
; 162  : 
; 163  : 	// Open the input file
; 164  : 	result = texFile.glOpenFileMem( pfilename );

	mov	edx, DWORD PTR _pfilename$[ebp]
	push	edx
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	?glOpenFileMem@CFileMemory@@QAEHPBD@Z	; CFileMemory::glOpenFileMem
	mov	DWORD PTR _result$[ebp], eax

; 165  : 	ShiAssert( result == 1 );
; 166  : 
; 167  : 	// Read the image data (note that ReadTextureImage will close texFile for us)
; 168  : 	texFile.glReadFileMem();

	lea	ecx, DWORD PTR _texFile$[ebp]
	call	?glReadFileMem@CFileMemory@@QAEXXZ	; CFileMemory::glReadFileMem

; 169  : 	result = ReadTextureImage( &texFile );

	lea	eax, DWORD PTR _texFile$[ebp]
	push	eax
	call	?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z ; ReadTextureImage
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 170  : 
; 171  : 	if (result != GOOD_READ) {

	cmp	DWORD PTR _result$[ebp], 0
	je	$LN3@ReadImage

; 172  : 		//sfr: changed message
; 173  : 		std::ostringstream msg;

	push	1
	push	2
	lea	ecx, DWORD PTR _msg$2[ebp]
	call	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 174  : 		msg << "Failed to read image: " << pfilename;

	mov	ecx, DWORD PTR _pfilename$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@IONHGOFE@Failed?5to?5read?5image?3?5?$AA@
	lea	edx, DWORD PTR _msg$2[ebp]
	push	edx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 175  : 		ShiError(msg.str().c_str());

	push	OFFSET ??_C@_0M@CFLADCE@Feb?518?52013?$AA@
	push	OFFSET ??_C@_0O@KOHLGLHA@cpmanager?4cpp?$AA@
	push	175					; 000000afH
	push	OFFSET ??_C@_0BE@FGKKLFGH@Error?3?5?5?$CF0d?5?5?$CFs?5?5?$CFs?$AA@
	lea	eax, DWORD PTR _buffer$4[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H
	push	0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _msg$2[ebp]
	call	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	lea	edx, DWORD PTR _buffer$4[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	-1
	call	_exit

; 176  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _msg$2[ebp]
	call	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN3@ReadImage:

; 177  : 
; 178  : 	// Store the image size (check it in debug mode)
; 179  : 	totalWidth = texFile.image.width;

	mov	eax, DWORD PTR _texFile$[ebp+32]
	mov	DWORD PTR _totalWidth$[ebp], eax

; 180  : 
; 181  : 	*image = texFile.image.image;

	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR _texFile$[ebp+44]
	mov	DWORD PTR [ecx], edx

; 182  : 
; 183  : 	if(palette) {

	cmp	DWORD PTR _palette$[ebp], 0
	je	SHORT $LN2@ReadImage

; 184  : 		*palette = texFile.image.palette;

	mov	eax, DWORD PTR _palette$[ebp]
	mov	ecx, DWORD PTR _texFile$[ebp+40]
	mov	DWORD PTR [eax], ecx

; 185  : 	}
; 186  : 	else {

	jmp	SHORT $LN1@ReadImage
$LN2@ReadImage:

; 187  : 		glReleaseMemory( (char*)texFile.image.palette );

	mov	edx, DWORD PTR _texFile$[ebp+40]
	push	edx
	call	?glReleaseMemory@@YAXPAX@Z		; glReleaseMemory
	add	esp, 4
$LN1@ReadImage:

; 188  : 	}
; 189  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _texFile$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
$LN5@ReadImage:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadImage@@YAXPADPAPAEPAPAK@Z$0:
	lea	ecx, DWORD PTR _texFile$[ebp]
	jmp	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
__unwindfunclet$?ReadImage@@YAXPADPAPAEPAPAK@Z$1:
	lea	ecx, DWORD PTR _msg$2[ebp]
	jmp	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__ehhandler$?ReadImage@@YAXPADPAPAEPAPAK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadImage@@YAXPADPAPAEPAPAK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadImage@@YAXPADPAPAEPAPAK@Z ENDP			; ReadImage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 4
_isDogfight$ = -48					; size = 4
tv139 = -44						; size = 4
$T3 = -40						; size = 4
_team$ = -36						; size = 4
tv80 = -32						; size = 4
tv76 = -28						; size = 4
tv91 = -24						; size = 4
_model$ = -20						; size = 4
_texture$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppGeometry$ = 8					; size = 4
_normalType$ = 12					; size = 4
_dogType$ = 16						; size = 4
?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z PROC	; CreateCockpitGeometry

; 5120 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 5121 : 	int model=0;

	mov	DWORD PTR _model$[ebp], 0

; 5122 : 	int team=0;

	mov	DWORD PTR _team$[ebp], 0

; 5123 : 	int texture=1;

	mov	DWORD PTR _texture$[ebp], 1

; 5124 : 
; 5125 : 	BOOL isDogfight;
; 5126 : 
; 5127 : 	isDogfight = FalconLocalGame->GetGameType() == game_Dogfight;

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@CreateCock
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN15@CreateCock
$LN14@CreateCock:
	mov	DWORD PTR tv76[ebp], 0
$LN15@CreateCock:
	mov	ecx, DWORD PTR tv76[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 2
	jne	SHORT $LN16@CreateCock
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN17@CreateCock
$LN16@CreateCock:
	mov	DWORD PTR tv80[ebp], 0
$LN17@CreateCock:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _isDogfight$[ebp], ecx

; 5128 : 
; 5129 : 	if(isDogfight) {

	cmp	DWORD PTR _isDogfight$[ebp], 0
	je	SHORT $LN11@CreateCock

; 5130 : 		model = dogType;	// change this to proper vis type when it gets into classtable

	mov	edx, DWORD PTR _dogType$[ebp]
	mov	DWORD PTR _model$[ebp], edx

; 5131 : 		team = FalconLocalSession->GetTeam();

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetTeam@FalconSessionEntity@@QAEEXZ	; FalconSessionEntity::GetTeam
	movzx	eax, al
	mov	DWORD PTR _team$[ebp], eax

; 5132 : 		switch(team) {

	mov	ecx, DWORD PTR _team$[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 1
	je	SHORT $LN8@CreateCock
	cmp	DWORD PTR tv91[ebp], 2
	je	SHORT $LN7@CreateCock
	cmp	DWORD PTR tv91[ebp], 3
	je	SHORT $LN6@CreateCock
	jmp	SHORT $LN5@CreateCock
$LN8@CreateCock:

; 5133 : 			case 1:
; 5134 : 				texture = 3;

	mov	DWORD PTR _texture$[ebp], 3

; 5135 : 				break;

	jmp	SHORT $LN9@CreateCock
$LN7@CreateCock:

; 5136 : 
; 5137 : 			case 2:
; 5138 : 				texture = 4;

	mov	DWORD PTR _texture$[ebp], 4

; 5139 : 				break;

	jmp	SHORT $LN9@CreateCock
$LN6@CreateCock:

; 5140 : 
; 5141 : 			case 3:
; 5142 : 				texture = 1;

	mov	DWORD PTR _texture$[ebp], 1

; 5143 : 				break;

	jmp	SHORT $LN9@CreateCock
$LN5@CreateCock:

; 5144 : 
; 5145 : 			case 4:
; 5146 : 			default:
; 5147 : 				texture = 2;

	mov	DWORD PTR _texture$[ebp], 2
$LN9@CreateCock:

; 5148 : 				break;
; 5149 : 		}
; 5150 : 	}
; 5151 : 	else {

	jmp	SHORT $LN4@CreateCock
$LN11@CreateCock:

; 5152 : 		model = normalType; // change this to proper vis type when it gets into classtable

	mov	edx, DWORD PTR _normalType$[ebp]
	mov	DWORD PTR _model$[ebp], edx
$LN4@CreateCock:

; 5153 : 	}
; 5154 : 
; 5155 : 	// Wings and reflection
; 5156 : 	DrawableBSP::LockAndLoad (model);

	mov	eax, DWORD PTR _model$[ebp]
	push	eax
	call	?LockAndLoad@DrawableBSP@@SAXH@Z	; DrawableBSP::LockAndLoad
	add	esp, 4

; 5157 : 	*ppGeometry = new DrawableBSP( model, &Origin, &IMatrix, 1.0f );

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN18@CreateCock
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ?IMatrix@@3UTrotation@@B		; IMatrix
	push	OFFSET ?Origin@@3UTpoint@@B		; Origin
	mov	ecx, DWORD PTR _model$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN19@CreateCock
$LN18@CreateCock:
	mov	DWORD PTR tv139[ebp], 0
$LN19@CreateCock:
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _ppGeometry$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx

; 5158 : 
; 5159 : 	// COBRA - DX - If Using the DX Engine everithing must have RL Scaling...
; 5160 : 	if(g_bUse_DX_Engine)

	movzx	edx, BYTE PTR ?g_bUse_DX_Engine@@3_NA	; g_bUse_DX_Engine
	test	edx, edx
	je	SHORT $LN3@CreateCock

; 5161 : 		(*ppGeometry)->SetScale( 1.0f );	// COBRA - RED

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ppGeometry$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetScale@DrawableObject@@QAEXM@Z	; DrawableObject::SetScale

; 5162 : 	else 

	jmp	SHORT $LN2@CreateCock
$LN3@CreateCock:

; 5163 : 		(*ppGeometry)->SetScale( 10.0f );	// Keep the geometry away from the clipping plane

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ppGeometry$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetScale@DrawableObject@@QAEXM@Z	; DrawableObject::SetScale
$LN2@CreateCock:

; 5164 : 
; 5165 : 
; 5166 : 	if(isDogfight) {

	cmp	DWORD PTR _isDogfight$[ebp], 0
	je	SHORT $LN1@CreateCock

; 5167 : 		(*ppGeometry)->SetTextureSet(texture);

	mov	edx, DWORD PTR _texture$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppGeometry$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetTextureSet@DrawableBSP@@QAEXK@Z	; DrawableBSP::SetTextureSet
$LN1@CreateCock:

; 5168 : 	}
; 5169 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCockpitGeometry@@YAXPAPAVDrawableBSP@@HH@Z ENDP	; CreateCockpitGeometry
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cpmanager.cpp
_TEXT	SEGMENT
_token$ = -8						; size = 4
_result$ = -4						; size = 4
_string$ = 8						; size = 4
_separators$ = 12					; size = 4
?FindToken@@YAPADPAPADPBD@Z PROC			; FindToken

; 259  : char* FindToken(char** string, const char* separators) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 260  : 
; 261  : 	char*		result;
; 262  : 	char*		token;
; 263  : 
; 264  : 	// find first occurance of something other than separator
; 265  : 	token = _tcsspnp(*string, separators);

	mov	eax, DWORD PTR _separators$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	__tcsspnp
	add	esp, 8
	mov	DWORD PTR _token$[ebp], eax

; 266  : 
; 267  : 	// if there are none, we are probably at the end of string, nothing left to parse
; 268  : 	if(token == NULL) {

	cmp	DWORD PTR _token$[ebp], 0
	jne	SHORT $LN4@FindToken

; 269  : 		// return the position of the terminator as the string
; 270  : 		*string = strchr(*string, '\0');

	push	0
	mov	eax, DWORD PTR _string$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	edx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [edx], eax

; 271  : 	}
; 272  : 	else { // we still have tokens to parse

	jmp	SHORT $LN3@FindToken
$LN4@FindToken:

; 273  : 
; 274  : 		// starting with the first character other than a separator...
; 275  : 		// find the first separator.
; 276  : 		result = strpbrk(token, separators);

	mov	eax, DWORD PTR _separators$[ebp]
	push	eax
	mov	ecx, DWORD PTR _token$[ebp]
	push	ecx
	call	?strpbrk@@YAPADPADPBD@Z			; strpbrk
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 277  : 
; 278  : 		if(result == NULL) { // found a string no separators

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@FindToken

; 279  : 			// return the position of the terminator as the string
; 280  : 			*string = strchr(*string, '\0');

	push	0
	mov	edx, DWORD PTR _string$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx], eax

; 281  : 		}
; 282  : 		else { // still have characters to parse

	jmp	SHORT $LN3@FindToken
$LN2@FindToken:

; 283  : 
; 284  : 			*result = NULL;

	mov	edx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [edx], 0

; 285  : 			*string = result + 1;

	mov	eax, DWORD PTR _result$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _string$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@FindToken:

; 286  : 		}
; 287  : 	}
; 288  : 
; 289  : 	return(token);

	mov	eax, DWORD PTR _token$[ebp]

; 290  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindToken@@YAPADPAPADPBD@Z ENDP			; FindToken
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cppanel.h
;	COMDAT ?DEDFont@CPPanel@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DEDFont@CPPanel@@QAEHXZ PROC				; CPPanel::DEDFont, COMDAT
; _this$ = ecx

; 195  : 	int   DEDFont(void) {return mDEDFont;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?DEDFont@CPPanel@@QAEHXZ ENDP				; CPPanel::DEDFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cppanel.h
;	COMDAT ?MFDFont@CPPanel@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MFDFont@CPPanel@@QAEHXZ PROC				; CPPanel::MFDFont, COMDAT
; _this$ = ecx

; 194  : 	int   MFDFont(void) {return mMFDFont;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?MFDFont@CPPanel@@QAEHXZ ENDP				; CPPanel::MFDFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cppanel.h
;	COMDAT ?HudFont@CPPanel@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HudFont@CPPanel@@QAEHXZ PROC				; CPPanel::HudFont, COMDAT
; _this$ = ecx

; 193  : 	int   HudFont(void) {return mHudFont;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?HudFont@CPPanel@@QAEHXZ ENDP				; CPPanel::HudFont
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GICPClass@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GICPClass@@QAEPAXI@Z PROC				; ICPClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ICPClass@@QAE@XZ			; ICPClass::~ICPClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GICPClass@@QAEPAXI@Z ENDP				; ICPClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?SetICPTertiaryMode@ICPClass@@QAEXJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SetICPTertiaryMode@ICPClass@@QAEXJ@Z PROC		; ICPClass::SetICPTertiaryMode, COMDAT
; _this$ = ecx

; 570  : 	void SetICPTertiaryMode(long mode)	{mICPTertiaryMode = mode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetICPTertiaryMode@ICPClass@@QAEXJ@Z ENDP		; ICPClass::SetICPTertiaryMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?GetICPTertiaryMode@ICPClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetICPTertiaryMode@ICPClass@@QAEJXZ PROC		; ICPClass::GetICPTertiaryMode, COMDAT
; _this$ = ecx

; 569  : 	long GetICPTertiaryMode(void) {return mICPTertiaryMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetICPTertiaryMode@ICPClass@@QAEJXZ ENDP		; ICPClass::GetICPTertiaryMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?GetICPSecondaryMode@ICPClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetICPSecondaryMode@ICPClass@@QAEJXZ PROC		; ICPClass::GetICPSecondaryMode, COMDAT
; _this$ = ecx

; 568  : 	long GetICPSecondaryMode(void) {return mICPSecondaryMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetICPSecondaryMode@ICPClass@@QAEJXZ ENDP		; ICPClass::GetICPSecondaryMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?GetICPPrimaryMode@ICPClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetICPPrimaryMode@ICPClass@@QAEJXZ PROC		; ICPClass::GetICPPrimaryMode, COMDAT
; _this$ = ecx

; 567  : 	long GetICPPrimaryMode(void) {return mICPPrimaryMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetICPPrimaryMode@ICPClass@@QAEJXZ ENDP		; ICPClass::GetICPPrimaryMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsICPSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsICPSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsICPSet, COMDAT
; _this$ = ecx

; 499  : 	int IsICPSet (int testFlag) {return ICPModeFlags & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsICPSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsICPSet
$LN3@IsICPSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsICPSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsICPSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsICPSet
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCPButtonView@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPButtonView@@QAEPAXI@Z PROC			; CPButtonView::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPButtonView@@QAE@XZ			; CPButtonView::~CPButtonView
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPButtonView@@QAEPAXI@Z ENDP			; CPButtonView::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCPButtonObject@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPButtonObject@@QAEPAXI@Z PROC			; CPButtonObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPButtonObject@@QAE@XZ		; CPButtonObject::~CPButtonObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPButtonObject@@QAEPAXI@Z ENDP			; CPButtonObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\button.h
;	COMDAT ?GetId@CPButtonObject@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetId@CPButtonObject@@QBEHXZ PROC			; CPButtonObject::GetId, COMDAT
; _this$ = ecx

; 156  : 	int				GetId() const           { return mIdNum;        }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetId@CPButtonObject@@QBEHXZ ENDP			; CPButtonObject::GetId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXPAPAVCPButtonView@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXPAPAVCPButtonView@@0@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1693 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1694 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXPAPAVCPButtonView@@0@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Xlen, COMDAT
; _this$ = ecx

; 1666 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1667 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1668 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reserve, COMDAT
; _this$ = ecx

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unused_capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Unused_capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Reserve

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size
	sub	esi, eax
	cmp	esi, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Reserve

; 1529 : 				_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Xlen
$LN1@Reserve:

; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEII@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reallocate
$LN4@Reserve:

; 1531 : 			}
; 1532 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -32						; size = 4
__Ptr$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1500 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEPAPAVCPButtonView@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 1502 : 
; 1503 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVCPButtonView@@@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEPAPAVCPButtonView@@PAPAV2@00@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Umove<CPButtonView * *>
	jmp	SHORT $LN5@Reallocate
__catch$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z$0:

; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::deallocate

; 1507 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1508 : 		_CATCH_END

	mov	eax, $LN8@Reallocate
	ret	0
$LN5@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z$1
$LN8@Reallocate:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z$1:

; 1509 : 
; 1510 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1511 : 		if (this->_Myfirst != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@Reallocate

; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Destroy

; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::deallocate
$LN1@Reallocate:

; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1519 : 		this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1520 : 		this->_Mylast = _Ptr + _Size;

	mov	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1521 : 		this->_Myfirst = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Reallocate:

; 1522 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reallocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBE_NPBQAVCPButtonView@@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBE_NPBQAVCPButtonView@@@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Inside, COMDAT
; _this$ = ecx

; 1495 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1497 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBE_NPBQAVCPButtonView@@@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEII@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1484 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1489 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1490 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1491 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1492 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEII@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@YAXPAPAVCPButtonView@@0AAU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CPButtonView *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::clear, COMDAT
; _this$ = ecx

; 1413 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1414 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Destroy

; 1416 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1417 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXABQAVCPButtonView@@@Z
_TEXT	SEGMENT
__Idx$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXABQAVCPButtonView@@@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::push_back, COMDAT
; _this$ = ecx

; 1184 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1185 : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVCPButtonView@@@std@@YAPBQAVCPButtonView@@ABQAV1@@Z ; std::addressof<CPButtonView * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBE_NPBQAVCPButtonView@@@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back

; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$addressof@QAVCPButtonView@@@std@@YAPBQAVCPButtonView@@ABQAV1@@Z ; std::addressof<CPButtonView * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
	mov	DWORD PTR __Idx$1[ebp], eax

; 1188 : 			if (this->_Mylast == this->_Myend)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reserve
$LN3@push_back:

; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Orphan_range

; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Idx$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPButtonView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@AAPAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * &>

; 1193 : 			++this->_Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1194 : 			}
; 1195 : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXI@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Reserve
$LN1@push_back:

; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IBEXPAPAVCPButtonView@@0@Z ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Orphan_range

; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	??$construct@PAVCPButtonView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@ABQAV2@@Z ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::construct<CPButtonView *,CPButtonView * const &>

; 1202 : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@push_back:

; 1203 : 			}
; 1204 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXABQAVCPButtonView@@@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[], COMDAT
; _this$ = ecx

; 1136 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEAAPAVCPButtonView@@I@Z ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::max_size, COMDAT
; _this$ = ecx

; 1091 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1092 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::max_size

; 1093 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size, COMDAT
; _this$ = ecx

; 1086 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1088 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unused_capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 971  : 		{	// micro-optimization for capacity() - size()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 		return (this->_Myend - this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 973  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unused_capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::capacity, COMDAT
; _this$ = ecx

; 966  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 968  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::~vector<CPButtonView *,std::allocator<CPButtonView *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@IAEXXZ ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::~vector<CPButtonView *,std::allocator<CPButtonView *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ PROC ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::vector<CPButtonView *,std::allocator<CPButtonView *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVCPButtonView@@@std@@QAE@XZ ; std::allocator<CPButtonView *>::allocator<CPButtonView *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonView@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPButtonView *,std::allocator<CPButtonView *> >::vector<CPButtonView *,std::allocator<CPButtonView *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::_Wrap_alloc<std::allocator<CPButtonView *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonView@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonView@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVCPButtonView@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPButtonView *> >::_Vector_val<std::_Simple_types<CPButtonView *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVCPButtonView@@V?$allocator@PAVCPButtonView@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCPButtonView@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >::_Vector_alloc<0,std::_Vec_base_types<CPButtonView *,std::allocator<CPButtonView *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCPButtonView@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVCPButtonView@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPButtonView *> >::_Vector_val<std::_Simple_types<CPButtonView *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVCPButtonView@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPButtonView *> >::_Vector_val<std::_Simple_types<CPButtonView *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAIABV?$allocator@PAVCPButtonView@@@2@@Z ; std::allocator_traits<std::allocator<CPButtonView *> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@I@Z ; std::allocator<CPButtonView *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEXPAPAVCPButtonView@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEPAPAVCPButtonView@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEPAPAVCPButtonView@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@PAVCPButtonView@@@std@@QAEPAPAVCPButtonView@@I@Z ; std::allocator<CPButtonView *>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAEPAPAVCPButtonView@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::_Wrap_alloc<std::allocator<CPButtonView *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVCPButtonView@@@std@@QAE@XZ ; std::allocator<CPButtonView *>::allocator<CPButtonView *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVCPButtonView@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<CPButtonView *> >::_Wrap_alloc<std::allocator<CPButtonView *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAIABV?$allocator@PAVCPButtonView@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAIABV?$allocator@PAVCPButtonView@@@2@@Z PROC ; std::allocator_traits<std::allocator<CPButtonView *> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@PAVCPButtonView@@@std@@QBEIXZ ; std::allocator<CPButtonView *>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@PAVCPButtonView@@@std@@@std@@SAIABV?$allocator@PAVCPButtonView@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CPButtonView *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCPButtonView@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@PAVCPButtonView@@@std@@QBEIXZ PROC ; std::allocator<CPButtonView *>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVCPButtonView@@@std@@QBEIXZ ENDP ; std::allocator<CPButtonView *>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@ABQAV3@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@ABQAV3@@Z PROC ; std::allocator<CPButtonView *>::construct, COMDAT
; _this$ = ecx

; 605  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN1@construct
$LN3@construct:
	mov	DWORD PTR tv68[ebp], 0
$LN1@construct:

; 607  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@ABQAV3@@Z ENDP ; std::allocator<CPButtonView *>::construct
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCPButtonView@@@std@@QAEPAPAVCPButtonView@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPButtonView@@@std@@QAEPAPAVCPButtonView@@I@Z PROC ; std::allocator<CPButtonView *>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVCPButtonView@@@std@@YAPAPAVCPButtonView@@IPAPAV1@@Z ; std::_Allocate<CPButtonView *>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVCPButtonView@@@std@@QAEPAPAVCPButtonView@@I@Z ENDP ; std::allocator<CPButtonView *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@I@Z PROC ; std::allocator<CPButtonView *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVCPButtonView@@@std@@QAEXPAPAVCPButtonView@@I@Z ENDP ; std::allocator<CPButtonView *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCPButtonView@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVCPButtonView@@@std@@QAE@XZ PROC	; std::allocator<CPButtonView *>::allocator<CPButtonView *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVCPButtonView@@@std@@QAE@XZ ENDP	; std::allocator<CPButtonView *>::allocator<CPButtonView *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_ESourceButtonViewType@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ESourceButtonViewType@@QAEPAXI@Z PROC		; SourceButtonViewType::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1SourceButtonViewType@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SourceButtonViewType@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESourceButtonViewType@@QAEPAXI@Z ENDP		; SourceButtonViewType::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SourceButtonViewType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SourceButtonViewType@@QAE@XZ PROC			; SourceButtonViewType::~SourceButtonViewType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	esp, ebp
	pop	ebp
	ret	0
??1SourceButtonViewType@@QAE@XZ ENDP			; SourceButtonViewType::~SourceButtonViewType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0SourceButtonViewType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SourceButtonViewType@@QAE@XZ PROC			; SourceButtonViewType::SourceButtonViewType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SourceButtonViewType@@QAE@XZ ENDP			; SourceButtonViewType::SourceButtonViewType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?InSim@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InSim@SimulationDriver@@QBE_NXZ PROC			; SimulationDriver::InSim, COMDAT
; _this$ = ecx

; 51   : 	bool InSim() const                 { return SimulationLoopControl::InSim(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	call	?InSim@SimulationLoopControl@@SA_NXZ	; SimulationLoopControl::InSim
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationDriver@@QBE_NXZ ENDP			; SimulationDriver::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?SetPGM@AircraftClass@@QAEXW4EWSPGMSwitch@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetPGM@AircraftClass@@QAEXW4EWSPGMSwitch@1@@Z PROC	; AircraftClass::SetPGM, COMDAT
; _this$ = ecx

; 544  : 	void SetPGM (EWSPGMSwitch t) { EWSPgm = t; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+1496], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPGM@AircraftClass@@QAEXW4EWSPGMSwitch@1@@Z ENDP	; AircraftClass::SetPGM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ PROC	; AircraftClass::EWSPGM, COMDAT
; _this$ = ecx

; 543  : 	EWSPGMSwitch EWSPGM() { return EWSPgm; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1496]
	mov	esp, ebp
	pop	ebp
	ret	0
?EWSPGM@AircraftClass@@QAE?AW4EWSPGMSwitch@1@XZ ENDP	; AircraftClass::EWSPGM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ PROC ; AircraftClass::GetInstrumentLight, COMDAT
; _this$ = ecx

; 112  : 	LightSwitch GetInstrumentLight() const { return instrumentLight; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+748]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInstrumentLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ENDP ; AircraftClass::GetInstrumentLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ PROC ; AircraftClass::GetInteriorLight, COMDAT
; _this$ = ecx

; 111  : 	LightSwitch GetInteriorLight() const { return interiorLight; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+744]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInteriorLight@AircraftClass@@QBE?AW4LightSwitch@1@XZ ENDP ; AircraftClass::GetInteriorLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetSwitch@SimMoverClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
_val$ = 12						; size = 4
?SetSwitch@SimMoverClass@@QAEXHH@Z PROC			; SimMoverClass::SetSwitch, COMDAT
; _this$ = ecx

; 134  : 	void SetSwitch (int num, int val) { ShiAssert(num < numSwitches); if (num < numSwitches) { switchData[num] = val; switchChange[num] = TRUE;} }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR [eax+604]
	jge	SHORT $LN2@SetSwitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	mov	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+596]
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [ecx+edx*4], 1
$LN2@SetSwitch:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSwitch@SimMoverClass@@QAEXHH@Z ENDP			; SimMoverClass::SetSwitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simloop.h
;	COMDAT ?InSim@SimulationLoopControl@@SA_NXZ
_TEXT	SEGMENT
tv65 = -4						; size = 4
?InSim@SimulationLoopControl@@SA_NXZ PROC		; SimulationLoopControl::InSim, COMDAT

; 27   : 	static bool InSim(void)			{ return currentMode == RunningGraphics; }

	push	ebp
	mov	ebp, esp
	push	ecx
	cmp	DWORD PTR ?currentMode@SimulationLoopControl@@1W4SimLoopControlMode@1@A, 6 ; SimulationLoopControl::currentMode
	jne	SHORT $LN3@InSim
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@InSim
$LN3@InSim:
	mov	DWORD PTR tv65[ebp], 0
$LN4@InSim:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?InSim@SimulationLoopControl@@SA_NXZ ENDP		; SimulationLoopControl::InSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_i$ = -4						; size = 4
_fi$ = 8						; size = 4
?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z PROC	; ReadTextureImage, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 180  : 	GLint	i;
; 181  : 	switch (fi -> imageType) {

	mov	eax, DWORD PTR _fi$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 1
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 6
	ja	$LN1@ReadTextur
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN13@ReadTextur[eax*4]
$LN8@ReadTextur:

; 182  : 		case IMAGE_TYPE_GIF:
; 183  : 			i = UnpackGIF (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?UnpackGIF@@YAHPAVCImageFileMemory@@@Z	; UnpackGIF
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 184  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN7@ReadTextur:

; 185  : 		case IMAGE_TYPE_LBM:
; 186  : 			i = UnpackLBM (fi);

	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?UnpackLBM@@YAHPAVCImageFileMemory@@@Z	; UnpackLBM
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 187  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN6@ReadTextur:

; 188  : 		case IMAGE_TYPE_PCX:
; 189  : 			i = UnpackPCX (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?UnpackPCX@@YAHPAVCImageFileMemory@@@Z	; UnpackPCX
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 190  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN5@ReadTextur:

; 191  : 		case IMAGE_TYPE_BMP:
; 192  : 			i = ReadBMP (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?ReadBMP@@YAHPAVCImageFileMemory@@@Z	; ReadBMP
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 193  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN4@ReadTextur:

; 194  : 		case IMAGE_TYPE_APL:
; 195  : 			i = ReadAPL (fi);

	mov	edx, DWORD PTR _fi$[ebp]
	push	edx
	call	?ReadAPL@@YAHPAVCImageFileMemory@@@Z	; ReadAPL
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 196  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN3@ReadTextur:

; 197  : 		case IMAGE_TYPE_TGA:
; 198  : 			i = ReadTGA (fi);

	mov	eax, DWORD PTR _fi$[ebp]
	push	eax
	call	?ReadTGA@@YAHPAVCImageFileMemory@@@Z	; ReadTGA
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 199  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN2@ReadTextur:

; 200  : 
; 201  : 		//JAM 22Sep03
; 202  : 		case IMAGE_TYPE_DDS:
; 203  : 			i = ReadDDS (fi);

	mov	ecx, DWORD PTR _fi$[ebp]
	push	ecx
	call	?ReadDDS@@YAHPAVCImageFileMemory@@@Z	; ReadDDS
	add	esp, 4
	mov	DWORD PTR _i$[ebp], eax

; 204  : 			break;

	jmp	SHORT $LN9@ReadTextur
$LN1@ReadTextur:

; 205  : 		//JAM
; 206  : 
; 207  : 		default:
; 208  : 			i = NO_CODE;

	mov	DWORD PTR _i$[ebp], -1
$LN9@ReadTextur:

; 209  : 			break;
; 210  : 	}
; 211  : 	fi -> glCloseFileMem ();

	mov	ecx, DWORD PTR _fi$[ebp]
	call	?glCloseFileMem@CFileMemory@@QAEXXZ	; CFileMemory::glCloseFileMem

; 212  : 	return i;

	mov	eax, DWORD PTR _i$[ebp]

; 213  : };

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@ReadTextur:
	DD	$LN8@ReadTextur
	DD	$LN7@ReadTextur
	DD	$LN6@ReadTextur
	DD	$LN5@ReadTextur
	DD	$LN4@ReadTextur
	DD	$LN3@ReadTextur
	DD	$LN2@ReadTextur
?ReadTextureImage@@YAHPAVCImageFileMemory@@@Z ENDP	; ReadTextureImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\image.h
;	COMDAT ?CheckImageType@@YAHPBD@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_ext$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_file$ = 8						; size = 4
?CheckImageType@@YAHPBD@Z PROC				; CheckImageType, COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 150  : 	char	ext[10];
; 151  : 	GLint	i;
; 152  : 
; 153  : 	glGetFileExtension (file, ext);

	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	?glGetFileExtension@@YAXPBDPAD@Z	; glGetFileExtension
	add	esp, 8

; 154  : 	if (!strnicmp (ext, "GIF", 3)) 

	push	3
	push	OFFSET ??_C@_03BBABOKL@GIF?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN14@CheckImage

; 155  : 		i = IMAGE_TYPE_GIF;

	mov	DWORD PTR _i$[ebp], 1
	jmp	$LN13@CheckImage
$LN14@CheckImage:

; 156  : 	else if (!strnicmp (ext,"LBM",3)) 

	push	3
	push	OFFSET ??_C@_03DJLAKPIA@LBM?$AA@
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN12@CheckImage

; 157  : 		i = IMAGE_TYPE_LBM;

	mov	DWORD PTR _i$[ebp], 2
	jmp	$LN13@CheckImage
$LN12@CheckImage:

; 158  : 	else if (!strnicmp (ext,"PCX",3)) 

	push	3
	push	OFFSET ??_C@_03BFAIMLIE@PCX?$AA@
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@CheckImage

; 159  : 		i = IMAGE_TYPE_PCX;

	mov	DWORD PTR _i$[ebp], 3
	jmp	$LN13@CheckImage
$LN10@CheckImage:

; 160  : 	else if (!strnicmp (ext,"BMP",3)) 

	push	3
	push	OFFSET ??_C@_03CNFPPDJC@BMP?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@CheckImage

; 161  : 		i = IMAGE_TYPE_BMP;

	mov	DWORD PTR _i$[ebp], 4
	jmp	SHORT $LN13@CheckImage
$LN8@CheckImage:

; 162  : 	else if (!strnicmp (ext,"APL",3)) 

	push	3
	push	OFFSET ??_C@_03MNGDDBAC@APL?$AA@
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN6@CheckImage

; 163  : 		i = IMAGE_TYPE_APL;

	mov	DWORD PTR _i$[ebp], 5
	jmp	SHORT $LN13@CheckImage
$LN6@CheckImage:

; 164  : 	else if (!strnicmp (ext,"TGA",3)) 

	push	3
	push	OFFSET ??_C@_03GGDFNBH@TGA?$AA@
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@CheckImage

; 165  : 		i = IMAGE_TYPE_TGA;

	mov	DWORD PTR _i$[ebp], 6
	jmp	SHORT $LN13@CheckImage
$LN4@CheckImage:

; 166  : 
; 167  : 	//JAM 22Sep03
; 168  : 	else if (!strnicmp (ext,"DDS",3))

	push	3
	push	OFFSET ??_C@_03CMMIMEAC@DDS?$AA@
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	call	_strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@CheckImage

; 169  : 		i = IMAGE_TYPE_DDS;

	mov	DWORD PTR _i$[ebp], 7

; 170  : 	//JAM
; 171  : 
; 172  : 	else

	jmp	SHORT $LN13@CheckImage
$LN2@CheckImage:

; 173  : 		i = IMAGE_TYPE_UNKNOWN;

	mov	DWORD PTR _i$[ebp], -1
$LN13@CheckImage:

; 174  : 
; 175  : 	return	i;

	mov	eax, DWORD PTR _i$[ebp]

; 176  : };

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckImageType@@YAHPBD@Z ENDP				; CheckImageType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCImageFileMemory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCImageFileMemory@@UAEPAXI@Z PROC			; CImageFileMemory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CImageFileMemory@@UAE@XZ		; CImageFileMemory::~CImageFileMemory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCImageFileMemory@@UAEPAXI@Z ENDP			; CImageFileMemory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\filemem.h
;	COMDAT ??1CImageFileMemory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CImageFileMemory@@UAE@XZ PROC			; CImageFileMemory::~CImageFileMemory, COMDAT
; _this$ = ecx

; 42   : 	virtual ~CImageFileMemory() {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CImageFileMemory@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileMemory@@UAE@XZ			; CFileMemory::~CFileMemory
	mov	esp, ebp
	pop	ebp
	ret	0
??1CImageFileMemory@@UAE@XZ ENDP			; CImageFileMemory::~CImageFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFileMemory@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFileMemory@@UAEPAXI@Z PROC				; CFileMemory::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileMemory@@UAE@XZ			; CFileMemory::~CFileMemory
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileMemory@@UAEPAXI@Z ENDP				; CFileMemory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\filemem.h
;	COMDAT ??1CFileMemory@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileMemory@@UAE@XZ PROC				; CFileMemory::~CFileMemory, COMDAT
; _this$ = ecx

; 14   : 	virtual ~CFileMemory()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileMemory@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CFileIO@@UAE@XZ			; CFileIO::~CFileIO
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileMemory@@UAE@XZ ENDP				; CFileMemory::~CFileMemory
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFileIO@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFileIO@@UAEPAXI@Z PROC				; CFileIO::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileIO@@UAE@XZ			; CFileIO::~CFileIO
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileIO@@UAEPAXI@Z ENDP				; CFileIO::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fileio.h
;	COMDAT ??1CFileIO@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileIO@@UAE@XZ PROC					; CFileIO::~CFileIO, COMDAT
; _this$ = ecx

; 25   : 	virtual ~CFileIO () {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileIO@@6B@

; 26   : 		if (file != -1) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN2@CFileIO

; 27   : 			closefile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?closefile@CFileIO@@QAEXXZ		; CFileIO::closefile
$LN2@CFileIO:

; 28   : 		}
; 29   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileIO@@UAE@XZ ENDP					; CFileIO::~CFileIO
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glGetFileExtension@@YAXPBDPAD@Z
_TEXT	SEGMENT
_lastdot$ = -4						; size = 4
_file$ = 8						; size = 4
_ext$ = 12						; size = 4
?glGetFileExtension@@YAXPBDPAD@Z PROC			; glGetFileExtension, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 128  : #if 0
; 129  : 	char	prevchar, currchar, nextchar;
; 130  : 
; 131  : 	prevchar = '.';
; 132  : 	while (*file != 0) {
; 133  : 		currchar = *file++;
; 134  : 		nextchar = *file;
; 135  : 		if (currchar == '.' && 
; 136  : 			((prevchar != '.' && prevchar != '\\') || 
; 137  : 			 (nextchar != '.' && nextchar != '\\'))) break;
; 138  : 		prevchar = currchar;
; 139  : 	}
; 140  : #else
; 141  : 
; 142  : 
; 143  : // Visual C/C++ 2010 migration fix
; 144  : //pmvstrm this the change
; 145  : 	const char *lastdot;
; 146  : 
; 147  : //pmvstrm this is the original
; 148  : //char *lastdot;
; 149  : 
; 150  : 	lastdot = strrchr(file, '.');

	push	46					; 0000002eH
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strrchr
	add	esp, 8
	mov	DWORD PTR _lastdot$[ebp], eax

; 151  : 
; 152  : 	if(lastdot) {

	cmp	DWORD PTR _lastdot$[ebp], 0
	je	SHORT $LN4@glGetFileE

; 153  : 		file = lastdot + 1;

	mov	ecx, DWORD PTR _lastdot$[ebp]
	add	ecx, 1
	mov	DWORD PTR _file$[ebp], ecx

; 154  : 	} else {

	jmp	SHORT $LN2@glGetFileE
$LN4@glGetFileE:

; 155  : 		file = file + strlen(file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _file$[ebp]
	mov	DWORD PTR _file$[ebp], eax
$LN2@glGetFileE:

; 156  : 	}
; 157  : #endif
; 158  : 
; 159  : 	while (*file) *ext++ = *file++;

	mov	eax, DWORD PTR _file$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@glGetFileE
	mov	edx, DWORD PTR _ext$[ebp]
	mov	eax, DWORD PTR _file$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _ext$[ebp]
	add	edx, 1
	mov	DWORD PTR _ext$[ebp], edx
	mov	eax, DWORD PTR _file$[ebp]
	add	eax, 1
	mov	DWORD PTR _file$[ebp], eax
	jmp	SHORT $LN2@glGetFileE
$LN1@glGetFileE:

; 160  : 	*ext = 0;

	mov	ecx, DWORD PTR _ext$[ebp]
	mov	BYTE PTR [ecx], 0

; 161  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glGetFileExtension@@YAXPBDPAD@Z ENDP			; glGetFileExtension
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\grinline.h
;	COMDAT ?glReleaseMemory@@YAXPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_memptr$ = 8						; size = 4
?glReleaseMemory@@YAXPAX@Z PROC				; glReleaseMemory, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 33   : #ifdef USE_SH_POOLS
; 34   : 	if (memptr)
; 35   : 	{
; 36   : 		MemFreePtr( memptr );
; 37   : 	}
; 38   : #else
; 39   : 	if (memptr)

	cmp	DWORD PTR _memptr$[ebp], 0
	je	SHORT $LN2@glReleaseM

; 40   : 	{
; 41   : 		delete[] memptr;

	mov	eax, DWORD PTR _memptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@glReleaseM:

; 42   : 	}
; 43   : #endif
; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?glReleaseMemory@@YAXPAX@Z ENDP				; glReleaseMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetGreenMode@RenderOTW@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGreenMode@RenderOTW@@QAE_NXZ PROC			; RenderOTW::GetGreenMode, COMDAT
; _this$ = ecx

; 167  : 	inline bool GetGreenMode() { return GreenMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+263368]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGreenMode@RenderOTW@@QAE_NXZ ENDP			; RenderOTW::GetGreenMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render3d.h
;	COMDAT ?GetObjectTextureState@Render3D@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetObjectTextureState@Render3D@@QAEHXZ PROC		; Render3D::GetObjectTextureState, COMDAT
; _this$ = ecx

; 75   : 	BOOL GetObjectTextureState( void )			{ return objTextureState; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+262888]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetObjectTextureState@Render3D@@QAEHXZ ENDP		; Render3D::GetObjectTextureState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::ZeroRotationAboutOrigin, COMDAT
; _this$ = ecx

; 144  :     void ZeroRotationAboutOrigin( void ) { dmatrix.rotation01 = dmatrix.rotation10 = 0.0f, dmatrix.rotation00 = dmatrix.rotation11 = 1.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+80], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+76], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::ZeroRotationAboutOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?Pixel@ImageBuffer@@QAEPAXPAXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
_row$ = 12						; size = 4
_col$ = 16						; size = 4
?Pixel@ImageBuffer@@QAEPAXPAXHH@Z PROC			; ImageBuffer::Pixel, COMDAT
; _this$ = ecx

; 70   : 	void* Pixel( void* ptr, int row, int col )	  { ShiAssert( ptr );

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 											return (BYTE*)ptr + 
; 72   : 											  row*m_ddsdBack.lPitch + 
; 73   : 											  col*PixelSize(); };

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _row$[ebp]
	imul	esi, DWORD PTR [eax+184]
	add	esi, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	imul	eax, DWORD PTR _col$[ebp]
	add	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Pixel@ImageBuffer@@QAEPAXPAXHH@Z ENDP			; ImageBuffer::Pixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?PixelSize@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PixelSize@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::PixelSize, COMDAT
; _this$ = ecx

; 56   : 	int	PixelSize() { return m_ddsdFront.ddpfPixelFormat.dwRGBBitCount >>3; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	shr	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	0
?PixelSize@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::PixelSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?BlueShift@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BlueShift@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::BlueShift, COMDAT
; _this$ = ecx

; 55   : 	int	BlueShift(void)	{ return blueShift; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]
	mov	esp, ebp
	pop	ebp
	ret	0
?BlueShift@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::BlueShift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?GreenShift@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GreenShift@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::GreenShift, COMDAT
; _this$ = ecx

; 54   : 	int	GreenShift(void){ return greenShift; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]
	mov	esp, ebp
	pop	ebp
	ret	0
?GreenShift@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::GreenShift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?RedShift@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RedShift@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::RedShift, COMDAT
; _this$ = ecx

; 53   : 	int RedShift(void)	{ return redShift; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]
	mov	esp, ebp
	pop	ebp
	ret	0
?RedShift@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::RedShift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?BlueMask@ImageBuffer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BlueMask@ImageBuffer@@QAEKXZ PROC			; ImageBuffer::BlueMask, COMDAT
; _this$ = ecx

; 52   : 	UInt32 BlueMask(void)	{ return m_ddsdFront.ddpfPixelFormat.dwBBitMask; }; 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?BlueMask@ImageBuffer@@QAEKXZ ENDP			; ImageBuffer::BlueMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?GreenMask@ImageBuffer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GreenMask@ImageBuffer@@QAEKXZ PROC			; ImageBuffer::GreenMask, COMDAT
; _this$ = ecx

; 51   : 	UInt32 GreenMask(void)	{ return m_ddsdFront.ddpfPixelFormat.dwGBitMask; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+108]
	mov	esp, ebp
	pop	ebp
	ret	0
?GreenMask@ImageBuffer@@QAEKXZ ENDP			; ImageBuffer::GreenMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?RedMask@ImageBuffer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RedMask@ImageBuffer@@QAEKXZ PROC			; ImageBuffer::RedMask, COMDAT
; _this$ = ecx

; 50   : 	UInt32 RedMask(void)	{ return m_ddsdFront.ddpfPixelFormat.dwRBitMask; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mov	esp, ebp
	pop	ebp
	ret	0
?RedMask@ImageBuffer@@QAEKXZ ENDP			; ImageBuffer::RedMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetYres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetYres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetYres, COMDAT
; _this$ = ecx

; 46   : 	int	targetYres()	{ return height; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetYres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetYres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?targetXres@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?targetXres@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::targetXres, COMDAT
; _this$ = ecx

; 45   : 	int targetXres()	{ return width; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]
	mov	esp, ebp
	pop	ebp
	ret	0
?targetXres@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::targetXres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXXZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXXZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@YAXPAPAVTextureHandle@@0AAU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<TextureHandle *> > >
	add	esp, 12					; 0000000cH

; 1481 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXPAPAVTextureHandle@@0@Z ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@IAEXXZ ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::_Tidy

; 901  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::~vector<TextureHandle *,std::allocator<TextureHandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ PROC ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ; std::allocator<TextureHandle *>::allocator<TextureHandle *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVTextureHandle@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >

; 686  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ENDP ; std::vector<TextureHandle *,std::allocator<TextureHandle *> >::vector<TextureHandle *,std::allocator<TextureHandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVTextureHandle@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVTextureHandle@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVTextureHandle@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TextureHandle *> >::_Vector_val<std::_Simple_types<TextureHandle *> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVTextureHandle@@V?$allocator@PAVTextureHandle@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVTextureHandle@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >::_Vector_alloc<0,std::_Vec_base_types<TextureHandle *,std::allocator<TextureHandle *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVTextureHandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVTextureHandle@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<TextureHandle *> >::_Vector_val<std::_Simple_types<TextureHandle *> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 489  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVTextureHandle@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<TextureHandle *> >::_Vector_val<std::_Simple_types<TextureHandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ; std::allocator<TextureHandle *>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAEXPAPAVTextureHandle@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ; std::allocator<TextureHandle *>::allocator<TextureHandle *>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAVTextureHandle@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<TextureHandle *> >::_Wrap_alloc<std::allocator<TextureHandle *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z PROC ; std::allocator<TextureHandle *>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVTextureHandle@@@std@@QAEXPAPAVTextureHandle@@I@Z ENDP ; std::allocator<TextureHandle *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ PROC	; std::allocator<TextureHandle *>::allocator<TextureHandle *>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVTextureHandle@@@std@@QAE@XZ ENDP	; std::allocator<TextureHandle *>::allocator<TextureHandle *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?ObjectDetailLevel@PlayerOptionsClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ObjectDetailLevel@PlayerOptionsClass@@QAEMXZ PROC	; PlayerOptionsClass::ObjectDetailLevel, COMDAT
; _this$ = ecx

; 132  : 	float ObjectDetailLevel (void)							{ return ObjDetailLevel; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectDetailLevel@PlayerOptionsClass@@QAEMXZ ENDP	; PlayerOptionsClass::ObjectDetailLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\ui\include\logbook.h
;	COMDAT ?Callsign@LogBookData@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Callsign@LogBookData@@QAEPADXZ PROC			; LogBookData::Callsign, COMDAT
; _this$ = ecx

; 171  : 	_TCHAR *Callsign(void)							{return Pilot.Callsign;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 21					; 00000015H
	mov	esp, ebp
	pop	ebp
	ret	0
?Callsign@LogBookData@@QAEPADXZ ENDP			; LogBookData::Callsign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tchar.h
;	COMDAT __tcsspnp
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcsspnp PROC						; COMDAT

; 1876 : _Check_return_ __inline _PC _tcsspnp(_In_ _CPC _s1,_In_ _CPC _s2) {return (_PC)_mbsspnp((_CPUC)_s1,(_CPUC)_s2);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR __s1$[ebp]
	push	ecx
	call	__mbsspnp
	add	esp, 8
	pop	ebp
	ret	0
__tcsspnp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 442  : 		{	// set locale to argument (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 443  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 437  : 		{	// synchronize with external agent (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 438  : 		return (0);

	xor	eax, eax

; 439  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 432  : 		{	// offer buffer to external agent (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 433  : 		return (this);

	mov	eax, DWORD PTR _this$[ebp]

; 434  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 427  : 		{	// change to specified position, according to mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 		return (streampos(_BADOFF));

	mov	eax, DWORD PTR ?_BADOFF@std@@3_JB+4
	push	eax
	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$fpos@H@std@@QAE@_J@Z		; std::fpos<int>::fpos<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 429  : 		}

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 421  : 		{	// change position by offset, according to way and mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		return (streampos(_BADOFF));

	mov	eax, DWORD PTR ?_BADOFF@std@@3_JB+4
	push	eax
	mov	ecx, DWORD PTR ?_BADOFF@std@@3_JB
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$fpos@H@std@@QAE@_J@Z		; std::fpos<int>::fpos<int>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 423  : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Copied$ = -28						; size = 8
__Size$ = -20						; size = 8
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 391  : 		{	// put _Count characters to stream

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 		streamsize _Size, _Copied;
; 393  : 
; 394  : 		for (_Copied = 0; 0 < _Count; )

	xorpd	xmm0, xmm0
	movlpd	QWORD PTR __Copied$[ebp], xmm0
$LN7@xsputn:
	cmp	DWORD PTR __Count$[ebp+4], 0
	jl	$LN6@xsputn
	jg	SHORT $LN10@xsputn
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	$LN6@xsputn
$LN10@xsputn:

; 395  : 			if (0 < (_Size = _Pnavail()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
	mov	DWORD PTR __Size$[ebp], eax
	mov	DWORD PTR __Size$[ebp+4], edx
	cmp	DWORD PTR __Size$[ebp+4], 0
	jl	SHORT $LN5@xsputn
	jg	SHORT $LN11@xsputn
	cmp	DWORD PTR __Size$[ebp], 0
	jbe	SHORT $LN5@xsputn
$LN11@xsputn:

; 396  : 				{	// copy to write buffer
; 397  : 				if (_Count < _Size)

	mov	eax, DWORD PTR __Count$[ebp+4]
	cmp	eax, DWORD PTR __Size$[ebp+4]
	jg	SHORT $LN4@xsputn
	jl	SHORT $LN12@xsputn
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@xsputn
$LN12@xsputn:

; 398  : 					_Size = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR __Size$[ebp+4], eax
$LN4@xsputn:

; 399  : 				_Traits::copy(pptr(), _Ptr, (size_t)_Size);

	mov	ecx, DWORD PTR __Size$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 400  : 				_Ptr += _Size;

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax

; 401  : 				_Copied += _Size;

	mov	ecx, DWORD PTR __Copied$[ebp]
	add	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Copied$[ebp+4]
	adc	edx, DWORD PTR __Size$[ebp+4]
	mov	DWORD PTR __Copied$[ebp], ecx
	mov	DWORD PTR __Copied$[ebp+4], edx

; 402  : 				_Count -= _Size;

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Size$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp+4]
	sbb	ecx, DWORD PTR __Size$[ebp+4]
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 403  : 				pbump((int)_Size);

	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump

; 404  : 				}
; 405  : 			else if (_Traits::eq_int_type(_Traits::eof(),

	jmp	SHORT $LN3@xsputn
$LN5@xsputn:

; 406  : 				overflow(_Traits::to_int_type(*_Ptr))))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR $T2[ebp], eax
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@xsputn

; 407  : 				break;	// single character put failed, quit

	jmp	SHORT $LN6@xsputn

; 408  : 			else

	jmp	SHORT $LN3@xsputn
$LN2@xsputn:

; 409  : 				{	// count character successfully put
; 410  : 				++_Ptr;

	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx

; 411  : 				++_Copied;

	mov	edx, DWORD PTR __Copied$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR __Copied$[ebp+4]
	adc	eax, 0
	mov	DWORD PTR __Copied$[ebp], edx
	mov	DWORD PTR __Copied$[ebp+4], eax

; 412  : 				--_Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR __Count$[ebp+4]
	sbb	edx, 0
	mov	DWORD PTR __Count$[ebp], ecx
	mov	DWORD PTR __Count$[ebp+4], edx
$LN3@xsputn:

; 413  : 				}

	jmp	$LN7@xsputn
$LN6@xsputn:

; 414  : 
; 415  : 		return (_Copied);

	mov	eax, DWORD PTR __Copied$[ebp]
	mov	edx, DWORD PTR __Copied$[ebp+4]

; 416  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Copied$ = -28						; size = 8
__Size$ = -20						; size = 8
$T1 = -12						; size = 4
__Meta$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 362  : 		{	// get _Count characters from stream

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 		int_type _Meta;
; 364  : 		streamsize _Size, _Copied;
; 365  : 
; 366  : 		for (_Copied = 0; 0 < _Count; )

	xorpd	xmm0, xmm0
	movlpd	QWORD PTR __Copied$[ebp], xmm0
$LN7@xsgetn:
	cmp	DWORD PTR __Count$[ebp+4], 0
	jl	$LN6@xsgetn
	jg	SHORT $LN10@xsgetn
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	$LN6@xsgetn
$LN10@xsgetn:

; 367  : 			if (0 < (_Size = _Gnavail()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
	mov	DWORD PTR __Size$[ebp], eax
	mov	DWORD PTR __Size$[ebp+4], edx
	cmp	DWORD PTR __Size$[ebp+4], 0
	jl	SHORT $LN5@xsgetn
	jg	SHORT $LN11@xsgetn
	cmp	DWORD PTR __Size$[ebp], 0
	jbe	SHORT $LN5@xsgetn
$LN11@xsgetn:

; 368  : 				{	// copy from read buffer
; 369  : 				if (_Count < _Size)

	mov	eax, DWORD PTR __Count$[ebp+4]
	cmp	eax, DWORD PTR __Size$[ebp+4]
	jg	SHORT $LN4@xsgetn
	jl	SHORT $LN12@xsgetn
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@xsgetn
$LN12@xsgetn:

; 370  : 					_Size = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR __Size$[ebp+4], eax
$LN4@xsgetn:

; 371  : 				_Traits::copy(_Ptr, gptr(), (size_t)_Size);

	mov	ecx, DWORD PTR __Size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
	push	eax
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 372  : 				_Ptr += _Size;

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax

; 373  : 				_Copied += _Size;

	mov	ecx, DWORD PTR __Copied$[ebp]
	add	ecx, DWORD PTR __Size$[ebp]
	mov	edx, DWORD PTR __Copied$[ebp+4]
	adc	edx, DWORD PTR __Size$[ebp+4]
	mov	DWORD PTR __Copied$[ebp], ecx
	mov	DWORD PTR __Copied$[ebp+4], edx

; 374  : 				_Count -= _Size;

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, DWORD PTR __Size$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp+4]
	sbb	ecx, DWORD PTR __Size$[ebp+4]
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 375  : 				gbump((int)_Size);

	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
	jmp	SHORT $LN3@xsgetn
$LN5@xsgetn:

; 376  : 				}
; 377  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	DWORD PTR __Meta$[ebp], eax
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR __Meta$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@xsgetn

; 378  : 				break;	// end of file, quit

	jmp	SHORT $LN6@xsgetn

; 379  : 			else

	jmp	SHORT $LN3@xsgetn
$LN2@xsgetn:

; 380  : 				{	// get a single character
; 381  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

	lea	ecx, DWORD PTR __Meta$[ebp]
	push	ecx
	call	?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
	add	esp, 4
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR __Ptr$[ebp], eax

; 382  : 				++_Copied;

	mov	ecx, DWORD PTR __Copied$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR __Copied$[ebp+4]
	adc	edx, 0
	mov	DWORD PTR __Copied$[ebp], ecx
	mov	DWORD PTR __Copied$[ebp+4], edx

; 383  : 				--_Count;

	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Count$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx
$LN3@xsgetn:

; 384  : 				}

	jmp	$LN7@xsgetn
$LN6@xsgetn:

; 385  : 
; 386  : 		return (_Copied);

	mov	eax, DWORD PTR __Copied$[ebp]
	mov	edx, DWORD PTR __Copied$[ebp+4]

; 387  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 355  : 		{	// get a character from stream, point past it

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 356  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())
; 357  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	DWORD PTR $T2[ebp], eax
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@uflow
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@uflow
$LN3@uflow:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
	push	eax
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	mov	DWORD PTR tv79[ebp], eax
$LN4@uflow:
	mov	eax, DWORD PTR tv79[ebp]

; 358  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 350  : 		{	// get a character from stream, but don't point past it

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 351  : 		return (_Traits::eof());

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof

; 352  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 345  : 		{	// return count of input characters

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 		return (0);

	xor	eax, eax
	xor	edx, edx

; 347  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 340  : 		{	// put a character back to stream (always fail)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 341  : 		return (_Traits::eof());

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof

; 342  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 335  : 		{	// put a character to stream (always fail)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 336  : 		return (_Traits::eof());

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof

; 337  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 312  : 		{	// initialize buffer parameters for no buffers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 313  : 		_IGfirst = &_Gfirst;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 314  : 		_IPfirst = &_Pfirst;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 315  : 		_IGnext = &_Gnext;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 316  : 		_IPnext = &_Pnext;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 317  : 		_IGcount = &_Gcount;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 318  : 		_IPcount = &_Pcount;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 319  : 		setp(0, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 320  : 		setg(0, 0, 0);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 321  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 307  : 		{	// count number of available positions in write buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 		return (*_IPnext != 0 ? *_IPcount : 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Pnavail
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@Pnavail
$LN3@Pnavail:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Pnavail:
	mov	eax, DWORD PTR tv69[ebp]
	cdq

; 309  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 301  : 		{	// increment current position in write buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		--*_IPcount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [ecx], edx

; 303  : 		return ((*_IPnext)++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR tv76[ebp]

; 304  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 294  : 		{	// set pointers for write buffer, extended version

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 		*_IPfirst = _First;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx

; 296  : 		*_IPnext = _Next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR [ecx], edx

; 297  : 		*_IPcount = (int)(_Last - _Next);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __Next$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx], eax

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 287  : 		{	// set pointers for write buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 288  : 		*_IPfirst = _First;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx

; 289  : 		*_IPnext = _First;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx

; 290  : 		*_IPcount = (int)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [edx], eax

; 291  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 281  : 		{	// alter current position in write buffer by _Off

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 		*_IPcount -= _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [ecx], edx

; 283  : 		*_IPnext += _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax], ecx

; 284  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 276  : 		{	// count number of available elements in read buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		return (*_IGnext != 0 ? *_IGcount : 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Gnavail
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@Gnavail
$LN3@Gnavail:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Gnavail:
	mov	eax, DWORD PTR tv69[ebp]
	cdq

; 278  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 264  : 		{	// increment current position in read buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 		--*_IGcount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [ecx], edx

; 266  : 		return ((*_IGnext)++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR tv76[ebp]

; 267  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 253  : 		{	// return end of write buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 254  : 		return (*_IPnext + *_IPcount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 255  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 246  : 		{	// set pointers for read buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 		*_IGfirst = _First;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx

; 248  : 		*_IGnext = _Next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR [ecx], edx

; 249  : 		*_IGcount = (int)(_Last - _Next);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __Next$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx], eax

; 250  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 240  : 		{	// alter current position in read buffer by _Off

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 		*_IGcount -= _Off;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [ecx], edx

; 242  : 		*_IGnext += _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [eax], ecx

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 235  : 		{	// return end of read buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 		return (*_IGnext + *_IGcount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 237  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 230  : 		{	// return current position in write buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		return (*_IPnext);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [ecx]

; 232  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT
; _this$ = ecx

; 225  : 		{	// return beginning of write buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 		return (*_IPfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx]

; 227  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 220  : 		{	// return current position in read buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 		return (*_IGnext);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx]

; 222  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 215  : 		{	// return beginning of read buffer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 216  : 		return (*_IGfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]

; 217  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 210  : 		{	// clear the thread lock (overridden by basic_filebuf)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 206  : 		{	// set the thread lock (overridden by basic_filebuf)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 201  : 		{	// put _Count characters from array beginning at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		return (xsputn(_Ptr, _Count));

	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 203  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
tv85 = -20						; size = 8
tv78 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 193  : 		{	// put a character

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 194  : 		return (0 < _Pnavail()
; 195  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 196  : 			: overflow(_Traits::to_int_type(_Ch)));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
	mov	DWORD PTR tv85[ebp], eax
	mov	DWORD PTR tv85[ebp+4], edx
	cmp	DWORD PTR tv85[ebp+4], 0
	jl	SHORT $LN3@sputc
	jg	SHORT $LN5@sputc
	cmp	DWORD PTR tv85[ebp], 0
	jbe	SHORT $LN3@sputc
$LN5@sputc:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	cl, BYTE PTR __Ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN4@sputc
$LN3@sputc:
	lea	eax, DWORD PTR __Ch$[ebp]
	push	eax
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv78[ebp], eax
$LN4@sputc:
	mov	eax, DWORD PTR tv78[ebp]

; 197  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 140  : 		{	// synchronize with external agent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		return (sync());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 142  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 79   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 80   : 		_DELETE_CRT(_Plocale);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@basic_stre
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_Glocale@std@@QAEPAXI@Z
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@basic_stre
$LN3@basic_stre:
	mov	DWORD PTR tv70[ebp], 0
$LN1@basic_stre:

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
tv71 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 26   : 		{	// construct with no buffers

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@basic_stre
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0locale@std@@QAE@XZ			; std::locale::locale
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@basic_stre
$LN3@basic_stre:
	mov	DWORD PTR tv71[ebp], 0
$LN4@basic_stre:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [ecx+52], edx

; 27   : 		_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 28   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
	mov	esp, ebp
	pop	ebp
	ret	0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 8
	call	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 8
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
__Ok$2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 585  : 		{	// flush output stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		if (_Myios::rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	test	eax, eax
	je	SHORT $LN2@flush

; 587  : 			{	// buffer exists, flush it
; 588  : 			const sentry _Ok(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$2[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 589  : 
; 590  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

	lea	ecx, DWORD PTR __Ok$2[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
	cmp	eax, -1
	je	SHORT $LN1@flush
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	ecx, eax
	call	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
	cmp	eax, -1
	jne	SHORT $LN1@flush

; 591  : 				_Myios::setstate(ios_base::badbit);	// sync failed

	push	0
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@flush:

; 592  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Ok$2[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
$LN2@flush:

; 593  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 594  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
	lea	ecx, DWORD PTR __Ok$2[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv152 = -36						; size = 4
tv151 = -32						; size = 4
tv150 = -28						; size = 4
_this$ = -24						; size = 4
tv149 = -17						; size = 1
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 170  : 		{	// perform any wrapup

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 172  : 		if (this->good() && this->flags() & ios_base::unitbuf)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?good@ios_base@std@@QBE_NXZ		; std::ios_base::good
	mov	BYTE PTR tv149[ebp], al
	movzx	eax, BYTE PTR tv149[ebp]
	test	eax, eax
	je	SHORT $LN2@Osfx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	and	eax, 2
	je	SHORT $LN2@Osfx

; 173  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR tv151[ebp]
	call	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
	mov	DWORD PTR tv152[ebp], eax
	cmp	DWORD PTR tv152[ebp], -1
	jne	SHORT $LN2@Osfx

; 174  : 				_Myios::setstate(ios_base::badbit);

	push	0
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN2@Osfx:
	jmp	SHORT $LN6@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 175  : 		_CATCH_ALL
; 176  : 		_CATCH_END

	mov	eax, $LN9@Osfx
	ret	0
$LN6@Osfx:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN4@Osfx
$LN9@Osfx:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN4@Osfx:

; 177  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
; _this$ = ecx

; 91   : 		{	// compiler bug workaround

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 87   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-8]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-8]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-8]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx-12], eax

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 48   : 	explicit __CLR_OR_THIS_CALL basic_ostream(

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	cmp	DWORD PTR _$initVBases$[ebp], 0
	je	SHORT $LN1@basic_ostr
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
$LN1@basic_ostr:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax-4], edx

; 49   : 		basic_streambuf<_Elem, _Traits> *_Strbuf,
; 50   : 
; 51   : 		bool _Isstd = false)
; 52   : 		{	// construct from a stream buffer pointer
; 53   : 		_Myios::init(_Strbuf, _Isstd);

	movzx	edx, BYTE PTR __Isstd$[ebp]
	push	edx
	mov	eax, DWORD PTR __Strbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 54   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@basic_ostr
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
	ret	0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 187  : 	__CLR_OR_THIS_CALL basic_ios()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ios_base@std@@IAE@XZ			; std::ios_base::ios_base
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 188  : 		{	// default constructor, do nothing
; 189  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 174  : 		{	// initialize with stream buffer pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		_Init();	// initialize ios_base

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@ios_base@std@@IAEXXZ		; std::ios_base::_Init

; 176  : 		_Mystrbuf = _Strbuf;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Strbuf$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 177  : 		_Tiestr = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0

; 178  : 		_Fillch = widen(' ');

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+64], al

; 179  : 
; 180  : 		if (_Mystrbuf == 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN2@init

; 181  : 			setstate(badbit);

	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN2@init:

; 182  : 
; 183  : 		if (_Isstd)

	movzx	eax, BYTE PTR __Isstd$[ebp]
	test	eax, eax
	je	SHORT $LN3@init

; 184  : 			_Addstd(this);	// special handling for standard streams

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Addstd@ios_base@std@@SAXPAV12@@Z	; std::ios_base::_Addstd
	add	esp, 4
$LN3@init:

; 185  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
__Ctype_fac$ = -32					; size = 4
$T2 = -28						; size = 4
tv79 = -24						; size = 4
tv80 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 134  : 		{	// convert _Byte to character using imbued locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv79[ebp]
	push	edx
	call	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
	add	esp, 4
	mov	DWORD PTR __Ctype_fac$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 136  : 		return (_Ctype_fac.widen(_Byte));

	movzx	eax, BYTE PTR __Byte$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ctype_fac$[ebp]
	call	?widen@?$ctype@D@std@@QBEDD@Z		; std::ctype<char>::widen

; 137  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 116  : 		{	// return fill character

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		return (_Fillch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+64]

; 118  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 95   : 		{	// return stream buffer pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Mystrbuf);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 83   : 		{	// return tie pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 		return (_Tiestr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 85   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 64   : 		{	// merge _State into state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		if (_State != goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	je	SHORT $LN2@setstate

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

	movzx	eax, BYTE PTR __Reraise$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?rdstate@ios_base@std@@QBEHXZ		; std::ios_base::rdstate
	or	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
$LN2@setstate:

; 67   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 52   : 		{	// set state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		ios_base::clear((iostate)(_Mystrbuf == 0
; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN3@clear
	mov	ecx, DWORD PTR __State$[ebp]
	or	ecx, 4
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@clear
$LN3@clear:
	mov	edx, DWORD PTR __State$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN4@clear:
	movzx	eax, BYTE PTR __Reraise$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear

; 55   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
; _this$ = ecx

; 47   : 		{	// compiler bug workaround

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1, COMDAT
; _this$ = ecx

; 43   : 		{	// compiler bug workaround

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 39   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 40   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ios_base@std@@UAE@XZ			; std::ios_base::~ios_base
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ios_base@std@@UAE@XZ			; std::ios_base::~ios_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
tv80 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 546  : 		{	// initialize a new ios_base

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 		_Ploc = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 548  : 		_Stdstr = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 549  : 		_Except = goodbit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 550  : 		_Fmtfl = (fmtflags)(skipws | dec);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 513			; 00000201H

; 551  : 		_Prec = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 6
	mov	DWORD PTR [ecx+28], 0

; 552  : 		_Wide = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0

; 553  : 		_Arr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 554  : 		_Calls = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 555  : 		clear(goodbit);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@ios_base@std@@QAEXH@Z		; std::ios_base::clear

; 556  : 		_Ploc = _NEW_CRT locale;

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@Init
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0locale@std@@QAE@XZ			; std::locale::locale
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@Init
$LN3@Init:
	mov	DWORD PTR tv80[ebp], 0
$LN4@Init:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR [edx+48], eax

; 557  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 541  : 	__CLR_OR_THIS_CALL ios_base()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 542  : 		{	// default constructor
; 543  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 531  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 532  : 		_Ios_base_dtor(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
	add	esp, 4

; 533  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 442  : 		{	// get locale

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 443  : 		return (*_Ploc);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0locale@std@@QAE@ABV01@@Z		; std::locale::locale
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 444  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Oldwidth$ = -12					; size = 8
_this$ = -4						; size = 4
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 435  : 		{	// set width to argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 		streamsize _Oldwidth = _Wide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR __Oldwidth$[ebp], ecx
	mov	edx, DWORD PTR [eax+36]
	mov	DWORD PTR __Oldwidth$[ebp+4], edx

; 437  : 		_Wide = _Newwidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newwidth$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR __Newwidth$[ebp+4]
	mov	DWORD PTR [eax+36], edx

; 438  : 		return (_Oldwidth);

	mov	eax, DWORD PTR __Oldwidth$[ebp]
	mov	edx, DWORD PTR __Oldwidth$[ebp+4]

; 439  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 430  : 		{	// return width

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 431  : 		return (_Wide);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [ecx+36]

; 432  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 385  : 		{	// return format flags

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 		return (_Fmtfl);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 387  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 348  : 		{	// test if no state bits are set

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 349  : 		return (rdstate() == goodbit);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?rdstate@ios_base@std@@QBEHXZ		; std::ios_base::rdstate
	test	eax, eax
	jne	SHORT $LN3@good
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@good
$LN3@good:
	mov	DWORD PTR tv67[ebp], 0
$LN4@good:
	mov	al, BYTE PTR tv67[ebp]

; 350  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 326  : 		{	// return stream state

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 327  : 		return (_Mystate);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 328  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 316  : 		{	// set state to argument

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 		clear(_State, false);

	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear

; 318  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -88						; size = 20
$T2 = -68						; size = 20
$T3 = -48						; size = 20
$T4 = -28						; size = 8
$T5 = -20						; size = 8
$T6 = -12						; size = 8
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 301  : 		{	// set state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		_Mystate = (iostate)(_State & _Statmask);

	mov	eax, DWORD PTR __State$[ebp]
	and	eax, 23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 303  : 		if ((_Mystate & _Except) == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN8@clear
	jmp	$LN10@clear
$LN8@clear:

; 304  : 			;
; 305  : 		else if (_Reraise)

	movzx	edx, BYTE PTR __Reraise$[ebp]
	test	edx, edx
	je	SHORT $LN6@clear

; 306  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	jmp	$LN10@clear
$LN6@clear:

; 307  : 		else if (_Mystate & _Except & badbit)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	and	edx, DWORD PTR [ecx+16]
	and	edx, 4
	je	SHORT $LN4@clear

; 308  : 			_THROW_NCEE(failure, "ios_base::badbit set");

	push	1
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
	push	OFFSET __TI4?AVfailure@ios_base@std@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	jmp	SHORT $LN10@clear
$LN4@clear:

; 309  : 		else if (_Mystate & _Except & failbit)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, DWORD PTR [eax+16]
	and	ecx, 2
	je	SHORT $LN2@clear

; 310  : 			_THROW_NCEE(failure, "ios_base::failbit set");

	push	1
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	call	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
	push	OFFSET __TI4?AVfailure@ios_base@std@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8

; 311  : 		else

	jmp	SHORT $LN10@clear
$LN2@clear:

; 312  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

	push	1
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ; std::make_error_code
	add	esp, 8
	push	eax
	push	OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
	push	OFFSET __TI4?AVfailure@ios_base@std@@
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	__CxxThrowException@8
$LN10@clear:

; 313  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1failure@ios_base@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0system_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7failure@ios_base@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1system_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Errcode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::system_error::system_error
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1system_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0runtime_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7system_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?_Makestr@system_error@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Makestr@system_error@std@@AAEXXZ PROC			; std::system_error::_Makestr, COMDAT
; _this$ = ecx

; 561  : 		{	// compose error message

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 562  : //		_Mymes = this->runtime_error::what();
; 563  : //		if (!_Mymes.empty())
; 564  : //			_Mymes.append(": ");
; 565  : //		_Mymes.append(_Mycode.message());
; 566  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Makestr@system_error@std@@AAEXXZ ENDP			; std::system_error::_Makestr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::system_error::system_error, COMDAT
; _this$ = ecx

; 507  : 		{	// construct from error code and message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7system_error@std@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Errcode$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR __Errcode$[ebp+4]
	mov	DWORD PTR [edx+16], ecx

; 508  : 		_Makestr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Makestr@system_error@std@@AAEXXZ	; std::system_error::_Makestr

; 509  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1runtime_error@std@@UAE@XZ
__ehhandler$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::system_error::system_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 218  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 219  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 674  : 	{	// get iostream_category

	push	ebp
	mov	ebp, esp

; 675  : 	return (_Error_objects<int>::_Iostream_object);

	mov	eax, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object

; 676  : 	}

	pop	ebp
	ret	0
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z PROC ; std::make_error_code, COMDAT

; 464  : 	{	// make an error_code

	push	ebp
	mov	ebp, esp

; 465  : 	return (error_code((int)_Errno, iostream_category()));

	call	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
	push	eax
	mov	eax, DWORD PTR __Errno$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 466  : 	}

	pop	ebp
	ret	0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@31@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -48						; size = 12
$T3 = -36						; size = 4
__Lock$4 = -32						; size = 4
__Id$5 = -28						; size = 4
__Pfmod$6 = -24						; size = 4
__Pf$7 = -20						; size = 4
__Psave$8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 543  : 	{	// get facet reference from locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 544  :  #if _NO_LOCALES
; 545  : 	static _Wrap_facet<_Facet> _Wfac;
; 546  : 	return (*(_Facet *)&_Wfac);
; 547  : 
; 548  :  #else /* _NO_LOCALES */
; 549  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

	push	0
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 550  : 		const locale::facet *_Psave =
; 551  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

	mov	eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
	mov	DWORD PTR __Psave$8[ebp], eax

; 552  : 
; 553  : 		size_t _Id = _Facet::id;

	mov	ecx, OFFSET ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
	call	??Bid@locale@std@@QAEIXZ		; std::locale::id::operator unsigned int
	mov	DWORD PTR __Id$5[ebp], eax

; 554  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

	mov	ecx, DWORD PTR __Id$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Loc$[ebp]
	call	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
	mov	DWORD PTR __Pf$7[ebp], eax

; 555  : 
; 556  : 		if (_Pf != 0)

	cmp	DWORD PTR __Pf$7[ebp], 0
	je	SHORT $LN6@use_facet
	jmp	SHORT $LN5@use_facet
$LN6@use_facet:

; 557  : 			;	// got facet from locale
; 558  : 		else if (_Psave != 0)

	cmp	DWORD PTR __Psave$8[ebp], 0
	je	SHORT $LN4@use_facet

; 559  : 			_Pf = _Psave;	// lazy facet already allocated

	mov	edx, DWORD PTR __Psave$8[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx
	jmp	SHORT $LN5@use_facet
$LN4@use_facet:

; 560  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

	mov	eax, DWORD PTR __Loc$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Psave$8[ebp]
	push	ecx
	call	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN2@use_facet

; 561  : 
; 562  :  #if _HAS_EXCEPTIONS
; 563  : 
; 564  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

	push	OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0bad_cast@std@@QAE@PBD@Z		; std::bad_cast::bad_cast
	push	OFFSET __TI2?AVbad_cast@std@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 565  : 
; 566  :  #else /* _HAS_EXCEPTIONS */
; 567  : 			abort();	// lazy disallowed
; 568  :  #endif /* _HAS_EXCEPTIONS */
; 569  : 
; 570  : 		else

	jmp	SHORT $LN5@use_facet
$LN2@use_facet:

; 571  : 			{	// queue up lazy facet for destruction
; 572  : 			_Pf = _Psave;

	mov	eax, DWORD PTR __Psave$8[ebp]
	mov	DWORD PTR __Pf$7[ebp], eax

; 573  : 			_Facetptr<_Facet>::_Psave = _Psave;

	mov	ecx, DWORD PTR __Psave$8[ebp]
	mov	DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::ctype<char> >::_Psave

; 574  : 
; 575  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

	mov	edx, DWORD PTR __Psave$8[ebp]
	mov	DWORD PTR __Pfmod$6[ebp], edx

; 576  : 			_Pfmod->_Incref();

	mov	eax, DWORD PTR __Pfmod$6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Pfmod$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 577  : 
; 578  :  #if defined(_M_CEE)
; 579  : 			_Facet_Register_m(_Pfmod);
; 580  : 
; 581  :  #else /* defined(_M_CEE) */
; 582  : 			_Facet_Register(_Pfmod);

	mov	ecx, DWORD PTR __Pfmod$6[ebp]
	push	ecx
	call	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
	add	esp, 4
$LN5@use_facet:

; 583  :  #endif /* defined(_M_CEE) */
; 584  : 			}
; 585  : 
; 586  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

	mov	edx, DWORD PTR __Pf$7[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	eax, DWORD PTR $T3[ebp]
$LN8@use_facet:

; 587  : 	_END_LOCK()
; 588  :  #endif /* _NO_LOCALES */
; 589  : 	}	// end of use_facet body

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
	lea	ecx, DWORD PTR __Lock$4[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ctype@D@std@@MAE@XZ		; std::ctype<char>::~ctype<char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2545 : 		{	// narrow elements in [_First, _Last) to chars

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2546 : 		_DEBUG_RANGE(_First, _Last);
; 2547 : 		_DEBUG_POINTER(_Dest);
; 2548 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2549 : 		return (_Last);

	mov	eax, DWORD PTR __Last$[ebp]

; 2550 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2539 : 		{	// narrow char

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2540 : 		return (_Ch);

	mov	al, BYTE PTR __Ch$[ebp]

; 2541 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2531 : 		{	// widen chars in [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2532 : 		_DEBUG_RANGE(_First, _Last);
; 2533 : 		_DEBUG_POINTER(_Dest);
; 2534 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2535 : 		return (_Last);

	mov	eax, DWORD PTR __Last$[ebp]

; 2536 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2525 : 		{	// widen char

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2526 : 		return (_Byte);

	mov	al, BYTE PTR __Byte$[ebp]

; 2527 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2517 : 		{	// convert [_First, _Last) in place to upper case

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2518 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2519 : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@do_toupper
$LN2@do_toupper:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 1
	mov	DWORD PTR __First$[ebp], eax
$LN3@do_toupper:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@do_toupper

; 2520 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	__Toupper
	add	esp, 8
	mov	edx, DWORD PTR __First$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@do_toupper
$LN1@do_toupper:

; 2521 : 		return ((const _Elem *)_First);

	mov	eax, DWORD PTR __First$[ebp]

; 2522 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2511 : 		{	// convert element to upper case

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2512 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	call	__Toupper
	add	esp, 8

; 2513 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2503 : 		{	// convert [_First, _Last) in place to lower case

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2504 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2505 : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@do_tolower
$LN2@do_tolower:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 1
	mov	DWORD PTR __First$[ebp], eax
$LN3@do_tolower:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@do_tolower

; 2506 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	__Tolower
	add	esp, 8
	mov	edx, DWORD PTR __First$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@do_tolower
$LN1@do_tolower:

; 2507 : 		return ((const _Elem *)_First);

	mov	eax, DWORD PTR __First$[ebp]

; 2508 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2497 : 		{	// convert element to lower case

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2498 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	call	__Tolower
	add	esp, 8

; 2499 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2487 : 		{	// free any allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2488 : 		if (0 < _Ctype._Delfl)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jle	SHORT $LN3@Tidy

; 2489 : 			free((void *)_Ctype._Table);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_free
	add	esp, 4
	jmp	SHORT $LN2@Tidy
$LN3@Tidy:

; 2490 : 		else if (_Ctype._Delfl < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jge	SHORT $LN2@Tidy

; 2491 : 			delete[] (void *)_Ctype._Table;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@Tidy:

; 2492 : 
; 2493 : 		free((void *)_Ctype._LocaleName);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_free
	add	esp, 4

; 2494 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2482 : 		{	// initialize from _Lobj

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2483 : 		_Ctype = _Lobj._Getctype();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2484 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2477 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ctype@D@std@@6B@

; 2478 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$ctype@D@std@@IAEXXZ		; std::ctype<char>::_Tidy

; 2479 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ctype_base@std@@UAE@XZ		; std::ctype_base::~ctype_base
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 4
tv91 = -32						; size = 4
tv128 = -28						; size = 4
tv85 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2454 : 		{	// return locale category mask and construct standard facet

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T5[ebp], 0

; 2455 : 		if (_Ppf != 0 && *_Ppf == 0)

	cmp	DWORD PTR __Ppf$[ebp], 0
	je	$LN1@Getcat
	mov	eax, DWORD PTR __Ppf$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN1@Getcat

; 2456 : 			*_Ppf = _NEW_CRT ctype<_Elem>(
; 2457 : 				_Locinfo(_Ploc->c_str()));

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@Getcat
	push	0
	mov	ecx, DWORD PTR __Ploc$[ebp]
	call	?c_str@locale@std@@QBEPBDXZ		; std::locale::c_str
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_Locinfo@std@@QAE@PBD@Z		; std::_Locinfo::_Locinfo
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv91[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T5[ebp]
	or	edx, 1
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<char>::ctype<char>
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@Getcat
$LN4@Getcat:
	mov	DWORD PTR tv85[ebp], 0
$LN5@Getcat:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR __Ppf$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	and	ecx, 1
	je	SHORT $LN1@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN1@Getcat:

; 2458 : 		return (_X_CTYPE);

	mov	eax, 2

; 2459 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	and	eax, 1
	je	$LN8@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN8@Getcat:
	ret	0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2448 : 		{	// construct from current locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ctype_base@std@@QAE@I@Z		; std::ctype_base::ctype_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7?$ctype@D@std@@6B@

; 2449 : 		_Init(_Lobj);

	mov	edx, DWORD PTR __Lobj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<char>::_Init

; 2450 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1ctype_base@std@@UAE@XZ		; std::ctype_base::~ctype_base
__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2401 : 		{	// widen char

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2402 : 		return (do_widen(_Byte));

	movzx	eax, BYTE PTR __Byte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 2403 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ctype_base@std@@UAE@XZ		; std::ctype_base::~ctype_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2089 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 2090 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
	mov	esp, ebp
	pop	ebp
	ret	0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2085 : 		{	// default constructor

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0facet@locale@std@@IAE@I@Z		; std::locale::facet::facet
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@

; 2086 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv83 = -20						; size = 4
__Ptr$1 = -16						; size = 4
__Facptr$ = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 449  : 		{	// look up a facet in locale object

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Id$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN6@Getfacet
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Id$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN7@Getfacet
$LN6@Getfacet:
	mov	DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR __Facptr$[ebp], edx

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

	cmp	DWORD PTR __Facptr$[ebp], 0
	jne	SHORT $LN2@Getfacet
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN3@Getfacet
$LN2@Getfacet:

; 453  : 			return (_Facptr);	// found facet or not transparent

	mov	eax, DWORD PTR __Facptr$[ebp]
	jmp	SHORT $LN4@Getfacet

; 454  : 		else

	jmp	SHORT $LN4@Getfacet
$LN3@Getfacet:

; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();

	call	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
	mov	DWORD PTR __Ptr$1[ebp], eax

; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale

	mov	eax, DWORD PTR __Ptr$1[ebp]
	mov	ecx, DWORD PTR __Id$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN8@Getfacet
	mov	edx, DWORD PTR __Ptr$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Id$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN9@Getfacet
$LN8@Getfacet:
	mov	DWORD PTR tv83[ebp], 0
$LN9@Getfacet:
	mov	eax, DWORD PTR tv83[ebp]
$LN4@Getfacet:

; 460  : 			}
; 461  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 444  : 		{	// return locale name as NTBS

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@c_str
	mov	DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN4@c_str
$LN3@c_str:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 24					; 00000018H
	call	?c_str@?$_Yarn@D@std@@QBEPBDXZ		; std::_Yarn<char>::c_str
	mov	DWORD PTR tv70[ebp], eax
$LN4@c_str:
	mov	eax, DWORD PTR tv70[ebp]

; 446  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 421  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 422  : 		if (_Ptr != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@locale

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@locale
	push	1
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN2@locale
$LN4@locale:
	mov	DWORD PTR tv84[ebp], 0
$LN2@locale:

; 424  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 329  : 		{	// construct from current locale

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	call	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z	; std::locale::_Init
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 330  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 324  : 		_Ptr->_Incref();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 325  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 165  : 			{	// ensure that derived classes can be destroyed properly

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 166  : 			}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Facet_base@std@@UAE@XZ		; std::_Facet_base::~_Facet_base
	mov	esp, ebp
	pop	ebp
	ret	0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 159  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0facet@locale@std@@IAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Facet_base@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 160  : 			{	// construct with initial reference count
; 161  : 			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);

	mov	ecx, DWORD PTR __Initrefs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?_Init_atomic_counter@std@@YAXAAKK@Z	; std::_Init_atomic_counter
	add	esp, 8

; 162  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0facet@locale@std@@IAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Facet_base@std@@UAE@XZ		; std::_Facet_base::~_Facet_base
__ehhandler$??0facet@locale@std@@IAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0facet@locale@std@@IAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 148  : 			{   // decrement use count

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 			if (_MT_DECR(_Mtx, _Refs) == 0)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	jne	SHORT $LN2@Decref

; 150  : 				return (this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@Decref

; 151  : 			else

	jmp	SHORT $LN3@Decref
$LN2@Decref:

; 152  : 				return (0);

	xor	eax, eax
$LN3@Decref:

; 153  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 143  : 			{   // increment use count

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 			_MT_INCR(_Mtx, _Refs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, 1
	lock	 xadd	 DWORD PTR [eax], ecx

; 145  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -8						; size = 4
_this$ = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 78   : 			{	// get stamp, with lazy allocation

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 			if (_Id == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@operator

; 80   : 				{	// still zero, allocate stamp
; 81   : 				_BEGIN_LOCK(_LOCK_LOCALE)

	push	0
	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 82   : 					if (_Id == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@operator

; 83   : 						_Id = ++_Id_cnt;

	mov	edx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	add	edx, 1
	mov	DWORD PTR ?_Id_cnt@id@locale@std@@0HA, edx ; std::locale::id::_Id_cnt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	mov	DWORD PTR [eax], ecx
$LN1@operator:

; 84   : 				_END_LOCK()

	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN2@operator:

; 85   : 				}
; 86   : 			return (_Id);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]

; 87   : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Facet_base@std@@UAE@XZ		; std::_Facet_base::~_Facet_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 24   : 		{	// ensure that derived classes can be destroyed properly

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@

; 25   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 3606 : 		{	// discard any string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3607 : 		if (_Myptr != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_free
	add	esp, 4
$LN1@Tidy:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3617 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 3580 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3581 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Yarn@_W@std@@AAEXXZ		; std::_Yarn<wchar_t>::_Tidy

; 3582 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 3531 : 		{	// default construct

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx

; 3532 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 3606 : 		{	// discard any string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3607 : 		if (_Myptr != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 3608 : 
; 3609 :  #ifdef _DEBUG
; 3610 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3611 : 
; 3612 :  #else /* _DEBUG */
; 3613 : 			_CSTD free(_Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_free
	add	esp, 4
$LN1@Tidy:

; 3614 :  #endif /* _DEBUG */
; 3615 : 
; 3616 : 		_Myptr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3617 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 3590 : 		{	// return NTBS

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3591 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@c_str
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN4@c_str
$LN3@c_str:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@c_str:
	mov	eax, DWORD PTR tv68[ebp]

; 3592 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 3580 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3581 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Yarn@D@std@@AAEXXZ		; std::_Yarn<char>::_Tidy

; 3582 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 3531 : 		{	// default construct

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0

; 3532 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -36						; size = 16
$T2 = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		return (::_Getctype());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__Getctype
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T2[ebp+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 118  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		_Locinfo_dtor(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
	add	esp, 4

; 96   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Locinfo@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::_Yarn<wchar_t>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::_Yarn<wchar_t>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 77   : 		if (_Pch == 0)

	cmp	DWORD PTR __Pch$[ebp], 0
	jne	SHORT $LN1@Locinfo

; 78   : 			_THROW_NCEE(runtime_error, "bad locale name");

	push	OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@Locinfo:

; 79   : 		_Locinfo_ctor(this, _Pch);

	mov	ecx, DWORD PTR __Pch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
	add	esp, 8

; 80   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@Locinfo:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 178  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@

; 179  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 173  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@

; 174  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__P2$ = 8						; size = 4
__P1$ = 12						; size = 4
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT

; 2247 : 		{	// compute safe iterator difference

	push	ebp
	mov	ebp, esp
	push	ecx

; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);

	cmp	DWORD PTR __P2$[ebp], 0
	jne	SHORT $LN3@Pdif
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Pdif
$LN3@Pdif:
	lea	eax, DWORD PTR __P1$[ebp]
	push	eax
	lea	ecx, DWORD PTR __P2$[ebp]
	call	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
	mov	DWORD PTR tv68[ebp], eax
$LN4@Pdif:
	mov	eax, DWORD PTR tv68[ebp]

; 2249 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2175 : 		if (_Count == 1)

	cmp	DWORD PTR __Count$[ebp], 1
	jne	SHORT $LN2@Chassign

; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);

	lea	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2177 : 		else

	jmp	SHORT $LN3@Chassign
$LN2@Chassign:

; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAPADPADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH
$LN3@Chassign:

; 2179 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1904 : 		{	// look for _Ch at or after _Off

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));

	push	1
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ch$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find

; 1906 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Vptr$1 = -16						; size = 4
__Uptr$2 = -12						; size = 4
_this$ = -8						; size = 4
__Nm$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN6@find
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	ja	SHORT $LN6@find

; 1881 : 			return (_Off);	// null string always matches (if inside string)

	mov	eax, DWORD PTR __Off$[ebp]
	jmp	$LN7@find
$LN6@find:

; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	$LN5@find
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Nm$[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Nm$[ebp]
	ja	$LN5@find

; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR __Nm$[ebp]
	sub	edx, ecx
	mov	DWORD PTR __Nm$[ebp], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Vptr$1[ebp], eax

; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)

	jmp	SHORT $LN4@find
$LN3@find:
	mov	eax, DWORD PTR __Uptr$2[ebp]
	sub	eax, DWORD PTR __Vptr$1[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR __Nm$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Nm$[ebp], ecx
	mov	edx, DWORD PTR __Uptr$2[ebp]
	add	edx, 1
	mov	DWORD PTR __Vptr$1[ebp], edx
$LN4@find:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Nm$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Vptr$1[ebp]
	push	edx
	call	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ; std::char_traits<char>::find
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Uptr$2[ebp], eax
	cmp	DWORD PTR __Uptr$2[ebp], 0
	je	SHORT $LN5@find

; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Uptr$2[ebp]
	push	edx
	call	?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@find

; 1891 : 					return (_Uptr - this->_Myptr());	// found a match

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Uptr$2[ebp]
	sub	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN7@find
$LN1@find:

; 1892 : 			}

	jmp	SHORT $LN3@find
$LN5@find:

; 1893 : 
; 1894 : 		return (npos);	// no match

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
$LN7@find:

; 1895 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$1 = -8						; size = 4
_this$ = -4						; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 1761 : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Newcap$[ebp]
	ja	SHORT $LN3@reserve
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR __Newcap$[ebp]
	je	SHORT $LN3@reserve

; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR __Size$1[ebp], edx

; 1765 : 			if (_Grow(_Newcap, true))

	push	1
	mov	eax, DWORD PTR __Newcap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@reserve

; 1766 : 				_Eos(_Size);

	mov	edx, DWORD PTR __Size$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN3@reserve:

; 1767 : 			}
; 1768 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1574 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1576 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
__Count$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1333 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1334 : 		size_type _Count = _Pdif(_Where, begin());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
	add	esp, 8
	mov	DWORD PTR __Count$[ebp], eax

; 1335 : 		erase(_Count, 1);

	push	1
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1337 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1066 : 		{	// append _Count * _Ch

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 		if (npos - this->_Mysize <= _Count)

	mov	eax, DWORD PTR _this$[ebp]
	or	ecx, -1
	sub	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append

; 1068 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
	push	0
	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@append

; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1074 : 			_Eos(_Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@append:

; 1075 : 			}
; 1076 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN4@append:

; 1077 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1020 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN4@append

; 1021 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@append:

; 1022 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1023 : 		if (_Num < _Count)

	mov	eax, DWORD PTR __Num$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN3@append

; 1024 : 			_Count = _Num;	// trim _Count to size

	mov	ecx, DWORD PTR __Num$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx
$LN3@append:

; 1025 : 		if (npos - this->_Mysize <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	or	eax, -1
	sub	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN2@append

; 1026 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@append
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], edx
	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@append

; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1032 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@append:

; 1033 : 			}
; 1034 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@append:

; 1035 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1013 : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1014 : 		return (append(_Right, 0, npos));

	push	-1
	push	0
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1015 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 1008 : 		{	// append 1 * _Ch

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1009 : 		return (append((size_type)1, _Ch));

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1010 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 998  : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 999  : 		return (append(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1000 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv, COMDAT
; _this$ = ecx

; 948  : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jae	SHORT $LN2@Assign_rv

; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 952  : 		else

	jmp	SHORT $LN1@Assign_rv
$LN2@Assign_rv:

; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 955  : 			_Right._Bx._Ptr = pointer();

	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [edx], 0
$LN1@Assign_rv:

; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 958  : 		this->_Myres = _Right._Myres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 959  : 		_Right._Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 960  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 898  : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 899  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv

; 901  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 778  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 779  : 		assign(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 780  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 749  : 		{	// construct empty string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 750  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 751  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic0.h
;	COMDAT ?_Init_atomic_counter@std@@YAXAAKK@Z
_TEXT	SEGMENT
__Counter$ = 8						; size = 4
__Value$ = 12						; size = 4
?_Init_atomic_counter@std@@YAXAAKK@Z PROC		; std::_Init_atomic_counter, COMDAT

; 218  : 	{	// non-atomically initialize counter

	push	ebp
	mov	ebp, esp

; 219  : 	_Counter = _Value;

	mov	eax, DWORD PTR __Counter$[ebp]
	mov	ecx, DWORD PTR __Value$[ebp]
	mov	DWORD PTR [eax], ecx

; 220  : 	}

	pop	ebp
	ret	0
?_Init_atomic_counter@std@@YAXAAKK@Z ENDP		; std::_Init_atomic_counter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 50   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 39   : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 604  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp

; 605  : 		return (EOF);

	or	eax, -1

; 606  : 		}

	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
tv68 = -4						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 599  : 		{	// return anything but EOF

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 600  : 		return (_Meta != eof() ? _Meta : !eof());

	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	ecx, DWORD PTR __Meta$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN5@not_eof
	mov	edx, DWORD PTR __Meta$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN6@not_eof
$LN5@not_eof:
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	test	eax, eax
	jne	SHORT $LN3@not_eof
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@not_eof
$LN3@not_eof:
	mov	DWORD PTR tv68[ebp], 0
$LN4@not_eof:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv69[ebp], ecx
$LN6@not_eof:
	mov	eax, DWORD PTR tv69[ebp]

; 601  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 593  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	push	ecx

; 594  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
	mov	al, BYTE PTR tv65[ebp]

; 595  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 587  : 		{	// convert character to metacharacter

	push	ebp
	mov	ebp, esp

; 588  : 		return ((unsigned char)_Ch);

	mov	eax, DWORD PTR __Ch$[ebp]
	movzx	eax, BYTE PTR [eax]

; 589  : 		}

	pop	ebp
	ret	0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 581  : 		{	// convert metacharacter to character

	push	ebp
	mov	ebp, esp

; 582  : 		return ((_Elem)_Meta);

	mov	eax, DWORD PTR __Meta$[ebp]
	mov	al, BYTE PTR [eax]

; 583  : 		}

	pop	ebp
	ret	0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 569  : 		{	// test for element equality

	push	ebp
	mov	ebp, esp
	push	ecx

; 570  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN3@eq
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@eq
$LN3@eq:
	mov	DWORD PTR tv67[ebp], 0
$LN4@eq:
	mov	al, BYTE PTR tv67[ebp]

; 571  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 558  : 		{	// assign _Count * _Ch to [_First, ...)

	push	ebp
	mov	ebp, esp

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	movsx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 560  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
tv70 = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT

; 544  : 		{	// look for _Ch in [_First, _First + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx

; 545  : 		return (_Count == 0 ? (const _Elem *)0
; 546  : 			: (const _Elem *)_CSTD memchr(_First, _Ch, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@find
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@find
$LN3@find:
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ch$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_memchr
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv70[ebp], eax
$LN4@find:
	mov	eax, DWORD PTR tv70[ebp]

; 547  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 515  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 516  : 		return (_Count == 0 ? 0
; 517  : 			: _CSTD memcmp(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@compare
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN4@compare
$LN3@compare:
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@compare:
	mov	eax, DWORD PTR tv69[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strpbrk@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Control$ = 12						; size = 4
?strpbrk@@YAPADPADPBD@Z PROC				; strpbrk, COMDAT

; 220  : 	{ return (char*)strpbrk((const char*)_Str, _Control); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Control$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strpbrk
	add	esp, 8
	pop	ebp
	ret	0
?strpbrk@@YAPADPADPBD@Z ENDP				; strpbrk
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 218  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
END
