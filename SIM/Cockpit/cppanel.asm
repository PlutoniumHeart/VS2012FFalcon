; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\Cockpit\cppanel.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	__GUID_00000000_0000_0000_0000_000000000000
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT
__GUID_00000000_0000_0000_0000_000000000000 DD 00H
	DW	00H
	DW	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?PixelSize@ImageBuffer@@QAEHXZ			; ImageBuffer::PixelSize
PUBLIC	?SetOffset@Render2D@@QAEXMM@Z			; Render2D::SetOffset
PUBLIC	?GetGreenMode@RenderOTW@@QAE_NXZ		; RenderOTW::GetGreenMode
PUBLIC	?SetDirtyFlag@CPButtonView@@QAEXXZ		; CPButtonView::SetDirtyFlag
PUBLIC	?SetDirtyFlag@CPObject@@QAEXXZ			; CPObject::SetDirtyFlag
PUBLIC	??0CPPanel@@QAE@PAUPanelInitStr@@@Z		; CPPanel::CPPanel
PUBLIC	??1CPPanel@@UAE@XZ				; CPPanel::~CPPanel
PUBLIC	?Exec@CPPanel@@QAEXPAVSimBaseClass@@H@Z		; CPPanel::Exec
PUBLIC	?CreateLitSurfaces@CPPanel@@QAEXM@Z		; CPPanel::CreateLitSurfaces
PUBLIC	?DiscardLitSurfaces@CPPanel@@QAEXXZ		; CPPanel::DiscardLitSurfaces
PUBLIC	?SetTOD@CPPanel@@QAEXM@Z			; CPPanel::SetTOD
PUBLIC	?SetPalette@CPPanel@@QAEXXZ			; CPPanel::SetPalette
PUBLIC	?DisplayBlit@CPPanel@@QAEXXZ			; CPPanel::DisplayBlit
PUBLIC	?DisplayDraw@CPPanel@@QAEXXZ			; CPPanel::DisplayDraw
PUBLIC	?DoGeometry@CPPanel@@QAEHXZ			; CPPanel::DoGeometry
PUBLIC	?Dispatch@CPPanel@@QAEHPAHHHH@Z			; CPPanel::Dispatch
PUBLIC	?POVDispatch@CPPanel@@QAEHH@Z			; CPPanel::POVDispatch
PUBLIC	?SetDirtyFlags@CPPanel@@QAEXXZ			; CPPanel::SetDirtyFlags
PUBLIC	?GetViewportBounds@CPPanel@@QAEHPAUViewportBounds@@H@Z ; CPPanel::GetViewportBounds
PUBLIC	?DisplayBlit3D@CPPanel@@QAEXXZ			; CPPanel::DisplayBlit3D
PUBLIC	??_GCPPanel@@UAEPAXI@Z				; CPPanel::`scalar deleting destructor'
PUBLIC	?TestBounds@@YAXHHPAHHHH@Z			; TestBounds
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7CPPanel@@6B@				; CPPanel::`vftable'
PUBLIC	??_R0?AVCPObject@@@8				; CPObject `RTTI Type Descriptor'
PUBLIC	??_R0?AVCPLight@@@8				; CPLight `RTTI Type Descriptor'
PUBLIC	??_R0?AVCPHsi@@@8				; CPHsi `RTTI Type Descriptor'
PUBLIC	??_R0?AVCPAdi@@@8				; CPAdi `RTTI Type Descriptor'
PUBLIC	??_R0?AVCPIndicator@@@8				; CPIndicator `RTTI Type Descriptor'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPPanel@@6B@				; CPPanel::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPPanel@@@8				; CPPanel `RTTI Type Descriptor'
PUBLIC	??_R3CPPanel@@8					; CPPanel::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPPanel@@8					; CPPanel::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPPanel@@8			; CPPanel::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3e991687
PUBLIC	__real@3f000000
PUBLIC	__real@3f1645a2
PUBLIC	__real@3fbd2f1a9fbe76c9
PUBLIC	__real@47800000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z:PROC	; ImageBuffer::Pixel32toPixel32
EXTRN	_F4EnterCriticalSection:PROC
EXTRN	_F4LeaveCriticalSection:PROC
EXTRN	?DisplayBlit@CPSurface@@QAEXEHPAUtagRECT@@HH@Z:PROC ; CPSurface::DisplayBlit
EXTRN	?CreateLit@CPSurface@@QAEXXZ:PROC		; CPSurface::CreateLit
EXTRN	?DiscardLit@CPSurface@@QAEXXZ:PROC		; CPSurface::DiscardLit
EXTRN	?Translate@CPSurface@@QAEXPAK@Z:PROC		; CPSurface::Translate
EXTRN	?DisplayBlit3D@CPSurface@@QAEXEHPAUtagRECT@@HH@Z:PROC ; CPSurface::DisplayBlit3D
EXTRN	?Translate3D@CPSurface@@QAEXPAK@Z:PROC		; CPSurface::Translate3D
EXTRN	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z:PROC ; ConvertRecttoVBounds
EXTRN	?DisplayBlit@CPButtonView@@QAEXXZ:PROC		; CPButtonView::DisplayBlit
EXTRN	?HandleEvent@CPButtonView@@QAEHPAHHHH@Z:PROC	; CPButtonView::HandleEvent
EXTRN	?UpdateView@CPButtonView@@QAEXXZ:PROC		; CPButtonView::UpdateView
EXTRN	?DisplayBlit3D@CPButtonView@@QAEXXZ:PROC	; CPButtonView::DisplayBlit3D
EXTRN	?Translate3D@CPButtonView@@QAEXPAK@Z:PROC	; CPButtonView::Translate3D
EXTRN	?Translate3D@CPObject@@QAEXPAK@Z:PROC		; CPObject::Translate3D
EXTRN	??_ECPPanel@@UAEPAXI@Z:PROC			; CPPanel::`vector deleting destructor'
EXTRN	?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z:PROC ; Translate8to32
EXTRN	?CalculateColor@@YAKKMMM@Z:PROC			; CalculateColor
EXTRN	?CalculateNVGColor@@YAKK@Z:PROC			; CalculateNVGColor
EXTRN	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z:PROC ; TemplateInfoClass::Pixel32toPixel32
EXTRN	?SetActivePanel@CockpitManager@@QAE_NH@Z:PROC	; CockpitManager::SetActivePanel
EXTRN	?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z:PROC ; CockpitManager::ComputeLightFactors
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___RTDynamicCast:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?gpTemplateSurface@@3PAVImageBuffer@@A:DWORD	; gpTemplateSurface
EXTRN	?gpTemplateImage@@3PAEA:DWORD			; gpTemplateImage
EXTRN	?gpTemplatePalette@@3PAKA:DWORD			; gpTemplatePalette
EXTRN	?TemplateInfo@@3PAVTemplateInfoClass@@A:DWORD	; TemplateInfo
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@3fbd2f1a9fbe76c9
CONST	SEGMENT
__real@3fbd2f1a9fbe76c9 DQ 03fbd2f1a9fbe76c9r	; 0.114
CONST	ENDS
;	COMDAT __real@3f1645a2
CONST	SEGMENT
__real@3f1645a2 DD 03f1645a2r			; 0.587
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e991687
CONST	SEGMENT
__real@3e991687 DD 03e991687r			; 0.299
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CPPanel@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPPanel@@8 DD FLAT:??_R0?AVCPPanel@@@8	; CPPanel::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPPanel@@8
rdata$r	ENDS
;	COMDAT ??_R2CPPanel@@8
rdata$r	SEGMENT
??_R2CPPanel@@8 DD FLAT:??_R1A@?0A@EA@CPPanel@@8	; CPPanel::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPPanel@@8
rdata$r	SEGMENT
??_R3CPPanel@@8 DD 00H					; CPPanel::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPPanel@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPPanel@@@8
_DATA	SEGMENT
??_R0?AVCPPanel@@@8 DD FLAT:??_7type_info@@6B@		; CPPanel `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPPanel@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CPPanel@@6B@
rdata$r	SEGMENT
??_R4CPPanel@@6B@ DD 00H				; CPPanel::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPPanel@@@8
	DD	FLAT:??_R3CPPanel@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_R0?AVCPIndicator@@@8
_DATA	SEGMENT
??_R0?AVCPIndicator@@@8 DD FLAT:??_7type_info@@6B@	; CPIndicator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPIndicator@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVCPAdi@@@8
_DATA	SEGMENT
??_R0?AVCPAdi@@@8 DD FLAT:??_7type_info@@6B@		; CPAdi `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPAdi@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVCPHsi@@@8
_DATA	SEGMENT
??_R0?AVCPHsi@@@8 DD FLAT:??_7type_info@@6B@		; CPHsi `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPHsi@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVCPLight@@@8
_DATA	SEGMENT
??_R0?AVCPLight@@@8 DD FLAT:??_7type_info@@6B@		; CPLight `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPLight@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVCPObject@@@8
_DATA	SEGMENT
??_R0?AVCPObject@@@8 DD FLAT:??_7type_info@@6B@		; CPObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPObject@@', 00H
_DATA	ENDS
;	COMDAT ??_7CPPanel@@6B@
CONST	SEGMENT
??_7CPPanel@@6B@ DD FLAT:??_R4CPPanel@@6B@		; CPPanel::`vftable'
	DD	FLAT:??_ECPPanel@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_position$ = 8						; size = 4
_dimension$ = 12					; size = 4
_pcursorIndex$ = 16					; size = 4
_cursor0$ = 20						; size = 4
_cursor1$ = 24						; size = 4
_cursor2$ = 28						; size = 4
?TestBounds@@YAXHHPAHHHH@Z PROC				; TestBounds

; 24   : void TestBounds(int position, int dimension, int* pcursorIndex, int cursor0, int cursor1, int cursor2) {

	push	ebp
	mov	ebp, esp

; 25   : 
; 26   : 	if(position <= dimension / 4) {

	mov	eax, DWORD PTR _dimension$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _position$[ebp], eax
	jg	SHORT $LN8@TestBounds

; 27   : 		if(cursor0 != -1) {

	cmp	DWORD PTR _cursor0$[ebp], -1
	je	SHORT $LN7@TestBounds

; 28   : 			*pcursorIndex = cursor0;

	mov	eax, DWORD PTR _pcursorIndex$[ebp]
	mov	ecx, DWORD PTR _cursor0$[ebp]
	mov	DWORD PTR [eax], ecx

; 29   : 		}
; 30   : 		else {

	jmp	SHORT $LN6@TestBounds
$LN7@TestBounds:

; 31   : 			*pcursorIndex = cursor1;

	mov	edx, DWORD PTR _pcursorIndex$[ebp]
	mov	eax, DWORD PTR _cursor1$[ebp]
	mov	DWORD PTR [edx], eax
$LN6@TestBounds:

; 32   : 		}

	jmp	SHORT $LN9@TestBounds
$LN8@TestBounds:

; 33   : 	}
; 34   : 	else if(position > dimension / 4 && position < 3 * dimension / 4) {

	mov	eax, DWORD PTR _dimension$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _position$[ebp], eax
	jle	SHORT $LN4@TestBounds
	mov	eax, DWORD PTR _dimension$[ebp]
	imul	eax, 3
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	DWORD PTR _position$[ebp], eax
	jge	SHORT $LN4@TestBounds

; 35   : 		*pcursorIndex = cursor1;

	mov	ecx, DWORD PTR _pcursorIndex$[ebp]
	mov	edx, DWORD PTR _cursor1$[ebp]
	mov	DWORD PTR [ecx], edx

; 36   : 	}
; 37   : 	else {

	jmp	SHORT $LN9@TestBounds
$LN4@TestBounds:

; 38   : 		if(cursor2 != -1) {

	cmp	DWORD PTR _cursor2$[ebp], -1
	je	SHORT $LN2@TestBounds

; 39   : 			*pcursorIndex = cursor2;

	mov	eax, DWORD PTR _pcursorIndex$[ebp]
	mov	ecx, DWORD PTR _cursor2$[ebp]
	mov	DWORD PTR [eax], ecx

; 40   : 		}
; 41   : 		else {

	jmp	SHORT $LN9@TestBounds
$LN2@TestBounds:

; 42   : 			*pcursorIndex = cursor1;

	mov	edx, DWORD PTR _pcursorIndex$[ebp]
	mov	eax, DWORD PTR _cursor1$[ebp]
	mov	DWORD PTR [edx], eax
$LN9@TestBounds:

; 43   : 		}
; 44   : 	}
; 45   : }

	pop	ebp
	ret	0
?TestBounds@@YAXHHPAHHHH@Z ENDP				; TestBounds
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCPPanel@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPPanel@@UAEPAXI@Z PROC				; CPPanel::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPPanel@@UAE@XZ			; CPPanel::~CPPanel
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPPanel@@UAEPAXI@Z ENDP				; CPPanel::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_OffsetX$ = -16						; size = 4
_OffsetY$ = -12						; size = 4
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?DisplayBlit3D@CPPanel@@QAEXXZ PROC			; CPPanel::DisplayBlit3D
; _this$ = ecx

; 267  : void CPPanel::DisplayBlit3D() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 	int		i;
; 269  : 
; 270  : 	// loop thru and display all surfaces for this panel
; 271  : 
; 272  : 	F4EnterCriticalSection(OTWDriver.pCockpitManager->mpCockpitCritSec);

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	ecx, DWORD PTR [eax+660]
	push	ecx
	call	_F4EnterCriticalSection
	add	esp, 4

; 273  : 
; 274  : 
; 275  : 	int	OffsetX=(int)OTWDriver.pCockpitManager->PitTurbulence.x / 2;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cvttss2si eax, DWORD PTR [edx+728]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _OffsetX$[ebp], eax

; 276  : 	int	OffsetY=(int)OTWDriver.pCockpitManager->PitTurbulence.y / 2;

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	cvttss2si eax, DWORD PTR [eax+732]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _OffsetY$[ebp], eax

; 277  : 
; 278  : 
; 279  : 
; 280  : 	for(i = 0; i < mNumSurfaces; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@DisplayBli
$LN8@DisplayBli:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@DisplayBli:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+124]
	jge	SHORT $LN7@DisplayBli

; 281  : 
; 282  : #if 0
; 283  : 
; 284  : 		// Added for TOD Effects 2/9/98 (changed mpSurfaceData to mpLitSurfData)
; 285  : 		mpLitSurfData[i].psurface->DisplayBlit3D(mpLitSurfData[i].transparencyType, mpLitSurfData[i].persistant,
; 286  : 													&mpLitSurfData[i].destRect, mxPanelOffset, myPanelOffset);
; 287  : #else
; 288  : 		mpSurfaceData[i].psurface->DisplayBlit3D(mpSurfaceData[i].transparencyType, mpSurfaceData[i].persistant,
; 289  : 													&mpSurfaceData[i].destRect, mxPanelOffset + OffsetX , myPanelOffset + OffsetY);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _OffsetY$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _OffsetX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	lea	edx, DWORD PTR [ecx+edx+16]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [edx+eax+8]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	movzx	ecx, BYTE PTR [eax+ecx+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR [ecx+edx+12]
	call	?DisplayBlit3D@CPSurface@@QAEXEHPAUtagRECT@@HH@Z ; CPSurface::DisplayBlit3D

; 290  : #endif
; 291  : 
; 292  :    }

	jmp	SHORT $LN8@DisplayBli
$LN7@DisplayBli:

; 293  :  
; 294  : 	F4LeaveCriticalSection(OTWDriver.pCockpitManager->mpCockpitCritSec);

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	eax, DWORD PTR [edx+660]
	push	eax
	call	_F4LeaveCriticalSection
	add	esp, 4

; 295  : 
; 296  : 	// loop thru and display all objects for this panel
; 297  : 	for(i = 0; i < mNumObjects; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@DisplayBli
$LN5@DisplayBli:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@DisplayBli:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+136]
	jge	SHORT $LN4@DisplayBli

; 298  : 		mpObjects[i]->DisplayBlit3D();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [esi+32]
	call	eax
	jmp	SHORT $LN5@DisplayBli
$LN4@DisplayBli:

; 299  : 
; 300  : //Wombat778 3-23-04  Enabled now that there is code to back this up
; 301  : 	// currently only supported for views			
; 302  : 	// loop thru and display all buttons for this panel
; 303  : 	for(i = 0; i < mNumButtonViews; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DisplayBli
$LN2@DisplayBli:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@DisplayBli:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jge	SHORT $LN1@DisplayBli

; 304  : 		mpButtonViews[i]->DisplayBlit3D();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	call	?DisplayBlit3D@CPButtonView@@QAEXXZ	; CPButtonView::DisplayBlit3D

; 305  : 	}

	jmp	SHORT $LN2@DisplayBli
$LN1@DisplayBli:

; 306  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit3D@CPPanel@@QAEXXZ ENDP			; CPPanel::DisplayBlit3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_returnValue$ = -8					; size = 4
_this$ = -4						; size = 4
_bounds$ = 8						; size = 4
_viewPort$ = 12						; size = 4
?GetViewportBounds@CPPanel@@QAEHPAUViewportBounds@@H@Z PROC ; CPPanel::GetViewportBounds
; _this$ = ecx

; 494  : BOOL CPPanel::GetViewportBounds(ViewportBounds* bounds, int viewPort) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 495  : 	
; 496  : 	BOOL returnValue = FALSE;

	mov	DWORD PTR _returnValue$[ebp], 0

; 497  : 
; 498  : 	if(mpViewBounds[viewPort]) {

	mov	eax, DWORD PTR _viewPort$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+92], 0
	je	SHORT $LN1@GetViewpor

; 499  : 
; 500  : 		*bounds = *mpViewBounds[viewPort];

	mov	edx, DWORD PTR _viewPort$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+92]
	mov	edx, DWORD PTR _bounds$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx

; 501  : 		returnValue = TRUE;

	mov	DWORD PTR _returnValue$[ebp], 1
$LN1@GetViewpor:

; 502  : 	}
; 503  : 
; 504  : 	return(returnValue);

	mov	eax, DWORD PTR _returnValue$[ebp]

; 505  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetViewportBounds@CPPanel@@QAEHPAUViewportBounds@@H@Z ENDP ; CPPanel::GetViewportBounds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?SetDirtyFlags@CPPanel@@QAEXXZ PROC			; CPPanel::SetDirtyFlags
; _this$ = ecx

; 213  : void CPPanel::SetDirtyFlags() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	int		i;
; 215  : 
; 216  : 	for(i = 0; i < mNumObjects; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@SetDirtyFl
$LN5@SetDirtyFl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@SetDirtyFl:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN4@SetDirtyFl

; 217  : 		mpObjects[i]->SetDirtyFlag();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	call	?SetDirtyFlag@CPObject@@QAEXXZ		; CPObject::SetDirtyFlag

; 218  : 	}

	jmp	SHORT $LN5@SetDirtyFl
$LN4@SetDirtyFl:

; 219  : 
; 220  : 	for(i = 0; i < mNumButtonViews; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SetDirtyFl
$LN2@SetDirtyFl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SetDirtyFl:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+144]
	jge	SHORT $LN7@SetDirtyFl

; 221  : 		mpButtonViews[i]->SetDirtyFlag();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	call	?SetDirtyFlag@CPButtonView@@QAEXXZ	; CPButtonView::SetDirtyFlag

; 222  : 	}

	jmp	SHORT $LN2@SetDirtyFl
$LN7@SetDirtyFl:

; 223  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetDirtyFlags@CPPanel@@QAEXXZ ENDP			; CPPanel::SetDirtyFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_viewChanging$ = -16					; size = 4
_this$ = -12						; size = 4
_newPanel$ = -8						; size = 4
tv64 = -4						; size = 4
_direction$ = 8						; size = 4
?POVDispatch@CPPanel@@QAEHH@Z PROC			; CPPanel::POVDispatch
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 	int	newPanel = -1;

	mov	DWORD PTR _newPanel$[ebp], -1

; 330  : 	BOOL	viewChanging = FALSE;

	mov	DWORD PTR _viewChanging$[ebp], 0

; 331  : 
; 332  : 	switch (direction)

	mov	eax, DWORD PTR _direction$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 18000		; 00004650H
	jg	SHORT $LN14@POVDispatc
	cmp	DWORD PTR tv64[ebp], 18000		; 00004650H
	je	SHORT $LN5@POVDispatc
	cmp	DWORD PTR tv64[ebp], 9000		; 00002328H
	jg	SHORT $LN15@POVDispatc
	cmp	DWORD PTR tv64[ebp], 9000		; 00002328H
	je	SHORT $LN7@POVDispatc
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN9@POVDispatc
	cmp	DWORD PTR tv64[ebp], 4500		; 00001194H
	je	SHORT $LN8@POVDispatc
	jmp	SHORT $LN10@POVDispatc
$LN15@POVDispatc:
	cmp	DWORD PTR tv64[ebp], 13500		; 000034bcH
	je	SHORT $LN6@POVDispatc
	jmp	SHORT $LN10@POVDispatc
$LN14@POVDispatc:
	cmp	DWORD PTR tv64[ebp], 22500		; 000057e4H
	je	SHORT $LN4@POVDispatc
	cmp	DWORD PTR tv64[ebp], 27000		; 00006978H
	je	SHORT $LN3@POVDispatc
	cmp	DWORD PTR tv64[ebp], 31500		; 00007b0cH
	je	SHORT $LN2@POVDispatc
	jmp	SHORT $LN10@POVDispatc
$LN9@POVDispatc:

; 333  : 	{
; 334  : 		case POV_N:
; 335  : 			newPanel = mAdjacentPanels.N;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _newPanel$[ebp], edx

; 336  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN8@POVDispatc:

; 337  : 
; 338  : 		case POV_NE:
; 339  : 			newPanel = mAdjacentPanels.NE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _newPanel$[ebp], ecx

; 340  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN7@POVDispatc:

; 341  : 
; 342  : 		case POV_E:
; 343  : 			newPanel = mAdjacentPanels.E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _newPanel$[ebp], eax

; 344  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN6@POVDispatc:

; 345  : 
; 346  : 		case POV_SE:
; 347  : 			newPanel = mAdjacentPanels.SE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _newPanel$[ebp], edx

; 348  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN5@POVDispatc:

; 349  : 
; 350  : 		case POV_S:
; 351  : 			newPanel = mAdjacentPanels.S;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _newPanel$[ebp], ecx

; 352  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN4@POVDispatc:

; 353  : 
; 354  : 		case POV_SW:
; 355  : 			newPanel = mAdjacentPanels.SW;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _newPanel$[ebp], eax

; 356  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN3@POVDispatc:

; 357  : 
; 358  : 		case POV_W:
; 359  : 			newPanel = mAdjacentPanels.W;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _newPanel$[ebp], edx

; 360  : 			break;

	jmp	SHORT $LN10@POVDispatc
$LN2@POVDispatc:

; 361  : 
; 362  : 		case POV_NW:
; 363  : 			newPanel = mAdjacentPanels.NW;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _newPanel$[ebp], ecx
$LN10@POVDispatc:

; 364  : 			break;
; 365  : 	}
; 366  : 
; 367  : 	if(newPanel >= 0) {

	cmp	DWORD PTR _newPanel$[ebp], 0
	jl	SHORT $LN1@POVDispatc

; 368  : 		OTWDriver.pCockpitManager->SetActivePanel(newPanel);

	mov	edx, DWORD PTR _newPanel$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel

; 369  : 		viewChanging = TRUE;

	mov	DWORD PTR _viewChanging$[ebp], 1
$LN1@POVDispatc:

; 370  : 	}
; 371  : 
; 372  : 	return viewChanging;

	mov	eax, DWORD PTR _viewChanging$[ebp]

; 373  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?POVDispatch@CPPanel@@QAEHH@Z ENDP			; CPPanel::POVDispatch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_viewChanging$ = -44					; size = 4
_found$ = -40						; size = 4
_i$ = -36						; size = 4
_height$ = -32						; size = 4
_width$ = -28						; size = 4
_newPanel$ = -24					; size = 4
_cursor0$ = -20						; size = 4
_cursor1$ = -16						; size = 4
_cursor2$ = -12						; size = 4
_border$ = -8						; size = 4
_this$ = -4						; size = 4
_cursorIndex$ = 8					; size = 4
_event$ = 12						; size = 4
_xpos$ = 16						; size = 4
_ypos$ = 20						; size = 4
?Dispatch@CPPanel@@QAEHPAHHHH@Z PROC			; CPPanel::Dispatch
; _this$ = ecx

; 379  : BOOL CPPanel::Dispatch(int* cursorIndex, int event, int xpos, int ypos) {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 
; 381  : 	BOOL	found = FALSE;

	mov	DWORD PTR _found$[ebp], 0

; 382  : 	BOOL	viewChanging = FALSE;

	mov	DWORD PTR _viewChanging$[ebp], 0

; 383  : 	int	i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 384  : 	int	border;
; 385  : 	int	height;
; 386  : 	int	width;
; 387  : 	int	newPanel = -1;

	mov	DWORD PTR _newPanel$[ebp], -1

; 388  : 	int	cursor0, cursor1, cursor2;
; 389  : 
; 390  : 	if(mDefaultCursor >= 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jl	$LN38@Dispatch
$LN37@Dispatch:

; 391  : 		while((!found) && (i < mNumButtonViews)) {

	cmp	DWORD PTR _found$[ebp], 0
	jne	SHORT $LN36@Dispatch
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+144]
	jge	SHORT $LN36@Dispatch

; 392  : 			found = mpButtonViews[i]->HandleEvent(cursorIndex, event, xpos, ypos);

	mov	eax, DWORD PTR _ypos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _event$[ebp]
	push	edx
	mov	eax, DWORD PTR _cursorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	call	?HandleEvent@CPButtonView@@QAEHPAHHHH@Z	; CPButtonView::HandleEvent
	mov	DWORD PTR _found$[ebp], eax

; 393  : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 394  : 		}

	jmp	SHORT $LN37@Dispatch
$LN36@Dispatch:

; 395  : 
; 396  : 		if(!found) { //check directional cursors

	cmp	DWORD PTR _found$[ebp], 0
	jne	$LN38@Dispatch

; 397  : 			border = OTWDriver.pCockpitManager->mMouseBorder;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	eax, DWORD PTR [edx+244]
	mov	DWORD PTR _border$[ebp], eax

; 398  : 			height = DisplayOptions.DispHeight;

	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	mov	DWORD PTR _height$[ebp], ecx

; 399  : 			width	 = DisplayOptions.DispWidth;

	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	mov	DWORD PTR _width$[ebp], edx

; 400  : 
; 401  : 			if(event == CP_MOUSE_BUTTON0 || event == CP_MOUSE_BUTTON1) {

	cmp	DWORD PTR _event$[ebp], 3
	je	SHORT $LN33@Dispatch
	cmp	DWORD PTR _event$[ebp], 4
	jne	$LN34@Dispatch
$LN33@Dispatch:

; 402  : 
; 403  : 				if(ypos < border) {

	mov	eax, DWORD PTR _ypos$[ebp]
	cmp	eax, DWORD PTR _border$[ebp]
	jge	SHORT $LN32@Dispatch

; 404  : 					TestBounds(xpos, width, &newPanel, mAdjacentPanels.NW, mAdjacentPanels.N, mAdjacentPanels.NE);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	lea	ecx, DWORD PTR _newPanel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpos$[ebp]
	push	eax
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
	jmp	$LN31@Dispatch
$LN32@Dispatch:

; 405  : 				}
; 406  : 				else if(ypos > height - border) {

	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, DWORD PTR _border$[ebp]
	cmp	DWORD PTR _ypos$[ebp], ecx
	jle	SHORT $LN30@Dispatch

; 407  : 					TestBounds(xpos, width, &newPanel, mAdjacentPanels.SW, mAdjacentPanels.S, mAdjacentPanels.SE);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	lea	edx, DWORD PTR _newPanel$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpos$[ebp]
	push	ecx
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
	jmp	SHORT $LN31@Dispatch
$LN30@Dispatch:

; 408  : 				}
; 409  : 				else if(xpos < border) {

	mov	edx, DWORD PTR _xpos$[ebp]
	cmp	edx, DWORD PTR _border$[ebp]
	jge	SHORT $LN28@Dispatch

; 410  : 					TestBounds(ypos, height, &newPanel, mAdjacentPanels.NW, mAdjacentPanels.W, mAdjacentPanels.SW);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	lea	eax, DWORD PTR _newPanel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ypos$[ebp]
	push	edx
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
	jmp	SHORT $LN31@Dispatch
$LN28@Dispatch:

; 411  : 				}
; 412  : 				else if(xpos > width - border) {

	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, DWORD PTR _border$[ebp]
	cmp	DWORD PTR _xpos$[ebp], eax
	jle	SHORT $LN31@Dispatch

; 413  : 					TestBounds(ypos, height, &newPanel, mAdjacentPanels.NE, mAdjacentPanels.E, mAdjacentPanels.SE);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	lea	ecx, DWORD PTR _newPanel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _ypos$[ebp]
	push	eax
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
$LN31@Dispatch:

; 414  : 				}
; 415  : 
; 416  : 				if(newPanel >= 0) {

	cmp	DWORD PTR _newPanel$[ebp], 0
	jl	SHORT $LN25@Dispatch

; 417  : 					OTWDriver.pCockpitManager->SetActivePanel(newPanel);

	mov	ecx, DWORD PTR _newPanel$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?SetActivePanel@CockpitManager@@QAE_NH@Z ; CockpitManager::SetActivePanel

; 418  : 					viewChanging = TRUE;

	mov	DWORD PTR _viewChanging$[ebp], 1
$LN25@Dispatch:

; 419  : 				}
; 420  : 
; 421  : 				*cursorIndex = mDefaultCursor;

	mov	edx, DWORD PTR _cursorIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx], ecx
	jmp	$LN38@Dispatch
$LN34@Dispatch:

; 422  : 			}
; 423  : 
; 424  : 			else if(event == CP_MOUSE_MOVE) {

	cmp	DWORD PTR _event$[ebp], 0
	jne	$LN23@Dispatch

; 425  : 
; 426  : 				cursor0 = -1;

	mov	DWORD PTR _cursor0$[ebp], -1

; 427  : 				cursor1 = -1;

	mov	DWORD PTR _cursor1$[ebp], -1

; 428  : 				cursor2 = -1;

	mov	DWORD PTR _cursor2$[ebp], -1

; 429  : 
; 430  : 				if(ypos < border) {

	mov	edx, DWORD PTR _ypos$[ebp]
	cmp	edx, DWORD PTR _border$[ebp]
	jge	SHORT $LN22@Dispatch

; 431  : 
; 432  : 					if(mAdjacentPanels.NW > -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], -1
	jle	SHORT $LN21@Dispatch

; 433  : 						cursor0 = NW_CURSOR;

	mov	DWORD PTR _cursor0$[ebp], 8
$LN21@Dispatch:

; 434  : 					if(mAdjacentPanels.N > -1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], -1
	jle	SHORT $LN20@Dispatch

; 435  : 						cursor1 = N_CURSOR;

	mov	DWORD PTR _cursor1$[ebp], 1
$LN20@Dispatch:

; 436  : 					if(mAdjacentPanels.NE > -1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], -1
	jle	SHORT $LN19@Dispatch

; 437  : 						cursor2 = NE_CURSOR;

	mov	DWORD PTR _cursor2$[ebp], 2
$LN19@Dispatch:

; 438  : 
; 439  : 					TestBounds(xpos, width, cursorIndex, cursor0, cursor1, cursor2);

	mov	eax, DWORD PTR _cursor2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cursor0$[ebp]
	push	edx
	mov	eax, DWORD PTR _cursorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpos$[ebp]
	push	edx
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
	jmp	$LN18@Dispatch
$LN22@Dispatch:

; 440  : 				}
; 441  : 				else if(ypos > height - border) {

	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, DWORD PTR _border$[ebp]
	cmp	DWORD PTR _ypos$[ebp], eax
	jle	SHORT $LN17@Dispatch

; 442  : 
; 443  : 					if(mAdjacentPanels.SW > -1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], -1
	jle	SHORT $LN16@Dispatch

; 444  : 						cursor0 = SW_CURSOR;

	mov	DWORD PTR _cursor0$[ebp], 6
$LN16@Dispatch:

; 445  : 					if(mAdjacentPanels.S > -1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], -1
	jle	SHORT $LN15@Dispatch

; 446  : 						cursor1 = S_CURSOR;

	mov	DWORD PTR _cursor1$[ebp], 5
$LN15@Dispatch:

; 447  : 					if(mAdjacentPanels.SE > -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], -1
	jle	SHORT $LN14@Dispatch

; 448  : 						cursor2 = SE_CURSOR;

	mov	DWORD PTR _cursor2$[ebp], 4
$LN14@Dispatch:

; 449  : 
; 450  : 					TestBounds(xpos, width, cursorIndex, cursor0, cursor1, cursor2);

	mov	ecx, DWORD PTR _cursor2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cursor1$[ebp]
	push	edx
	mov	eax, DWORD PTR _cursor0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursorIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpos$[ebp]
	push	eax
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
	jmp	$LN18@Dispatch
$LN17@Dispatch:

; 451  : 				}
; 452  : 				else if(xpos < border) {

	mov	ecx, DWORD PTR _xpos$[ebp]
	cmp	ecx, DWORD PTR _border$[ebp]
	jge	SHORT $LN12@Dispatch

; 453  : 
; 454  : 					if(mAdjacentPanels.NW > -1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+72], -1
	jle	SHORT $LN11@Dispatch

; 455  : 						cursor0 = NW_CURSOR;

	mov	DWORD PTR _cursor0$[ebp], 8
$LN11@Dispatch:

; 456  : 					if(mAdjacentPanels.W > -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], -1
	jle	SHORT $LN10@Dispatch

; 457  : 						cursor1 = W_CURSOR;

	mov	DWORD PTR _cursor1$[ebp], 7
$LN10@Dispatch:

; 458  : 					if(mAdjacentPanels.SW > -1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], -1
	jle	SHORT $LN9@Dispatch

; 459  : 						cursor2 = SW_CURSOR;

	mov	DWORD PTR _cursor2$[ebp], 6
$LN9@Dispatch:

; 460  : 
; 461  : 					TestBounds(ypos, height, cursorIndex, cursor0, cursor1, cursor2);

	mov	edx, DWORD PTR _cursor2$[ebp]
	push	edx
	mov	eax, DWORD PTR _cursor1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cursorIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ypos$[ebp]
	push	ecx
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H
	jmp	SHORT $LN18@Dispatch
$LN12@Dispatch:

; 462  : 				}
; 463  : 				else if(xpos > width - border) {

	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, DWORD PTR _border$[ebp]
	cmp	DWORD PTR _xpos$[ebp], edx
	jle	SHORT $LN7@Dispatch

; 464  : 
; 465  : 					if(mAdjacentPanels.NE > -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], -1
	jle	SHORT $LN6@Dispatch

; 466  : 						cursor0 = NE_CURSOR;

	mov	DWORD PTR _cursor0$[ebp], 2
$LN6@Dispatch:

; 467  : 					if(mAdjacentPanels.E > -1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], -1
	jle	SHORT $LN5@Dispatch

; 468  : 						cursor1 = E_CURSOR;

	mov	DWORD PTR _cursor1$[ebp], 3
$LN5@Dispatch:

; 469  : 					if(mAdjacentPanels.SE > -1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], -1
	jle	SHORT $LN4@Dispatch

; 470  : 						cursor2 = SE_CURSOR;

	mov	DWORD PTR _cursor2$[ebp], 4
$LN4@Dispatch:

; 471  : 
; 472  : 					TestBounds(ypos, height, cursorIndex, cursor0, cursor1, cursor2);

	mov	eax, DWORD PTR _cursor2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cursor0$[ebp]
	push	edx
	mov	eax, DWORD PTR _cursorIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ypos$[ebp]
	push	edx
	call	?TestBounds@@YAXHHPAHHHH@Z		; TestBounds
	add	esp, 24					; 00000018H

; 473  : 				}
; 474  : 				else {

	jmp	SHORT $LN18@Dispatch
$LN7@Dispatch:

; 475  : 					*cursorIndex = mDefaultCursor;

	mov	eax, DWORD PTR _cursorIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax], edx
$LN18@Dispatch:

; 476  : 				}
; 477  : 
; 478  : 				if(*cursorIndex == -1) {

	mov	eax, DWORD PTR _cursorIndex$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN2@Dispatch

; 479  : 					*cursorIndex = mDefaultCursor;

	mov	ecx, DWORD PTR _cursorIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx], eax
$LN2@Dispatch:

; 480  : 				}
; 481  : 			}
; 482  : 
; 483  : 			else {

	jmp	SHORT $LN38@Dispatch
$LN23@Dispatch:

; 484  : 
; 485  : 				*cursorIndex = mDefaultCursor;

	mov	ecx, DWORD PTR _cursorIndex$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx], eax
$LN38@Dispatch:

; 486  : 			}
; 487  : 		}
; 488  : 	}
; 489  : 
; 490  : 	return viewChanging;

	mov	eax, DWORD PTR _viewChanging$[ebp]

; 491  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dispatch@CPPanel@@QAEHPAHHHH@Z ENDP			; CPPanel::Dispatch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoGeometry@CPPanel@@QAEHXZ PROC			; CPPanel::DoGeometry
; _this$ = ecx

; 876  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 877  : 	return mDoGeometry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+132]

; 878  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoGeometry@CPPanel@@QAEHXZ ENDP			; CPPanel::DoGeometry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?DisplayDraw@CPPanel@@QAEXXZ PROC			; CPPanel::DisplayDraw
; _this$ = ecx

; 312  : void CPPanel::DisplayDraw() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 313  : 	int		i;
; 314  : 
; 315  : 	OTWDriver.renderer->SetOffset(OTWDriver.pCockpitManager->PitTurbulence.x, OTWDriver.pCockpitManager->PitTurbulence.y);

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	push	ecx
	movss	xmm0, DWORD PTR [eax+732]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	push	ecx
	movss	xmm0, DWORD PTR [ecx+728]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetOffset@Render2D@@QAEXMM@Z		; Render2D::SetOffset

; 316  : 	// loop thru and display all objects for this panel
; 317  : 	for(i = 0; i < mNumObjects; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DisplayDra
$LN2@DisplayDra:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@DisplayDra:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+136]
	jge	SHORT $LN1@DisplayDra

; 318  : 		mpObjects[i]->DisplayDraw();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 319  : 	}

	jmp	SHORT $LN2@DisplayDra
$LN1@DisplayDra:

; 320  : 	OTWDriver.renderer->SetOffset(0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?SetOffset@Render2D@@QAEXMM@Z		; Render2D::SetOffset

; 321  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayDraw@CPPanel@@QAEXXZ ENDP			; CPPanel::DisplayDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?DisplayBlit@CPPanel@@QAEXXZ PROC			; CPPanel::DisplayBlit
; _this$ = ecx

; 229  : void CPPanel::DisplayBlit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	int		i;
; 231  : 
; 232  : 	if(!DisplayOptions.bRender2DCockpit)	// OW: dont loop in fast 2d mode ("blitting" handled by DisplayBlit3D)

	movzx	eax, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	eax, eax
	jne	$LN10@DisplayBli

; 233  : 	{
; 234  : 		// loop thru and display all surfaces for this panel
; 235  : 		F4EnterCriticalSection(OTWDriver.pCockpitManager->mpCockpitCritSec);

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+660]
	push	edx
	call	_F4EnterCriticalSection
	add	esp, 4

; 236  : 
; 237  : 		for(i = 0; i < mNumSurfaces; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@DisplayBli
$LN8@DisplayBli:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@DisplayBli:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+124]
	jge	SHORT $LN7@DisplayBli

; 238  : 		{
; 239  : 
; 240  : 	#if 0
; 241  : 
; 242  : 			// Added for TOD Effects 2/9/98 (changed mpSurfaceData to mpLitSurfData)
; 243  : 			mpLitSurfData[i].psurface->DisplayBlit(mpLitSurfData[i].transparencyType, mpLitSurfData[i].persistant,
; 244  : 														&mpLitSurfData[i].destRect, mxPanelOffset, myPanelOffset);
; 245  : 	#else
; 246  : 			mpSurfaceData[i].psurface->DisplayBlit(mpSurfaceData[i].transparencyType, mpSurfaceData[i].persistant,
; 247  : 														&mpSurfaceData[i].destRect, mxPanelOffset, myPanelOffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	lea	ecx, DWORD PTR [eax+ecx+16]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR [ecx+edx+8]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	movzx	eax, BYTE PTR [edx+eax+4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+ecx+12]
	call	?DisplayBlit@CPSurface@@QAEXEHPAUtagRECT@@HH@Z ; CPSurface::DisplayBlit

; 248  : 	#endif
; 249  : 
; 250  : 	   }

	jmp	SHORT $LN8@DisplayBli
$LN7@DisplayBli:

; 251  : 
; 252  : 		F4LeaveCriticalSection(OTWDriver.pCockpitManager->mpCockpitCritSec);

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	edx, DWORD PTR [ecx+660]
	push	edx
	call	_F4LeaveCriticalSection
	add	esp, 4
$LN10@DisplayBli:

; 253  : 	}
; 254  :  
; 255  : 	// loop thru and display all objects for this panel
; 256  : 	for(i = 0; i < mNumObjects; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@DisplayBli
$LN5@DisplayBli:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@DisplayBli:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN4@DisplayBli

; 257  : 		mpObjects[i]->DisplayBlit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 258  : 	}

	jmp	SHORT $LN5@DisplayBli
$LN4@DisplayBli:

; 259  : 
; 260  : 	// loop thru and display all buttons for this panel
; 261  : 	for(i = 0; i < mNumButtonViews; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DisplayBli
$LN2@DisplayBli:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DisplayBli:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+144]
	jge	SHORT $LN11@DisplayBli

; 262  : 		mpButtonViews[i]->DisplayBlit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	call	?DisplayBlit@CPButtonView@@QAEXXZ	; CPButtonView::DisplayBlit

; 263  : 	}

	jmp	SHORT $LN2@DisplayBli
$LN11@DisplayBli:

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayBlit@CPPanel@@QAEXXZ ENDP			; CPPanel::DisplayBlit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
tv217 = -3148						; size = 4
tv269 = -3144						; size = 4
tv178 = -3140						; size = 4
tv133 = -3136						; size = 4
tv256 = -3132						; size = 4
_i$1 = -3128						; size = 4
_i$2 = -3124						; size = 4
_i$3 = -3120						; size = 4
_panelPlt$ = -3116					; size = 4
_i$4 = -3112						; size = 4
_i$5 = -3108						; size = 4
_this$ = -3104						; size = 4
_adiHsiPlt$ = -3100					; size = 1024
_lightPlt$ = -2076					; size = 1024
_outPlt$ = -1052					; size = 1024
_fLight$ = -28						; size = 12
_iLight$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?SetPalette@CPPanel@@QAEXXZ PROC			; CPPanel::SetPalette
; _this$ = ecx

; 553  : void CPPanel::SetPalette(){

	push	ebp
	mov	ebp, esp
	sub	esp, 3148				; 00000c4cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 554  : 	// flood and instrument lights
; 555  : 	float fLight[3], iLight[3];
; 556  : 	OTWDriver.pCockpitManager->ComputeLightFactors(fLight, iLight);

	lea	eax, DWORD PTR _iLight$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fLight$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?ComputeLightFactors@CockpitManager@@QAEXPAM0@Z ; CockpitManager::ComputeLightFactors

; 557  : 
; 558  : 	// apply lighting to the palette, cockpit lights have their own palette, like HSI and ADI
; 559  : 	DWORD *panelPlt;
; 560  : 	DWORD outPlt[256], lightPlt[256], adiHsiPlt[256];
; 561  : 	panelPlt = gpTemplatePalette;

	mov	edx, DWORD PTR ?gpTemplatePalette@@3PAKA ; gpTemplatePalette
	mov	DWORD PTR _panelPlt$[ebp], edx

; 562  : 
; 563  : 	// set the new palette, from 1, because 0 is transparency
; 564  : 	outPlt[0] = (OTWDriver.renderer->GetGreenMode()) ? 
; 565  : 		CalculateNVGColor(CalculateColor(panelPlt[0], fLight[0], fLight[1], fLight[2])):
; 566  : 		CalculateColor(panelPlt[0], fLight[0], fLight[1], fLight[2])
; 567  : 	;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@SetPalette
	mov	ecx, 4
	shl	ecx, 1
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _panelPlt$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN24@SetPalette
$LN23@SetPalette:
	mov	ecx, 4
	shl	ecx, 1
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _panelPlt$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv133[ebp], eax
$LN24@SetPalette:
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _outPlt$[ebp+ecx], edx

; 568  : 	adiHsiPlt[0] = lightPlt[0] = outPlt[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _outPlt$[ebp+eax]
	mov	DWORD PTR _lightPlt$[ebp+ecx], edx
	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _lightPlt$[ebp+eax]
	mov	DWORD PTR _adiHsiPlt$[ebp+ecx], edx

; 569  : 	for (int i=1;i<(256-48);i++){

	mov	DWORD PTR _i$5[ebp], 1
	jmp	SHORT $LN20@SetPalette
$LN19@SetPalette:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN20@SetPalette:
	cmp	DWORD PTR _i$5[ebp], 208		; 000000d0H
	jge	$LN18@SetPalette

; 570  : 		// all except hsi and adi, which use instrument light in everything
; 571  : 		outPlt[i] = (OTWDriver.renderer->GetGreenMode()) ?
; 572  : 			CalculateNVGColor(CalculateColor(panelPlt[i], fLight[0], fLight[1], fLight[2])) :			
; 573  : 			CalculateColor(panelPlt[i], fLight[0], fLight[1], fLight[2])
; 574  : 		;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN25@SetPalette
	mov	edx, 4
	shl	edx, 1
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _panelPlt$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv178[ebp], eax
	jmp	SHORT $LN26@SetPalette
$LN25@SetPalette:
	mov	edx, 4
	shl	edx, 1
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _fLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _panelPlt$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv178[ebp], eax
$LN26@SetPalette:
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR tv178[ebp]
	mov	DWORD PTR _outPlt$[ebp+edx*4], eax

; 575  : 		lightPlt[i] = outPlt[i];

	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _outPlt$[ebp+edx*4]
	mov	DWORD PTR _lightPlt$[ebp+ecx*4], eax

; 576  : 		adiHsiPlt[i] = (OTWDriver.renderer->GetGreenMode()) ?
; 577  : 			CalculateNVGColor(CalculateColor(panelPlt[i], iLight[0], iLight[1], iLight[2])) :			
; 578  : 			CalculateColor(panelPlt[i], iLight[0], iLight[1], iLight[2])
; 579  : 		;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN27@SetPalette
	mov	edx, 4
	shl	edx, 1
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _panelPlt$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv217[ebp], eax
	jmp	SHORT $LN28@SetPalette
$LN27@SetPalette:
	mov	edx, 4
	shl	edx, 1
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR _panelPlt$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv217[ebp], eax
$LN28@SetPalette:
	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR tv217[ebp]
	mov	DWORD PTR _adiHsiPlt$[ebp+edx*4], eax

; 580  : 	}

	jmp	$LN19@SetPalette
$LN18@SetPalette:

; 581  : 	for (int i=256-48;i<256;i++){

	mov	DWORD PTR _i$3[ebp], 208		; 000000d0H
	jmp	SHORT $LN17@SetPalette
$LN16@SetPalette:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN17@SetPalette:
	cmp	DWORD PTR _i$3[ebp], 256		; 00000100H
	jge	$LN15@SetPalette

; 582  : 		// adi and hsi are like the rest here
; 583  : 		adiHsiPlt[i] = outPlt[i] = (OTWDriver.renderer->GetGreenMode()) ?
; 584  : 			CalculateNVGColor(CalculateColor(panelPlt[i], iLight[0], iLight[1], iLight[2])) :			
; 585  : 			CalculateColor(panelPlt[i], iLight[0], iLight[1], iLight[2])
; 586  : 		;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN29@SetPalette
	mov	eax, 4
	shl	eax, 1
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _panelPlt$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	push	eax
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv256[ebp], eax
	jmp	SHORT $LN30@SetPalette
$LN29@SetPalette:
	mov	eax, 4
	shl	eax, 1
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _iLight$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _panelPlt$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?CalculateColor@@YAKKMMM@Z		; CalculateColor
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv256[ebp], eax
$LN30@SetPalette:
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR tv256[ebp]
	mov	DWORD PTR _outPlt$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR tv256[ebp]
	mov	DWORD PTR _adiHsiPlt$[ebp+edx*4], eax

; 587  : 		// but for lights, use full brightness for last 48 colors always
; 588  : 		lightPlt[i] = (OTWDriver.renderer->GetGreenMode()) ?
; 589  : 			CalculateNVGColor(panelPlt[i]):
; 590  : 			panelPlt[i]
; 591  : 		;

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN31@SetPalette
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR _panelPlt$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	?CalculateNVGColor@@YAKK@Z		; CalculateNVGColor
	add	esp, 4
	mov	DWORD PTR tv269[ebp], eax
	jmp	SHORT $LN32@SetPalette
$LN31@SetPalette:
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR _panelPlt$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv269[ebp], ecx
$LN32@SetPalette:
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR tv269[ebp]
	mov	DWORD PTR _lightPlt$[ebp+edx*4], eax

; 592  : 	}

	jmp	$LN16@SetPalette
$LN15@SetPalette:

; 593  : 
; 594  : 	//we have the new palette at outPlt, 
; 595  : 	//apply it to everything, except for lights, which use their own palette
; 596  : 	for (int i=mNumSurfaces-1; i>=0; i--){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	sub	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
	jmp	SHORT $LN14@SetPalette
$LN13@SetPalette:
	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN14@SetPalette:
	cmp	DWORD PTR _i$1[ebp], 0
	jl	SHORT $LN12@SetPalette

; 597  : 		mpSurfaceData[i].psurface->Translate3D(outPlt);

	lea	ecx, DWORD PTR _outPlt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	ecx, DWORD PTR [ecx+edx+12]
	call	?Translate3D@CPSurface@@QAEXPAK@Z	; CPSurface::Translate3D

; 598  : 	}

	jmp	SHORT $LN13@SetPalette
$LN12@SetPalette:

; 599  : 	for (int i = mNumObjects-1; i >= 0; i--){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	sub	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
	jmp	SHORT $LN11@SetPalette
$LN10@SetPalette:
	mov	ecx, DWORD PTR _i$4[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$4[ebp], ecx
$LN11@SetPalette:
	cmp	DWORD PTR _i$4[ebp], 0
	jl	$LN9@SetPalette

; 600  : 		if (dynamic_cast<CPLight*>(mpObjects[i]) != NULL){

	push	0
	push	OFFSET ??_R0?AVCPLight@@@8
	push	OFFSET ??_R0?AVCPObject@@@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	push	0
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	___RTDynamicCast
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN8@SetPalette

; 601  : 			mpObjects[i]->Translate3D(lightPlt);

	lea	eax, DWORD PTR _lightPlt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	call	?Translate3D@CPObject@@QAEXPAK@Z	; CPObject::Translate3D

; 602  : 		}
; 603  : 		else if (

	jmp	$LN4@SetPalette
$LN8@SetPalette:

; 604  : 			(dynamic_cast<CPHsi*>(mpObjects[i]) != NULL) || 
; 605  : 			(dynamic_cast<CPAdi*>(mpObjects[i]) != NULL) ||
; 606  : 			(dynamic_cast<CPIndicator*>(mpObjects[i]) != NULL)
; 607  : 		){

	push	0
	push	OFFSET ??_R0?AVCPHsi@@@8
	push	OFFSET ??_R0?AVCPObject@@@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	0
	mov	eax, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	___RTDynamicCast
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN5@SetPalette
	push	0
	push	OFFSET ??_R0?AVCPAdi@@@8
	push	OFFSET ??_R0?AVCPObject@@@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	push	0
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	___RTDynamicCast
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN5@SetPalette
	push	0
	push	OFFSET ??_R0?AVCPIndicator@@@8
	push	OFFSET ??_R0?AVCPObject@@@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	0
	mov	edx, DWORD PTR _i$4[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	___RTDynamicCast
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN6@SetPalette
$LN5@SetPalette:

; 608  : 			mpObjects[i]->Translate3D(adiHsiPlt);

	lea	ecx, DWORD PTR _adiHsiPlt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	call	?Translate3D@CPObject@@QAEXPAK@Z	; CPObject::Translate3D

; 609  : 		}
; 610  : 		else {

	jmp	SHORT $LN4@SetPalette
$LN6@SetPalette:

; 611  : 			mpObjects[i]->Translate3D(outPlt);

	lea	edx, DWORD PTR _outPlt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$4[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	call	?Translate3D@CPObject@@QAEXPAK@Z	; CPObject::Translate3D
$LN4@SetPalette:

; 612  : 		}
; 613  : 	}

	jmp	$LN10@SetPalette
$LN9@SetPalette:

; 614  : 	for (int i = mNumButtonViews-1; i>=0; i--){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	sub	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
	jmp	SHORT $LN3@SetPalette
$LN2@SetPalette:
	mov	edx, DWORD PTR _i$2[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN3@SetPalette:
	cmp	DWORD PTR _i$2[ebp], 0
	jl	SHORT $LN1@SetPalette

; 615  : 		mpButtonViews[i]->Translate3D(outPlt);

	lea	eax, DWORD PTR _outPlt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	call	?Translate3D@CPButtonView@@QAEXPAK@Z	; CPButtonView::Translate3D

; 616  : 	}

	jmp	SHORT $LN2@SetPalette
$LN1@SetPalette:

; 617  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetPalette@CPPanel@@QAEXXZ ENDP			; CPPanel::SetPalette
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_pixelsize$ = -2144					; size = 4
tv76 = -2140						; size = 4
tv82 = -2136						; size = 4
tv69 = -2132						; size = 4
_mask$1 = -2128						; size = 4
_mask$ = -2124						; size = 4
_inColor$ = -2120					; size = 4
_inColor$2 = -2116					; size = 4
_lighting$ = -2112					; size = 4
_lighting$3 = -2108					; size = 4
_palEnd$4 = -2104					; size = 4
_palEnd$ = -2100					; size = 4
_i$ = -2096						; size = 4
_this$ = -2092						; size = 4
_i$5 = -2088						; size = 4
_red$ = -2082						; size = 1
_blue$6 = -2081						; size = 1
_green$7 = -2080					; size = 1
_red$8 = -2079						; size = 1
_green$ = -2078						; size = 1
_blue$ = -2077						; size = 1
_palTgt$9 = -2076					; size = 4
_outColor$ = -2072					; size = 4
_palTgt$ = -2068					; size = 4
_palData$10 = -2064					; size = 4
_outColor$11 = -2060					; size = 4
_palData$ = -2056					; size = 4
_palette16$ = -2052					; size = 1024
_palette16$12 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_lightLevel$ = 8					; size = 4
?SetTOD@CPPanel@@QAEXM@Z PROC				; CPPanel::SetTOD
; _this$ = ecx

; 620  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2144				; 00000860H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 621  : 	SetPalette();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPalette@CPPanel@@QAEXXZ		; CPPanel::SetPalette

; 622  : 	return;

	jmp	$LN58@SetTOD

; 623  : 	
; 624  : 	int pixelsize = (gpTemplateSurface)?gpTemplateSurface->PixelSize() : TemplateInfo->pixelsize;

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	je	SHORT $LN60@SetTOD
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?PixelSize@ImageBuffer@@QAEHXZ		; ImageBuffer::PixelSize
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN61@SetTOD
$LN60@SetTOD:
	mov	eax, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv69[ebp], ecx
$LN61@SetTOD:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _pixelsize$[ebp], edx

; 625  : 
; 626  : 		DWORD		palette16[256];
; 627  : 		DWORD		*palTgt		= palette16;

	lea	eax, DWORD PTR _palette16$[ebp]
	mov	DWORD PTR _palTgt$[ebp], eax

; 628  : 		GLulong		*palData	= gpTemplatePalette;

	mov	ecx, DWORD PTR ?gpTemplatePalette@@3PAKA ; gpTemplatePalette
	mov	DWORD PTR _palData$[ebp], ecx

; 629  : 		GLulong		*palEnd		= palData + 208;	// Entries 208 through 255 are special...

	mov	edx, DWORD PTR _palData$[ebp]
	add	edx, 832				; 00000340H
	mov	DWORD PTR _palEnd$[ebp], edx

; 630  : 
; 631  : 		DWORD	lighting;
; 632  : 		DWORD	inColor;
; 633  : 		DWORD	outColor;
; 634  : 		int		i;
; 635  : 		DWORD	mask;
; 636  : 		BYTE red, green, blue;
; 637  : 
; 638  : 		ShiAssert(FALSE == F4IsBadReadPtr(palData, 256 * sizeof (*palData)));
; 639  : 		ShiAssert(FALSE == F4IsBadWritePtr(palTgt, 256 * sizeof (*palTgt)));
; 640  : 
; 641  : 		// Just copy the chromakey color without lighting it
; 642  : 		
; 643  : 		if (!gpTemplateSurface)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	SHORT $LN57@SetTOD

; 644  : 			*palTgt++ = TemplateInfo->Pixel32toPixel32( *palData++ );

	mov	eax, DWORD PTR _palData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	push	edx
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	call	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ; TemplateInfoClass::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _palTgt$[ebp]
	add	edx, 4
	mov	DWORD PTR _palTgt$[ebp], edx
	mov	eax, DWORD PTR _palData$[ebp]
	add	eax, 4
	mov	DWORD PTR _palData$[ebp], eax

; 645  : 		else								

	jmp	SHORT $LN56@SetTOD
$LN57@SetTOD:

; 646  : 			*palTgt++ = gpTemplateSurface->Pixel32toPixel32( *palData++ );

	mov	ecx, DWORD PTR _palData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR tv82[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _palTgt$[ebp]
	add	edx, 4
	mov	DWORD PTR _palTgt$[ebp], edx
	mov	eax, DWORD PTR _palData$[ebp]
	add	eax, 4
	mov	DWORD PTR _palData$[ebp], eax
$LN56@SetTOD:

; 647  : 
; 648  : 		// Now walk the palette and create a 32 bit lit version
; 649  : 		if(OTWDriver.renderer->GetGreenMode())

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	ecx, al
	test	ecx, ecx
	je	$LN55@SetTOD

; 650  : 		{
; 651  : 			// Convert from floating point to a 16.16 fixed point representation
; 652  : 			lighting = FloatToInt32(lightLevel * 65536.0f);

	movss	xmm0, DWORD PTR _lightLevel$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _lighting$[ebp], eax

; 653  : 
; 654  : 			// Use only green
; 655  : 			mask = 0xFF00FF00;

	mov	DWORD PTR _mask$[ebp], -16711936	; ff00ff00H
$LN54@SetTOD:

; 656  : 
; 657  : 			// Light the palette entries and convert to 16 bit colors
; 658  : 			do
; 659  : 			{
; 660  : 				inColor = *palData;

	mov	edx, DWORD PTR _palData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _inColor$[ebp], eax

; 661  : 
; 662  : 				outColor  = ((((inColor)     & 0xFF) * lighting) >> 16);

	mov	ecx, DWORD PTR _inColor$[ebp]
	and	ecx, 255				; 000000ffH
	imul	ecx, DWORD PTR _lighting$[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _outColor$[ebp], ecx

; 663  : 				outColor |= ((((inColor>>8)  & 0xFF) * lighting) >> 8) & 0x0000FF00;

	mov	edx, DWORD PTR _inColor$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	imul	edx, DWORD PTR _lighting$[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	edx, DWORD PTR _outColor$[ebp]
	mov	DWORD PTR _outColor$[ebp], edx

; 664  : 				outColor |= ((((inColor>>16) & 0xFF) * lighting))      & 0x00FF0000;

	mov	eax, DWORD PTR _inColor$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	imul	eax, DWORD PTR _lighting$[ebp]
	and	eax, 16711680				; 00ff0000H
	or	eax, DWORD PTR _outColor$[ebp]
	mov	DWORD PTR _outColor$[ebp], eax

; 665  : 
; 666  : 				blue		= (BYTE)(((outColor) >> 16) & 0xFF);

	mov	ecx, DWORD PTR _outColor$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _blue$[ebp], cl

; 667  : 				green		= (BYTE)(((outColor) >> 8)  & 0xFF);

	mov	edx, DWORD PTR _outColor$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _green$[ebp], dl

; 668  : 				red		= (BYTE)((outColor)	  		 & 0xFF);

	mov	eax, DWORD PTR _outColor$[ebp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _red$[ebp], al

; 669  : 				outColor = ( ((BYTE) (0.299F * red + 0.587F * green + 0.114 * blue)) & 0xFF) << 8;

	movzx	ecx, BYTE PTR _red$[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3e991687
	movzx	edx, BYTE PTR _green$[ebp]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3f1645a2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	movzx	eax, BYTE PTR _blue$[ebp]
	cvtsi2sd xmm1, eax
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	cvttsd2si ecx, xmm0
	movzx	edx, cl
	and	edx, 255				; 000000ffH
	shl	edx, 8
	mov	DWORD PTR _outColor$[ebp], edx

; 670  : 
; 671  : 				if (!gpTemplateSurface)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	SHORT $LN51@SetTOD

; 672  : 					*palTgt = TemplateInfo->Pixel32toPixel32( outColor );

	mov	eax, DWORD PTR _outColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	call	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ; TemplateInfoClass::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [ecx], eax

; 673  : 				else													

	jmp	SHORT $LN50@SetTOD
$LN51@SetTOD:

; 674  : 					*palTgt = gpTemplateSurface->Pixel32toPixel32( outColor );

	mov	edx, DWORD PTR _outColor$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN50@SetTOD:

; 675  : 
; 676  : 
; 677  : 				palData++;

	mov	edx, DWORD PTR _palData$[ebp]
	add	edx, 4
	mov	DWORD PTR _palData$[ebp], edx

; 678  : 				palTgt++;

	mov	eax, DWORD PTR _palTgt$[ebp]
	add	eax, 4
	mov	DWORD PTR _palTgt$[ebp], eax

; 679  : 			} while (palData < palEnd);

	mov	ecx, DWORD PTR _palData$[ebp]
	cmp	ecx, DWORD PTR _palEnd$[ebp]
	jb	$LN54@SetTOD

; 680  : 
; 681  : 			// Entries 208 through 255 are special (unlit)
; 682  : 			palEnd += (256-208);

	mov	edx, DWORD PTR _palEnd$[ebp]
	add	edx, 192				; 000000c0H
	mov	DWORD PTR _palEnd$[ebp], edx
$LN49@SetTOD:

; 683  : 
; 684  : 			do
; 685  : 			{
; 686  : 				blue		= (BYTE)(((*palData) >> 16) & 0xFF);

	mov	eax, DWORD PTR _palData$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _blue$[ebp], cl

; 687  : 				green		= (BYTE)(((*palData) >> 8)  & 0xFF);

	mov	edx, DWORD PTR _palData$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _green$[ebp], al

; 688  : 				red		= (BYTE)((*palData)	       & 0xFF);

	mov	ecx, DWORD PTR _palData$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _red$[ebp], dl

; 689  : 				outColor = ( (int) (0.299F * red + 0.587F * green + 0.114 * blue) & 0xFF) << 8;

	movzx	eax, BYTE PTR _red$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e991687
	movzx	ecx, BYTE PTR _green$[ebp]
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3f1645a2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	movzx	edx, BYTE PTR _blue$[ebp]
	cvtsi2sd xmm1, edx
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	cvttsd2si eax, xmm0
	and	eax, 255				; 000000ffH
	shl	eax, 8
	mov	DWORD PTR _outColor$[ebp], eax

; 690  : 
; 691  : 				if (!gpTemplateSurface)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	SHORT $LN46@SetTOD

; 692  : 					*palTgt = TemplateInfo->Pixel32toPixel32( outColor );

	mov	ecx, DWORD PTR _outColor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	call	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ; TemplateInfoClass::Pixel32toPixel32
	mov	edx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [edx], eax

; 693  : 				else													

	jmp	SHORT $LN45@SetTOD
$LN46@SetTOD:

; 694  : 					*palTgt = gpTemplateSurface->Pixel32toPixel32( outColor );

	mov	eax, DWORD PTR _outColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN45@SetTOD:

; 695  : 				
; 696  : 				palData++;

	mov	edx, DWORD PTR _palData$[ebp]
	add	edx, 4
	mov	DWORD PTR _palData$[ebp], edx

; 697  : 				palTgt++;

	mov	eax, DWORD PTR _palTgt$[ebp]
	add	eax, 4
	mov	DWORD PTR _palTgt$[ebp], eax

; 698  : 			} while (palData < palEnd);

	mov	ecx, DWORD PTR _palData$[ebp]
	cmp	ecx, DWORD PTR _palEnd$[ebp]
	jb	$LN49@SetTOD

; 699  : 		}
; 700  : 
; 701  : 		else

	jmp	$LN36@SetTOD
$LN55@SetTOD:

; 702  : 		{ 
; 703  : 			// Convert from floating point to a 16.16 fixed point representation
; 704  : 			lighting = FloatToInt32(lightLevel * 65536.0f);

	movss	xmm0, DWORD PTR _lightLevel$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _lighting$[ebp], eax

; 705  : 
; 706  : 			// Use full color
; 707  : 			mask = 0xFFFFFFFF;

	mov	DWORD PTR _mask$[ebp], -1
$LN43@SetTOD:

; 708  : 
; 709  : 			// Light the palette entries and convert to 16 bit colors
; 710  : 			do
; 711  : 			{
; 712  : 				inColor = *palData;

	mov	edx, DWORD PTR _palData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _inColor$[ebp], eax

; 713  : 
; 714  : 				outColor  = ((((inColor)     & 0xFF) * lighting) >> 16);

	mov	ecx, DWORD PTR _inColor$[ebp]
	and	ecx, 255				; 000000ffH
	imul	ecx, DWORD PTR _lighting$[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _outColor$[ebp], ecx

; 715  : 				outColor |= ((((inColor>>8)  & 0xFF) * lighting) >> 8) & 0x0000FF00;

	mov	edx, DWORD PTR _inColor$[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	imul	edx, DWORD PTR _lighting$[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	edx, DWORD PTR _outColor$[ebp]
	mov	DWORD PTR _outColor$[ebp], edx

; 716  : 				outColor |= ((((inColor>>16) & 0xFF) * lighting))      & 0x00FF0000;

	mov	eax, DWORD PTR _inColor$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	imul	eax, DWORD PTR _lighting$[ebp]
	and	eax, 16711680				; 00ff0000H
	or	eax, DWORD PTR _outColor$[ebp]
	mov	DWORD PTR _outColor$[ebp], eax

; 717  : 							
; 718  : 				if (!gpTemplateSurface)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	SHORT $LN40@SetTOD

; 719  : 					*palTgt = TemplateInfo->Pixel32toPixel32( outColor & mask );

	mov	ecx, DWORD PTR _outColor$[ebp]
	and	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	call	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ; TemplateInfoClass::Pixel32toPixel32
	mov	edx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [edx], eax

; 720  : 				else													

	jmp	SHORT $LN39@SetTOD
$LN40@SetTOD:

; 721  : 					*palTgt = gpTemplateSurface->Pixel32toPixel32( outColor & mask );

	mov	eax, DWORD PTR _outColor$[ebp]
	and	eax, DWORD PTR _mask$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN39@SetTOD:

; 722  : 
; 723  : 				palData++;

	mov	edx, DWORD PTR _palData$[ebp]
	add	edx, 4
	mov	DWORD PTR _palData$[ebp], edx

; 724  : 				palTgt++;

	mov	eax, DWORD PTR _palTgt$[ebp]
	add	eax, 4
	mov	DWORD PTR _palTgt$[ebp], eax

; 725  : 			} while (palData < palEnd);

	mov	ecx, DWORD PTR _palData$[ebp]
	cmp	ecx, DWORD PTR _palEnd$[ebp]
	jb	$LN43@SetTOD

; 726  : 
; 727  : 			// Entries 208 through 255 are special (unlit)
; 728  : 			palEnd += (256-208);

	mov	edx, DWORD PTR _palEnd$[ebp]
	add	edx, 192				; 000000c0H
	mov	DWORD PTR _palEnd$[ebp], edx
$LN38@SetTOD:

; 729  : 
; 730  : 			do
; 731  : 			{						
; 732  : 				if (!gpTemplateSurface)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	SHORT $LN35@SetTOD

; 733  : 					*palTgt = TemplateInfo->Pixel32toPixel32( *palData & mask );

	mov	eax, DWORD PTR _palData$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	call	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ; TemplateInfoClass::Pixel32toPixel32
	mov	edx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [edx], eax

; 734  : 				else													

	jmp	SHORT $LN34@SetTOD
$LN35@SetTOD:

; 735  : 					*palTgt = gpTemplateSurface->Pixel32toPixel32( *palData & mask );

	mov	eax, DWORD PTR _palData$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	edx, DWORD PTR _palTgt$[ebp]
	mov	DWORD PTR [edx], eax
$LN34@SetTOD:

; 736  : 
; 737  : 				palData++;

	mov	eax, DWORD PTR _palData$[ebp]
	add	eax, 4
	mov	DWORD PTR _palData$[ebp], eax

; 738  : 				palTgt++;

	mov	ecx, DWORD PTR _palTgt$[ebp]
	add	ecx, 4
	mov	DWORD PTR _palTgt$[ebp], ecx

; 739  : 			} while (palData < palEnd);

	mov	edx, DWORD PTR _palData$[ebp]
	cmp	edx, DWORD PTR _palEnd$[ebp]
	jb	SHORT $LN38@SetTOD
$LN36@SetTOD:

; 740  : 		}
; 741  : 
; 742  : 		// Now convert all the 8 bit sources to 16 bit lit versions
; 743  : 		if (gpTemplateSurface&&gpTemplateImage)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	je	SHORT $LN33@SetTOD
	cmp	DWORD PTR ?gpTemplateImage@@3PAEA, 0	; gpTemplateImage
	je	SHORT $LN33@SetTOD

; 744  : 			Translate8to32( palette16, 
; 745  : 						gpTemplateImage,			//	8 bit color indexes of template
; 746  : 						gpTemplateSurface );		//	16 bit ImageBuffer

	mov	eax, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	push	eax
	mov	ecx, DWORD PTR ?gpTemplateImage@@3PAEA	; gpTemplateImage
	push	ecx
	lea	edx, DWORD PTR _palette16$[ebp]
	push	edx
	call	?Translate8to32@@YAXPAKPAEPAVImageBuffer@@@Z ; Translate8to32
	add	esp, 12					; 0000000cH
$LN33@SetTOD:

; 747  : 
; 748  : 		for (i=mNumSurfaces-1; i>=0; i--)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN32@SetTOD
$LN31@SetTOD:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN32@SetTOD:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN30@SetTOD

; 749  : 			mpSurfaceData[i].psurface->Translate(palette16);

	lea	eax, DWORD PTR _palette16$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [eax+ecx+12]
	call	?Translate@CPSurface@@QAEXPAK@Z		; CPSurface::Translate
	jmp	SHORT $LN31@SetTOD
$LN30@SetTOD:

; 750  : 
; 751  : 		for (i = 0; i < mNumObjects; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN29@SetTOD
$LN28@SetTOD:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN29@SetTOD:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+136]
	jge	SHORT $LN27@SetTOD

; 752  : 			mpObjects[i]->Translate((DWORD *)palette16);

	lea	ecx, DWORD PTR _palette16$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	eax, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	jmp	SHORT $LN28@SetTOD
$LN27@SetTOD:

; 753  : 
; 754  : 		if(DisplayOptions.bRender2DCockpit)

	movzx	ecx, BYTE PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+17
	test	ecx, ecx
	je	$LN1@SetTOD

; 755  : 		{
; 756  : 			DWORD		palette16[256];
; 757  : 			DWORD		*palTgt		= palette16;

	lea	edx, DWORD PTR _palette16$12[ebp]
	mov	DWORD PTR _palTgt$9[ebp], edx

; 758  : 			GLulong		*palData	= gpTemplatePalette;

	mov	eax, DWORD PTR ?gpTemplatePalette@@3PAKA ; gpTemplatePalette
	mov	DWORD PTR _palData$10[ebp], eax

; 759  : 			GLulong		*palEnd		= palData + 208;	// Entries 208 through 255 are special...

	mov	ecx, DWORD PTR _palData$10[ebp]
	add	ecx, 832				; 00000340H
	mov	DWORD PTR _palEnd$4[ebp], ecx

; 760  : 
; 761  : 			DWORD	lighting;
; 762  : 			DWORD	inColor;
; 763  : 			DWORD	outColor;
; 764  : 			int		i;
; 765  : 			DWORD	mask;
; 766  : 			BYTE red, green, blue;
; 767  : 
; 768  : 			// Just copy the chromakey color without lighting it
; 769  : 			*palTgt++ = *palData++;

	mov	edx, DWORD PTR _palTgt$9[ebp]
	mov	eax, DWORD PTR _palData$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _palTgt$9[ebp]
	add	edx, 4
	mov	DWORD PTR _palTgt$9[ebp], edx
	mov	eax, DWORD PTR _palData$10[ebp]
	add	eax, 4
	mov	DWORD PTR _palData$10[ebp], eax

; 770  : 
; 771  : 			// Now walk the palette and create a 32 bit lit version
; 772  : 			if(OTWDriver.renderer->GetGreenMode())

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?GetGreenMode@RenderOTW@@QAE_NXZ	; RenderOTW::GetGreenMode
	movzx	ecx, al
	test	ecx, ecx
	je	$LN25@SetTOD

; 773  : 			{
; 774  : 				// Convert from floating point to a 16.16 fixed point representation
; 775  : 				lighting = FloatToInt32(lightLevel * 65536.0f);

	movss	xmm0, DWORD PTR _lightLevel$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _lighting$3[ebp], eax

; 776  : 
; 777  : 				// Use only green
; 778  : 				mask = 0xFF00FF00;

	mov	DWORD PTR _mask$1[ebp], -16711936	; ff00ff00H
$LN24@SetTOD:

; 779  : 
; 780  : 				// Light the palette entries and convert to 16 bit colors
; 781  : 				do
; 782  : 				{
; 783  : 					inColor = *palData;

	mov	edx, DWORD PTR _palData$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _inColor$2[ebp], eax

; 784  : 
; 785  : 					outColor  = ((((inColor)     & 0xFF) * lighting) >> 16);

	mov	ecx, DWORD PTR _inColor$2[ebp]
	and	ecx, 255				; 000000ffH
	imul	ecx, DWORD PTR _lighting$3[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _outColor$11[ebp], ecx

; 786  : 					outColor |= ((((inColor>>8)  & 0xFF) * lighting) >> 8) & 0x0000FF00;

	mov	edx, DWORD PTR _inColor$2[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	imul	edx, DWORD PTR _lighting$3[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	edx, DWORD PTR _outColor$11[ebp]
	mov	DWORD PTR _outColor$11[ebp], edx

; 787  : 					outColor |= ((((inColor>>16) & 0xFF) * lighting))      & 0x00FF0000;

	mov	eax, DWORD PTR _inColor$2[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	imul	eax, DWORD PTR _lighting$3[ebp]
	and	eax, 16711680				; 00ff0000H
	or	eax, DWORD PTR _outColor$11[ebp]
	mov	DWORD PTR _outColor$11[ebp], eax

; 788  : 
; 789  : 					blue		= (BYTE)(((outColor) >> 16) & 0xFF);

	mov	ecx, DWORD PTR _outColor$11[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _blue$6[ebp], cl

; 790  : 					green		= (BYTE)(((outColor) >> 8)  & 0xFF);

	mov	edx, DWORD PTR _outColor$11[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _green$7[ebp], dl

; 791  : 					red		= (BYTE)((outColor)	  		 & 0xFF);

	mov	eax, DWORD PTR _outColor$11[ebp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _red$8[ebp], al

; 792  : 					outColor = ( ((BYTE) (0.299F * red + 0.587F * green + 0.114 * blue)) & 0xFF) << 8;

	movzx	ecx, BYTE PTR _red$8[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3e991687
	movzx	edx, BYTE PTR _green$7[ebp]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3f1645a2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	movzx	eax, BYTE PTR _blue$6[ebp]
	cvtsi2sd xmm1, eax
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	cvttsd2si ecx, xmm0
	movzx	edx, cl
	and	edx, 255				; 000000ffH
	shl	edx, 8
	mov	DWORD PTR _outColor$11[ebp], edx

; 793  : 					outColor |= 0xff000000;		// OW add alpha

	mov	eax, DWORD PTR _outColor$11[ebp]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _outColor$11[ebp], eax

; 794  : 
; 795  : 					*palTgt = outColor;

	mov	ecx, DWORD PTR _palTgt$9[ebp]
	mov	edx, DWORD PTR _outColor$11[ebp]
	mov	DWORD PTR [ecx], edx

; 796  : 
; 797  : 					palData++;

	mov	eax, DWORD PTR _palData$10[ebp]
	add	eax, 4
	mov	DWORD PTR _palData$10[ebp], eax

; 798  : 					palTgt++;

	mov	ecx, DWORD PTR _palTgt$9[ebp]
	add	ecx, 4
	mov	DWORD PTR _palTgt$9[ebp], ecx

; 799  : 				} while (palData < palEnd);

	mov	edx, DWORD PTR _palData$10[ebp]
	cmp	edx, DWORD PTR _palEnd$4[ebp]
	jb	$LN24@SetTOD

; 800  : 
; 801  : 				// Entries 208 through 255 are special (unlit)
; 802  : 				palEnd += (256-208);

	mov	eax, DWORD PTR _palEnd$4[ebp]
	add	eax, 192				; 000000c0H
	mov	DWORD PTR _palEnd$4[ebp], eax
$LN21@SetTOD:

; 803  : 
; 804  : 				do
; 805  : 				{
; 806  : 					blue		= (BYTE)(((*palData) >> 16) & 0xFF);

	mov	ecx, DWORD PTR _palData$10[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _blue$6[ebp], dl

; 807  : 					green		= (BYTE)(((*palData) >> 8)  & 0xFF);

	mov	eax, DWORD PTR _palData$10[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _green$7[ebp], cl

; 808  : 					red		= (BYTE)((*palData)	       & 0xFF);

	mov	edx, DWORD PTR _palData$10[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _red$8[ebp], al

; 809  : 					outColor = ( (int) (0.299F * red + 0.587F * green + 0.114 * blue) & 0xFF) << 8;

	movzx	ecx, BYTE PTR _red$8[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3e991687
	movzx	edx, BYTE PTR _green$7[ebp]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3f1645a2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	movzx	eax, BYTE PTR _blue$6[ebp]
	cvtsi2sd xmm1, eax
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	cvttsd2si ecx, xmm0
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	mov	DWORD PTR _outColor$11[ebp], ecx

; 810  : 					outColor |= 0xff000000;		// OW add alpha

	mov	edx, DWORD PTR _outColor$11[ebp]
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR _outColor$11[ebp], edx

; 811  : 
; 812  : 					if (!gpTemplateSurface)

	cmp	DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A, 0 ; gpTemplateSurface
	jne	SHORT $LN18@SetTOD

; 813  : 						*palTgt = TemplateInfo->Pixel32toPixel32( outColor );

	mov	eax, DWORD PTR _outColor$11[ebp]
	push	eax
	mov	ecx, DWORD PTR ?TemplateInfo@@3PAVTemplateInfoClass@@A ; TemplateInfo
	call	?Pixel32toPixel32@TemplateInfoClass@@QAEKK@Z ; TemplateInfoClass::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$9[ebp]
	mov	DWORD PTR [ecx], eax

; 814  : 					else													

	jmp	SHORT $LN17@SetTOD
$LN18@SetTOD:

; 815  : 						*palTgt = gpTemplateSurface->Pixel32toPixel32( outColor );

	mov	edx, DWORD PTR _outColor$11[ebp]
	push	edx
	mov	ecx, DWORD PTR ?gpTemplateSurface@@3PAVImageBuffer@@A ; gpTemplateSurface
	call	?Pixel32toPixel32@ImageBuffer@@QAEKK@Z	; ImageBuffer::Pixel32toPixel32
	mov	ecx, DWORD PTR _palTgt$9[ebp]
	mov	DWORD PTR [ecx], eax
$LN17@SetTOD:

; 816  : 				
; 817  : 					palData++;

	mov	edx, DWORD PTR _palData$10[ebp]
	add	edx, 4
	mov	DWORD PTR _palData$10[ebp], edx

; 818  : 					palTgt++;

	mov	eax, DWORD PTR _palTgt$9[ebp]
	add	eax, 4
	mov	DWORD PTR _palTgt$9[ebp], eax

; 819  : 				} while (palData < palEnd);

	mov	ecx, DWORD PTR _palData$10[ebp]
	cmp	ecx, DWORD PTR _palEnd$4[ebp]
	jb	$LN21@SetTOD

; 820  : 			}
; 821  : 
; 822  : 			else

	jmp	$LN10@SetTOD
$LN25@SetTOD:

; 823  : 			{ 
; 824  : 				// Convert from floating point to a 16.16 fixed point representation
; 825  : 				lighting = FloatToInt32(lightLevel * 65536.0f);

	movss	xmm0, DWORD PTR _lightLevel$[ebp]
	mulss	xmm0, DWORD PTR __real@47800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _lighting$3[ebp], eax

; 826  : 
; 827  : 				// Use full color
; 828  : 				mask = 0xFFFFFFFF;

	mov	DWORD PTR _mask$1[ebp], -1
$LN15@SetTOD:

; 829  : 
; 830  : 				// Light the palette entries and convert to 16 bit colors
; 831  : 				do
; 832  : 				{
; 833  : 					inColor = *palData;

	mov	edx, DWORD PTR _palData$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _inColor$2[ebp], eax

; 834  : 
; 835  : 					outColor  = ((((inColor)     & 0xFF) * lighting) >> 16);

	mov	ecx, DWORD PTR _inColor$2[ebp]
	and	ecx, 255				; 000000ffH
	imul	ecx, DWORD PTR _lighting$3[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _outColor$11[ebp], ecx

; 836  : 					outColor |= ((((inColor>>8)  & 0xFF) * lighting) >> 8) & 0x0000FF00;

	mov	edx, DWORD PTR _inColor$2[ebp]
	shr	edx, 8
	and	edx, 255				; 000000ffH
	imul	edx, DWORD PTR _lighting$3[ebp]
	shr	edx, 8
	and	edx, 65280				; 0000ff00H
	or	edx, DWORD PTR _outColor$11[ebp]
	mov	DWORD PTR _outColor$11[ebp], edx

; 837  : 					outColor |= ((((inColor>>16) & 0xFF) * lighting))      & 0x00FF0000;

	mov	eax, DWORD PTR _inColor$2[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	imul	eax, DWORD PTR _lighting$3[ebp]
	and	eax, 16711680				; 00ff0000H
	or	eax, DWORD PTR _outColor$11[ebp]
	mov	DWORD PTR _outColor$11[ebp], eax

; 838  : 					outColor |= 0xff000000;		// OW add alpha

	mov	ecx, DWORD PTR _outColor$11[ebp]
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _outColor$11[ebp], ecx

; 839  : 
; 840  : 					*palTgt = outColor & mask;

	mov	edx, DWORD PTR _outColor$11[ebp]
	and	edx, DWORD PTR _mask$1[ebp]
	mov	eax, DWORD PTR _palTgt$9[ebp]
	mov	DWORD PTR [eax], edx

; 841  : 
; 842  : 					palData++;

	mov	ecx, DWORD PTR _palData$10[ebp]
	add	ecx, 4
	mov	DWORD PTR _palData$10[ebp], ecx

; 843  : 					palTgt++;

	mov	edx, DWORD PTR _palTgt$9[ebp]
	add	edx, 4
	mov	DWORD PTR _palTgt$9[ebp], edx

; 844  : 				} while (palData < palEnd);

	mov	eax, DWORD PTR _palData$10[ebp]
	cmp	eax, DWORD PTR _palEnd$4[ebp]
	jb	$LN15@SetTOD

; 845  : 
; 846  : 				// Entries 208 through 255 are special (unlit)
; 847  : 				palEnd += (256-208);

	mov	ecx, DWORD PTR _palEnd$4[ebp]
	add	ecx, 192				; 000000c0H
	mov	DWORD PTR _palEnd$4[ebp], ecx
$LN12@SetTOD:

; 848  : 
; 849  : 				do
; 850  : 				{
; 851  : 					*palTgt = *palData & mask;

	mov	edx, DWORD PTR _palData$10[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, DWORD PTR _mask$1[ebp]
	mov	ecx, DWORD PTR _palTgt$9[ebp]
	mov	DWORD PTR [ecx], eax

; 852  : 					palData++;

	mov	edx, DWORD PTR _palData$10[ebp]
	add	edx, 4
	mov	DWORD PTR _palData$10[ebp], edx

; 853  : 					palTgt++;

	mov	eax, DWORD PTR _palTgt$9[ebp]
	add	eax, 4
	mov	DWORD PTR _palTgt$9[ebp], eax

; 854  : 				} while (palData < palEnd);

	mov	ecx, DWORD PTR _palData$10[ebp]
	cmp	ecx, DWORD PTR _palEnd$4[ebp]
	jb	SHORT $LN12@SetTOD
$LN10@SetTOD:

; 855  : 			}
; 856  : 
; 857  : 			for (i=mNumSurfaces-1; i>=0; i--)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	sub	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
	jmp	SHORT $LN9@SetTOD
$LN8@SetTOD:
	mov	ecx, DWORD PTR _i$5[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN9@SetTOD:
	cmp	DWORD PTR _i$5[ebp], 0
	jl	SHORT $LN7@SetTOD

; 858  : 				mpSurfaceData[i].psurface->Translate3D(palette16);

	lea	edx, DWORD PTR _palette16$12[ebp]
	push	edx
	mov	eax, DWORD PTR _i$5[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	ecx, DWORD PTR [edx+eax+12]
	call	?Translate3D@CPSurface@@QAEXPAK@Z	; CPSurface::Translate3D
	jmp	SHORT $LN8@SetTOD
$LN7@SetTOD:

; 859  : 
; 860  : 			for (i = 0; i < mNumObjects; i++)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN6@SetTOD
$LN5@SetTOD:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN6@SetTOD:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$5[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN4@SetTOD

; 861  : 				mpObjects[i]->Translate3D(palette16);

	lea	eax, DWORD PTR _palette16$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	eax, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	call	?Translate3D@CPObject@@QAEXPAK@Z	; CPObject::Translate3D
	jmp	SHORT $LN5@SetTOD
$LN4@SetTOD:

; 862  : 
; 863  : 			for (i = 0; i < mNumButtonViews; i++)		//Wombat778 3-23-04  Added for rendered buttonviews (buttonviews arent objects)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN3@SetTOD
$LN2@SetTOD:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN3@SetTOD:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$5[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jge	SHORT $LN1@SetTOD

; 864  : 				mpButtonViews[i]->Translate3D(palette16);

	lea	ecx, DWORD PTR _palette16$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	call	?Translate3D@CPButtonView@@QAEXPAK@Z	; CPButtonView::Translate3D
	jmp	SHORT $LN2@SetTOD
$LN1@SetTOD:
$LN58@SetTOD:

; 865  : 
; 866  : 		}
; 867  : 
; 868  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTOD@CPPanel@@QAEXM@Z ENDP				; CPPanel::SetTOD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?DiscardLitSurfaces@CPPanel@@QAEXXZ PROC		; CPPanel::DiscardLitSurfaces
; _this$ = ecx

; 527  : void CPPanel::DiscardLitSurfaces(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 528  : 	
; 529  : 	int	i;
; 530  : 
; 531  : 	for(i = 0; i < mNumSurfaces; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@DiscardLit
$LN8@DiscardLit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@DiscardLit:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+124]
	jge	SHORT $LN7@DiscardLit

; 532  : 
; 533  : 		mpSurfaceData[i].psurface->DiscardLit();

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	ecx, DWORD PTR [edx+eax+12]
	call	?DiscardLit@CPSurface@@QAEXXZ		; CPSurface::DiscardLit

; 534  : 	}

	jmp	SHORT $LN8@DiscardLit
$LN7@DiscardLit:

; 535  : 
; 536  : 	for(i = 0; i < mNumObjects; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@DiscardLit
$LN5@DiscardLit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@DiscardLit:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN4@DiscardLit

; 537  : 
; 538  : 		mpObjects[i]->DiscardLit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+20]
	call	edx

; 539  : 	}

	jmp	SHORT $LN5@DiscardLit
$LN4@DiscardLit:

; 540  : 
; 541  : 	for(i = 0; i < mNumButtonViews; i++) {	//Wombat778 3-23-04 Added for rendered buttonviews

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DiscardLit
$LN2@DiscardLit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@DiscardLit:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+144]
	jge	SHORT $LN10@DiscardLit

; 542  : 
; 543  : 		mpButtonViews[i]->DiscardLit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 544  : 	}

	jmp	SHORT $LN2@DiscardLit
$LN10@DiscardLit:

; 545  : 
; 546  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DiscardLitSurfaces@CPPanel@@QAEXXZ ENDP		; CPPanel::DiscardLitSurfaces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_lightLevel$ = 8					; size = 4
?CreateLitSurfaces@CPPanel@@QAEXM@Z PROC		; CPPanel::CreateLitSurfaces
; _this$ = ecx

; 510  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 511  : 	
; 512  : 	int	i;
; 513  : 
; 514  : 	for(i = 0; i < mNumSurfaces; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@CreateLitS
$LN8@CreateLitS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@CreateLitS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+124]
	jge	SHORT $LN7@CreateLitS

; 515  : 		mpSurfaceData[i].psurface->CreateLit();

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	ecx, DWORD PTR [edx+eax+12]
	call	?CreateLit@CPSurface@@QAEXXZ		; CPSurface::CreateLit
	jmp	SHORT $LN8@CreateLitS
$LN7@CreateLitS:

; 516  : 
; 517  : 	for(i = 0; i < mNumObjects; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CreateLitS
$LN5@CreateLitS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CreateLitS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN4@CreateLitS

; 518  : 		mpObjects[i]->CreateLit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	jmp	SHORT $LN5@CreateLitS
$LN4@CreateLitS:

; 519  : 
; 520  : 	for(i = 0; i < mNumButtonViews; i++)		//Wombat778 3-23-04 Added for rendered buttonviews

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@CreateLitS
$LN2@CreateLitS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@CreateLitS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+144]
	jge	SHORT $LN1@CreateLitS

; 521  : 		mpButtonViews[i]->CreateLit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax]
	call	edx
	jmp	SHORT $LN2@CreateLitS
$LN1@CreateLitS:

; 522  : 
; 523  : 	SetTOD(lightLevel);

	push	ecx
	movss	xmm0, DWORD PTR _lightLevel$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTOD@CPPanel@@QAEXM@Z		; CPPanel::SetTOD

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreateLitSurfaces@CPPanel@@QAEXM@Z ENDP		; CPPanel::CreateLitSurfaces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
_pOwnship$ = 8						; size = 4
_CycleBit$ = 12						; size = 4
?Exec@CPPanel@@QAEXPAVSimBaseClass@@H@Z PROC		; CPPanel::Exec
; _this$ = ecx

; 193  : void CPPanel::Exec(SimBaseClass* pOwnship, int CycleBit) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 194  : 
; 195  : 	int i;
; 196  : 
; 197  : 	for(i = 0; i < mNumObjects; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Exec
$LN7@Exec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@Exec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jge	SHORT $LN6@Exec

; 198  : 		if(mpObjects[i]->mCycleBits & CycleBit) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, DWORD PTR _CycleBit$[ebp]
	je	SHORT $LN5@Exec

; 199  : 			mpObjects[i]->Exec(pOwnship);

	mov	edx, DWORD PTR _pOwnship$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax]
	call	edx
$LN5@Exec:

; 200  : 		}
; 201  : 	}

	jmp	SHORT $LN7@Exec
$LN6@Exec:

; 202  : 	if (CycleBit & END_CYCLE) {

	mov	eax, DWORD PTR _CycleBit$[ebp]
	and	eax, 32768				; 00008000H
	je	SHORT $LN9@Exec

; 203  : 	    for(i = 0; i < mNumButtonViews; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Exec
$LN2@Exec:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@Exec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jge	SHORT $LN9@Exec

; 204  : 			mpButtonViews[i]->UpdateView();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	call	?UpdateView@CPButtonView@@QAEXXZ	; CPButtonView::UpdateView

; 205  : 	    }

	jmp	SHORT $LN2@Exec
$LN9@Exec:

; 206  : 	}
; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Exec@CPPanel@@QAEXPAVSimBaseClass@@H@Z ENDP		; CPPanel::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??1CPPanel@@UAE@XZ PROC					; CPPanel::~CPPanel
; _this$ = ecx

; 143  : CPPanel::~CPPanel() {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPPanel@@6B@

; 144  : 	int	i;
; 145  : 
; 146  : 	if (mpSurfaceData) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN8@CPPanel

; 147  : 		delete [] mpSurfaceData;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@CPPanel:

; 148  : 	}
; 149  : 
; 150  : #if CPPANEL_STL
; 151  : 	mpObjectIDs.clear();
; 152  : 	mpButtonViewsIDs.clear();
; 153  : 
; 154  : 	for (
; 155  : 		vector<CPObject*>::iterator it=mpObjects.begin();
; 156  : 		it != mpObjects.end();
; 157  : 		++it
; 158  : 	){
; 159  : 		delete *it;
; 160  : 	}
; 161  : 	mpObjects.clear();
; 162  : 	for (vector<CPButtonView*>::iterator it=mpButtonViews.begin(); it != mpButtonViews.end(); ++it){
; 163  : 		delete *it;
; 164  : 	}
; 165  : 	mpButtonViews.clear();
; 166  : 
; 167  : #else
; 168  : 	if (mpObjectIDs)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+140], 0
	je	SHORT $LN7@CPPanel

; 169  : 	{
; 170  : 		delete [] mpObjectIDs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 171  : 		delete [] mpObjects;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN7@CPPanel:

; 172  : 	}
; 173  : 	if(mpButtonViewIDs) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	SHORT $LN6@CPPanel

; 174  : 		delete [] mpButtonViewIDs;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@CPPanel:

; 175  : 	}
; 176  : 	if(mpButtonViews) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+156], 0
	je	SHORT $LN5@CPPanel

; 177  : 		delete [] mpButtonViews;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@CPPanel:

; 178  : 	}
; 179  : #endif
; 180  : 
; 181  : 	for(i = 0; i < BOUNDS_TOTAL; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CPPanel
$LN3@CPPanel:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@CPPanel:
	cmp	DWORD PTR _i$[ebp], 6
	jge	SHORT $LN9@CPPanel

; 182  : 		if(mpViewBounds[i]) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+92], 0
	je	SHORT $LN1@CPPanel

; 183  : 			delete mpViewBounds[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+92]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@CPPanel:

; 184  : 		}
; 185  : 	}

	jmp	SHORT $LN3@CPPanel
$LN9@CPPanel:

; 186  : 
; 187  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CPPanel@@UAE@XZ ENDP					; CPPanel::~CPPanel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\cockpit\cppanel.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_ppanelInitStr$ = 8					; size = 4
??0CPPanel@@QAE@PAUPanelInitStr@@@Z PROC		; CPPanel::CPPanel
; _this$ = ecx

; 52   : CPPanel::CPPanel(PanelInitStr* ppanelInitStr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPPanel@@6B@

; 53   : 	int		i;
; 54   : 
; 55   : 	mIdNum						= ppanelInitStr->idNum;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 56   : 									
; 57   : 	mxPanelOffset				= ppanelInitStr->xOffset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+8], eax

; 58   : 	myPanelOffset				= ppanelInitStr->yOffset;	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+12], eax

; 59   : 									
; 60   : 	mNumSurfaces				= ppanelInitStr->numSurfaces;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+124], eax

; 61   : 	mpSurfaceData				= ppanelInitStr->psurfaceData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+128], eax

; 62   : 									
; 63   : 	mNumObjects					= ppanelInitStr->numObjects;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+136], eax

; 64   : #if CPPANEL_STL
; 65   : 
; 66   : #else
; 67   : 	mpObjectIDs					= ppanelInitStr->pobjectIDs;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+140], eax

; 68   : #endif
; 69   : 	mHudFont                = ppanelInitStr->hudFont;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+788]
	mov	DWORD PTR [ecx+16], eax

; 70   : 	mMFDFont                = ppanelInitStr->mfdFont;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+792]
	mov	DWORD PTR [ecx+20], eax

; 71   : 	mDEDFont                = ppanelInitStr->dedFont;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	eax, DWORD PTR [edx+796]
	mov	DWORD PTR [ecx+24], eax

; 72   : 							
; 73   : 	#ifdef USE_SH_POOLS
; 74   : 	if(mNumObjects > 0) {
; 75   : 		mpObjects = (CPObject **)MemAllocPtr(gCockMemPool,sizeof(CPObject *)*mNumObjects,FALSE);
; 76   : 	}
; 77   : 	#else
; 78   : 	mpObjects					= new CPObject*[mNumObjects];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+152], ecx

; 79   : 	#endif
; 80   : 									
; 81   : 									
; 82   : 	mNumButtonViews			= ppanelInitStr->numButtonViews;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+144], ecx

; 83   : 	mpButtonViewIDs			= ppanelInitStr->pbuttonViewIDs;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+148], ecx

; 84   : 
; 85   : 	mpButtonViews				= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+156], 0

; 86   : #ifdef USE_SH_POOLS
; 87   : 	if(mNumButtonViews > 0) {
; 88   : 		mpButtonViews = (CPButtonView **)MemAllocPtr(gCockMemPool,sizeof(CPButtonView *)*mNumButtonViews,FALSE);
; 89   : 	}
; 90   : #else
; 91   : 	mpButtonViews				= new CPButtonView*[mNumButtonViews];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+156], ecx

; 92   : #endif
; 93   : 																
; 94   : 	mpOTWImage					= ppanelInitStr->pOtwImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR [edx+800], ecx

; 95   : 									
; 96   : 	mPan							= ppanelInitStr->pan * DTR;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+80], xmm0

; 97   : 	mTilt							= ppanelInitStr->tilt * DTR;

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+84], xmm0

; 98   : 
; 99   : 	mHScale						= ppanelInitStr->hScale;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+780]
	mov	DWORD PTR [eax+116], edx

; 100  : 	mVScale						= ppanelInitStr->vScale;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+784]
	mov	DWORD PTR [eax+120], edx

; 101  : 	ppanelInitStr->maskTop	= (int)(ppanelInitStr->maskTop * mVScale);

	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+120]
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR [eax+12], edx

; 102  : 	mMaskTop						= (ppanelInitStr->cockpitHeight * 0.5F - ppanelInitStr->maskTop) / (ppanelInitStr->cockpitHeight * 0.5F);

	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+100]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+12]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+100]
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+88], xmm0

; 103  : 
; 104  : 	mDoGeometry					= ppanelInitStr->doGeometry;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR [edx+132], ecx

; 105  : 	
; 106  : 	for(i = 0; i < BOUNDS_TOTAL; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@CPPanel
$LN4@CPPanel:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@CPPanel:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN3@CPPanel

; 107  : 		if(ppanelInitStr->pviewRects[i]) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	cmp	DWORD PTR [ecx+eax*4+104], 0
	je	SHORT $LN2@CPPanel

; 108  : 
; 109  : 			#ifdef USE_SH_POOLS
; 110  : 			mpViewBounds[i] = (ViewportBounds *)MemAllocPtr(gCockMemPool,sizeof(ViewportBounds),FALSE);
; 111  : 			#else
; 112  : 			mpViewBounds[i]	= new ViewportBounds;

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+edx*4+92], ecx

; 113  : 			#endif
; 114  : 
; 115  : 			ConvertRecttoVBounds(ppanelInitStr->pviewRects[i], 
; 116  : 										mpViewBounds[i], 
; 117  : 										ppanelInitStr->cockpitWidth, 
; 118  : 										ppanelInitStr->cockpitHeight, 
; 119  : 										mHScale, mVScale);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+120]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+116]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ppanelInitStr$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+92]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+104]
	push	ecx
	call	?ConvertRecttoVBounds@@YAXPAUtagRECT@@PAUViewportBounds@@HHMM@Z ; ConvertRecttoVBounds
	add	esp, 24					; 00000018H

; 120  : 
; 121  : 			delete ppanelInitStr->pviewRects[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+104]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 122  : 		}
; 123  : 		else {

	jmp	SHORT $LN1@CPPanel
$LN2@CPPanel:

; 124  : 
; 125  : 			mpViewBounds[i]	= NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+92], 0
$LN1@CPPanel:

; 126  : 		}
; 127  : 	}

	jmp	$LN4@CPPanel
$LN3@CPPanel:

; 128  : 
; 129  : 	mDefaultCursor				= ppanelInitStr->defaultCursor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR [edx+76], ecx

; 130  : 	mMouseBounds				= ppanelInitStr->mouseBounds;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	add	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx

; 131  : 	mAdjacentPanels			= ppanelInitStr->adjacentPanels;

	mov	esi, DWORD PTR _ppanelInitStr$[ebp]
	add	esi, 60					; 0000003cH
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 44					; 0000002cH
	mov	ecx, 8
	rep movsd

; 132  : 
; 133  :    memcpy (osbLocation, ppanelInitStr->osbLocation, sizeof (osbLocation));

	push	640					; 00000280H
	mov	eax, DWORD PTR _ppanelInitStr$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 134  : 
; 135  : 	delete ppanelInitStr;

	mov	edx, DWORD PTR _ppanelInitStr$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 136  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0CPPanel@@QAE@PAUPanelInitStr@@@Z ENDP		; CPPanel::CPPanel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\cpobject.h
;	COMDAT ?SetDirtyFlag@CPObject@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDirtyFlag@CPObject@@QAEXXZ PROC			; CPObject::SetDirtyFlag, COMDAT
; _this$ = ecx

; 108  : 	void			SetDirtyFlag() {mDirtyFlag = TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDirtyFlag@CPObject@@QAEXXZ ENDP			; CPObject::SetDirtyFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\button.h
;	COMDAT ?SetDirtyFlag@CPButtonView@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDirtyFlag@CPButtonView@@QAEXXZ PROC			; CPButtonView::SetDirtyFlag, COMDAT
; _this$ = ecx

; 245  : 	void						SetDirtyFlag() {mDirtyFlag = TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDirtyFlag@CPButtonView@@QAEXXZ ENDP			; CPButtonView::SetDirtyFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\renderow.h
;	COMDAT ?GetGreenMode@RenderOTW@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGreenMode@RenderOTW@@QAE_NXZ PROC			; RenderOTW::GetGreenMode, COMDAT
; _this$ = ecx

; 167  : 	inline bool GetGreenMode() { return GreenMode; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+263368]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGreenMode@RenderOTW@@QAE_NXZ ENDP			; RenderOTW::GetGreenMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetOffset@Render2D@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetOffset@Render2D@@QAEXMM@Z PROC			; Render2D::SetOffset, COMDAT
; _this$ = ecx

; 58   : 	void SetOffset(float x, float y) { OffsetX=x; OffsetY=y; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+262832], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+262836], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetOffset@Render2D@@QAEXMM@Z ENDP			; Render2D::SetOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\imagebuf.h
;	COMDAT ?PixelSize@ImageBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PixelSize@ImageBuffer@@QAEHXZ PROC			; ImageBuffer::PixelSize, COMDAT
; _this$ = ecx

; 56   : 	int	PixelSize() { return m_ddsdFront.ddpfPixelFormat.dwRGBBitCount >>3; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	shr	eax, 3
	mov	esp, ebp
	pop	ebp
	ret	0
?PixelSize@ImageBuffer@@QAEHXZ ENDP			; ImageBuffer::PixelSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 83   :         {return; }

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 81   :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
