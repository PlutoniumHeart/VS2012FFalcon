; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\SIMLIB\simveh.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?RequestReliableTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestReliableTransmit
PUBLIC	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ	; VuMessage::RequestOutOfBandTransmit
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?IsCampaign@FalconEntity@@QAEHXZ		; FalconEntity::IsCampaign
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?IsSimObjective@FalconEntity@@QAEHXZ		; FalconEntity::IsSimObjective
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDInt5@@YAHXZ				; PRANDInt5
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	?PRANDFloatPos@@YAMXZ				; PRANDFloatPos
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?JoinFlight@SimBaseClass@@UAEXXZ		; SimBaseClass::JoinFlight
PUBLIC	?IsSimBase@SimBaseClass@@UAE_NXZ		; SimBaseClass::IsSimBase
PUBLIC	?GetCountry@SimBaseClass@@UAEEXZ		; SimBaseClass::GetCountry
PUBLIC	?GetDomain@SimBaseClass@@QBEEXZ			; SimBaseClass::GetDomain
PUBLIC	?GetType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetType
PUBLIC	?OnGround@SimBaseClass@@UAEHXZ			; SimBaseClass::OnGround
PUBLIC	?IsExploding@SimBaseClass@@UAEHXZ		; SimBaseClass::IsExploding
PUBLIC	?IsDead@SimBaseClass@@UBEHXZ			; SimBaseClass::IsDead
PUBLIC	?IsAwake@SimBaseClass@@QBEHXZ			; SimBaseClass::IsAwake
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?PowerOutput@SimBaseClass@@QAEMXZ		; SimBaseClass::PowerOutput
PUBLIC	?GetTransform@SimBaseClass@@UAEXQAY02M@Z	; SimBaseClass::GetTransform
PUBLIC	?MakePlayerVehicle@SimBaseClass@@UAEXXZ		; SimBaseClass::MakePlayerVehicle
PUBLIC	?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ	; SimBaseClass::MakeNonPlayerVehicle
PUBLIC	?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ	; SimBaseClass::ConfigurePlayerAvionics
PUBLIC	?SetVuPosition@SimBaseClass@@UAEXXZ		; SimBaseClass::SetVuPosition
PUBLIC	?Regenerate@SimBaseClass@@UAEXMMMM@Z		; SimBaseClass::Regenerate
PUBLIC	?LastShooter@SimBaseClass@@QAE?AVVU_ID@@XZ	; SimBaseClass::LastShooter
PUBLIC	?Mass@SimBaseClass@@UAEMXZ			; SimBaseClass::Mass
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?SetLead@SimMoverClass@@UAEXH@Z			; SimMoverClass::SetLead
PUBLIC	?IsMover@SimMoverClass@@UAEHXZ			; SimMoverClass::IsMover
PUBLIC	?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z ; SimVehicleClass::SendFireMessage
PUBLIC	?InitWeapons@SimVehicleClass@@QAEXPAG0@Z	; SimVehicleClass::InitWeapons
PUBLIC	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z	; SimVehicleClass::SOIManager
PUBLIC	?StepSOI@SimVehicleClass@@QAEXH@Z		; SimVehicleClass::StepSOI
PUBLIC	?GetWayPointNo@SimVehicleClass@@QAEPAVWayPointClass@@H@Z ; SimVehicleClass::GetWayPointNo
PUBLIC	?ReceiveOrders@SimVehicleClass@@UAEXPAVFalconEvent@@@Z ; SimVehicleClass::ReceiveOrders
PUBLIC	?ApplyProximityDamage@SimVehicleClass@@QAEXXZ	; SimVehicleClass::ApplyProximityDamage
PUBLIC	??0SimVehicleClass@@QAE@H@Z			; SimVehicleClass::SimVehicleClass
PUBLIC	??0SimVehicleClass@@QAE@PAPAEPAJ@Z		; SimVehicleClass::SimVehicleClass
PUBLIC	??0SimVehicleClass@@QAE@PAU_iobuf@@@Z		; SimVehicleClass::SimVehicleClass
PUBLIC	??1SimVehicleClass@@UAE@XZ			; SimVehicleClass::~SimVehicleClass
PUBLIC	?InitData@SimVehicleClass@@UAEXXZ		; SimVehicleClass::InitData
PUBLIC	?CleanupData@SimVehicleClass@@UAEXXZ		; SimVehicleClass::CleanupData
PUBLIC	?InitLocalData@SimVehicleClass@@AAEXXZ		; SimVehicleClass::InitLocalData
PUBLIC	?CleanupLocalData@SimVehicleClass@@AAEXXZ	; SimVehicleClass::CleanupLocalData
PUBLIC	?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z ; SimVehicleClass::Init
PUBLIC	?Wake@SimVehicleClass@@UAEHXZ			; SimVehicleClass::Wake
PUBLIC	?Sleep@SimVehicleClass@@UAEHXZ			; SimVehicleClass::Sleep
PUBLIC	?MakeLocal@SimVehicleClass@@UAEXXZ		; SimVehicleClass::MakeLocal
PUBLIC	?MakeRemote@SimVehicleClass@@UAEXXZ		; SimVehicleClass::MakeRemote
PUBLIC	?Exec@SimVehicleClass@@UAEHXZ			; SimVehicleClass::Exec
PUBLIC	?SetDead@SimVehicleClass@@UAEXH@Z		; SimVehicleClass::SetDead
PUBLIC	?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z ; SimVehicleClass::ApplyDamage
PUBLIC	?GetFCC@SimVehicleClass@@UAEPAVFireControlComputer@@XZ ; SimVehicleClass::GetFCC
PUBLIC	?GetSMS@SimVehicleClass@@UAEPAVSMSBaseClass@@XZ	; SimVehicleClass::GetSMS
PUBLIC	?GetRCSFactor@SimVehicleClass@@UAEMXZ		; SimVehicleClass::GetRCSFactor
PUBLIC	?GetIRFactor@SimVehicleClass@@UAEMXZ		; SimVehicleClass::GetIRFactor
PUBLIC	?GetRadarType@SimVehicleClass@@UAEHXZ		; SimVehicleClass::GetRadarType
PUBLIC	?GetTotalFuel@SimVehicleClass@@UAEJXZ		; SimVehicleClass::GetTotalFuel
PUBLIC	?HasPilot@SimVehicleClass@@UAEHXZ		; SimVehicleClass::HasPilot
PUBLIC	?IsVehicle@SimVehicleClass@@UAEHXZ		; SimVehicleClass::IsVehicle
PUBLIC	?WeaponKeepAlive@SimVehicleClass@@UAEXXZ	; SimVehicleClass::WeaponKeepAlive
PUBLIC	?SaveSize@SimVehicleClass@@UAEHXZ		; SimVehicleClass::SaveSize
PUBLIC	?Save@SimVehicleClass@@UAEHPAPAE@Z		; SimVehicleClass::Save
PUBLIC	?Save@SimVehicleClass@@UAEHPAU_iobuf@@@Z	; SimVehicleClass::Save
PUBLIC	?Handle@SimVehicleClass@@UAEHPAVVuFullUpdateEvent@@@Z ; SimVehicleClass::Handle
PUBLIC	?Handle@SimVehicleClass@@UAEHPAVVuPositionUpdateEvent@@@Z ; SimVehicleClass::Handle
PUBLIC	?Handle@SimVehicleClass@@UAEHPAVVuTransferEvent@@@Z ; SimVehicleClass::Handle
PUBLIC	?InsertionCallback@SimVehicleClass@@UAEHXZ	; SimVehicleClass::InsertionCallback
PUBLIC	??_GSimVehicleClass@@UAEPAXI@Z			; SimVehicleClass::`scalar deleting destructor'
PUBLIC	??_GPilotInputs@@QAEPAXI@Z			; PilotInputs::`scalar deleting destructor'
PUBLIC	?IsSOI@DrawableClass@@QAEHXZ			; DrawableClass::IsSOI
PUBLIC	?SetSOI@DrawableClass@@QAEXH@Z			; DrawableClass::SetSOI
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?GetNextWP@WayPointClass@@QAEPAV1@XZ		; WayPointClass::GetNextWP
PUBLIC	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
PUBLIC	?IsAGMasterMode@FireControlComputer@@QAEHXZ	; FireControlComputer::IsAGMasterMode
PUBLIC	?IsAAMasterMode@FireControlComputer@@QAEHXZ	; FireControlComputer::IsAAMasterMode
PUBLIC	?IsNavMasterMode@FireControlComputer@@QAEHXZ	; FireControlComputer::IsNavMasterMode
PUBLIC	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
PUBLIC	?ClearSOIAll@FireControlComputer@@QAEXXZ	; FireControlComputer::ClearSOIAll
PUBLIC	?NewBurst@GunClass@@QAEXXZ			; GunClass::NewBurst
PUBLIC	?GetCurrentBurst@GunClass@@QAEHXZ		; GunClass::GetCurrentBurst
PUBLIC	?GetDisplayType@MissileClass@@QAEHXZ		; MissileClass::GetDisplayType
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?GetOwner@CampBaseClass@@QAEEXZ			; CampBaseClass::GetOwner
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?GetEngineDamageStopThreshold@AirframeClass@@QAEHXZ ; AirframeClass::GetEngineDamageStopThreshold
PUBLIC	?GetEngineDamageNoRestartThreshold@AirframeClass@@QAEHXZ ; AirframeClass::GetEngineDamageNoRestartThreshold
PUBLIC	?GetEngineDamageHitThreshold@AirframeClass@@QAEHXZ ; AirframeClass::GetEngineDamageHitThreshold
PUBLIC	?SetFlag@AirframeClass@@QAEXH@Z			; AirframeClass::SetFlag
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_7SimVehicleClass@@6B@			; SimVehicleClass::`vftable'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SimVehicleClass@@6B@			; SimVehicleClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSimVehicleClass@@@8			; SimVehicleClass `RTTI Type Descriptor'
PUBLIC	??_R3SimVehicleClass@@8				; SimVehicleClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimVehicleClass@@8				; SimVehicleClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimVehicleClass@@8		; SimVehicleClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SimMoverClass@@8			; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimMoverClass@@@8			; SimMoverClass `RTTI Type Descriptor'
PUBLIC	??_R3SimMoverClass@@8				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimMoverClass@@8				; SimMoverClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimBaseClass@@8			; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimBaseClass@@@8			; SimBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3SimBaseClass@@8				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimBaseClass@@8				; SimBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@3fa47ae140000000
PUBLIC	__real@3fb33333
PUBLIC	__real@3fc00000
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@3ff00000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40200000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@42200000
PUBLIC	__real@42c80000
PUBLIC	__real@42f00000
PUBLIC	__real@43000000
PUBLIC	__real@451c4000
PUBLIC	__real@459c4000
PUBLIC	__real@46a6257a
PUBLIC	__real@46afc800
PUBLIC	__real@477fff00
PUBLIC	__real@47afc800
PUBLIC	__real@bf800000
PUBLIC	__real@c5610000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEvent@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z:PROC ; VuGridIterator::VuGridIterator
EXTRN	??1VuGridIterator@@UAE@XZ:PROC			; VuGridIterator::~VuGridIterator
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?Sfx@F4SoundPos@@QAEXHHMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z:PROC ; DrawableParticleSys::PS_AddParticleEx
EXTRN	?GetTeam@SimBaseClass@@UAEEXZ:PROC		; SimBaseClass::GetTeam
EXTRN	?GetCampID@SimBaseClass@@UAEFXZ:PROC		; SimBaseClass::GetCampID
EXTRN	?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ:PROC ; SimBaseClass::GetMovementType
EXTRN	?SetExploding@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::SetExploding
EXTRN	?IsSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::IsSPJamming
EXTRN	?IsAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::IsAreaJamming
EXTRN	?HasSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::HasSPJamming
EXTRN	?HasAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::HasAreaJamming
EXTRN	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z:PROC ; SimBaseClass::ApplyDamage
EXTRN	?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z:PROC ; SimBaseClass::ApplyDeathMessage
EXTRN	?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z:PROC	; SimBaseClass::GetFocusPoint
EXTRN	?GetP@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetP
EXTRN	?GetQ@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetQ
EXTRN	?GetR@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetR
EXTRN	?GetAlpha@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetAlpha
EXTRN	?GetBeta@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetBeta
EXTRN	?GetNx@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNx
EXTRN	?GetNy@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNy
EXTRN	?GetNz@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNz
EXTRN	?GetGamma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetGamma
EXTRN	?GetSigma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetSigma
EXTRN	?GetMu@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetMu
EXTRN	?GetVt@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetVt
EXTRN	?GetKias@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetKias
EXTRN	??0SimMoverClass@@QAE@H@Z:PROC			; SimMoverClass::SimMoverClass
EXTRN	??0SimMoverClass@@QAE@PAPAEPAJ@Z:PROC		; SimMoverClass::SimMoverClass
EXTRN	??0SimMoverClass@@QAE@PAU_iobuf@@@Z:PROC	; SimMoverClass::SimMoverClass
EXTRN	??1SimMoverClass@@UAE@XZ:PROC			; SimMoverClass::~SimMoverClass
EXTRN	?InitData@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::InitData
EXTRN	?CleanupData@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::CleanupData
EXTRN	?Init@SimMoverClass@@UAEXPAVSimInitDataClass@@@Z:PROC ; SimMoverClass::Init
EXTRN	?Exec@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::Exec
EXTRN	?SetDead@SimMoverClass@@UAEXH@Z:PROC		; SimMoverClass::SetDead
EXTRN	?Sleep@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::Sleep
EXTRN	?Wake@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::Wake
EXTRN	?MakeLocal@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeLocal
EXTRN	?MakeRemote@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeRemote
EXTRN	?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z:PROC	; SimMoverClass::ChangeOwner
EXTRN	?SaveSize@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::SaveSize
EXTRN	?Save@SimMoverClass@@UAEHPAPAE@Z:PROC		; SimMoverClass::Save
EXTRN	?Save@SimMoverClass@@UAEHPAU_iobuf@@@Z:PROC	; SimMoverClass::Save
EXTRN	?Handle@SimMoverClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; SimMoverClass::Handle
EXTRN	?Handle@SimMoverClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; SimMoverClass::Handle
EXTRN	?Handle@SimMoverClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; SimMoverClass::Handle
EXTRN	?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z:PROC ; SimMoverClass::FeatureCollision
EXTRN	?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckLOS
EXTRN	?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckCompositeLOS
EXTRN	?InsertionCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::InsertionCallback
EXTRN	?RemovalCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::RemovalCallback
EXTRN	??_ESimVehicleClass@@UAEPAXI@Z:PROC		; SimVehicleClass::`vector deleting destructor'
EXTRN	?GetViewpoint@OTWDriverClass@@QAEPAVRViewPoint@@XZ:PROC ; OTWDriverClass::GetViewpoint
EXTRN	??1PilotInputs@@QAE@XZ:PROC			; PilotInputs::~PilotInputs
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	??0IrstClass@@QAE@HPAVSimMoverClass@@@Z:PROC	; IrstClass::IrstClass
EXTRN	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ:PROC ; FireControlComputer::GetMainMasterMode
EXTRN	?IsTracer@GunClass@@QAEHXZ:PROC			; GunClass::IsTracer
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	??0FalconDeathMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDeathMessage::FalconDeathMessage
EXTRN	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDamageMessage::FalconDamageMessage
EXTRN	??0FalconWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconWeaponsFire::FalconWeaponsFire
EXTRN	?AddParticleEffect@@YAHHPAUTpoint@@0@Z:PROC	; AddParticleEffect
EXTRN	??0EyeballClass@@QAE@HPAVSimMoverClass@@@Z:PROC	; EyeballClass::EyeballClass
EXTRN	??0RadarDigiClass@@QAE@HPAVSimMoverClass@@@Z:PROC ; RadarDigiClass::RadarDigiClass
EXTRN	??0VehRwrClass@@QAE@HPAVSimMoverClass@@@Z:PROC	; VehRwrClass::VehRwrClass
EXTRN	?GetGroundType@TViewPoint@@QAEHMM@Z:PROC	; TViewPoint::GetGroundType
EXTRN	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z:PROC ; FindLaserPod
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?vuNullId@@3VVU_ID@@A:QWORD			; vuNullId
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?ObjProxList@@3PAVVuGridTree@@A:DWORD		; ObjProxList
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gSfxLOD@@3MA:DWORD				; gSfxLOD
EXTRN	?g_bNewDamageEffects@@3_NA:BYTE			; g_bNewDamageEffects
EXTRN	?g_bDisableFunkyChicken@@3_NA:BYTE		; g_bDisableFunkyChicken
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c5610000
CONST	SEGMENT
__real@c5610000 DD 0c5610000r			; -3600
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@47afc800
CONST	SEGMENT
__real@47afc800 DD 047afc800r			; 90000
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46afc800
CONST	SEGMENT
__real@46afc800 DD 046afc800r			; 22500
CONST	ENDS
;	COMDAT __real@46a6257a
CONST	SEGMENT
__real@46a6257a DD 046a6257ar			; 21266.7
CONST	ENDS
;	COMDAT __real@459c4000
CONST	SEGMENT
__real@459c4000 DD 0459c4000r			; 5000
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3ff00000
CONST	SEGMENT
__real@3ff00000 DD 03ff00000r			; 1.875
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT __real@3fa47ae140000000
CONST	SEGMENT
__real@3fa47ae140000000 DQ 03fa47ae140000000r	; 0.04
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2SimBaseClass@@8
rdata$r	SEGMENT
??_R2SimBaseClass@@8 DD FLAT:??_R1A@?0A@EA@SimBaseClass@@8 ; SimBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimBaseClass@@8
rdata$r	SEGMENT
??_R3SimBaseClass@@8 DD 00H				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimBaseClass@@@8
_DATA	SEGMENT
??_R0?AVSimBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; SimBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimBaseClass@@8 DD FLAT:??_R0?AVSimBaseClass@@@8 ; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimMoverClass@@8
rdata$r	SEGMENT
??_R2SimMoverClass@@8 DD FLAT:??_R1A@?0A@EA@SimMoverClass@@8 ; SimMoverClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimMoverClass@@8
rdata$r	SEGMENT
??_R3SimMoverClass@@8 DD 00H				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimMoverClass@@@8
_DATA	SEGMENT
??_R0?AVSimMoverClass@@@8 DD FLAT:??_7type_info@@6B@	; SimMoverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimMoverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimMoverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimMoverClass@@8 DD FLAT:??_R0?AVSimMoverClass@@@8 ; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SimVehicleClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimVehicleClass@@8 DD FLAT:??_R0?AVSimVehicleClass@@@8 ; SimVehicleClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimVehicleClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimVehicleClass@@8
rdata$r	SEGMENT
??_R2SimVehicleClass@@8 DD FLAT:??_R1A@?0A@EA@SimVehicleClass@@8 ; SimVehicleClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimMoverClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimVehicleClass@@8
rdata$r	SEGMENT
??_R3SimVehicleClass@@8 DD 00H				; SimVehicleClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2SimVehicleClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimVehicleClass@@@8
_DATA	SEGMENT
??_R0?AVSimVehicleClass@@@8 DD FLAT:??_7type_info@@6B@	; SimVehicleClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimVehicleClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SimVehicleClass@@6B@
rdata$r	SEGMENT
??_R4SimVehicleClass@@6B@ DD 00H			; SimVehicleClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSimVehicleClass@@@8
	DD	FLAT:??_R3SimVehicleClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7SimVehicleClass@@6B@
CONST	SEGMENT
??_7SimVehicleClass@@6B@ DD FLAT:??_R4SimVehicleClass@@6B@ ; SimVehicleClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@SimVehicleClass@@UAEHXZ
	DD	FLAT:?Save@SimVehicleClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@SimVehicleClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@SimVehicleClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@SimVehicleClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@SimVehicleClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_ESimVehicleClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@SimVehicleClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?InitData@SimVehicleClass@@UAEXXZ
	DD	FLAT:?CleanupData@SimVehicleClass@@UAEXXZ
	DD	FLAT:?IsSimBase@SimBaseClass@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@SimVehicleClass@@UAEHXZ
	DD	FLAT:?Sleep@SimVehicleClass@@UAEHXZ
	DD	FLAT:?GetCampID@SimBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@SimMoverClass@@UAEHXZ
	DD	FLAT:?IsVehicle@SimVehicleClass@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:?GetVt@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetKias@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetRCSFactor@SimVehicleClass@@UAEMXZ
	DD	FLAT:?GetIRFactor@SimVehicleClass@@UAEMXZ
	DD	FLAT:?GetRadarType@SimVehicleClass@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?WeaponKeepAlive@SimVehicleClass@@UAEXXZ
	DD	FLAT:?JoinFlight@SimBaseClass@@UAEXXZ
	DD	FLAT:?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?MakeLocal@SimVehicleClass@@UAEXXZ
	DD	FLAT:?MakeRemote@SimVehicleClass@@UAEXXZ
	DD	FLAT:?IsDead@SimBaseClass@@UBEHXZ
	DD	FLAT:?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z
	DD	FLAT:?Exec@SimVehicleClass@@UAEHXZ
	DD	FLAT:?GetTransform@SimBaseClass@@UAEXQAY02M@Z
	DD	FLAT:?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	FLAT:?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z
	DD	FLAT:?SetDead@SimVehicleClass@@UAEXH@Z
	DD	FLAT:?MakePlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
	DD	FLAT:?SetVuPosition@SimBaseClass@@UAEXXZ
	DD	FLAT:?Regenerate@SimBaseClass@@UAEXMMMM@Z
	DD	FLAT:?Mass@SimBaseClass@@UAEMXZ
	DD	FLAT:?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z
	DD	FLAT:?GetP@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetQ@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetR@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetAlpha@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetBeta@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNx@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNy@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNz@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetGamma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetSigma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetMu@SimMoverClass@@UAEMXZ
	DD	FLAT:?SetLead@SimMoverClass@@UAEXH@Z
	DD	FLAT:?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z
	DD	FLAT:?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?ReceiveOrders@SimVehicleClass@@UAEXPAVFalconEvent@@@Z
	DD	FLAT:?GetFCC@SimVehicleClass@@UAEPAVFireControlComputer@@XZ
	DD	FLAT:?GetSMS@SimVehicleClass@@UAEPAVSMSBaseClass@@XZ
	DD	FLAT:?GetTotalFuel@SimVehicleClass@@UAEJXZ
	DD	FLAT:?HasPilot@SimVehicleClass@@UAEHXZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z$0
__unwindtable$??1SimVehicleClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1SimVehicleClass@@UAE@XZ$0
__unwindtable$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z$0
__unwindtable$??0SimVehicleClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimVehicleClass@@QAE@PAPAEPAJ@Z$0
__unwindtable$??0SimVehicleClass@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimVehicleClass@@QAE@H@Z$0
__unwindtable$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z$0
__unwindtable$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ$2
__ehfuncinfo$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1SimVehicleClass@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1SimVehicleClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimVehicleClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SimVehicleClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimVehicleClass@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SimVehicleClass@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?SetFlag@AirframeClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlag@AirframeClass@@QAEXH@Z PROC			; AirframeClass::SetFlag, COMDAT
; _this$ = ecx

; 1214 : 	void SetFlag (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@AirframeClass@@QAEXH@Z ENDP			; AirframeClass::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetEngineDamageHitThreshold@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEngineDamageHitThreshold@AirframeClass@@QAEHXZ PROC	; AirframeClass::GetEngineDamageHitThreshold, COMDAT
; _this$ = ecx

; 722  : 	int GetEngineDamageHitThreshold()  { return auxaeroData->engineDamageHitThreshold; }; // 2002-04-11 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEngineDamageHitThreshold@AirframeClass@@QAEHXZ ENDP	; AirframeClass::GetEngineDamageHitThreshold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetEngineDamageNoRestartThreshold@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEngineDamageNoRestartThreshold@AirframeClass@@QAEHXZ PROC ; AirframeClass::GetEngineDamageNoRestartThreshold, COMDAT
; _this$ = ecx

; 721  : 	int	GetEngineDamageNoRestartThreshold() { return auxaeroData->engineDamageNoRestartThreshold; }; // 2002-04-11 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEngineDamageNoRestartThreshold@AirframeClass@@QAEHXZ ENDP ; AirframeClass::GetEngineDamageNoRestartThreshold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\airframe.h
;	COMDAT ?GetEngineDamageStopThreshold@AirframeClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEngineDamageStopThreshold@AirframeClass@@QAEHXZ PROC ; AirframeClass::GetEngineDamageStopThreshold, COMDAT
; _this$ = ecx

; 720  : 	int	GetEngineDamageStopThreshold() { return auxaeroData->engineDamageStopThreshold; }; // 2002-04-11 ADDED BY S.G.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEngineDamageStopThreshold@AirframeClass@@QAEHXZ ENDP ; AirframeClass::GetEngineDamageStopThreshold
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetOwner@CampBaseClass@@QAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwner@CampBaseClass@@QAEEXZ PROC			; CampBaseClass::GetOwner, COMDAT
; _this$ = ecx

; 241  : 	Control GetOwner (void)										{	return owner; }			// Old form

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+154]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwner@CampBaseClass@@QAEEXZ ENDP			; CampBaseClass::GetOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\missile.h
;	COMDAT ?GetDisplayType@MissileClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayType@MissileClass@@QAEHXZ PROC		; MissileClass::GetDisplayType, COMDAT
; _this$ = ecx

; 263  : 	int GetDisplayType (void) { return inputData->displayType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+848]
	mov	eax, DWORD PTR [ecx+96]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayType@MissileClass@@QAEHXZ ENDP		; MissileClass::GetDisplayType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\guns.h
;	COMDAT ?GetCurrentBurst@GunClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentBurst@GunClass@@QAEHXZ PROC			; GunClass::GetCurrentBurst, COMDAT
; _this$ = ecx

; 112  : 	int GetCurrentBurst (void) { return bursts; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+720]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentBurst@GunClass@@QAEHXZ ENDP			; GunClass::GetCurrentBurst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\guns.h
;	COMDAT ?NewBurst@GunClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NewBurst@GunClass@@QAEXXZ PROC				; GunClass::NewBurst, COMDAT
; _this$ = ecx

; 111  : 	void NewBurst (void) { bursts++; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+720]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+720], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?NewBurst@GunClass@@QAEXXZ ENDP				; GunClass::NewBurst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?ClearSOIAll@FireControlComputer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearSOIAll@FireControlComputer@@QAEXXZ PROC		; FireControlComputer::ClearSOIAll, COMDAT
; _this$ = ecx

; 346  : 	void ClearSOIAll(void)	{IsSOI = FALSE; CouldBeSOI = FALSE; HSDZoom = 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+464], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+465], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+468], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearSOIAll@FireControlComputer@@QAEXXZ ENDP		; FireControlComputer::ClearSOIAll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetSubMode, COMDAT
; _this$ = ecx

; 281  : 	FCCSubMode GetSubMode (void) {return (subMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsNavMasterMode@FireControlComputer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsNavMasterMode@FireControlComputer@@QAEHXZ PROC	; FireControlComputer::IsNavMasterMode, COMDAT
; _this$ = ecx

; 280  : 	int IsNavMasterMode() { return GetMainMasterMode() == MM_NAV; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ ; FireControlComputer::GetMainMasterMode
	cmp	eax, 2
	jne	SHORT $LN3@IsNavMaste
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsNavMaste
$LN3@IsNavMaste:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsNavMaste:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNavMasterMode@FireControlComputer@@QAEHXZ ENDP	; FireControlComputer::IsNavMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsAAMasterMode@FireControlComputer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsAAMasterMode@FireControlComputer@@QAEHXZ PROC	; FireControlComputer::IsAAMasterMode, COMDAT
; _this$ = ecx

; 279  : 	int IsAAMasterMode() { return GetMainMasterMode() == MM_AA; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ ; FireControlComputer::GetMainMasterMode
	cmp	eax, 1
	jne	SHORT $LN3@IsAAMaster
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAAMaster
$LN3@IsAAMaster:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAAMaster:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAAMasterMode@FireControlComputer@@QAEHXZ ENDP	; FireControlComputer::IsAAMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsAGMasterMode@FireControlComputer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsAGMasterMode@FireControlComputer@@QAEHXZ PROC	; FireControlComputer::IsAGMasterMode, COMDAT
; _this$ = ecx

; 278  : 	int IsAGMasterMode() { return GetMainMasterMode() == MM_AG; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ ; FireControlComputer::GetMainMasterMode
	test	eax, eax
	jne	SHORT $LN3@IsAGMaster
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAGMaster
$LN3@IsAGMaster:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAGMaster:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAGMasterMode@FireControlComputer@@QAEHXZ ENDP	; FireControlComputer::IsAGMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ PROC ; FireControlComputer::GetMasterMode, COMDAT
; _this$ = ecx

; 276  : 	FCCMasterMode GetMasterMode (void) {return (masterMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ENDP ; FireControlComputer::GetMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?GetNextWP@WayPointClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextWP@WayPointClass@@QAEPAV1@XZ PROC		; WayPointClass::GetNextWP, COMDAT
; _this$ = ecx

; 175  : 	WayPoint GetNextWP (void)						{ return NextWP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextWP@WayPointClass@@QAEPAV1@XZ ENDP		; WayPointClass::GetNextWP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?SetSOI@DrawableClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newVal$ = 8						; size = 4
?SetSOI@DrawableClass@@QAEXH@Z PROC			; DrawableClass::SetSOI, COMDAT
; _this$ = ecx

; 142  :       void SetSOI (int newVal) {if (newVal) drawFlags |= SOI; else drawFlags &= ~SOI; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _newVal$[ebp], 0
	je	SHORT $LN2@SetSOI
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	jmp	SHORT $LN3@SetSOI
$LN2@SetSOI:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN3@SetSOI:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSOI@DrawableClass@@QAEXH@Z ENDP			; DrawableClass::SetSOI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?IsSOI@DrawableClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsSOI@DrawableClass@@QAEHXZ PROC			; DrawableClass::IsSOI, COMDAT
; _this$ = ecx

; 141  :       int IsSOI (void) {return (drawFlags & SOI ? TRUE : FALSE);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN3@IsSOI
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSOI
$LN3@IsSOI:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSOI:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSOI@DrawableClass@@QAEHXZ ENDP			; DrawableClass::IsSOI
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GPilotInputs@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPilotInputs@@QAEPAXI@Z PROC				; PilotInputs::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PilotInputs@@QAE@XZ			; PilotInputs::~PilotInputs
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPilotInputs@@QAEPAXI@Z ENDP				; PilotInputs::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSimVehicleClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSimVehicleClass@@UAEPAXI@Z PROC			; SimVehicleClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimVehicleClass@@UAE@XZ		; SimVehicleClass::~SimVehicleClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSimVehicleClass@@UAEPAXI@Z ENDP			; SimVehicleClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InsertionCallback@SimVehicleClass@@UAEHXZ PROC		; SimVehicleClass::InsertionCallback
; _this$ = ecx

; 1068 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1069 : //	KCK: If you're relying on the code below, something is
; 1070 : //	VERY, VERY wrong. Please talk to me before re-adding this code again
; 1071 : //	if (IsLocal())
; 1072 : //	{
; 1073 : //		Wake();
; 1074 : //	}
; 1075 : 
; 1076 : 	if (theBrain){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $LN1@InsertionC

; 1077 : 		theBrain->PostInsert();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+672]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+672]
	mov	eax, DWORD PTR [edx+20]
	call	eax
$LN1@InsertionC:

; 1078 : 	}
; 1079 : 
; 1080 : 	return SimMoverClass::InsertionCallback();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertionCallback@SimMoverClass@@UAEHXZ ; SimMoverClass::InsertionCallback

; 1081 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InsertionCallback@SimVehicleClass@@UAEHXZ ENDP		; SimVehicleClass::InsertionCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@SimVehicleClass@@UAEHPAVVuTransferEvent@@@Z PROC ; SimVehicleClass::Handle
; _this$ = ecx

; 1063 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1064 :    return (SimMoverClass::Handle(event));

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@SimMoverClass@@UAEHPAVVuTransferEvent@@@Z ; SimMoverClass::Handle

; 1065 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@SimVehicleClass@@UAEHPAVVuTransferEvent@@@Z ENDP ; SimVehicleClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@SimVehicleClass@@UAEHPAVVuPositionUpdateEvent@@@Z PROC ; SimVehicleClass::Handle
; _this$ = ecx

; 1058 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1059 :    return (SimMoverClass::Handle(event));

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@SimMoverClass@@UAEHPAVVuPositionUpdateEvent@@@Z ; SimMoverClass::Handle

; 1060 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@SimVehicleClass@@UAEHPAVVuPositionUpdateEvent@@@Z ENDP ; SimVehicleClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@SimVehicleClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC ; SimVehicleClass::Handle
; _this$ = ecx

; 1052 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1053 :    return (SimMoverClass::Handle(event));

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@SimMoverClass@@UAEHPAVVuFullUpdateEvent@@@Z ; SimMoverClass::Handle

; 1054 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@SimVehicleClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP ; SimVehicleClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_file$ = 8						; size = 4
?Save@SimVehicleClass@@UAEHPAU_iobuf@@@Z PROC		; SimVehicleClass::Save
; _this$ = ecx

; 1043 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1044 : int retval;
; 1045 : 
; 1046 :    retval = SimMoverClass::Save (file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@SimMoverClass@@UAEHPAU_iobuf@@@Z	; SimMoverClass::Save
	mov	DWORD PTR _retval$[ebp], eax

; 1047 : 
; 1048 :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 1049 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@SimVehicleClass@@UAEHPAU_iobuf@@@Z ENDP		; SimVehicleClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@SimVehicleClass@@UAEHPAPAE@Z PROC			; SimVehicleClass::Save
; _this$ = ecx

; 1034 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1035 : int retval;
; 1036 : 
; 1037 :    retval = SimMoverClass::Save(stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@SimMoverClass@@UAEHPAPAE@Z	; SimMoverClass::Save
	mov	DWORD PTR _retval$[ebp], eax

; 1038 : 
; 1039 :    return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 1040 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@SimVehicleClass@@UAEHPAPAE@Z ENDP			; SimVehicleClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveSize@SimVehicleClass@@UAEHXZ PROC			; SimVehicleClass::SaveSize
; _this$ = ecx

; 1029 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1030 :    return SimMoverClass::SaveSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@SimMoverClass@@UAEHXZ		; SimMoverClass::SaveSize

; 1031 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@SimVehicleClass@@UAEHXZ ENDP			; SimVehicleClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?WeaponKeepAlive@SimVehicleClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WeaponKeepAlive@SimVehicleClass@@UAEXXZ PROC		; SimVehicleClass::WeaponKeepAlive, COMDAT
; _this$ = ecx

; 117  : 	virtual void WeaponKeepAlive( void ) { return; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?WeaponKeepAlive@SimVehicleClass@@UAEXXZ ENDP		; SimVehicleClass::WeaponKeepAlive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?IsVehicle@SimVehicleClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@SimVehicleClass@@UAEHXZ PROC			; SimVehicleClass::IsVehicle, COMDAT
; _this$ = ecx

; 112  : 	virtual int IsVehicle (void)		{ return TRUE;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@SimVehicleClass@@UAEHXZ ENDP			; SimVehicleClass::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?HasPilot@SimVehicleClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasPilot@SimVehicleClass@@UAEHXZ PROC			; SimVehicleClass::HasPilot, COMDAT
; _this$ = ecx

; 111  : 	virtual int HasPilot (void)		{ return TRUE;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?HasPilot@SimVehicleClass@@UAEHXZ ENDP			; SimVehicleClass::HasPilot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?GetTotalFuel@SimVehicleClass@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTotalFuel@SimVehicleClass@@UAEJXZ PROC		; SimVehicleClass::GetTotalFuel, COMDAT
; _this$ = ecx

; 107  : 	virtual long	GetTotalFuel (void) { return -1; }; // KCK: -1 means "unfueled vehicle"

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	or	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalFuel@SimVehicleClass@@UAEJXZ ENDP		; SimVehicleClass::GetTotalFuel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_vc$ = -8						; size = 4
_this$ = -4						; size = 4
?GetRadarType@SimVehicleClass@@UAEHXZ PROC		; SimVehicleClass::GetRadarType
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	VehicleClassDataType	*vc	= (VehicleClassDataType *)((Falcon4EntityClassType*)EntityType())->dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	eax, DWORD PTR [eax+77]
	mov	DWORD PTR _vc$[ebp], eax

; 324  : 	ShiAssert( vc );
; 325  : 	
; 326  : 	return vc->RadarType;

	mov	ecx, DWORD PTR _vc$[ebp]
	movsx	eax, WORD PTR [ecx+56]

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarType@SimVehicleClass@@UAEHXZ ENDP		; SimVehicleClass::GetRadarType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
tv272 = -64						; size = 8
tv262 = -56						; size = 4
tv239 = -52						; size = 4
tv233 = -48						; size = 4
_pIrSign$1 = -44					; size = 4
_vc$2 = -40						; size = 4
_vc$3 = -36						; size = 4
tv210 = -32						; size = 4
tv190 = -28						; size = 4
tv178 = -24						; size = 4
tv177 = -20						; size = 4
tv170 = -16						; size = 4
_iIrSign$4 = -12					; size = 4
_irSignature$5 = -8					; size = 4
_this$ = -4						; size = 4
?GetIRFactor@SimVehicleClass@@UAEMXZ PROC		; SimVehicleClass::GetIRFactor
; _this$ = ecx

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 254  : // 2000-11-24 REWRITTEN BY S.G. SO IT USES THE NEW IR FIELD AND THE NEW ENGINE TEMPERATURE. THIS ALSO MAKES IT COMPATIBLE WITH RP4 MP.
; 255  : #if 1
; 256  : //	if (!g_bHardCoreReal)	MI
; 257  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN5@GetIRFacto

; 258  : 	{
; 259  : 		VehicleClassDataType	*vc	= (VehicleClassDataType *)Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$3[ebp], eax

; 260  : 		ShiAssert( vc );
; 261  : 		
; 262  : 		return vc->RCSfactor;

	mov	ecx, DWORD PTR _vc$3[ebp]
	fld	DWORD PTR [ecx+28]
	jmp	$LN1@GetIRFacto

; 263  : 	}
; 264  : 	else 

	jmp	$LN1@GetIRFacto
$LN5@GetIRFacto:

; 265  : 	{ 
; 266  : 		VehicleClassDataType	*vc	= (VehicleClassDataType *)Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	sub	edx, 100				; 00000064H
	imul	edx, 81					; 00000051H
	mov	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, DWORD PTR [eax+edx+77]
	mov	DWORD PTR _vc$2[ebp], ecx

; 267  : 		ShiAssert( vc );
; 268  : 		// TODO:  THis needs to return IR data
; 269  : 	// The IR signature is stored as a byte at offset 0x9E of the falcon4.vcd structure.
; 270  : 	// This byte, as well as 0x9D and 0x9F are used for padding originally.
; 271  : 	// The value range will be 0 to 2 with increments of 0.0078125
; 272  : 	unsigned char *pIrSign = (unsigned char *)vc;

	mov	edx, DWORD PTR _vc$2[ebp]
	mov	DWORD PTR _pIrSign$1[ebp], edx

; 273  : 	int iIrSign = (unsigned)pIrSign[0x9E];

	mov	eax, 1
	imul	eax, 158				; 0000009eH
	mov	ecx, DWORD PTR _pIrSign$1[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	DWORD PTR _iIrSign$4[ebp], edx

; 274  : 	float irSignature = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _irSignature$5[ebp], xmm0

; 275  : 	if (iIrSign)

	cmp	DWORD PTR _iIrSign$4[ebp], 0
	je	SHORT $LN3@GetIRFacto

; 276  : 		irSignature = (float)iIrSign / 128.0f;

	cvtsi2ss xmm0, DWORD PTR _iIrSign$4[ebp]
	divss	xmm0, DWORD PTR __real@43000000
	movss	DWORD PTR _irSignature$5[ebp], xmm0
$LN3@GetIRFacto:

; 277  : 
; 278  : 		if (PowerOutput()<=1.0)//me123 status test. differensiate between idle, mil and ab

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PowerOutput@SimBaseClass@@QAEMXZ	; SimBaseClass::PowerOutput
	fstp	DWORD PTR tv233[ebp]
	movss	xmm0, DWORD PTR tv233[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	$LN2@GetIRFacto

; 279  : 		{
; 280  : 			// Marco *** IR Fix is here!!! 0.12 -> make it smaller to increase time for IR to drop (set to 0.04f)
; 281  : 			// 0.05 -> Make it larger to increase 'idle' IROutput (set to 0.20f)
; 282  : 			// Marco edit - * by 1.2 to help out IR missiles reach RPG status
; 283  : 
; 284  : 			irOutput = (float)(irOutput + ( (( ((PowerOutput()-0.70)*2)/irOutput) -1.0f ) * SimLibMajorFrameTime *0.04f));

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+680]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR tv272[ebp], xmm0
	call	?PowerOutput@SimBaseClass@@QAEMXZ	; SimBaseClass::PowerOutput
	fstp	DWORD PTR tv239[ebp]
	movss	xmm0, DWORD PTR tv239[ebp]
	cvtss2sd xmm0, xmm0
	subsd	xmm0, QWORD PTR __real@3fe6666666666666
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [ecx+680]
	divsd	xmm0, xmm1
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	cvtss2sd xmm1, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulsd	xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@3fa47ae140000000
	movsd	xmm1, QWORD PTR tv272[ebp]
	addsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+680], xmm0

; 285  : 			irOutput = (max(min (0.6f,irOutput), 0.05f));    //,0.167f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+680]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jbe	SHORT $LN8@GetIRFacto
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR tv170[ebp], xmm0
	jmp	SHORT $LN9@GetIRFacto
$LN8@GetIRFacto:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+680]
	movss	DWORD PTR tv170[ebp], xmm0
$LN9@GetIRFacto:
	movss	xmm0, DWORD PTR tv170[ebp]
	comiss	xmm0, DWORD PTR __real@3d4ccccd
	jbe	SHORT $LN12@GetIRFacto
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+680]
	comiss	xmm0, DWORD PTR __real@3f19999a
	jbe	SHORT $LN10@GetIRFacto
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR tv177[ebp], xmm0
	jmp	SHORT $LN11@GetIRFacto
$LN10@GetIRFacto:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+680]
	movss	DWORD PTR tv177[ebp], xmm0
$LN11@GetIRFacto:
	movss	xmm0, DWORD PTR tv177[ebp]
	movss	DWORD PTR tv178[ebp], xmm0
	jmp	SHORT $LN13@GetIRFacto
$LN12@GetIRFacto:
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR tv178[ebp], xmm0
$LN13@GetIRFacto:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv178[ebp]
	movss	DWORD PTR [ecx+680], xmm0

; 286  : 
; 287  : //	MonoPrint("IR output %d .\n",irOutput);
; 288  : 			return max( (irOutput * irSignature) * 1.875f, 0.15f);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+680]
	mulss	xmm0, DWORD PTR _irSignature$5[ebp]
	mulss	xmm0, DWORD PTR __real@3ff00000
	comiss	xmm0, DWORD PTR __real@3e19999a
	jbe	SHORT $LN14@GetIRFacto
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+680]
	mulss	xmm0, DWORD PTR _irSignature$5[ebp]
	mulss	xmm0, DWORD PTR __real@3ff00000
	movss	DWORD PTR tv190[ebp], xmm0
	jmp	SHORT $LN15@GetIRFacto
$LN14@GetIRFacto:
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR tv190[ebp], xmm0
$LN15@GetIRFacto:
	fld	DWORD PTR tv190[ebp]
	jmp	SHORT $LN1@GetIRFacto

; 289  : 		}
; 290  : 		else 

	jmp	SHORT $LN1@GetIRFacto
$LN2@GetIRFacto:

; 291  : 		{
; 292  : 			// irOutput = (PowerOutput()- 0.985f )*100.0f/2;// from 1.25 to 2.25 (me123'a Settings)
; 293  : 			irOutput = ((PowerOutput() - 1.0f) * 10.0f) + 1.4f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PowerOutput@SimBaseClass@@QAEMXZ	; SimBaseClass::PowerOutput
	fstp	DWORD PTR tv262[ebp]
	movss	xmm0, DWORD PTR tv262[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@41200000
	addss	xmm0, DWORD PTR __real@3fb33333
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+680], xmm0

; 294  : 			return min(5.0f,irOutput * irSignature);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+680]
	mulss	xmm0, DWORD PTR _irSignature$5[ebp]
	comiss	xmm0, DWORD PTR __real@40a00000
	jbe	SHORT $LN16@GetIRFacto
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv210[ebp], xmm0
	jmp	SHORT $LN17@GetIRFacto
$LN16@GetIRFacto:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+680]
	mulss	xmm0, DWORD PTR _irSignature$5[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
$LN17@GetIRFacto:
	fld	DWORD PTR tv210[ebp]
$LN1@GetIRFacto:

; 295  : 			//return (max (2.0f, min(5.0f,irOutput * irSignature) ));
; 296  : 		}
; 297  : 	}
; 298  : #else
; 299  : 	VehicleClassDataType	*vc	= (VehicleClassDataType *)Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE].dataPtr;
; 300  : 	ShiAssert( vc );
; 301  : 	
; 302  : 	// TODO:  THis needs to return IR data
; 303  : // 2000-09-15 MODIFIED BY S.G. THIS GIVES IT THE IR DATA IT NEEDS
; 304  : //	return vc->RCSfactor * PowerOutput();
; 305  : 
; 306  : 	// The IR signature is stored as a byte at offset 0x9E of the falcon4.vcd structure.
; 307  : 	// This byte, as well as 0x9D and 0x9F are used for padding originally.
; 308  : 	// The value range will be 0 to 2 with increments of 0.0078125
; 309  : 	unsigned char *pIrSign = (unsigned char *)vc;
; 310  : 	int iIrSign = (unsigned)pIrSign[0x9E];
; 311  : 	float irSignature = 1.0f;
; 312  : 	if (iIrSign)
; 313  : 		irSignature = (float)iIrSign / 128.0f;
; 314  : 
; 315  : 	return irSignature * EngineTempOutput();
; 316  : #endif
; 317  : 
; 318  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@SimVehicleClass@@UAEMXZ ENDP		; SimVehicleClass::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_vc$ = -8						; size = 4
_this$ = -4						; size = 4
?GetRCSFactor@SimVehicleClass@@UAEMXZ PROC		; SimVehicleClass::GetRCSFactor
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 246  : 	VehicleClassDataType	*vc	= (VehicleClassDataType *)Falcon4ClassTable[Type() - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	sub	eax, 100				; 00000064H
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _vc$[ebp], edx

; 247  : 	ShiAssert( vc );
; 248  : 	
; 249  : 	return vc->RCSfactor;

	mov	eax, DWORD PTR _vc$[ebp]
	fld	DWORD PTR [eax+28]

; 250  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@SimVehicleClass@@UAEMXZ ENDP		; SimVehicleClass::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?GetSMS@SimVehicleClass@@UAEPAVSMSBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSMS@SimVehicleClass@@UAEPAVSMSBaseClass@@XZ PROC	; SimVehicleClass::GetSMS, COMDAT
; _this$ = ecx

; 103  : 	virtual SMSBaseClass* GetSMS(void) { return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSMS@SimVehicleClass@@UAEPAVSMSBaseClass@@XZ ENDP	; SimVehicleClass::GetSMS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?GetFCC@SimVehicleClass@@UAEPAVFireControlComputer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFCC@SimVehicleClass@@UAEPAVFireControlComputer@@XZ PROC ; SimVehicleClass::GetFCC, COMDAT
; _this$ = ecx

; 102  : 	virtual FireControlComputer* GetFCC(void) { return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFCC@SimVehicleClass@@UAEPAVFireControlComputer@@XZ ENDP ; SimVehicleClass::GetFCC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
$T2 = -224						; size = 8
$T3 = -216						; size = 8
$T4 = -208						; size = 8
$T5 = -200						; size = 8
$T6 = -192						; size = 8
tv1084 = -184						; size = 4
tv1350 = -180						; size = 4
tv1080 = -176						; size = 4
tv1358 = -172						; size = 4
tv1356 = -168						; size = 4
tv1088 = -164						; size = 4
tv1352 = -160						; size = 4
tv1156 = -156						; size = 4
tv1354 = -152						; size = 4
tv1092 = -148						; size = 4
tv1100 = -144						; size = 4
$T7 = -140						; size = 4
tv1096 = -136						; size = 4
tv1174 = -132						; size = 4
tv1071 = -128						; size = 4
tv1360 = -124						; size = 4
tv1165 = -120						; size = 4
tv1348 = -116						; size = 4
$T8 = -112						; size = 4
tv647 = -108						; size = 4
tv636 = -104						; size = 4
tv677 = -100						; size = 4
tv188 = -96						; size = 4
tv820 = -92						; size = 4
_wc$ = -88						; size = 4
_vc$ = -84						; size = 4
_i$ = -80						; size = 4
tv91 = -76						; size = 4
_groundType$ = -72					; size = 4
_soundIdx$ = -68					; size = 4
_lastToHit$ = -64					; size = 4
_hitPoints$ = -60					; size = 4
_this$ = -56						; size = 4
_PSvec$ = -52						; size = 12
_mvec$ = -40						; size = 12
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_damageMessage$ = 8					; size = 4
?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z PROC ; SimVehicleClass::ApplyDamage
; _this$ = ecx

; 1186 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1187 : 	int soundIdx = -1;

	mov	DWORD PTR _soundIdx$[ebp], -1

; 1188 : 	VehicleClassDataType *vc;
; 1189 : 	WeaponClassDataType *wc;
; 1190 : 	FalconEntity *lastToHit;
; 1191 : 	float hitPoints = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1192 : 	int groundType;
; 1193 : 	int i;
; 1194 : 	Tpoint pos, mvec;
; 1195 : 
; 1196 : 	//RV - I-Hawk - Added a 0 vector for RV new PS calls
; 1197 : 	Tpoint PSvec;
; 1198 : 	PSvec.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp], xmm0

; 1199 : 	PSvec.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+4], xmm0

; 1200 : 	PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+8], xmm0

; 1201 : 
; 1202 : 	// RV - Biker - No more kamikaze on carriers allowed
; 1203 : 	if (GetDomain() == DOMAIN_SEA && GetType() == TYPE_CAPITAL_SHIP && damageMessage->dataBlock.damageType == FalconDamageType::ObjectCollisionDamage) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 4
	jne	SHORT $LN45@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	ecx, al
	cmp	ecx, 4
	jne	SHORT $LN45@ApplyDamag
	mov	edx, DWORD PTR _damageMessage$[ebp]
	cmp	DWORD PTR [edx+48], 6
	jne	SHORT $LN45@ApplyDamag

; 1204 : 		return;

	jmp	$LN46@ApplyDamag
$LN45@ApplyDamag:

; 1205 : 	}
; 1206 : 
; 1207 : 	// call base class damage function
; 1208 : 	SimBaseClass::ApplyDamage (damageMessage);

	mov	eax, DWORD PTR _damageMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z ; SimBaseClass::ApplyDamage

; 1209 : 
; 1210 : 	switch (damageMessage->dataBlock.damageType)

	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR tv91[ebp], edx
	mov	eax, DWORD PTR tv91[ebp]
	sub	eax, 2
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 7
	ja	SHORT $LN39@ApplyDamag
	mov	ecx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN54@ApplyDamag[ecx*4]
$LN42@ApplyDamag:

; 1211 : 		{
; 1212 : 		// Collisions
; 1213 : 		case FalconDamageType::GroundCollisionDamage:
; 1214 : 		case FalconDamageType::FeatureCollisionDamage:
; 1215 : 		case FalconDamageType::ObjectCollisionDamage:
; 1216 : 		case FalconDamageType::CollisionDamage:
; 1217 : 		case FalconDamageType::DebrisDamage:
; 1218 : 			hitPoints = damageMessage->dataBlock.damageStrength;

	mov	edx, DWORD PTR _damageMessage$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1219 : 			break;

	jmp	$LN43@ApplyDamag
$LN41@ApplyDamag:

; 1220 : 
; 1221 : 		// Auto-death
; 1222 : 		case FalconDamageType::FODDamage:
; 1223 : 			hitPoints = maxStrength;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1224 : 			break;

	jmp	$LN43@ApplyDamag
$LN40@ApplyDamag:

; 1225 : 
; 1226 : 		// Proximity Damage
; 1227 : 		case FalconDamageType::ProximityDamage:
; 1228 : 			// Same as weapon damage, but we pre-calculate the damage strength
; 1229 : 			// get vehicle data
; 1230 : 			vc = (VehicleClassDataType *)Falcon4ClassTable[ Type() - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	mov	DWORD PTR _vc$[ebp], eax

; 1231 : 			// get strength of weapon and calc damage based on vehicle mod
; 1232 : 			hitPoints = (float)damageMessage->dataBlock.damageStrength * ((float)vc->DamageMod[HighExplosiveDam])/100.0f;

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _vc$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+146]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [ecx+52]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1233 : 			break;

	jmp	SHORT $LN43@ApplyDamag
$LN39@ApplyDamag:

; 1234 : 
; 1235 : 		// Weapon Hits
; 1236 : 		default:
; 1237 : 			// get vehicle data
; 1238 : 			vc = (VehicleClassDataType *)Falcon4ClassTable[ Type() - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	sub	edx, 100				; 00000064H
	imul	edx, 81					; 00000051H
	mov	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	ecx, DWORD PTR [eax+edx+77]
	mov	DWORD PTR _vc$[ebp], ecx

; 1239 : 			// get weapon data
; 1240 : 			wc = (WeaponClassDataType *)Falcon4ClassTable[ damageMessage->dataBlock.fWeaponID - VU_LAST_ENTITY_TYPE].dataPtr;

	mov	edx, DWORD PTR _damageMessage$[ebp]
	movzx	eax, WORD PTR [edx+88]
	sub	eax, 100				; 00000064H
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, DWORD PTR [ecx+eax+77]
	mov	DWORD PTR _wc$[ebp], edx

; 1241 : 			// get strength of weapon and calc damage based on vehicle mod
; 1242 : 			// also, check for ownship and invincibiliy flag
; 1243 : 			hitPoints = (float)wc->Strength * ((float)vc->DamageMod[ wc->DamageType ])/100.0f;

	mov	eax, DWORD PTR _wc$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _wc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _vc$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+146]
	cvtsi2ss xmm1, edx
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _hitPoints$[ebp], xmm0
$LN43@ApplyDamag:

; 1244 : 			break;
; 1245 : 		}
; 1246 : //VP_changes this is important for Damage Model
; 1247 : 	switch (damageMessage->dataBlock.damageType)

	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR tv188[ebp], ecx
	cmp	DWORD PTR tv188[ebp], 9
	ja	$LN17@ApplyDamag
	mov	edx, DWORD PTR tv188[ebp]
	jmp	DWORD PTR $LN55@ApplyDamag[edx*4]
$LN36@ApplyDamag:

; 1248 : 		{
; 1249 : 		case FalconDamageType::BulletDamage:
; 1250 : 			soundIdx = SFX_RICOCHET1 + PRANDInt5();

	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	add	eax, 20					; 00000014H
	mov	DWORD PTR _soundIdx$[ebp], eax

; 1251 : 			ioPerturb = 0.5f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+676], xmm0

; 1252 : 			hitPoints -= hitPoints * 0.7f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3f333333
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [ecx+56]
	movss	xmm1, DWORD PTR _hitPoints$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _hitPoints$[ebp], xmm1

; 1253 : 			break;

	jmp	$LN37@ApplyDamag
$LN35@ApplyDamag:

; 1254 : 
; 1255 : 		case FalconDamageType::MissileDamage:
; 1256 : 			soundIdx = SFX_BOOMA1 + PRANDInt5();

	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	add	eax, 43					; 0000002bH
	mov	DWORD PTR _soundIdx$[ebp], eax

; 1257 : 			ioPerturb = 2.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [edx+676], xmm0

; 1258 : 			hitPoints += hitPoints * 0.25f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	eax, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [eax+56]
	addss	xmm0, DWORD PTR _hitPoints$[ebp]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1259 : 			break;

	jmp	$LN37@ApplyDamag
$LN34@ApplyDamag:

; 1260 : 
; 1261 : 		case FalconDamageType::BombDamage:
; 1262 : 			soundIdx = SFX_BOOMG1 + PRANDInt5();

	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _soundIdx$[ebp], eax

; 1263 : 			ioPerturb = 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [ecx+676], xmm0

; 1264 : 			hitPoints += hitPoints * 0.25f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	edx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [edx+56]
	addss	xmm0, DWORD PTR _hitPoints$[ebp]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1265 : 			break;

	jmp	$LN37@ApplyDamag
$LN33@ApplyDamag:

; 1266 : 
; 1267 : 		case FalconDamageType::ProximityDamage:
; 1268 : 			// KCK Question: Should we have secondary explosion sound effects here?
; 1269 : 			ioPerturb = 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+676], xmm0

; 1270 : 			hitPoints += hitPoints * 0.25f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [ecx+56]
	addss	xmm0, DWORD PTR _hitPoints$[ebp]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1271 : 			break;

	jmp	$LN37@ApplyDamag
$LN32@ApplyDamag:

; 1272 : 
; 1273 : 		case FalconDamageType::GroundCollisionDamage:
; 1274 : 			// if we're exploding at this point we've smacked into a
; 1275 : 			// large brown,green,blue globe....
; 1276 : 			hitPoints += hitPoints * 0.25f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	edx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [edx+56]
	addss	xmm0, DWORD PTR _hitPoints$[ebp]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1277 : 			ioPerturb = 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+676], xmm0

; 1278 : 			if (OTWDriver.GetViewpoint())

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetViewpoint@OTWDriverClass@@QAEPAVRViewPoint@@XZ ; OTWDriverClass::GetViewpoint
	test	eax, eax
	je	SHORT $LN31@ApplyDamag

; 1279 : 			    groundType = (OTWDriver.GetViewpoint())->GetGroundType ( XPos(), YPos() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetViewpoint@OTWDriverClass@@QAEPAVRViewPoint@@XZ ; OTWDriverClass::GetViewpoint
	mov	ecx, eax
	call	?GetGroundType@TViewPoint@@QAEHMM@Z	; TViewPoint::GetGroundType
	mov	DWORD PTR _groundType$[ebp], eax

; 1280 : 			else

	jmp	SHORT $LN30@ApplyDamag
$LN31@ApplyDamag:

; 1281 : 				groundType = COVERAGE_PLAINS;

	mov	DWORD PTR _groundType$[ebp], 4
$LN30@ApplyDamag:

; 1282 : 
; 1283 : 			// are we blowing up?
; 1284 : 			if (  hitPoints > strength )

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	comiss	xmm0, DWORD PTR [ecx+240]
	jbe	SHORT $LN29@ApplyDamag

; 1285 : 			{
; 1286 : 				// death sounds
; 1287 : 				if ( !(groundType == COVERAGE_WATER || groundType == COVERAGE_RIVER)  )

	cmp	DWORD PTR _groundType$[ebp], 1
	je	SHORT $LN28@ApplyDamag
	cmp	DWORD PTR _groundType$[ebp], 2
	je	SHORT $LN28@ApplyDamag

; 1288 : 					soundIdx = SFX_DIRTDART;

	mov	DWORD PTR _soundIdx$[ebp], 13		; 0000000dH

; 1289 : 				else

	jmp	SHORT $LN27@ApplyDamag
$LN28@ApplyDamag:

; 1290 : 					soundIdx = SFX_H2ODART;

	mov	DWORD PTR _soundIdx$[ebp], 14		; 0000000eH
$LN27@ApplyDamag:

; 1291 : 			}
; 1292 : 			else

	jmp	$LN24@ApplyDamag
$LN29@ApplyDamag:

; 1293 : 			{
; 1294 : 				// damage sounds and effects
; 1295 : 
; 1296 : 				pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1297 : 				pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1298 : 				pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1299 : 				mvec.x = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _mvec$[ebp]

; 1300 : 				mvec.y = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _mvec$[ebp+4]

; 1301 : 				mvec.z = ZDelta() - 40.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv1071[ebp]
	movss	xmm0, DWORD PTR tv1071[ebp]
	subss	xmm0, DWORD PTR __real@42200000
	movss	DWORD PTR _mvec$[ebp+8], xmm0

; 1302 : 
; 1303 : 				if ( !(groundType == COVERAGE_WATER || groundType == COVERAGE_RIVER) )

	cmp	DWORD PTR _groundType$[ebp], 1
	je	SHORT $LN25@ApplyDamag
	cmp	DWORD PTR _groundType$[ebp], 2
	je	SHORT $LN25@ApplyDamag

; 1304 : 				{
; 1305 : 					soundIdx = SFX_BOOMA1;

	mov	DWORD PTR _soundIdx$[ebp], 43		; 0000002bH

; 1306 : 					/*
; 1307 : 					OTWDriver.AddSfxRequest(
; 1308 : 						new SfxClass( SFX_GROUND_DUSTCLOUD,		// type
; 1309 : 						SFX_MOVES,
; 1310 : 						&pos,					// world pos
; 1311 : 						&mvec,					// vel vector
; 1312 : 						3.0,					// time to live
; 1313 : 						8.0f ) );				// scale
; 1314 : 						*/
; 1315 : 					DrawableParticleSys::PS_AddParticleEx((SFX_GROUND_DUSTCLOUD + 1),
; 1316 : 												&pos,
; 1317 : 												&mvec);

	lea	edx, DWORD PTR _mvec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	80					; 00000050H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH

; 1318 : 
; 1319 : 				}
; 1320 : 				else

	jmp	SHORT $LN24@ApplyDamag
$LN25@ApplyDamag:

; 1321 : 				{
; 1322 : 					soundIdx = SFX_SPLASH;

	mov	DWORD PTR _soundIdx$[ebp], 107		; 0000006bH

; 1323 : 					/*
; 1324 : 					OTWDriver.AddSfxRequest(
; 1325 : 						new SfxClass( SFX_WATER_CLOUD,		// type
; 1326 : 						SFX_MOVES,
; 1327 : 						&pos,					// world pos
; 1328 : 						&mvec,					// vel vector
; 1329 : 						3.0,					// time to live
; 1330 : 						10.0f ) );				// scale
; 1331 : 						*/
; 1332 : 					DrawableParticleSys::PS_AddParticleEx((SFX_WATER_CLOUD + 1),
; 1333 : 												&pos,
; 1334 : 												&mvec);

	lea	ecx, DWORD PTR _mvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	60					; 0000003cH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN24@ApplyDamag:

; 1335 : 				}
; 1336 : 			}
; 1337 : 
; 1338 : 			// trail sparks when hit ground
; 1339 : 			for ( i = 0; i < 5; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@ApplyDamag
$LN22@ApplyDamag:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@ApplyDamag:
	cmp	DWORD PTR _i$[ebp], 5
	jge	$LN21@ApplyDamag

; 1340 : 			{
; 1341 : 				pos.x = XPos() - XDelta() * SimLibMajorFrameTime * PRANDFloatPos() * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1080[ebp]
	movss	xmm0, DWORD PTR tv1080[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1348[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv1084[ebp]
	movss	xmm0, DWORD PTR tv1084[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR tv1350[ebp], xmm0
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1088[ebp]
	movss	xmm0, DWORD PTR tv1350[ebp]
	mulss	xmm0, DWORD PTR tv1088[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1348[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _pos$[ebp], xmm1

; 1342 : 				pos.y = YPos() - YDelta() * SimLibMajorFrameTime * PRANDFloatPos() * 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1092[ebp]
	movss	xmm0, DWORD PTR tv1092[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1352[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv1096[ebp]
	movss	xmm0, DWORD PTR tv1096[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR tv1354[ebp], xmm0
	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR tv1100[ebp]
	movss	xmm0, DWORD PTR tv1354[ebp]
	mulss	xmm0, DWORD PTR tv1100[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1352[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _pos$[ebp+4], xmm1

; 1343 : 				pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 1344 : 				mvec.x = XDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _mvec$[ebp]

; 1345 : 				mvec.y = YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _mvec$[ebp+4]

; 1346 : 				mvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mvec$[ebp+8], xmm0

; 1347 : 
; 1348 : 				if(!AddParticleEffect(PSFX_AC_EARLY_BURNING,&pos,&mvec))

	lea	ecx, DWORD PTR _mvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	124					; 0000007cH
	call	?AddParticleEffect@@YAHHPAUTpoint@@0@Z	; AddParticleEffect
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN20@ApplyDamag

; 1349 : 				{
; 1350 : 					/*
; 1351 : 					OTWDriver.AddSfxRequest(
; 1352 : 						new SfxClass( SFX_SPARKS,		// type
; 1353 : 						&pos,					// world pos
; 1354 : 						2.9f,					// time to live
; 1355 : 						14.3f ) );				// scale
; 1356 : 						*/
; 1357 : 					DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 1358 : 												&pos,
; 1359 : 												&PSvec);

	lea	eax, DWORD PTR _PSvec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	45					; 0000002dH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN20@ApplyDamag:

; 1360 : 				}
; 1361 : 			}

	jmp	$LN22@ApplyDamag
$LN21@ApplyDamag:

; 1362 : 			break;

	jmp	SHORT $LN37@ApplyDamag
$LN19@ApplyDamag:

; 1363 : 
; 1364 : 		case FalconDamageType::CollisionDamage:
; 1365 : 		case FalconDamageType::FeatureCollisionDamage:
; 1366 : 		case FalconDamageType::ObjectCollisionDamage:
; 1367 : 			hitPoints += hitPoints * 0.25f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	edx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [edx+56]
	addss	xmm0, DWORD PTR _hitPoints$[ebp]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1368 : 			soundIdx = SFX_BOOMG1 + PRANDInt5();

	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _soundIdx$[ebp], eax

; 1369 : 			ioPerturb = 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+676], xmm0

; 1370 : 			break;

	jmp	SHORT $LN37@ApplyDamag
$LN18@ApplyDamag:

; 1371 : 
; 1372 : 		case FalconDamageType::DebrisDamage:
; 1373 : 			// we probably want thump sounds here.....
; 1374 : 			soundIdx = SFX_BOOMA1 + PRANDInt5();

	call	?PRANDInt5@@YAHXZ			; PRANDInt5
	add	eax, 43					; 0000002bH
	mov	DWORD PTR _soundIdx$[ebp], eax

; 1375 : 			hitPoints += hitPoints * 0.25f * damageMessage->dataBlock.damageRandomFact;

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	mulss	xmm0, DWORD PTR __real@3e800000
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mulss	xmm0, DWORD PTR [ecx+56]
	addss	xmm0, DWORD PTR _hitPoints$[ebp]
	movss	DWORD PTR _hitPoints$[ebp], xmm0

; 1376 : 			ioPerturb = 2.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [edx+676], xmm0
$LN17@ApplyDamag:
$LN37@ApplyDamag:

; 1377 : 			break;
; 1378 : 
; 1379 : 		default:
; 1380 : 			break;
; 1381 : 		}
; 1382 : 
; 1383 :    // what percent strength is left?
; 1384 :    // NOTE: A missile strike effect to an aircraft looks like a missile
; 1385 :    // burst with the plane flying thru it OK for a little while and trailing
; 1386 :    // some debris.  For missile damage, don't let pctStrength hit neg val
; 1387 :    // until it's been set to 0.  This will allow time to generate debris
; 1388 :    if ( strength == maxStrength &&
; 1389 :    		hitPoints > strength &&
; 1390 : 		   IsAirplane() &&
; 1391 : 	    damageMessage->dataBlock.damageType == FalconDamageType::MissileDamage )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+240]
	ucomiss	xmm0, DWORD PTR [ecx+244]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN16@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	comiss	xmm0, DWORD PTR [edx+240]
	jbe	SHORT $LN16@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN16@ApplyDamag
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	cmp	DWORD PTR [ecx+48], 1
	jne	SHORT $LN16@ApplyDamag

; 1392 :    {
; 1393 :    		hitPoints = strength;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+240]
	movss	DWORD PTR _hitPoints$[ebp], xmm0
$LN16@ApplyDamag:

; 1394 :    }
; 1395 : 
; 1396 :    // check for ownship and invincibiliy flag
; 1397 :    if (IsSetFalcFlag(FEC_INVULNERABLE))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN15@ApplyDamag

; 1398 :    {
; 1399 :       hitPoints = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hitPoints$[ebp], xmm0
$LN15@ApplyDamag:

; 1400 :    }
; 1401 : 
; 1402 :    strength -= hitPoints;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+240]
	subss	xmm0, DWORD PTR _hitPoints$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+240], xmm0

; 1403 :    pctStrength = strength/maxStrength;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+240]
	divss	xmm0, DWORD PTR [eax+244]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+292], xmm0

; 1404 : 
; 1405 : 		// JB 000816
; 1406 : 		// If damaged has been sustained then:
; 1407 : 		// If this is our own aircraft and if we have disabled the damage jitter or a 25% chance
; 1408 : 		// Or otherwise a 13% chance (AI controlled aircraft won't be able to fly with a bias so we want the % to be low)
; 1409 : 		if (hitPoints > 0 && 
; 1410 : 			((IsSetFlag(MOTION_OWNSHIP) && (g_bDisableFunkyChicken || (rand() & 0x3) == 0x3)) ||
; 1411 : 			(rand() & 0x7) == 0x7)) 

	movss	xmm0, DWORD PTR _hitPoints$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN14@ApplyDamag
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN12@ApplyDamag
	movzx	edx, BYTE PTR ?g_bDisableFunkyChicken@@3_NA ; g_bDisableFunkyChicken
	test	edx, edx
	jne	SHORT $LN13@ApplyDamag
	call	_rand
	and	eax, 3
	cmp	eax, 3
	je	SHORT $LN13@ApplyDamag
$LN12@ApplyDamag:
	call	_rand
	and	eax, 7
	cmp	eax, 7
	jne	$LN14@ApplyDamag
$LN13@ApplyDamag:

; 1412 : 		{
; 1413 : 			rBias += ioPerturb / 2 * PRANDFloat();

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+676]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1356[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1156[ebp]
	movss	xmm0, DWORD PTR tv1356[ebp]
	mulss	xmm0, DWORD PTR tv1156[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+684]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+684], xmm0

; 1414 : 			pBias += ioPerturb / 2 * PRANDFloat();

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+676]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1358[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1165[ebp]
	movss	xmm0, DWORD PTR tv1358[ebp]
	mulss	xmm0, DWORD PTR tv1165[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+688]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+688], xmm0

; 1415 : 			yBias += ioPerturb / 2 * PRANDFloat();

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+676]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1360[ebp], xmm0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv1174[ebp]
	movss	xmm0, DWORD PTR tv1360[ebp]
	mulss	xmm0, DWORD PTR tv1174[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+692]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+692], xmm0
$LN14@ApplyDamag:

; 1416 : 		}
; 1417 : 
; 1418 : // JB 010121 adjusted to work in MP
; 1419 : 		if (g_bNewDamageEffects && IsSetFlag(MOTION_OWNSHIP) && // hitPoints > 0 && 2002-04-11 REMOVED BY S.G. Done below after ->af since it's now externalized
; 1420 : //			SimDriver.GetPlayerEntity() && SimDriver.GetPlayerEntity()->AutopilotType() != AircraftClass::CombatAP && 
; 1421 : //			!(gCommsMgr && gCommsMgr->Online()) && 
; 1422 : 			IsAirplane() &&
; 1423 : //			(rand() & 0x7) == 0x7 && // 13% chance 2002-04-11 MOVED BY S.G. After the ->af and used the external var now
; 1424 : 			((AircraftClass*)this)->af &&
; 1425 : 			((AircraftClass*)this)->af->GetEngineDamageHitThreshold() < hitPoints && // 2002-04-11 ADDED BY S.G. hitPoints 'theshold' is no longer 1 or above but externalized
; 1426 : 			((AircraftClass*)this)->af->GetEngineDamageStopThreshold() > rand() % 100 && // 2002-04-11 ADDED BY S.G. instead of a fixed 13%, now uses an aiframe aux var
; 1427 : 			((AircraftClass*)this)->AutopilotType() != AircraftClass::CombatAP
; 1428 : 			)

	movzx	eax, BYTE PTR ?g_bNewDamageEffects@@3_NA ; g_bNewDamageEffects
	test	eax, eax
	je	$LN10@ApplyDamag
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	$LN10@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	$LN10@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+932], 0
	je	$LN10@ApplyDamag
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?GetEngineDamageHitThreshold@AirframeClass@@QAEHXZ ; AirframeClass::GetEngineDamageHitThreshold
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _hitPoints$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@ApplyDamag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetEngineDamageStopThreshold@AirframeClass@@QAEHXZ ; AirframeClass::GetEngineDamageStopThreshold
	mov	esi, eax
	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	esi, edx
	jle	SHORT $LN10@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	je	SHORT $LN10@ApplyDamag

; 1429 : 		{
; 1430 : 			((AircraftClass*)this)->af->SetFlag(AirframeClass::EngineStopped);

	push	134217728				; 08000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+932]
	call	?SetFlag@AirframeClass@@QAEXH@Z		; AirframeClass::SetFlag

; 1431 : //			((AircraftClass*)this)->af->SetFlag(AirframeClass::EpuRunning);
; 1432 : 
; 1433 : 			// MODIFIED BY S.G. Instead of 50%, now uses an aiframe aux var
; 1434 : 			// if ((rand() & 0x1) == 0x1) // JB 010115 half the time (13%/2) you won't be able to restart.
; 1435 : 			if (((AircraftClass*)this)->af->GetEngineDamageNoRestartThreshold() > rand() % 100)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	call	?GetEngineDamageNoRestartThreshold@AirframeClass@@QAEHXZ ; AirframeClass::GetEngineDamageNoRestartThreshold
	mov	esi, eax
	call	_rand
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	cmp	esi, edx
	jle	SHORT $LN10@ApplyDamag

; 1436 : 				((AircraftClass*)this)->af->jfsaccumulator = -3600;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+932]
	movss	xmm0, DWORD PTR __real@c5610000
	movss	DWORD PTR [eax+1604], xmm0
$LN10@ApplyDamag:

; 1437 : 		}
; 1438 : 		// JB 000816
; 1439 : 
; 1440 :    // debug non local
; 1441 :    if ( !IsLocal() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal

; 1442 :    {
; 1443 : //	   MonoPrint( "NonLocal Apply Damage: Pct Strength now: %f\n", pctStrength );
; 1444 :    }
; 1445 : 
; 1446 :    // BIGASSCOW - We need to make this a local sound so it can be heard inside the cockpit.
; 1447 :    if ( soundIdx != -1 )

	cmp	DWORD PTR _soundIdx$[ebp], -1
	je	SHORT $LN8@ApplyDamag

; 1448 : 		SoundPos.Sfx( soundIdx, 0, 1, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	edx, DWORD PTR _soundIdx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx
$LN8@ApplyDamag:

; 1449 : 
; 1450 :    // send out death message if strength below zero
; 1451 :    if (pctStrength <= 0.0F && dyingTimer < 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+292]
	jb	$LN7@ApplyDamag
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+248]
	jbe	$LN7@ApplyDamag

; 1452 :    {
; 1453 : 	  // ground vehicles die immediately
; 1454 : 	  if ( IsGroundVehicle() )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+196]
	call	edx
	test	eax, eax
	je	SHORT $LN6@ApplyDamag

; 1455 : 	  		pctStrength = -1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+292], xmm0
$LN6@ApplyDamag:

; 1456 : 
; 1457 :       // only the local entity sends the death message
; 1458 : 	  if ( IsLocal() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@ApplyDamag

; 1459 : 	  {
; 1460 : 			deathMessage = new FalconDeathMessage (Id(), FalconLocalGame);

	push	94					; 0000005eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN50@ApplyDamag
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN48@ApplyDamag
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv636[ebp], eax
	jmp	SHORT $LN49@ApplyDamag
$LN48@ApplyDamag:
	mov	DWORD PTR tv636[ebp], 0
$LN49@ApplyDamag:
	push	1
	mov	eax, DWORD PTR tv636[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconDeathMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDeathMessage::FalconDeathMessage
	mov	DWORD PTR tv647[ebp], eax
	jmp	SHORT $LN51@ApplyDamag
$LN50@ApplyDamag:
	mov	DWORD PTR tv647[ebp], 0
$LN51@ApplyDamag:
	mov	ecx, DWORD PTR tv647[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR [edx+740], eax

; 1461 : 			deathMessage->dataBlock.damageType = damageMessage->dataBlock.damageType;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+48], ecx

; 1462 : 
; 1463 : 			deathMessage->dataBlock.dEntityID  = Id();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+740]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx

; 1464 : 			ShiAssert (GetCampaignObject())
; 1465 : 			deathMessage->dataBlock.dCampID		= ((CampBaseClass*)GetCampaignObject())->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv677[ebp], eax
	mov	ecx, DWORD PTR tv677[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv677[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	WORD PTR [edx+64], ax

; 1466 : 			deathMessage->dataBlock.dSide		= ((CampBaseClass*)GetCampaignObject())->GetOwner();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	BYTE PTR [edx+69], al

; 1467 : 			deathMessage->dataBlock.dPilotID   = pilotSlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+740]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+665]
	mov	BYTE PTR [ecx+66], al

; 1468 : 			deathMessage->dataBlock.dIndex     = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	WORD PTR [edx+67], ax

; 1469 : 	
; 1470 : 			lastToHit = (SimVehicleClass*)vuDatabase->Find( LastShooter() );

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LastShooter@SimBaseClass@@QAE?AVVU_ID@@XZ ; SimBaseClass::LastShooter
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _lastToHit$[ebp], eax

; 1471 : 			if (lastToHit && !lastToHit->IsEject() && lastToHit->Id() != damageMessage->dataBlock.fEntityID)

	cmp	DWORD PTR _lastToHit$[ebp], 0
	je	$LN4@ApplyDamag
	mov	eax, DWORD PTR _lastToHit$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lastToHit$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	jne	$LN4@ApplyDamag
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	add	ecx, 74					; 0000004aH
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN4@ApplyDamag

; 1472 : 				{
; 1473 : 				deathMessage->dataBlock.fEntityID		= lastToHit->Id();

	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+740]
	mov	DWORD PTR [ecx+70], edx
	mov	DWORD PTR [ecx+74], eax

; 1474 : 				deathMessage->dataBlock.fIndex			= lastToHit->Type();

	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+740]
	mov	WORD PTR [ecx+81], ax

; 1475 : 				if (lastToHit->IsSim())

	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN3@ApplyDamag

; 1476 : 					{
; 1477 : 					deathMessage->dataBlock.fCampID		= ((SimVehicleClass*)lastToHit)->GetCampaignObject()->GetCampID();

	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv820[ebp], eax
	mov	edx, DWORD PTR tv820[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv820[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	WORD PTR [edx+78], ax

; 1478 : 					deathMessage->dataBlock.fPilotID	= ((SimVehicleClass*)lastToHit)->pilotSlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+740]
	mov	edx, DWORD PTR _lastToHit$[ebp]
	mov	al, BYTE PTR [edx+665]
	mov	BYTE PTR [ecx+80], al

; 1479 : 					deathMessage->dataBlock.fSide		= ((SimVehicleClass*)lastToHit)->GetCampaignObject()->GetOwner();

	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	BYTE PTR [edx+83], al

; 1480 : 					}
; 1481 : 				else

	jmp	SHORT $LN2@ApplyDamag
$LN3@ApplyDamag:

; 1482 : 					{
; 1483 : 					deathMessage->dataBlock.fCampID		= ((CampBaseClass*)lastToHit)->GetCampID();

	mov	eax, DWORD PTR _lastToHit$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _lastToHit$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	WORD PTR [edx+78], ax

; 1484 : 					deathMessage->dataBlock.fPilotID	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+740]
	mov	BYTE PTR [ecx+80], 0

; 1485 : 					deathMessage->dataBlock.fSide		= ((CampBaseClass*)lastToHit)->GetOwner();

	mov	ecx, DWORD PTR _lastToHit$[ebp]
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+740]
	mov	BYTE PTR [ecx+83], al
$LN2@ApplyDamag:

; 1486 : 					}
; 1487 : 				// We really don't know what weapon did the killing. Pick a non-existant one
; 1488 : 				deathMessage->dataBlock.fWeaponID  = 0xffff;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+740]
	mov	ecx, 65535				; 0000ffffH
	mov	WORD PTR [eax+84], cx

; 1489 : 				deathMessage->dataBlock.fWeaponUID = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+740]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+86], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+90], edx

; 1490 : 				}
; 1491 : 			else

	jmp	$LN1@ApplyDamag
$LN4@ApplyDamag:

; 1492 : 				{
; 1493 : 				// If aircraft is undamaged, the death message we send is 'ground collision',
; 1494 : 				// since the aircraft would probably get there eventually
; 1495 : 				deathMessage->dataBlock.fEntityID  = damageMessage->dataBlock.fEntityID;

	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	ecx, DWORD PTR [eax+74]
	mov	edx, DWORD PTR [eax+78]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+740]
	mov	DWORD PTR [eax+70], ecx
	mov	DWORD PTR [eax+74], edx

; 1496 : 				deathMessage->dataBlock.fIndex     = damageMessage->dataBlock.fIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	cx, WORD PTR [eax+85]
	mov	WORD PTR [edx+81], cx

; 1497 : 				deathMessage->dataBlock.fCampID    = damageMessage->dataBlock.fCampID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+740]
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mov	dx, WORD PTR [ecx+82]
	mov	WORD PTR [eax+78], dx

; 1498 : 				deathMessage->dataBlock.fPilotID   = damageMessage->dataBlock.fPilotID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+740]
	mov	edx, DWORD PTR _damageMessage$[ebp]
	mov	al, BYTE PTR [edx+84]
	mov	BYTE PTR [ecx+80], al

; 1499 : 				deathMessage->dataBlock.fSide      = damageMessage->dataBlock.fSide;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	cl, BYTE PTR [eax+87]
	mov	BYTE PTR [edx+83], cl

; 1500 : 				deathMessage->dataBlock.fWeaponID  = damageMessage->dataBlock.fWeaponID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+740]
	mov	ecx, DWORD PTR _damageMessage$[ebp]
	mov	dx, WORD PTR [ecx+88]
	mov	WORD PTR [eax+84], dx

; 1501 : 				deathMessage->dataBlock.fWeaponUID = damageMessage->dataBlock.fWeaponUID;

	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	ecx, DWORD PTR [eax+90]
	mov	edx, DWORD PTR [eax+94]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+740]
	mov	DWORD PTR [eax+86], ecx
	mov	DWORD PTR [eax+90], edx
$LN1@ApplyDamag:

; 1502 : 				}
; 1503 : 			deathMessage->dataBlock.deathPctStrength = pctStrength;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+740]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR [edx+52], ecx
$LN5@ApplyDamag:

; 1504 : //	me123		deathMessage->RequestOutOfBandTransmit ();
; 1505 : 	  }
; 1506 : 	  // this is now done in the exec() function when hitpoints reaches
; 1507 : 	  // the appropriate value
; 1508 :       // FalconSendMessage (deathMessage,FALSE);
; 1509 : 
; 1510 : 	  // short delay before vehicle starts death throw effects
; 1511 : 	  dyingTimer = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+248], xmm0

; 1512 : 	  // dyingType = PRANDInt5();
; 1513 : 	  dyingType = rand() & 0x07;

	call	_rand
	and	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+696], eax
$LN7@ApplyDamag:
$LN46@ApplyDamag:

; 1514 : 
; 1515 :       //MonoPrint ("Vehicle %d in death throws at %8ld\n", Id().num_, SimLibElapsedTime);
; 1516 :       //MonoPrint ("Dying Type = %d\n", dyingType);
; 1517 :    }
; 1518 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
$LN54@ApplyDamag:
	DD	$LN42@ApplyDamag
	DD	$LN39@ApplyDamag
	DD	$LN41@ApplyDamag
	DD	$LN42@ApplyDamag
	DD	$LN42@ApplyDamag
	DD	$LN42@ApplyDamag
	DD	$LN42@ApplyDamag
	DD	$LN40@ApplyDamag
$LN55@ApplyDamag:
	DD	$LN36@ApplyDamag
	DD	$LN35@ApplyDamag
	DD	$LN19@ApplyDamag
	DD	$LN34@ApplyDamag
	DD	$LN17@ApplyDamag
	DD	$LN32@ApplyDamag
	DD	$LN19@ApplyDamag
	DD	$LN19@ApplyDamag
	DD	$LN18@ApplyDamag
	DD	$LN33@ApplyDamag
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z$0:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyDamage@SimVehicleClass@@UAEXPAVFalconDamageMessage@@@Z ENDP ; SimVehicleClass::ApplyDamage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetDead@SimVehicleClass@@UAEXH@Z PROC			; SimVehicleClass::SetDead
; _this$ = ecx

; 1084 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1085 : 	SimMoverClass::SetDead(flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDead@SimMoverClass@@UAEXH@Z		; SimMoverClass::SetDead

; 1086 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetDead@SimVehicleClass@@UAEXH@Z ENDP			; SimVehicleClass::SetDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_randamt$1 = -44					; size = 4
tv223 = -40						; size = 4
tv221 = -36						; size = 4
_this$ = -32						; size = 4
_PSvec$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?Exec@SimVehicleClass@@UAEHXZ PROC			; SimVehicleClass::Exec
; _this$ = ecx

; 331  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 332  : 	Tpoint pos; 
; 333  : 
; 334  : 	SimMoverClass::Exec();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Exec@SimMoverClass@@UAEHXZ		; SimMoverClass::Exec

; 335  : 	// VP_changes for flak Nov 5, 2002
; 336  : 	// Here the function for explosion's gust can be added
; 337  : 	// update special effects timer
; 338  : 	// can be used in derived classes to control
; 339  : 	// various special effects they want to run
; 340  : 	// should be reset to 0 when effect has run
; 341  : 	sfxTimer += SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	addss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+252], xmm0

; 342  : 
; 343  : 	//RV - I-Hawk - Added a 0 vector for RV new PS calls
; 344  : 	Tpoint PSvec;
; 345  : 	PSvec.x = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp], xmm0

; 346  : 	PSvec.y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+4], xmm0

; 347  : 	PSvec.z = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _PSvec$[ebp+8], xmm0

; 348  : 
; 349  : 	// ioPerturb will result in  temporary perturbances in controls
; 350  : 	// when damage occurs (i.e missile hit, etc...).  Reduce this
; 351  : 	// every frame if > 0.0
; 352  : 	if ( ioPerturb > 0.0f )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+676]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN22@Exec

; 353  : 	{
; 354  : 		// JB 010730
; 355  : 		if (ioPerturb > 0.5f && g_bDisableFunkyChicken && (rand() & 63) == 63)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+676]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN23@Exec
	movzx	ecx, BYTE PTR ?g_bDisableFunkyChicken@@3_NA ; g_bDisableFunkyChicken
	test	ecx, ecx
	je	SHORT $LN23@Exec
	call	_rand
	and	eax, 63					; 0000003fH
	cmp	eax, 63					; 0000003fH
	jne	SHORT $LN23@Exec

; 356  : 		{
; 357  : 			float randamt  =   PRANDFloatPos();

	call	?PRANDFloatPos@@YAMXZ			; PRANDFloatPos
	fstp	DWORD PTR _randamt$1[ebp]

; 358  : 
; 359  : 			// run stuff here....
; 360  : 			pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 361  : 			pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 362  : 			pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 363  : 			/*
; 364  : 			OTWDriver.AddSfxRequest(
; 365  : 						new SfxClass( SFX_FIRE1,		// type
; 366  : 						&pos,							// world pos
; 367  : 						0.5f,							// time to live
; 368  : 						20.0f + 50.0f * randamt ) );	// scale
; 369  : 						*/
; 370  : 			DrawableParticleSys::PS_AddParticleEx((SFX_FIRE1 + 1),
; 371  : 												&pos,
; 372  : 												&PSvec);

	lea	edx, DWORD PTR _PSvec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	86					; 00000056H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN23@Exec:

; 373  : 		}
; 374  : 
; 375  : 		ioPerturb -= 0.50f * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+676]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+676], xmm1

; 376  : 		if ( ioPerturb < 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+676]
	jbe	SHORT $LN22@Exec

; 377  : 	   		ioPerturb = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+676], xmm0
$LN22@Exec:

; 378  : 	}
; 379  : 
; 380  : 	// what's the strength?  if we're less than 0 we're dying.
; 381  : 	// bleed off strength when below 0.  This will allow time for
; 382  : 	// other effects (fire trails, ejection, etc...).  When we've reached
; 383  : 	// an absolute min, explode
; 384  : 	if ( pctStrength <= 0.0f && !IsExploding() )

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+292]
	jb	$LN1@Exec
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	$LN1@Exec

; 385  : 	{
; 386  : 		// debug non local
; 387  : 		/*
; 388  :    		if ( !IsLocal() )
; 389  :    		{
; 390  : 	   		MonoPrint( "NonLocal Dying: Pct Strength now: %f\n", pctStrength );
; 391  :    		}
; 392  : 		else
; 393  : 		{
; 394  : 	   		MonoPrint( "Local Vehicle Dying: Pct Strength now: %f\n", pctStrength );
; 395  : 		}
; 396  : 		*/
; 397  : 
; 398  : 		// RV - Biker - This is for aircraft
; 399  : 
; 400  : 		// RV - I-Hawk - if we are at DOMAIN_AIR, dying SFX is handled at AircraftClass or 
; 401  : 		// HelicopterClass Exec functions
; 402  :    		if (gSfxLOD >= 0.5f && GetDomain() == DOMAIN_AIR)

	movss	xmm0, DWORD PTR ?gSfxLOD@@3MA
	comiss	xmm0, DWORD PTR __real@3f000000
	jb	SHORT $LN20@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
$LN20@Exec:

; 403  : 		{
; 404  : 		}
; 405  : ///*
; 406  : //			 update dying timer
; 407  : //			dyingTimer += SimLibMajorFrameTime;
; 408  : //
; 409  : //			 Do nothing for the 1st part of dying
; 410  : //			if ( pctStrength > -0.07f )
; 411  : //			{
; 412  : //			}
; 413  : //		RV - I-Hawk - Commenting some unnecessary stuff here... 
; 414  : //
; 415  : //			 just chuck out debris until a certain point in death sequence
; 416  : //			else if ( pctStrength > -0.3f ) // I-Hawk - was -0.5f before
; 417  : //			{
; 418  : //				if ( dyingTimer > 0.3f ) // 
; 419  : //				{
; 420  : //				   I-Hawk - better with the standard position...
; 421  : //
; 422  : //					/*
; 423  : //					pos.x = XPos() - XDelta() * SimLibMajorFrameTime;
; 424  : //					pos.y = YPos() - YDelta() * SimLibMajorFrameTime;
; 425  : //					pos.z = ZPos() - ZDelta() * SimLibMajorFrameTime;
; 426  : //					*/
; 427  : ///*
; 428  : //					pos.x = XPos();
; 429  : //					pos.y = YPos();
; 430  : //					pos.z = ZPos();
; 431  : //
; 432  : //					vec.x = XDelta();
; 433  : //					vec.y = YDelta();
; 434  : //					vec.z = ZDelta();
; 435  : //
; 436  : //					DrawableParticleSys::PS_AddParticleEx((PSFX_AC_EARLY_BURNING + 1),
; 437  : //												&pos,
; 438  : //												&vec);
; 439  : //
; 440  : //					Cobra 11/12/04 TJL Removed per Steve and stops Scrape sound during dying
; 441  : //					/*
; 442  : //					if(!AddParticleEffect(PSFX_AC_EARLY_BURNING,&pos, &vec))
; 443  : //					{
; 444  : //						/*
; 445  : //						OTWDriver.AddSfxRequest(
; 446  : //								new SfxClass (SFX_SPARKS,			// type was SFX_SPARKS
; 447  : //								&pos,							// world pos
; 448  : //								1.0f,							// time to live
; 449  : //								12.0f ));		// scale
; 450  : //								*/
; 451  : //					/*
; 452  : //						DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 453  : //												&pos,
; 454  : //												&PSvec);
; 455  : //					}
; 456  : //					*/
; 457  : //	
; 458  : ///*					
; 459  : //					for ( int i = 0; i < 3; i++ )
; 460  : //					{
; 461  : //						vec.x = XDelta() * 0.5f + PRANDFloat() * 20.0f;
; 462  : //						vec.y = YDelta() * 0.5f + PRANDFloat() * 20.0f;
; 463  : //						vec.z = ZDelta() * 0.5f + PRANDFloat() * 20.0f;
; 464  : //						/*
; 465  : //						OTWDriver.AddSfxRequest(
; 466  : //								new SfxClass (SFX_AC_DEBRIS,			// type
; 467  : //								SFX_MOVES | SFX_USES_GRAVITY,						// flags
; 468  : //								&pos,							// world pos
; 469  : //								&vec,							// vector
; 470  : //								3.5f,							// time to live
; 471  : //								2.0f ));		// scale
; 472  : //								*/
; 473  : ///*
; 474  : //						DrawableParticleSys::PS_AddParticleEx((SFX_AC_DEBRIS + 1),
; 475  : //												&pos,
; 476  : //												&vec);
; 477  : //					}
; 478  : //					
; 479  : //					 zero out
; 480  : //					dyingTimer = 0.0f;
; 481  : //				}
; 482  : //		   }
; 483  : //		    if dyingTimer is greater than some value, we can run some
; 484  : //		    sort of special effect such as tossing debris, ejection, etc...
; 485  : //
; 486  : //		RV - I-Hawk - Commenting lots of stuff here... needed no more.
; 487  : //
; 488  : //		   else switch( dyingType )
; 489  : //		   {
; 490  : //			   case 5:
; 491  : //			   case SimVehicleClass::DIE_SMOKE:
; 492  : //				   if ( dyingTimer > 0.10f + ( 1.0f - gSfxLOD ) * 0.3f )
; 493  : //				   {
; 494  : //					    run stuff here....
; 495  : //					   pos.x = XPos();
; 496  : //					   pos.y = YPos();
; 497  : //					   pos.z = ZPos();
; 498  : //
; 499  : //	   					vec.x = XDelta();
; 500  : //						vec.y = YDelta();
; 501  : //						vec.z = ZDelta();
; 502  : //  
; 503  : //						DrawableParticleSys::PS_AddParticleEx((PSFX_VEHICLE_DIE_SMOKE + 1),
; 504  : //												&pos,
; 505  : //												&vec);
; 506  : //
; 507  : //						/* I-Hawk
; 508  : //					   if(!AddParticleEffect(PSFX_VEHICLE_DIE_SMOKE,&pos,&vec))
; 509  : //					   {
; 510  : //	   					   vec.x = PRANDFloat() * 40.0f;
; 511  : //						   vec.y = PRANDFloat() * 40.0f;
; 512  : //						   vec.z = PRANDFloat() * 40.0f;
; 513  : //
; 514  : //						   switch ( PRANDInt5() )
; 515  : //						   {
; 516  : //						   case 0:
; 517  : //						   	   /*
; 518  : //							   OTWDriver.AddSfxRequest(
; 519  : //								   new SfxClass (SFX_SPARKS,			// type
; 520  : //								   &pos,							// world pos
; 521  : //								   4.5f,							// time to live
; 522  : //								   7.5f ));		// scale
; 523  : //								   */
; 524  : //						/*
; 525  : //							   DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 526  : //												&pos,
; 527  : //												&PSvec);
; 528  : //							   break;
; 529  : //						   case 1:
; 530  : //							   /*
; 531  : //							   OTWDriver.AddSfxRequest(
; 532  : //								   new SfxClass (SFX_TRAILSMOKE,			// type
; 533  : //								   SFX_MOVES,						// flags
; 534  : //								   &pos,							// world pos
; 535  : //								   &vec,							// vector
; 536  : //								   4.5f,							// time to live
; 537  : //								   20.5f ));		// scale
; 538  : //								   */
; 539  : //						/*
; 540  : //							   DrawableParticleSys::PS_AddParticleEx((SFX_TRAILSMOKE + 1),
; 541  : //												&pos,
; 542  : //												&vec);
; 543  : //							   break;
; 544  : //						   default:
; 545  : //							   /*
; 546  : //							   OTWDriver.AddSfxRequest(
; 547  : //								   new SfxClass (SFX_AIR_SMOKECLOUD,			// type
; 548  : //								   SFX_MOVES,						// flags
; 549  : //								   &pos,							// world pos
; 550  : //								   &vec,							// vector
; 551  : //								   4.5f,							// time to live
; 552  : //								   10.5f ));		// scale
; 553  : //								   */
; 554  : //						/*
; 555  : //							   DrawableParticleSys::PS_AddParticleEx((SFX_AIR_SMOKECLOUD + 1),
; 556  : //												&pos,
; 557  : //												&vec);
; 558  : //							   break;
; 559  : //						   }
; 560  : //					   }
; 561  : //					   */
; 562  : ///*					   
; 563  : //					    reset the timer
; 564  : //					   dyingTimer = 0.0f;
; 565  : //				   }
; 566  : //				   break;
; 567  : //			   case 6:
; 568  : //			   case SimVehicleClass::DIE_SHORT_FIREBALL:
; 569  : //				   if ( dyingTimer > 0.10f + ( 1.0f - gSfxLOD ) * 0.3f )
; 570  : //				   {
; 571  : //					   pos.x = XPos();
; 572  : //					   pos.y = YPos();
; 573  : //					   pos.z = ZPos();
; 574  : //					   
; 575  : //					   vec.x = XDelta();
; 576  : //					   vec.y = YDelta();
; 577  : //					   vec.z = ZDelta();
; 578  : //
; 579  : //					   DrawableParticleSys::PS_AddParticleEx((PSFX_VEHICLE_DIE_FIREBALL + 1),
; 580  : //												&pos,
; 581  : //												&vec);
; 582  : //					   /* I-Hawk
; 583  : //					   if(!AddParticleEffect(PSFX_VEHICLE_DIE_FIREBALL,&pos,&vec))
; 584  : //					   {	   
; 585  : //						   if ( pctStrength > -0.7f )
; 586  : //						   {
; 587  : //							   float randamt  =   PRANDFloatPos();
; 588  : //							   
; 589  : //							    run stuff here....
; 590  : //							   pos.x = XPos();
; 591  : //							   pos.y = YPos();
; 592  : //							   pos.z = ZPos();
; 593  : //							   
; 594  : //							   vec.x = XDelta();
; 595  : //							   vec.y = YDelta();
; 596  : //							   vec.z = ZDelta();
; 597  : //							   
; 598  : //							   /*
; 599  : //							   OTWDriver.AddSfxRequest(
; 600  : //								   new SfxClass( SFX_FIRE1,				// type
; 601  : //								   &pos,							// world pos
; 602  : //								   0.5f,							// time to live
; 603  : //								   20.0f + 50.0f * randamt ) );		// scale
; 604  : //								   */
; 605  : //					   /*
; 606  : //							   DrawableParticleSys::PS_AddParticleEx((SFX_FIRE1 + 1),
; 607  : //												&pos,
; 608  : //												&PSvec);
; 609  : //						   }
; 610  : //						   else
; 611  : //						   {
; 612  : //							   vec.x = PRANDFloat() * 40.0f;
; 613  : //							   vec.y = PRANDFloat() * 40.0f;
; 614  : //							   vec.z = PRANDFloat() * 40.0f;
; 615  : //							    run stuff here....
; 616  : //							   pos.x = XPos() - XDelta() * SimLibMajorFrameTime;
; 617  : //							   pos.y = YPos() - YDelta() * SimLibMajorFrameTime;
; 618  : //							   pos.z = ZPos() - ZDelta() * SimLibMajorFrameTime;
; 619  : //							   switch ( PRANDInt5() )
; 620  : //							   {
; 621  : //							   case 0:
; 622  : //								   /*
; 623  : //								   OTWDriver.AddSfxRequest(
; 624  : //									   new SfxClass (SFX_SPARKS,			// type
; 625  : //									   &pos,							// world pos
; 626  : //									   4.5f,							// time to live
; 627  : //									   12.5f ));		// scale
; 628  : //									   */
; 629  : //					   /*
; 630  : //								   DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 631  : //												&pos,
; 632  : //												&PSvec);
; 633  : //								   break;
; 634  : //							   case 1:
; 635  : //								   /*
; 636  : //								   OTWDriver.AddSfxRequest(
; 637  : //									   new SfxClass (SFX_SPARKS,			// type
; 638  : //									   &pos,							// world pos
; 639  : //									   1.5f,							// time to live
; 640  : //									   12.5f ));		// scale
; 641  : //									   */
; 642  : //					   /*
; 643  : //								   DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 644  : //												&pos,
; 645  : //												&PSvec);
; 646  : //								   break;
; 647  : //							   default:
; 648  : //								   /*
; 649  : //								   OTWDriver.AddSfxRequest(
; 650  : //									   new SfxClass (SFX_TRAILSMOKE,			// type
; 651  : //									   SFX_MOVES,						// flags
; 652  : //									   &pos,							// world pos
; 653  : //									   &vec,							// vector
; 654  : //									   4.5f,							// time to live
; 655  : //									   20.5f ));		// scale
; 656  : //									   */
; 657  : //					   /*
; 658  : //								   DrawableParticleSys::PS_AddParticleEx((SFX_TRAILSMOKE + 1),
; 659  : //												&pos,
; 660  : //												&vec);
; 661  : //								   break;
; 662  : //							   }
; 663  : //						   }
; 664  : //					   }
; 665  : //					   */
; 666  : //	
; 667  : ///*					   // reset the timer
; 668  : //					   dyingTimer = 0.0f;
; 669  : //				   }
; 670  : //				   break;
; 671  : //			   case SimVehicleClass::DIE_INTERMITTENT_SMOKE:
; 672  : //				   if ( dyingTimer > 0.10f + ( 1.0f - gSfxLOD ) * 0.3f )
; 673  : //				   {
; 674  : //
; 675  : //					   RV - I-Hawk - No need for such random position and vector...
; 676  : //					   /*
; 677  : //						vec.x = PRANDFloat() * 40.0f;
; 678  : //						vec.y = PRANDFloat() * 40.0f;
; 679  : //						vec.z = PRANDFloat() * 40.0f;
; 680  : //						 run stuff here....
; 681  : //						pos.x = XPos() - XDelta() * SimLibMajorFrameTime;
; 682  : //						pos.y = YPos() - YDelta() * SimLibMajorFrameTime;
; 683  : //						pos.z = ZPos() - ZDelta() * SimLibMajorFrameTime;
; 684  : //						*/
; 685  : ///*
; 686  : //					   pos.x = XPos();
; 687  : //					   pos.y = YPos();
; 688  : //					   pos.z = ZPos();
; 689  : //					   
; 690  : //					   vec.x = XDelta();
; 691  : //					   vec.y = YDelta();
; 692  : //					   vec.z = ZDelta();
; 693  : //
; 694  : //					   DrawableParticleSys::PS_AddParticleEx((PSFX_VEHICLE_DIE_SMOKE2 + 1),
; 695  : //												&pos,
; 696  : //												&vec);
; 697  : //
; 698  : //					   /* I-Hawk
; 699  : //						if(!AddParticleEffect(PSFX_VEHICLE_DIE_SMOKE2,&pos,&vec))
; 700  : //						{
; 701  : //							switch ( PRANDInt5() )
; 702  : //							{
; 703  : //								case 0:
; 704  : //								case 1:
; 705  : //									/*
; 706  : //									OTWDriver.AddSfxRequest(
; 707  : //										new SfxClass (SFX_SPARKS,			// type
; 708  : //										&pos,							// world pos
; 709  : //										4.5f,							// time to live
; 710  : //										12.5f ));		// scale
; 711  : //										*/
; 712  : //					   /*
; 713  : //									DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 714  : //												&pos,
; 715  : //												&PSvec);
; 716  : //									break;
; 717  : //								case 2:
; 718  : //									/*
; 719  : //									OTWDriver.AddSfxRequest(
; 720  : //										new SfxClass (SFX_SPARKS,			// type
; 721  : //										&pos,							// world pos
; 722  : //										1.5f,							// time to live
; 723  : //										12.5f ));		// scale
; 724  : //										*/
; 725  : //					   /*
; 726  : //									DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 727  : //												&pos,
; 728  : //												&PSvec);
; 729  : //									break;
; 730  : //								default:
; 731  : //									/*
; 732  : //									OTWDriver.AddSfxRequest(
; 733  : //										new SfxClass (SFX_TRAILSMOKE,			// type
; 734  : //										SFX_MOVES,						// flags
; 735  : //										&pos,							// world pos
; 736  : //										&vec,							// vector
; 737  : //										4.5f,							// time to live
; 738  : //										20.5f ));		// scale
; 739  : //										*/
; 740  : //					   /*
; 741  : //									DrawableParticleSys::PS_AddParticleEx((SFX_TRAILSMOKE + 1),
; 742  : //												&pos,
; 743  : //												&vec);
; 744  : //									break;
; 745  : //							}
; 746  : //						}
; 747  : //						*/
; 748  : ///*
; 749  : //						 reset the timer
; 750  : //						dyingTimer = 0.0f;
; 751  : //	
; 752  : //				   }
; 753  : //				   break;
; 754  : //			   case SimVehicleClass::DIE_FIREBALL:
; 755  : //				   if ( dyingTimer > 0.10f + ( 1.0f - gSfxLOD ) * 0.3f )
; 756  : //				   {
; 757  : //					   float randamt  =   PRANDFloatPos();
; 758  : //			
; 759  : //					    run stuff here....
; 760  : //					   pos.x = XPos();
; 761  : //					   pos.y = YPos();
; 762  : //					   pos.z = ZPos();
; 763  : //
; 764  : //					   vec.x = XDelta();
; 765  : //					   vec.y = YDelta();
; 766  : //					   vec.z = ZDelta();
; 767  : //
; 768  : //					   DrawableParticleSys::PS_AddParticleEx((PSFX_VEHICLE_DIE_FIREBALL2 + 1),
; 769  : //												&pos,
; 770  : //												&vec);
; 771  : //					   
; 772  : //					   /* I-Hawk
; 773  : //					   if(!AddParticleEffect(PSFX_VEHICLE_DIE_FIREBALL2,&pos,&vec))
; 774  : //					   {
; 775  : //						   /*
; 776  : //						   OTWDriver.AddSfxRequest(
; 777  : //										new SfxClass( SFX_FIRE1,				// type
; 778  : //										&pos,							// world pos
; 779  : //										0.5f,							// time to live
; 780  : //										40.0f + 30.0f * randamt ) );		// scale
; 781  : //										*/
; 782  : //					   /*
; 783  : //						   DrawableParticleSys::PS_AddParticleEx((SFX_FIRE1 + 1),
; 784  : //												&pos,
; 785  : //												&PSvec);
; 786  : //					   }
; 787  : //					   */
; 788  : ///*			
; 789  : //					    reset the timer
; 790  : //					   dyingTimer = 0.0f;
; 791  : //				   }
; 792  : //				   break;
; 793  : //			   case SimVehicleClass::DIE_INTERMITTENT_FIRE:
; 794  : //			   default:
; 795  : //				   if ( dyingTimer > 0.10f + ( 1.0f - gSfxLOD ) * 0.3f )
; 796  : //				   {
; 797  : //					   pos.x = XPos();
; 798  : //					   pos.y = YPos();
; 799  : //					   pos.z = ZPos();					   
; 800  : //					   
; 801  : //					   vec.x = XDelta();
; 802  : //					   vec.y = YDelta();
; 803  : //					   vec.z = ZDelta();
; 804  : //
; 805  : //					   DrawableParticleSys::PS_AddParticleEx((PSFX_VEHICLE_DIE_INTERMITTENT_FIRE + 1),
; 806  : //												&pos,
; 807  : //												&vec);
; 808  : //						
; 809  : //					   /* I-Hawk
; 810  : //					   if(!AddParticleEffect(PSFX_VEHICLE_DIE_INTERMITTENT_FIRE,&pos,&vec))
; 811  : //					   {	   
; 812  : //						   
; 813  : //						   if ( pctStrength > -0.6f ||
; 814  : //							   pctStrength > -0.7f && pctStrength < -0.65 ||
; 815  : //							   pctStrength > -0.8f && pctStrength < -0.75 ||
; 816  : //							   pctStrength > -0.9f && pctStrength < -0.85 )
; 817  : //						   {
; 818  : //							   float randamt  =   PRANDFloatPos();
; 819  : //							   
; 820  : //							    run stuff here....
; 821  : //							   pos.x = XPos();
; 822  : //							   pos.y = YPos();
; 823  : //							   pos.z = ZPos();
; 824  : //							   
; 825  : //							   
; 826  : //							   /*
; 827  : //							   OTWDriver.AddSfxRequest(
; 828  : //								   new SfxClass( SFX_FIRE1,				// type
; 829  : //								   &pos,							// world pos
; 830  : //								   0.5f,							// time to live
; 831  : //								   20.0f + 50.0f * randamt ) );		// scale
; 832  : //								   */
; 833  : //					   /*
; 834  : //							   DrawableParticleSys::PS_AddParticleEx((SFX_FIRE1 + 1),
; 835  : //												&pos,
; 836  : //												&PSvec);
; 837  : //							   
; 838  : //						   }
; 839  : //						   else
; 840  : //						   {
; 841  : //							   vec.x = PRANDFloat() * 40.0f;
; 842  : //							   vec.y = PRANDFloat() * 40.0f;
; 843  : //							   vec.z = PRANDFloat() * 40.0f;
; 844  : //							    run stuff here....
; 845  : //							   pos.x = XPos() - XDelta() * SimLibMajorFrameTime;
; 846  : //							   pos.y = YPos() - YDelta() * SimLibMajorFrameTime;
; 847  : //							   pos.z = ZPos() - ZDelta() * SimLibMajorFrameTime;
; 848  : //							   switch ( PRANDInt5() )
; 849  : //							   {
; 850  : //							   case 0:
; 851  : //							   case 1:
; 852  : //								   /*
; 853  : //								   OTWDriver.AddSfxRequest(
; 854  : //									   new SfxClass (SFX_SPARKS,			// type
; 855  : //									   &pos,							// world pos
; 856  : //									   4.5f,							// time to live
; 857  : //									   12.5f ));		// scale
; 858  : //									   */
; 859  : //					   /*
; 860  : //								   DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 861  : //												&pos,
; 862  : //												&PSvec);
; 863  : //								   break;
; 864  : //							   case 2:
; 865  : //								   /*
; 866  : //                                   OTWDriver.AddSfxRequest(
; 867  : //									   new SfxClass (SFX_SPARKS,			// type
; 868  : //									   &pos,							// world pos
; 869  : //									   1.5f,							// time to live
; 870  : //									   12.5f ));		// scale
; 871  : //									   */
; 872  : //					   /*
; 873  : //								   DrawableParticleSys::PS_AddParticleEx((SFX_SPARKS + 1),
; 874  : //												&pos,
; 875  : //												&PSvec);
; 876  : //								   break;
; 877  : //							   default:
; 878  : //								   /*
; 879  : //								   OTWDriver.AddSfxRequest(
; 880  : //									   new SfxClass (SFX_TRAILSMOKE,			// type
; 881  : //									   SFX_MOVES,						// flags
; 882  : //									   &pos,							// world pos
; 883  : //									   &vec,							// vector
; 884  : //									   4.5f,							// time to live
; 885  : //									   20.5f ));		// scale
; 886  : //									   */
; 887  : //					   /*
; 888  : //								   DrawableParticleSys::PS_AddParticleEx((SFX_TRAILSMOKE + 1),
; 889  : //												&pos,
; 890  : //												&vec);
; 891  : //								   break;
; 892  : //							   }
; 893  : //						   }
; 894  : //					   }
; 895  : //					   */
; 896  : ///*	
; 897  : //					    reset the timer
; 898  : //					   dyingTimer = 0.0f;
; 899  : //				   }
; 900  : //				   break;
; 901  : //			} // end switch
; 902  : //		} // end if LOD
; 903  : //
; 904  : //	 RV - I-Hawk - until here... 
; 905  : //*/
; 906  : 
; 907  : 		// RV - Biker - Effects for ships (maybe some special for tanker type)
; 908  : 		if (GetDomain() == DOMAIN_SEA) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	edx, al
	cmp	edx, 4
	jne	$LN18@Exec

; 909  : 			dyingTimer += SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+248]
	addss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+248], xmm0

; 910  : 			if ( dyingTimer > 2.5f && rand() & 0x03) {

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+248]
	comiss	xmm0, DWORD PTR __real@40200000
	jbe	SHORT $LN18@Exec
	call	_rand
	and	eax, 3
	je	SHORT $LN18@Exec

; 911  : 				dyingTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+248], xmm0

; 912  : 				pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 913  : 				pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 914  : 				pos.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 915  : 				/*
; 916  : 				OTWDriver.AddSfxRequest(
; 917  : 					new SfxClass (SFX_WATERTRAIL,	// type
; 918  : 					&pos,							// world pos
; 919  : 					3.0f,							// time to live
; 920  : 					0.1f ));
; 921  : 					*/
; 922  : 				DrawableParticleSys::PS_AddParticleEx((SFX_WATERTRAIL + 1),
; 923  : 												&pos,
; 924  : 												&PSvec);

	lea	ecx, DWORD PTR _PSvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	61					; 0000003dH
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN18@Exec:

; 925  : 			}
; 926  : 		}
; 927  : 
; 928  : 		// RV - Biker - bleed off strength at some rate....
; 929  : 		switch (GetDomain()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	mov	BYTE PTR tv221[ebp], al
	cmp	BYTE PTR tv221[ebp], 2
	je	SHORT $LN15@Exec
	cmp	BYTE PTR tv221[ebp], 3
	je	$LN7@Exec
	cmp	BYTE PTR tv221[ebp], 4
	je	$LN6@Exec
	jmp	$LN5@Exec
$LN15@Exec:

; 930  : 			case DOMAIN_AIR:
; 931  : 			   //RV - I-Hawk - Use random death time...
; 932  : 				switch ( dyingTime )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	mov	DWORD PTR tv223[ebp], ecx
	cmp	DWORD PTR tv223[ebp], 4
	ja	$LN8@Exec
	mov	edx, DWORD PTR tv223[ebp]
	jmp	DWORD PTR $LN27@Exec[edx*4]
$LN12@Exec:

; 933  : 				{
; 934  : 				case 0:
; 935  : 				case 1:
; 936  : 					strength -= maxStrength * 0.05f * SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1

; 937  : 					break;

	jmp	$LN13@Exec
$LN11@Exec:

; 938  : 				case 2:
; 939  : 					strength -= maxStrength * 0.05f * SimLibMajorFrameTime * 5000.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@459c4000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1

; 940  : 					break;

	jmp	$LN13@Exec
$LN10@Exec:

; 941  : 				case 3:
; 942  : 					strength -= maxStrength * 0.05f * SimLibMajorFrameTime * 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1

; 943  : 					break;

	jmp	SHORT $LN13@Exec
$LN9@Exec:

; 944  : 				case 4:
; 945  : 					strength -= maxStrength * 0.05f * SimLibMajorFrameTime * 1.5f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3fc00000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1

; 946  : 					break;

	jmp	SHORT $LN13@Exec
$LN8@Exec:

; 947  : 				default:
; 948  : 					strength -= maxStrength * 0.05f * SimLibMajorFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1
$LN13@Exec:

; 949  : 					break;
; 950  :  				}
; 951  : 				
; 952  : 				break;

	jmp	$LN16@Exec
$LN7@Exec:

; 953  : 			case DOMAIN_LAND:
; 954  : 				// Ground vehicles go almost directly dead
; 955  : 				strength -= maxStrength * 0.05f * SimLibMajorFrameTime*5000.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@459c4000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1

; 956  : 				break;

	jmp	SHORT $LN16@Exec
$LN6@Exec:

; 957  : 			// Maybe switch for type also
; 958  : 			case DOMAIN_SEA:
; 959  : 				// Ship bleed off slower
; 960  : 				strength -= maxStrength * 0.05f * SimLibMajorFrameTime *0.05f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1

; 961  : 				break;

	jmp	SHORT $LN16@Exec
$LN5@Exec:

; 962  : 			default:
; 963  : 				strength -= maxStrength * 0.05f * SimLibMajorFrameTime*5000.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+244]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@459c4000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+240]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+240], xmm1
$LN16@Exec:

; 964  : 				break;
; 965  : 		}
; 966  : 
; 967  : 		pctStrength = strength/maxStrength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+240]
	divss	xmm0, DWORD PTR [ecx+244]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+292], xmm0

; 968  : 
; 969  : 		// when we've bottomed out, kablooey!
; 970  : 		// Have a look how AC behave when on ground
; 971  : 		if (pctStrength <= -1.0f /*|| OnGround()*/)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [eax+292]
	jb	$LN1@Exec

; 972  : 		{
; 973  : 			if (GetDomain() == DOMAIN_LAND && GetType() != TYPE_FOOT) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	ecx, al
	cmp	ecx, 3
	jne	SHORT $LN3@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	edx, al
	cmp	edx, 1
	je	SHORT $LN3@Exec

; 974  : 				dyingTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+248], xmm0

; 975  : 				pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 976  : 				pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 977  : 				pos.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 978  : 				/*
; 979  : 				OTWDriver.AddSfxRequest(
; 980  : 					new SfxClass (SFX_VEHICLE_BURNING,	// type
; 981  : 					&pos,							// world pos
; 982  : 					rand()%5+15.0f,					// time to live
; 983  : 					0.1f ));
; 984  : 					*/
; 985  : 				DrawableParticleSys::PS_AddParticleEx((SFX_VEHICLE_BURNING + 1),
; 986  : 												&pos,
; 987  : 												&PSvec);

	lea	ecx, DWORD PTR _PSvec$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	push	116					; 00000074H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN3@Exec:

; 988  : 			}
; 989  : 			if (GetDomain() == DOMAIN_SEA) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDomain@SimBaseClass@@QBEEXZ		; SimBaseClass::GetDomain
	movzx	eax, al
	cmp	eax, 4
	jne	SHORT $LN2@Exec

; 990  : 				dyingTimer = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+248], xmm0

; 991  : 				pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 992  : 				pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 993  : 				pos.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 994  : 				/*
; 995  : 				OTWDriver.AddSfxRequest(
; 996  : 					new SfxClass (SFX_VEHICLE_BURNING,// type
; 997  : 					&pos,						// world pos
; 998  : 					rand()%5+15.0f,				// time to live
; 999  : 					0.1f ));
; 1000 : 					*/
; 1001 : 				//RV - I-Hawk - Change from VEHICLE_BURNING to FIRE2 for ships special late burning
; 1002 : 				DrawableParticleSys::PS_AddParticleEx((SFX_SHIP_BURNING_FIRE + 1),
; 1003 : 												&pos,
; 1004 : 												&PSvec);

	lea	edx, DWORD PTR _PSvec$[ebp]
	push	edx
	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	push	87					; 00000057H
	call	?PS_AddParticleEx@DrawableParticleSys@@SAXHPAUTpoint@@0@Z ; DrawableParticleSys::PS_AddParticleEx
	add	esp, 12					; 0000000cH
$LN2@Exec:

; 1005 : 			}
; 1006 : 
; 1007 : 			// damage anything around us when we explode
; 1008 : 			ApplyProximityDamage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyProximityDamage@SimVehicleClass@@QAEXXZ ; SimVehicleClass::ApplyProximityDamage

; 1009 : 
; 1010 : 	   		SetExploding( TRUE );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExploding@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetExploding

; 1011 : 
; 1012 : 	//           MonoPrint ("Vehicle %d DEAD! Local: %s, Has Death Msg: %s\n",
; 1013 : 	//		   				Id().num_,
; 1014 : 	//						IsLocal() ? "TRUE" : "FALSE",
; 1015 : 	//						deathMessage ? "TRUE" : "FALSE" );
; 1016 : 
; 1017 : 			// local entity sends death message out
; 1018 : 			if (deathMessage)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+740], 0
	je	SHORT $LN1@Exec

; 1019 :       	   		FalconSendMessage (deathMessage,TRUE);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+740]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN1@Exec:

; 1020 : 		}
; 1021 : 	} // end if pctStr < 0
; 1022 : 
; 1023 : 	return TRUE;

	mov	eax, 1

; 1024 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@Exec:
	DD	$LN12@Exec
	DD	$LN12@Exec
	DD	$LN11@Exec
	DD	$LN10@Exec
	DD	$LN9@Exec
?Exec@SimVehicleClass@@UAEHXZ ENDP			; SimVehicleClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeRemote@SimVehicleClass@@UAEXXZ PROC		; SimVehicleClass::MakeRemote
; _this$ = ecx

; 223  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 	// Nothing particularly interesting here right now.
; 225  : 	SimMoverClass::MakeRemote();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeRemote@SimMoverClass@@UAEXXZ	; SimMoverClass::MakeRemote

; 226  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MakeRemote@SimVehicleClass@@UAEXXZ ENDP		; SimVehicleClass::MakeRemote
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLocal@SimVehicleClass@@UAEXXZ PROC			; SimVehicleClass::MakeLocal
; _this$ = ecx

; 217  : void SimVehicleClass::MakeLocal(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	// Nothing particularly interesting here right now.
; 219  : 	SimMoverClass::MakeLocal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeLocal@SimMoverClass@@UAEXXZ	; SimMoverClass::MakeLocal

; 220  : }	

	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLocal@SimVehicleClass@@UAEXXZ ENDP			; SimVehicleClass::MakeLocal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?Sleep@SimVehicleClass@@UAEHXZ PROC			; SimVehicleClass::Sleep
; _this$ = ecx

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 203  : 
; 204  : 	if (!IsAwake()){ return retval; }

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	jne	SHORT $LN2@Sleep
	mov	eax, DWORD PTR _retval$[ebp]
	jmp	SHORT $LN3@Sleep
$LN2@Sleep:

; 205  : 
; 206  : 	SimMoverClass::Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@SimMoverClass@@UAEHXZ		; SimMoverClass::Sleep

; 207  : 
; 208  : 	if (theBrain)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+672], 0
	je	SHORT $LN1@Sleep

; 209  : 	{
; 210  : 		theBrain->Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+672]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+672]
	mov	eax, DWORD PTR [edx+24]
	call	eax
$LN1@Sleep:

; 211  : 	}
; 212  : 
; 213  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN3@Sleep:

; 214  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@SimVehicleClass@@UAEHXZ ENDP			; SimVehicleClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wake@SimVehicleClass@@UAEHXZ PROC			; SimVehicleClass::Wake
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 	//int retval = 0;
; 196  : 	if (IsAwake()){ return 0; }

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN1@Wake
	xor	eax, eax
	jmp	SHORT $LN2@Wake
$LN1@Wake:

; 197  : 	return SimMoverClass::Wake();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wake@SimMoverClass@@UAEHXZ		; SimMoverClass::Wake
$LN2@Wake:

; 198  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@SimVehicleClass@@UAEHXZ ENDP			; SimVehicleClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 4
$T4 = -84						; size = 4
$T5 = -80						; size = 4
$T6 = -76						; size = 4
$T7 = -72						; size = 4
$T8 = -68						; size = 4
tv408 = -64						; size = 4
$T9 = -60						; size = 4
tv349 = -56						; size = 4
$T10 = -52						; size = 4
tv315 = -48						; size = 4
$T11 = -44						; size = 4
tv281 = -40						; size = 4
$T12 = -36						; size = 4
tv247 = -32						; size = 4
$T13 = -28						; size = 4
tv215 = -24						; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_initData$ = 8						; size = 4
?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z PROC	; SimVehicleClass::Init
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 	SimMoverClass::Init(initData);

	mov	eax, DWORD PTR _initData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@SimMoverClass@@UAEXPAVSimInitDataClass@@@Z ; SimMoverClass::Init

; 145  : 	int i;
; 146  : 	if (!IsAirplane()){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	$LN17@Init

; 147  : 		// Create Sensors
; 148  : 		if (mvrDefinition){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+632], 0
	je	SHORT $LN15@Init

; 149  : 			numSensors = mvrDefinition->numSensors;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+632]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+652], edx

; 150  : 		}
; 151  : 		else{

	jmp	SHORT $LN14@Init
$LN15@Init:

; 152  : 			numSensors = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+652], 0
$LN14@Init:

; 153  : 		}
; 154  : 		
; 155  : 		// Note, until there is a vehicle definition for radar vehicles
; 156  : 		// do it as a special case here and below.
; 157  : 		if (IsGroundVehicle() && GetRadarType() != RDR_NO_RADAR){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	test	eax, eax
	je	SHORT $LN13@Init
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	je	SHORT $LN13@Init

; 158  : 		   sensorArray = new SensorClass*[numSensors+1];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+652]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax+648], ecx

; 159  : 		}
; 160  : 		else{

	jmp	SHORT $LN12@Init
$LN13@Init:

; 161  : 		   sensorArray = new SensorClass*[numSensors];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+652]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [eax+648], ecx
$LN12@Init:

; 162  : 		}
; 163  : 
; 164  : 		for (i = 0; i<numSensors && mvrDefinition && mvrDefinition->sensorData; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@Init
$LN10@Init:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN11@Init:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+652]
	jge	$LN9@Init
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+632], 0
	je	$LN9@Init
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+632]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN9@Init

; 165  : 		   switch (mvrDefinition->sensorData[i*2]){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+632]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv215[ebp], eax
	cmp	DWORD PTR tv215[ebp], 3
	ja	$LN7@Init
	mov	ecx, DWORD PTR tv215[ebp]
	jmp	DWORD PTR $LN35@Init[ecx*4]
$LN6@Init:

; 166  : 			   case SensorClass::Radar:
; 167  : 				   sensorArray[i] = new RadarDigiClass (GetRadarType(), this);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN19@Init
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	push	eax
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0RadarDigiClass@@QAE@HPAVSimMoverClass@@@Z ; RadarDigiClass::RadarDigiClass
	mov	DWORD PTR tv247[ebp], eax
	jmp	SHORT $LN20@Init
$LN19@Init:
	mov	DWORD PTR tv247[ebp], 0
$LN20@Init:
	mov	ecx, DWORD PTR tv247[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 168  : 			   break;

	jmp	$LN7@Init
$LN5@Init:

; 169  : 			   case SensorClass::RWR:
; 170  : 				   sensorArray[i] = new VehRwrClass (mvrDefinition->sensorData[i*2 + 1], this);

	push	600					; 00000258H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN21@Init
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+632]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0VehRwrClass@@QAE@HPAVSimMoverClass@@@Z ; VehRwrClass::VehRwrClass
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN22@Init
$LN21@Init:
	mov	DWORD PTR tv281[ebp], 0
$LN22@Init:
	mov	eax, DWORD PTR tv281[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 171  : 			   break;

	jmp	$LN7@Init
$LN4@Init:

; 172  : 			   case SensorClass::IRST:
; 173  : 				   sensorArray[i] = new IrstClass (mvrDefinition->sensorData[i*2 + 1], this);

	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN23@Init
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+632]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	push	ecx
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0IrstClass@@QAE@HPAVSimMoverClass@@@Z	; IrstClass::IrstClass
	mov	DWORD PTR tv315[ebp], eax
	jmp	SHORT $LN24@Init
$LN23@Init:
	mov	DWORD PTR tv315[ebp], 0
$LN24@Init:
	mov	edx, DWORD PTR tv315[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 174  : 			   break;

	jmp	SHORT $LN7@Init
$LN3@Init:

; 175  : 			   case SensorClass::Visual:
; 176  : 				   sensorArray[i] = new EyeballClass (mvrDefinition->sensorData[i*2 + 1], this);

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN25@Init
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+632]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0EyeballClass@@QAE@HPAVSimMoverClass@@@Z ; EyeballClass::EyeballClass
	mov	DWORD PTR tv349[ebp], eax
	jmp	SHORT $LN26@Init
$LN25@Init:
	mov	DWORD PTR tv349[ebp], 0
$LN26@Init:
	mov	ecx, DWORD PTR tv349[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+648]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
$LN7@Init:

; 177  : 			   break;
; 178  : 			   default:
; 179  : 				   ShiWarning( "Unhandled sensor type during Init" );
; 180  : 			   break;
; 181  : 		   }
; 182  : 	   }

	jmp	$LN10@Init
$LN9@Init:

; 183  : 
; 184  : 		// Note, until there is a vehicle definition for radar vehicles
; 185  : 		// do it as a special case here and above.
; 186  : 		if (IsGroundVehicle() && GetRadarType() != RDR_NO_RADAR){

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	test	eax, eax
	je	$LN17@Init
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	test	eax, eax
	je	SHORT $LN17@Init

; 187  : 			numSensors ++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+652]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+652], edx

; 188  : 			sensorArray[i] = new RadarDigiClass (GetRadarType(), this);

	push	144					; 00000090H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN27@Init
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+292]
	call	edx
	push	eax
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0RadarDigiClass@@QAE@HPAVSimMoverClass@@@Z ; RadarDigiClass::RadarDigiClass
	mov	DWORD PTR tv408[ebp], eax
	jmp	SHORT $LN28@Init
$LN27@Init:
	mov	DWORD PTR tv408[ebp], 0
$LN28@Init:
	mov	eax, DWORD PTR tv408[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN17@Init:

; 189  : 		}
; 190  :    }
; 191  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN35@Init:
	DD	$LN4@Init
	DD	$LN6@Init
	DD	$LN5@Init
	DD	$LN3@Init
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$0:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$1:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$2:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$3:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z$4:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@SimVehicleClass@@UAEXPAVSimInitDataClass@@@Z ENDP	; SimVehicleClass::Init
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
tv78 = -28						; size = 4
$T1 = -24						; size = 4
tv71 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?CleanupLocalData@SimVehicleClass@@AAEXXZ PROC		; SimVehicleClass::CleanupLocalData
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 	delete (theBrain);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@CleanupLoc
	push	1
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@CleanupLoc
$LN3@CleanupLoc:
	mov	DWORD PTR tv71[ebp], 0
$LN4@CleanupLoc:

; 129  : 	theBrain = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+672], 0

; 130  : 	delete (theInputs);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+720]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@CleanupLoc
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GPilotInputs@@QAEPAXI@Z
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN6@CleanupLoc
$LN5@CleanupLoc:
	mov	DWORD PTR tv78[ebp], 0
$LN6@CleanupLoc:

; 131  : 	theInputs = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+720], 0

; 132  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupLocalData@SimVehicleClass@@AAEXXZ ENDP		; SimVehicleClass::CleanupLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_vc$ = -16						; size = 4
_classPtr$ = -12					; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
?InitLocalData@SimVehicleClass@@AAEXXZ PROC		; SimVehicleClass::InitLocalData
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	Falcon4EntityClassType* classPtr = (Falcon4EntityClassType*)EntityType();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 104  : 	VehicleClassDataType *vc;
; 105  : 
; 106  : 	vc = (VehicleClassDataType *)classPtr->dataPtr;

	mov	eax, DWORD PTR _classPtr$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	mov	DWORD PTR _vc$[ebp], ecx

; 107  : 
; 108  : 	strength = maxStrength = (float)vc->HitPoints;

	mov	edx, DWORD PTR _vc$[ebp]
	movsx	eax, WORD PTR [edx+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv83[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv83[ebp]
	movss	DWORD PTR [ecx+244], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv83[ebp]
	movss	DWORD PTR [edx+240], xmm0

; 109  : 	pctStrength = 1.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+292], xmm0

; 110  : 	dyingTimer = -1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+248], xmm0

; 111  : 	dyingTime = 0; //RV - I-Hawk

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+700], 0

; 112  : 	sfxTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+252], xmm0

; 113  : 	ioPerturb = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+676], xmm0

; 114  : 	irOutput  = 0.0f;//me123

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+680], xmm0

; 115  : 	// JB 000814
; 116  : 	rBias = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+684], xmm0

; 117  : 	pBias = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+688], xmm0

; 118  : 	yBias = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+692], xmm0

; 119  : 	// JB 000814
; 120  : 
; 121  : 	theBrain = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+672], 0

; 122  : 	theInputs = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+720], 0

; 123  : 	deathMessage = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+740], 0

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitLocalData@SimVehicleClass@@AAEXXZ ENDP		; SimVehicleClass::InitLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupData@SimVehicleClass@@UAEXXZ PROC		; SimVehicleClass::CleanupData
; _this$ = ecx

; 135  : void SimVehicleClass::CleanupData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@SimVehicleClass@@AAEXXZ ; SimVehicleClass::CleanupLocalData

; 137  : 	// base class cleanup
; 138  : 	SimMoverClass::CleanupData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupData@SimMoverClass@@UAEXXZ	; SimMoverClass::CleanupData

; 139  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupData@SimVehicleClass@@UAEXXZ ENDP		; SimVehicleClass::CleanupData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitData@SimVehicleClass@@UAEXXZ PROC			; SimVehicleClass::InitData
; _this$ = ecx

; 96   : void SimVehicleClass::InitData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	SimMoverClass::InitData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitData@SimMoverClass@@UAEXXZ		; SimMoverClass::InitData

; 98   : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimVehicleClass@@AAEXXZ	; SimVehicleClass::InitLocalData

; 99   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitData@SimVehicleClass@@UAEXXZ ENDP			; SimVehicleClass::InitData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_tmpWaypoint$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1SimVehicleClass@@UAE@XZ PROC				; SimVehicleClass::~SimVehicleClass
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1SimVehicleClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SimVehicleClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 82   : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@SimVehicleClass@@AAEXXZ ; SimVehicleClass::CleanupLocalData

; 83   : 
; 84   : 	// sfr: @todo move to cleanup
; 85   : 	// Dispose waypoints
; 86   : 	WayPointClass* tmpWaypoint;
; 87   : 	curWaypoint = waypoint;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+732]
	mov	DWORD PTR [ecx+728], eax
$LN2@SimVehicle:

; 88   : 	while (curWaypoint){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	je	SHORT $LN3@SimVehicle

; 89   : 		tmpWaypoint = curWaypoint;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+728]
	mov	DWORD PTR _tmpWaypoint$[ebp], eax

; 90   : 		curWaypoint = curWaypoint->GetNextWP();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+728]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+728], eax

; 91   : 		delete (tmpWaypoint);

	mov	eax, DWORD PTR _tmpWaypoint$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 92   : 	}

	jmp	SHORT $LN2@SimVehicle
$LN3@SimVehicle:

; 93   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1SimVehicleClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__ehhandler$??1SimVehicleClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1SimVehicleClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1SimVehicleClass@@UAE@XZ ENDP				; SimVehicleClass::~SimVehicleClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_filePtr$ = 8						; size = 4
??0SimVehicleClass@@QAE@PAU_iobuf@@@Z PROC		; SimVehicleClass::SimVehicleClass
; _this$ = ecx

; 67   : SimVehicleClass::SimVehicleClass(FILE* filePtr) : SimMoverClass (filePtr){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _filePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimMoverClass@@QAE@PAU_iobuf@@@Z	; SimMoverClass::SimMoverClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SimVehicleClass@@6B@

; 68   : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimVehicleClass@@AAEXXZ	; SimVehicleClass::InitLocalData

; 69   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__ehhandler$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimVehicleClass@@QAE@PAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimVehicleClass@@QAE@PAU_iobuf@@@Z ENDP		; SimVehicleClass::SimVehicleClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0SimVehicleClass@@QAE@PAPAEPAJ@Z PROC			; SimVehicleClass::SimVehicleClass
; _this$ = ecx

; 71   : SimVehicleClass::SimVehicleClass(VU_BYTE** stream, long *rem) : SimMoverClass (stream, rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimVehicleClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimMoverClass@@QAE@PAPAEPAJ@Z	; SimMoverClass::SimMoverClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7SimVehicleClass@@6B@

; 72   : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimVehicleClass@@AAEXXZ	; SimVehicleClass::InitLocalData

; 73   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimVehicleClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__ehhandler$??0SimVehicleClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimVehicleClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimVehicleClass@@QAE@PAPAEPAJ@Z ENDP			; SimVehicleClass::SimVehicleClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
??0SimVehicleClass@@QAE@H@Z PROC			; SimVehicleClass::SimVehicleClass
; _this$ = ecx

; 76   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimVehicleClass@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimMoverClass@@QAE@H@Z		; SimMoverClass::SimMoverClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SimVehicleClass@@6B@

; 77   :    InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimVehicleClass@@AAEXXZ	; SimVehicleClass::InitLocalData

; 78   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimVehicleClass@@QAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__ehhandler$??0SimVehicleClass@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimVehicleClass@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimVehicleClass@@QAE@H@Z ENDP			; SimVehicleClass::SimVehicleClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_gridIt$ = -204						; size = 60
$T2 = -144						; size = 8
$T3 = -136						; size = 8
$T4 = -128						; size = 8
$T5 = -120						; size = 8
_objectWalker$ = -112					; size = 12
tv431 = -100						; size = 4
tv523 = -96						; size = 4
tv435 = -92						; size = 4
tv423 = -88						; size = 4
tv525 = -84						; size = 4
tv427 = -80						; size = 4
$T6 = -76						; size = 4
tv419 = -72						; size = 4
tv439 = -68						; size = 4
tv521 = -64						; size = 4
tv243 = -60						; size = 4
_tmpY$ = -56						; size = 4
$T7 = -52						; size = 4
_tmpZ$ = -48						; size = 4
tv232 = -44						; size = 4
_rangeSquare$ = -40					; size = 4
_tmpX$ = -36						; size = 4
_normBlastDist$ = -32					; size = 4
_damageRadiusSqrd$ = -28				; size = 4
_this$ = -24						; size = 4
_message$ = -20						; size = 4
_testObject$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ApplyProximityDamage@SimVehicleClass@@QAEXXZ PROC	; SimVehicleClass::ApplyProximityDamage
; _this$ = ecx

; 1609 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1610 : float tmpX, tmpY, tmpZ;
; 1611 : float rangeSquare;
; 1612 : SimBaseClass* testObject;
; 1613 : float damageRadiusSqrd;
; 1614 : #ifdef VU_GRID_TREE_Y_MAJOR
; 1615 : VuGridIterator gridIt(ObjProxList, YPos(), XPos(), NM_TO_FT * 3.5F);

	push	ecx
	movss	xmm0, DWORD PTR __real@46a6257a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR ?ObjProxList@@3PAVVuGridTree@@A ; ObjProxList
	push	eax
	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	??0VuGridIterator@@QAE@PAVVuGridTree@@MMM@Z ; VuGridIterator::VuGridIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1616 : #else
; 1617 : VuGridIterator gridIt(ObjProxList, XPos(), YPos(), NM_TO_FT * 3.5F);
; 1618 : #endif
; 1619 : 
; 1620 :     FalconDamageMessage* message;
; 1621 :     float normBlastDist;
; 1622 : 
; 1623 : 	// when on ground, damage radius is smaller
; 1624 : 	if ( OnGround() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN11@ApplyProxi

; 1625 : 	{
; 1626 : 		damageRadiusSqrd = 150.0f * 150.0f;

	movss	xmm0, DWORD PTR __real@46afc800
	movss	DWORD PTR _damageRadiusSqrd$[ebp], xmm0

; 1627 : 	}
; 1628 : 	else

	jmp	SHORT $LN10@ApplyProxi
$LN11@ApplyProxi:

; 1629 : 	{
; 1630 : 		damageRadiusSqrd = 300.0f * 300.0f;

	movss	xmm0, DWORD PTR __real@47afc800
	movss	DWORD PTR _damageRadiusSqrd$[ebp], xmm0
$LN10@ApplyProxi:

; 1631 : 	}
; 1632 : 
; 1633 : 	if (!SimDriver.objectList)

	cmp	DWORD PTR ?SimDriver@@3VSimulationDriver@@A, 0
	jne	SHORT $LN9@ApplyProxi

; 1634 : 	{
; 1635 : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
	jmp	$LN12@ApplyProxi
$LN9@ApplyProxi:

; 1636 : 	}
; 1637 : 
; 1638 : 	VuListIterator objectWalker(SimDriver.objectList);

	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A
	push	ecx
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1639 : 
; 1640 : 	// Check vs vehicles
; 1641 : 	testObject = (SimBaseClass*) objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testObject$[ebp], eax
$LN21@ApplyProxi:

; 1642 : 	while (testObject)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	$LN7@ApplyProxi

; 1643 : 	{
; 1644 : 		// don't send msg to objects already dead or dying
; 1645 : 		// no damge to camp units
; 1646 : 		if ( testObject->IsCampaign() || testObject->pctStrength < 0.0f )

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	jne	SHORT $LN5@ApplyProxi
	mov	edx, DWORD PTR _testObject$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+292]
	jbe	SHORT $LN6@ApplyProxi
$LN5@ApplyProxi:

; 1647 : 		{
; 1648 : 			testObject = (SimBaseClass*) objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax

; 1649 : 			continue;

	jmp	SHORT $LN21@ApplyProxi
$LN6@ApplyProxi:

; 1650 : 		}
; 1651 : 
; 1652 : 		if (testObject != this)

	mov	eax, DWORD PTR _testObject$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	je	$LN3@ApplyProxi

; 1653 : 		{
; 1654 : 			tmpX = testObject->XPos() - XPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv419[ebp]
	movss	xmm0, DWORD PTR tv419[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv521[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv423[ebp]
	movss	xmm0, DWORD PTR tv521[ebp]
	subss	xmm0, DWORD PTR tv423[ebp]
	movss	DWORD PTR _tmpX$[ebp], xmm0

; 1655 : 			tmpY = testObject->YPos() - YPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv427[ebp]
	movss	xmm0, DWORD PTR tv427[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv523[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv431[ebp]
	movss	xmm0, DWORD PTR tv523[ebp]
	subss	xmm0, DWORD PTR tv431[ebp]
	movss	DWORD PTR _tmpY$[ebp], xmm0

; 1656 : 			tmpZ = testObject->ZPos() - ZPos();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv435[ebp]
	movss	xmm0, DWORD PTR tv435[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv525[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv439[ebp]
	movss	xmm0, DWORD PTR tv525[ebp]
	subss	xmm0, DWORD PTR tv439[ebp]
	movss	DWORD PTR _tmpZ$[ebp], xmm0

; 1657 : 
; 1658 : 			rangeSquare = tmpX*tmpX + tmpY*tmpY + tmpZ*tmpZ;

	movss	xmm0, DWORD PTR _tmpX$[ebp]
	mulss	xmm0, DWORD PTR _tmpX$[ebp]
	movss	xmm1, DWORD PTR _tmpY$[ebp]
	mulss	xmm1, DWORD PTR _tmpY$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _tmpZ$[ebp]
	mulss	xmm1, DWORD PTR _tmpZ$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rangeSquare$[ebp], xmm0

; 1659 : 
; 1660 : 			if (rangeSquare < damageRadiusSqrd)

	movss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	comiss	xmm0, DWORD PTR _rangeSquare$[ebp]
	jbe	$LN3@ApplyProxi

; 1661 : 			{
; 1662 : 				// edg: calculate a normalized blast Dist
; 1663 : 				normBlastDist = ( damageRadiusSqrd - rangeSquare )/( damageRadiusSqrd );

	movss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	subss	xmm0, DWORD PTR _rangeSquare$[ebp]
	divss	xmm0, DWORD PTR _damageRadiusSqrd$[ebp]
	movss	DWORD PTR _normBlastDist$[ebp], xmm0

; 1664 : 			
; 1665 : 				// quadratic dropoff
; 1666 : 				normBlastDist *= normBlastDist;

	movss	xmm0, DWORD PTR _normBlastDist$[ebp]
	mulss	xmm0, DWORD PTR _normBlastDist$[ebp]
	movss	DWORD PTR _normBlastDist$[ebp], xmm0

; 1667 : 
; 1668 : 				message = new FalconDamageMessage (testObject->Id(), FalconLocalGame);

	push	98					; 00000062H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN16@ApplyProxi
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@ApplyProxi
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv232[ebp], eax
	jmp	SHORT $LN15@ApplyProxi
$LN14@ApplyProxi:
	mov	DWORD PTR tv232[ebp], 0
$LN15@ApplyProxi:
	push	1
	mov	edx, DWORD PTR tv232[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconDamageMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDamageMessage::FalconDamageMessage
	mov	DWORD PTR tv243[ebp], eax
	jmp	SHORT $LN17@ApplyProxi
$LN16@ApplyProxi:
	mov	DWORD PTR tv243[ebp], 0
$LN17@ApplyProxi:
	mov	eax, DWORD PTR tv243[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _message$[ebp], ecx

; 1669 : 				message->dataBlock.fEntityID  = Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+74], ecx
	mov	DWORD PTR [eax+78], edx

; 1670 : 				message->dataBlock.fCampID = GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+82], ax

; 1671 : 				message->dataBlock.fSide   = static_cast<uchar>(GetCountry());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+87], al

; 1672 : 				message->dataBlock.fPilotID   = pilotSlot;

	mov	edx, DWORD PTR _message$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+665]
	mov	BYTE PTR [edx+84], cl

; 1673 : 				message->dataBlock.fIndex     = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _message$[ebp]
	mov	WORD PTR [edx+85], ax

; 1674 : 				message->dataBlock.fWeaponID  = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+88], ax

; 1675 : 				message->dataBlock.fWeaponUID = Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR [eax+90], ecx
	mov	DWORD PTR [eax+94], edx

; 1676 : 			
; 1677 : 				message->dataBlock.dEntityID  = testObject->Id();

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+60], edx
	mov	DWORD PTR [ecx+64], eax

; 1678 : 				message->dataBlock.dCampID = testObject->GetCampID();

	mov	edx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+68], ax

; 1679 : 				message->dataBlock.dSide   = static_cast<uchar>(testObject->GetCountry());

	mov	edx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [ecx+73], al

; 1680 : 			
; 1681 : 				if (testObject->IsSimObjective())

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsSimObjective@FalconEntity@@QAEHXZ	; FalconEntity::IsSimObjective
	test	eax, eax
	je	SHORT $LN2@ApplyProxi

; 1682 : 					message->dataBlock.dPilotID   = 255;

	mov	edx, DWORD PTR _message$[ebp]
	mov	BYTE PTR [edx+70], 255			; 000000ffH

; 1683 : 				else

	jmp	SHORT $LN1@ApplyProxi
$LN2@ApplyProxi:

; 1684 : 					message->dataBlock.dPilotID   = ((SimMoverClass*)testObject)->pilotSlot;

	mov	eax, DWORD PTR _message$[ebp]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	dl, BYTE PTR [ecx+665]
	mov	BYTE PTR [eax+70], dl
$LN1@ApplyProxi:

; 1685 : 				message->dataBlock.dIndex     = testObject->Type();

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _message$[ebp]
	mov	WORD PTR [ecx+71], ax

; 1686 : 			
; 1687 : 				message->dataBlock.damageRandomFact = 1.0f;

	mov	edx, DWORD PTR _message$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+56], xmm0

; 1688 : 				message->dataBlock.damageStrength = normBlastDist * 120.0f;

	movss	xmm0, DWORD PTR _normBlastDist$[ebp]
	mulss	xmm0, DWORD PTR __real@42f00000
	mov	eax, DWORD PTR _message$[ebp]
	movss	DWORD PTR [eax+52], xmm0

; 1689 : 				message->dataBlock.damageType = FalconDamageType::ProximityDamage;

	mov	ecx, DWORD PTR _message$[ebp]
	mov	DWORD PTR [ecx+48], 9

; 1690 : //	me123			message->RequestOutOfBandTransmit ();
; 1691 : 				FalconSendMessage (message,TRUE);

	push	1
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN3@ApplyProxi:

; 1692 : 
; 1693 : 			}
; 1694 : 		}
; 1695 : 		testObject = (SimBaseClass*) objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax

; 1696 : 	}

	jmp	$LN21@ApplyProxi
$LN7@ApplyProxi:

; 1697 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _gridIt$[ebp]
	call	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
$LN12@ApplyProxi:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ$0:
	lea	ecx, DWORD PTR _gridIt$[ebp]
	jmp	??1VuGridIterator@@UAE@XZ		; VuGridIterator::~VuGridIterator
__unwindfunclet$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ$1:
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ$2:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyProximityDamage@SimVehicleClass@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyProximityDamage@SimVehicleClass@@QAEXXZ ENDP	; SimVehicleClass::ApplyProximityDamage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?ReceiveOrders@SimVehicleClass@@UAEXPAVFalconEvent@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?ReceiveOrders@SimVehicleClass@@UAEXPAVFalconEvent@@@Z PROC ; SimVehicleClass::ReceiveOrders, COMDAT
; _this$ = ecx

; 75   : 	virtual void ReceiveOrders (FalconEvent*) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReceiveOrders@SimVehicleClass@@UAEXPAVFalconEvent@@@Z ENDP ; SimVehicleClass::ReceiveOrders
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_wpno$ = -8						; size = 4
_wp$ = -4						; size = 4
_n$ = 8							; size = 4
?GetWayPointNo@SimVehicleClass@@QAEPAVWayPointClass@@H@Z PROC ; SimVehicleClass::GetWayPointNo
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 230  :     WayPointClass *wp;
; 231  : 	//MI check it
; 232  : 	if(n <= 0)

	cmp	DWORD PTR _n$[ebp], 0
	jg	SHORT $LN5@GetWayPoin

; 233  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@GetWayPoin
$LN5@GetWayPoin:

; 234  :     int wpno = n - 1;

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	DWORD PTR _wpno$[ebp], eax

; 235  : 	for(wp = waypoint; wp; wp = wp->GetNextWP())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+732]
	mov	DWORD PTR _wp$[ebp], edx
	jmp	SHORT $LN4@GetWayPoin
$LN3@GetWayPoin:
	mov	ecx, DWORD PTR _wp$[ebp]
	call	?GetNextWP@WayPointClass@@QAEPAV1@XZ	; WayPointClass::GetNextWP
	mov	DWORD PTR _wp$[ebp], eax
$LN4@GetWayPoin:
	cmp	DWORD PTR _wp$[ebp], 0
	je	SHORT $LN2@GetWayPoin

; 236  : 	{
; 237  : 		if (wpno <= 0) 

	cmp	DWORD PTR _wpno$[ebp], 0
	jg	SHORT $LN1@GetWayPoin

; 238  : 			return wp;

	mov	eax, DWORD PTR _wp$[ebp]
	jmp	SHORT $LN6@GetWayPoin
$LN1@GetWayPoin:

; 239  : 		wpno --;

	mov	eax, DWORD PTR _wpno$[ebp]
	sub	eax, 1
	mov	DWORD PTR _wpno$[ebp], eax

; 240  :     }

	jmp	SHORT $LN3@GetWayPoin
$LN2@GetWayPoin:

; 241  :     return NULL;	   

	xor	eax, eax
$LN6@GetWayPoin:

; 242  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetWayPointNo@SimVehicleClass@@QAEPAVWayPointClass@@H@Z ENDP ; SimVehicleClass::GetWayPointNo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_theRadar$ = -32					; size = 4
tv168 = -28						; size = 4
_tPodDisplay$ = -24					; size = 4
_mslDisplay$ = -20					; size = 4
_Sms$ = -16						; size = 4
_theMissile$ = -12					; size = 4
_this$ = -8						; size = 4
_FCC$ = -4						; size = 4
_dir$ = 8						; size = 4
?StepSOI@SimVehicleClass@@QAEXH@Z PROC			; SimVehicleClass::StepSOI
; _this$ = ecx

; 1700 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1701 : 	SMSClass	*Sms = (SMSClass*)GetSMS();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	call	eax
	mov	DWORD PTR _Sms$[ebp], eax

; 1702 : 	MissileClass* theMissile = NULL;

	mov	DWORD PTR _theMissile$[ebp], 0

; 1703 : 	MissileDisplayClass* mslDisplay = NULL;

	mov	DWORD PTR _mslDisplay$[ebp], 0

; 1704 : 	SensorClass* tPodDisplay = NULL;

	mov	DWORD PTR _tPodDisplay$[ebp], 0

; 1705 : 	RadarClass* theRadar = (RadarClass*) FindSensor (this, SensorClass::Radar);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 1706 : 	//MI
; 1707 : 	FireControlComputer* FCC = ((SimVehicleClass*)this)->GetFCC();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 1708 : 
; 1709 : 	if(!theRadar || !FCC || !Sms || !SimDriver.GetPlayerEntity())

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN25@StepSOI
	cmp	DWORD PTR _FCC$[ebp], 0
	je	SHORT $LN25@StepSOI
	cmp	DWORD PTR _Sms$[ebp], 0
	je	SHORT $LN25@StepSOI
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	test	eax, eax
	jne	SHORT $LN26@StepSOI
$LN25@StepSOI:

; 1710 : 		return;

	jmp	$LN27@StepSOI
$LN26@StepSOI:

; 1711 : 
; 1712 : 	if (Sms)

	cmp	DWORD PTR _Sms$[ebp], 0
	je	SHORT $LN24@StepSOI

; 1713 : 		theMissile = (MissileClass*)Sms->GetCurrentWeapon();

	mov	eax, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _theMissile$[ebp], eax
$LN24@StepSOI:

; 1714 : 
; 1715 :    
; 1716 : 
; 1717 :    if (theMissile && theMissile->IsMissile())

	cmp	DWORD PTR _theMissile$[ebp], 0
	je	SHORT $LN23@StepSOI
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN23@StepSOI

; 1718 :    {
; 1719 :       if (theMissile->GetDisplayType() == MissileClass::DisplayBW ||
; 1720 :           theMissile->GetDisplayType() == MissileClass::DisplayIR ||
; 1721 :           theMissile->GetDisplayType() == MissileClass::DisplayHTS)

	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?GetDisplayType@MissileClass@@QAEHXZ	; MissileClass::GetDisplayType
	cmp	eax, 1
	je	SHORT $LN21@StepSOI
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?GetDisplayType@MissileClass@@QAEHXZ	; MissileClass::GetDisplayType
	cmp	eax, 2
	je	SHORT $LN21@StepSOI
	mov	ecx, DWORD PTR _theMissile$[ebp]
	call	?GetDisplayType@MissileClass@@QAEHXZ	; MissileClass::GetDisplayType
	cmp	eax, 4
	jne	SHORT $LN23@StepSOI
$LN21@StepSOI:

; 1722 :       {
; 1723 :          mslDisplay = (MissileDisplayClass*)theMissile->display;

	mov	ecx, DWORD PTR _theMissile$[ebp]
	mov	edx, DWORD PTR [ecx+712]
	mov	DWORD PTR _mslDisplay$[ebp], edx
$LN23@StepSOI:

; 1724 :       }
; 1725 :    }
; 1726 : 
; 1727 :    tPodDisplay = FindLaserPod (this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _tPodDisplay$[ebp], eax

; 1728 : 	
; 1729 : 	//dir 1 = up
; 1730 : 	//dir 2 = down
; 1731 : 	switch(dir)

	mov	ecx, DWORD PTR _dir$[ebp]
	mov	DWORD PTR tv168[ebp], ecx
	cmp	DWORD PTR tv168[ebp], 1
	je	SHORT $LN18@StepSOI
	cmp	DWORD PTR tv168[ebp], 2
	je	SHORT $LN15@StepSOI
	jmp	$LN27@StepSOI
$LN18@StepSOI:

; 1732 : 	{
; 1733 : 	case 1:
; 1734 : 		//Can the SOI move to the HUD?
; 1735 : 		//ok let's see... AGR can't be the SOI
; 1736 : 		//info from Snako
; 1737 : /*o	If CCIP, CCIP rockets, STRF, DTOS, or EO-VIS is selected, the forward position moves the 
; 1738 : SOI to the HUD and makes it the SOI.  When LADD, EO PRE, or CCRP submode is selected along with 
; 1739 : the IP or RP, the SOI designations will move to the HUD when the DMS is moved forward.  When TWS
; 1740 :  is selected, TWS AUTO or MAN submode will be selected.
; 1741 : o	The UP direction wouldn't have any effect on A2A master modes.
; 1742 : o	If the aft (down) position is selected, the SOI moves to the MFD of the highest priority.  
; 1743 : Subsequent aft depressions move the SOI to the opposite MFD.
; 1744 : */
; 1745 : 		if(FCC->GetSubMode() == FireControlComputer::CCIP || 
; 1746 : 			FCC->GetSubMode() == FireControlComputer::DTOSS ||
; 1747 : 			//FCC->GetSubMode() == FireControlComputer::RCKT ||
; 1748 : 			FCC->GetMasterMode() == FireControlComputer::AirGroundRocket || // MLR 4/3/2004 - 
; 1749 : 			FCC->GetSubMode() == FireControlComputer::STRAF ||
; 1750 : 			FCC->GetSubMode() == FireControlComputer::CCRP ||
; 1751 : 			FCC->GetSubMode() == FireControlComputer::LADD)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 7
	je	SHORT $LN16@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN16@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN16@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 12					; 0000000cH
	je	SHORT $LN16@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 8
	je	SHORT $LN16@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 9
	jne	SHORT $LN17@StepSOI
$LN16@StepSOI:

; 1752 : 		{ 
; 1753 : 			SOIManager(SOI_HUD);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager
$LN17@StepSOI:

; 1754 : 		}
; 1755 : 		break;

	jmp	$LN27@StepSOI
$LN15@StepSOI:

; 1756 : 	case 2:
; 1757 : 		//Toggles between the MFD's.
; 1758 : 		//Check if we are currently in HSD SOI
; 1759 : 		if(FCC->IsSOI)

	mov	edx, DWORD PTR _FCC$[ebp]
	movzx	eax, BYTE PTR [edx+464]
	test	eax, eax
	je	SHORT $LN14@StepSOI

; 1760 : 		{
; 1761 : 			//Yes, can our radar be the SOI?
; 1762 : 			//if we are in AG MasterMode, there's not many possibilities
; 1763 : 			if(FCC->IsAGMasterMode())

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?IsAGMasterMode@FireControlComputer@@QAEHXZ ; FireControlComputer::IsAGMasterMode
	test	eax, eax
	je	SHORT $LN13@StepSOI

; 1764 : 			{
; 1765 : 				if(FCC->GetSubMode() != FireControlComputer::CCIP && FCC->GetSubMode() != FireControlComputer::DTOSS)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 7
	je	SHORT $LN12@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN12@StepSOI

; 1766 : 				{
; 1767 : 					SOIManager(SOI_RADAR);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager
$LN12@StepSOI:

; 1768 : 				}
; 1769 : 			}
; 1770 : 			else if(FCC->IsAAMasterMode() || FCC->IsNavMasterMode() || FCC->GetMasterMode() ==

	jmp	SHORT $LN11@StepSOI
$LN13@StepSOI:

; 1771 : 				FireControlComputer::MissileOverride || FCC->GetMasterMode() == 
; 1772 : 				FireControlComputer::Dogfight)

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?IsAAMasterMode@FireControlComputer@@QAEHXZ ; FireControlComputer::IsAAMasterMode
	test	eax, eax
	jne	SHORT $LN9@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?IsNavMasterMode@FireControlComputer@@QAEHXZ ; FireControlComputer::IsNavMasterMode
	test	eax, eax
	jne	SHORT $LN9@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN9@StepSOI
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 9
	jne	SHORT $LN11@StepSOI
$LN9@StepSOI:

; 1773 : 			{
; 1774 : 				SOIManager(SOI_RADAR);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager
$LN11@StepSOI:

; 1775 : 			}
; 1776 : 		}
; 1777 : 		else

	jmp	SHORT $LN27@StepSOI
$LN14@StepSOI:

; 1778 : 		{
; 1779 : 			//No, currently not SOI. If we have the HSD visible, we're going to set it there
; 1780 : 			if(FCC->CouldBeSOI)

	mov	ecx, DWORD PTR _FCC$[ebp]
	movzx	edx, BYTE PTR [ecx+465]
	test	edx, edx
	je	SHORT $LN7@StepSOI

; 1781 : 				SOIManager(SOI_FCC);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager
	jmp	SHORT $LN27@StepSOI
$LN7@StepSOI:

; 1782 : 			else if((mslDisplay && !mslDisplay->IsSOI()) || (tPodDisplay && !tPodDisplay->IsSOI()))

	cmp	DWORD PTR _mslDisplay$[ebp], 0
	je	SHORT $LN3@StepSOI
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	SHORT $LN4@StepSOI
$LN3@StepSOI:
	cmp	DWORD PTR _tPodDisplay$[ebp], 0
	je	SHORT $LN5@StepSOI
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	jne	SHORT $LN5@StepSOI
$LN4@StepSOI:

; 1783 : 				SOIManager(SOI_WEAPON);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager

; 1784 : 			else

	jmp	SHORT $LN27@StepSOI
$LN5@StepSOI:

; 1785 : 				SOIManager(SOI_RADAR);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ; SimVehicleClass::SOIManager
$LN27@StepSOI:

; 1786 : 		}
; 1787 : 		break;
; 1788 : 	default:
; 1789 : 		ShiWarning("Wrong SOI Direction!");
; 1790 : 		break;
; 1791 : 	}
; 1792 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StepSOI@SimVehicleClass@@QAEXH@Z ENDP			; SimVehicleClass::StepSOI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
tv160 = -40						; size = 4
_theMissile$1 = -36					; size = 4
_dType$2 = -32						; size = 4
_Sms$ = -28						; size = 4
_weapon$ = -24						; size = 4
_theRadar$ = -20					; size = 4
_tPodDisplay$ = -16					; size = 4
_mslDisplay$ = -12					; size = 4
_FCC$ = -8						; size = 4
_this$ = -4						; size = 4
_newSOI$ = 8						; size = 4
?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z PROC	; SimVehicleClass::SOIManager
; _this$ = ecx

; 1095 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 1096 : 	SMSClass *Sms = static_cast<SMSClass*>(GetSMS());	

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	call	eax
	mov	DWORD PTR _Sms$[ebp], eax

; 1097 : 	SimWeaponClass *weapon = NULL;

	mov	DWORD PTR _weapon$[ebp], 0

; 1098 : 	MissileDisplayClass *mslDisplay = NULL;

	mov	DWORD PTR _mslDisplay$[ebp], 0

; 1099 : 	SensorClass *tPodDisplay = NULL;

	mov	DWORD PTR _tPodDisplay$[ebp], 0

; 1100 : 	RadarClass *theRadar = (RadarClass*) FindSensor (this, SensorClass::Radar);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 1101 : 	FireControlComputer* FCC = ((SimVehicleClass*)this)->GetFCC();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+460]
	call	edx
	mov	DWORD PTR _FCC$[ebp], eax

; 1102 : 
; 1103 : 	if (Sms){

	cmp	DWORD PTR _Sms$[ebp], 0
	je	SHORT $LN30@SOIManager

; 1104 : 		weapon = Sms->GetCurrentWeapon();

	mov	eax, DWORD PTR _Sms$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _weapon$[ebp], eax
$LN30@SOIManager:

; 1105 : 	}
; 1106 : 
; 1107 : 	if (weapon && weapon->IsMissile()){

	cmp	DWORD PTR _weapon$[ebp], 0
	je	SHORT $LN28@SOIManager
	mov	ecx, DWORD PTR _weapon$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _weapon$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	SHORT $LN28@SOIManager

; 1108 : 		MissileClass* theMissile = static_cast<MissileClass*>(weapon);

	mov	ecx, DWORD PTR _weapon$[ebp]
	mov	DWORD PTR _theMissile$1[ebp], ecx

; 1109 : 		int dType = theMissile->GetDisplayType();

	mov	ecx, DWORD PTR _theMissile$1[ebp]
	call	?GetDisplayType@MissileClass@@QAEHXZ	; MissileClass::GetDisplayType
	mov	DWORD PTR _dType$2[ebp], eax

; 1110 : 		if (
; 1111 : 			dType == MissileClass::DisplayBW ||
; 1112 : 			dType == MissileClass::DisplayIR ||
; 1113 : 			dType == MissileClass::DisplayHTS
; 1114 : 		){

	cmp	DWORD PTR _dType$2[ebp], 1
	je	SHORT $LN27@SOIManager
	cmp	DWORD PTR _dType$2[ebp], 2
	je	SHORT $LN27@SOIManager
	cmp	DWORD PTR _dType$2[ebp], 4
	jne	SHORT $LN28@SOIManager
$LN27@SOIManager:

; 1115 : 			mslDisplay = static_cast<MissileDisplayClass*>(theMissile->display);

	mov	edx, DWORD PTR _theMissile$1[ebp]
	mov	eax, DWORD PTR [edx+712]
	mov	DWORD PTR _mslDisplay$[ebp], eax
$LN28@SOIManager:

; 1116 : 		}
; 1117 : 	}
; 1118 : 
; 1119 : 	tPodDisplay = FindLaserPod (this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _tPodDisplay$[ebp], eax

; 1120 : 
; 1121 : 	curSOI = newSOI;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newSOI$[ebp]
	mov	DWORD PTR [edx+724], eax

; 1122 : 
; 1123 : 	switch (curSOI){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+724]
	mov	DWORD PTR tv160[ebp], edx
	cmp	DWORD PTR tv160[ebp], 3
	ja	$LN25@SOIManager
	mov	eax, DWORD PTR tv160[ebp]
	jmp	DWORD PTR $LN33@SOIManager[eax*4]
$LN24@SOIManager:

; 1124 : 		case SOI_HUD:
; 1125 : 			if (theRadar)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN23@SOIManager

; 1126 : 			theRadar->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN23@SOIManager:

; 1127 : 			if (TheHud && this == SimDriver.GetPlayerEntity())//Cobra test

	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN22@SOIManager
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN22@SOIManager

; 1128 : 			TheHud->SetSOI(TRUE);

	push	1
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN22@SOIManager:

; 1129 : 			if (mslDisplay)

	cmp	DWORD PTR _mslDisplay$[ebp], 0
	je	SHORT $LN21@SOIManager

; 1130 : 			mslDisplay->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN21@SOIManager:

; 1131 : 			if (tPodDisplay)

	cmp	DWORD PTR _tPodDisplay$[ebp], 0
	je	SHORT $LN20@SOIManager

; 1132 : 			tPodDisplay->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN20@SOIManager:

; 1133 : 			if (FCC)	//MI

	cmp	DWORD PTR _FCC$[ebp], 0
	je	SHORT $LN19@SOIManager

; 1134 : 				FCC->ClearSOIAll();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?ClearSOIAll@FireControlComputer@@QAEXXZ ; FireControlComputer::ClearSOIAll
$LN19@SOIManager:

; 1135 : 		break;

	jmp	$LN25@SOIManager
$LN18@SOIManager:

; 1136 : 
; 1137 : 		case SOI_RADAR:
; 1138 : 			if (TheHud && this == SimDriver.GetPlayerEntity())//Cobra test

	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN17@SOIManager
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN17@SOIManager

; 1139 : 			TheHud->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN17@SOIManager:

; 1140 : 			if (theRadar)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN16@SOIManager

; 1141 : 			theRadar->SetSOI(TRUE);

	push	1
	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN16@SOIManager:

; 1142 : 			if (mslDisplay)

	cmp	DWORD PTR _mslDisplay$[ebp], 0
	je	SHORT $LN15@SOIManager

; 1143 : 			mslDisplay->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN15@SOIManager:

; 1144 : 			if (tPodDisplay)

	cmp	DWORD PTR _tPodDisplay$[ebp], 0
	je	SHORT $LN14@SOIManager

; 1145 : 			tPodDisplay->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN14@SOIManager:

; 1146 : 			if (FCC)	//MI

	cmp	DWORD PTR _FCC$[ebp], 0
	je	SHORT $LN13@SOIManager

; 1147 : 				FCC->ClearSOIAll();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?ClearSOIAll@FireControlComputer@@QAEXXZ ; FireControlComputer::ClearSOIAll
$LN13@SOIManager:

; 1148 : 		break;

	jmp	$LN25@SOIManager
$LN12@SOIManager:

; 1149 : 
; 1150 : 		case SOI_WEAPON:
; 1151 : 			if (theRadar)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN11@SOIManager

; 1152 : 				theRadar->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN11@SOIManager:

; 1153 : 			if (TheHud && this == SimDriver.GetPlayerEntity())//Cobra test // JB/JPO 010614 CTD

	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN10@SOIManager
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN10@SOIManager

; 1154 : 				TheHud->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN10@SOIManager:

; 1155 : 			if (mslDisplay)

	cmp	DWORD PTR _mslDisplay$[ebp], 0
	je	SHORT $LN9@SOIManager

; 1156 : 				mslDisplay->SetSOI(TRUE);

	push	1
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN9@SOIManager:

; 1157 : 			if (tPodDisplay)

	cmp	DWORD PTR _tPodDisplay$[ebp], 0
	je	SHORT $LN8@SOIManager

; 1158 : 				tPodDisplay->SetSOI(TRUE);

	push	1
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN8@SOIManager:

; 1159 : 			if (FCC)	//MI

	cmp	DWORD PTR _FCC$[ebp], 0
	je	SHORT $LN7@SOIManager

; 1160 : 				FCC->ClearSOIAll();

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?ClearSOIAll@FireControlComputer@@QAEXXZ ; FireControlComputer::ClearSOIAll
$LN7@SOIManager:

; 1161 : 		break;

	jmp	$LN25@SOIManager
$LN6@SOIManager:

; 1162 : 		//MI
; 1163 : 		case SOI_FCC:
; 1164 : 		{
; 1165 : 			if(theRadar)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN5@SOIManager

; 1166 : 				theRadar->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN5@SOIManager:

; 1167 : 			if (mslDisplay)

	cmp	DWORD PTR _mslDisplay$[ebp], 0
	je	SHORT $LN4@SOIManager

; 1168 : 				mslDisplay->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _mslDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN4@SOIManager:

; 1169 : 			if (tPodDisplay)

	cmp	DWORD PTR _tPodDisplay$[ebp], 0
	je	SHORT $LN3@SOIManager

; 1170 : 				tPodDisplay->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR _tPodDisplay$[ebp]
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN3@SOIManager:

; 1171 : 			if (TheHud && this == SimDriver.GetPlayerEntity())//Test // JB/JPO 010614 CTD

	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN2@SOIManager
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN2@SOIManager

; 1172 : 				TheHud->SetSOI(FALSE);

	push	0
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?SetSOI@DrawableClass@@QAEXH@Z		; DrawableClass::SetSOI
$LN2@SOIManager:

; 1173 : 			if (FCC)

	cmp	DWORD PTR _FCC$[ebp], 0
	je	SHORT $LN1@SOIManager

; 1174 : 			{
; 1175 : 				//reset our cursor position
; 1176 : 				FCC->xPos = 0.0F;

	mov	ecx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+472], xmm0

; 1177 : 				FCC->yPos = 0.0F;				

	mov	edx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+476], xmm0

; 1178 : 				FCC->IsSOI = TRUE;

	mov	eax, DWORD PTR _FCC$[ebp]
	mov	BYTE PTR [eax+464], 1
$LN1@SOIManager:
$LN25@SOIManager:

; 1179 : 			}
; 1180 : 		}
; 1181 : 		break;
; 1182 : 	}
; 1183 : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN33@SOIManager:
	DD	$LN24@SOIManager
	DD	$LN18@SOIManager
	DD	$LN12@SOIManager
	DD	$LN6@SOIManager
?SOIManager@SimVehicleClass@@QAEXW4SOI@1@@Z ENDP	; SimVehicleClass::SOIManager
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?InitWeapons@SimVehicleClass@@QAEXPAG0@Z PROC		; SimVehicleClass::InitWeapons
; _this$ = ecx

; 1090 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1091 : 	// KCK: Moved to SMSClass constructor
; 1092 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?InitWeapons@SimVehicleClass@@QAEXPAG0@Z ENDP		; SimVehicleClass::InitWeapons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simveh.cpp
_TEXT	SEGMENT
$T2 = -72						; size = 8
$T3 = -64						; size = 8
$T4 = -56						; size = 8
$T5 = -48						; size = 8
$T6 = -40						; size = 4
tv155 = -36						; size = 4
tv130 = -32						; size = 4
$T7 = -28						; size = 4
tv87 = -24						; size = 4
_this$ = -20						; size = 4
_fireMsg$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_curWeapon$ = 8						; size = 4
_type$ = 12						; size = 4
_startFlag$ = 16					; size = 4
_targetPtr$ = 20					; size = 4
_targetId$ = 24						; size = 8
?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z PROC ; SimVehicleClass::SendFireMessage
; _this$ = ecx

; 1522 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1523 : FalconWeaponsFire* fireMsg;
; 1524 : #ifdef DEBUG
; 1525 : static int fireCount = 0;
; 1526 : 
; 1527 :   // MonoPrint ("Firing %d at %d. mesg count %d\n", type, SimLibElapsedTime, fireCount);
; 1528 :    fireCount ++;
; 1529 : #endif
; 1530 : 
; 1531 :    fireMsg = new FalconWeaponsFire (Id(), FalconLocalGame);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN15@SendFireMe
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@SendFireMe
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN14@SendFireMe
$LN13@SendFireMe:
	mov	DWORD PTR tv87[ebp], 0
$LN14@SendFireMe:
	push	1
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0FalconWeaponsFire@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWeaponsFire::FalconWeaponsFire
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN16@SendFireMe
$LN15@SendFireMe:
	mov	DWORD PTR tv130[ebp], 0
$LN16@SendFireMe:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _fireMsg$[ebp], ecx

; 1532 :    fireMsg->dataBlock.fEntityID  = Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	DWORD PTR [eax+56], edx

; 1533 :    fireMsg->dataBlock.weaponType  = type;

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 1534 :    ShiAssert (GetCampaignObject());
; 1535 :    fireMsg->dataBlock.fCampID = ((CampBaseClass*)GetCampaignObject())->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv155[ebp], eax
	mov	eax, DWORD PTR tv155[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv155[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	WORD PTR [ecx+60], ax

; 1536 :    fireMsg->dataBlock.fSide = ((CampBaseClass*)GetCampaignObject())->GetOwner();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetOwner@CampBaseClass@@QAEEXZ		; CampBaseClass::GetOwner
	mov	edx, DWORD PTR _fireMsg$[ebp]
	mov	BYTE PTR [edx+65], al

; 1537 :    fireMsg->dataBlock.fPilotID   = pilotSlot;

	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+665]
	mov	BYTE PTR [eax+62], dl

; 1538 :    fireMsg->dataBlock.fIndex     = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	WORD PTR [ecx+63], ax

; 1539 : 
; 1540 :    // For rockets, get the pod id instead of the weapon ID
; 1541 : 		// JB 010104 Marco Edit 
; 1542 :    //if (IsAirplane() && type == FalconWeaponsFire::Rocket)
; 1543 :    //   fireMsg->dataBlock.fWeaponID = static_cast<ushort>(((AircraftClass*)this)->Sms->hardPoint[((AircraftClass*)this)->Sms->CurHardpoint()]->GetRackId());
; 1544 :    //else
; 1545 :    // JB 010104 Marco Edit 
; 1546 : 		  fireMsg->dataBlock.fWeaponID  = curWeapon->Type();

	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	edx, DWORD PTR _fireMsg$[ebp]
	mov	WORD PTR [edx+66], ax

; 1547 : 
; 1548 :    fireMsg->dataBlock.dx = 0.0f;

	mov	eax, DWORD PTR _fireMsg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0

; 1549 :    fireMsg->dataBlock.dy = 0.0f;

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+88], xmm0

; 1550 :    fireMsg->dataBlock.dz = 0.0f;

	mov	edx, DWORD PTR _fireMsg$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+92], xmm0

; 1551 : 
; 1552 :    if (type == FalconWeaponsFire::GUN)

	cmp	DWORD PTR _type$[ebp], 0
	jne	$LN10@SendFireMe

; 1553 :    {
; 1554 : 	  if ( ((GunClass *)curWeapon)->IsTracer() )

	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?IsTracer@GunClass@@QAEHXZ		; GunClass::IsTracer
	test	eax, eax
	je	$LN9@SendFireMe

; 1555 : 	  {
; 1556 : 			if ( startFlag )

	cmp	DWORD PTR _startFlag$[ebp], 0
	je	SHORT $LN8@SendFireMe

; 1557 : 			{     
; 1558 :  // MonoPrint (" startFlag\n" );
; 1559 : 				((GunClass*)curWeapon)->NewBurst();

	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?NewBurst@GunClass@@QAEXXZ		; GunClass::NewBurst

; 1560 : 				fireMsg->dataBlock.fWeaponUID.num_ = ((GunClass*)curWeapon)->GetCurrentBurst();

	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?GetCurrentBurst@GunClass@@QAEHXZ	; GunClass::GetCurrentBurst
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1561 : 				fireMsg->dataBlock.dx = ((GunClass*)curWeapon)->bullet[0].xdot;

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	eax, DWORD PTR _curWeapon$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+12]
	mov	DWORD PTR [eax+84], ecx

; 1562 : 				fireMsg->dataBlock.dy = ((GunClass*)curWeapon)->bullet[0].ydot;

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	eax, DWORD PTR _curWeapon$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+16]
	mov	DWORD PTR [eax+88], ecx

; 1563 : 				fireMsg->dataBlock.dz = ((GunClass*)curWeapon)->bullet[0].zdot;

	mov	edx, 28					; 0000001cH
	imul	edx, 0
	mov	eax, DWORD PTR _curWeapon$[ebp]
	mov	ecx, DWORD PTR [eax+800]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR [ecx+edx+20]
	mov	DWORD PTR [eax+92], ecx

; 1564 : 			}
; 1565 : 			else

	jmp	SHORT $LN7@SendFireMe
$LN8@SendFireMe:

; 1566 : 			{
; 1567 :  // MonoPrint (" endFlag\n" );
; 1568 : 				// Null Id means were stopping gun fire.
; 1569 : 				fireMsg->dataBlock.fWeaponUID.num_ = 0;

	mov	edx, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [edx+68], 0

; 1570 : 				fireMsg->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit
$LN7@SendFireMe:

; 1571 : 			}
; 1572 : 	  }
; 1573 : 	  else

	jmp	SHORT $LN6@SendFireMe
$LN9@SendFireMe:

; 1574 : 	  {
; 1575 :  // MonoPrint ("GUN BURST\n" );
; 1576 : 			((GunClass*)curWeapon)->NewBurst();

	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?NewBurst@GunClass@@QAEXXZ		; GunClass::NewBurst

; 1577 : 			fireMsg->dataBlock.fWeaponUID.num_ = ((GunClass*)curWeapon)->GetCurrentBurst();

	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?GetCurrentBurst@GunClass@@QAEHXZ	; GunClass::GetCurrentBurst
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [ecx+68], eax
$LN6@SendFireMe:

; 1578 : 	  }
; 1579 : 
; 1580 :    }
; 1581 :    else

	jmp	SHORT $LN5@SendFireMe
$LN10@SendFireMe:

; 1582 :    {
; 1583 :    	fireMsg->RequestReliableTransmit ();

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	call	?RequestReliableTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestReliableTransmit

; 1584 :    	fireMsg->RequestOutOfBandTransmit ();

	mov	ecx, DWORD PTR _fireMsg$[ebp]
	call	?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ; VuMessage::RequestOutOfBandTransmit

; 1585 :   //  MonoPrint ("OTHER WEAPON \n" );
; 1586 :       // Make sure the weapon's shooter pilot slot is the same as the current pilot
; 1587 :       curWeapon->shooterPilotSlot = pilotSlot;

	mov	edx, DWORD PTR _curWeapon$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+665]
	mov	BYTE PTR [edx+680], cl

; 1588 :       fireMsg->dataBlock.fWeaponUID = curWeapon->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _curWeapon$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+72], edx
$LN5@SendFireMe:

; 1589 :    }
; 1590 : 
; 1591 :    if (targetPtr)

	cmp	DWORD PTR _targetPtr$[ebp], 0
	je	SHORT $LN4@SendFireMe

; 1592 :       fireMsg->dataBlock.targetId   = targetPtr->BaseData()->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _targetPtr$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _fireMsg$[ebp]
	mov	DWORD PTR [ecx+76], edx
	mov	DWORD PTR [ecx+80], eax
	jmp	SHORT $LN1@SendFireMe
$LN4@SendFireMe:

; 1593 :    else if (targetId != vuNullId)

	push	OFFSET ?vuNullId@@3VVU_ID@@A		; vuNullId
	lea	ecx, DWORD PTR _targetId$[ebp]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@SendFireMe

; 1594 :       fireMsg->dataBlock.targetId   = targetId;

	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR _targetId$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	edx, DWORD PTR _targetId$[ebp+4]
	mov	DWORD PTR [eax+80], edx

; 1595 :    else

	jmp	SHORT $LN1@SendFireMe
$LN2@SendFireMe:

; 1596 :       fireMsg->dataBlock.targetId   = vuNullId;

	mov	eax, DWORD PTR _fireMsg$[ebp]
	mov	ecx, DWORD PTR ?vuNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+76], ecx
	mov	edx, DWORD PTR ?vuNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+80], edx
$LN1@SendFireMe:

; 1597 :    FalconSendMessage (fireMsg);

	push	0
	mov	eax, DWORD PTR _fireMsg$[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 1598 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z$0:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendFireMessage@SimVehicleClass@@QAEXPAVSimWeaponClass@@HHPAVSimObjectType@@VVU_ID@@@Z ENDP ; SimVehicleClass::SendFireMessage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?IsMover@SimMoverClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@SimMoverClass@@UAEHXZ PROC			; SimMoverClass::IsMover, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsMover (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@SimMoverClass@@UAEHXZ ENDP			; SimMoverClass::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetLead@SimMoverClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLead@SimMoverClass@@UAEXH@Z PROC			; SimMoverClass::SetLead, COMDAT
; _this$ = ecx

; 87   : 	virtual void SetLead (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLead@SimMoverClass@@UAEXH@Z ENDP			; SimMoverClass::SetLead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Mass@SimBaseClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Mass@SimBaseClass@@UAEMXZ PROC				; SimBaseClass::Mass, COMDAT
; _this$ = ecx

; 267  : 	virtual float Mass(void)		{return 2500.0F;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@451c4000
	mov	esp, ebp
	pop	ebp
	ret	0
?Mass@SimBaseClass@@UAEMXZ ENDP				; SimBaseClass::Mass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?LastShooter@SimBaseClass@@QAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?LastShooter@SimBaseClass@@QAE?AVVU_ID@@XZ PROC		; SimBaseClass::LastShooter, COMDAT
; _this$ = ecx

; 262  : 	VU_ID LastShooter (void) { return lastShooter; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	edx, DWORD PTR [eax+268]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?LastShooter@SimBaseClass@@QAE?AVVU_ID@@XZ ENDP		; SimBaseClass::LastShooter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Regenerate@SimBaseClass@@UAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Regenerate@SimBaseClass@@UAEXMMMM@Z PROC		; SimBaseClass::Regenerate, COMDAT
; _this$ = ecx

; 261  : 	virtual void Regenerate(float, float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Regenerate@SimBaseClass@@UAEXMMMM@Z ENDP		; SimBaseClass::Regenerate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetVuPosition@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetVuPosition@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::SetVuPosition, COMDAT
; _this$ = ecx

; 260  : 	virtual void SetVuPosition() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetVuPosition@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::SetVuPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ PROC	; SimBaseClass::ConfigurePlayerAvionics, COMDAT
; _this$ = ecx

; 259  : 	virtual void ConfigurePlayerAvionics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ ENDP	; SimBaseClass::ConfigurePlayerAvionics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakeNonPlayerVehicle, COMDAT
; _this$ = ecx

; 258  : 	virtual void MakeNonPlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakeNonPlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakePlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakePlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakePlayerVehicle, COMDAT
; _this$ = ecx

; 257  : 	virtual void MakePlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakePlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakePlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetTransform@SimBaseClass@@UAEXQAY02M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetTransform@SimBaseClass@@UAEXQAY02M@Z PROC		; SimBaseClass::GetTransform, COMDAT
; _this$ = ecx

; 253  : 	virtual void GetTransform(TransformMatrix) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTransform@SimBaseClass@@UAEXQAY02M@Z ENDP		; SimBaseClass::GetTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?PowerOutput@SimBaseClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PowerOutput@SimBaseClass@@QAEMXZ PROC			; SimBaseClass::PowerOutput, COMDAT
; _this$ = ecx

; 215  : 	float PowerOutput (void) {return specialData.powerOutput;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+188]
	mov	esp, ebp
	pop	ebp
	ret	0
?PowerOutput@SimBaseClass@@QAEMXZ ENDP			; SimBaseClass::PowerOutput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsAwake@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 177  : 	int IsAwake() const { return localFlags & OBJ_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsDead@SimBaseClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsDead@SimBaseClass@@UBEHXZ PROC			; SimBaseClass::IsDead, COMDAT
; _this$ = ecx

; 174  : 	virtual int IsDead() const { return (specialData.flags & OBJ_DEAD ? true : false); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@IsDead
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsDead
$LN3@IsDead:
	mov	BYTE PTR tv68[ebp], 0
$LN4@IsDead:
	movzx	eax, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@SimBaseClass@@UBEHXZ ENDP			; SimBaseClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsExploding@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsExploding@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::IsExploding, COMDAT
; _this$ = ecx

; 173  : 	virtual int IsExploding () { return (specialData.flags & OBJ_EXPLODING ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@IsExplodin
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsExplodin
$LN3@IsExplodin:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsExplodin:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?OnGround@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?OnGround@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::OnGround, COMDAT
; _this$ = ecx

; 172  : 	virtual int OnGround () { return (specialData.flags & ON_GROUND ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@OnGround
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@OnGround
$LN3@OnGround:
	mov	DWORD PTR tv68[ebp], 0
$LN4@OnGround:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetType, COMDAT
; _this$ = ecx

; 161  : 	uchar GetType() const					{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetDomain@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDomain@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetDomain, COMDAT
; _this$ = ecx

; 159  : 	uchar GetDomain() const					{	return (EntityType())->classInfo_[VU_DOMAIN]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 0
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDomain@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetDomain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCountry@SimBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@SimBaseClass@@UAEEXZ PROC			; SimBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 157  : 	virtual uchar GetCountry() { return (uchar)specialData.country; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@SimBaseClass@@UAEEXZ ENDP			; SimBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSimBase@SimBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@SimBaseClass@@UAE_NXZ PROC			; SimBaseClass::IsSimBase, COMDAT
; _this$ = ecx

; 152  : 	virtual bool IsSimBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@SimBaseClass@@UAE_NXZ ENDP			; SimBaseClass::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?JoinFlight@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?JoinFlight@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::JoinFlight, COMDAT
; _this$ = ecx

; 139  : 	virtual void JoinFlight (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoinFlight@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::JoinFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloatPos@@YAMXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloatPos@@YAMXZ PROC				; PRANDFloatPos, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 151  : //	return NRANDPOS;
; 152  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 153  : 	return( x / 65535.0f);

	movss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloatPos@@YAMXZ ENDP				; PRANDFloatPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDInt5@@YAHXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDInt5@@YAHXZ PROC					; PRANDInt5, COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 129  : //	return	FloatToInt32(NRANDPOS * 4.9999f);
; 130  : 	int	x= (int)GenerateFastRandom()&0x07;

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 7
	mov	DWORD PTR _x$[ebp], eax

; 131  : 	return((x<5)?x:x-5);

	cmp	DWORD PTR _x$[ebp], 5
	jge	SHORT $LN3@PRANDInt5
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@PRANDInt5
$LN3@PRANDInt5:
	mov	ecx, DWORD PTR _x$[ebp]
	sub	ecx, 5
	mov	DWORD PTR tv68[ebp], ecx
$LN4@PRANDInt5:
	mov	eax, DWORD PTR tv68[ebp]

; 132  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDInt5@@YAHXZ ENDP					; PRANDInt5
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSimObjective@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSimObjective@FalconEntity@@QAEHXZ PROC		; FalconEntity::IsSimObjective, COMDAT
; _this$ = ecx

; 105  : 		{return (falconType & FalconSimObjective) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@IsSimObjec
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSimObjec
$LN3@IsSimObjec:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSimObjec:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimObjective@FalconEntity@@QAEHXZ ENDP		; FalconEntity::IsSimObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampaign@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsCampaign@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsCampaign, COMDAT
; _this$ = ecx

; 101  : 		{return (falconType & FalconCampaignEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN3@IsCampaign
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsCampaign
$LN3@IsCampaign:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsCampaign:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampaign@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestOutOfBandTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ PROC	; VuMessage::RequestOutOfBandTransmit, COMDAT
; _this$ = ecx

; 181  : 	void RequestOutOfBandTransmit() { flags_ |= VU_OUT_OF_BAND_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestOutOfBandTransmit@VuMessage@@QAEXXZ ENDP	; VuMessage::RequestOutOfBandTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuevent.h
;	COMDAT ?RequestReliableTransmit@VuMessage@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RequestReliableTransmit@VuMessage@@QAEXXZ PROC		; VuMessage::RequestReliableTransmit, COMDAT
; _this$ = ecx

; 180  : 	void RequestReliableTransmit() { flags_ |= VU_RELIABLE_MSG_FLAG; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	or	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+6], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?RequestReliableTransmit@VuMessage@@QAEXXZ ENDP		; VuMessage::RequestReliableTransmit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
END
