; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\SIMLIB\Geometry.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_tanf
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?LastUpdateTime@VuEntity@@QBEKXZ		; VuEntity::LastUpdateTime
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?TargetAz@@YAMPAVFalconEntity@@MM@Z		; TargetAz
PUBLIC	?TargetAz@@YAMPAVFalconEntity@@0@Z		; TargetAz
PUBLIC	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
PUBLIC	?TargetEl@@YAMPAVFalconEntity@@MMM@Z		; TargetEl
PUBLIC	?TargetEl@@YAMPAVFalconEntity@@0@Z		; TargetEl
PUBLIC	?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetEl
PUBLIC	?TargetAzEl@@YAXPAVFalconEntity@@MMMAAM1@Z	; TargetAzEl
PUBLIC	?GetXYZ@@YAXPAVSimBaseClass@@MMMPAM11@Z		; GetXYZ
PUBLIC	?CalcRelAzEl@@YAXPAVSimBaseClass@@MMMPAM1@Z	; CalcRelAzEl
PUBLIC	?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z ; CalcRelValues
PUBLIC	?CalcRelAzElRangeAta@@YAXPAVSimBaseClass@@PAVSimObjectType@@@Z ; CalcRelAzElRangeAta
PUBLIC	?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z ; CalcRelGeom
PUBLIC	?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z ; FindCollisionPoint
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z	; CalcTransformMatrix
PUBLIC	?FindMinDistance@@YAMPAUvector@@000@Z		; FindMinDistance
PUBLIC	?Trigenometry@@YAXPAVSimMoverClass@@@Z		; Trigenometry
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3d800000
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40800000
PUBLIC	__real@8000000000000000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_atan:PROC
EXTRN	_tan:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?SimLibLastMajorFrameTime@@3MA:DWORD		; SimLibLastMajorFrameTime
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_trig$ = -52						; size = 8
_sigma$ = -44						; size = 4
_mu$ = -40						; size = 4
_gmma$ = -36						; size = 4
tv849 = -32						; size = 4
tv795 = -28						; size = 4
_alpharad$ = -24					; size = 4
tv695 = -20						; size = 4
tv689 = -16						; size = 4
_betarad$ = -12						; size = 4
_t2$ = -8						; size = 4
_t1$ = -4						; size = 4
_platform$ = 8						; size = 4
?Trigenometry@@YAXPAVSimMoverClass@@@Z PROC		; Trigenometry

; 591  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 592  : 	float t1, t2;
; 593  : 	float alpharad, betarad;
; 594  : 	float gmma, sigma, mu;
; 595  : 	mlTrig trig;
; 596  : 
; 597  : 	alpharad = platform->GetAlpha() * DTR;

	mov	eax, DWORD PTR _platform$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR [edx+408]
	call	eax
	fstp	DWORD PTR tv689[ebp]
	movss	xmm0, DWORD PTR tv689[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _alpharad$[ebp], xmm0

; 598  : 	betarad  = platform->GetBeta() * DTR;

	mov	ecx, DWORD PTR _platform$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR [edx+412]
	call	eax
	fstp	DWORD PTR tv695[ebp]
	movss	xmm0, DWORD PTR tv695[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _betarad$[ebp], xmm0

; 599  : 
; 600  : 	mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _platform$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 601  : 	platform->platformAngles.cospsi = trig.cos;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR [edx+408], xmm0

; 602  : 	platform->platformAngles.sinpsi = trig.sin;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR [eax+404], xmm0

; 603  : 
; 604  : 	mlSinCos (&trig, platform->Roll());

	mov	ecx, DWORD PTR _platform$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 605  : 	platform->platformAngles.cosphi = trig.cos;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR [edx+400], xmm0

; 606  : 	platform->platformAngles.sinphi = trig.sin;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR [eax+396], xmm0

; 607  : 
; 608  : 	mlSinCos (&trig, platform->Pitch());

	mov	ecx, DWORD PTR _platform$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 609  : 	platform->platformAngles.costhe = trig.cos;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR [edx+392], xmm0

; 610  : 	platform->platformAngles.sinthe = trig.sin;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR [eax+388], xmm0

; 611  : 
; 612  : 	mlSinCos (&trig, alpharad);

	push	ecx
	movss	xmm0, DWORD PTR _alpharad$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 613  : 	platform->platformAngles.cosalp = trig.cos;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR [edx+344], xmm0

; 614  : 	platform->platformAngles.sinalp = trig.sin;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR [eax+340], xmm0

; 615  : 
; 616  : 	mlSinCos (&trig, betarad);

	push	ecx
	movss	xmm0, DWORD PTR _betarad$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 617  : 	platform->platformAngles.cosbet = trig.cos;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR [edx+356], xmm0

; 618  : 	platform->platformAngles.sinbet = trig.sin;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR [eax+352], xmm0

; 619  : 
; 620  : 	platform->platformAngles.tanbet = (float)tan(betarad);

	push	ecx
	movss	xmm0, DWORD PTR _betarad$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	mov	ecx, DWORD PTR _platform$[ebp]
	fstp	DWORD PTR [ecx+360]

; 621  : 
; 622  : 	/*-----------------------------*/
; 623  : 	/* velocity vector orientation */
; 624  : 	/*-----------------------------*/
; 625  : 
; 626  : 	/*-------*/
; 627  : 	/* gamma */
; 628  : 	/*-------*/
; 629  : 	platform->platformAngles.singam = (platform->platformAngles.sinthe *
; 630  : 		platform->platformAngles.cosalp - platform->platformAngles.costhe *
; 631  : 		platform->platformAngles.cosphi * platform->platformAngles.sinalp) *
; 632  : 		platform->platformAngles.cosbet - platform->platformAngles.costhe *
; 633  : 		platform->platformAngles.sinphi * platform->platformAngles.sinbet;

	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR [edx+388]
	mulss	xmm0, DWORD PTR [eax+344]
	mov	ecx, DWORD PTR _platform$[ebp]
	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [ecx+392]
	mulss	xmm1, DWORD PTR [edx+400]
	mov	eax, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [eax+340]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [ecx+356]
	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [edx+392]
	mulss	xmm1, DWORD PTR [eax+396]
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [ecx+352]
	subss	xmm0, xmm1
	mov	edx, DWORD PTR _platform$[ebp]
	movss	DWORD PTR [edx+364], xmm0

; 634  : 
; 635  : 	platform->platformAngles.cosgam = (float)sqrt(1.0f -
; 636  : 		platform->platformAngles.singam * platform->platformAngles.singam);

	mov	eax, DWORD PTR _platform$[ebp]
	mov	ecx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR [eax+364]
	mulss	xmm0, DWORD PTR [ecx+364]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	edx, DWORD PTR _platform$[ebp]
	fstp	DWORD PTR [edx+368]

; 637  : 
; 638  : 
; 639  : 	gmma = (float)atan2(platform->platformAngles.singam, platform->platformAngles.cosgam);

	mov	eax, DWORD PTR _platform$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+368]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _platform$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+364]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _gmma$[ebp]

; 640  : 
; 641  : 	/*----*/
; 642  : 	/* mu */
; 643  : 	/*----*/
; 644  : 	t1 = platform->platformAngles.costhe * platform->platformAngles.sinphi *
; 645  : 		platform->platformAngles.cosbet + (platform->platformAngles.sinthe *
; 646  : 		platform->platformAngles.cosalp - platform->platformAngles.costhe *
; 647  : 		platform->platformAngles.cosphi * platform->platformAngles.sinalp) *
; 648  : 		platform->platformAngles.sinbet;

	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR [edx+392]
	mulss	xmm0, DWORD PTR [eax+396]
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [ecx+356]
	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [edx+388]
	mulss	xmm1, DWORD PTR [eax+344]
	mov	ecx, DWORD PTR _platform$[ebp]
	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm2, DWORD PTR [ecx+392]
	mulss	xmm2, DWORD PTR [edx+400]
	mov	eax, DWORD PTR _platform$[ebp]
	mulss	xmm2, DWORD PTR [eax+340]
	subss	xmm1, xmm2
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [ecx+352]
	addss	xmm0, xmm1
	movss	DWORD PTR _t1$[ebp], xmm0

; 649  : 
; 650  : 	t2 = platform->platformAngles.costhe * platform->platformAngles.cosphi *
; 651  : 		platform->platformAngles.cosalp + platform->platformAngles.sinthe *
; 652  : 		platform->platformAngles.sinalp;

	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR [edx+392]
	mulss	xmm0, DWORD PTR [eax+400]
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [edx+388]
	mulss	xmm1, DWORD PTR [eax+340]
	addss	xmm0, xmm1
	movss	DWORD PTR _t2$[ebp], xmm0

; 653  : 
; 654  : 
; 655  : 	mu = (float)(1.0/sqrt(t1*t1+t2*t2));

	movss	xmm0, DWORD PTR _t1$[ebp]
	mulss	xmm0, DWORD PTR _t1$[ebp]
	movss	xmm1, DWORD PTR _t2$[ebp]
	mulss	xmm1, DWORD PTR _t2$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv795[ebp]
	movss	xmm0, DWORD PTR tv795[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _mu$[ebp], xmm0

; 656  : 
; 657  : 	platform->platformAngles.sinmu = t1;

	mov	ecx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR [ecx+380], xmm0

; 658  : 	platform->platformAngles.cosmu = t2;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _t2$[ebp]
	movss	DWORD PTR [edx+384], xmm0

; 659  : 
; 660  : 
; 661  : 	/*-------*/
; 662  : 	/* sigma */
; 663  : 	/*-------*/
; 664  : 	t1 = ( -platform->platformAngles.sinphi *
; 665  : 		platform->platformAngles.sinalp * platform->platformAngles.cosbet +
; 666  : 		platform->platformAngles.cosphi * platform->platformAngles.sinbet ) *
; 667  : 		platform->platformAngles.cospsi + (( platform->platformAngles.costhe *
; 668  : 		platform->platformAngles.cosalp + platform->platformAngles.sinthe *
; 669  : 		platform->platformAngles.cosphi * platform->platformAngles.sinalp) *
; 670  : 		platform->platformAngles.cosbet + platform->platformAngles.sinthe *
; 671  : 		platform->platformAngles.sinphi * platform->platformAngles.sinbet) *
; 672  : 		platform->platformAngles.sinpsi;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR [eax+396]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [ecx+340]
	mov	edx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [edx+356]
	mov	eax, DWORD PTR _platform$[ebp]
	mov	ecx, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [eax+400]
	mulss	xmm1, DWORD PTR [ecx+352]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [edx+408]
	mov	eax, DWORD PTR _platform$[ebp]
	mov	ecx, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [eax+392]
	mulss	xmm1, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm2, DWORD PTR [edx+388]
	mulss	xmm2, DWORD PTR [eax+400]
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm2, DWORD PTR [ecx+340]
	addss	xmm1, xmm2
	mov	edx, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [edx+356]
	mov	eax, DWORD PTR _platform$[ebp]
	mov	ecx, DWORD PTR _platform$[ebp]
	movss	xmm2, DWORD PTR [eax+388]
	mulss	xmm2, DWORD PTR [ecx+396]
	mov	edx, DWORD PTR _platform$[ebp]
	mulss	xmm2, DWORD PTR [edx+352]
	addss	xmm1, xmm2
	mov	eax, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [eax+404]
	addss	xmm0, xmm1
	movss	DWORD PTR _t1$[ebp], xmm0

; 673  : 
; 674  : 	t2 =  ((platform->platformAngles.costhe *
; 675  : 		platform->platformAngles.cosalp + platform->platformAngles.sinthe *
; 676  : 		platform->platformAngles.cosphi * platform->platformAngles.sinalp) *
; 677  : 		platform->platformAngles.cosbet + platform->platformAngles.sinthe *
; 678  : 		platform->platformAngles.sinphi * platform->platformAngles.sinbet) *
; 679  : 		platform->platformAngles.cospsi + (platform->platformAngles.sinphi *
; 680  : 		platform->platformAngles.sinalp * platform->platformAngles.cosbet -
; 681  : 		platform->platformAngles.cosphi * platform->platformAngles.sinbet) *
; 682  : 		platform->platformAngles.sinpsi;

	mov	ecx, DWORD PTR _platform$[ebp]
	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR [ecx+392]
	mulss	xmm0, DWORD PTR [edx+344]
	mov	eax, DWORD PTR _platform$[ebp]
	mov	ecx, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [eax+388]
	mulss	xmm1, DWORD PTR [ecx+400]
	mov	edx, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [edx+340]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [eax+356]
	mov	ecx, DWORD PTR _platform$[ebp]
	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [ecx+388]
	mulss	xmm1, DWORD PTR [edx+396]
	mov	eax, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [eax+352]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm0, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm1, DWORD PTR [edx+396]
	mulss	xmm1, DWORD PTR [eax+340]
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [ecx+356]
	mov	edx, DWORD PTR _platform$[ebp]
	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm2, DWORD PTR [edx+400]
	mulss	xmm2, DWORD PTR [eax+352]
	subss	xmm1, xmm2
	mov	ecx, DWORD PTR _platform$[ebp]
	mulss	xmm1, DWORD PTR [ecx+404]
	addss	xmm0, xmm1
	movss	DWORD PTR _t2$[ebp], xmm0

; 683  : 
; 684  : 
; 685  : 	sigma  = (float)(1.0/sqrt(t1*t1+t2*t2));

	movss	xmm0, DWORD PTR _t1$[ebp]
	mulss	xmm0, DWORD PTR _t1$[ebp]
	movss	xmm1, DWORD PTR _t2$[ebp]
	mulss	xmm1, DWORD PTR _t2$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv849[ebp]
	movss	xmm0, DWORD PTR tv849[ebp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR _sigma$[ebp], xmm0

; 686  : 
; 687  : 	platform->platformAngles.sinsig = t1;

	mov	edx, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR [edx+372], xmm0

; 688  : 	platform->platformAngles.cossig = t2;;

	mov	eax, DWORD PTR _platform$[ebp]
	movss	xmm0, DWORD PTR _t2$[ebp]
	movss	DWORD PTR [eax+376], xmm0

; 689  : 
; 690  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Trigenometry@@YAXPAVSimMoverClass@@@Z ENDP		; Trigenometry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_distance$ = -16					; size = 4
_tmp$ = -12						; size = 4
_rangeSquared$ = -8					; size = 4
_i$ = -4						; size = 4
_a$ = 8							; size = 4
_aDot$ = 12						; size = 4
_b$ = 16						; size = 4
_bDot$ = 20						; size = 4
?FindMinDistance@@YAMPAUvector@@000@Z PROC		; FindMinDistance

; 548  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 549  : float rangeSquared, tmp, distance;
; 550  : int i;
; 551  : #define FRAMES_PER_TEST   16
; 552  : #define FRACTION_PER_TEST  (float)(1.0 / FRAMES_PER_TEST)
; 553  : 
; 554  :    rangeSquared = (a->x-b->x) * (a->x-b->x) +
; 555  :       (a->y-b->y) * (a->y-b->y) +
; 556  :       (a->z-b->z) * (a->z-b->z);

	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx]
	subss	xmm1, DWORD PTR [eax]
	mulss	xmm0, xmm1
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	subss	xmm1, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR [eax+4]
	subss	xmm2, DWORD PTR [ecx+4]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	subss	xmm1, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR [ecx+8]
	subss	xmm2, DWORD PTR [edx+8]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR _rangeSquared$[ebp], xmm0

; 557  : 
; 558  :    aDot->x *= FRACTION_PER_TEST;

	mov	eax, DWORD PTR _aDot$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3d800000
	mov	ecx, DWORD PTR _aDot$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 559  :    aDot->y *= FRACTION_PER_TEST;

	mov	edx, DWORD PTR _aDot$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@3d800000
	mov	eax, DWORD PTR _aDot$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 560  :    aDot->z *= FRACTION_PER_TEST;

	mov	ecx, DWORD PTR _aDot$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR __real@3d800000
	mov	edx, DWORD PTR _aDot$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 561  :    bDot->x *= FRACTION_PER_TEST;

	mov	eax, DWORD PTR _bDot$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@3d800000
	mov	ecx, DWORD PTR _bDot$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 562  :    bDot->y *= FRACTION_PER_TEST;

	mov	edx, DWORD PTR _bDot$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@3d800000
	mov	eax, DWORD PTR _bDot$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 563  :    bDot->z *= FRACTION_PER_TEST;

	mov	ecx, DWORD PTR _bDot$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR __real@3d800000
	mov	edx, DWORD PTR _bDot$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 564  : 
; 565  :    for (i=0; i<FRAMES_PER_TEST; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FindMinDis
$LN3@FindMinDis:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FindMinDis:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	$LN2@FindMinDis

; 566  :    {
; 567  :       a->x -= aDot->x;

	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _aDot$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _a$[ebp]
	movss	DWORD PTR [eax], xmm0

; 568  :       a->y -= aDot->y;

	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _aDot$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _a$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 569  :       a->z -= aDot->z;

	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _aDot$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _a$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 570  : 
; 571  :       b->x -= bDot->x;

	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _bDot$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax], xmm0

; 572  :       b->y -= bDot->y;

	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _bDot$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 573  :       b->z -= bDot->z;

	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _bDot$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	subss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 574  : 
; 575  :       tmp = (a->x-b->x) * (a->x-b->x) +
; 576  :          (a->y-b->y) * (a->y-b->y) +
; 577  :          (a->z-b->z) * (a->z-b->z);

	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [eax]
	subss	xmm1, DWORD PTR [ecx]
	mulss	xmm0, xmm1
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	subss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR [ecx+4]
	subss	xmm2, DWORD PTR [edx+4]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	subss	xmm1, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR [edx+8]
	subss	xmm2, DWORD PTR [eax+8]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR _tmp$[ebp], xmm0

; 578  : 
; 579  :       if (tmp > rangeSquared)

	movss	xmm0, DWORD PTR _tmp$[ebp]
	comiss	xmm0, DWORD PTR _rangeSquared$[ebp]
	jbe	SHORT $LN1@FindMinDis

; 580  :          break;

	jmp	SHORT $LN2@FindMinDis
$LN1@FindMinDis:

; 581  : 
; 582  :       rangeSquared = tmp;

	movss	xmm0, DWORD PTR _tmp$[ebp]
	movss	DWORD PTR _rangeSquared$[ebp], xmm0

; 583  :    }

	jmp	$LN3@FindMinDis
$LN2@FindMinDis:

; 584  : 
; 585  :    distance = (float)sqrt(rangeSquared);

	push	ecx
	movss	xmm0, DWORD PTR _rangeSquared$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _distance$[ebp]

; 586  : 
; 587  :    return (distance);

	fld	DWORD PTR _distance$[ebp]

; 588  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindMinDistance@@YAMPAUvector@@000@Z ENDP		; FindMinDistance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_tha$ = -24						; size = 8
_phi$ = -16						; size = 8
_psi$ = -8						; size = 8
_theObject$ = 8						; size = 4
?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z PROC	; CalcTransformMatrix

; 692  : void CalcTransformMatrix(SimBaseClass* theObject){

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 693  : 	// KCK: I changed this to use the math lib's mlTrig function. Hope I didn't fuck it up.
; 694  : 	mlTrig	tha,phi,psi;
; 695  : 	//since we calculate them here anyways, and they are so useful to have,
; 696  : 	//I go ahead and store the sine and cosine of all the angles (DSP)
; 697  : 
; 698  : 	mlSinCos(&tha, theObject->Pitch());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _tha$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 699  : 	mlSinCos(&phi, theObject->Roll());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _phi$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 700  : 	mlSinCos(&psi, theObject->Yaw());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _psi$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 701  : 
; 702  : 	theObject->dmx[0][0] =  psi.cos * tha.cos;

	movss	xmm0, DWORD PTR _psi$[ebp+4]
	mulss	xmm0, DWORD PTR _tha$[ebp+4]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 703  : 	theObject->dmx[0][1] =  psi.sin * tha.cos;

	movss	xmm0, DWORD PTR _psi$[ebp]
	mulss	xmm0, DWORD PTR _tha$[ebp+4]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 704  : 	theObject->dmx[0][2] = -tha.sin;

	movss	xmm0, DWORD PTR _tha$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 705  : 	
; 706  : 	theObject->dmx[1][0] = -psi.sin * phi.cos	+	psi.cos * tha.sin * phi.sin;

	movss	xmm0, DWORD PTR _psi$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _phi$[ebp+4]
	movss	xmm1, DWORD PTR _psi$[ebp+4]
	mulss	xmm1, DWORD PTR _tha$[ebp]
	mulss	xmm1, DWORD PTR _phi$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 707  : 	theObject->dmx[1][1] =  psi.cos * phi.cos	+	psi.sin * tha.sin * phi.sin;

	movss	xmm0, DWORD PTR _psi$[ebp+4]
	mulss	xmm0, DWORD PTR _phi$[ebp+4]
	movss	xmm1, DWORD PTR _psi$[ebp]
	mulss	xmm1, DWORD PTR _tha$[ebp]
	mulss	xmm1, DWORD PTR _phi$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 708  : 	theObject->dmx[1][2] =  tha.cos * phi.sin;

	movss	xmm0, DWORD PTR _tha$[ebp+4]
	mulss	xmm0, DWORD PTR _phi$[ebp]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 709  : 	
; 710  : 	theObject->dmx[2][0] =  psi.sin * phi.sin	+	psi.cos * tha.sin * phi.cos;

	movss	xmm0, DWORD PTR _psi$[ebp]
	mulss	xmm0, DWORD PTR _phi$[ebp]
	movss	xmm1, DWORD PTR _psi$[ebp+4]
	mulss	xmm1, DWORD PTR _tha$[ebp]
	mulss	xmm1, DWORD PTR _phi$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 711  : 	theObject->dmx[2][1] = -psi.cos * phi.sin	+	psi.sin * tha.sin * phi.cos;

	movss	xmm0, DWORD PTR _psi$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _phi$[ebp]
	movss	xmm1, DWORD PTR _psi$[ebp]
	mulss	xmm1, DWORD PTR _tha$[ebp]
	mulss	xmm1, DWORD PTR _phi$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 712  : 	theObject->dmx[2][2] =  tha.cos * phi.cos;

	movss	xmm0, DWORD PTR _tha$[ebp+4]
	mulss	xmm0, DWORD PTR _phi$[ebp+4]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	DWORD PTR [ecx+edx], xmm0

; 713  : 	
; 714  : 	theObject->platformAngles.cospsi = psi.cos;

	mov	eax, DWORD PTR _theObject$[ebp]
	movss	xmm0, DWORD PTR _psi$[ebp+4]
	movss	DWORD PTR [eax+408], xmm0

; 715  : 	theObject->platformAngles.sinpsi = psi.sin;

	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	xmm0, DWORD PTR _psi$[ebp]
	movss	DWORD PTR [ecx+404], xmm0

; 716  : 	
; 717  : 	theObject->platformAngles.costhe = tha.cos;

	mov	edx, DWORD PTR _theObject$[ebp]
	movss	xmm0, DWORD PTR _tha$[ebp+4]
	movss	DWORD PTR [edx+392], xmm0

; 718  : 	theObject->platformAngles.sinthe = tha.sin;

	mov	eax, DWORD PTR _theObject$[ebp]
	movss	xmm0, DWORD PTR _tha$[ebp]
	movss	DWORD PTR [eax+388], xmm0

; 719  : 	
; 720  : 	theObject->platformAngles.cosphi = phi.cos;

	mov	ecx, DWORD PTR _theObject$[ebp]
	movss	xmm0, DWORD PTR _phi$[ebp+4]
	movss	DWORD PTR [ecx+400], xmm0

; 721  : 	theObject->platformAngles.sinphi = phi.sin;

	mov	edx, DWORD PTR _theObject$[ebp]
	movss	xmm0, DWORD PTR _phi$[ebp]
	movss	DWORD PTR [edx+396], xmm0

; 722  : 
; 723  : /*
; 724  :    costha = (float)cos (theObject->Pitch());
; 725  :    sintha = (float)sin (theObject->Pitch());
; 726  :    cosphi = (float)cos (theObject->Roll());
; 727  :    sinphi = (float)sin (theObject->Roll());
; 728  :    cospsi = (float)cos (theObject->Yaw());
; 729  :    sinpsi = (float)sin (theObject->Yaw());
; 730  : 
; 731  :    theObject->dmx[0][0] = cospsi*costha;
; 732  :    theObject->dmx[0][1] = sinpsi*costha;
; 733  :    theObject->dmx[0][2] = -sintha;
; 734  : 
; 735  :    theObject->dmx[1][0] = -sinpsi*cosphi + cospsi*sintha*sinphi;
; 736  :    theObject->dmx[1][1] = cospsi*cosphi + sinpsi*sintha*sinphi;
; 737  :    theObject->dmx[1][2] = costha*sinphi;
; 738  : 
; 739  :    theObject->dmx[2][0] = sinpsi*sinphi + cospsi*sintha*cosphi;
; 740  :    theObject->dmx[2][1] = -cospsi*sinphi + sinpsi*sintha*cosphi;
; 741  :    theObject->dmx[2][2] = costha*cosphi;
; 742  : */
; 743  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ENDP	; CalcTransformMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
tv572 = -280						; size = 4
tv404 = -276						; size = 4
tv616 = -272						; size = 4
tv432 = -268						; size = 4
tv568 = -264						; size = 4
tv584 = -260						; size = 4
tv564 = -256						; size = 4
tv412 = -252						; size = 4
tv614 = -248						; size = 4
tv460 = -244						; size = 4
tv559 = -240						; size = 4
tv580 = -236						; size = 4
tv555 = -232						; size = 4
tv576 = -228						; size = 4
tv612 = -224						; size = 4
tv472 = -220						; size = 4
tv550 = -216						; size = 4
tv464 = -212						; size = 4
tv546 = -208						; size = 4
tv588 = -204						; size = 4
tv538 = -200						; size = 4
tv586 = -196						; size = 4
tv610 = -192						; size = 4
tv582 = -188						; size = 4
tv530 = -184						; size = 4
tv428 = -180						; size = 4
tv608 = -176						; size = 4
tv416 = -172						; size = 4
tv606 = -168						; size = 4
tv594 = -164						; size = 4
tv522 = -160						; size = 4
tv596 = -156						; size = 4
tv518 = -152						; size = 4
tv590 = -148						; size = 4
tv604 = -144						; size = 4
tv592 = -140						; size = 4
tv513 = -136						; size = 4
tv456 = -132						; size = 4
tv509 = -128						; size = 4
tv452 = -124						; size = 4
tv602 = -120						; size = 4
tv448 = -116						; size = 4
tv504 = -112						; size = 4
tv444 = -108						; size = 4
tv500 = -104						; size = 4
tv440 = -100						; size = 4
_c$ = -96						; size = 4
tv436 = -92						; size = 4
tv600 = -88						; size = 4
tv578 = -84						; size = 4
tv484 = -80						; size = 4
tv424 = -76						; size = 4
tv598 = -72						; size = 4
tv420 = -68						; size = 4
tv480 = -64						; size = 4
tv574 = -60						; size = 4
tv476 = -56						; size = 4
tv408 = -52						; size = 4
_ownSpeed$ = -48					; size = 4
tv468 = -44						; size = 4
_maxT$ = -40						; size = 4
_retval$ = -36						; size = 4
_underRad$ = -32					; size = 4
_a$ = -28						; size = 4
_b$ = -24						; size = 4
_minT$ = -20						; size = 4
_q$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_ownShip$ = 12						; size = 4
_collPoint$ = 16					; size = 4
_speedBoost$ = 20					; size = 4
?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z PROC ; FindCollisionPoint

; 458  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 459  : int retval;
; 460  : vector q;  /* really a point */
; 461  : float a;
; 462  : float b;
; 463  : float c;
; 464  : float underRad;
; 465  : float minT;
; 466  : float maxT;
; 467  : float ownSpeed;
; 468  : 
; 469  :    /* put line seg equation into parametric form S = Q+tV,
; 470  :       translated into sphere's coord system.
; 471  : 
; 472  :       Note (this is important) that the way we have defined it,
; 473  :       the line segment includes all values of t where (0 <= t <= 1)
; 474  :    */
; 475  : 
; 476  :    q.x = obj->XPos() - ownShip->XPos();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv572[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv408[ebp]
	movss	xmm0, DWORD PTR tv572[ebp]
	subss	xmm0, DWORD PTR tv408[ebp]
	movss	DWORD PTR _q$[ebp], xmm0

; 477  :    q.y = obj->YPos() - ownShip->YPos();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv412[ebp]
	movss	xmm0, DWORD PTR tv412[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv574[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv416[ebp]
	movss	xmm0, DWORD PTR tv574[ebp]
	subss	xmm0, DWORD PTR tv416[ebp]
	movss	DWORD PTR _q$[ebp+4], xmm0

; 478  :    q.z = obj->ZPos() - ownShip->ZPos();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv420[ebp]
	movss	xmm0, DWORD PTR tv420[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv576[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv424[ebp]
	movss	xmm0, DWORD PTR tv576[ebp]
	subss	xmm0, DWORD PTR tv424[ebp]
	movss	DWORD PTR _q$[ebp+8], xmm0

; 479  : 
; 480  :    /* Calculate ownships speed */
; 481  :    ownSpeed = ownShip->XDelta()*ownShip->XDelta() +
; 482  :       ownShip->YDelta()*ownShip->YDelta() +
; 483  :       ownShip->ZDelta()*ownShip->ZDelta() + speedBoost;

	mov	ecx, DWORD PTR _ownShip$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv428[ebp]
	movss	xmm0, DWORD PTR tv428[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv578[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv432[ebp]
	movss	xmm0, DWORD PTR tv578[ebp]
	mulss	xmm0, DWORD PTR tv432[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv580[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv436[ebp]
	movss	xmm0, DWORD PTR tv436[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv582[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv440[ebp]
	movss	xmm0, DWORD PTR tv582[ebp]
	mulss	xmm0, DWORD PTR tv440[ebp]
	movss	xmm1, DWORD PTR tv580[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv584[ebp], xmm1
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv444[ebp]
	movss	xmm0, DWORD PTR tv444[ebp]
	mov	ecx, DWORD PTR _ownShip$[ebp]
	movss	DWORD PTR tv586[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv448[ebp]
	movss	xmm0, DWORD PTR tv586[ebp]
	mulss	xmm0, DWORD PTR tv448[ebp]
	movss	xmm1, DWORD PTR tv584[ebp]
	addss	xmm1, xmm0
	addss	xmm1, DWORD PTR _speedBoost$[ebp]
	movss	DWORD PTR _ownSpeed$[ebp], xmm1

; 484  : 
; 485  :    /* solve for t on sphere's surface,  ie. where S.S = R*R, or
; 486  : 
; 487  :       t*t(objVel.objVel) + t(2objVel.Q) + (Q.Q - ownSpeed*t * ownSpeed*t ) = 0
; 488  : 
; 489  :       which is quadratic in t such that:
; 490  : 
; 491  :       a = V.V - ownSpeed*ownSpeed
; 492  :       b = 2V.Q
; 493  :       c = Q.Q
; 494  : 
; 495  :       First, see if there is a real solution (ie.  (b*b - 4*a*c) >= 0 )
; 496  :    */
; 497  : 
; 498  :    a = obj->XDelta()*obj->XDelta() + obj->YDelta()*obj->YDelta() +
; 499  :          obj->ZDelta()*obj->ZDelta() - ownSpeed;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv452[ebp]
	movss	xmm0, DWORD PTR tv452[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv588[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv456[ebp]
	movss	xmm0, DWORD PTR tv588[ebp]
	mulss	xmm0, DWORD PTR tv456[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv590[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv460[ebp]
	movss	xmm0, DWORD PTR tv460[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv592[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv464[ebp]
	movss	xmm0, DWORD PTR tv592[ebp]
	mulss	xmm0, DWORD PTR tv464[ebp]
	movss	xmm1, DWORD PTR tv590[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv594[ebp], xmm1
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv468[ebp]
	movss	xmm0, DWORD PTR tv468[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv596[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv472[ebp]
	movss	xmm0, DWORD PTR tv596[ebp]
	mulss	xmm0, DWORD PTR tv472[ebp]
	movss	xmm1, DWORD PTR tv594[ebp]
	addss	xmm1, xmm0
	subss	xmm1, DWORD PTR _ownSpeed$[ebp]
	movss	DWORD PTR _a$[ebp], xmm1

; 500  :    b = (obj->XDelta()*q.x + obj->YDelta()*q.y + obj->ZDelta()*q.z) * 2.0F;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv476[ebp]
	movss	xmm0, DWORD PTR tv476[ebp]
	mulss	xmm0, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv598[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv480[ebp]
	movss	xmm0, DWORD PTR tv480[ebp]
	mulss	xmm0, DWORD PTR _q$[ebp+4]
	movss	xmm1, DWORD PTR tv598[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv600[ebp], xmm1
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv484[ebp]
	movss	xmm0, DWORD PTR tv484[ebp]
	mulss	xmm0, DWORD PTR _q$[ebp+8]
	movss	xmm1, DWORD PTR tv600[ebp]
	addss	xmm1, xmm0
	mulss	xmm1, DWORD PTR __real@40000000
	movss	DWORD PTR _b$[ebp], xmm1

; 501  :    c = q.x*q.x + q.y*q.y + q.z*q.z;

	movss	xmm0, DWORD PTR _q$[ebp]
	mulss	xmm0, DWORD PTR _q$[ebp]
	movss	xmm1, DWORD PTR _q$[ebp+4]
	mulss	xmm1, DWORD PTR _q$[ebp+4]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _q$[ebp+8]
	mulss	xmm1, DWORD PTR _q$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _c$[ebp], xmm0

; 502  : 
; 503  :    underRad = b*b - 4.0F*a*c;

	movss	xmm0, DWORD PTR _b$[ebp]
	mulss	xmm0, DWORD PTR _b$[ebp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR _a$[ebp]
	mulss	xmm1, DWORD PTR _c$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _underRad$[ebp], xmm0

; 504  : 
; 505  :    if ( underRad < 0 )

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _underRad$[ebp]
	jbe	SHORT $LN7@FindCollis

; 506  :    {
; 507  :       /* line does not intersect sphere */
; 508  :       retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 509  :    }
; 510  :    /* find the points where the intersection(s) happen */
; 511  :    else

	jmp	$LN1@FindCollis
$LN7@FindCollis:

; 512  :    {
; 513  :       retval = TRUE;

	mov	DWORD PTR _retval$[ebp], 1

; 514  :       if ( underRad == 0 )

	movss	xmm0, DWORD PTR _underRad$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN5@FindCollis

; 515  :       {
; 516  :          minT = maxT = -b / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _maxT$[ebp], xmm0
	movss	xmm0, DWORD PTR _maxT$[ebp]
	movss	DWORD PTR _minT$[ebp], xmm0

; 517  :          collPoint->x = obj->XPos() + obj->XDelta() * minT;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv500[ebp]
	movss	xmm0, DWORD PTR tv500[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv602[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv504[ebp]
	movss	xmm0, DWORD PTR tv504[ebp]
	mulss	xmm0, DWORD PTR _minT$[ebp]
	movss	xmm1, DWORD PTR tv602[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [eax], xmm1

; 518  :          collPoint->y = obj->YPos() + obj->YDelta() * minT;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv509[ebp]
	movss	xmm0, DWORD PTR tv509[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv604[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv513[ebp]
	movss	xmm0, DWORD PTR tv513[ebp]
	mulss	xmm0, DWORD PTR _minT$[ebp]
	movss	xmm1, DWORD PTR tv604[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [ecx+4], xmm1

; 519  :          collPoint->z = obj->ZPos() + obj->ZDelta() * minT;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv518[ebp]
	movss	xmm0, DWORD PTR tv518[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv606[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv522[ebp]
	movss	xmm0, DWORD PTR tv522[ebp]
	mulss	xmm0, DWORD PTR _minT$[ebp]
	movss	xmm1, DWORD PTR tv606[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [edx+8], xmm1

; 520  :       }
; 521  :       else

	jmp	$LN1@FindCollis
$LN5@FindCollis:

; 522  :       {
; 523  :          minT = (-b - (float)sqrt(underRad)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	xmm1, DWORD PTR _underRad$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv608[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv530[ebp]
	movss	xmm0, DWORD PTR tv608[ebp]
	subss	xmm0, DWORD PTR tv530[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _minT$[ebp], xmm0

; 524  :          maxT = (-b + (float)sqrt(underRad)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	xmm1, DWORD PTR _underRad$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv610[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv538[ebp]
	movss	xmm0, DWORD PTR tv610[ebp]
	addss	xmm0, DWORD PTR tv538[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _maxT$[ebp], xmm0

; 525  : 
; 526  :          if (minT < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _minT$[ebp]
	jbe	SHORT $LN3@FindCollis

; 527  :          {
; 528  :             minT = maxT;

	movss	xmm0, DWORD PTR _maxT$[ebp]
	movss	DWORD PTR _minT$[ebp], xmm0
$LN3@FindCollis:

; 529  :          }
; 530  : 
; 531  :          if (minT < 0.0F)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _minT$[ebp]
	jbe	SHORT $LN2@FindCollis

; 532  :          {
; 533  :             retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0

; 534  :          }
; 535  :          else

	jmp	$LN1@FindCollis
$LN2@FindCollis:

; 536  :          {
; 537  :             collPoint->x = obj->XPos() + obj->XDelta() * minT;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv546[ebp]
	movss	xmm0, DWORD PTR tv546[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv612[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv550[ebp]
	movss	xmm0, DWORD PTR tv550[ebp]
	mulss	xmm0, DWORD PTR _minT$[ebp]
	movss	xmm1, DWORD PTR tv612[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [eax], xmm1

; 538  :             collPoint->y = obj->YPos() + obj->YDelta() * minT;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv555[ebp]
	movss	xmm0, DWORD PTR tv555[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv614[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv559[ebp]
	movss	xmm0, DWORD PTR tv559[ebp]
	mulss	xmm0, DWORD PTR _minT$[ebp]
	movss	xmm1, DWORD PTR tv614[ebp]
	addss	xmm1, xmm0
	mov	ecx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [ecx+4], xmm1

; 539  :             collPoint->z = obj->ZPos() + obj->ZDelta() * minT;

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv564[ebp]
	movss	xmm0, DWORD PTR tv564[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	movss	DWORD PTR tv616[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv568[ebp]
	movss	xmm0, DWORD PTR tv568[ebp]
	mulss	xmm0, DWORD PTR _minT$[ebp]
	movss	xmm1, DWORD PTR tv616[ebp]
	addss	xmm1, xmm0
	mov	edx, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR [edx+8], xmm1
$LN1@FindCollis:

; 540  :          }
; 541  :       }
; 542  :    }
; 543  : 
; 544  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 545  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z ENDP ; FindCollisionPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_fucked_count$ = -164					; size = 4
tv719 = -160						; size = 4
tv715 = -156						; size = 4
tv731 = -152						; size = 4
tv943 = -148						; size = 4
tv735 = -144						; size = 4
tv961 = -140						; size = 4
tv953 = -136						; size = 4
tv939 = -132						; size = 4
tv923 = -128						; size = 4
tv935 = -124						; size = 4
tv955 = -120						; size = 4
tv959 = -116						; size = 4
tv727 = -112						; size = 4
tv931 = -108						; size = 4
tv723 = -104						; size = 4
tv927 = -100						; size = 4
tv951 = -96						; size = 4
tv957 = -92						; size = 4
_lastUpdate$ = -88					; size = 4
_psi$1 = -84						; size = 8
tv459 = -76						; size = 4
_ataFrom$ = -72						; size = 4
_ata$ = -68						; size = 4
_elFrom$ = -64						; size = 4
_azFrom$ = -60						; size = 4
_ry_t$ = -56						; size = 4
_ry$ = -52						; size = 4
_inverseTimeDelta$ = -48				; size = 4
_rx_t$ = -44						; size = 4
_rz_t$ = -40						; size = 4
_rx$ = -36						; size = 4
_obj$ = -32						; size = 4
_rz$ = -28						; size = 4
_zft$ = -24						; size = 4
_range$ = -20						; size = 4
_xft$ = -16						; size = 4
_yft$ = -12						; size = 4
_objData$ = -8						; size = 4
_theObject$ = -4					; size = 4
_ownObject$ = 8						; size = 4
_targetList$ = 12					; size = 4
_vmat$ = 16						; size = 4
_elapsedTimeInverse$ = 20				; size = 4
?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z PROC ; CalcRelGeom

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H

; 161  : 	float ata, ataFrom;
; 162  : 	float azFrom, elFrom;
; 163  : 	float xft,yft,zft,rx,ry,rz,rx_t,ry_t,rz_t;
; 164  : 	float range;
; 165  : 	int fucked_count;
; 166  : 	unsigned long lastUpdate;
; 167  : 	SimObjectType* obj;
; 168  : 	FalconEntity* theObject;
; 169  : 	SimObjectLocalData* objData;
; 170  : 	float inverseTimeDelta;
; 171  : 
; 172  :    /*---------------------------------------*/
; 173  :    /* Velocity Vector transformation matrix */
; 174  :    /*---------------------------------------*/
; 175  :    if (vmat)

	cmp	DWORD PTR _vmat$[ebp], 0
	je	$LN8@CalcRelGeo

; 176  :    {
; 177  :       vmat[0][0] = ownObject->platformAngles.cossig *
; 178  :          ownObject->platformAngles.cosgam;

	mov	eax, DWORD PTR _ownObject$[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	mulss	xmm0, DWORD PTR [ecx+368]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	add	edx, DWORD PTR _vmat$[ebp]
	mov	eax, 4
	imul	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 179  :       vmat[0][1] = ownObject->platformAngles.sinsig *
; 180  :          ownObject->platformAngles.cosgam;

	mov	ecx, DWORD PTR _ownObject$[ebp]
	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [ecx+372]
	mulss	xmm0, DWORD PTR [edx+368]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	DWORD PTR [eax+ecx], xmm0

; 181  :       vmat[0][2] = -ownObject->platformAngles.singam;

	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [edx+364]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 182  : 
; 183  :       vmat[1][0] = -ownObject->platformAngles.sinsig *
; 184  :          ownObject->platformAngles.cosmu +
; 185  : 		   ownObject->platformAngles.cossig *
; 186  :          ownObject->platformAngles.singam *
; 187  :          ownObject->platformAngles.sinmu;

	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [edx+372]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _ownObject$[ebp]
	mulss	xmm0, DWORD PTR [eax+384]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm1, DWORD PTR [ecx+376]
	mulss	xmm1, DWORD PTR [edx+364]
	mov	eax, DWORD PTR _ownObject$[ebp]
	mulss	xmm1, DWORD PTR [eax+380]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	add	ecx, DWORD PTR _vmat$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 188  :       vmat[1][1] = ownObject->platformAngles.cossig *
; 189  :          ownObject->platformAngles.cosmu +
; 190  : 		   ownObject->platformAngles.sinsig *
; 191  :          ownObject->platformAngles.singam *
; 192  :          ownObject->platformAngles.sinmu;

	mov	eax, DWORD PTR _ownObject$[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	mulss	xmm0, DWORD PTR [ecx+384]
	mov	edx, DWORD PTR _ownObject$[ebp]
	mov	eax, DWORD PTR _ownObject$[ebp]
	movss	xmm1, DWORD PTR [edx+372]
	mulss	xmm1, DWORD PTR [eax+364]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	mulss	xmm1, DWORD PTR [ecx+380]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	add	edx, DWORD PTR _vmat$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 193  :       vmat[1][2] = ownObject->platformAngles.cosgam *
; 194  :          ownObject->platformAngles.sinmu;

	mov	ecx, DWORD PTR _ownObject$[ebp]
	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [ecx+368]
	mulss	xmm0, DWORD PTR [edx+380]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0

; 195  : 
; 196  :       vmat[2][0] = ownObject->platformAngles.sinsig *
; 197  :          ownObject->platformAngles.sinmu +
; 198  : 		   ownObject->platformAngles.cossig *
; 199  :          ownObject->platformAngles.singam *
; 200  :          ownObject->platformAngles.cosmu;

	mov	edx, DWORD PTR _ownObject$[ebp]
	mov	eax, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [edx+372]
	mulss	xmm0, DWORD PTR [eax+380]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm1, DWORD PTR [ecx+376]
	mulss	xmm1, DWORD PTR [edx+364]
	mov	eax, DWORD PTR _ownObject$[ebp]
	mulss	xmm1, DWORD PTR [eax+384]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	add	ecx, DWORD PTR _vmat$[ebp]
	mov	edx, 4
	imul	edx, 0
	movss	DWORD PTR [ecx+edx], xmm0

; 201  :       vmat[2][1] = -ownObject->platformAngles.cossig *
; 202  :          ownObject->platformAngles.sinmu +
; 203  : 		   ownObject->platformAngles.sinsig *
; 204  :          ownObject->platformAngles.singam *
; 205  :          ownObject->platformAngles.cosmu;

	mov	eax, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _ownObject$[ebp]
	mulss	xmm0, DWORD PTR [ecx+380]
	mov	edx, DWORD PTR _ownObject$[ebp]
	mov	eax, DWORD PTR _ownObject$[ebp]
	movss	xmm1, DWORD PTR [edx+372]
	mulss	xmm1, DWORD PTR [eax+364]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	mulss	xmm1, DWORD PTR [ecx+384]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	add	edx, DWORD PTR _vmat$[ebp]
	mov	eax, 4
	shl	eax, 0
	movss	DWORD PTR [edx+eax], xmm0

; 206  :       vmat[2][2] = ownObject->platformAngles.cosgam *
; 207  :          ownObject->platformAngles.cosmu;

	mov	ecx, DWORD PTR _ownObject$[ebp]
	mov	edx, DWORD PTR _ownObject$[ebp]
	movss	xmm0, DWORD PTR [ecx+368]
	mulss	xmm0, DWORD PTR [edx+384]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	add	eax, DWORD PTR _vmat$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	DWORD PTR [eax+ecx], xmm0
$LN8@CalcRelGeo:

; 208  :    }
; 209  : 
; 210  :    /*------------------------------*/
; 211  :    /* Do each plane execpt ownship */
; 212  :    /*------------------------------*/
; 213  :    fucked_count = 0;	// HACK HACK HACK HACK HACK HACK HACK hackerydoodar HACK

	mov	DWORD PTR _fucked_count$[ebp], 0

; 214  :    obj = targetList;

	mov	edx, DWORD PTR _targetList$[ebp]
	mov	DWORD PTR _obj$[ebp], edx
$LN13@CalcRelGeo:

; 215  : 
; 216  :    while (obj)

	cmp	DWORD PTR _obj$[ebp], 0
	je	$LN6@CalcRelGeo

; 217  :    {
; 218  :       objData = obj->localData;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _objData$[ebp], ecx

; 219  :   
; 220  : 			theObject = obj->BaseData();

	mov	ecx, DWORD PTR _obj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _theObject$[ebp], eax

; 221  : 
; 222  :       if (theObject == NULL)

	cmp	DWORD PTR _theObject$[ebp], 0
	jne	SHORT $LN5@CalcRelGeo

; 223  :       {
; 224  :          obj = obj->next;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _obj$[ebp], eax

; 225  :          continue;

	jmp	SHORT $LN13@CalcRelGeo
$LN5@CalcRelGeo:

; 226  :       }
; 227  :       lastUpdate = theObject->LastUpdateTime();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?LastUpdateTime@VuEntity@@QBEKXZ	; VuEntity::LastUpdateTime
	mov	DWORD PTR _lastUpdate$[ebp], eax

; 228  : 
; 229  :       if (lastUpdate == vuxGameTime)

	mov	ecx, DWORD PTR _lastUpdate$[ebp]
	cmp	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	jne	SHORT $LN4@CalcRelGeo

; 230  :          inverseTimeDelta = elapsedTimeInverse;

	movss	xmm0, DWORD PTR _elapsedTimeInverse$[ebp]
	movss	DWORD PTR _inverseTimeDelta$[ebp], xmm0

; 231  :       else

	jmp	SHORT $LN3@CalcRelGeo
$LN4@CalcRelGeo:

; 232  :       {
; 233  :          inverseTimeDelta = 1.0F / SimLibLastMajorFrameTime;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR ?SimLibLastMajorFrameTime@@3MA
	movss	DWORD PTR _inverseTimeDelta$[ebp], xmm0
$LN3@CalcRelGeo:

; 234  :       }
; 235  : 
; 236  :       xft = theObject->XPos() - ownObject->XPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv715[ebp]
	movss	xmm0, DWORD PTR tv715[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv951[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv719[ebp]
	movss	xmm0, DWORD PTR tv951[ebp]
	subss	xmm0, DWORD PTR tv719[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 237  :       yft = theObject->YPos() - ownObject->YPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv723[ebp]
	movss	xmm0, DWORD PTR tv723[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv953[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv727[ebp]
	movss	xmm0, DWORD PTR tv953[ebp]
	subss	xmm0, DWORD PTR tv727[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 238  :       zft = theObject->ZPos() - ownObject->ZPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv731[ebp]
	movss	xmm0, DWORD PTR tv731[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv955[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv735[ebp]
	movss	xmm0, DWORD PTR tv955[ebp]
	subss	xmm0, DWORD PTR tv735[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 239  : 
; 240  :       rx = ownObject->dmx[0][0]*xft + ownObject->dmx[0][1]*yft + ownObject->dmx[0][2]*zft;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 241  :       ry = ownObject->dmx[1][0]*xft + ownObject->dmx[1][1]*yft + ownObject->dmx[1][2]*zft;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 242  :       rz = ownObject->dmx[2][0]*xft + ownObject->dmx[2][1]*yft + ownObject->dmx[2][2]*zft;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 243  : 
; 244  :       if (theObject->IsSim())

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN2@CalcRelGeo

; 245  :       {
; 246  :          rx_t = -(((SimBaseClass*)theObject)->dmx[0][0]*xft + ((SimBaseClass*)theObject)->dmx[0][1]*yft + 
; 247  :             ((SimBaseClass*)theObject)->dmx[0][2]*zft);

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rx_t$[ebp], xmm0

; 248  :          ry_t = -(((SimBaseClass*)theObject)->dmx[1][0]*xft + ((SimBaseClass*)theObject)->dmx[1][1]*yft + 
; 249  :             ((SimBaseClass*)theObject)->dmx[1][2]*zft);

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _ry_t$[ebp], xmm0

; 250  :          rz_t = -(((SimBaseClass*)theObject)->dmx[2][0]*xft + ((SimBaseClass*)theObject)->dmx[2][1]*yft + 
; 251  :             ((SimBaseClass*)theObject)->dmx[2][2]*zft);

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _theObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _theObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _theObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rz_t$[ebp], xmm0

; 252  :       }
; 253  :       else

	jmp	SHORT $LN1@CalcRelGeo
$LN2@CalcRelGeo:

; 254  :       {
; 255  : 		  mlTrig	psi;
; 256  : 		  
; 257  : 		  // KCK: Optimized because Roll() and Pitch() are always zero for campaign objects
; 258  : 		  mlSinCos (&psi, theObject->Yaw());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _psi$1[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 259  : 		  rx_t = -( psi.cos*xft + psi.sin*yft);

	movss	xmm0, DWORD PTR _psi$1[ebp+4]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psi$1[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rx_t$[ebp], xmm0

; 260  : 		  ry_t = -(-psi.sin*xft + psi.cos*yft);

	movss	xmm0, DWORD PTR _psi$1[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psi$1[ebp+4]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _ry_t$[ebp], xmm0

; 261  : 		  rz_t = -(zft);

	movss	xmm0, DWORD PTR _zft$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rz_t$[ebp], xmm0
$LN1@CalcRelGeo:

; 262  :       }
; 263  : 	  
; 264  :       range = (float)(xft*xft + yft*yft + zft*zft);

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _zft$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _range$[ebp], xmm0

; 265  :       range = max (range, 1.0F);

	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN11@CalcRelGeo
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR tv459[ebp], xmm0
	jmp	SHORT $LN12@CalcRelGeo
$LN11@CalcRelGeo:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv459[ebp], xmm0
$LN12@CalcRelGeo:
	movss	xmm0, DWORD PTR tv459[ebp]
	movss	DWORD PTR _range$[ebp], xmm0

; 266  :       rz    = -rz;

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rz$[ebp], xmm0

; 267  : 			rz_t	= -rz_t;

	movss	xmm0, DWORD PTR _rz_t$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rz_t$[ebp], xmm0

; 268  : 
; 269  :       ata            = (float)atan2(sqrt(range-rx*rx),rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _ata$[ebp]

; 270  :       ataFrom        = (float)atan2(sqrt(range-rx_t*rx_t),rx_t);

	cvtss2sd xmm0, DWORD PTR _rx_t$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx_t$[ebp]
	mulss	xmm0, DWORD PTR _rx_t$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _ataFrom$[ebp]

; 271  : 
; 272  :       objData->az    = (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _objData$[ebp]
	fstp	DWORD PTR [eax+16]

; 273  :       objData->droll = (float)atan2(ry,rz);

	cvtss2sd xmm0, DWORD PTR _rz$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _objData$[ebp]
	fstp	DWORD PTR [ecx+40]

; 274  :       objData->el    = (float)atan2(rz,sqrt(range-rz*rz));

	movss	xmm0, DWORD PTR _rz$[ebp]
	mulss	xmm0, DWORD PTR _rz$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	cvtss2sd xmm0, DWORD PTR _rz$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _objData$[ebp]
	fstp	DWORD PTR [edx+28]

; 275  :       azFrom         = (float)atan2(ry_t,rx_t);

	cvtss2sd xmm0, DWORD PTR _rx_t$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry_t$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _azFrom$[ebp]

; 276  :       elFrom         = (float)atan2(rz_t,sqrt(range-rz_t*rz_t));

	movss	xmm0, DWORD PTR _rz_t$[ebp]
	mulss	xmm0, DWORD PTR _rz_t$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	cvtss2sd xmm0, DWORD PTR _rz_t$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _elFrom$[ebp]

; 277  :       
; 278  :       range = (float)sqrt(range);

	push	ecx
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 279  :       objData->azFromdot  = (azFrom - objData->azFrom) * inverseTimeDelta;

	mov	eax, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _azFrom$[ebp]
	subss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _inverseTimeDelta$[ebp]
	mov	ecx, DWORD PTR _objData$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 280  :       objData->elFromdot  = (elFrom - objData->elFrom) * inverseTimeDelta;

	mov	edx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _elFrom$[ebp]
	subss	xmm0, DWORD PTR [edx+32]
	mulss	xmm0, DWORD PTR _inverseTimeDelta$[ebp]
	mov	eax, DWORD PTR _objData$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 281  :       objData->atadot      = (ata - objData->ata) * inverseTimeDelta;

	mov	ecx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _ata$[ebp]
	subss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _inverseTimeDelta$[ebp]
	mov	edx, DWORD PTR _objData$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 282  :       objData->ataFromdot = (ataFrom - objData->ataFromdot) * inverseTimeDelta;

	mov	eax, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _ataFrom$[ebp]
	subss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _inverseTimeDelta$[ebp]
	mov	ecx, DWORD PTR _objData$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 283  :       objData->ata = ata;

	mov	edx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _ata$[ebp]
	movss	DWORD PTR [edx], xmm0

; 284  :       objData->range = range;

	mov	eax, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 285  :       objData->azFrom = azFrom;

	mov	ecx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _azFrom$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 286  :       objData->elFrom = elFrom;

	mov	edx, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _elFrom$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 287  :       objData->ataFrom = ataFrom;

	mov	eax, DWORD PTR _objData$[ebp]
	movss	xmm0, DWORD PTR _ataFrom$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 288  : 
; 289  :       // Range dot, roughly frame rate invariant
; 290  :       rx = theObject->XDelta() - ownObject->XDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv923[ebp]
	movss	xmm0, DWORD PTR tv923[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv957[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv927[ebp]
	movss	xmm0, DWORD PTR tv957[ebp]
	subss	xmm0, DWORD PTR tv927[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 291  :       ry = theObject->YDelta() - ownObject->YDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv931[ebp]
	movss	xmm0, DWORD PTR tv931[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv959[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv935[ebp]
	movss	xmm0, DWORD PTR tv959[ebp]
	subss	xmm0, DWORD PTR tv935[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 292  :       rz = theObject->ZDelta() - ownObject->ZDelta();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv939[ebp]
	movss	xmm0, DWORD PTR tv939[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv961[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv943[ebp]
	movss	xmm0, DWORD PTR tv961[ebp]
	subss	xmm0, DWORD PTR tv943[ebp]
	movss	DWORD PTR _rz$[ebp], xmm0

; 293  :       objData->rangedot = (rx*xft + ry*yft +rz*zft) / range;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _objData$[ebp]
	movss	DWORD PTR [ecx+48], xmm0

; 294  : 
; 295  :       obj = obj->next;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _obj$[ebp], eax

; 296  :    }

	jmp	$LN13@CalcRelGeo
$LN6@CalcRelGeo:

; 297  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z ENDP ; CalcRelGeom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_psi$ = -80						; size = 8
tv275 = -72						; size = 4
tv261 = -68						; size = 4
tv255 = -64						; size = 4
tv227 = -60						; size = 4
tv281 = -56						; size = 4
tv223 = -52						; size = 4
tv219 = -48						; size = 4
tv279 = -44						; size = 4
tv215 = -40						; size = 4
tv211 = -36						; size = 4
tv277 = -32						; size = 4
tv207 = -28						; size = 4
_range$ = -24						; size = 4
_rx_t$ = -20						; size = 4
_yft$ = -16						; size = 4
_xft$ = -12						; size = 4
_zft$ = -8						; size = 4
_theObject$ = -4					; size = 4
_ownObject$ = 8						; size = 4
_targetPtr$ = 12					; size = 4
?CalcRelAzElRangeAta@@YAXPAVSimBaseClass@@PAVSimObjectType@@@Z PROC ; CalcRelAzElRangeAta

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 130  : 	float xft,yft,zft,rx_t;
; 131  : 	float range;
; 132  : 	FalconEntity* theObject;
; 133  : 	mlTrig	psi;
; 134  : 
; 135  : 	theObject = targetPtr->BaseData();

	mov	ecx, DWORD PTR _targetPtr$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _theObject$[ebp], eax

; 136  : 	if (!theObject)

	cmp	DWORD PTR _theObject$[ebp], 0
	jne	SHORT $LN1@CalcRelAzE

; 137  : 		return;

	jmp	$LN2@CalcRelAzE
$LN1@CalcRelAzE:

; 138  : 
; 139  : 	xft = theObject->XPos() - ownObject->XPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv207[ebp]
	movss	xmm0, DWORD PTR tv207[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv277[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv211[ebp]
	movss	xmm0, DWORD PTR tv277[ebp]
	subss	xmm0, DWORD PTR tv211[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 140  : 	yft = theObject->YPos() - ownObject->YPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv215[ebp]
	movss	xmm0, DWORD PTR tv215[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv279[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv219[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	subss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 141  : 	zft = theObject->ZPos() - ownObject->ZPos();

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv223[ebp]
	movss	xmm0, DWORD PTR tv223[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv281[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv227[ebp]
	movss	xmm0, DWORD PTR tv281[ebp]
	subss	xmm0, DWORD PTR tv227[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 142  : 	
; 143  : 	// This is the only place CalcTransformMatrix() happens (other than Init()) for 
; 144  : 	// ground vehicles, I think. It's quite possible we can do away with it entirely,
; 145  : 	// as Ed isn't using it anywhere any how.
; 146  : 	// CalcTransformMatrix();
; 147  : 	
; 148  : 	mlSinCos (&psi, theObject->Yaw());

	mov	ecx, DWORD PTR _theObject$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _psi$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 149  : 	rx_t = -(psi.cos*xft + psi.sin*yft);

	movss	xmm0, DWORD PTR _psi$[ebp+4]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psi$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rx_t$[ebp], xmm0

; 150  : 
; 151  : 	range = (float)(xft*xft + yft*yft + zft*zft);

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _zft$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _range$[ebp], xmm0

; 152  : 
; 153  : 	targetPtr->localData->range	= (float)sqrt(range);

	push	ecx
	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	ecx, DWORD PTR _targetPtr$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+44]

; 154  : 	targetPtr->localData->ataFrom	= (float)atan2(sqrt(range-rx_t*rx_t),rx_t);

	cvtss2sd xmm0, DWORD PTR _rx_t$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx_t$[ebp]
	mulss	xmm0, DWORD PTR _rx_t$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv255[ebp]
	fld	DWORD PTR tv255[ebp]
	mov	eax, DWORD PTR _targetPtr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	fstp	DWORD PTR [ecx+4]

; 155  : 	targetPtr->localData->az		= (float)atan2(yft,xft);

	cvtss2sd xmm0, DWORD PTR _xft$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _yft$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv261[ebp]
	fld	DWORD PTR tv261[ebp]
	mov	edx, DWORD PTR _targetPtr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	fstp	DWORD PTR [eax+16]

; 156  : 	targetPtr->localData->el		= (float)atan2(-zft,sqrt(range-zft*zft));

	movss	xmm0, DWORD PTR _zft$[ebp]
	mulss	xmm0, DWORD PTR _zft$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _zft$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv275[ebp]
	fld	DWORD PTR tv275[ebp]
	mov	ecx, DWORD PTR _targetPtr$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+28]
$LN2@CalcRelAzE:

; 157  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalcRelAzElRangeAta@@YAXPAVSimBaseClass@@PAVSimObjectType@@@Z ENDP ; CalcRelAzElRangeAta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_trigpsi$ = -96						; size = 8
_trigtha$ = -88						; size = 8
_xfrm02$ = -80						; size = 4
_xfrm01$ = -76						; size = 4
_xfrm00$ = -72						; size = 4
tv331 = -68						; size = 4
tv444 = -64						; size = 4
tv327 = -60						; size = 4
tv323 = -56						; size = 4
tv442 = -52						; size = 4
tv287 = -48						; size = 4
tv283 = -44						; size = 4
tv440 = -40						; size = 4
tv279 = -36						; size = 4
_range$ = -32						; size = 4
_rx_t$ = -28						; size = 4
_rz$ = -24						; size = 4
_ry$ = -20						; size = 4
_rx$ = -16						; size = 4
_zft$ = -12						; size = 4
_yft$ = -8						; size = 4
_xft$ = -4						; size = 4
_ownObject$ = 8						; size = 4
_target$ = 12						; size = 4
_az$ = 16						; size = 4
_el$ = 20						; size = 4
_ata$ = 24						; size = 4
_ataFrom$ = 28						; size = 4
_droll$ = 32						; size = 4
?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z PROC ; CalcRelValues

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H

; 72   : 	float xft;
; 73   : 	float yft;
; 74   : 	float zft;
; 75   : 	float rx;
; 76   : 	float ry;
; 77   : 	float rz;
; 78   : 	float	range;
; 79   : 	float	xfrm00;
; 80   : 	float xfrm01;
; 81   : 	float xfrm02;
; 82   : 	float rx_t;
; 83   : 	mlTrig trigtha;
; 84   : 	mlTrig trigpsi;
; 85   : 
; 86   :    xft		= target->XPos() - ownObject->XPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv279[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv440[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv283[ebp]
	movss	xmm0, DWORD PTR tv440[ebp]
	subss	xmm0, DWORD PTR tv283[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 87   :    yft		= target->YPos() - ownObject->YPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv287[ebp]
	movss	xmm0, DWORD PTR tv287[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv442[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv323[ebp]
	movss	xmm0, DWORD PTR tv442[ebp]
	subss	xmm0, DWORD PTR tv323[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 88   :    zft		= target->ZPos() - ownObject->ZPos();

	mov	ecx, DWORD PTR _target$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv327[ebp]
	movss	xmm0, DWORD PTR tv327[ebp]
	mov	ecx, DWORD PTR _ownObject$[ebp]
	movss	DWORD PTR tv444[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv331[ebp]
	movss	xmm0, DWORD PTR tv444[ebp]
	subss	xmm0, DWORD PTR tv331[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 89   : 				
; 90   :    rx			= ownObject->dmx[0][0] * xft + ownObject->dmx[0][1] * yft + ownObject->dmx[0][2] * zft;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 91   :    ry			= ownObject->dmx[1][0] * xft + ownObject->dmx[1][1] * yft + ownObject->dmx[1][2] * zft;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 92   :    rz			= ownObject->dmx[2][0] * xft + ownObject->dmx[2][1] * yft + ownObject->dmx[2][2] * zft;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 93   : 				
; 94   : 	range		= (float)(xft * xft + yft * yft + zft * zft);

	movss	xmm0, DWORD PTR _xft$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _yft$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _zft$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _range$[ebp], xmm0

; 95   : 
; 96   :    mlSinCos (&trigtha, target->Pitch());

	mov	ecx, DWORD PTR _target$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _trigtha$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 97   :    mlSinCos (&trigpsi, target->Yaw());

	mov	ecx, DWORD PTR _target$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trigpsi$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 98   : 
; 99   :    xfrm00	= trigpsi.cos * trigtha.cos;

	movss	xmm0, DWORD PTR _trigpsi$[ebp+4]
	mulss	xmm0, DWORD PTR _trigtha$[ebp+4]
	movss	DWORD PTR _xfrm00$[ebp], xmm0

; 100  :    xfrm01	= trigpsi.sin * trigtha.cos;

	movss	xmm0, DWORD PTR _trigpsi$[ebp]
	mulss	xmm0, DWORD PTR _trigtha$[ebp+4]
	movss	DWORD PTR _xfrm01$[ebp], xmm0

; 101  :    xfrm02	= -trigtha.sin;

	movss	xmm0, DWORD PTR _trigtha$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _xfrm02$[ebp], xmm0

; 102  : 
; 103  : 	rx_t		= -(xfrm00 * xft + xfrm01 * yft + xfrm02 * zft);

	movss	xmm0, DWORD PTR _xfrm00$[ebp]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _xfrm01$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _xfrm02$[ebp]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rx_t$[ebp], xmm0

; 104  : 
; 105  : 	rz			= -rz;

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _rz$[ebp], xmm0

; 106  : 
; 107  : 	*ata		= (float)atan2(sqrt(range-rx * rx),rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _ata$[ebp]
	fstp	DWORD PTR [edx]

; 108  : 	*ataFrom = (float)atan2(sqrt(range-rx_t * rx_t),rx_t);

	cvtss2sd xmm0, DWORD PTR _rx_t$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx_t$[ebp]
	mulss	xmm0, DWORD PTR _rx_t$[ebp]
	movss	xmm1, DWORD PTR _range$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _ataFrom$[ebp]
	fstp	DWORD PTR [eax]

; 109  : 	*droll	= (float)atan2(ry,rz);

	cvtss2sd xmm0, DWORD PTR _rz$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _droll$[ebp]
	fstp	DWORD PTR [ecx]

; 110  : 	*az		= (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _az$[ebp]
	fstp	DWORD PTR [edx]

; 111  : 	*el		= (float)atan2(rz,sqrt(rx * rx+ry * ry));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	cvtss2sd xmm0, DWORD PTR _rz$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _el$[ebp]
	fstp	DWORD PTR [eax]

; 112  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z ENDP ; CalcRelValues
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_rz$ = -36						; size = 4
tv210 = -32						; size = 4
tv205 = -28						; size = 4
tv200 = -24						; size = 4
_ry$ = -20						; size = 4
_rx$ = -16						; size = 4
_zft$ = -12						; size = 4
_yft$ = -8						; size = 4
_xft$ = -4						; size = 4
_ownObject$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_az$ = 24						; size = 4
_el$ = 28						; size = 4
?CalcRelAzEl@@YAXPAVSimBaseClass@@MMMPAM1@Z PROC	; CalcRelAzEl

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 35   : 	float xft;
; 36   : 	float yft;
; 37   : 	float zft;
; 38   : 	float rx;
; 39   : 	float ry;
; 40   : 	float rz;
; 41   : 
; 42   : 	xft	= x - ownObject->XPos();

	mov	ecx, DWORD PTR _ownObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR tv200[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 43   : 	yft	= y - ownObject->YPos();

	mov	ecx, DWORD PTR _ownObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv205[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR tv205[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 44   : 	zft	= z - ownObject->ZPos();

	mov	ecx, DWORD PTR _ownObject$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv210[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	subss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR _zft$[ebp], xmm0

; 45   : 
; 46   : 	rx	= ownObject->dmx[0][0]*xft + ownObject->dmx[0][1]*yft + ownObject->dmx[0][2]*zft;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 47   : 	ry	= ownObject->dmx[1][0]*xft + ownObject->dmx[1][1]*yft + ownObject->dmx[1][2]*zft;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 48   : 	rz	= ownObject->dmx[2][0]*xft + ownObject->dmx[2][1]*yft + ownObject->dmx[2][2]*zft;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _ownObject$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _ownObject$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _ownObject$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _zft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 49   : 
; 50   : 	*az	= (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _az$[ebp]
	fstp	DWORD PTR [eax]

; 51   : 	*el	= (float)atan2(-rz,sqrt(rx*rx+ry*ry));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _el$[ebp]
	fstp	DWORD PTR [ecx]

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalcRelAzEl@@YAXPAVSimBaseClass@@MMMPAM1@Z ENDP	; CalcRelAzEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_trigAz$ = -56						; size = 8
_trigEl$ = -48						; size = 8
_zft$ = -40						; size = 4
tv281 = -36						; size = 4
_yft$ = -32						; size = 4
tv275 = -28						; size = 4
_xft$ = -24						; size = 4
tv269 = -20						; size = 4
_xy_range$ = -16					; size = 4
_rz$ = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_platform$ = 8						; size = 4
_az$ = 12						; size = 4
_el$ = 16						; size = 4
_range$ = 20						; size = 4
_x$ = 24						; size = 4
_y$ = 28						; size = 4
_z$ = 32						; size = 4
?GetXYZ@@YAXPAVSimBaseClass@@MMMPAM11@Z PROC		; GetXYZ

; 423  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 424  : 	float rx, ry, rz;
; 425  : 	float xft, yft, zft;
; 426  : 	float xy_range;
; 427  : 	mlTrig trigAz, trigEl;
; 428  : 
; 429  : 	mlSinCos (&trigAz, az);

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trigAz$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 430  : 	mlSinCos (&trigEl, el);

	add	esp, 4
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigEl$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 431  : 	/*--------------------------*/
; 432  : 	/* Math done more than once */
; 433  : 	/*--------------------------*/
; 434  : 	xy_range = range * trigEl.cos;

	movss	xmm0, DWORD PTR _range$[ebp]
	mulss	xmm0, DWORD PTR _trigEl$[ebp+4]
	movss	DWORD PTR _xy_range$[ebp], xmm0

; 435  : 
; 436  : 	/*---------------------------------*/
; 437  : 	/* Three equations, three unknowns */
; 438  : 	/* This gives relative x, y, z     */
; 439  : 	/*---------------------------------*/
; 440  : 	rz = -range * trigEl.sin;

	movss	xmm0, DWORD PTR _range$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _trigEl$[ebp]
	movss	DWORD PTR _rz$[ebp], xmm0

; 441  : 	rx = xy_range * trigAz.cos;

	movss	xmm0, DWORD PTR _xy_range$[ebp]
	mulss	xmm0, DWORD PTR _trigAz$[ebp+4]
	movss	DWORD PTR _rx$[ebp], xmm0

; 442  : 	ry = xy_range * trigAz.sin;

	movss	xmm0, DWORD PTR _xy_range$[ebp]
	mulss	xmm0, DWORD PTR _trigAz$[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 443  : 
; 444  : 	/*--------------------------------------------*/
; 445  : 	/* The transformation matrix is the transpose */
; 446  : 	/* of the AC/ Inertial matrix                 */
; 447  : 	/*--------------------------------------------*/
; 448  : 	xft = platform->dmx[0][0]*rx + platform->dmx[1][0]*ry + platform->dmx[2][0]*rz;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _platform$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _platform$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _platform$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _xft$[ebp], xmm0

; 449  : 	yft = platform->dmx[0][1]*rx + platform->dmx[1][1]*ry + platform->dmx[2][1]*rz;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _platform$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _platform$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _platform$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _yft$[ebp], xmm0

; 450  : 	zft = platform->dmx[0][2]*rx + platform->dmx[1][2]*ry + platform->dmx[2][2]*rz;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _platform$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _platform$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _platform$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _zft$[ebp], xmm0

; 451  : 
; 452  : 	*x = xft + platform->XPos();

	mov	ecx, DWORD PTR _platform$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv269[ebp]
	movss	xmm0, DWORD PTR tv269[ebp]
	addss	xmm0, DWORD PTR _xft$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx], xmm0

; 453  : 	*y = yft + platform->YPos();

	mov	ecx, DWORD PTR _platform$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv275[ebp]
	movss	xmm0, DWORD PTR tv275[ebp]
	addss	xmm0, DWORD PTR _yft$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0

; 454  : 	*z = zft + platform->ZPos();

	mov	ecx, DWORD PTR _platform$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv281[ebp]
	movss	xmm0, DWORD PTR tv281[ebp]
	addss	xmm0, DWORD PTR _zft$[ebp]
	mov	ecx, DWORD PTR _z$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 455  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetXYZ@@YAXPAVSimBaseClass@@MMMPAM11@Z ENDP		; GetXYZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_psiTrig$ = -40						; size = 8
_ry2$ = -32						; size = 4
_rx2$ = -28						; size = 4
_rz$ = -24						; size = 4
tv176 = -20						; size = 4
tv171 = -16						; size = 4
tv166 = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_af1$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_az$ = 24						; size = 4
_el$ = 28						; size = 4
?TargetAzEl@@YAXPAVFalconEntity@@MMMAAM1@Z PROC		; TargetAzEl

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 399  : 	mlTrig psiTrig;
; 400  : 	float rx,ry,rz;
; 401  : 	float rx2, ry2;
; 402  : 
; 403  : 	mlSinCos (&psiTrig, af1->Yaw());

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _psiTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 404  : 
; 405  : 	rx = x - af1->XPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 406  : 	ry = y - af1->YPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv171[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR tv171[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 407  : 	rz = z - af1->ZPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	subss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR _rz$[ebp], xmm0

; 408  : 	
; 409  : 	/* sqrt returns positive, so this is cool */
; 410  : 	el = (float)atan2(-rz,sqrt(rx*rx+ry*ry));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _el$[ebp]
	fstp	DWORD PTR [ecx]

; 411  : 	az = (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _az$[ebp]
	fstp	DWORD PTR [edx]

; 412  : 	
; 413  : 	rx2 =  psiTrig.cos*rx + psiTrig.sin*ry;

	movss	xmm0, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx2$[ebp], xmm0

; 414  : 	ry2 = -psiTrig.sin*rx + psiTrig.cos*ry;

	movss	xmm0, DWORD PTR _psiTrig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry2$[ebp], xmm0

; 415  : 	
; 416  : 	az = (float)atan2(ry2,rx2);

	cvtss2sd xmm0, DWORD PTR _rx2$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry2$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _az$[ebp]
	fstp	DWORD PTR [eax]

; 417  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetAzEl@@YAXPAVFalconEntity@@MMMAAM1@Z ENDP		; TargetAzEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_el$ = -52						; size = 4
_rz$ = -48						; size = 4
tv184 = -44						; size = 4
tv204 = -40						; size = 4
tv180 = -36						; size = 4
tv175 = -32						; size = 4
tv202 = -28						; size = 4
tv171 = -24						; size = 4
tv166 = -20						; size = 4
tv200 = -16						; size = 4
tv162 = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_af1$ = 8						; size = 4
_af2$ = 12						; size = 4
?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z PROC ; TargetEl

; 370  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 371  : float rx,ry,rz,el;
; 372  : 
; 373  :    rx = af2->BaseData()->XPos() - af1->XPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv200[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	subss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 374  :    ry = af2->BaseData()->YPos() - af1->YPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv171[ebp]
	movss	xmm0, DWORD PTR tv171[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv202[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv175[ebp]
	movss	xmm0, DWORD PTR tv202[ebp]
	subss	xmm0, DWORD PTR tv175[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 375  :    rz = af2->BaseData()->ZPos() - af1->ZPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv180[ebp]
	movss	xmm0, DWORD PTR tv180[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv204[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv184[ebp]
	movss	xmm0, DWORD PTR tv204[ebp]
	subss	xmm0, DWORD PTR tv184[ebp]
	movss	DWORD PTR _rz$[ebp], xmm0

; 376  : 
; 377  :    /* sqrt returns positive, so this is cool */
; 378  :    el = (float)atan2(-rz,sqrt(rx*rx+ry*ry));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _el$[ebp]

; 379  : 
; 380  :    return(el);

	fld	DWORD PTR _el$[ebp]

; 381  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ENDP ; TargetEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_el$ = -52						; size = 4
_rz$ = -48						; size = 4
tv175 = -44						; size = 4
tv195 = -40						; size = 4
tv171 = -36						; size = 4
tv167 = -32						; size = 4
tv193 = -28						; size = 4
tv163 = -24						; size = 4
tv159 = -20						; size = 4
tv191 = -16						; size = 4
tv155 = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_af1$ = 8						; size = 4
_af2$ = 12						; size = 4
?TargetEl@@YAMPAVFalconEntity@@0@Z PROC			; TargetEl

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 357  : float rx,ry,rz,el;
; 358  : 
; 359  :    rx = af2->XPos() - af1->XPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR tv155[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv191[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR tv191[ebp]
	subss	xmm0, DWORD PTR tv159[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 360  :    ry = af2->YPos() - af1->YPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv193[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv167[ebp]
	movss	xmm0, DWORD PTR tv193[ebp]
	subss	xmm0, DWORD PTR tv167[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 361  :    rz = af2->ZPos() - af1->ZPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv171[ebp]
	movss	xmm0, DWORD PTR tv171[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv195[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv175[ebp]
	movss	xmm0, DWORD PTR tv195[ebp]
	subss	xmm0, DWORD PTR tv175[ebp]
	movss	DWORD PTR _rz$[ebp], xmm0

; 362  : 
; 363  :    /* sqrt returns positive, so this is cool */
; 364  :    el = (float)atan2(-rz,sqrt(rx*rx+ry*ry));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _el$[ebp]

; 365  : 
; 366  :    return(el);

	fld	DWORD PTR _el$[ebp]

; 367  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetEl@@YAMPAVFalconEntity@@0@Z ENDP			; TargetEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_el$ = -28						; size = 4
_rz$ = -24						; size = 4
tv144 = -20						; size = 4
tv139 = -16						; size = 4
tv134 = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_af1$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?TargetEl@@YAMPAVFalconEntity@@MMM@Z PROC		; TargetEl

; 384  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 385  : float rx,ry,rz,el;
; 386  : 
; 387  :    rx = x - af1->XPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 388  :    ry = y - af1->YPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv139[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR tv139[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 389  :    rz = z - af1->ZPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv144[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	subss	xmm0, DWORD PTR tv144[ebp]
	movss	DWORD PTR _rz$[ebp], xmm0

; 390  : 
; 391  :    /* sqrt returns positive, so this is cool */
; 392  :    el = (float)atan2(-rz,sqrt(rx*rx+ry*ry));

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _el$[ebp]

; 393  : 
; 394  :    return(el);

	fld	DWORD PTR _el$[ebp]

; 395  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetEl@@YAMPAVFalconEntity@@MMM@Z ENDP		; TargetEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_psiTrig$ = -52						; size = 8
_az$ = -44						; size = 4
_ry$ = -40						; size = 4
_rx$ = -36						; size = 4
tv172 = -32						; size = 4
tv186 = -28						; size = 4
tv168 = -24						; size = 4
tv163 = -20						; size = 4
tv184 = -16						; size = 4
tv159 = -12						; size = 4
_yft$ = -8						; size = 4
_xft$ = -4						; size = 4
_af1$ = 8						; size = 4
_af2$ = 12						; size = 4
?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z PROC ; TargetAz

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 320  : float xft,yft,rx,ry,az;
; 321  : mlTrig psiTrig;
; 322  : 
; 323  :    mlSinCos (&psiTrig, af1->Yaw());

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _psiTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 324  : 
; 325  :    xft = af2->BaseData()->XPos() - af1->XPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv184[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv184[ebp]
	subss	xmm0, DWORD PTR tv163[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 326  :    yft = af2->BaseData()->YPos() - af1->YPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv168[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv186[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv172[ebp]
	movss	xmm0, DWORD PTR tv186[ebp]
	subss	xmm0, DWORD PTR tv172[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 327  : 
; 328  :    rx =  psiTrig.cos*xft + psiTrig.sin*yft;

	movss	xmm0, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 329  :    ry = -psiTrig.sin*xft + psiTrig.cos*yft;

	movss	xmm0, DWORD PTR _psiTrig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 330  : 
; 331  :    az = (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 332  : 
; 333  :    return(az);

	fld	DWORD PTR _az$[ebp]

; 334  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ENDP ; TargetAz
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_psiTrig$ = -52						; size = 8
_az$ = -44						; size = 4
_ry$ = -40						; size = 4
_rx$ = -36						; size = 4
tv166 = -32						; size = 4
tv180 = -28						; size = 4
tv162 = -24						; size = 4
tv158 = -20						; size = 4
tv178 = -16						; size = 4
tv154 = -12						; size = 4
_yft$ = -8						; size = 4
_xft$ = -4						; size = 4
_af1$ = 8						; size = 4
_af2$ = 12						; size = 4
?TargetAz@@YAMPAVFalconEntity@@0@Z PROC			; TargetAz

; 301  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 302  : float xft,yft,rx,ry,az;
; 303  : mlTrig psiTrig;
; 304  : 
; 305  :    mlSinCos (&psiTrig, af1->Yaw());

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _psiTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 306  : 
; 307  :    xft = af2->XPos() - af1->XPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv154[ebp]
	movss	xmm0, DWORD PTR tv154[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv178[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv158[ebp]
	movss	xmm0, DWORD PTR tv178[ebp]
	subss	xmm0, DWORD PTR tv158[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 308  :    yft = af2->YPos() - af1->YPos();

	mov	ecx, DWORD PTR _af2$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR _af1$[ebp]
	movss	DWORD PTR tv180[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR tv180[ebp]
	subss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 309  : 
; 310  :    rx =  psiTrig.cos*xft + psiTrig.sin*yft;

	movss	xmm0, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 311  :    ry = -psiTrig.sin*xft + psiTrig.cos*yft;

	movss	xmm0, DWORD PTR _psiTrig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 312  : 
; 313  :    az = (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 314  : 
; 315  :    return(az);

	fld	DWORD PTR _az$[ebp]

; 316  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetAz@@YAMPAVFalconEntity@@0@Z ENDP			; TargetAz
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\geometry.cpp
_TEXT	SEGMENT
_psiTrig$ = -36						; size = 8
_az$ = -28						; size = 4
_ry$ = -24						; size = 4
_rx$ = -20						; size = 4
tv145 = -16						; size = 4
tv140 = -12						; size = 4
_yft$ = -8						; size = 4
_xft$ = -4						; size = 4
_af1$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?TargetAz@@YAMPAVFalconEntity@@MM@Z PROC		; TargetAz

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 338  : float xft,yft,rx,ry,az;
; 339  : mlTrig psiTrig;
; 340  : 
; 341  :    mlSinCos (&psiTrig, af1->Yaw());

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _psiTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 342  : 
; 343  :    xft = x - af1->XPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv140[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR tv140[ebp]
	movss	DWORD PTR _xft$[ebp], xmm0

; 344  :    yft = y - af1->YPos();

	mov	ecx, DWORD PTR _af1$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv145[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR tv145[ebp]
	movss	DWORD PTR _yft$[ebp], xmm0

; 345  : 
; 346  :    rx =  psiTrig.cos*xft + psiTrig.sin*yft;

	movss	xmm0, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 347  :    ry = -psiTrig.sin*xft + psiTrig.cos*yft;

	movss	xmm0, DWORD PTR _psiTrig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _xft$[ebp]
	movss	xmm1, DWORD PTR _psiTrig$[ebp+4]
	mulss	xmm1, DWORD PTR _yft$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 348  : 
; 349  :    az = (float)atan2(ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _az$[ebp]

; 350  : 
; 351  :    return(az);

	fld	DWORD PTR _az$[ebp]

; 352  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TargetAz@@YAMPAVFalconEntity@@MM@Z ENDP		; TargetAz
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?LastUpdateTime@VuEntity@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LastUpdateTime@VuEntity@@QBEKXZ PROC			; VuEntity::LastUpdateTime, COMDAT
; _this$ = ecx

; 172  : 	VU_TIME LastUpdateTime() const { return lastUpdateTime_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	mov	esp, ebp
	pop	ebp
	ret	0
?LastUpdateTime@VuEntity@@QBEKXZ ENDP			; VuEntity::LastUpdateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 543  :         {return (tanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_tanf
	add	esp, 4
	pop	ebp
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 436  :         {return ((float)tan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
END
