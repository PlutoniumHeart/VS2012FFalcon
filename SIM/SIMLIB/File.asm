; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\SIMLIB\File.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?SimLibMinorFrameTime@@3MA			; SimLibMinorFrameTime
PUBLIC	?SimLibMinorFrameRate@@3MA			; SimLibMinorFrameRate
PUBLIC	?SimLibMajorFrameTime@@3MA			; SimLibMajorFrameTime
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?SimLibMajorFrameRate@@3MA			; SimLibMajorFrameRate
PUBLIC	?SimLibTimeOfDay@@3MA				; SimLibTimeOfDay
PUBLIC	?SimLibElapsedTime@@3KA				; SimLibElapsedTime
PUBLIC	?SimLibFrameCount@@3IA				; SimLibFrameCount
PUBLIC	?SimLibMinorPerMajor@@3HA			; SimLibMinorPerMajor
PUBLIC	?SimLibElapsedSeconds@@3MA			; SimLibElapsedSeconds
PUBLIC	?SimLibFrameElapsed@@3MA			; SimLibFrameElapsed
PUBLIC	?SimLibLastFrameTime@@3MA			; SimLibLastFrameTime
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?SimLibTimeOfDay@@3MA DD 01H DUP (?)			; SimLibTimeOfDay
?SimLibElapsedTime@@3KA DD 01H DUP (?)			; SimLibElapsedTime
?SimLibFrameCount@@3IA DD 01H DUP (?)			; SimLibFrameCount
?SimLibElapsedSeconds@@3MA DD 01H DUP (?)		; SimLibElapsedSeconds
?SimLibFrameElapsed@@3MA DD 01H DUP (?)			; SimLibFrameElapsed
?SimLibLastFrameTime@@3MA DD 01H DUP (?)		; SimLibLastFrameTime
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
_DATA	SEGMENT
?SimLibMinorFrameTime@@3MA DD 03ca3d70ar	; 0.02	; SimLibMinorFrameTime
?SimLibMinorFrameRate@@3MA DD 042480000r	; 50	; SimLibMinorFrameRate
?SimLibMajorFrameTime@@3MA DD 03d75c28fr	; 0.06	; SimLibMajorFrameTime
?SimLibMajorFrameRate@@3MA DD 041855604r	; 16.667 ; SimLibMajorFrameRate
?SimLibMinorPerMajor@@3HA DD 03H			; SimLibMinorPerMajor
_DATA	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	??0SimlibFileClass@@QAE@XZ			; SimlibFileClass::SimlibFileClass
PUBLIC	?Open@SimlibFileClass@@SAPAV1@PADH@Z		; SimlibFileClass::Open
PUBLIC	?ReadLine@SimlibFileClass@@QAEHPADH@Z		; SimlibFileClass::ReadLine
PUBLIC	?WriteLine@SimlibFileClass@@QAEHPAD@Z		; SimlibFileClass::WriteLine
PUBLIC	?Read@SimlibFileClass@@QAEHPAXI@Z		; SimlibFileClass::Read
PUBLIC	?Write@SimlibFileClass@@QAEHPAXH@Z		; SimlibFileClass::Write
PUBLIC	?GetNext@SimlibFileClass@@QAEPADXZ		; SimlibFileClass::GetNext
PUBLIC	?Close@SimlibFileClass@@QAEHXZ			; SimlibFileClass::Close
PUBLIC	?Position@SimlibFileClass@@QAEHHH@Z		; SimlibFileClass::Position
PUBLIC	?SwapCRLF@@YAXPAD@Z				; SwapCRLF
PUBLIC	??_C@_03CLJFOBPF@r?$CL?$AA?$AA@			; `string'
PUBLIC	??_C@_03GJDJBJIE@a?$CL?$AA?$AA@			; `string'
PUBLIC	??_C@_02FHMLJKND@r?$AA?$AA@			; `string'
PUBLIC	??_C@_03BMELBBMH@w?$CL?$AA?$AA@			; `string'
PUBLIC	??_C@_02FBAAFIDI@w?$AA?$AA@			; `string'
PUBLIC	??_C@_02ELONDJKD@b?$AA?$AA@			; `string'
PUBLIC	??_C@_02FDEGOGGB@t?$AA?$AA@			; `string'
PUBLIC	??_C@_0BD@NIAKIDGN@Unable?5to?5open?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_feof:PROC
EXTRN	_fgets:PROC
EXTRN	_fprintf:PROC
EXTRN	_fscanf:PROC
EXTRN	_fwrite:PROC
EXTRN	__errno:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strchr:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?F4FindFile@@YAPADQADPADHPAH2@Z:PROC		; F4FindFile
EXTRN	_ResFOpen:PROC
EXTRN	_ResFClose:PROC
EXTRN	_ResFRead:PROC
EXTRN	_ResFSeek:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibErrno@@3HA:DWORD				; SimLibErrno
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA
_BSS	SEGMENT
?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA DB 0a0H DUP (?) ; `SimlibFileClass::GetNext'::`2'::aline
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NIAKIDGN@Unable?5to?5open?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BD@NIAKIDGN@Unable?5to?5open?5?$CFs?6?$AA@ DB 'Unable to open %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDEGOGGB@t?$AA?$AA@
CONST	SEGMENT
??_C@_02FDEGOGGB@t?$AA?$AA@ DB 't', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ELONDJKD@b?$AA?$AA@
CONST	SEGMENT
??_C@_02ELONDJKD@b?$AA?$AA@ DB 'b', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FBAAFIDI@w?$AA?$AA@
CONST	SEGMENT
??_C@_02FBAAFIDI@w?$AA?$AA@ DB 'w', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BMELBBMH@w?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_03BMELBBMH@w?$CL?$AA?$AA@ DB 'w+', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FHMLJKND@r?$AA?$AA@
CONST	SEGMENT
??_C@_02FHMLJKND@r?$AA?$AA@ DB 'r', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJDJBJIE@a?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_03GJDJBJIE@a?$CL?$AA?$AA@ DB 'a+', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CLJFOBPF@r?$CL?$AA?$AA@
CONST	SEGMENT
??_C@_03CLJFOBPF@r?$CL?$AA?$AA@ DB 'r+', 00H, 00H	; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?Open@SimlibFileClass@@SAPAV1@PADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open@SimlibFileClass@@SAPAV1@PADH@Z$0
__ehfuncinfo$?Open@SimlibFileClass@@SAPAV1@PADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Open@SimlibFileClass@@SAPAV1@PADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_len$ = -8						; size = 4
_i$ = -4						; size = 4
_buf$ = 8						; size = 4
?SwapCRLF@@YAXPAD@Z PROC				; SwapCRLF

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 489  : int len = strlen (buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 490  : int i;
; 491  : 
; 492  :    for (i=0; i<len; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SwapCRLF
$LN3@SwapCRLF:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@SwapCRLF:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	SHORT $LN5@SwapCRLF

; 493  :    {
; 494  :       if (buf[i] == '\r')

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN1@SwapCRLF

; 495  :       {
; 496  :          memmove (buf + i, buf + i + 1, len - i - 1);

	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 497  :          buf[len-1] = 0;

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx-1], 0
$LN1@SwapCRLF:

; 498  :       }
; 499  :    }

	jmp	SHORT $LN3@SwapCRLF
$LN5@SwapCRLF:

; 500  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SwapCRLF@@YAXPAD@Z ENDP				; SwapCRLF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_retval$ = -4						; size = 4
_offset$ = 8						; size = 4
_origin$ = 12						; size = 4
?Position@SimlibFileClass@@QAEHHH@Z PROC		; SimlibFileClass::Position
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 478  : int retval = SIMLIB_ERR;

	mov	DWORD PTR _retval$[ebp], -1

; 479  : 
; 480  :    F4Assert (fptr);
; 481  :    if (fseek (fptr, offset, origin) == 0)

	mov	eax, DWORD PTR _origin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_ResFSeek
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@Position

; 482  :       retval = SIMLIB_OK;

	mov	DWORD PTR _retval$[ebp], 0
$LN1@Position:

; 483  : 
; 484  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 485  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Position@SimlibFileClass@@QAEHHH@Z ENDP		; SimlibFileClass::Position
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?Close@SimlibFileClass@@QAEHXZ PROC			; SimlibFileClass::Close
; _this$ = ecx

; 436  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 437  : SIM_INT retval = SIMLIB_ERR;

	mov	DWORD PTR _retval$[ebp], -1

; 438  : 
; 439  :    F4Assert (fptr);
; 440  :    if (ResFClose (fptr) == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ResFClose
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@Close

; 441  :    {
; 442  :    #ifdef _DEBUG
; 443  :    fnumOpen --;
; 444  :    #endif
; 445  :       fptr = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 446  :       rights = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  :       lastOp = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], -1

; 448  :       retval = SIMLIB_OK;

	mov	DWORD PTR _retval$[ebp], 0

; 449  :    }
; 450  :    else

	jmp	SHORT $LN1@Close
$LN2@Close:

; 451  :       SimLibErrno = EACCESS;

	mov	DWORD PTR ?SimLibErrno@@3HA, 2		; SimLibErrno
$LN1@Close:

; 452  : 
; 453  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Close@SimlibFileClass@@QAEHXZ ENDP			; SimlibFileClass::Close
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_is_comment$ = -8					; size = 4
_this$ = -4						; size = 4
?GetNext@SimlibFileClass@@QAEPADXZ PROC			; SimlibFileClass::GetNext
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN7@GetNext:

; 393  : 	static char aline[160];
; 394  : 	int is_comment;
; 395  : 
; 396  : 	// Can we read
; 397  : 	F4Assert (fptr);
; 398  : 	F4Assert (rights & SIMLIB_READ);
; 399  : 	do {
; 400  : 		fscanf (fptr, "%s", aline);

	push	OFFSET ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_fscanf
	add	esp, 12					; 0000000cH

; 401  : 		SwapCRLF (aline);

	push	OFFSET ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA
	call	?SwapCRLF@@YAXPAD@Z			; SwapCRLF
	add	esp, 4

; 402  : 		if (aline[0] == ';' || aline[0] == '#'){

	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA[edx]
	cmp	eax, 59					; 0000003bH
	je	SHORT $LN3@GetNext
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA[ecx]
	cmp	edx, 35					; 00000023H
	jne	SHORT $LN4@GetNext
$LN3@GetNext:

; 403  : 			if (fgets (aline, 160, fptr) == NULL){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	160					; 000000a0H
	push	OFFSET ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA
	call	_fgets
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@GetNext

; 404  : 				break;

	jmp	SHORT $LN5@GetNext
$LN2@GetNext:

; 405  : 			}
; 406  : 			is_comment = TRUE;

	mov	DWORD PTR _is_comment$[ebp], 1

; 407  : 		}
; 408  : 		else {

	jmp	SHORT $LN6@GetNext
$LN4@GetNext:

; 409  : 			is_comment = FALSE;

	mov	DWORD PTR _is_comment$[ebp], 0
$LN6@GetNext:

; 410  : 		}
; 411  : 	} while (is_comment);

	cmp	DWORD PTR _is_comment$[ebp], 0
	jne	$LN7@GetNext
$LN5@GetNext:

; 412  : 
; 413  : 	return (aline);

	mov	eax, OFFSET ?aline@?1??GetNext@SimlibFileClass@@QAEPADXZ@4PADA

; 414  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNext@SimlibFileClass@@QAEPADXZ ENDP			; SimlibFileClass::GetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_max_len$ = 12						; size = 4
?Write@SimlibFileClass@@QAEHPAXH@Z PROC			; SimlibFileClass::Write
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 357  : SIM_INT retval = SIMLIB_ERR;

	mov	DWORD PTR _retval$[ebp], -1

; 358  : 
; 359  :    F4Assert (fptr);
; 360  :    F4Assert (rights & SIMLIB_WRITE);
; 361  :    if (fwrite (buffer, 1, max_len, fptr) < (unsigned int)max_len)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _max_len$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _max_len$[ebp]
	jae	SHORT $LN2@Write

; 362  :       SimLibErrno = EOUTPUT;

	mov	DWORD PTR ?SimLibErrno@@3HA, 5		; SimLibErrno

; 363  :    else

	jmp	SHORT $LN1@Write
$LN2@Write:

; 364  :    {
; 365  :       retval = SIMLIB_OK;

	mov	DWORD PTR _retval$[ebp], 0

; 366  :       lastOp = SIMLIB_WRITE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 8
$LN1@Write:

; 367  :    }
; 368  : 
; 369  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 370  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Write@SimlibFileClass@@QAEHPAXH@Z ENDP			; SimlibFileClass::Write
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_max_len$ = 12						; size = 4
?Read@SimlibFileClass@@QAEHPAXI@Z PROC			; SimlibFileClass::Read
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 320  : int retval = SIMLIB_ERR;

	mov	DWORD PTR _retval$[ebp], -1

; 321  : 
; 322  :    F4Assert (fptr);
; 323  :    F4Assert (rights & SIMLIB_READ);
; 324  :    if (fread (buffer, 1, max_len, fptr) < max_len)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _max_len$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_ResFRead
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _max_len$[ebp]
	jae	SHORT $LN2@Read

; 325  :       SimLibErrno = EEOF;

	mov	DWORD PTR ?SimLibErrno@@3HA, 4		; SimLibErrno

; 326  :    else

	jmp	SHORT $LN1@Read
$LN2@Read:

; 327  :    {
; 328  :       retval = SIMLIB_OK;

	mov	DWORD PTR _retval$[ebp], 0

; 329  :       lastOp = SIMLIB_READ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN1@Read:

; 330  :    }
; 331  : 
; 332  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 333  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Read@SimlibFileClass@@QAEHPAXI@Z ENDP			; SimlibFileClass::Read
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
?WriteLine@SimlibFileClass@@QAEHPAD@Z PROC		; SimlibFileClass::WriteLine
; _this$ = ecx

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 282  : SIM_INT retval = SIMLIB_ERR;

	mov	DWORD PTR _retval$[ebp], -1

; 283  : 
; 284  :    // Can we write
; 285  :    F4Assert (fptr);
; 286  :    F4Assert (rights & SIMLIB_WRITE);
; 287  :    if (fprintf (fptr, "%s\n", buf) < 0)

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN2@WriteLine

; 288  :       SimLibErrno = EOUTPUT;

	mov	DWORD PTR ?SimLibErrno@@3HA, 5		; SimLibErrno

; 289  :    else

	jmp	SHORT $LN1@WriteLine
$LN2@WriteLine:

; 290  :    {
; 291  :       retval = SIMLIB_OK;

	mov	DWORD PTR _retval$[ebp], 0

; 292  :       lastOp = SIMLIB_WRITE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 8
$LN1@WriteLine:

; 293  :    }
; 294  : 
; 295  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?WriteLine@SimlibFileClass@@QAEHPAD@Z ENDP		; SimlibFileClass::WriteLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_cp$ = -12						; size = 4
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_max_len$ = 12						; size = 4
?ReadLine@SimlibFileClass@@QAEHPADH@Z PROC		; SimlibFileClass::ReadLine
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 222  : int retval = SIMLIB_ERR;

	mov	DWORD PTR _retval$[ebp], -1
$LN8@ReadLine:

; 223  : 
; 224  :    F4Assert (fptr);
; 225  :    F4Assert (rights & SIMLIB_READ);
; 226  : 
; 227  :    char *cp;
; 228  :    // Skip Comments
; 229  :    while ((cp = fgets(buf, max_len, fptr)) != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _max_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_fgets
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cp$[ebp], eax
	cmp	DWORD PTR _cp$[ebp], 0
	je	SHORT $LN7@ReadLine

; 230  :    {
; 231  : //RESMANAGER KLUDGE
; 232  :       SwapCRLF (buf); 

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?SwapCRLF@@YAXPAD@Z			; SwapCRLF
	add	esp, 4

; 233  : //            if (buf[0] != ';' && buf[0] != '\r')
; 234  :       if (buf[0] != ';' && buf[0] != '\n')

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _buf$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 59					; 0000003bH
	je	SHORT $LN6@ReadLine
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _buf$[ebp]
	movsx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN6@ReadLine

; 235  :          break;

	jmp	SHORT $LN7@ReadLine
$LN6@ReadLine:

; 236  :    }

	jmp	SHORT $LN8@ReadLine
$LN7@ReadLine:

; 237  :    if (cp == NULL) {

	cmp	DWORD PTR _cp$[ebp], 0
	jne	SHORT $LN5@ReadLine

; 238  :        SimLibErrno = EEOF;

	mov	DWORD PTR ?SimLibErrno@@3HA, 4		; SimLibErrno

; 239  :        return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	jmp	$LN9@ReadLine
$LN5@ReadLine:

; 240  :    }
; 241  : 
; 242  : //RESMANAGER KLUDGE
; 243  :    if(strchr (buf, '\r'))

	push	13					; 0000000dH
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@ReadLine

; 244  :       *(strchr (buf, '\r')) = 0;

	push	13					; 0000000dH
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	BYTE PTR [eax], 0
$LN4@ReadLine:

; 245  : 
; 246  :    // Strip the trailing new-line
; 247  :    if (!feof (fptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_feof
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@ReadLine

; 248  :    {
; 249  :       if (buf[strlen(buf)-1] == '\n')

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _buf$[ebp]
	movsx	edx, BYTE PTR [ecx+eax-1]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN2@ReadLine

; 250  :          buf[strlen(buf)-1] = 0;

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	BYTE PTR [ecx+eax-1], 0
$LN2@ReadLine:

; 251  : 
; 252  :       retval = SIMLIB_OK;

	mov	DWORD PTR _retval$[ebp], 0

; 253  :       lastOp = SIMLIB_READ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 4

; 254  :    }
; 255  :    else

	jmp	SHORT $LN1@ReadLine
$LN3@ReadLine:

; 256  :       SimLibErrno = EEOF;

	mov	DWORD PTR ?SimLibErrno@@3HA, 4		; SimLibErrno
$LN1@ReadLine:

; 257  : 
; 258  :    return (retval);

	mov	eax, DWORD PTR _retval$[ebp]
$LN9@ReadLine:

; 259  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReadLine@SimlibFileClass@@QAEHPADH@Z ENDP		; SimlibFileClass::ReadLine
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_len$ = -308						; size = 4
_offset$ = -304						; size = 4
$T2 = -300						; size = 4
$T3 = -296						; size = 4
tv147 = -292						; size = 4
$T4 = -288						; size = 4
_fHandle$ = -284					; size = 4
_access$ = -280						; size = 4
_fileName$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fName$ = 8						; size = 4
_flags$ = 12						; size = 4
?Open@SimlibFileClass@@SAPAV1@PADH@Z PROC		; SimlibFileClass::Open

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@SimlibFileClass@@SAPAV1@PADH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 296				; 00000128H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 125  : SimlibFileClass* fHandle;
; 126  : char access[4] = {0};

	mov	BYTE PTR _access$[ebp], 0
	xor	eax, eax
	mov	WORD PTR _access$[ebp+1], ax
	mov	BYTE PTR _access$[ebp+3], al

; 127  : char fileName[_MAX_PATH];
; 128  : int offset, len;
; 129  : 
; 130  :    // What do we want to do with the file ?
; 131  :    if (flags & SIMLIB_UPDATE)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	je	SHORT $LN19@Open

; 132  :    {
; 133  :       if (flags & SIMLIB_READWRITE)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 0
	je	SHORT $LN18@Open

; 134  :          strcpy (access, "r+\0");

	push	OFFSET ??_C@_03CLJFOBPF@r?$CL?$AA?$AA@
	lea	eax, DWORD PTR _access$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN17@Open
$LN18@Open:

; 135  :       else if (flags & SIMLIB_WRITE)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 8
	je	SHORT $LN17@Open

; 136  :          strcpy (access, "a+\0");

	push	OFFSET ??_C@_03GJDJBJIE@a?$CL?$AA?$AA@
	lea	edx, DWORD PTR _access$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$LN17@Open:

; 137  :    }

	jmp	SHORT $LN15@Open
$LN19@Open:

; 138  :    else if (flags & SIMLIB_READ)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN14@Open

; 139  :    {
; 140  :       strcpy (access, "r\0");

	push	OFFSET ??_C@_02FHMLJKND@r?$AA?$AA@
	lea	ecx, DWORD PTR _access$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN15@Open
$LN14@Open:

; 141  :    }
; 142  :    else if (flags & SIMLIB_READWRITE)

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 0
	je	SHORT $LN12@Open

; 143  :    {
; 144  :       strcpy (access, "w+\0");

	push	OFFSET ??_C@_03BMELBBMH@w?$CL?$AA?$AA@
	lea	eax, DWORD PTR _access$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN15@Open
$LN12@Open:

; 145  :    }
; 146  :    else if (flags & SIMLIB_WRITE)

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 8
	je	SHORT $LN15@Open

; 147  :    {
; 148  :       strcpy (access, "w\0");

	push	OFFSET ??_C@_02FBAAFIDI@w?$AA?$AA@
	lea	edx, DWORD PTR _access$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$LN15@Open:

; 149  :    }
; 150  : 
; 151  :    // Is this a binary file ?
; 152  :    if (flags & SIMLIB_BINARY)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN9@Open

; 153  :       strcat (access, "b\0");

	push	OFFSET ??_C@_02ELONDJKD@b?$AA?$AA@
	lea	ecx, DWORD PTR _access$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 154  :    else

	jmp	SHORT $LN8@Open
$LN9@Open:

; 155  :       strcat (access, "t\0");

	push	OFFSET ??_C@_02FDEGOGGB@t?$AA?$AA@
	lea	edx, DWORD PTR _access$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
$LN8@Open:

; 156  : 
; 157  :    // Find the file in the database
; 158  :    if (flags & SIMLIB_READ)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4
	je	SHORT $LN7@Open

; 159  :    {
; 160  :       if (F4FindFile (fName, fileName, _MAX_PATH, &offset, &len) == NULL)

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _offset$[ebp]
	push	edx
	push	260					; 00000104H
	lea	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fName$[ebp]
	push	ecx
	call	?F4FindFile@@YAPADQADPADHPAH2@Z		; F4FindFile
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN6@Open

; 161  :          strcpy (fileName, fName);

	mov	edx, DWORD PTR _fName$[ebp]
	push	edx
	lea	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN6@Open:

; 162  :    }
; 163  :    else

	jmp	SHORT $LN5@Open
$LN7@Open:

; 164  :       strcpy (fileName, fName);

	mov	ecx, DWORD PTR _fName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fileName$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
$LN5@Open:

; 165  : 
; 166  :    // Try the actual open
; 167  :    fHandle = new SimlibFileClass;

	push	272					; 00000110H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN22@Open
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0SimlibFileClass@@QAE@XZ		; SimlibFileClass::SimlibFileClass
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN23@Open
$LN22@Open:
	mov	DWORD PTR tv147[ebp], 0
$LN23@Open:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _fHandle$[ebp], ecx

; 168  :    fHandle->fptr = ResFOpen (fileName, access);

	lea	edx, DWORD PTR _access$[ebp]
	push	edx
	lea	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	_ResFOpen
	add	esp, 8
	mov	ecx, DWORD PTR _fHandle$[ebp]
	mov	DWORD PTR [ecx], eax

; 169  : 
; 170  :    // Did it open ?
; 171  :    if (fHandle->fptr == NULL)

	mov	edx, DWORD PTR _fHandle$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN4@Open

; 172  :    {
; 173  :       delete fHandle;

	mov	eax, DWORD PTR _fHandle$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 174  :       fHandle = NULL;

	mov	DWORD PTR _fHandle$[ebp], 0

; 175  :       if (errno == ENOENT)

	call	__errno
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN3@Open

; 176  :          SimLibErrno = ENOTFOUND;

	mov	DWORD PTR ?SimLibErrno@@3HA, 3		; SimLibErrno

; 177  :       else

	jmp	SHORT $LN2@Open
$LN3@Open:

; 178  :          SimLibErrno = EACCESS;

	mov	DWORD PTR ?SimLibErrno@@3HA, 2		; SimLibErrno
$LN2@Open:

; 179  : 
; 180  :       MonoPrint ("Unable to open %s\n", fName);

	mov	edx, DWORD PTR _fName$[ebp]
	push	edx
	push	OFFSET ??_C@_0BD@NIAKIDGN@Unable?5to?5open?5?$CFs?6?$AA@
	call	_MonoPrint
	add	esp, 8

; 181  :    }
; 182  :    else

	jmp	SHORT $LN1@Open
$LN4@Open:

; 183  :    {
; 184  :       #ifdef _DEBUG
; 185  :       fnumOpen ++;
; 186  :       #endif
; 187  : 
; 188  :       // Set the file data for this handle
; 189  :       fHandle->rights = flags;

	mov	eax, DWORD PTR _fHandle$[ebp]
	mov	ecx, DWORD PTR _flags$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 190  :       fHandle->lastOp = -1;

	mov	edx, DWORD PTR _fHandle$[ebp]
	mov	DWORD PTR [edx+8], -1

; 191  : 
; 192  :       // Fully qualified pathname for resources
; 193  :       strcpy (fHandle->fName, fileName);

	lea	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fHandle$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	_strcpy
	add	esp, 8
$LN1@Open:

; 194  :    }
; 195  : 
; 196  :    // Return the handle or SIMLIB_ERR
; 197  :    return (fHandle);

	mov	eax, DWORD PTR _fHandle$[ebp]

; 198  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open@SimlibFileClass@@SAPAV1@PADH@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Open@SimlibFileClass@@SAPAV1@PADH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@SimlibFileClass@@SAPAV1@PADH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@SimlibFileClass@@SAPAV1@PADH@Z ENDP		; SimlibFileClass::Open
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\file.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SimlibFileClass@@QAE@XZ PROC				; SimlibFileClass::SimlibFileClass
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   :     fptr = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 97   :     rights = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 98   :     lastOp = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1

; 99   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SimlibFileClass@@QAE@XZ ENDP				; SimlibFileClass::SimlibFileClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 218  : 	{ return (char*)strchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
END
