; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\SIMLIB\Wpnstatn.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0?$VuBin@VSimWeaponClass@@@@QAE@PAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
PUBLIC	??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z	; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
PUBLIC	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ		; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
PUBLIC	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
PUBLIC	?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::reset
PUBLIC	??0BasicWeaponStation@@QAE@XZ			; BasicWeaponStation::BasicWeaponStation
PUBLIC	??1BasicWeaponStation@@UAE@XZ			; BasicWeaponStation::~BasicWeaponStation
PUBLIC	?Cleanup@BasicWeaponStation@@UAEXXZ		; BasicWeaponStation::Cleanup
PUBLIC	?SetPosition@BasicWeaponStation@@UAEXMMM@Z	; BasicWeaponStation::SetPosition
PUBLIC	?SetRotation@BasicWeaponStation@@UAEXMM@Z	; BasicWeaponStation::SetRotation
PUBLIC	?GetPosition@BasicWeaponStation@@UAEXPAM00@Z	; BasicWeaponStation::GetPosition
PUBLIC	?GetRotation@BasicWeaponStation@@UAEXPAM0@Z	; BasicWeaponStation::GetRotation
PUBLIC	?SetSubPosition@BasicWeaponStation@@UAEXHMMM@Z	; BasicWeaponStation::SetSubPosition
PUBLIC	?SetSubRotation@BasicWeaponStation@@UAEXHMM@Z	; BasicWeaponStation::SetSubRotation
PUBLIC	?GetSubPosition@BasicWeaponStation@@UAEXHPAM00@Z ; BasicWeaponStation::GetSubPosition
PUBLIC	?GetSubRotation@BasicWeaponStation@@UAEXHPAM0@Z	; BasicWeaponStation::GetSubRotation
PUBLIC	?SetupPoints@BasicWeaponStation@@UAEXH@Z	; BasicWeaponStation::SetupPoints
PUBLIC	?NumPoints@BasicWeaponStation@@UAEHXZ		; BasicWeaponStation::NumPoints
PUBLIC	?SetSMS@BasicWeaponStation@@UAEXPAVSMSClass@@@Z	; BasicWeaponStation::SetSMS
PUBLIC	?SetParentDrawPtr@BasicWeaponStation@@QAEXPAVDrawableBSP@@@Z ; BasicWeaponStation::SetParentDrawPtr
PUBLIC	?AttachPylonBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::AttachPylonBSP
PUBLIC	?DetachPylonBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ; BasicWeaponStation::DetachPylonBSP
PUBLIC	?DeletePylonBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::DeletePylonBSP
PUBLIC	?AttachRackBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::AttachRackBSP
PUBLIC	?DetachRackBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ; BasicWeaponStation::DetachRackBSP
PUBLIC	?DeleteRackBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::DeleteRackBSP
PUBLIC	?AttachAllWeaponBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::AttachAllWeaponBSP
PUBLIC	?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z ; BasicWeaponStation::AttachWeaponBSP
PUBLIC	?DetachAllWeaponBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::DetachAllWeaponBSP
PUBLIC	?DetachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z ; BasicWeaponStation::DetachWeaponBSP
PUBLIC	?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ ; BasicWeaponStation::DetachFirstWeapon
PUBLIC	?DeleteAllWeaponBSP@BasicWeaponStation@@UAEXXZ	; BasicWeaponStation::DeleteAllWeaponBSP
PUBLIC	?DetermineRackData@BasicWeaponStation@@UAEHHHH@Z ; BasicWeaponStation::DetermineRackData
PUBLIC	?GetRackDataFlags@BasicWeaponStation@@UAEHXZ	; BasicWeaponStation::GetRackDataFlags
PUBLIC	?GetTopDrawable@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ; BasicWeaponStation::GetTopDrawable
PUBLIC	?GetRackOrPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ; BasicWeaponStation::GetRackOrPylon
PUBLIC	?GetRack@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ; BasicWeaponStation::GetRack
PUBLIC	?SetRack@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z ; BasicWeaponStation::SetRack
PUBLIC	?GetPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ; BasicWeaponStation::GetPylon
PUBLIC	?SetPylon@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z ; BasicWeaponStation::SetPylon
PUBLIC	?GetRackId@BasicWeaponStation@@UAEHXZ		; BasicWeaponStation::GetRackId
PUBLIC	?SetRackId@BasicWeaponStation@@UAEXH@Z		; BasicWeaponStation::SetRackId
PUBLIC	?GetPylonId@BasicWeaponStation@@UAEHXZ		; BasicWeaponStation::GetPylonId
PUBLIC	?SetPylonId@BasicWeaponStation@@UAEXH@Z		; BasicWeaponStation::SetPylonId
PUBLIC	?GetWeaponData@BasicWeaponStation@@UAEPAUWeaponData@@XZ ; BasicWeaponStation::GetWeaponData
PUBLIC	?SetWeaponData@BasicWeaponStation@@UAEXUWeaponData@@@Z ; BasicWeaponStation::SetWeaponData
PUBLIC	?GetWeaponType@BasicWeaponStation@@UAE?AW4WeaponType@@XZ ; BasicWeaponStation::GetWeaponType
PUBLIC	?SetWeaponType@BasicWeaponStation@@UAEXW4WeaponType@@@Z ; BasicWeaponStation::SetWeaponType
PUBLIC	?GetWeaponClass@BasicWeaponStation@@UAE?AW4WeaponClass@@XZ ; BasicWeaponStation::GetWeaponClass
PUBLIC	?Domain@BasicWeaponStation@@UAE?AW4WeaponDomain@@XZ ; BasicWeaponStation::Domain
PUBLIC	?SetWeaponClass@BasicWeaponStation@@UAEXW4WeaponClass@@@Z ; BasicWeaponStation::SetWeaponClass
PUBLIC	?GetGun@BasicWeaponStation@@UAEPAVGunClass@@XZ	; BasicWeaponStation::GetGun
PUBLIC	?SetGun@BasicWeaponStation@@UAEXPAVGunClass@@@Z	; BasicWeaponStation::SetGun
PUBLIC	?GetPylonMnemonic@BasicWeaponStation@@UAEPADXZ	; BasicWeaponStation::GetPylonMnemonic
PUBLIC	?GetRackMnemonic@BasicWeaponStation@@UAEPADXZ	; BasicWeaponStation::GetRackMnemonic
PUBLIC	?GetLoadOrder@BasicWeaponStation@@UAEPAHXZ	; BasicWeaponStation::GetLoadOrder
PUBLIC	??_GBasicWeaponStation@@UAEPAXI@Z		; BasicWeaponStation::`scalar deleting destructor'
PUBLIC	??0AdvancedWeaponStation@@QAE@XZ		; AdvancedWeaponStation::AdvancedWeaponStation
PUBLIC	??1AdvancedWeaponStation@@UAE@XZ		; AdvancedWeaponStation::~AdvancedWeaponStation
PUBLIC	?Cleanup@AdvancedWeaponStation@@UAEXXZ		; AdvancedWeaponStation::Cleanup
PUBLIC	?SetParentDrawPtr@AdvancedWeaponStation@@QAEXPAVDrawableBSP@@@Z ; AdvancedWeaponStation::SetParentDrawPtr
PUBLIC	?SetPosition@AdvancedWeaponStation@@UAEXMMM@Z	; AdvancedWeaponStation::SetPosition
PUBLIC	?SetRotation@AdvancedWeaponStation@@UAEXMM@Z	; AdvancedWeaponStation::SetRotation
PUBLIC	?GetPosition@AdvancedWeaponStation@@UAEXPAM00@Z	; AdvancedWeaponStation::GetPosition
PUBLIC	?GetRotation@AdvancedWeaponStation@@UAEXPAM0@Z	; AdvancedWeaponStation::GetRotation
PUBLIC	?SetSubPosition@AdvancedWeaponStation@@UAEXHMMM@Z ; AdvancedWeaponStation::SetSubPosition
PUBLIC	?SetSubRotation@AdvancedWeaponStation@@UAEXHMM@Z ; AdvancedWeaponStation::SetSubRotation
PUBLIC	?GetSubPosition@AdvancedWeaponStation@@UAEXHPAM00@Z ; AdvancedWeaponStation::GetSubPosition
PUBLIC	?GetSubRotation@AdvancedWeaponStation@@UAEXHPAM0@Z ; AdvancedWeaponStation::GetSubRotation
PUBLIC	?SetupPoints@AdvancedWeaponStation@@UAEXH@Z	; AdvancedWeaponStation::SetupPoints
PUBLIC	?NumPoints@AdvancedWeaponStation@@UAEHXZ	; AdvancedWeaponStation::NumPoints
PUBLIC	?SetSMS@AdvancedWeaponStation@@UAEXPAVSMSClass@@@Z ; AdvancedWeaponStation::SetSMS
PUBLIC	?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ	; AdvancedWeaponStation::AttachPylonBSP
PUBLIC	?DetachPylonBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ; AdvancedWeaponStation::DetachPylonBSP
PUBLIC	?DeletePylonBSP@AdvancedWeaponStation@@UAEXXZ	; AdvancedWeaponStation::DeletePylonBSP
PUBLIC	?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ	; AdvancedWeaponStation::AttachRackBSP
PUBLIC	?DetachRackBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ; AdvancedWeaponStation::DetachRackBSP
PUBLIC	?DeleteRackBSP@AdvancedWeaponStation@@UAEXXZ	; AdvancedWeaponStation::DeleteRackBSP
PUBLIC	?AttachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ ; AdvancedWeaponStation::AttachAllWeaponBSP
PUBLIC	?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z ; AdvancedWeaponStation::AttachWeaponBSP
PUBLIC	?DetachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ ; AdvancedWeaponStation::DetachAllWeaponBSP
PUBLIC	?DetachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z ; AdvancedWeaponStation::DetachWeaponBSP
PUBLIC	?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ ; AdvancedWeaponStation::DetachFirstWeapon
PUBLIC	?DeleteAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ ; AdvancedWeaponStation::DeleteAllWeaponBSP
PUBLIC	?DetermineRackData@AdvancedWeaponStation@@UAEHHHH@Z ; AdvancedWeaponStation::DetermineRackData
PUBLIC	?GetRackDataFlags@AdvancedWeaponStation@@UAEHXZ	; AdvancedWeaponStation::GetRackDataFlags
PUBLIC	?GetTopDrawable@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ; AdvancedWeaponStation::GetTopDrawable
PUBLIC	?GetRackOrPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ; AdvancedWeaponStation::GetRackOrPylon
PUBLIC	?GetRack@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ; AdvancedWeaponStation::GetRack
PUBLIC	?SetRack@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z ; AdvancedWeaponStation::SetRack
PUBLIC	?GetPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ; AdvancedWeaponStation::GetPylon
PUBLIC	?SetPylon@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z ; AdvancedWeaponStation::SetPylon
PUBLIC	?GetRackId@AdvancedWeaponStation@@UAEHXZ	; AdvancedWeaponStation::GetRackId
PUBLIC	?SetRackId@AdvancedWeaponStation@@UAEXH@Z	; AdvancedWeaponStation::SetRackId
PUBLIC	?GetPylonId@AdvancedWeaponStation@@UAEHXZ	; AdvancedWeaponStation::GetPylonId
PUBLIC	?SetPylonId@AdvancedWeaponStation@@UAEXH@Z	; AdvancedWeaponStation::SetPylonId
PUBLIC	?GetWeaponData@AdvancedWeaponStation@@UAEPAUWeaponData@@XZ ; AdvancedWeaponStation::GetWeaponData
PUBLIC	?SetWeaponData@AdvancedWeaponStation@@UAEXUWeaponData@@@Z ; AdvancedWeaponStation::SetWeaponData
PUBLIC	?GetWeaponType@AdvancedWeaponStation@@UAE?AW4WeaponType@@XZ ; AdvancedWeaponStation::GetWeaponType
PUBLIC	?SetWeaponType@AdvancedWeaponStation@@UAEXW4WeaponType@@@Z ; AdvancedWeaponStation::SetWeaponType
PUBLIC	?GetWeaponClass@AdvancedWeaponStation@@UAE?AW4WeaponClass@@XZ ; AdvancedWeaponStation::GetWeaponClass
PUBLIC	?Domain@AdvancedWeaponStation@@UAE?AW4WeaponDomain@@XZ ; AdvancedWeaponStation::Domain
PUBLIC	?SetWeaponClass@AdvancedWeaponStation@@UAEXW4WeaponClass@@@Z ; AdvancedWeaponStation::SetWeaponClass
PUBLIC	?GetGun@AdvancedWeaponStation@@UAEPAVGunClass@@XZ ; AdvancedWeaponStation::GetGun
PUBLIC	?SetGun@AdvancedWeaponStation@@UAEXPAVGunClass@@@Z ; AdvancedWeaponStation::SetGun
PUBLIC	?GetPylonMnemonic@AdvancedWeaponStation@@UAEPADXZ ; AdvancedWeaponStation::GetPylonMnemonic
PUBLIC	?GetRackMnemonic@AdvancedWeaponStation@@UAEPADXZ ; AdvancedWeaponStation::GetRackMnemonic
PUBLIC	?GetLoadOrder@AdvancedWeaponStation@@UAEPAHXZ	; AdvancedWeaponStation::GetLoadOrder
PUBLIC	??_GAdvancedWeaponStation@@UAEPAXI@Z		; AdvancedWeaponStation::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetType@SimBaseClass@@QBEEXZ			; SimBaseClass::GetType
PUBLIC	?Scale@OTWDriverClass@@QAEMXZ			; OTWDriverClass::Scale
PUBLIC	?IsActive@OTWDriverClass@@QAEHXZ		; OTWDriverClass::IsActive
PUBLIC	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ	; SimWeaponClass::GetNextOnRail
PUBLIC	?SetRackSlot@SimWeaponClass@@QAEXH@Z		; SimWeaponClass::SetRackSlot
PUBLIC	?GetRackSlot@SimWeaponClass@@QAEHXZ		; SimWeaponClass::GetRackSlot
PUBLIC	?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z	; DrawableObject::SetPosition
PUBLIC	?SetTextureSet@DrawableBSP@@QAEXK@Z		; DrawableBSP::SetTextureSet
PUBLIC	?GetTextureSet@DrawableBSP@@QAEKXZ		; DrawableBSP::GetTextureSet
PUBLIC	?Ownship@SMSBaseClass@@QAEPAVSimVehicleClass@@XZ ; SMSBaseClass::Ownship
PUBLIC	??0RDRackData@@QAE@XZ				; RDRackData::RDRackData
PUBLIC	??$?9VSimWeaponClass@@@@YA_NPBXABV?$VuBin@VSimWeaponClass@@@@@Z ; operator!=<SimWeaponClass>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7BasicWeaponStation@@6B@			; BasicWeaponStation::`vftable'
PUBLIC	??_7AdvancedWeaponStation@@6B@			; AdvancedWeaponStation::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CI@EMEOBLHA@MPS?5Rack?5HP?3?$CFd?5?9?5PylonId?3?$CFd?5?5Rac@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4BasicWeaponStation@@6B@			; BasicWeaponStation::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBasicWeaponStation@@@8			; BasicWeaponStation `RTTI Type Descriptor'
PUBLIC	??_R3BasicWeaponStation@@8			; BasicWeaponStation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BasicWeaponStation@@8			; BasicWeaponStation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BasicWeaponStation@@8		; BasicWeaponStation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AdvancedWeaponStation@@6B@			; AdvancedWeaponStation::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAdvancedWeaponStation@@@8		; AdvancedWeaponStation `RTTI Type Descriptor'
PUBLIC	??_R3AdvancedWeaponStation@@8			; AdvancedWeaponStation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AdvancedWeaponStation@@8			; AdvancedWeaponStation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AdvancedWeaponStation@@8		; AdvancedWeaponStation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_EBasicWeaponStation@@UAEPAXI@Z:PROC		; BasicWeaponStation::`vector deleting destructor'
EXTRN	??_EAdvancedWeaponStation@@UAEPAXI@Z:PROC	; AdvancedWeaponStation::`vector deleting destructor'
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@M@Z:PROC ; OTWDriverClass::CreateVisualObject
EXTRN	?FindBestRackIDByPlaneAndWeapon@@YAHHHH@Z:PROC	; FindBestRackIDByPlaneAndWeapon
EXTRN	?GetWeaponId@SimWeaponClass@@QAEFXZ:PROC	; SimWeaponClass::GetWeaponId
EXTRN	?SetTextureSet@ObjectInstance@@QAEXH@Z:PROC	; ObjectInstance::SetTextureSet
EXTRN	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z:PROC ; DrawableBSP::DrawableBSP
EXTRN	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z:PROC	; DrawableBSP::AttachChild
EXTRN	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z:PROC	; DrawableBSP::DetachChild
EXTRN	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z:PROC ; DrawableBSP::GetChildOffset
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	?RDFindBestRack@@YAHHHHPAURDRackData@@@Z:PROC	; RDFindBestRack
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?IMatrix@@3UTrotation@@B:BYTE			; IMatrix
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?WeaponDataTable@@3PAUWeaponClassDataType@@A:DWORD ; WeaponDataTable
EXTRN	?SimWeaponDataTable@@3PAUSimWeaponDataType@@A:DWORD ; SimWeaponDataTable
EXTRN	?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A:DWORD ; Falcon4ClassTable
EXTRN	?RackObjectTable@@3PAURackObject@@A:DWORD	; RackObjectTable
EXTRN	?MaxRackObjects@@3HA:DWORD			; MaxRackObjects
EXTRN	?NumWeaponTypes@@3FA:WORD			; NumWeaponTypes
EXTRN	?g_bBMSRackData@@3_NA:BYTE			; g_bBMSRackData
EXTRN	?g_bNewRackData@@3_NA:BYTE			; g_bNewRackData
EXTRN	?gRackId_Single_Rack@@3FA:WORD			; gRackId_Single_Rack
EXTRN	?gRackId_Triple_Rack@@3FA:WORD			; gRackId_Triple_Rack
EXTRN	?gRackId_Quad_Rack@@3FA:WORD			; gRackId_Quad_Rack
EXTRN	?gRackId_Six_Rack@@3FA:WORD			; gRackId_Six_Rack
EXTRN	?gRackId_Two_Rack@@3FA:WORD			; gRackId_Two_Rack
EXTRN	?gRackId_Single_AA_Rack@@3FA:WORD		; gRackId_Single_AA_Rack
EXTRN	?gRackId_Mav_Rack@@3FA:WORD			; gRackId_Mav_Rack
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AdvancedWeaponStation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AdvancedWeaponStation@@8 DD FLAT:??_R0?AVAdvancedWeaponStation@@@8 ; AdvancedWeaponStation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdvancedWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_R2AdvancedWeaponStation@@8
rdata$r	SEGMENT
??_R2AdvancedWeaponStation@@8 DD FLAT:??_R1A@?0A@EA@AdvancedWeaponStation@@8 ; AdvancedWeaponStation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BasicWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_R3AdvancedWeaponStation@@8
rdata$r	SEGMENT
??_R3AdvancedWeaponStation@@8 DD 00H			; AdvancedWeaponStation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2AdvancedWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAdvancedWeaponStation@@@8
_DATA	SEGMENT
??_R0?AVAdvancedWeaponStation@@@8 DD FLAT:??_7type_info@@6B@ ; AdvancedWeaponStation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAdvancedWeaponStation@@', 00H
_DATA	ENDS
;	COMDAT ??_R4AdvancedWeaponStation@@6B@
rdata$r	SEGMENT
??_R4AdvancedWeaponStation@@6B@ DD 00H			; AdvancedWeaponStation::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAdvancedWeaponStation@@@8
	DD	FLAT:??_R3AdvancedWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BasicWeaponStation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BasicWeaponStation@@8 DD FLAT:??_R0?AVBasicWeaponStation@@@8 ; BasicWeaponStation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BasicWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_R2BasicWeaponStation@@8
rdata$r	SEGMENT
??_R2BasicWeaponStation@@8 DD FLAT:??_R1A@?0A@EA@BasicWeaponStation@@8 ; BasicWeaponStation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3BasicWeaponStation@@8
rdata$r	SEGMENT
??_R3BasicWeaponStation@@8 DD 00H			; BasicWeaponStation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2BasicWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBasicWeaponStation@@@8
_DATA	SEGMENT
??_R0?AVBasicWeaponStation@@@8 DD FLAT:??_7type_info@@6B@ ; BasicWeaponStation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBasicWeaponStation@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BasicWeaponStation@@6B@
rdata$r	SEGMENT
??_R4BasicWeaponStation@@6B@ DD 00H			; BasicWeaponStation::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBasicWeaponStation@@@8
	DD	FLAT:??_R3BasicWeaponStation@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EMEOBLHA@MPS?5Rack?5HP?3?$CFd?5?9?5PylonId?3?$CFd?5?5Rac@
CONST	SEGMENT
??_C@_0CI@EMEOBLHA@MPS?5Rack?5HP?3?$CFd?5?9?5PylonId?3?$CFd?5?5Rac@ DB 'M'
	DB	'PS Rack HP:%d - PylonId:%d  RackId:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7AdvancedWeaponStation@@6B@
CONST	SEGMENT
??_7AdvancedWeaponStation@@6B@ DD FLAT:??_R4AdvancedWeaponStation@@6B@ ; AdvancedWeaponStation::`vftable'
	DD	FLAT:??_EAdvancedWeaponStation@@UAEPAXI@Z
	DD	FLAT:?Cleanup@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?SetPosition@AdvancedWeaponStation@@UAEXMMM@Z
	DD	FLAT:?SetRotation@AdvancedWeaponStation@@UAEXMM@Z
	DD	FLAT:?GetPosition@AdvancedWeaponStation@@UAEXPAM00@Z
	DD	FLAT:?GetRotation@AdvancedWeaponStation@@UAEXPAM0@Z
	DD	FLAT:?SetSubPosition@AdvancedWeaponStation@@UAEXHMMM@Z
	DD	FLAT:?SetSubRotation@AdvancedWeaponStation@@UAEXHMM@Z
	DD	FLAT:?GetSubPosition@AdvancedWeaponStation@@UAEXHPAM00@Z
	DD	FLAT:?GetSubRotation@AdvancedWeaponStation@@UAEXHPAM0@Z
	DD	FLAT:?SetupPoints@AdvancedWeaponStation@@UAEXH@Z
	DD	FLAT:?NumPoints@AdvancedWeaponStation@@UAEHXZ
	DD	FLAT:?SetSMS@AdvancedWeaponStation@@UAEXPAVSMSClass@@@Z
	DD	FLAT:?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?DetachPylonBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?DeletePylonBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?DetachRackBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?DeleteRackBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?AttachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	DD	FLAT:?DetachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?DetachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	DD	FLAT:?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	DD	FLAT:?DeleteAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ
	DD	FLAT:?DetermineRackData@AdvancedWeaponStation@@UAEHHHH@Z
	DD	FLAT:?GetRackDataFlags@AdvancedWeaponStation@@UAEHXZ
	DD	FLAT:?GetTopDrawable@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?GetRackOrPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?GetRack@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?SetRack@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z
	DD	FLAT:?GetPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?SetPylon@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z
	DD	FLAT:?GetRackId@AdvancedWeaponStation@@UAEHXZ
	DD	FLAT:?SetRackId@AdvancedWeaponStation@@UAEXH@Z
	DD	FLAT:?GetPylonId@AdvancedWeaponStation@@UAEHXZ
	DD	FLAT:?SetPylonId@AdvancedWeaponStation@@UAEXH@Z
	DD	FLAT:?GetWeaponData@AdvancedWeaponStation@@UAEPAUWeaponData@@XZ
	DD	FLAT:?SetWeaponData@AdvancedWeaponStation@@UAEXUWeaponData@@@Z
	DD	FLAT:?GetWeaponType@AdvancedWeaponStation@@UAE?AW4WeaponType@@XZ
	DD	FLAT:?SetWeaponType@AdvancedWeaponStation@@UAEXW4WeaponType@@@Z
	DD	FLAT:?GetWeaponClass@AdvancedWeaponStation@@UAE?AW4WeaponClass@@XZ
	DD	FLAT:?Domain@AdvancedWeaponStation@@UAE?AW4WeaponDomain@@XZ
	DD	FLAT:?SetWeaponClass@AdvancedWeaponStation@@UAEXW4WeaponClass@@@Z
	DD	FLAT:?GetGun@AdvancedWeaponStation@@UAEPAVGunClass@@XZ
	DD	FLAT:?SetGun@AdvancedWeaponStation@@UAEXPAVGunClass@@@Z
	DD	FLAT:?GetPylonMnemonic@AdvancedWeaponStation@@UAEPADXZ
	DD	FLAT:?GetRackMnemonic@AdvancedWeaponStation@@UAEPADXZ
	DD	FLAT:?GetLoadOrder@AdvancedWeaponStation@@UAEPAHXZ
CONST	ENDS
;	COMDAT ??_7BasicWeaponStation@@6B@
CONST	SEGMENT
??_7BasicWeaponStation@@6B@ DD FLAT:??_R4BasicWeaponStation@@6B@ ; BasicWeaponStation::`vftable'
	DD	FLAT:??_EBasicWeaponStation@@UAEPAXI@Z
	DD	FLAT:?Cleanup@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?SetPosition@BasicWeaponStation@@UAEXMMM@Z
	DD	FLAT:?SetRotation@BasicWeaponStation@@UAEXMM@Z
	DD	FLAT:?GetPosition@BasicWeaponStation@@UAEXPAM00@Z
	DD	FLAT:?GetRotation@BasicWeaponStation@@UAEXPAM0@Z
	DD	FLAT:?SetSubPosition@BasicWeaponStation@@UAEXHMMM@Z
	DD	FLAT:?SetSubRotation@BasicWeaponStation@@UAEXHMM@Z
	DD	FLAT:?GetSubPosition@BasicWeaponStation@@UAEXHPAM00@Z
	DD	FLAT:?GetSubRotation@BasicWeaponStation@@UAEXHPAM0@Z
	DD	FLAT:?SetupPoints@BasicWeaponStation@@UAEXH@Z
	DD	FLAT:?NumPoints@BasicWeaponStation@@UAEHXZ
	DD	FLAT:?SetSMS@BasicWeaponStation@@UAEXPAVSMSClass@@@Z
	DD	FLAT:?AttachPylonBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?DetachPylonBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?DeletePylonBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?AttachRackBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?DetachRackBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?DeleteRackBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?AttachAllWeaponBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	DD	FLAT:?DetachAllWeaponBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?DetachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	DD	FLAT:?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	DD	FLAT:?DeleteAllWeaponBSP@BasicWeaponStation@@UAEXXZ
	DD	FLAT:?DetermineRackData@BasicWeaponStation@@UAEHHHH@Z
	DD	FLAT:?GetRackDataFlags@BasicWeaponStation@@UAEHXZ
	DD	FLAT:?GetTopDrawable@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?GetRackOrPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?GetRack@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?SetRack@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z
	DD	FLAT:?GetPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
	DD	FLAT:?SetPylon@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z
	DD	FLAT:?GetRackId@BasicWeaponStation@@UAEHXZ
	DD	FLAT:?SetRackId@BasicWeaponStation@@UAEXH@Z
	DD	FLAT:?GetPylonId@BasicWeaponStation@@UAEHXZ
	DD	FLAT:?SetPylonId@BasicWeaponStation@@UAEXH@Z
	DD	FLAT:?GetWeaponData@BasicWeaponStation@@UAEPAUWeaponData@@XZ
	DD	FLAT:?SetWeaponData@BasicWeaponStation@@UAEXUWeaponData@@@Z
	DD	FLAT:?GetWeaponType@BasicWeaponStation@@UAE?AW4WeaponType@@XZ
	DD	FLAT:?SetWeaponType@BasicWeaponStation@@UAEXW4WeaponType@@@Z
	DD	FLAT:?GetWeaponClass@BasicWeaponStation@@UAE?AW4WeaponClass@@XZ
	DD	FLAT:?Domain@BasicWeaponStation@@UAE?AW4WeaponDomain@@XZ
	DD	FLAT:?SetWeaponClass@BasicWeaponStation@@UAEXW4WeaponClass@@@Z
	DD	FLAT:?GetGun@BasicWeaponStation@@UAEPAVGunClass@@XZ
	DD	FLAT:?SetGun@BasicWeaponStation@@UAEXPAVGunClass@@@Z
	DD	FLAT:?GetPylonMnemonic@BasicWeaponStation@@UAEPADXZ
	DD	FLAT:?GetRackMnemonic@BasicWeaponStation@@UAEPADXZ
	DD	FLAT:?GetLoadOrder@BasicWeaponStation@@UAEPAHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z$0
__unwindtable$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ$0
__unwindtable$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ$0
__unwindtable$??1AdvancedWeaponStation@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1AdvancedWeaponStation@@UAE@XZ$0
__unwindtable$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z$0
__unwindtable$??0BasicWeaponStation@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0BasicWeaponStation@@QAE@XZ$0
__unwindtable$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$0
__unwindtable$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$0
__ehfuncinfo$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1AdvancedWeaponStation@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1AdvancedWeaponStation@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0BasicWeaponStation@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0BasicWeaponStation@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??$?9VSimWeaponClass@@@@YA_NPBXABV?$VuBin@VSimWeaponClass@@@@@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_le$ = 8						; size = 4
_re$ = 12						; size = 4
??$?9VSimWeaponClass@@@@YA_NPBXABV?$VuBin@VSimWeaponClass@@@@@Z PROC ; operator!=<SimWeaponClass>, COMDAT

; 74   : template <class E> bool operator!=(const void* le, const VuBin<E> &re){ return ((void*)re.get()) != le; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	ecx, DWORD PTR _re$[ebp]
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	cmp	eax, DWORD PTR _le$[ebp]
	je	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??$?9VSimWeaponClass@@@@YA_NPBXABV?$VuBin@VSimWeaponClass@@@@@Z ENDP ; operator!=<SimWeaponClass>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\rdrackdata.h
;	COMDAT ??0RDRackData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RDRackData@@QAE@XZ PROC				; RDRackData::RDRackData, COMDAT
; _this$ = ecx

; 14   : 	RDRackData() { memset (this, 0, sizeof (*this)); flags = RDF_EMERGENCY_JETT_RACK | RDF_SELECTIVE_JETT_RACK;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 24			; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0RDRackData@@QAE@XZ ENDP				; RDRackData::RDRackData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?Ownship@SMSBaseClass@@QAEPAVSimVehicleClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Ownship@SMSBaseClass@@QAEPAVSimVehicleClass@@XZ PROC	; SMSBaseClass::Ownship, COMDAT
; _this$ = ecx

; 91   : 	SimVehicleClass* Ownship(void) {return ownship;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?Ownship@SMSBaseClass@@QAEPAVSimVehicleClass@@XZ ENDP	; SMSBaseClass::Ownship
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?GetTextureSet@DrawableBSP@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTextureSet@DrawableBSP@@QAEKXZ PROC			; DrawableBSP::GetTextureSet, COMDAT
; _this$ = ecx

; 60   : 	UInt32	GetTextureSet( void)	{ return instance.TextureSet; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+100]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextureSet@DrawableBSP@@QAEKXZ ENDP			; DrawableBSP::GetTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?SetTextureSet@DrawableBSP@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_set$ = 8						; size = 4
?SetTextureSet@DrawableBSP@@QAEXK@Z PROC		; DrawableBSP::SetTextureSet, COMDAT
; _this$ = ecx

; 49   : 	void SetTextureSet( UInt32 set )	{ instance.SetTextureSet( set ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?SetTextureSet@ObjectInstance@@QAEXH@Z	; ObjectInstance::SetTextureSet
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextureSet@DrawableBSP@@QAEXK@Z ENDP		; DrawableBSP::SetTextureSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z PROC	; DrawableObject::SetPosition, COMDAT
; _this$ = ecx

; 82   : 	  void SetPosition(Tpoint *pos) {position=*pos;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ENDP	; DrawableObject::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?GetRackSlot@SimWeaponClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackSlot@SimWeaponClass@@QAEHXZ PROC		; SimWeaponClass::GetRackSlot, COMDAT
; _this$ = ecx

; 43   : 	int GetRackSlot (void) { return rackSlot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+676]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackSlot@SimWeaponClass@@QAEHXZ ENDP		; SimWeaponClass::GetRackSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?SetRackSlot@SimWeaponClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_slot$ = 8						; size = 4
?SetRackSlot@SimWeaponClass@@QAEXH@Z PROC		; SimWeaponClass::SetRackSlot, COMDAT
; _this$ = ecx

; 42   : 	void SetRackSlot (int slot) { rackSlot = slot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _slot$[ebp]
	mov	DWORD PTR [eax+676], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRackSlot@SimWeaponClass@@QAEXH@Z ENDP		; SimWeaponClass::SetRackSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simweapn.h
;	COMDAT ?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ PROC		; SimWeaponClass::GetNextOnRail, COMDAT
; _this$ = ecx

; 41   : 	SimWeaponClass* GetNextOnRail(void) { return nextOnRail.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 672				; 000002a0H
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ENDP		; SimWeaponClass::GetNextOnRail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?IsActive@OTWDriverClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsActive@OTWDriverClass@@QAEHXZ PROC			; OTWDriverClass::IsActive, COMDAT
; _this$ = ecx

; 349  :       int IsActive (void) {return isActive;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32152]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsActive@OTWDriverClass@@QAEHXZ ENDP			; OTWDriverClass::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?Scale@OTWDriverClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Scale@OTWDriverClass@@QAEMXZ PROC			; OTWDriverClass::Scale, COMDAT
; _this$ = ecx

; 342  :       float Scale (void) { return objectScale;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32124]
	mov	esp, ebp
	pop	ebp
	ret	0
?Scale@OTWDriverClass@@QAEMXZ ENDP			; OTWDriverClass::Scale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetType@SimBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@SimBaseClass@@QBEEXZ PROC			; SimBaseClass::GetType, COMDAT
; _this$ = ecx

; 161  : 	uchar GetType() const					{	return (EntityType())->classInfo_[VU_TYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 1
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@SimBaseClass@@QBEEXZ ENDP			; SimBaseClass::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GAdvancedWeaponStation@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAdvancedWeaponStation@@UAEPAXI@Z PROC		; AdvancedWeaponStation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AdvancedWeaponStation@@UAE@XZ	; AdvancedWeaponStation::~AdvancedWeaponStation
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAdvancedWeaponStation@@UAEPAXI@Z ENDP		; AdvancedWeaponStation::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetLoadOrder@AdvancedWeaponStation@@UAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLoadOrder@AdvancedWeaponStation@@UAEPAHXZ PROC	; AdvancedWeaponStation::GetLoadOrder, COMDAT
; _this$ = ecx

; 236  : 		virtual int *GetLoadOrder(void)										{return loadOrder;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLoadOrder@AdvancedWeaponStation@@UAEPAHXZ ENDP	; AdvancedWeaponStation::GetLoadOrder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackMnemonic@AdvancedWeaponStation@@UAEPADXZ PROC	; AdvancedWeaponStation::GetRackMnemonic
; _this$ = ecx

; 960  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 961  : 	return rackmnemonic;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+88]

; 962  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackMnemonic@AdvancedWeaponStation@@UAEPADXZ ENDP	; AdvancedWeaponStation::GetRackMnemonic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPylonMnemonic@AdvancedWeaponStation@@UAEPADXZ PROC	; AdvancedWeaponStation::GetPylonMnemonic
; _this$ = ecx

; 965  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 	return pylonmnemonic;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]

; 967  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPylonMnemonic@AdvancedWeaponStation@@UAEPADXZ ENDP	; AdvancedWeaponStation::GetPylonMnemonic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetGun@AdvancedWeaponStation@@UAEXPAVGunClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_gun$ = 8						; size = 4
?SetGun@AdvancedWeaponStation@@UAEXPAVGunClass@@@Z PROC	; AdvancedWeaponStation::SetGun, COMDAT
; _this$ = ecx

; 231  : 		virtual void SetGun (GunClass* gun)									{ aGun = gun; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _gun$[ebp]
	mov	DWORD PTR [eax+92], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGun@AdvancedWeaponStation@@UAEXPAVGunClass@@@Z ENDP	; AdvancedWeaponStation::SetGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetGun@AdvancedWeaponStation@@UAEPAVGunClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGun@AdvancedWeaponStation@@UAEPAVGunClass@@XZ PROC	; AdvancedWeaponStation::GetGun, COMDAT
; _this$ = ecx

; 230  : 		virtual GunClass* GetGun (void)										{ return aGun; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGun@AdvancedWeaponStation@@UAEPAVGunClass@@XZ ENDP	; AdvancedWeaponStation::GetGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetWeaponClass@AdvancedWeaponStation@@UAEXW4WeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wc$ = 8						; size = 4
?SetWeaponClass@AdvancedWeaponStation@@UAEXW4WeaponClass@@@Z PROC ; AdvancedWeaponStation::SetWeaponClass, COMDAT
; _this$ = ecx

; 229  : 		virtual void SetWeaponClass (WeaponClass wc)						{ weaponData.weaponClass = wc; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _wc$[ebp]
	mov	DWORD PTR [eax+132], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWeaponClass@AdvancedWeaponStation@@UAEXW4WeaponClass@@@Z ENDP ; AdvancedWeaponStation::SetWeaponClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?Domain@AdvancedWeaponStation@@UAE?AW4WeaponDomain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Domain@AdvancedWeaponStation@@UAE?AW4WeaponDomain@@XZ PROC ; AdvancedWeaponStation::Domain, COMDAT
; _this$ = ecx

; 228  : 		virtual WeaponDomain Domain (void)							      { return weaponData.domain; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+136]
	mov	esp, ebp
	pop	ebp
	ret	0
?Domain@AdvancedWeaponStation@@UAE?AW4WeaponDomain@@XZ ENDP ; AdvancedWeaponStation::Domain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetWeaponClass@AdvancedWeaponStation@@UAE?AW4WeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponClass@AdvancedWeaponStation@@UAE?AW4WeaponClass@@XZ PROC ; AdvancedWeaponStation::GetWeaponClass, COMDAT
; _this$ = ecx

; 227  : 		virtual WeaponClass GetWeaponClass (void)							{ return weaponData.weaponClass; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+132]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponClass@AdvancedWeaponStation@@UAE?AW4WeaponClass@@XZ ENDP ; AdvancedWeaponStation::GetWeaponClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetWeaponType@AdvancedWeaponStation@@UAEXW4WeaponType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wt$ = 8						; size = 4
?SetWeaponType@AdvancedWeaponStation@@UAEXW4WeaponType@@@Z PROC ; AdvancedWeaponStation::SetWeaponType, COMDAT
; _this$ = ecx

; 226  : 		virtual void SetWeaponType (WeaponType wt)							{ weaponType = wt; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _wt$[ebp]
	mov	DWORD PTR [eax+140], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWeaponType@AdvancedWeaponStation@@UAEXW4WeaponType@@@Z ENDP ; AdvancedWeaponStation::SetWeaponType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetWeaponType@AdvancedWeaponStation@@UAE?AW4WeaponType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponType@AdvancedWeaponStation@@UAE?AW4WeaponType@@XZ PROC ; AdvancedWeaponStation::GetWeaponType, COMDAT
; _this$ = ecx

; 225  : 		virtual WeaponType GetWeaponType (void)								{ return weaponType; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+140]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponType@AdvancedWeaponStation@@UAE?AW4WeaponType@@XZ ENDP ; AdvancedWeaponStation::GetWeaponType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetWeaponData@AdvancedWeaponStation@@UAEXUWeaponData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_wd$ = 8						; size = 44
?SetWeaponData@AdvancedWeaponStation@@UAEXUWeaponData@@@Z PROC ; AdvancedWeaponStation::SetWeaponData, COMDAT
; _this$ = ecx

; 224  : 		virtual void SetWeaponData (WeaponData wd)							{ weaponData = wd; };

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 11					; 0000000bH
	lea	esi, DWORD PTR _wd$[ebp]
	rep movsd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
?SetWeaponData@AdvancedWeaponStation@@UAEXUWeaponData@@@Z ENDP ; AdvancedWeaponStation::SetWeaponData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetWeaponData@AdvancedWeaponStation@@UAEPAUWeaponData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponData@AdvancedWeaponStation@@UAEPAUWeaponData@@XZ PROC ; AdvancedWeaponStation::GetWeaponData, COMDAT
; _this$ = ecx

; 223  : 		virtual WeaponData* GetWeaponData (void)							{ return &weaponData; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponData@AdvancedWeaponStation@@UAEPAUWeaponData@@XZ ENDP ; AdvancedWeaponStation::GetWeaponData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetPylonId@AdvancedWeaponStation@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetPylonId@AdvancedWeaponStation@@UAEXH@Z PROC		; AdvancedWeaponStation::SetPylonId, COMDAT
; _this$ = ecx

; 221  : 		virtual void SetPylonId (int id)										{ pylonId = id; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+80], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPylonId@AdvancedWeaponStation@@UAEXH@Z ENDP		; AdvancedWeaponStation::SetPylonId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPylonId@AdvancedWeaponStation@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPylonId@AdvancedWeaponStation@@UAEHXZ PROC		; AdvancedWeaponStation::GetPylonId, COMDAT
; _this$ = ecx

; 220  : 		virtual int GetPylonId (void)										{ return pylonId; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+80]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPylonId@AdvancedWeaponStation@@UAEHXZ ENDP		; AdvancedWeaponStation::GetPylonId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetRackId@AdvancedWeaponStation@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?SetRackId@AdvancedWeaponStation@@UAEXH@Z PROC		; AdvancedWeaponStation::SetRackId, COMDAT
; _this$ = ecx

; 219  : 		virtual void SetRackId (int id)										{ rackId = id; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRackId@AdvancedWeaponStation@@UAEXH@Z ENDP		; AdvancedWeaponStation::SetRackId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRackId@AdvancedWeaponStation@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackId@AdvancedWeaponStation@@UAEHXZ PROC		; AdvancedWeaponStation::GetRackId, COMDAT
; _this$ = ecx

; 218  : 		virtual int GetRackId (void)										{ return rackId; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackId@AdvancedWeaponStation@@UAEHXZ ENDP		; AdvancedWeaponStation::GetRackId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetPylon@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Pylon$ = 8						; size = 4
?SetPylon@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z PROC ; AdvancedWeaponStation::SetPylon, COMDAT
; _this$ = ecx

; 217  : 		virtual void SetPylon (DrawableBSP* Pylon)							{ thePylon = Pylon; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Pylon$[ebp]
	mov	DWORD PTR [eax+76], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPylon@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z ENDP ; AdvancedWeaponStation::SetPylon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; AdvancedWeaponStation::GetPylon, COMDAT
; _this$ = ecx

; 216  : 		virtual DrawableBSP* GetPylon (void)									{ return thePylon; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; AdvancedWeaponStation::GetPylon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetRack@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rack$ = 8						; size = 4
?SetRack@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z PROC ; AdvancedWeaponStation::SetRack, COMDAT
; _this$ = ecx

; 215  : 		virtual void SetRack (DrawableBSP* rack)							{ theRack = rack; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rack$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRack@AdvancedWeaponStation@@UAEXPAVDrawableBSP@@@Z ENDP ; AdvancedWeaponStation::SetRack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRack@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRack@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; AdvancedWeaponStation::GetRack, COMDAT
; _this$ = ecx

; 214  : 		virtual DrawableBSP* GetRack (void)									{ return theRack; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRack@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; AdvancedWeaponStation::GetRack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackOrPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; AdvancedWeaponStation::GetRackOrPylon
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 	if(theRack)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN2@GetRackOrP

; 162  : 		return theRack;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	jmp	SHORT $LN3@GetRackOrP
$LN2@GetRackOrP:

; 163  : 	if(thePylon)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN1@GetRackOrP

; 164  : 		return thePylon;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	jmp	SHORT $LN3@GetRackOrP
$LN1@GetRackOrP:

; 165  : 	return NULL;

	xor	eax, eax
$LN3@GetRackOrP:

; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackOrPylon@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; AdvancedWeaponStation::GetRackOrPylon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTopDrawable@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; AdvancedWeaponStation::GetTopDrawable
; _this$ = ecx

; 148  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 	if(thePylon)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN3@GetTopDraw

; 150  : 		return thePylon;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+76]
	jmp	SHORT $LN4@GetTopDraw
$LN3@GetTopDraw:

; 151  : 	if(theRack)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN2@GetTopDraw

; 152  : 		return theRack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
	jmp	SHORT $LN4@GetTopDraw
$LN2@GetTopDraw:

; 153  : 	if(weaponPointer && weaponPointer->drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetTopDraw
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@GetTopDraw

; 154  : 		return (DrawableBSP *)weaponPointer->drawPointer;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	eax, DWORD PTR [eax+332]
	jmp	SHORT $LN4@GetTopDraw
$LN1@GetTopDraw:

; 155  : 	return NULL;

	xor	eax, eax
$LN4@GetTopDraw:

; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTopDrawable@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; AdvancedWeaponStation::GetTopDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackDataFlags@AdvancedWeaponStation@@UAEHXZ PROC	; AdvancedWeaponStation::GetRackDataFlags
; _this$ = ecx

; 950  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 951  : 	return rackDataFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]

; 952  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackDataFlags@AdvancedWeaponStation@@UAEHXZ ENDP	; AdvancedWeaponStation::GetRackDataFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_rd$ = -76						; size = 32
_rackid$1 = -44						; size = 4
_wclass$ = -40						; size = 4
_w$2 = -36						; size = 4
_w$3 = -32						; size = 4
_wpnDefinition$ = -28					; size = 4
_classPtr$ = -24					; size = 4
_rackp$4 = -20						; size = 4
_wc$ = -16						; size = 4
_rack$5 = -12						; size = 4
tv204 = -8						; size = 4
_this$ = -4						; size = 4
_HPGroup$ = 8						; size = 4
_WeaponId$ = 12						; size = 4
_WeaponCount$ = 16					; size = 4
?DetermineRackData@AdvancedWeaponStation@@UAEHHHH@Z PROC ; AdvancedWeaponStation::DetermineRackData
; _this$ = ecx

; 812  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 813  : 	RDRackData rd;

	lea	ecx, DWORD PTR _rd$[ebp]
	call	??0RDRackData@@QAE@XZ			; RDRackData::RDRackData

; 814  : 	weaponId=WeaponId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _WeaponId$[ebp]
	mov	WORD PTR [eax+8], cx

; 815  : 	weaponCount=WeaponCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _WeaponCount$[ebp]
	mov	WORD PTR [edx+10], ax

; 816  : 
; 817  : 	rackId=0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0

; 818  : 	pylonId=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+80], 0

; 819  : 
; 820  : 	WeaponClassDataType*	wc;
; 821  : 	Falcon4EntityClassType* classPtr;
; 822  : 	SimWeaponDataType*		wpnDefinition;
; 823  : 
; 824  : 	wc				= &WeaponDataTable[weaponId];

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	imul	ecx, 60					; 0000003cH
	add	ecx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	mov	DWORD PTR _wc$[ebp], ecx

; 825  : 	classPtr		= &(Falcon4ClassTable[wc->Index]);

	mov	edx, DWORD PTR _wc$[ebp]
	movsx	eax, WORD PTR [edx]
	imul	eax, 81					; 00000051H
	add	eax, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	DWORD PTR _classPtr$[ebp], eax

; 826  : 	wpnDefinition	= &SimWeaponDataTable[classPtr->vehicleDataIndex];

	mov	ecx, DWORD PTR _classPtr$[ebp]
	movsx	edx, WORD PTR [ecx+74]
	imul	edx, 52					; 00000034H
	add	edx, DWORD PTR ?SimWeaponDataTable@@3PAUSimWeaponDataType@@A ; SimWeaponDataTable
	mov	DWORD PTR _wpnDefinition$[ebp], edx

; 827  : 
; 828  : 
; 829  : 	SetWeaponClass((WeaponClass)wpnDefinition->weaponClass);

	mov	eax, DWORD PTR _wpnDefinition$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+172]
	call	edx

; 830  : 
; 831  : 	if(g_bBMSRackData){

	movzx	eax, BYTE PTR ?g_bBMSRackData@@3_NA	; g_bBMSRackData
	test	eax, eax
	je	$LN25@DetermineR

; 832  : 		if(RDFindBestRack(HPGroup,weaponId,WeaponCount,&rd)){

	lea	ecx, DWORD PTR _rd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _WeaponCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, WORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _HPGroup$[ebp]
	push	edx
	call	?RDFindBestRack@@YAHHHHPAURDRackData@@@Z ; RDFindBestRack
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN25@DetermineR

; 833  : 			SetupPoints(rd.rackStations);

	mov	eax, DWORD PTR _rd$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 834  : 
; 835  : 			rackDataFlags=rd.flags;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rd$[ebp+20]
	mov	DWORD PTR [ecx+64], edx

; 836  : 			pylonmnemonic = rd.pylonmnemonic;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rd$[ebp]
	mov	DWORD PTR [eax+84], ecx

; 837  : 			rackmnemonic  = rd.rackmnemonic;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rd$[ebp+4]
	mov	DWORD PTR [edx+88], eax

; 838  : 			loadOrder     = rd.loadOrder;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rd$[ebp+28]
	mov	DWORD PTR [ecx+148], edx

; 839  : 
; 840  : 			if(rd.rackCT){

	cmp	DWORD PTR _rd$[ebp+12], 0
	je	SHORT $LN23@DetermineR

; 841  : 				int w = (short)(
; 842  : 					((int)Falcon4ClassTable[rd.rackCT].dataPtr - (int)WeaponDataTable) / sizeof(WeaponClassDataType)
; 843  : 				);

	mov	eax, DWORD PTR _rd$[ebp+12]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [ecx+eax+77]
	sub	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	movsx	edx, ax
	mov	DWORD PTR _w$3[ebp], edx

; 844  : 				SetRackId(w);

	mov	eax, DWORD PTR _w$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
$LN23@DetermineR:

; 845  : 			}
; 846  : 
; 847  : 			if(rd.pylonCT){

	cmp	DWORD PTR _rd$[ebp+8], 0
	je	SHORT $LN22@DetermineR

; 848  : 				int w = (short)(
; 849  : 					((int)Falcon4ClassTable[rd.pylonCT].dataPtr - (int)WeaponDataTable) / sizeof(WeaponClassDataType)
; 850  : 				);

	mov	ecx, DWORD PTR _rd$[ebp+8]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	sub	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	movsx	edx, ax
	mov	DWORD PTR _w$2[ebp], edx

; 851  : 				SetPylonId(w);

	mov	eax, DWORD PTR _w$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	call	eax
$LN22@DetermineR:

; 852  : 			}
; 853  : 
; 854  : 			//MonoPrint("BMS Rack HP:%d - PylonId:%d  RackId:%d\n",hpId, pylonId, rackId);
; 855  : 
; 856  : 			return 1;

	mov	eax, 1
	jmp	$LN26@DetermineR
$LN25@DetermineR:

; 857  : 		}
; 858  : 	}
; 859  : 
; 860  : 	int wclass = SimWeaponDataTable[Falcon4ClassTable[WeaponDataTable[WeaponId].Index].vehicleDataIndex].weaponClass;

	mov	ecx, DWORD PTR _WeaponId$[ebp]
	imul	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	eax, WORD PTR [edx+ecx]
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	movsx	edx, WORD PTR [ecx+eax+74]
	imul	edx, 52					; 00000034H
	mov	eax, DWORD PTR ?SimWeaponDataTable@@3PAUSimWeaponDataType@@A ; SimWeaponDataTable
	mov	ecx, DWORD PTR [eax+edx+36]
	mov	DWORD PTR _wclass$[ebp], ecx

; 861  : 	switch(wclass)

	mov	edx, DWORD PTR _wclass$[ebp]
	mov	DWORD PTR tv204[ebp], edx
	cmp	DWORD PTR tv204[ebp], 0
	je	SHORT $LN19@DetermineR
	cmp	DWORD PTR tv204[ebp], 4
	je	SHORT $LN19@DetermineR
	cmp	DWORD PTR tv204[ebp], 10		; 0000000aH
	je	SHORT $LN19@DetermineR
	jmp	SHORT $LN18@DetermineR
$LN19@DetermineR:

; 862  : 	{
; 863  : 	case wcCamera:
; 864  : 	case wcECM:
; 865  : //		rackDataFlags = RDF_SELECTIVE_JETT_RACK | RDF_SELECTIVE_JETT_WEAPON;
; 866  : //		break;
; 867  : 	case wcAimWpn:
; 868  : 		rackDataFlags = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 869  : 		break;

	jmp	SHORT $LN20@DetermineR
$LN18@DetermineR:

; 870  : 	default:
; 871  : 		rackDataFlags = RDF_EMERGENCY_JETT_RACK | RDF_SELECTIVE_JETT_RACK;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 24			; 00000018H
$LN20@DetermineR:

; 872  : 	}
; 873  : 
; 874  : 	// SP3 data
; 875  : 	if(g_bNewRackData)

	movzx	edx, BYTE PTR ?g_bNewRackData@@3_NA	; g_bNewRackData
	test	edx, edx
	je	$LN17@DetermineR

; 876  : 	{	// JPO new scheme
; 877  : 		int rack = FindBestRackIDByPlaneAndWeapon(HPGroup, WeaponDataTable[weaponId].SimweapIndex, WeaponCount);

	mov	eax, DWORD PTR _WeaponCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, WORD PTR [ecx+8]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx+46]
	push	ecx
	mov	edx, DWORD PTR _HPGroup$[ebp]
	push	edx
	call	?FindBestRackIDByPlaneAndWeapon@@YAHHHH@Z ; FindBestRackIDByPlaneAndWeapon
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rack$5[ebp], eax

; 878  : 		ShiAssert(rack < MaxRackObjects); // -1 means nothing defined currently fallback to old scheme
; 879  : 		if (rack > 0 && rack < MaxRackObjects){

	cmp	DWORD PTR _rack$5[ebp], 0
	jle	SHORT $LN17@DetermineR
	mov	eax, DWORD PTR _rack$5[ebp]
	cmp	eax, DWORD PTR ?MaxRackObjects@@3HA	; MaxRackObjects
	jge	SHORT $LN17@DetermineR

; 880  : 			RackObject *rackp = &RackObjectTable[rack];

	mov	ecx, DWORD PTR _rack$5[ebp]
	mov	edx, DWORD PTR ?RackObjectTable@@3PAURackObject@@A ; RackObjectTable
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _rackp$4[ebp], eax

; 881  : 			SetupPoints(rackp->maxoccupancy);

	mov	ecx, DWORD PTR _rackp$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 882  : 			if ((wc->Flags & WEAP_ALWAYSRACK) == 0){

	mov	ecx, DWORD PTR _wc$[ebp]
	movzx	edx, WORD PTR [ecx+10]
	and	edx, 64					; 00000040H
	jne	SHORT $LN15@DetermineR

; 883  : 				int rackid = (short)(((int)
; 884  : 					Falcon4ClassTable[rackp->ctind].dataPtr - (int)WeaponDataTable) / sizeof(WeaponClassDataType)
; 885  : 				);

	mov	eax, DWORD PTR _rackp$4[ebp]
	mov	ecx, DWORD PTR [eax]
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	eax, DWORD PTR [edx+ecx+77]
	sub	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	movsx	edx, ax
	mov	DWORD PTR _rackid$1[ebp], edx

; 886  : 				SetRackId(rackid);

	mov	eax, DWORD PTR _rackid$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
$LN15@DetermineR:

; 887  : 			}
; 888  : 			//MonoPrint("SP3 Rack HP:%d - PylonId:%d  RackId:%d\n",hpId, pylonId, rackId);
; 889  : 			return 1;

	mov	eax, 1
	jmp	$LN26@DetermineR
$LN17@DetermineR:

; 890  : 		}
; 891  : 	}
; 892  : 
; 893  : 	// fallback
; 894  : 	// Find the proper rack id && max points
; 895  : 
; 896  : 	if (GetWeaponClass() == wcRocketWpn)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	eax, 1
	jne	SHORT $LN14@DetermineR

; 897  : 	{
; 898  : 		// The rack id should have already been set up in SMSBaseClass
; 899  : 		SetupPoints(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	jmp	$LN13@DetermineR
$LN14@DetermineR:

; 900  : 	}
; 901  : 	else if (WeaponCount == 1)

	cmp	DWORD PTR _WeaponCount$[ebp], 1
	jne	SHORT $LN12@DetermineR

; 902  : 	{
; 903  : 		if(GetWeaponClass() == wcAimWpn)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	jne	SHORT $LN11@DetermineR

; 904  : 		{
; 905  : 			SetupPoints(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 906  : 			SetRackId(gRackId_Single_AA_Rack);

	movsx	ecx, WORD PTR ?gRackId_Single_AA_Rack@@3FA ; gRackId_Single_AA_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx

; 907  : 		}
; 908  : 		else

	jmp	SHORT $LN10@DetermineR
$LN11@DetermineR:

; 909  : 		{
; 910  : 			SetupPoints(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 911  : 			SetRackId(gRackId_Single_Rack);

	movsx	ecx, WORD PTR ?gRackId_Single_Rack@@3FA	; gRackId_Single_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx
$LN10@DetermineR:

; 912  : 		}

	jmp	$LN13@DetermineR
$LN12@DetermineR:

; 913  : 	}
; 914  : 	else if (WeaponCount <= 2 && GetWeaponClass() == wcAimWpn)

	cmp	DWORD PTR _WeaponCount$[ebp], 2
	jg	SHORT $LN8@DetermineR
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	jne	SHORT $LN8@DetermineR

; 915  : 	{
; 916  : 		SetupPoints(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 917  : 		SetRackId(gRackId_Two_Rack);

	movsx	ecx, WORD PTR ?gRackId_Two_Rack@@3FA	; gRackId_Two_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx
	jmp	$LN13@DetermineR
$LN8@DetermineR:

; 918  : 	}
; 919  : 	else if (WeaponCount <= 3)

	cmp	DWORD PTR _WeaponCount$[ebp], 3
	jg	SHORT $LN6@DetermineR

; 920  : 	{
; 921  : 		if(GetWeaponClass() == wcAgmWpn)

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	eax, 6
	jne	SHORT $LN5@DetermineR

; 922  : 		{
; 923  : 			SetupPoints(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 924  : 			SetRackId(gRackId_Mav_Rack);

	movsx	ecx, WORD PTR ?gRackId_Mav_Rack@@3FA	; gRackId_Mav_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx

; 925  : 		}
; 926  : 		else

	jmp	SHORT $LN4@DetermineR
$LN5@DetermineR:

; 927  : 		{
; 928  : 			SetupPoints(3);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 929  : 			SetRackId(gRackId_Triple_Rack);

	movsx	ecx, WORD PTR ?gRackId_Triple_Rack@@3FA	; gRackId_Triple_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx
$LN4@DetermineR:

; 930  : 		}

	jmp	SHORT $LN13@DetermineR
$LN6@DetermineR:

; 931  : 	}
; 932  : 	else if (WeaponCount <= 4)

	cmp	DWORD PTR _WeaponCount$[ebp], 4
	jg	SHORT $LN2@DetermineR

; 933  : 	{
; 934  : 		SetupPoints(4);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 935  : 		SetRackId(gRackId_Quad_Rack);

	movsx	ecx, WORD PTR ?gRackId_Quad_Rack@@3FA	; gRackId_Quad_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx

; 936  : 	}
; 937  : 	else

	jmp	SHORT $LN13@DetermineR
$LN2@DetermineR:

; 938  : 	{
; 939  : 		SetupPoints(6);

	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 940  : 		SetRackId(gRackId_Six_Rack);

	movsx	ecx, WORD PTR ?gRackId_Six_Rack@@3FA	; gRackId_Six_Rack
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+136]
	call	edx
$LN13@DetermineR:

; 941  : 	}
; 942  : 
; 943  : 	MonoPrint("MPS Rack HP:%d - PylonId:%d  RackId:%d\n",hpId, pylonId, rackId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0CI@EMEOBLHA@MPS?5Rack?5HP?3?$CFd?5?9?5PylonId?3?$CFd?5?5Rac@
	call	_MonoPrint
	add	esp, 16					; 00000010H

; 944  : 
; 945  : 
; 946  : 	return 1;

	mov	eax, 1
$LN26@DetermineR:

; 947  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DetermineRackData@AdvancedWeaponStation@@UAEHHHH@Z ENDP ; AdvancedWeaponStation::DetermineRackData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv129 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
_weapPtr$ = -4						; size = 4
?DeleteAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::DeleteAllWeaponBSP
; _this$ = ecx

; 689  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 690  : 	SimWeaponClass *weapPtr;
; 691  : 
; 692  : //	if(podPointer)
; 693  : //		weapPtr = podPointer;
; 694  : //	else
; 695  : 		weapPtr = weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weapPtr$[ebp], eax
$LN3@DeleteAllW:

; 696  : 
; 697  : 	while(weapPtr)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN4@DeleteAllW

; 698  : 	{
; 699  : 		if(weapPtr->drawPointer) // basics only load the 1st BSP

	mov	eax, DWORD PTR _weapPtr$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@DeleteAllW

; 700  : 		{
; 701  : 			DetachWeaponBSP(weapPtr);

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 702  : 			delete weapPtr->drawPointer;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN6@DeleteAllW
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN7@DeleteAllW
$LN6@DeleteAllW:
	mov	DWORD PTR tv129[ebp], 0
$LN7@DeleteAllW:

; 703  : 			weapPtr->drawPointer=0;

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	mov	DWORD PTR [ecx+332], 0
$LN1@DeleteAllW:

; 704  : 		}
; 705  : 		weapPtr = weapPtr->GetNextOnRail();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weapPtr$[ebp], eax

; 706  : 	}

	jmp	SHORT $LN3@DeleteAllW
$LN4@DeleteAllW:

; 707  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::DeleteAllWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
_weapptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ PROC ; AdvancedWeaponStation::DetachFirstWeapon
; _this$ = ecx

; 623  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 624  : 	// with the advanced class, we may want to load the next weapons BSP and attach it if
; 625  : 	// there is no rack or pylon?
; 626  : 	VuBin<SimWeaponClass> weapptr = weaponPointer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 627  : 	if(weapptr){

	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DetachFirs

; 628  : 		DetachWeaponBSP(weapptr.get());

	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 629  : 		weaponPointer.reset(weapptr->GetNextOnRail());

	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	ecx, eax
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::reset

; 630  : 		weapptr->nextOnRail.reset();

	push	0
	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	add	eax, 672				; 000002a0H
	mov	ecx, eax
	call	?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::reset
$LN1@DetachFirs:

; 631  : 	}
; 632  : 	return weapptr;

	lea	eax, DWORD PTR _weapptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 633  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$0:
	lea	ecx, DWORD PTR _weapptr$[ebp]
	jmp	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
__unwindfunclet$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@DetachFirs
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
$LN6@DetachFirs:
	ret	0
__ehhandler$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DetachFirstWeapon@AdvancedWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ ENDP ; AdvancedWeaponStation::DetachFirstWeapon
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv362 = -52						; size = 4
tv346 = -48						; size = 4
tv330 = -44						; size = 4
_weapBSP$ = -40						; size = 4
_ownship$1 = -36					; size = 4
_this$ = -32						; size = 4
_p$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_weapPtr$ = 8						; size = 4
?DetachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z PROC ; AdvancedWeaponStation::DetachWeaponBSP
; _this$ = ecx

; 730  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 731  : 	if(!weapPtr)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	jne	SHORT $LN8@DetachWeap

; 732  : 	return;

	jmp	$LN9@DetachWeap
$LN8@DetachWeap:

; 733  : 
; 734  : 	DrawableBSP *weapBSP = (DrawableBSP *)weapPtr->drawPointer;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _weapBSP$[ebp], ecx

; 735  : 
; 736  : 	if(!weapBSP)

	cmp	DWORD PTR _weapBSP$[ebp], 0
	jne	SHORT $LN7@DetachWeap

; 737  : 		return;

	jmp	$LN9@DetachWeap
$LN7@DetachWeap:

; 738  : 
; 739  : 	if(theRack)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN6@DetachWeap

; 740  : 	{
; 741  : 		theRack->DetachChild(weapBSP, weapPtr->GetRackSlot());

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetRackSlot@SimWeaponClass@@QAEHXZ	; SimWeaponClass::GetRackSlot
	push	eax
	mov	eax, DWORD PTR _weapBSP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild

; 742  : 	}
; 743  : 	else

	jmp	SHORT $LN2@DetachWeap
$LN6@DetachWeap:

; 744  : 	{
; 745  : 		if(thePylon)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN4@DetachWeap

; 746  : 		{
; 747  : 			thePylon->DetachChild(weapBSP, 0);

	push	0
	mov	eax, DWORD PTR _weapBSP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild

; 748  : 		}
; 749  : 		else

	jmp	SHORT $LN2@DetachWeap
$LN4@DetachWeap:

; 750  : 		{
; 751  : 			if(theParent)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@DetachWeap

; 752  : 			{
; 753  : 				theParent->DetachChild(weapBSP, hpId - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _weapBSP$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild
$LN2@DetachWeap:

; 754  : 			}
; 755  : 		}
; 756  : 	}
; 757  : 
; 758  : 	// DetachChild won't place the BSP in the correct position when it is detached
; 759  : 	// from thePylon or theRack, because thePylon & theRack  are the children of 
; 760  : 	// another object.
; 761  : 	// DetachChild doesn't work for (great)grandchildren.
; 762  : 
; 763  : 	Tpoint pos = {0,0,0},p = {0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _p$[ebp+8], xmm0

; 764  : /*
; 765  : 	if(thePylon)
; 766  : 	{
; 767  : 		memcpy(&pos,&thePylon->instance.ParentObject->pSlotAndDynamicPositions[0],sizeof(Tpoint));
; 768  : 	}
; 769  : 
; 770  : 	if(theRack)
; 771  : 	{
; 772  : 		memcpy(&p,&theRack->instance.ParentObject->pSlotAndDynamicPositions[weapPtr->GetRackSlot()],sizeof(Tpoint));
; 773  : 		pos.x+=p.x;
; 774  : 		pos.y+=p.y;
; 775  : 		pos.z+=p.z;
; 776  : 	}
; 777  : 
; 778  : 	if(theParent)
; 779  : 	{
; 780  : 		memcpy(&p,&theParent->instance.ParentObject->pSlotAndDynamicPositions[hpId-1],sizeof(Tpoint));
; 781  : 		pos.x+=p.x;
; 782  : 		pos.y+=p.y;
; 783  : 		pos.z+=p.z;
; 784  : */
; 785  : 		if(theSMS) // for UI

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+144], 0
	je	$LN1@DetachWeap

; 786  : 		{
; 787  : 			SimVehicleClass *ownship=theSMS->Ownship();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+144]
	call	?Ownship@SMSBaseClass@@QAEPAVSimVehicleClass@@XZ ; SMSBaseClass::Ownship
	mov	DWORD PTR _ownship$1[ebp], eax

; 788  : 			GetSubPosition(weapPtr->GetRackSlot(), &pos.x, &pos.y, &pos.z);

	lea	eax, DWORD PTR _pos$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetRackSlot@SimWeaponClass@@QAEHXZ	; SimWeaponClass::GetRackSlot
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 789  : 
; 790  : 			//if(ownship)
; 791  : 			{
; 792  : 				p.x = ownship->XPos() + ownship->dmx[0][0]*pos.x + ownship->dmx[1][0]*pos.y + ownship->dmx[2][0]*pos.z;

	mov	ecx, DWORD PTR _ownship$1[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv330[ebp]
	movss	xmm0, DWORD PTR tv330[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _ownship$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _pos$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _ownship$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _pos$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _ownship$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _pos$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _p$[ebp], xmm0

; 793  : 				p.y = ownship->YPos() + ownship->dmx[0][1]*pos.x + ownship->dmx[1][1]*pos.y + ownship->dmx[2][1]*pos.z;

	mov	ecx, DWORD PTR _ownship$1[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv346[ebp]
	movss	xmm0, DWORD PTR tv346[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _ownship$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _pos$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _ownship$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _pos$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _ownship$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _pos$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _p$[ebp+4], xmm0

; 794  : 				p.z = ownship->ZPos() + ownship->dmx[0][2]*pos.x + ownship->dmx[1][2]*pos.y + ownship->dmx[2][2]*pos.z;

	mov	ecx, DWORD PTR _ownship$1[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv362[ebp]
	movss	xmm0, DWORD PTR tv362[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _ownship$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _pos$[ebp]
	addss	xmm0, xmm1
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _ownship$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _pos$[ebp+4]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _ownship$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _pos$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _p$[ebp+8], xmm0
$LN1@DetachWeap:

; 795  : 			}
; 796  : 		}
; 797  : 
; 798  : 		weapBSP->SetPosition(&p);

	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _weapBSP$[ebp]
	call	?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::SetPosition

; 799  : 		weapBSP->orientation = theParent->orientation;

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+16]
	add	esi, 48					; 00000030H
	mov	edi, DWORD PTR _weapBSP$[ebp]
	add	edi, 48					; 00000030H
	mov	ecx, 9
	rep movsd
$LN9@DetachWeap:

; 800  : //	}
; 801  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DetachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z ENDP ; AdvancedWeaponStation::DetachWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_weapPtr$ = -4						; size = 4
?DetachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::DetachAllWeaponBSP
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 653  : 	SimWeaponClass *weapPtr;
; 654  : 
; 655  : //	if(podPointer)
; 656  : //		weapPtr = podPointer;
; 657  : //	else
; 658  : 		weapPtr = weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weapPtr$[ebp], eax
$LN2@DetachAllW:

; 659  : 
; 660  : 	while(weapPtr)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN3@DetachAllW

; 661  : 	{
; 662  : 		DetachWeaponBSP(weapPtr);

	mov	eax, DWORD PTR _weapPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax

; 663  : 		weapPtr = weapPtr->GetNextOnRail();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weapPtr$[ebp], eax

; 664  : 	}

	jmp	SHORT $LN2@DetachAllW
$LN3@DetachAllW:

; 665  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::DetachAllWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 4
tv171 = -100						; size = 4
$T3 = -96						; size = 4
_wid$4 = -92						; size = 2
_weapslot$ = -88					; size = 4
_weapBSP$ = -84						; size = 4
_this$ = -80						; size = 4
_viewRot$5 = -76					; size = 36
_pos$6 = -40						; size = 12
_hpPos$7 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_weapPtr$ = 8						; size = 4
?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z PROC ; AdvancedWeaponStation::AttachWeaponBSP
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 507  : 	int weapslot;
; 508  : 
; 509  : 	if(!weapPtr)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	jne	SHORT $LN12@AttachWeap

; 510  : 		return;

	jmp	$LN13@AttachWeap
$LN12@AttachWeap:

; 511  : 
; 512  : 	weapslot = weapPtr->GetRackSlot();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetRackSlot@SimWeaponClass@@QAEHXZ	; SimWeaponClass::GetRackSlot
	mov	DWORD PTR _weapslot$[ebp], eax

; 513  : 
; 514  : 	if (weapslot >= numPoints)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _weapslot$[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jl	SHORT $LN11@AttachWeap

; 515  : 	{
; 516  : 	    weapslot = numPoints-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	sub	eax, 1
	mov	DWORD PTR _weapslot$[ebp], eax

; 517  : 		weapPtr->SetRackSlot(weapslot);

	mov	ecx, DWORD PTR _weapslot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?SetRackSlot@SimWeaponClass@@QAEXH@Z	; SimWeaponClass::SetRackSlot
$LN11@AttachWeap:

; 518  : 	}
; 519  : 
; 520  : 	/*
; 521  : 	xPos = yPos = zPos = 0;
; 522  : 
; 523  : 	if( theParent )
; 524  : 	{
; 525  : 		theParent->GetChildOffset(hpId-1, &hpPos);
; 526  : 		xPos += hpPos.x;		yPos += hpPos.y;		zPos += hpPos.z;
; 527  : 	}
; 528  : 
; 529  : 	if( thePylon )
; 530  : 	{
; 531  : 		thePylon->GetChildOffset(0, &hpPos);
; 532  : 		xPos += hpPos.x;		yPos += hpPos.y;		zPos += hpPos.z;
; 533  : 	}
; 534  : 
; 535  : 	if( theRack )
; 536  : 	{
; 537  : 		theRack->GetChildOffset(weapslot, &hpPos);
; 538  : 		xPos += hpPos.x;		yPos += hpPos.y;		zPos += hpPos.z;
; 539  : 	}
; 540  : 	*/
; 541  : 
; 542  : 	DrawableBSP *weapBSP = (DrawableBSP *)weapPtr->drawPointer;

	mov	edx, DWORD PTR _weapPtr$[ebp]
	mov	eax, DWORD PTR [edx+332]
	mov	DWORD PTR _weapBSP$[ebp], eax

; 543  : 
; 544  : 	if(!weapBSP){		

	cmp	DWORD PTR _weapBSP$[ebp], 0
	jne	$LN7@AttachWeap

; 545  : 		Tpoint hpPos;
; 546  : 		Trotation viewRot = IMatrix;

	mov	ecx, 9
	mov	esi, OFFSET ?IMatrix@@3UTrotation@@B	; IMatrix
	lea	edi, DWORD PTR _viewRot$5[ebp]
	rep movsd

; 547  : 
; 548  : 		short wid = weapPtr->GetWeaponId();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetWeaponId@SimWeaponClass@@QAEFXZ	; SimWeaponClass::GetWeaponId
	mov	WORD PTR _wid$4[ebp], ax

; 549  : 
; 550  : 		GetSubPosition(weapslot, &hpPos.x, &hpPos.y, &hpPos.z);

	lea	ecx, DWORD PTR _hpPos$7[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _hpPos$7[ebp+4]
	push	edx
	lea	eax, DWORD PTR _hpPos$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _weapslot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 551  : 
; 552  : 		if (OTWDriver.IsActive()){

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?IsActive@OTWDriverClass@@QAEHXZ	; OTWDriverClass::IsActive
	test	eax, eax
	je	SHORT $LN9@AttachWeap

; 553  : 			OTWDriver.CreateVisualObject(weapPtr);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _weapPtr$[ebp]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@M@Z ; OTWDriverClass::CreateVisualObject

; 554  : 			weapBSP = (DrawableBSP *)weapPtr->drawPointer;

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR _weapBSP$[ebp], edx

; 555  : 		}
; 556  : 		else {

	jmp	$LN8@AttachWeap
$LN9@AttachWeap:

; 557  : 			weapBSP = new DrawableBSP (
; 558  : 				Falcon4ClassTable[WeaponDataTable[wid].Index].visType[0], 
; 559  : 			    &hpPos, &viewRot, OTWDriver.Scale()
; 560  : 			);

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN15@AttachWeap
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _viewRot$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _hpPos$7[ebp]
	push	ecx
	movsx	edx, WORD PTR _wid$4[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 2
	imul	edx, 0
	movsx	eax, WORD PTR [ecx+edx+60]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN16@AttachWeap
$LN15@AttachWeap:
	mov	DWORD PTR tv171[ebp], 0
$LN16@AttachWeap:
	mov	ecx, DWORD PTR tv171[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _weapBSP$[ebp], edx

; 561  : 			weapPtr->drawPointer = (DrawableObject *)weapBSP;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR _weapBSP$[ebp]
	mov	DWORD PTR [eax+332], ecx
$LN8@AttachWeap:

; 562  : 		}
; 563  : 		if(weapPtr->GetType() == TYPE_LAUNCHER){

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	edx, al
	cmp	edx, 5
	jne	SHORT $LN7@AttachWeap

; 564  : 			weapBSP->SetSwitchMask(0,1);

	push	1
	push	0
	mov	ecx, DWORD PTR _weapBSP$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN7@AttachWeap:

; 565  : 		}
; 566  : 	}
; 567  : 
; 568  : 
; 569  : 	if(weapBSP)

	cmp	DWORD PTR _weapBSP$[ebp], 0
	je	$LN1@AttachWeap

; 570  : 	{
; 571  : 		// RV - Biker - switch texture set for weapons
; 572  : 		//if (theParent) {
; 573  : 		//	int t = theParent->GetTextureSet();
; 574  : 		//	int nt = weapBSP->GetNTextureSet()-1;
; 575  : 		//	weapBSP->SetTextureSet(max(min(t, nt), 0));
; 576  : 		//}
; 577  : 
; 578  : 		//if(theSMS)
; 579  : 		//	theSMS->AddStore(hpId, weaponId, 1);
; 580  : 		Tpoint pos;
; 581  : 
; 582  : 		pos.x=xPos;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _pos$6[ebp], xmm0

; 583  : 		pos.y=yPos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _pos$6[ebp+4], xmm0

; 584  : 		pos.z=zPos;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR _pos$6[ebp+8], xmm0

; 585  : 
; 586  : 		weapBSP->SetPosition(&pos);

	lea	eax, DWORD PTR _pos$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _weapBSP$[ebp]
	call	?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::SetPosition

; 587  : 
; 588  : 		if(theRack)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN5@AttachWeap

; 589  : 		{
; 590  : 			theRack->AttachChild(weapBSP, weapslot);

	mov	edx, DWORD PTR _weapslot$[ebp]
	push	edx
	mov	eax, DWORD PTR _weapBSP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild

; 591  : 		}
; 592  : 		else

	jmp	SHORT $LN1@AttachWeap
$LN5@AttachWeap:

; 593  : 		{
; 594  : 			if(thePylon)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN3@AttachWeap

; 595  : 			{
; 596  : 				thePylon->AttachChild(weapBSP, 0);

	push	0
	mov	eax, DWORD PTR _weapBSP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild

; 597  : 			}
; 598  : 			else

	jmp	SHORT $LN1@AttachWeap
$LN3@AttachWeap:

; 599  : 			{
; 600  : 				if(theParent)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@AttachWeap

; 601  : 				{
; 602  : 					theParent->AttachChild(weapBSP, hpId - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _weapBSP$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild
$LN1@AttachWeap:
$LN13@AttachWeap:

; 603  : 				}
; 604  : 			}
; 605  : 		}
; 606  : 	}
; 607  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttachWeaponBSP@AdvancedWeaponStation@@UAEXPAVSimWeaponClass@@@Z ENDP ; AdvancedWeaponStation::AttachWeaponBSP
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_weapPtr$ = -4						; size = 4
?AttachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::AttachAllWeaponBSP
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 449  : 	SimWeaponClass *weapPtr;
; 450  : 
; 451  : //	if(podPointer)
; 452  : //		weapPtr = podPointer;
; 453  : //	else
; 454  : 		weapPtr = weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weapPtr$[ebp], eax
$LN2@AttachAllW:

; 455  : 
; 456  : 	while(weapPtr){

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN3@AttachAllW

; 457  : 		AttachWeaponBSP(weapPtr);

	mov	eax, DWORD PTR _weapPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 458  : 		weapPtr = weapPtr->GetNextOnRail();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weapPtr$[ebp], eax

; 459  : 	}

	jmp	SHORT $LN2@AttachAllW
$LN3@AttachAllW:

; 460  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AttachAllWeaponBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::AttachAllWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv83 = -20						; size = 4
$T1 = -16						; size = 4
_rack$ = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -4						; size = 4
?DeleteRackBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::DeleteRackBSP
; _this$ = ecx

; 350  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 351  : 	DrawableBSP *rack;
; 352  : 	if(rack=DetachRackBSP())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	mov	DWORD PTR _rack$[ebp], eax
	cmp	DWORD PTR _rack$[ebp], 0
	je	SHORT $LN2@DeleteRack

; 353  : 	{
; 354  : 		delete rack;

	mov	ecx, DWORD PTR _rack$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@DeleteRack
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN2@DeleteRack
$LN4@DeleteRack:
	mov	DWORD PTR tv83[ebp], 0
$LN2@DeleteRack:

; 355  : 	}
; 356  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteRackBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::DeleteRackBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv389 = -52						; size = 4
_bsp$ = -48						; size = 4
tv357 = -44						; size = 4
tv373 = -40						; size = 4
_ownship$1 = -36					; size = 4
_this$ = -32						; size = 4
_p$ = -28						; size = 12
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DetachRackBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; AdvancedWeaponStation::DetachRackBSP
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 361  : 	if(!theRack)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN8@DetachRack

; 362  : 		return NULL;

	xor	eax, eax
	jmp	$LN9@DetachRack
$LN8@DetachRack:

; 363  : 
; 364  : 	if(thePylon)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN7@DetachRack

; 365  : 	{
; 366  : 		thePylon->DetachChild(theRack, 0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild

; 367  : 	}
; 368  : 	else

	jmp	SHORT $LN5@DetachRack
$LN7@DetachRack:

; 369  : 	{
; 370  : 		if(theParent)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@DetachRack

; 371  : 		{
; 372  : 			theParent->DetachChild(theRack, hpId - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild
$LN5@DetachRack:

; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : 	// DetachChild won't place the BSP in the correct position when it is detached
; 377  : 	// from thePylon, because thePylon is a child of another object - DetachChild
; 378  : 	// doesn't work for grandchildren.
; 379  : 
; 380  : 	Tpoint pos = {0,0,0},p = {0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _p$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _p$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _p$[ebp+8], xmm0

; 381  : 
; 382  : 	if(thePylon)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN4@DetachRack

; 383  : 	{
; 384  : 		memcpy(&pos,&thePylon->instance.ParentObject->pSlotAndDynamicPositions[0],sizeof(Tpoint));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	add	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@DetachRack:

; 385  : 	}
; 386  : 
; 387  : 	if(theParent)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	$LN3@DetachRack

; 388  : 	{
; 389  : 		memcpy(&p,&theParent->instance.ParentObject->pSlotAndDynamicPositions[hpId-1],sizeof(Tpoint));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR [edx+40]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 390  : 		pos.x+=p.x;

	movss	xmm0, DWORD PTR _pos$[ebp]
	addss	xmm0, DWORD PTR _p$[ebp]
	movss	DWORD PTR _pos$[ebp], xmm0

; 391  : 		pos.y+=p.y;

	movss	xmm0, DWORD PTR _pos$[ebp+4]
	addss	xmm0, DWORD PTR _p$[ebp+4]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 392  : 		pos.z+=p.z;

	movss	xmm0, DWORD PTR _pos$[ebp+8]
	addss	xmm0, DWORD PTR _p$[ebp+8]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 393  : 
; 394  : 		if(theSMS) // may be called from UI

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	$LN1@DetachRack

; 395  : 		{
; 396  : 			SimVehicleClass *ownship=theSMS->Ownship();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?Ownship@SMSBaseClass@@QAEPAVSimVehicleClass@@XZ ; SMSBaseClass::Ownship
	mov	DWORD PTR _ownship$1[ebp], eax

; 397  : 			if(ownship)

	cmp	DWORD PTR _ownship$1[ebp], 0
	je	$LN1@DetachRack

; 398  : 			{
; 399  : 				p.x = ownship->XPos() + ownship->dmx[0][0]*pos.x + ownship->dmx[1][0]*pos.y + ownship->dmx[2][0]*pos.z;

	mov	ecx, DWORD PTR _ownship$1[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv357[ebp]
	movss	xmm0, DWORD PTR tv357[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _ownship$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _pos$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _ownship$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _pos$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _ownship$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _pos$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _p$[ebp], xmm0

; 400  : 				p.y = ownship->YPos() + ownship->dmx[0][1]*pos.x + ownship->dmx[1][1]*pos.y + ownship->dmx[2][1]*pos.z;

	mov	ecx, DWORD PTR _ownship$1[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _ownship$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _pos$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _ownship$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _pos$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _ownship$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _pos$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _p$[ebp+4], xmm0

; 401  : 				p.z = ownship->ZPos() + ownship->dmx[0][2]*pos.x + ownship->dmx[1][2]*pos.y + ownship->dmx[2][2]*pos.z;

	mov	ecx, DWORD PTR _ownship$1[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv389[ebp]
	movss	xmm0, DWORD PTR tv389[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _ownship$1[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _pos$[ebp]
	addss	xmm0, xmm1
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _ownship$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _pos$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _ownship$1[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _pos$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _p$[ebp+8], xmm0
$LN1@DetachRack:

; 402  : 			}
; 403  : 		}
; 404  : 
; 405  : 		theRack->SetPosition(&p);

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	call	?SetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::SetPosition

; 406  : 		theRack->orientation = theParent->orientation;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+16]
	add	esi, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx+68]
	add	edi, 48					; 00000030H
	mov	ecx, 9
	rep movsd
$LN3@DetachRack:

; 407  : 	}
; 408  : 
; 409  : 
; 410  : 
; 411  : 	//rackmnemonic = 0; // clears from SMS page
; 412  : 
; 413  : 	DrawableBSP *bsp = theRack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _bsp$[ebp], ecx

; 414  : 	theRack = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], 0

; 415  : 	return bsp;

	mov	eax, DWORD PTR _bsp$[ebp]
$LN9@DetachRack:

; 416  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DetachRackBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; AdvancedWeaponStation::DetachRackBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 4
$T3 = -80						; size = 4
tv189 = -76						; size = 4
_l$4 = -72						; size = 4
_this$ = -68						; size = 4
_viewRot$ = -64						; size = 36
_hpPos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::AttachRackBSP
; _this$ = ecx

; 242  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 	Tpoint hpPos = {0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$[ebp+8], xmm0

; 244  : 	Trotation viewRot = IMatrix;

	mov	ecx, 9
	mov	esi, OFFSET ?IMatrix@@3UTrotation@@B	; IMatrix
	lea	edi, DWORD PTR _viewRot$[ebp]
	rep movsd

; 245  : 
; 246  : 	xPos = yPos = zPos = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+24], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+20], xmm0

; 247  : 
; 248  : 	if( theParent )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN11@AttachRack

; 249  : 	{
; 250  : 		theParent->GetChildOffset(hpId - 1, &hpPos);

	lea	ecx, DWORD PTR _hpPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 251  : 		xPos += hpPos.x;		yPos += hpPos.y;		zPos += hpPos.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, DWORD PTR _hpPos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	addss	xmm0, DWORD PTR _hpPos$[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR _hpPos$[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0
$LN11@AttachRack:

; 252  : 	}
; 253  : 
; 254  : 	if( thePylon )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN10@AttachRack

; 255  : 	{
; 256  : 		thePylon->GetChildOffset(0, &hpPos);

	lea	eax, DWORD PTR _hpPos$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+76]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 257  : 		xPos += hpPos.x;		yPos += hpPos.y;		zPos += hpPos.z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+20]
	addss	xmm0, DWORD PTR _hpPos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	addss	xmm0, DWORD PTR _hpPos$[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR _hpPos$[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0
$LN10@AttachRack:

; 258  : 	}
; 259  : 
; 260  : 	if(theParent				&& 
; 261  : 	   !theRack					&&
; 262  : 	   rackId > 0				&& 
; 263  : 	   rackId < NumWeaponTypes	&& 
; 264  : 	   WeaponDataTable[rackId].Index >= 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	$LN5@AttachRack
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	$LN5@AttachRack
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jle	$LN5@AttachRack
	movsx	edx, WORD PTR ?NumWeaponTypes@@3FA	; NumWeaponTypes
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], edx
	jge	$LN5@AttachRack
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jl	$LN5@AttachRack

; 265  : 	{
; 266  : 		theRack = new DrawableBSP (Falcon4ClassTable[WeaponDataTable[rackId].Index].visType[0], 
; 267  : 			                        &hpPos, 
; 268  : 									&viewRot, 
; 269  : 									OTWDriver.Scale());

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN14@AttachRack
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _viewRot$[ebp]
	push	edx
	lea	eax, DWORD PTR _hpPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 2
	imul	edx, 0
	movsx	eax, WORD PTR [ecx+edx+60]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN15@AttachRack
$LN14@AttachRack:
	mov	DWORD PTR tv189[ebp], 0
$LN15@AttachRack:
	mov	ecx, DWORD PTR tv189[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+68], eax

; 270  : 
; 271  : 		
; 272  : 		if(theRack)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	$LN5@AttachRack

; 273  : 		{
; 274  : 			for(int l = 0; l < numPoints; l++)

	mov	DWORD PTR _l$4[ebp], 0
	jmp	SHORT $LN7@AttachRack
$LN6@AttachRack:
	mov	edx, DWORD PTR _l$4[ebp]
	add	edx, 1
	mov	DWORD PTR _l$4[ebp], edx
$LN7@AttachRack:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _l$4[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jge	SHORT $LN5@AttachRack

; 275  : 			{
; 276  : 				theRack->GetChildOffset(l, &hpPos);

	lea	edx, DWORD PTR _hpPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _l$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+68]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 277  : 				xSub[l]=hpPos.x + xPos;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _l$4[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0

; 278  : 				ySub[l]=hpPos.y + yPos;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$[ebp+4]
	addss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _l$4[ebp]
	movss	DWORD PTR [edx+eax*4], xmm0

; 279  : 				zSub[l]=hpPos.z + zPos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$[ebp+8]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _l$4[ebp]
	movss	DWORD PTR [eax+ecx*4], xmm0

; 280  : 			}

	jmp	SHORT $LN6@AttachRack
$LN5@AttachRack:

; 281  : 		}
; 282  : 		
; 283  : 	}
; 284  : 
; 285  : 
; 286  : 	if(theRack)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN1@AttachRack

; 287  : 	{
; 288  : 		//Tpoint pos = {xPos,yPos,zPos};
; 289  : 
; 290  : 		//pos.x=xPos;
; 291  : 		//pos.y=yPos;
; 292  : 		//pos.z=zPos;
; 293  : 
; 294  : 		//theRack->SetPosition(&pos);
; 295  : 
; 296  : 		if(thePylon)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	SHORT $LN3@AttachRack

; 297  : 		{
; 298  : 			thePylon->AttachChild(theRack, 0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild

; 299  : 		}
; 300  : 		else

	jmp	SHORT $LN1@AttachRack
$LN3@AttachRack:

; 301  : 		{
; 302  : 			if(theParent)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN1@AttachRack

; 303  : 			{
; 304  : 				theParent->AttachChild(theRack, hpId - 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild
$LN1@AttachRack:

; 305  : 			}
; 306  : 		}
; 307  : 	}
; 308  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttachRackBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::AttachRackBSP
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv83 = -20						; size = 4
$T1 = -16						; size = 4
_pylon$ = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -4						; size = 4
?DeletePylonBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::DeletePylonBSP
; _this$ = ecx

; 312  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 313  : 	DrawableBSP *pylon;
; 314  : 	if(pylon=DetachPylonBSP())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	mov	DWORD PTR _pylon$[ebp], eax
	cmp	DWORD PTR _pylon$[ebp], 0
	je	SHORT $LN2@DeletePylo

; 315  : 	{
; 316  : 		delete pylon;

	mov	ecx, DWORD PTR _pylon$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@DeletePylo
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN2@DeletePylo
$LN4@DeletePylo:
	mov	DWORD PTR tv83[ebp], 0
$LN2@DeletePylo:

; 317  : 	}
; 318  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeletePylonBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::DeletePylonBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_bsp$ = -8						; size = 4
_this$ = -4						; size = 4
?DetachPylonBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; AdvancedWeaponStation::DetachPylonBSP
; _this$ = ecx

; 321  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 	if(!thePylon)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	SHORT $LN2@DetachPylo

; 323  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@DetachPylo
$LN2@DetachPylo:

; 324  : 
; 325  : 	if(theParent && thePylon)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN1@DetachPylo
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN1@DetachPylo

; 326  : 	{
; 327  : 		theParent->DetachChild(thePylon, hpId - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild
$LN1@DetachPylo:

; 328  : 
; 329  : 		/* this is done in DrawableBSP::DetachChild()
; 330  : 		theParent->GetChildOffset(hpId-1,&p);
; 331  : 		pos.x+=p.x;
; 332  : 		pos.y+=p.y;
; 333  : 		pos.z+=p.z;
; 334  : 
; 335  : 		p.x = theParent->XPos() + theParent->dmx[0][0]*pos.x + theParent->dmx[1][0]*pos.y + theParent->dmx[2][0]*pos.z;
; 336  : 		p.y = theParent->YPos() + theParent->dmx[0][1]*pos.x + theParent->dmx[1][1]*pos.y + theParent->dmx[2][1]*pos.z;
; 337  : 		p.z = theParent->ZPos() + theParent->dmx[0][2]*pos.x + theParent->dmx[1][2]*pos.y + theParent->dmx[2][2]*pos.z;
; 338  : 
; 339  : 		thePylon->SetPosition(&p);
; 340  : 		thePylon->orientation = theParent->orientation;
; 341  : 		*/
; 342  : 	}
; 343  : 	//pylonmnemonic = 0; // clears from SMS page
; 344  : 	DrawableBSP *bsp = thePylon;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR _bsp$[ebp], eax

; 345  : 	thePylon = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], 0

; 346  : 	return bsp;

	mov	eax, DWORD PTR _bsp$[ebp]
$LN3@DetachPylo:

; 347  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetachPylonBSP@AdvancedWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; AdvancedWeaponStation::DetachPylonBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T2 = -80						; size = 4
$T3 = -76						; size = 4
tv165 = -72						; size = 4
_this$ = -68						; size = 4
_viewRot$ = -64						; size = 36
_hpPos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ PROC	; AdvancedWeaponStation::AttachPylonBSP
; _this$ = ecx

; 199  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 	Tpoint hpPos = {0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$[ebp+8], xmm0

; 201  : 	Trotation viewRot = IMatrix;

	mov	ecx, 9
	mov	esi, OFFSET ?IMatrix@@3UTrotation@@B	; IMatrix
	lea	edi, DWORD PTR _viewRot$[ebp]
	rep movsd

; 202  : 
; 203  : 	
; 204  : 	if( theParent )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@AttachPylo

; 205  : 	{
; 206  : 		theParent->GetChildOffset(hpId - 1, &hpPos);

	lea	ecx, DWORD PTR _hpPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 207  : 
; 208  : 		xPos = hpPos.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 209  : 		yPos = hpPos.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$[ebp+4]
	movss	DWORD PTR [eax+24], xmm0

; 210  : 		zPos = hpPos.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$[ebp+8]
	movss	DWORD PTR [ecx+28], xmm0
$LN4@AttachPylo:

; 211  : 	}
; 212  : 	
; 213  : 
; 214  : 	if( theParent					&& 
; 215  : 		!thePylon					&& 
; 216  : 		pylonId > 0					&& 
; 217  : 		pylonId < NumWeaponTypes	&& 
; 218  : 		WeaponDataTable[pylonId].Index >= 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	$LN2@AttachPylo
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	jne	$LN2@AttachPylo
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	jle	$LN2@AttachPylo
	movsx	edx, WORD PTR ?NumWeaponTypes@@3FA	; NumWeaponTypes
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], edx
	jge	$LN2@AttachPylo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jl	$LN2@AttachPylo

; 219  : 	{
; 220  : 		thePylon = new DrawableBSP (Falcon4ClassTable[WeaponDataTable[pylonId].Index].visType[0], 
; 221  : 			                        &hpPos, 
; 222  : 									&viewRot, 
; 223  : 									OTWDriver.Scale());

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@AttachPylo
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _viewRot$[ebp]
	push	edx
	lea	eax, DWORD PTR _hpPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 2
	imul	edx, 0
	movsx	eax, WORD PTR [ecx+edx+60]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN8@AttachPylo
$LN7@AttachPylo:
	mov	DWORD PTR tv165[ebp], 0
$LN8@AttachPylo:
	mov	ecx, DWORD PTR tv165[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+76], eax

; 224  : 
; 225  : 
; 226  : 		if( thePylon )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN2@AttachPylo

; 227  : 		{
; 228  : 			thePylon->SetTextureSet(theParent->GetTextureSet());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?GetTextureSet@DrawableBSP@@QAEKXZ	; DrawableBSP::GetTextureSet
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?SetTextureSet@DrawableBSP@@QAEXK@Z	; DrawableBSP::SetTextureSet

; 229  : 			thePylon->GetChildOffset(0, &hpPos);

	lea	ecx, DWORD PTR _hpPos$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 230  : 			xPos += hpPos.x;		yPos += hpPos.y;		zPos += hpPos.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	addss	xmm0, DWORD PTR _hpPos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	addss	xmm0, DWORD PTR _hpPos$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+28]
	addss	xmm0, DWORD PTR _hpPos$[ebp+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0
$LN2@AttachPylo:

; 231  : 		}
; 232  : 
; 233  : 	}
; 234  : 
; 235  : 
; 236  : 	if(theParent && thePylon)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@AttachPylo
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	SHORT $LN1@AttachPylo

; 237  : 	{
; 238  : 		theParent->AttachChild(thePylon,hpId - 1); // for UI compatibility

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild
$LN1@AttachPylo:

; 239  : 	}
; 240  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttachPylonBSP@AdvancedWeaponStation@@UAEXXZ ENDP	; AdvancedWeaponStation::AttachPylonBSP
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Sms$ = 8						; size = 4
?SetSMS@AdvancedWeaponStation@@UAEXPAVSMSClass@@@Z PROC	; AdvancedWeaponStation::SetSMS
; _this$ = ecx

; 169  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 	theSMS=Sms;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Sms$[ebp]
	mov	DWORD PTR [eax+144], ecx

; 171  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSMS@AdvancedWeaponStation@@UAEXPAVSMSClass@@@Z ENDP	; AdvancedWeaponStation::SetSMS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?NumPoints@AdvancedWeaponStation@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumPoints@AdvancedWeaponStation@@UAEHXZ PROC		; AdvancedWeaponStation::NumPoints, COMDAT
; _this$ = ecx

; 188  : 		virtual int NumPoints(void) { return numPoints; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumPoints@AdvancedWeaponStation@@UAEHXZ ENDP		; AdvancedWeaponStation::NumPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
_l$6 = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?SetupPoints@AdvancedWeaponStation@@UAEXH@Z PROC	; AdvancedWeaponStation::SetupPoints
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	numPoints = num;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 116  : 	xPos = yPos = zPos = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+28], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+20], xmm0

; 117  : 
; 118  : 	if (numPoints == 1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 1
	jne	SHORT $LN5@SetupPoint

; 119  : 	{		
; 120  : 		xSub  = &xPos;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 121  : 		ySub  = &yPos;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 122  : 		zSub  = &zPos;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 123  : 		azSub = &az;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 124  : 		elSub = &el;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], edx

; 125  : 		
; 126  : 		az=el=0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+36], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0

; 127  : 	}
; 128  : 	else

	jmp	$LN1@SetupPoint
$LN5@SetupPoint:

; 129  : 	{
; 130  : 		xSub  = new float[numPoints];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+40], ecx

; 131  : 		ySub  = new float[numPoints];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+44], ecx

; 132  : 		zSub  = new float[numPoints];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+48], ecx

; 133  : 		azSub = new float[numPoints];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+52], ecx

; 134  : 		elSub = new float[numPoints];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+56], ecx

; 135  : 		
; 136  : 		int l;
; 137  : 		for(l=0;l<numPoints;l++)

	mov	DWORD PTR _l$6[ebp], 0
	jmp	SHORT $LN3@SetupPoint
$LN2@SetupPoint:
	mov	edx, DWORD PTR _l$6[ebp]
	add	edx, 1
	mov	DWORD PTR _l$6[ebp], edx
$LN3@SetupPoint:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _l$6[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jge	SHORT $LN1@SetupPoint

; 138  : 		{
; 139  : 			azSub[l]=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _l$6[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx*4], xmm0

; 140  : 			elSub[l]=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _l$6[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx*4], xmm0

; 141  : 			xSub[l] = xPos;		ySub[l] = yPos;		zSub[l] = zPos;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _l$6[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _l$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _l$6[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+eax*4], ecx

; 142  : 		}

	jmp	SHORT $LN2@SetupPoint
$LN1@SetupPoint:

; 143  : 	}
; 144  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetupPoints@AdvancedWeaponStation@@UAEXH@Z ENDP	; AdvancedWeaponStation::SetupPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetSubRotation@AdvancedWeaponStation@@UAEXHPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_a$ = 12						; size = 4
_e$ = 16						; size = 4
?GetSubRotation@AdvancedWeaponStation@@UAEXHPAM0@Z PROC	; AdvancedWeaponStation::GetSubRotation, COMDAT
; _this$ = ecx

; 186  : 		virtual void GetSubRotation (int i, float* a, float* e ) { *a = azSub[i]; *e = elSub[i]; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetSubRotation@AdvancedWeaponStation@@UAEXHPAM0@Z ENDP	; AdvancedWeaponStation::GetSubRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetSubPosition@AdvancedWeaponStation@@UAEXHPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?GetSubPosition@AdvancedWeaponStation@@UAEXHPAM00@Z PROC ; AdvancedWeaponStation::GetSubPosition, COMDAT
; _this$ = ecx

; 185  : 		virtual void GetSubPosition (int i, float* x, float* y, float* z){ *x = xSub[i]; *y = ySub[i]; *z = zSub[i];};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetSubPosition@AdvancedWeaponStation@@UAEXHPAM00@Z ENDP ; AdvancedWeaponStation::GetSubPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetSubRotation@AdvancedWeaponStation@@UAEXHMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_a$ = 12						; size = 4
_e$ = 16						; size = 4
?SetSubRotation@AdvancedWeaponStation@@UAEXHMM@Z PROC	; AdvancedWeaponStation::SetSubRotation, COMDAT
; _this$ = ecx

; 184  : 		virtual void SetSubRotation (int i, float a, float e ) { azSub[i] = a; elSub[i] = e; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _e$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSubRotation@AdvancedWeaponStation@@UAEXHMM@Z ENDP	; AdvancedWeaponStation::SetSubRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetSubPosition@AdvancedWeaponStation@@UAEXHMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?SetSubPosition@AdvancedWeaponStation@@UAEXHMMM@Z PROC	; AdvancedWeaponStation::SetSubPosition, COMDAT
; _this$ = ecx

; 183  : 		virtual void SetSubPosition (int i, float x, float y, float z) { xSub[i] = x; ySub[i] = y; zSub[i] = z;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetSubPosition@AdvancedWeaponStation@@UAEXHMMM@Z ENDP	; AdvancedWeaponStation::SetSubPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRotation@AdvancedWeaponStation@@UAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_e$ = 12						; size = 4
?GetRotation@AdvancedWeaponStation@@UAEXPAM0@Z PROC	; AdvancedWeaponStation::GetRotation, COMDAT
; _this$ = ecx

; 182  : 		virtual void GetRotation (float* a, float* e ) { *a = az; *e = el; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetRotation@AdvancedWeaponStation@@UAEXPAM0@Z ENDP	; AdvancedWeaponStation::GetRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPosition@AdvancedWeaponStation@@UAEXPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?GetPosition@AdvancedWeaponStation@@UAEXPAM00@Z PROC	; AdvancedWeaponStation::GetPosition, COMDAT
; _this$ = ecx

; 181  : 		virtual void GetPosition (float* x, float* y, float* z){ *x = xPos; *y = yPos; *z = zPos;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _z$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetPosition@AdvancedWeaponStation@@UAEXPAM00@Z ENDP	; AdvancedWeaponStation::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetRotation@AdvancedWeaponStation@@UAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_e$ = 12						; size = 4
?SetRotation@AdvancedWeaponStation@@UAEXMM@Z PROC	; AdvancedWeaponStation::SetRotation, COMDAT
; _this$ = ecx

; 180  : 		virtual void SetRotation (float a, float e ) { az = a; el = e; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [eax+32], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _e$[ebp]
	movss	DWORD PTR [ecx+36], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRotation@AdvancedWeaponStation@@UAEXMM@Z ENDP	; AdvancedWeaponStation::SetRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetPosition@AdvancedWeaponStation@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@AdvancedWeaponStation@@UAEXMMM@Z PROC	; AdvancedWeaponStation::SetPosition, COMDAT
; _this$ = ecx

; 179  : 		virtual void SetPosition (float x, float y, float z) { xPos = x; yPos = y; zPos = z;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+20], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+24], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+28], xmm0
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetPosition@AdvancedWeaponStation@@UAEXMMM@Z ENDP	; AdvancedWeaponStation::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -20						; size = 4
_hpPos$1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_Parent$ = 8						; size = 4
?SetParentDrawPtr@AdvancedWeaponStation@@QAEXPAVDrawableBSP@@@Z PROC ; AdvancedWeaponStation::SetParentDrawPtr
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	ShiAssert( hpId > 0 );
; 183  : 	theParent=Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Parent$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 184  : 
; 185  : 	if( theParent && hpId > 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@SetParentD
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jle	SHORT $LN1@SetParentD

; 186  : 	{
; 187  : 		Tpoint hpPos = {0,0,0};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$1[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$1[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _hpPos$1[ebp+8], xmm0

; 188  : 
; 189  : 
; 190  : 		theParent->GetChildOffset(hpId - 1, &hpPos);

	lea	ecx, DWORD PTR _hpPos$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetChildOffset@DrawableBSP@@QAEXHPAUTpoint@@@Z ; DrawableBSP::GetChildOffset

; 191  : 
; 192  : 		xPos = hpPos.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$1[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 193  : 		yPos = hpPos.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$1[ebp+4]
	movss	DWORD PTR [eax+24], xmm0

; 194  : 		zPos = hpPos.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hpPos$1[ebp+8]
	movss	DWORD PTR [ecx+28], xmm0
$LN1@SetParentD:

; 195  : 	}
; 196  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?SetParentDrawPtr@AdvancedWeaponStation@@QAEXPAVDrawableBSP@@@Z ENDP ; AdvancedWeaponStation::SetParentDrawPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
$T5 = -8						; size = 4
_this$ = -4						; size = 4
?Cleanup@AdvancedWeaponStation@@UAEXXZ PROC		; AdvancedWeaponStation::Cleanup
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 97   : // 2002-03-26 MN CTD fix, only delete when we used "new" below
; 98   :    if (xSub != &xPos && numPoints != 1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], eax
	je	$LN7@Cleanup
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 1
	je	$LN7@Cleanup

; 99   :    {
; 100  : 	  if ( xSub )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN5@Cleanup

; 101  :       	delete [] xSub;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@Cleanup:

; 102  : 	  if ( ySub )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN4@Cleanup

; 103  :       	delete [] ySub;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN4@Cleanup:

; 104  : 	  if ( zSub )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN3@Cleanup

; 105  :       	delete [] zSub;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Cleanup:

; 106  : 	  if ( azSub )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@Cleanup

; 107  :       	delete [] azSub;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@Cleanup:

; 108  : 	  if ( elSub )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN7@Cleanup

; 109  :       	delete [] elSub;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN7@Cleanup:

; 110  :    }
; 111  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@AdvancedWeaponStation@@UAEXXZ ENDP		; AdvancedWeaponStation::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1AdvancedWeaponStation@@UAE@XZ PROC			; AdvancedWeaponStation::~AdvancedWeaponStation
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1AdvancedWeaponStation@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AdvancedWeaponStation@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 92   : 	Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cleanup@AdvancedWeaponStation@@UAEXXZ	; AdvancedWeaponStation::Cleanup

; 93   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BasicWeaponStation@@UAE@XZ		; BasicWeaponStation::~BasicWeaponStation
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1AdvancedWeaponStation@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1BasicWeaponStation@@UAE@XZ		; BasicWeaponStation::~BasicWeaponStation
__ehhandler$??1AdvancedWeaponStation@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1AdvancedWeaponStation@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1AdvancedWeaponStation@@UAE@XZ ENDP			; AdvancedWeaponStation::~AdvancedWeaponStation
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0AdvancedWeaponStation@@QAE@XZ PROC			; AdvancedWeaponStation::AdvancedWeaponStation
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0BasicWeaponStation@@QAE@XZ		; BasicWeaponStation::BasicWeaponStation
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AdvancedWeaponStation@@6B@

; 62   :    xPos = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+20], xmm0

; 63   :    yPos = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+24], xmm0

; 64   :    zPos = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 65   :    az   = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+32], xmm0

; 66   :    el   = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+36], xmm0

; 67   :    xSub  = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 68   :    ySub  = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 69   :    zSub  = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], 0

; 70   :    azSub = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 71   :    elSub = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 72   :    aGun = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+92], 0

; 73   :    theRack = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 74   :    numPoints = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 75   :    memset(&weaponData, 0, sizeof weaponData); // JPO initialise

	push	44					; 0000002cH
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 76   :    weaponData.weaponClass = wcNoWpn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 11			; 0000000bH

; 77   :    weaponData.domain = wdNoDomain;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 78   :    weaponType = wtNone;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 11			; 0000000bH

; 79   :    pylonId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0

; 80   :    rackId = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], 0

; 81   :    thePylon=NULL; // MLR 2/20/2004 - 

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+76], 0

; 82   :    theSMS=NULL; // MLR 2/21/2004 - 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+144], 0

; 83   :    theParent=NULL; // MLR 2/21/2004 - 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 84   :    rackDataFlags=0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0

; 85   :    pylonmnemonic = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 86   :    rackmnemonic = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 0

; 87   :    loadOrder = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+148], 0

; 88   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0AdvancedWeaponStation@@QAE@XZ ENDP			; AdvancedWeaponStation::AdvancedWeaponStation
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBasicWeaponStation@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBasicWeaponStation@@UAEPAXI@Z PROC			; BasicWeaponStation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BasicWeaponStation@@UAE@XZ		; BasicWeaponStation::~BasicWeaponStation
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBasicWeaponStation@@UAEPAXI@Z ENDP			; BasicWeaponStation::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetLoadOrder@BasicWeaponStation@@UAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLoadOrder@BasicWeaponStation@@UAEPAHXZ PROC		; BasicWeaponStation::GetLoadOrder, COMDAT
; _this$ = ecx

; 123  : 		virtual int *GetLoadOrder(void)										{return 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLoadOrder@BasicWeaponStation@@UAEPAHXZ ENDP		; BasicWeaponStation::GetLoadOrder
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRackMnemonic@BasicWeaponStation@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackMnemonic@BasicWeaponStation@@UAEPADXZ PROC	; BasicWeaponStation::GetRackMnemonic, COMDAT
; _this$ = ecx

; 121  : 		virtual char *GetRackMnemonic(void)  {return NULL;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackMnemonic@BasicWeaponStation@@UAEPADXZ ENDP	; BasicWeaponStation::GetRackMnemonic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPylonMnemonic@BasicWeaponStation@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPylonMnemonic@BasicWeaponStation@@UAEPADXZ PROC	; BasicWeaponStation::GetPylonMnemonic, COMDAT
; _this$ = ecx

; 120  : 		virtual char *GetPylonMnemonic(void) {return NULL;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPylonMnemonic@BasicWeaponStation@@UAEPADXZ ENDP	; BasicWeaponStation::GetPylonMnemonic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetGun@BasicWeaponStation@@UAEXPAVGunClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetGun@BasicWeaponStation@@UAEXPAVGunClass@@@Z PROC	; BasicWeaponStation::SetGun, COMDAT
; _this$ = ecx

; 118  : 		virtual void SetGun (GunClass*)									{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGun@BasicWeaponStation@@UAEXPAVGunClass@@@Z ENDP	; BasicWeaponStation::SetGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?GetGun@BasicWeaponStation@@UAEPAVGunClass@@XZ PROC	; BasicWeaponStation::GetGun
; _this$ = ecx

; 49   : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	if (weaponPointer && weaponPointer->IsGun())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetGun
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [edx+168]
	call	eax
	test	eax, eax
	je	SHORT $LN2@GetGun

; 51   : 		return (GunClass*) weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	jmp	SHORT $LN3@GetGun

; 52   : 	else 

	jmp	SHORT $LN3@GetGun
$LN2@GetGun:

; 53   : 		return NULL; 

	xor	eax, eax
$LN3@GetGun:

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGun@BasicWeaponStation@@UAEPAVGunClass@@XZ ENDP	; BasicWeaponStation::GetGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetWeaponClass@BasicWeaponStation@@UAEXW4WeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetWeaponClass@BasicWeaponStation@@UAEXW4WeaponClass@@@Z PROC ; BasicWeaponStation::SetWeaponClass, COMDAT
; _this$ = ecx

; 116  : 		virtual void SetWeaponClass (WeaponClass)						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWeaponClass@BasicWeaponStation@@UAEXW4WeaponClass@@@Z ENDP ; BasicWeaponStation::SetWeaponClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?Domain@BasicWeaponStation@@UAE?AW4WeaponDomain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Domain@BasicWeaponStation@@UAE?AW4WeaponDomain@@XZ PROC ; BasicWeaponStation::Domain, COMDAT
; _this$ = ecx

; 115  :       virtual WeaponDomain Domain (void)                          {return wdNoDomain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Domain@BasicWeaponStation@@UAE?AW4WeaponDomain@@XZ ENDP ; BasicWeaponStation::Domain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetWeaponClass@BasicWeaponStation@@UAE?AW4WeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponClass@BasicWeaponStation@@UAE?AW4WeaponClass@@XZ PROC ; BasicWeaponStation::GetWeaponClass, COMDAT
; _this$ = ecx

; 114  : 		virtual WeaponClass GetWeaponClass (void)							{ return (WeaponClass)0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponClass@BasicWeaponStation@@UAE?AW4WeaponClass@@XZ ENDP ; BasicWeaponStation::GetWeaponClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetWeaponType@BasicWeaponStation@@UAEXW4WeaponType@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetWeaponType@BasicWeaponStation@@UAEXW4WeaponType@@@Z PROC ; BasicWeaponStation::SetWeaponType, COMDAT
; _this$ = ecx

; 113  : 		virtual void SetWeaponType (WeaponType)							{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWeaponType@BasicWeaponStation@@UAEXW4WeaponType@@@Z ENDP ; BasicWeaponStation::SetWeaponType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetWeaponType@BasicWeaponStation@@UAE?AW4WeaponType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponType@BasicWeaponStation@@UAE?AW4WeaponType@@XZ PROC ; BasicWeaponStation::GetWeaponType, COMDAT
; _this$ = ecx

; 112  : 		virtual WeaponType GetWeaponType (void)								{ return (WeaponType)0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponType@BasicWeaponStation@@UAE?AW4WeaponType@@XZ ENDP ; BasicWeaponStation::GetWeaponType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetWeaponData@BasicWeaponStation@@UAEXUWeaponData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 44
?SetWeaponData@BasicWeaponStation@@UAEXUWeaponData@@@Z PROC ; BasicWeaponStation::SetWeaponData, COMDAT
; _this$ = ecx

; 111  : 		virtual void SetWeaponData (WeaponData)							{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
?SetWeaponData@BasicWeaponStation@@UAEXUWeaponData@@@Z ENDP ; BasicWeaponStation::SetWeaponData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetWeaponData@BasicWeaponStation@@UAEPAUWeaponData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWeaponData@BasicWeaponStation@@UAEPAUWeaponData@@XZ PROC ; BasicWeaponStation::GetWeaponData, COMDAT
; _this$ = ecx

; 110  : 		virtual WeaponData* GetWeaponData (void)							{ return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWeaponData@BasicWeaponStation@@UAEPAUWeaponData@@XZ ENDP ; BasicWeaponStation::GetWeaponData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetPylonId@BasicWeaponStation@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetPylonId@BasicWeaponStation@@UAEXH@Z PROC		; BasicWeaponStation::SetPylonId, COMDAT
; _this$ = ecx

; 109  : 		virtual void SetPylonId (int)										{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPylonId@BasicWeaponStation@@UAEXH@Z ENDP		; BasicWeaponStation::SetPylonId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPylonId@BasicWeaponStation@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPylonId@BasicWeaponStation@@UAEHXZ PROC		; BasicWeaponStation::GetPylonId, COMDAT
; _this$ = ecx

; 108  : 		virtual int GetPylonId (void)										{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPylonId@BasicWeaponStation@@UAEHXZ ENDP		; BasicWeaponStation::GetPylonId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetRackId@BasicWeaponStation@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetRackId@BasicWeaponStation@@UAEXH@Z PROC		; BasicWeaponStation::SetRackId, COMDAT
; _this$ = ecx

; 107  : 		virtual void SetRackId (int)										{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRackId@BasicWeaponStation@@UAEXH@Z ENDP		; BasicWeaponStation::SetRackId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRackId@BasicWeaponStation@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackId@BasicWeaponStation@@UAEHXZ PROC		; BasicWeaponStation::GetRackId, COMDAT
; _this$ = ecx

; 106  : 		virtual int GetRackId (void)										{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackId@BasicWeaponStation@@UAEHXZ ENDP		; BasicWeaponStation::GetRackId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetPylon@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetPylon@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z PROC ; BasicWeaponStation::SetPylon, COMDAT
; _this$ = ecx

; 105  : 		virtual void SetPylon (DrawableBSP*)							{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPylon@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z ENDP ; BasicWeaponStation::SetPylon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; BasicWeaponStation::GetPylon, COMDAT
; _this$ = ecx

; 104  : 		virtual DrawableBSP* GetPylon(void)									{ return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; BasicWeaponStation::GetPylon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetRack@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetRack@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z PROC ; BasicWeaponStation::SetRack, COMDAT
; _this$ = ecx

; 103  : 		virtual void SetRack (DrawableBSP*)							{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRack@BasicWeaponStation@@UAEXPAVDrawableBSP@@@Z ENDP ; BasicWeaponStation::SetRack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRack@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRack@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ PROC	; BasicWeaponStation::GetRack, COMDAT
; _this$ = ecx

; 102  : 		virtual DrawableBSP* GetRack(void)									{ return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRack@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP	; BasicWeaponStation::GetRack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRackOrPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackOrPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; BasicWeaponStation::GetRackOrPylon, COMDAT
; _this$ = ecx

; 100  : 		virtual DrawableBSP* GetRackOrPylon(void)							{ return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackOrPylon@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; BasicWeaponStation::GetRackOrPylon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetTopDrawable@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTopDrawable@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; BasicWeaponStation::GetTopDrawable, COMDAT
; _this$ = ecx

; 99   : 		virtual DrawableBSP* GetTopDrawable(void)								{ return NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTopDrawable@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; BasicWeaponStation::GetTopDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRackDataFlags@BasicWeaponStation@@UAEHXZ PROC	; BasicWeaponStation::GetRackDataFlags
; _this$ = ecx

; 955  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 956  : 	return RDF_EMERGENCY_JETT_RACK | RDF_SELECTIVE_JETT_RACK;

	mov	eax, 24					; 00000018H

; 957  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRackDataFlags@BasicWeaponStation@@UAEHXZ ENDP	; BasicWeaponStation::GetRackDataFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_HPGroup$ = 8						; size = 4
_WeaponId$ = 12						; size = 4
_WeaponCount$ = 16					; size = 4
?DetermineRackData@BasicWeaponStation@@UAEHHHH@Z PROC	; BasicWeaponStation::DetermineRackData
; _this$ = ecx

; 804  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 805  : 	weaponId=WeaponId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _WeaponId$[ebp]
	mov	WORD PTR [eax+8], cx

; 806  : 	weaponCount=WeaponCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _WeaponCount$[ebp]
	mov	WORD PTR [edx+10], ax

; 807  : 	return 1;

	mov	eax, 1

; 808  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DetermineRackData@BasicWeaponStation@@UAEHHHH@Z ENDP	; BasicWeaponStation::DetermineRackData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
tv89 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
_weapPtr$ = -4						; size = 4
?DeleteAllWeaponBSP@BasicWeaponStation@@UAEXXZ PROC	; BasicWeaponStation::DeleteAllWeaponBSP
; _this$ = ecx

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 	SimWeaponClass *weapPtr;
; 670  : 
; 671  : //	if(podPointer)
; 672  : //		weapPtr = podPointer;
; 673  : //	else
; 674  : 		weapPtr = weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weapPtr$[ebp], eax
$LN3@DeleteAllW:

; 675  : 
; 676  : 	while(weapPtr)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN4@DeleteAllW

; 677  : 	{
; 678  : 		if(weapPtr->drawPointer) // basics only load the 1st BSP

	mov	eax, DWORD PTR _weapPtr$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@DeleteAllW

; 679  : 		{
; 680  : 			DetachWeaponBSP(weapPtr);

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 681  : 			delete weapPtr->drawPointer;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN6@DeleteAllW
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN7@DeleteAllW
$LN6@DeleteAllW:
	mov	DWORD PTR tv89[ebp], 0
$LN7@DeleteAllW:

; 682  : 			weapPtr->drawPointer=0;

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	mov	DWORD PTR [ecx+332], 0
$LN1@DeleteAllW:

; 683  : 		}
; 684  : 		weapPtr = weapPtr->GetNextOnRail();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weapPtr$[ebp], eax

; 685  : 	}

	jmp	SHORT $LN3@DeleteAllW
$LN4@DeleteAllW:

; 686  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteAllWeaponBSP@BasicWeaponStation@@UAEXXZ ENDP	; BasicWeaponStation::DeleteAllWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_this$ = -20						; size = 4
_weapptr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ PROC ; BasicWeaponStation::DetachFirstWeapon
; _this$ = ecx

; 610  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 611  : 	// with the basic class, we may want to load the next weapons BSP and attach it?
; 612  : 	VuBin<SimWeaponClass> weapptr=weaponPointer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 613  : 	if (weapptr){

	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DetachFirs

; 614  : 		weaponPointer.reset(weapptr->GetNextOnRail());

	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	ecx, eax
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::reset

; 615  : 		DetachWeaponBSP(weapptr.get());

	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 616  : 		weapptr->nextOnRail.reset();

	push	0
	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	add	eax, 672				; 000002a0H
	mov	ecx, eax
	call	?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::reset
$LN1@DetachFirs:

; 617  : 	}
; 618  : 	return weapptr;

	lea	eax, DWORD PTR _weapptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _weapptr$[ebp]
	call	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 619  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$0:
	lea	ecx, DWORD PTR _weapptr$[ebp]
	jmp	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
__unwindfunclet$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN6@DetachFirs
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
$LN6@DetachFirs:
	ret	0
__ehhandler$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DetachFirstWeapon@BasicWeaponStation@@UAE?AV?$VuBin@VSimWeaponClass@@@@XZ ENDP ; BasicWeaponStation::DetachFirstWeapon
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_weapBSP$ = -8						; size = 4
_this$ = -4						; size = 4
_weapPtr$ = 8						; size = 4
?DetachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z PROC ; BasicWeaponStation::DetachWeaponBSP
; _this$ = ecx

; 712  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 713  : 	if(!weapPtr || weapPtr!=weaponPointer)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN3@DetachWeap
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _weapPtr$[ebp]
	push	ecx
	call	??$?9VSimWeaponClass@@@@YA_NPBXABV?$VuBin@VSimWeaponClass@@@@@Z ; operator!=<SimWeaponClass>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@DetachWeap
$LN3@DetachWeap:

; 714  : 	return;

	jmp	SHORT $LN5@DetachWeap
$LN4@DetachWeap:

; 715  : 
; 716  : 	DrawableBSP *weapBSP = (DrawableBSP *)weapPtr->drawPointer;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _weapBSP$[ebp], ecx

; 717  : 
; 718  : 	if(!weapBSP)

	cmp	DWORD PTR _weapBSP$[ebp], 0
	jne	SHORT $LN2@DetachWeap

; 719  : 		return;

	jmp	SHORT $LN5@DetachWeap
$LN2@DetachWeap:

; 720  : 
; 721  : 
; 722  : 	if(theParent)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@DetachWeap

; 723  : 	{
; 724  : 		theParent->DetachChild(weapBSP, hpId - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _weapBSP$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?DetachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::DetachChild
$LN5@DetachWeap:

; 725  : 	}
; 726  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DetachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z ENDP ; BasicWeaponStation::DetachWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_weapPtr$ = -4						; size = 4
?DetachAllWeaponBSP@BasicWeaponStation@@UAEXXZ PROC	; BasicWeaponStation::DetachAllWeaponBSP
; _this$ = ecx

; 636  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 637  : 	SimWeaponClass *weapPtr;
; 638  : 
; 639  : //	if(podPointer)
; 640  : //		weapPtr = podPointer;
; 641  : //	else
; 642  : 		weapPtr = weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weapPtr$[ebp], eax

; 643  : 
; 644  : 	if(weapPtr) // basics only load the 1st BSP

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN2@DetachAllW

; 645  : 	{
; 646  : 		DetachWeaponBSP(weapPtr);

	mov	eax, DWORD PTR _weapPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax

; 647  : 		weapPtr = weapPtr->GetNextOnRail();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weapPtr$[ebp], eax
$LN2@DetachAllW:

; 648  : 	}
; 649  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DetachAllWeaponBSP@BasicWeaponStation@@UAEXXZ ENDP	; BasicWeaponStation::DetachAllWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
$T2 = -88						; size = 4
tv165 = -84						; size = 4
$T3 = -80						; size = 4
_wid$4 = -76						; size = 2
_this$ = -72						; size = 4
_weapBSP$ = -68						; size = 4
_viewRot$5 = -64					; size = 36
_hpPos$6 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_weapPtr$ = 8						; size = 4
?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z PROC ; BasicWeaponStation::AttachWeaponBSP
; _this$ = ecx

; 464  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 465  : 	if(!weapPtr || weapPtr != weaponPointer) // only attach 1st weapon

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN6@AttachWeap
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _weapPtr$[ebp]
	push	ecx
	call	??$?9VSimWeaponClass@@@@YA_NPBXABV?$VuBin@VSimWeaponClass@@@@@Z ; operator!=<SimWeaponClass>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@AttachWeap
$LN6@AttachWeap:

; 466  : 		return;

	jmp	$LN8@AttachWeap
$LN7@AttachWeap:

; 467  : 
; 468  : 	DrawableBSP *weapBSP = (DrawableBSP *)weapPtr->drawPointer;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _weapBSP$[ebp], ecx

; 469  : 
; 470  : 	if(!weapBSP)

	cmp	DWORD PTR _weapBSP$[ebp], 0
	jne	$LN2@AttachWeap

; 471  : 	{
; 472  : 		Tpoint hpPos;
; 473  : 		Trotation viewRot = IMatrix;

	mov	ecx, 9
	mov	esi, OFFSET ?IMatrix@@3UTrotation@@B	; IMatrix
	lea	edi, DWORD PTR _viewRot$5[ebp]
	rep movsd

; 474  : 		GetSubPosition(0, &hpPos.x, &hpPos.y, &hpPos.z);

	lea	edx, DWORD PTR _hpPos$6[ebp+8]
	push	edx
	lea	eax, DWORD PTR _hpPos$6[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _hpPos$6[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 475  : 
; 476  : 
; 477  : 		short wid = weapPtr->GetWeaponId();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetWeaponId@SimWeaponClass@@QAEFXZ	; SimWeaponClass::GetWeaponId
	mov	WORD PTR _wid$4[ebp], ax

; 478  : 
; 479  : 		if(OTWDriver.IsActive())

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?IsActive@OTWDriverClass@@QAEHXZ	; OTWDriverClass::IsActive
	test	eax, eax
	je	SHORT $LN4@AttachWeap

; 480  : 		{
; 481  : 			OTWDriver.CreateVisualObject(weapPtr);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _weapPtr$[ebp]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@M@Z ; OTWDriverClass::CreateVisualObject

; 482  : 			weapBSP = (DrawableBSP *)weapPtr->drawPointer;

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	DWORD PTR _weapBSP$[ebp], edx

; 483  : 
; 484  : 		}
; 485  : 		else

	jmp	$LN3@AttachWeap
$LN4@AttachWeap:

; 486  : 		{
; 487  : 			weapBSP = new DrawableBSP (Falcon4ClassTable[WeaponDataTable[wid].Index].visType[0], 
; 488  : 			                        &hpPos, 
; 489  : 									&viewRot, 
; 490  : 									OTWDriver.Scale());

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@AttachWeap
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _viewRot$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _hpPos$6[ebp]
	push	ecx
	movsx	edx, WORD PTR _wid$4[ebp]
	imul	edx, 60					; 0000003cH
	mov	eax, DWORD PTR ?WeaponDataTable@@3PAUWeaponClassDataType@@A ; WeaponDataTable
	movsx	ecx, WORD PTR [eax+edx]
	imul	ecx, 81					; 00000051H
	add	ecx, DWORD PTR ?Falcon4ClassTable@@3PAUFalcon4EntityClassType@@A ; Falcon4ClassTable
	mov	edx, 2
	imul	edx, 0
	movsx	eax, WORD PTR [ecx+edx+60]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN11@AttachWeap
$LN10@AttachWeap:
	mov	DWORD PTR tv165[ebp], 0
$LN11@AttachWeap:
	mov	ecx, DWORD PTR tv165[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _weapBSP$[ebp], edx

; 491  : 
; 492  : 			weapPtr->drawPointer = (DrawableObject *)weapBSP;

	mov	eax, DWORD PTR _weapPtr$[ebp]
	mov	ecx, DWORD PTR _weapBSP$[ebp]
	mov	DWORD PTR [eax+332], ecx
$LN3@AttachWeap:

; 493  : 		}
; 494  : 
; 495  : 		if(weapPtr->GetType() == TYPE_LAUNCHER)

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetType@SimBaseClass@@QBEEXZ		; SimBaseClass::GetType
	movzx	edx, al
	cmp	edx, 5
	jne	SHORT $LN2@AttachWeap

; 496  : 			weapBSP->SetSwitchMask(0,1);

	push	1
	push	0
	mov	ecx, DWORD PTR _weapBSP$[ebp]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN2@AttachWeap:

; 497  : 	}
; 498  : 
; 499  : 	if(weapBSP && theParent)

	cmp	DWORD PTR _weapBSP$[ebp], 0
	je	SHORT $LN1@AttachWeap
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@AttachWeap

; 500  : 	{
; 501  : 		theParent->AttachChild(weapBSP, hpId - 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _weapBSP$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?AttachChild@DrawableBSP@@QAEXPAV1@H@Z	; DrawableBSP::AttachChild
$LN1@AttachWeap:
$LN8@AttachWeap:

; 502  : 	}
; 503  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttachWeaponBSP@BasicWeaponStation@@UAEXPAVSimWeaponClass@@@Z ENDP ; BasicWeaponStation::AttachWeaponBSP
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_weapPtr$ = -4						; size = 4
?AttachAllWeaponBSP@BasicWeaponStation@@UAEXXZ PROC	; BasicWeaponStation::AttachAllWeaponBSP
; _this$ = ecx

; 431  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 432  : 	SimWeaponClass *weapPtr;
; 433  : 
; 434  : //	if(podPointer)
; 435  : //		weapPtr = podPointer;
; 436  : //	else
; 437  : 		weapPtr = weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _weapPtr$[ebp], eax

; 438  : 
; 439  : 	if(weapPtr)

	cmp	DWORD PTR _weapPtr$[ebp], 0
	je	SHORT $LN2@AttachAllW

; 440  : 	{
; 441  : 		// basic only attaches 1st weapon BSP
; 442  : 		AttachWeaponBSP(weapPtr);

	mov	eax, DWORD PTR _weapPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax

; 443  : 		weapPtr = weapPtr->GetNextOnRail();

	mov	ecx, DWORD PTR _weapPtr$[ebp]
	call	?GetNextOnRail@SimWeaponClass@@QAEPAV1@XZ ; SimWeaponClass::GetNextOnRail
	mov	DWORD PTR _weapPtr$[ebp], eax
$LN2@AttachAllW:

; 444  : 	}
; 445  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AttachAllWeaponBSP@BasicWeaponStation@@UAEXXZ ENDP	; BasicWeaponStation::AttachAllWeaponBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?DeleteRackBSP@BasicWeaponStation@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteRackBSP@BasicWeaponStation@@UAEXXZ PROC		; BasicWeaponStation::DeleteRackBSP, COMDAT
; _this$ = ecx

; 86   : 		virtual void DeleteRackBSP(void)						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteRackBSP@BasicWeaponStation@@UAEXXZ ENDP		; BasicWeaponStation::DeleteRackBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?DetachRackBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DetachRackBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; BasicWeaponStation::DetachRackBSP, COMDAT
; _this$ = ecx

; 85   : 		virtual DrawableBSP* DetachRackBSP(void)				{return NULL;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?DetachRackBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; BasicWeaponStation::DetachRackBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?AttachRackBSP@BasicWeaponStation@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AttachRackBSP@BasicWeaponStation@@UAEXXZ PROC		; BasicWeaponStation::AttachRackBSP, COMDAT
; _this$ = ecx

; 84   : 		virtual void AttachRackBSP(void)						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?AttachRackBSP@BasicWeaponStation@@UAEXXZ ENDP		; BasicWeaponStation::AttachRackBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?DeletePylonBSP@BasicWeaponStation@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeletePylonBSP@BasicWeaponStation@@UAEXXZ PROC		; BasicWeaponStation::DeletePylonBSP, COMDAT
; _this$ = ecx

; 82   : 		virtual void DeletePylonBSP(void)						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeletePylonBSP@BasicWeaponStation@@UAEXXZ ENDP		; BasicWeaponStation::DeletePylonBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?DetachPylonBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DetachPylonBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ PROC ; BasicWeaponStation::DetachPylonBSP, COMDAT
; _this$ = ecx

; 81   : 		virtual DrawableBSP* DetachPylonBSP(void)				{return NULL;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?DetachPylonBSP@BasicWeaponStation@@UAEPAVDrawableBSP@@XZ ENDP ; BasicWeaponStation::DetachPylonBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?AttachPylonBSP@BasicWeaponStation@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AttachPylonBSP@BasicWeaponStation@@UAEXXZ PROC		; BasicWeaponStation::AttachPylonBSP, COMDAT
; _this$ = ecx

; 80   : 		virtual void AttachPylonBSP(void)						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?AttachPylonBSP@BasicWeaponStation@@UAEXXZ ENDP		; BasicWeaponStation::AttachPylonBSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Parent$ = 8						; size = 4
?SetParentDrawPtr@BasicWeaponStation@@QAEXPAVDrawableBSP@@@Z PROC ; BasicWeaponStation::SetParentDrawPtr
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 	theParent=Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Parent$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 178  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetParentDrawPtr@BasicWeaponStation@@QAEXPAVDrawableBSP@@@Z ENDP ; BasicWeaponStation::SetParentDrawPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetSMS@BasicWeaponStation@@UAEXPAVSMSClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Sms$ = 8						; size = 4
?SetSMS@BasicWeaponStation@@UAEXPAVSMSClass@@@Z PROC	; BasicWeaponStation::SetSMS, COMDAT
; _this$ = ecx

; 77   : 		virtual void SetSMS(SMSClass *Sms)						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSMS@BasicWeaponStation@@UAEXPAVSMSClass@@@Z ENDP	; BasicWeaponStation::SetSMS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?NumPoints@BasicWeaponStation@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumPoints@BasicWeaponStation@@UAEHXZ PROC		; BasicWeaponStation::NumPoints, COMDAT
; _this$ = ecx

; 75   : 		virtual int NumPoints(void)											{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?NumPoints@BasicWeaponStation@@UAEHXZ ENDP		; BasicWeaponStation::NumPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetupPoints@BasicWeaponStation@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetupPoints@BasicWeaponStation@@UAEXH@Z PROC		; BasicWeaponStation::SetupPoints, COMDAT
; _this$ = ecx

; 74   : 		virtual void SetupPoints(int)									{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetupPoints@BasicWeaponStation@@UAEXH@Z ENDP		; BasicWeaponStation::SetupPoints
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetSubRotation@BasicWeaponStation@@UAEXHPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?GetSubRotation@BasicWeaponStation@@UAEXHPAM0@Z PROC	; BasicWeaponStation::GetSubRotation, COMDAT
; _this$ = ecx

; 73   : 		virtual void GetSubRotation (int, float*, float* )			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetSubRotation@BasicWeaponStation@@UAEXHPAM0@Z ENDP	; BasicWeaponStation::GetSubRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetSubPosition@BasicWeaponStation@@UAEXHPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?GetSubPosition@BasicWeaponStation@@UAEXHPAM00@Z PROC	; BasicWeaponStation::GetSubPosition, COMDAT
; _this$ = ecx

; 72   : 		virtual void GetSubPosition (int, float*, float*, float*)	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetSubPosition@BasicWeaponStation@@UAEXHPAM00@Z ENDP	; BasicWeaponStation::GetSubPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetSubRotation@BasicWeaponStation@@UAEXHMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetSubRotation@BasicWeaponStation@@UAEXHMM@Z PROC	; BasicWeaponStation::SetSubRotation, COMDAT
; _this$ = ecx

; 71   : 		virtual void SetSubRotation (int, float, float )				{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSubRotation@BasicWeaponStation@@UAEXHMM@Z ENDP	; BasicWeaponStation::SetSubRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetSubPosition@BasicWeaponStation@@UAEXHMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?SetSubPosition@BasicWeaponStation@@UAEXHMMM@Z PROC	; BasicWeaponStation::SetSubPosition, COMDAT
; _this$ = ecx

; 70   : 		virtual void SetSubPosition (int, float, float, float)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetSubPosition@BasicWeaponStation@@UAEXHMMM@Z ENDP	; BasicWeaponStation::SetSubPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetRotation@BasicWeaponStation@@UAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetRotation@BasicWeaponStation@@UAEXPAM0@Z PROC	; BasicWeaponStation::GetRotation, COMDAT
; _this$ = ecx

; 69   : 		virtual void GetRotation (float*, float* )						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetRotation@BasicWeaponStation@@UAEXPAM0@Z ENDP	; BasicWeaponStation::GetRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?GetPosition@BasicWeaponStation@@UAEXPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?GetPosition@BasicWeaponStation@@UAEXPAM00@Z PROC	; BasicWeaponStation::GetPosition, COMDAT
; _this$ = ecx

; 68   : 		virtual void GetPosition (float*, float*, float*)				{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetPosition@BasicWeaponStation@@UAEXPAM00@Z ENDP	; BasicWeaponStation::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetRotation@BasicWeaponStation@@UAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetRotation@BasicWeaponStation@@UAEXMM@Z PROC		; BasicWeaponStation::SetRotation, COMDAT
; _this$ = ecx

; 67   : 		virtual void SetRotation (float, float )						{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRotation@BasicWeaponStation@@UAEXMM@Z ENDP		; BasicWeaponStation::SetRotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?SetPosition@BasicWeaponStation@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetPosition@BasicWeaponStation@@UAEXMMM@Z PROC		; BasicWeaponStation::SetPosition, COMDAT
; _this$ = ecx

; 66   : 		virtual void SetPosition (float, float, float)				{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetPosition@BasicWeaponStation@@UAEXMMM@Z ENDP		; BasicWeaponStation::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hardpnt.h
;	COMDAT ?Cleanup@BasicWeaponStation@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Cleanup@BasicWeaponStation@@UAEXXZ PROC		; BasicWeaponStation::Cleanup, COMDAT
; _this$ = ecx

; 60   : 		virtual void Cleanup (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cleanup@BasicWeaponStation@@UAEXXZ ENDP		; BasicWeaponStation::Cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BasicWeaponStation@@UAE@XZ PROC			; BasicWeaponStation::~BasicWeaponStation
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BasicWeaponStation@@6B@

; 46   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
	mov	esp, ebp
	pop	ebp
	ret	0
??1BasicWeaponStation@@UAE@XZ ENDP			; BasicWeaponStation::~BasicWeaponStation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\wpnstatn.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0BasicWeaponStation@@QAE@XZ PROC			; BasicWeaponStation::BasicWeaponStation
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0BasicWeaponStation@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BasicWeaponStation@@6B@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$VuBin@VSimWeaponClass@@@@QAE@PAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 39   : 	weaponId = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+8], cx

; 40   : 	weaponCount = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+10], ax

; 41   : 	weaponPointer.reset();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ; VuBin<SimWeaponClass>::reset

; 42   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0BasicWeaponStation@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$VuBin@VSimWeaponClass@@@@QAE@XZ	; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
__ehhandler$??0BasicWeaponStation@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0BasicWeaponStation@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0BasicWeaponStation@@QAE@XZ ENDP			; BasicWeaponStation::BasicWeaponStation
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newe$ = 8						; size = 4
?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z PROC ; VuBin<SimWeaponClass>::reset, COMDAT
; _this$ = ecx

; 60   : 	void reset(E *newe = NULL){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		if (newe == e){ return; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newe$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@reset
	jmp	SHORT $LN2@reset
$LN1@reset:

; 62   : 		VuReferenceEntity(newe); // ref new pointer

	mov	edx, DWORD PTR _newe$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 63   : 		VuDeReferenceEntity(e);  // unref old pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 64   : 		e = newe;                // get new pointer

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newe$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@reset:

; 65   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reset@?$VuBin@VSimWeaponClass@@@@QAEXPAVSimWeaponClass@@@Z ENDP ; VuBin<SimWeaponClass>::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??1?$VuBin@VSimWeaponClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VuBin@VSimWeaponClass@@@@QAE@XZ PROC		; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>, COMDAT
; _this$ = ecx

; 19   : 	~VuBin(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 		VuDeReferenceEntity((VuEntity *)e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 21   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VuBin@VSimWeaponClass@@@@QAE@XZ ENDP		; VuBin<SimWeaponClass>::~VuBin<SimWeaponClass>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z PROC		; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>, COMDAT
; _this$ = ecx

; 15   : 	VuBin(const VuBin &rhs) : e(rhs.e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 16   : 		VuReferenceEntity(e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 17   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VSimWeaponClass@@@@QAE@ABV0@@Z ENDP		; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VSimWeaponClass@@@@QAE@PAVSimWeaponClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??0?$VuBin@VSimWeaponClass@@@@QAE@PAVSimWeaponClass@@@Z PROC ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>, COMDAT
; _this$ = ecx

; 11   : 	explicit VuBin(E *e = NULL) : e(e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax], ecx

; 12   : 		VuReferenceEntity(e);

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 13   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VSimWeaponClass@@@@QAE@PAVSimWeaponClass@@@Z ENDP ; VuBin<SimWeaponClass>::VuBin<SimWeaponClass>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
END
