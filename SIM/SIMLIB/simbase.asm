; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\SIMLIB\simbase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??9VU_ID@@QBE_NABV0@@Z				; VU_ID::operator!=
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?SetTypeFlag@FalconEntity@@QAEXH@Z		; FalconEntity::SetTypeFlag
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsMover@FalconEntity@@UAEHXZ			; FalconEntity::IsMover
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsEject@FalconEntity@@UAEHXZ			; FalconEntity::IsEject
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??0ObjectGeometry@@QAE@XZ			; ObjectGeometry::ObjectGeometry
PUBLIC	??1ObjectGeometry@@QAE@XZ			; ObjectGeometry::~ObjectGeometry
PUBLIC	??0SimBaseSpecialData@@QAE@XZ			; SimBaseSpecialData::SimBaseSpecialData
PUBLIC	??1SimBaseSpecialData@@QAE@XZ			; SimBaseSpecialData::~SimBaseSpecialData
PUBLIC	??0SimBaseNonLocalData@@QAE@XZ			; SimBaseNonLocalData::SimBaseNonLocalData
PUBLIC	??1SimBaseNonLocalData@@QAE@XZ			; SimBaseNonLocalData::~SimBaseNonLocalData
PUBLIC	??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::VuBin<CampBaseClass>
PUBLIC	??1?$VuBin@VCampBaseClass@@@@QAE@XZ		; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
PUBLIC	??7?$VuBin@VCampBaseClass@@@@QBE_NXZ		; VuBin<CampBaseClass>::operator!
PUBLIC	??B?$VuBin@VCampBaseClass@@@@QBE_NXZ		; VuBin<CampBaseClass>::operator bool
PUBLIC	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::reset
PUBLIC	?WeaponKeepAlive@SimBaseClass@@UAEXXZ		; SimBaseClass::WeaponKeepAlive
PUBLIC	?JoinFlight@SimBaseClass@@UAEXXZ		; SimBaseClass::JoinFlight
PUBLIC	??0SimBaseClass@@QAE@G@Z			; SimBaseClass::SimBaseClass
PUBLIC	??0SimBaseClass@@QAE@PAPAEPAJ@Z			; SimBaseClass::SimBaseClass
PUBLIC	??0SimBaseClass@@QAE@PAU_iobuf@@@Z		; SimBaseClass::SimBaseClass
PUBLIC	??1SimBaseClass@@UAE@XZ				; SimBaseClass::~SimBaseClass
PUBLIC	?InitData@SimBaseClass@@UAEXXZ			; SimBaseClass::InitData
PUBLIC	?CleanupData@SimBaseClass@@UAEXXZ		; SimBaseClass::CleanupData
PUBLIC	?InitLocalData@SimBaseClass@@AAEXXZ		; SimBaseClass::InitLocalData
PUBLIC	?CleanupLocalData@SimBaseClass@@AAEXXZ		; SimBaseClass::CleanupLocalData
PUBLIC	?IsSimBase@SimBaseClass@@UAE_NXZ		; SimBaseClass::IsSimBase
PUBLIC	?GetTeam@SimBaseClass@@UAEEXZ			; SimBaseClass::GetTeam
PUBLIC	?GetCountry@SimBaseClass@@UAEEXZ		; SimBaseClass::GetCountry
PUBLIC	?GetCampID@SimBaseClass@@UAEFXZ			; SimBaseClass::GetCampID
PUBLIC	?ChangeOwner@SimBaseClass@@UAEXVVU_ID@@@Z	; SimBaseClass::ChangeOwner
PUBLIC	?Wake@SimBaseClass@@UAEHXZ			; SimBaseClass::Wake
PUBLIC	?Sleep@SimBaseClass@@UAEHXZ			; SimBaseClass::Sleep
PUBLIC	?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ ; SimBaseClass::GetMovementType
PUBLIC	?MakeLocal@SimBaseClass@@UAEXXZ			; SimBaseClass::MakeLocal
PUBLIC	?MakeRemote@SimBaseClass@@UAEXXZ		; SimBaseClass::MakeRemote
PUBLIC	?OnGround@SimBaseClass@@UAEHXZ			; SimBaseClass::OnGround
PUBLIC	?IsExploding@SimBaseClass@@UAEHXZ		; SimBaseClass::IsExploding
PUBLIC	?IsDead@SimBaseClass@@UBEHXZ			; SimBaseClass::IsDead
PUBLIC	?IsAwake@SimBaseClass@@QBEHXZ			; SimBaseClass::IsAwake
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?SetLocalFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetLocalFlag
PUBLIC	?UnSetLocalFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::UnSetLocalFlag
PUBLIC	?SetCampaignFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetCampaignFlag
PUBLIC	?IsSetRemoveFlag@SimBaseClass@@QBEHXZ		; SimBaseClass::IsSetRemoveFlag
PUBLIC	?SetRemoveFlag@SimBaseClass@@QAEXXZ		; SimBaseClass::SetRemoveFlag
PUBLIC	?SetRemoveSilentFlag@SimBaseClass@@QAEXXZ	; SimBaseClass::SetRemoveSilentFlag
PUBLIC	?SetExploding@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetExploding
PUBLIC	?SetFiring@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFiring
PUBLIC	?SetCallsign@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetCallsign
PUBLIC	?SetSlot@SimBaseClass@@QAEXH@Z			; SimBaseClass::SetSlot
PUBLIC	?SetNewestChaffID@SimBaseClass@@QAEXVVU_ID@@@Z	; SimBaseClass::SetNewestChaffID
PUBLIC	?SetNewestFlareID@SimBaseClass@@QAEXVVU_ID@@@Z	; SimBaseClass::SetNewestFlareID
PUBLIC	?IsSPJamming@SimBaseClass@@UAEHXZ		; SimBaseClass::IsSPJamming
PUBLIC	?IsAreaJamming@SimBaseClass@@UAEHXZ		; SimBaseClass::IsAreaJamming
PUBLIC	?HasSPJamming@SimBaseClass@@UAEHXZ		; SimBaseClass::HasSPJamming
PUBLIC	?HasAreaJamming@SimBaseClass@@UAEHXZ		; SimBaseClass::HasAreaJamming
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?SetCampaignObject@SimBaseClass@@QAEXPAVCampBaseClass@@@Z ; SimBaseClass::SetCampaignObject
PUBLIC	?GetAfterburnerStage@SimBaseClass@@QAEHXZ	; SimBaseClass::GetAfterburnerStage
PUBLIC	?SetFlag@SimBaseClass@@QAEXH@Z			; SimBaseClass::SetFlag
PUBLIC	?UnSetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::UnSetFlag
PUBLIC	?SetFlagSilent@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlagSilent
PUBLIC	?UnSetFlagSilent@SimBaseClass@@QAEXH@Z		; SimBaseClass::UnSetFlagSilent
PUBLIC	?SetCountry@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetCountry
PUBLIC	?SetStatus@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetStatus
PUBLIC	?SetStatusBit@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetStatusBit
PUBLIC	?ClearStatusBit@SimBaseClass@@QAEXH@Z		; SimBaseClass::ClearStatusBit
PUBLIC	?SetPowerOutput@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetPowerOutput
PUBLIC	?SetRdrAz@SimBaseClass@@QAEXM@Z			; SimBaseClass::SetRdrAz
PUBLIC	?SetRdrEl@SimBaseClass@@QAEXM@Z			; SimBaseClass::SetRdrEl
PUBLIC	?SetRdrAzCenter@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrAzCenter
PUBLIC	?SetRdrElCenter@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrElCenter
PUBLIC	?SetRdrCycleTime@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrCycleTime
PUBLIC	?SetRdrRng@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrRng
PUBLIC	?SetAfterburnerStage@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetAfterburnerStage
PUBLIC	?Init@SimBaseClass@@UAEXPAVSimInitDataClass@@@Z	; SimBaseClass::Init
PUBLIC	?Exec@SimBaseClass@@UAEHXZ			; SimBaseClass::Exec
PUBLIC	?GetTransform@SimBaseClass@@UAEXQAY02M@Z	; SimBaseClass::GetTransform
PUBLIC	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z ; SimBaseClass::ApplyDamage
PUBLIC	?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z ; SimBaseClass::ApplyDeathMessage
PUBLIC	?SetDead@SimBaseClass@@UAEXH@Z			; SimBaseClass::SetDead
PUBLIC	?MakePlayerVehicle@SimBaseClass@@UAEXXZ		; SimBaseClass::MakePlayerVehicle
PUBLIC	?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ	; SimBaseClass::MakeNonPlayerVehicle
PUBLIC	?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ	; SimBaseClass::ConfigurePlayerAvionics
PUBLIC	?SetVuPosition@SimBaseClass@@UAEXXZ		; SimBaseClass::SetVuPosition
PUBLIC	?Regenerate@SimBaseClass@@UAEXMMMM@Z		; SimBaseClass::Regenerate
PUBLIC	?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ ; SimBaseClass::SpecialData
PUBLIC	?Mass@SimBaseClass@@UAEMXZ			; SimBaseClass::Mass
PUBLIC	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z	; SimBaseClass::SetIncomingMissile
PUBLIC	??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z ; VuBin<FalconEntity>::VuBin<FalconEntity>
PUBLIC	??1?$VuBin@VFalconEntity@@@@QAE@XZ		; VuBin<FalconEntity>::~VuBin<FalconEntity>
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?reset@?$VuBin@VFalconEntity@@@@QAEXPAVFalconEntity@@@Z ; VuBin<FalconEntity>::reset
PUBLIC	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat
PUBLIC	?SaveSize@SimBaseClass@@UAEHXZ			; SimBaseClass::SaveSize
PUBLIC	?Save@SimBaseClass@@UAEHPAPAE@Z			; SimBaseClass::Save
PUBLIC	?Save@SimBaseClass@@UAEHPAU_iobuf@@@Z		; SimBaseClass::Save
PUBLIC	?Handle@SimBaseClass@@UAEHPAVVuFullUpdateEvent@@@Z ; SimBaseClass::Handle
PUBLIC	?Handle@SimBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z ; SimBaseClass::Handle
PUBLIC	?Handle@SimBaseClass@@UAEHPAVVuTransferEvent@@@Z ; SimBaseClass::Handle
PUBLIC	?InsertionCallback@SimBaseClass@@UAEHXZ		; SimBaseClass::InsertionCallback
PUBLIC	?RemovalCallback@SimBaseClass@@UAEHXZ		; SimBaseClass::RemovalCallback
PUBLIC	?GetPilotVoiceId@SimBaseClass@@QAEHXZ		; SimBaseClass::GetPilotVoiceId
PUBLIC	?GetFlightCallsign@SimBaseClass@@QAEHXZ		; SimBaseClass::GetFlightCallsign
PUBLIC	?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z	; SimBaseClass::GetFocusPoint
PUBLIC	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
PUBLIC	?WriteDirty@SimBaseClass@@QAEXPAPAE@Z		; SimBaseClass::WriteDirty
PUBLIC	?ReadDirty@SimBaseClass@@QAEXPAPAEPAJ@Z		; SimBaseClass::ReadDirty
PUBLIC	??_GSimBaseClass@@UAEPAXI@Z			; SimBaseClass::`scalar deleting destructor'
PUBLIC	?Scale@OTWDriverClass@@QAEMXZ			; OTWDriverClass::Scale
PUBLIC	?SetEndFlightPoint@OTWDriverClass@@QAEXMMM@Z	; OTWDriverClass::SetEndFlightPoint
PUBLIC	?SetEndFlightVec@OTWDriverClass@@QAEXMMM@Z	; OTWDriverClass::SetEndFlightVec
PUBLIC	?SkillLevel@BaseBrain@@QAEHXZ			; BaseBrain::SkillLevel
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ ; DigitalBrain::GetCurrentMode
PUBLIC	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ	; SimVehicleClass::Brain
PUBLIC	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
PUBLIC	?InPackage@CampBaseClass@@QAEHXZ		; CampBaseClass::InPackage
PUBLIC	?RunningInstantAction@SimulationDriver@@QBE_NXZ	; SimulationDriver::RunningInstantAction
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?GetSeekerType@MissileClass@@QAEHXZ		; MissileClass::GetSeekerType
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7SimBaseClass@@6B@				; SimBaseClass::`vftable'
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_04HGGBINEM@?$CFs?$CFd?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SimBaseClass@@6B@				; SimBaseClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSimBaseClass@@@8			; SimBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3SimBaseClass@@8				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimBaseClass@@8				; SimBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimBaseClass@@8			; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3ec90fd9
PUBLIC	__real@3f800000
PUBLIC	__real@3f96cbe3
PUBLIC	__real@3fc00000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@3ffb53cf
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@402fedde
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@41700000
PUBLIC	__real@42480000
PUBLIC	__real@437f0000
PUBLIC	__real@447a0000
PUBLIC	__real@451c4000
PUBLIC	__real@4a396e66
PUBLIC	__real@4e9e71e5
PUBLIC	__real@8000000000000000
PUBLIC	__real@bec90fd9
PUBLIC	__real@bf96cbe3
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@bffb53cf
PUBLIC	__real@c02fedde
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__QueryPerformanceCounter@4:PROC
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?SetOwnerId@VuEntity@@QAEXVVU_ID@@@Z:PROC	; VuEntity::SetOwnerId
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEvent@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?InsertionCallback@VuEntity@@MAEHXZ:PROC	; VuEntity::InsertionCallback
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z:PROC	; VuCollection::Remove
EXTRN	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC	; VuDatabase::Remove
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?SilentRemove@VuDatabase@@QAEHPAVVuEntity@@@Z:PROC ; VuDatabase::SilentRemove
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z:PROC ; VuSessionEntity::AttachCamera
EXTRN	?ClearCameras@VuSessionEntity@@QAEX_N@Z:PROC	; VuSessionEntity::ClearCameras
EXTRN	??0FalconEntity@@QAE@GK@Z:PROC			; FalconEntity::FalconEntity
EXTRN	??0FalconEntity@@QAE@PAPAEPAJ@Z:PROC		; FalconEntity::FalconEntity
EXTRN	??0FalconEntity@@QAE@PAU_iobuf@@@Z:PROC		; FalconEntity::FalconEntity
EXTRN	?Save@FalconEntity@@UAEHPAPAE@Z:PROC		; FalconEntity::Save
EXTRN	?Save@FalconEntity@@UAEHPAU_iobuf@@@Z:PROC	; FalconEntity::Save
EXTRN	?SaveSize@FalconEntity@@UAEHXZ:PROC		; FalconEntity::SaveSize
EXTRN	??1FalconEntity@@UAE@XZ:PROC			; FalconEntity::~FalconEntity
EXTRN	?InitData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::InitData
EXTRN	?CleanupData@FalconEntity@@UAEXXZ:PROC		; FalconEntity::CleanupData
EXTRN	?RemovalCallback@FalconEntity@@UAEHXZ:PROC	; FalconEntity::RemovalCallback
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetRadarType@FalconEntity@@UAEHXZ:PROC		; FalconEntity::GetRadarType
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	?MakeDirty@FalconEntity@@QAEXW4Dirty_Class@@W4Dirtyness@@@Z:PROC ; FalconEntity::MakeDirty
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z:PROC ; CalcRelValues
EXTRN	??0F4SoundPos@@QAE@XZ:PROC			; F4SoundPos::F4SoundPos
EXTRN	??1F4SoundPos@@QAE@XZ:PROC			; F4SoundPos::~F4SoundPos
EXTRN	??_ESimBaseClass@@UAEPAXI@Z:PROC		; SimBaseClass::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z:PROC ; OTWDriverClass::RemoveObject
EXTRN	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@M@Z:PROC ; OTWDriverClass::CreateVisualObject
EXTRN	?StartExitMenuCountdown@OTWDriverClass@@QAEXXZ:PROC ; OTWDriverClass::StartExitMenuCountdown
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z:PROC ; FalconPrivateList::ForcedInsert
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconWingmanMsg::FalconWingmanMsg
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ:PROC ; FalconGameEntity::GetGameType
EXTRN	?GetTeam@@YAEE@Z:PROC				; GetTeam
EXTRN	?RunExplosion@AircraftClass@@QAEXXZ:PROC	; AircraftClass::RunExplosion
EXTRN	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z:PROC	; GetIdFromNamespace
EXTRN	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z:PROC ; CampBaseClass::GetComponentIndex
EXTRN	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ:PROC ; CampBaseClass::GetComponentLead
EXTRN	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z:PROC ; CampBaseClass::GetComponentNumber
EXTRN	?SetPlayerEntity@SimulationDriver@@QAEXPAVSimMoverClass@@@Z:PROC ; SimulationDriver::SetPlayerEntity
EXTRN	?RunExplosion@HelicopterClass@@QAEXXZ:PROC	; HelicopterClass::RunExplosion
EXTRN	?GetCallsign@@YAXHHPAD@Z:PROC			; GetCallsign
EXTRN	?GetPilotVoiceID@FlightClass@@QAEEH@Z:PROC	; FlightClass::GetPilotVoiceID
EXTRN	?RegenerateAircraft@DogfightClass@@QAEXPAVAircraftClass@@@Z:PROC ; DogfightClass::RegenerateAircraft
EXTRN	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	?DetachPlayerFromVehicle@GameManagerClass@@QAEHPAVFalconSessionEntity@@PAVSimMoverClass@@@Z:PROC ; GameManagerClass::DetachPlayerFromVehicle
EXTRN	?RemoveRadioCalls@VoiceManager@@QAEXVVU_ID@@@Z:PROC ; VoiceManager::RemoveRadioCalls
EXTRN	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z:PROC ; CalcTransformMatrix
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	_memset:PROC
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?VolatileNS@@3VIdNamespace@@A:BYTE		; VolatileNS
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?SimDogfight@@3VDogfightClass@@A:BYTE		; SimDogfight
EXTRN	?GameManager@@3VGameManagerClass@@A:BYTE	; GameManager
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	?g_nMPPowerXmitThreshold@@3HA:DWORD		; g_nMPPowerXmitThreshold
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?biggest@?7??Wake@SimBaseClass@@UAEHXZ@4T_LARGE_INTEGER@@A
_BSS	SEGMENT
?biggest@?7??Wake@SimBaseClass@@UAEHXZ@4T_LARGE_INTEGER@@A DQ 01H DUP (?) ; `SimBaseClass::Wake'::`8'::biggest
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c02fedde
CONST	SEGMENT
__real@c02fedde DD 0c02fedder			; -2.74889
CONST	ENDS
;	COMDAT __real@bffb53cf
CONST	SEGMENT
__real@bffb53cf DD 0bffb53cfr			; -1.9635
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf96cbe3
CONST	SEGMENT
__real@bf96cbe3 DD 0bf96cbe3r			; -1.1781
CONST	ENDS
;	COMDAT __real@bec90fd9
CONST	SEGMENT
__real@bec90fd9 DD 0bec90fd9r			; -0.392699
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@4e9e71e5
CONST	SEGMENT
__real@4e9e71e5 DD 04e9e71e5r			; 1.32913e+009
CONST	ENDS
;	COMDAT __real@4a396e66
CONST	SEGMENT
__real@4a396e66 DD 04a396e66r			; 3.03811e+006
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@402fedde
CONST	SEGMENT
__real@402fedde DD 0402fedder			; 2.74889
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ffb53cf
CONST	SEGMENT
__real@3ffb53cf DD 03ffb53cfr			; 1.9635
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f96cbe3
CONST	SEGMENT
__real@3f96cbe3 DD 03f96cbe3r			; 1.1781
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ec90fd9
CONST	SEGMENT
__real@3ec90fd9 DD 03ec90fd9r			; 0.392699
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SimBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimBaseClass@@8 DD FLAT:??_R0?AVSimBaseClass@@@8 ; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimBaseClass@@8
rdata$r	SEGMENT
??_R2SimBaseClass@@8 DD FLAT:??_R1A@?0A@EA@SimBaseClass@@8 ; SimBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimBaseClass@@8
rdata$r	SEGMENT
??_R3SimBaseClass@@8 DD 00H				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimBaseClass@@@8
_DATA	SEGMENT
??_R0?AVSimBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; SimBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SimBaseClass@@6B@
rdata$r	SEGMENT
??_R4SimBaseClass@@6B@ DD 00H				; SimBaseClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSimBaseClass@@@8
	DD	FLAT:??_R3SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
CONST	SEGMENT
??_C@_04HGGBINEM@?$CFs?$CFd?$AA@ DB '%s%d', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7SimBaseClass@@6B@
CONST	SEGMENT
??_7SimBaseClass@@6B@ DD FLAT:??_R4SimBaseClass@@6B@	; SimBaseClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@SimBaseClass@@UAEHXZ
	DD	FLAT:?Save@SimBaseClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@SimBaseClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@SimBaseClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@SimBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@SimBaseClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_ESimBaseClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@SimBaseClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@SimBaseClass@@UAEHXZ
	DD	FLAT:?InitData@SimBaseClass@@UAEXXZ
	DD	FLAT:?CleanupData@SimBaseClass@@UAEXXZ
	DD	FLAT:?IsSimBase@SimBaseClass@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@SimBaseClass@@UAEHXZ
	DD	FLAT:?Sleep@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetCampID@SimBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@FalconEntity@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@FalconEntity@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@FalconEntity@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?WeaponKeepAlive@SimBaseClass@@UAEXXZ
	DD	FLAT:?JoinFlight@SimBaseClass@@UAEXXZ
	DD	FLAT:?ChangeOwner@SimBaseClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?MakeLocal@SimBaseClass@@UAEXXZ
	DD	FLAT:?MakeRemote@SimBaseClass@@UAEXXZ
	DD	FLAT:?IsDead@SimBaseClass@@UBEHXZ
	DD	FLAT:?Init@SimBaseClass@@UAEXPAVSimInitDataClass@@@Z
	DD	FLAT:?Exec@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetTransform@SimBaseClass@@UAEXQAY02M@Z
	DD	FLAT:?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	FLAT:?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z
	DD	FLAT:?SetDead@SimBaseClass@@UAEXH@Z
	DD	FLAT:?MakePlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
	DD	FLAT:?SetVuPosition@SimBaseClass@@UAEXXZ
	DD	FLAT:?Regenerate@SimBaseClass@@UAEXMMMM@Z
	DD	FLAT:?Mass@SimBaseClass@@UAEMXZ
	DD	FLAT:?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z$0
__unwindtable$?SetDead@SimBaseClass@@UAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDead@SimBaseClass@@UAEXH@Z$0
__ehfuncinfo$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetDead@SimBaseClass@@UAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDead@SimBaseClass@@UAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1SimBaseClass@@UAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1SimBaseClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimBaseClass@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0SimBaseClass@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimBaseClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0SimBaseClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SimBaseClass@@QAE@G@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0SimBaseClass@@QAE@G@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1SimBaseClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1SimBaseClass@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1SimBaseClass@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1SimBaseClass@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1SimBaseClass@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1SimBaseClass@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1SimBaseClass@@UAE@XZ$5
__unwindtable$??0SimBaseClass@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$5
__unwindtable$??0SimBaseClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$5
__unwindtable$??0SimBaseClass@@QAE@G@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@G@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@G@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@G@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@G@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@G@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0SimBaseClass@@QAE@G@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\missile.h
;	COMDAT ?GetSeekerType@MissileClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSeekerType@MissileClass@@QAEHXZ PROC		; MissileClass::GetSeekerType, COMDAT
; _this$ = ecx

; 264  : 	int GetSeekerType (void) { return inputData->seekerType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+848]
	mov	eax, DWORD PTR [ecx+88]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSeekerType@MissileClass@@QAEHXZ ENDP		; MissileClass::GetSeekerType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?RunningInstantAction@SimulationDriver@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv80 = -8						; size = 4
tv76 = -4						; size = 4
?RunningInstantAction@SimulationDriver@@QBE_NXZ PROC	; SimulationDriver::RunningInstantAction, COMDAT
; _this$ = ecx

; 53   : 	bool RunningInstantAction() const  { return FalconLocalGame->GetGameType() == game_InstantAction; }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@RunningIns
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@RunningIns
$LN3@RunningIns:
	mov	DWORD PTR tv76[ebp], 0
$LN4@RunningIns:
	mov	ecx, DWORD PTR tv76[ebp]
	call	?GetGameType@FalconGameEntity@@QAE?AW4FalconGameType@@XZ ; FalconGameEntity::GetGameType
	cmp	eax, 1
	jne	SHORT $LN5@RunningIns
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN6@RunningIns
$LN5@RunningIns:
	mov	DWORD PTR tv80[ebp], 0
$LN6@RunningIns:
	mov	al, BYTE PTR tv80[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?RunningInstantAction@SimulationDriver@@QBE_NXZ ENDP	; SimulationDriver::RunningInstantAction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?InPackage@CampBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InPackage@CampBaseClass@@QAEHXZ PROC			; CampBaseClass::InPackage, COMDAT
; _this$ = ecx

; 274  : 	int InPackage (void)						{	return local_flags & CBC_IN_PACKAGE; }		

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [eax+156]
	and	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?InPackage@CampBaseClass@@QAEHXZ ENDP			; CampBaseClass::InPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ PROC ; CampBaseClass::GetComponents, COMDAT
; _this$ = ecx

; 141  : 	TailInsertList *GetComponents() const		{	return components; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+160]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ENDP ; CampBaseClass::GetComponents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ PROC	; SimVehicleClass::Brain, COMDAT
; _this$ = ecx

; 67   : 	BaseBrain* Brain(void) {return theBrain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ENDP	; SimVehicleClass::Brain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ PROC ; FalconSessionEntity::GetPlayerEntity, COMDAT
; _this$ = ecx

; 138  : 	FalconEntity* GetPlayerEntity(void) const     { return playerEntityPtr.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ENDP ; FalconSessionEntity::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\digi.h
;	COMDAT ?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ PROC	; DigitalBrain::GetCurrentMode, COMDAT
; _this$ = ecx

; 226  : 	DigiMode GetCurrentMode(void) {return curMode;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+136]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ ENDP	; DigitalBrain::GetCurrentMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?SkillLevel@BaseBrain@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkillLevel@BaseBrain@@QAEHXZ PROC			; BaseBrain::SkillLevel, COMDAT
; _this$ = ecx

; 40   :       int SkillLevel(void) {return skillLevel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?SkillLevel@BaseBrain@@QAEHXZ ENDP			; BaseBrain::SkillLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?SetEndFlightVec@OTWDriverClass@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetEndFlightVec@OTWDriverClass@@QAEXMMM@Z PROC		; OTWDriverClass::SetEndFlightVec, COMDAT
; _this$ = ecx

; 468  : 	  {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 469  : 		  endFlightVec.x = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+33528], xmm0

; 470  : 		  endFlightVec.y = y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+33532], xmm0

; 471  : 		  endFlightVec.z = z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+33536], xmm0

; 472  : 	  }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetEndFlightVec@OTWDriverClass@@QAEXMMM@Z ENDP		; OTWDriverClass::SetEndFlightVec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?SetEndFlightPoint@OTWDriverClass@@QAEXMMM@Z
_TEXT	SEGMENT
_Z$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetEndFlightPoint@OTWDriverClass@@QAEXMMM@Z PROC	; OTWDriverClass::SetEndFlightPoint, COMDAT
; _this$ = ecx

; 456  : 	  {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 457  : 		  endFlightPoint.x = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+33516], xmm0

; 458  : 		  endFlightPoint.y = y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+33520], xmm0

; 459  : 		  endFlightPoint.z = z;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [edx+33524], xmm0

; 460  : 		  endFlightPointSet = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+33552], 1

; 461  : 	      float Z = GetGroundLevel( x, y );

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _Z$[ebp]

; 462  : 		  if ( z + 50.0f > Z )

	movss	xmm0, DWORD PTR _z$[ebp]
	addss	xmm0, DWORD PTR __real@42480000
	comiss	xmm0, DWORD PTR _Z$[ebp]
	jbe	SHORT $LN1@SetEndFlig

; 463  : 			  endFlightPoint.z = Z - 50.0f;

	movss	xmm0, DWORD PTR _Z$[ebp]
	subss	xmm0, DWORD PTR __real@42480000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+33524], xmm0
$LN1@SetEndFlig:

; 464  : 
; 465  : 	  }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetEndFlightPoint@OTWDriverClass@@QAEXMMM@Z ENDP	; OTWDriverClass::SetEndFlightPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\otwdrive.h
;	COMDAT ?Scale@OTWDriverClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Scale@OTWDriverClass@@QAEMXZ PROC			; OTWDriverClass::Scale, COMDAT
; _this$ = ecx

; 342  :       float Scale (void) { return objectScale;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+32124]
	mov	esp, ebp
	pop	ebp
	ret	0
?Scale@OTWDriverClass@@QAEMXZ ENDP			; OTWDriverClass::Scale
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSimBaseClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSimBaseClass@@UAEPAXI@Z PROC			; SimBaseClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimBaseClass@@UAE@XZ			; SimBaseClass::~SimBaseClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSimBaseClass@@UAEPAXI@Z ENDP			; SimBaseClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
tv163 = -16						; size = 4
_this$ = -12						; size = 4
_bits$ = -8						; size = 2
_ponTemp$1 = -1						; size = 1
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
?ReadDirty@SimBaseClass@@QAEXPAPAEPAJ@Z PROC		; SimBaseClass::ReadDirty
; _this$ = ecx

; 1250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1251 : 	short	bits;
; 1252 : 
; 1253 : 	memcpychk(&bits, stream, sizeof(short), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bits$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 1254 : 
; 1255 : 	if (bits & DIRTY_SIM_FLAGS)	{

	movsx	eax, WORD PTR _bits$[ebp]
	and	eax, 1
	je	SHORT $LN11@ReadDirty

; 1256 : 		memcpychk(&specialData.flags, stream, sizeof(int), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN11@ReadDirty:

; 1257 : 	}
; 1258 : 
; 1259 : 	if (bits & DIRTY_SIM_COUNTRY) {

	movsx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 2
	je	SHORT $LN10@ReadDirty

; 1260 : 		memcpychk(&specialData.country, stream, sizeof(int), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 180				; 000000b4H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN10@ReadDirty:

; 1261 : 	}
; 1262 : 
; 1263 : 	if (bits & DIRTY_SIM_CHAFF) {

	movsx	edx, WORD PTR _bits$[ebp]
	and	edx, 4
	je	SHORT $LN9@ReadDirty

; 1264 : 		memcpychk(&specialData.ChaffID, stream, sizeof(VU_ID), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN9@ReadDirty:

; 1265 : 	}
; 1266 : 
; 1267 : 	if (bits & DIRTY_SIM_FLARE){

	movsx	eax, WORD PTR _bits$[ebp]
	and	eax, 8
	je	SHORT $LN8@ReadDirty

; 1268 : 		memcpychk(&specialData.FlareID, stream, sizeof(VU_ID), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN8@ReadDirty:

; 1269 : 	}
; 1270 : 
; 1271 : 	if (bits & DIRTY_SIM_STATUS) {

	movsx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN7@ReadDirty

; 1272 : 		memcpychk(&specialData.status, stream, sizeof(int), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN7@ReadDirty:

; 1273 : 	}
; 1274 : 
; 1275 : 	if (bits & DIRTY_SIM_POWER_OUTPUT)

	movsx	edx, WORD PTR _bits$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN6@ReadDirty

; 1276 : 	{	//	MonoPrint ("ReadDirty DIRTY_SIM_POWER_OUTPUT"); 
; 1277 : 		// MLR 3/24/2004 - Copy to both pwr levels
; 1278 : 		unsigned char ponTemp;		
; 1279 : 		memcpychk(&ponTemp, stream, sizeof(unsigned char), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ponTemp$1[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 1280 : 		specialData.powerOutputNet2 = specialData.powerOutputNet = ponTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _ponTemp$1[ebp]
	mov	BYTE PTR [eax+192], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _ponTemp$1[ebp]
	mov	BYTE PTR [edx+200], al

; 1281 : 
; 1282 : 		specialData.powerOutput2    = specialData.powerOutput = (float)ponTemp * 1.5f/255.0f;

	movzx	ecx, BYTE PTR _ponTemp$1[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3fc00000
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR tv163[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	movss	DWORD PTR [edx+188], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	movss	DWORD PTR [eax+196], xmm0
$LN6@ReadDirty:

; 1283 : 		// 2000-11-17 ADDED BY S.G. I NEED TO READ THE ENGINE TEMP AS WELL
; 1284 : 		//		specialData.engineHeatOutputNet = *(unsigned char*)*stream;
; 1285 : 		//		specialData.engineHeatOutput = (float)specialData.engineHeatOutputNet * 1.6f/255.0f;
; 1286 : 		//		*stream += sizeof(specialData.engineHeatOutputNet);
; 1287 : 		// END OF ADDED SECTION
; 1288 : 	}
; 1289 : 
; 1290 : 	if (bits & DIRTY_SIM_RADAR)

	movsx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN5@ReadDirty

; 1291 : 	{		//MonoPrint ("ReadDirty DIRTY_SIM_RADAR");
; 1292 : 		memcpychk(&specialData.rdrAz, stream, sizeof(float), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 1293 : 		memcpychk(&specialData.rdrEl, stream, sizeof(float), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN5@ReadDirty:

; 1294 : 		// This _SHOULD_ be used by the RWR but isn't currently...
; 1295 : 		//		specialData.rdrAzCenter = *(float*)*stream;
; 1296 : 		//		*stream += sizeof(specialData.rdrAzCenter);
; 1297 : 		//		specialData.rdrElCenter = *(float*)*stream;
; 1298 : 		//		*stream += sizeof(specialData.rdrElCenter);
; 1299 : 	}
; 1300 : 
; 1301 : 	if (bits & DIRTY_SIM_RADAR_SLOW)

	movsx	edx, WORD PTR _bits$[ebp]
	and	edx, 128				; 00000080H
	je	SHORT $LN4@ReadDirty

; 1302 : 	{		//MonoPrint ("ReadDirty DIRTY_SIM_RADAR_SLOW");
; 1303 : 		memcpychk(&specialData.rdrNominalRng, stream, sizeof(float), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 1304 : 		memcpychk(&specialData.rdrCycleTime , stream, sizeof(float), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN4@ReadDirty:

; 1305 : 	}
; 1306 : 
; 1307 : 	if (bits & DIRTY_SIM_AFTERBURNER) {

	movsx	eax, WORD PTR _bits$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN3@ReadDirty

; 1308 : 		//	MonoPrint ("ReadDirty DIRTY_SIM_AFTERBURNER");
; 1309 : 		memcpychk(&specialData.afterburner_stage, stream, sizeof(unsigned char), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN3@ReadDirty:

; 1310 : 	}
; 1311 : 
; 1312 : 	if (bits & DIRTY_SIM_POWER_OUTPUT1) // MLR 3/24/2004 - 

	movsx	ecx, WORD PTR _bits$[ebp]
	and	ecx, 512				; 00000200H
	je	SHORT $LN2@ReadDirty

; 1313 : 	{	
; 1314 : 		memcpychk(&specialData.powerOutputNet, stream, sizeof(unsigned char), rem);

	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 1315 : 		specialData.powerOutput = (float)specialData.powerOutputNet * 1.5f/255.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+192]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3fc00000
	divss	xmm0, DWORD PTR __real@437f0000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+188], xmm0
$LN2@ReadDirty:

; 1316 : 	}
; 1317 : 
; 1318 : 	if (bits & DIRTY_SIM_POWER_OUTPUT2){

	movsx	edx, WORD PTR _bits$[ebp]
	and	edx, 1024				; 00000400H
	je	SHORT $LN1@ReadDirty

; 1319 : 	   	// MLR 3/24/2004 - 
; 1320 : 		memcpychk(&specialData.powerOutputNet2, stream, sizeof(unsigned char), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 200				; 000000c8H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 1321 : 		specialData.powerOutput2 = (float)specialData.powerOutputNet2 * 1.5f/255.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+200]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3fc00000
	divss	xmm0, DWORD PTR __real@437f0000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+196], xmm0
$LN1@ReadDirty:

; 1322 : 	}
; 1323 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReadDirty@SimBaseClass@@QAEXPAPAEPAJ@Z ENDP		; SimBaseClass::ReadDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?WriteDirty@SimBaseClass@@QAEXPAPAE@Z PROC		; SimBaseClass::WriteDirty
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1169 : 
; 1170 : 	*(short*)*stream = (short)dirty_simbase;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+228]
	mov	WORD PTR [ecx], ax

; 1171 : 	*stream += sizeof(short);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 1172 : 
; 1173 : 	if (dirty_simbase & DIRTY_SIM_FLAGS)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 1
	je	SHORT $LN11@WriteDirty

; 1174 : 	{
; 1175 : 		*(int*)*stream = specialData.flags;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	DWORD PTR [ecx], eax

; 1176 : 		*stream += sizeof(specialData.flags);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN11@WriteDirty:

; 1177 : 	}
; 1178 : 
; 1179 : 	if (dirty_simbase & DIRTY_SIM_COUNTRY)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 2
	je	SHORT $LN10@WriteDirty

; 1180 : 	{
; 1181 : 		*(int*)*stream = specialData.country;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	DWORD PTR [ecx], eax

; 1182 : 		*stream += sizeof(specialData.country);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN10@WriteDirty:

; 1183 : 	}
; 1184 : 
; 1185 : 	if (dirty_simbase & DIRTY_SIM_CHAFF)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 4
	je	SHORT $LN9@WriteDirty

; 1186 : 	{
; 1187 : 		*(VU_ID*)*stream = specialData.ChaffID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	edx, DWORD PTR [eax+216]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 1188 : 		*stream += sizeof(specialData.ChaffID);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 8
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN9@WriteDirty:

; 1189 : 	}
; 1190 : 
; 1191 : 	if (dirty_simbase & DIRTY_SIM_FLARE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 8
	je	SHORT $LN8@WriteDirty

; 1192 : 	{
; 1193 : 		*(VU_ID*)*stream = specialData.FlareID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	mov	edx, DWORD PTR [eax+224]
	mov	eax, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 1194 : 		*stream += sizeof(specialData.FlareID);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 8
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN8@WriteDirty:

; 1195 : 	}
; 1196 : 
; 1197 : 	if (dirty_simbase & DIRTY_SIM_STATUS)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 16					; 00000010H
	je	SHORT $LN7@WriteDirty

; 1198 : 	{
; 1199 : 		*(long*)*stream = specialData.status;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR [ecx], eax

; 1200 : 		*stream += sizeof(specialData.status);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN7@WriteDirty:

; 1201 : 	}
; 1202 : 
; 1203 : 	if (dirty_simbase & DIRTY_SIM_POWER_OUTPUT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 32					; 00000020H
	je	SHORT $LN6@WriteDirty

; 1204 : 	{
; 1205 : 		*(unsigned char*)*stream = specialData.powerOutputNet;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+192]
	mov	BYTE PTR [ecx], al

; 1206 : 		*stream += sizeof(specialData.powerOutputNet);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN6@WriteDirty:

; 1207 : 	}
; 1208 : 
; 1209 : 	if (dirty_simbase & DIRTY_SIM_RADAR)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	and	edx, 64					; 00000040H
	je	SHORT $LN5@WriteDirty

; 1210 : 	{
; 1211 : 		*(float*)*stream = specialData.rdrAz;

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR [ecx], eax

; 1212 : 		*stream += sizeof(specialData.rdrAz);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 1213 : 		*(float*)*stream = specialData.rdrEl;

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	DWORD PTR [edx], ecx

; 1214 : 		*stream += sizeof(specialData.rdrEl);

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@WriteDirty:

; 1215 : 	}
; 1216 : 
; 1217 : 	if (dirty_simbase & DIRTY_SIM_RADAR_SLOW)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	and	eax, 128				; 00000080H
	je	SHORT $LN4@WriteDirty

; 1218 : 	{
; 1219 : 		*(float*)*stream = specialData.rdrNominalRng;

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [edx], ecx

; 1220 : 		*stream += sizeof(specialData.rdrNominalRng);

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax

; 1221 : 		*(float*)*stream = specialData.rdrCycleTime;

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR [eax], edx

; 1222 : 		*stream += sizeof(specialData.rdrCycleTime);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
$LN4@WriteDirty:

; 1223 : 	}
; 1224 : 
; 1225 : 	if (dirty_simbase & DIRTY_SIM_AFTERBURNER)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	and	ecx, 256				; 00000100H
	je	SHORT $LN3@WriteDirty

; 1226 : 	{
; 1227 : 		*(unsigned char*)*stream = specialData.afterburner_stage;

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+184]
	mov	BYTE PTR [eax], dl

; 1228 : 		*stream += sizeof (specialData.afterburner_stage);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@WriteDirty:

; 1229 : 	}
; 1230 : 
; 1231 : 	if (dirty_simbase & DIRTY_SIM_POWER_OUTPUT1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	and	ecx, 512				; 00000200H
	je	SHORT $LN2@WriteDirty

; 1232 : 	{
; 1233 : 		*(unsigned char*)*stream = specialData.powerOutputNet;

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+192]
	mov	BYTE PTR [eax], dl

; 1234 : 		*stream += sizeof(specialData.powerOutputNet);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@WriteDirty:

; 1235 : 	}
; 1236 : 
; 1237 : 	if (dirty_simbase & DIRTY_SIM_POWER_OUTPUT2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN1@WriteDirty

; 1238 : 	{
; 1239 : 		*(unsigned char*)*stream = specialData.powerOutputNet2;

	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+200]
	mov	BYTE PTR [eax], dl

; 1240 : 		*stream += sizeof(specialData.powerOutputNet2);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@WriteDirty:

; 1241 : 	}
; 1242 : 
; 1243 : 	dirty_simbase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0

; 1244 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?WriteDirty@SimBaseClass@@QAEXPAPAE@Z ENDP		; SimBaseClass::WriteDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bits$ = 8						; size = 4
_score$ = 12						; size = 4
?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z PROC ; SimBaseClass::MakeSimBaseDirty
; _this$ = ecx

; 1330 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1331 : 	if (!IsLocal()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@MakeSimBas

; 1332 : 		return;

	jmp	SHORT $LN2@MakeSimBas
$LN1@MakeSimBas:

; 1333 : 	}
; 1334 : 	dirty_simbase |= bits;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	or	edx, DWORD PTR _bits$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], edx

; 1335 : 	MakeDirty (DIRTY_SIM_BASE, score);

	mov	ecx, DWORD PTR _score$[ebp]
	push	ecx
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeDirty@FalconEntity@@QAEXW4Dirty_Class@@W4Dirtyness@@@Z ; FalconEntity::MakeDirty
$LN2@MakeSimBas:

; 1336 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ENDP ; SimBaseClass::MakeSimBaseDirty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z PROC		; SimBaseClass::GetFocusPoint
; _this$ = ecx

; 798  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 799  : 	x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	eax, DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]

; 800  : 	y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	ecx, DWORD PTR _y$[ebp]
	fstp	DWORD PTR [ecx]

; 801  : 	z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	mov	edx, DWORD PTR _z$[ebp]
	fstp	DWORD PTR [edx]

; 802  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetFocusPoint@SimBaseClass@@UAEXAAM00@Z ENDP		; SimBaseClass::GetFocusPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlightCallsign@SimBaseClass@@QAEHXZ PROC		; SimBaseClass::GetFlightCallsign
; _this$ = ecx

; 860  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 861  : 	return (callsignIdx - 1) * 4 + slotNumber;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
	lea	eax, DWORD PTR [eax+ecx*4-4]

; 862  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFlightCallsign@SimBaseClass@@QAEHXZ ENDP		; SimBaseClass::GetFlightCallsign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPilotVoiceId@SimBaseClass@@QAEHXZ PROC		; SimBaseClass::GetPilotVoiceId
; _this$ = ecx

; 850  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 851  : 	if(campaignObject.get() > (VuEntity*)MAX_IA_CAMP_UNIT) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	cmp	eax, 65536				; 00010000H
	jbe	SHORT $LN2@GetPilotVo

; 852  : 		return ((FlightClass*) campaignObject.get())->GetPilotVoiceID(slotNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	ecx, eax
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	movzx	eax, al
	jmp	SHORT $LN3@GetPilotVo

; 853  : 	}
; 854  : 	else {

	jmp	SHORT $LN3@GetPilotVo
$LN2@GetPilotVo:

; 855  : 		return slotNumber;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+236]
$LN3@GetPilotVo:

; 856  : 	}
; 857  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPilotVoiceId@SimBaseClass@@QAEHXZ ENDP		; SimBaseClass::GetPilotVoiceId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RemovalCallback@SimBaseClass@@UAEHXZ PROC		; SimBaseClass::RemovalCallback
; _this$ = ecx

; 818  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 819  : 	if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN1@RemovalCal

; 820  : 		Sleep();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN1@RemovalCal:

; 821  : 	}
; 822  : 
; 823  : 	SimDriver.ObjsWithNoCampaignParentList->Remove(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+24
	call	?Remove@VuCollection@@QAEHPAVVuEntity@@@Z ; VuCollection::Remove

; 824  : 	return FalconEntity::RemovalCallback();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemovalCallback@FalconEntity@@UAEHXZ	; FalconEntity::RemovalCallback

; 825  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RemovalCallback@SimBaseClass@@UAEHXZ ENDP		; SimBaseClass::RemovalCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InsertionCallback@SimBaseClass@@UAEHXZ PROC		; SimBaseClass::InsertionCallback
; _this$ = ecx

; 805  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 806  : 	CalcTransformMatrix (this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 807  : 
; 808  : 	if (!campaignObject){

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??7?$VuBin@VCampBaseClass@@@@QBE_NXZ	; VuBin<CampBaseClass>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@InsertionC

; 809  : 		// This is not a campaign controlled object
; 810  : 		// put it in our list of objects with no campaign parent
; 811  : 		SimDriver.ObjsWithNoCampaignParentList->ForcedInsert(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+24
	call	?ForcedInsert@FalconPrivateList@@QAEHPAVVuEntity@@@Z ; FalconPrivateList::ForcedInsert
$LN1@InsertionC:

; 812  : 	}
; 813  : 
; 814  : 	return FalconEntity::InsertionCallback();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertionCallback@VuEntity@@MAEHXZ	; VuEntity::InsertionCallback

; 815  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InsertionCallback@SimBaseClass@@UAEHXZ ENDP		; SimBaseClass::InsertionCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@SimBaseClass@@UAEHPAVVuTransferEvent@@@Z PROC	; SimBaseClass::Handle
; _this$ = ecx

; 734  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 735  : 	ChangeOwner(event->newOwnerId_);

	mov	eax, DWORD PTR _event$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR [eax+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+328]
	call	eax

; 736  : 	return 1;

	mov	eax, 1

; 737  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@SimBaseClass@@UAEHPAVVuTransferEvent@@@Z ENDP	; SimBaseClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@SimBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z PROC ; SimBaseClass::Handle
; _this$ = ecx

; 729  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : 	return VuEntity::Handle(event);

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@VuEntity@@UAEHPAVVuPositionUpdateEvent@@@Z ; VuEntity::Handle

; 731  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@SimBaseClass@@UAEHPAVVuPositionUpdateEvent@@@Z ENDP ; SimBaseClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@SimBaseClass@@UAEHPAVVuFullUpdateEvent@@@Z PROC	; SimBaseClass::Handle
; _this$ = ecx

; 724  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 725  :    return (VuEntity::Handle(event));

	mov	eax, DWORD PTR _event$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Handle@VuEntity@@UAEHPAVVuFullUpdateEvent@@@Z ; VuEntity::Handle

; 726  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@SimBaseClass@@UAEHPAVVuFullUpdateEvent@@@Z ENDP	; SimBaseClass::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_camp_object$ = -20					; size = 8
_saveSize$ = -12					; size = 4
_this$ = -8						; size = 4
_flag$ = -1						; size = 1
_file$ = 8						; size = 4
?Save@SimBaseClass@@UAEHPAU_iobuf@@@Z PROC		; SimBaseClass::Save
; _this$ = ecx

; 697  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 698  : int saveSize = FalconEntity::Save (file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@FalconEntity@@UAEHPAU_iobuf@@@Z	; FalconEntity::Save
	mov	DWORD PTR _saveSize$[ebp], eax

; 699  : VU_ID	camp_object;

	lea	ecx, DWORD PTR _camp_object$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 700  : char flag;
; 701  : 
; 702  :    fwrite (SpecialData(), sizeof (SimBaseSpecialData), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ ; SimBaseClass::SpecialData
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 703  : 
; 704  :    if ((int)campaignObject > MAX_IA_CAMP_UNIT)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??B?$VuBin@VCampBaseClass@@@@QBE_NXZ	; VuBin<CampBaseClass>::operator bool
	movzx	edx, al
	cmp	edx, 65536				; 00010000H
	jle	SHORT $LN2@Save

; 705  :    {
; 706  : 	   flag = 1;

	mov	BYTE PTR _flag$[ebp], 1

; 707  : 	   camp_object = campaignObject->Id();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _camp_object$[ebp], ecx
	mov	DWORD PTR _camp_object$[ebp+4], edx

; 708  : 	   fwrite (&flag, sizeof (char), 1, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	1
	lea	ecx, DWORD PTR _flag$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 709  : 	   fwrite (&camp_object, sizeof (VU_ID), 1, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	8
	lea	eax, DWORD PTR _camp_object$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 710  :    }
; 711  :    else

	jmp	SHORT $LN1@Save
$LN2@Save:

; 712  :    {
; 713  : 	   flag = 0;

	mov	BYTE PTR _flag$[ebp], 0

; 714  : 	   fwrite (&flag, sizeof (char), 1, file);

	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	1
	lea	edx, DWORD PTR _flag$[ebp]
	push	edx
	call	_fwrite
	add	esp, 16					; 00000010H

; 715  : 	   fwrite (&campaignObject, sizeof (int), 1, file);

	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H
$LN1@Save:

; 716  :    }
; 717  : 
; 718  :    fwrite (&callsignIdx, sizeof (int), 1, file);

	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 719  :    return (saveSize + sizeof (SimBaseSpecialData) + sizeof (char) + 
; 720  : 	   sizeof (VU_ID) + sizeof (int));

	mov	eax, DWORD PTR _saveSize$[ebp]
	add	eax, 93					; 0000005dH

; 721  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@SimBaseClass@@UAEHPAU_iobuf@@@Z ENDP		; SimBaseClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_camp_object$ = -20					; size = 8
_saveSize$ = -12					; size = 4
_this$ = -8						; size = 4
_flag$ = -1						; size = 1
_stream$ = 8						; size = 4
?Save@SimBaseClass@@UAEHPAPAE@Z PROC			; SimBaseClass::Save
; _this$ = ecx

; 665  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 666  : int saveSize = FalconEntity::Save (stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@FalconEntity@@UAEHPAPAE@Z		; FalconEntity::Save
	mov	DWORD PTR _saveSize$[ebp], eax

; 667  : char flag;
; 668  : 
; 669  :    memcpy (*stream, SpecialData(), sizeof (SimBaseSpecialData));

	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ ; SimBaseClass::SpecialData
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 670  :    *stream += sizeof (SimBaseSpecialData);

	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [edx], ecx

; 671  :    VU_ID	camp_object;

	lea	ecx, DWORD PTR _camp_object$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 672  :    if ((int)campaignObject > MAX_IA_CAMP_UNIT)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??B?$VuBin@VCampBaseClass@@@@QBE_NXZ	; VuBin<CampBaseClass>::operator bool
	movzx	eax, al
	cmp	eax, 65536				; 00010000H
	jle	SHORT $LN2@Save

; 673  :    {
; 674  : 	   flag = 1;

	mov	BYTE PTR _flag$[ebp], 1

; 675  : 	   memcpy (*stream, &flag, sizeof (char));

	push	1
	lea	ecx, DWORD PTR _flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 676  : 	   *stream += sizeof (char);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 677  : 	   camp_object = campaignObject->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _camp_object$[ebp], edx
	mov	DWORD PTR _camp_object$[ebp+4], eax

; 678  : 	   memcpy (*stream, &camp_object, sizeof (VU_ID));

	push	8
	lea	ecx, DWORD PTR _camp_object$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 679  : 	   *stream += sizeof (VU_ID);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 8
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 680  :    }
; 681  :    else

	jmp	SHORT $LN1@Save
$LN2@Save:

; 682  :    {
; 683  : 	   flag = 0;

	mov	BYTE PTR _flag$[ebp], 0

; 684  : 	   memcpy (*stream, &flag, sizeof (char));

	push	1
	lea	ecx, DWORD PTR _flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 685  : 	   *stream += sizeof (char);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 686  : 	   memcpy (*stream, &campaignObject, sizeof (int));

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 687  : 	   *stream += sizeof (int);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx
$LN1@Save:

; 688  :    }
; 689  :    memcpy (*stream, &callsignIdx, sizeof (int));

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 690  :    *stream += sizeof (int);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 691  : 
; 692  :    return (saveSize + sizeof (SimBaseSpecialData) + sizeof (char) +
; 693  : 	   sizeof (VU_ID) + sizeof (int));

	mov	eax, DWORD PTR _saveSize$[ebp]
	add	eax, 93					; 0000005dH

; 694  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@SimBaseClass@@UAEHPAPAE@Z ENDP			; SimBaseClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = -4						; size = 4
?SaveSize@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::SaveSize
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 653  : int size = FalconEntity::SaveSize() +
; 654  : 	   sizeof (SimBaseSpecialData); // Special Data for each frame

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@FalconEntity@@UAEHXZ		; FalconEntity::SaveSize
	add	eax, 80					; 00000050H
	mov	DWORD PTR _size$[ebp], eax

; 655  : 	if ((int)campaignObject > MAX_IA_CAMP_UNIT)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??B?$VuBin@VCampBaseClass@@@@QBE_NXZ	; VuBin<CampBaseClass>::operator bool
	movzx	eax, al
	cmp	eax, 65536				; 00010000H
	jle	SHORT $LN2@SaveSize

; 656  : 		size += sizeof (VU_ID);

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 8
	mov	DWORD PTR _size$[ebp], ecx

; 657  : 	else

	jmp	SHORT $LN1@SaveSize
$LN2@SaveSize:

; 658  : 		size += sizeof (int);

	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 4
	mov	DWORD PTR _size$[ebp], edx
$LN1@SaveSize:

; 659  : 	size += sizeof (int);                 // Callsign idx

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 4
	mov	DWORD PTR _size$[ebp], eax

; 660  : 	size += sizeof (char);                // id type flag

	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx

; 661  : 	return size;

	mov	eax, DWORD PTR _size$[ebp]

; 662  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z PROC	; SimBaseClass::SetThreat
; _this$ = ecx

; 1160 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1161 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ENDP	; SimBaseClass::SetThreat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?reset@?$VuBin@VFalconEntity@@@@QAEXPAVFalconEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newe$ = 8						; size = 4
?reset@?$VuBin@VFalconEntity@@@@QAEXPAVFalconEntity@@@Z PROC ; VuBin<FalconEntity>::reset, COMDAT
; _this$ = ecx

; 60   : 	void reset(E *newe = NULL){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		if (newe == e){ return; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newe$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@reset
	jmp	SHORT $LN2@reset
$LN1@reset:

; 62   : 		VuReferenceEntity(newe); // ref new pointer

	mov	edx, DWORD PTR _newe$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 63   : 		VuDeReferenceEntity(e);  // unref old pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 64   : 		e = newe;                // get new pointer

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newe$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@reset:

; 65   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reset@?$VuBin@VFalconEntity@@@@QAEXPAVFalconEntity@@@Z ENDP ; VuBin<FalconEntity>::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??1?$VuBin@VFalconEntity@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VuBin@VFalconEntity@@@@QAE@XZ PROC			; VuBin<FalconEntity>::~VuBin<FalconEntity>, COMDAT
; _this$ = ecx

; 19   : 	~VuBin(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 		VuDeReferenceEntity((VuEntity *)e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 21   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VuBin@VFalconEntity@@@@QAE@XZ ENDP			; VuBin<FalconEntity>::~VuBin<FalconEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z PROC ; VuBin<FalconEntity>::VuBin<FalconEntity>, COMDAT
; _this$ = ecx

; 11   : 	explicit VuBin(E *e = NULL) : e(e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax], ecx

; 12   : 		VuReferenceEntity(e);

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 13   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z ENDP ; VuBin<FalconEntity>::VuBin<FalconEntity>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T2 = -316						; size = 8
$T3 = -308						; size = 8
_droll$4 = -300						; size = 4
_dy$ = -296						; size = 4
_ataFrom$5 = -292					; size = 4
_dx$ = -288						; size = 4
tv1059 = -284						; size = 4
tv1411 = -280						; size = 4
tv1015 = -276						; size = 4
tv1011 = -272						; size = 4
tv1288 = -268						; size = 4
tv1027 = -264						; size = 4
_holdingMissileRangeSquared$6 = -260			; size = 4
tv1415 = -256						; size = 4
tv1380 = -252						; size = 4
tv1284 = -248						; size = 4
tv1427 = -244						; size = 4
tv1250 = -240						; size = 4
tv1376 = -236						; size = 4
$T7 = -232						; size = 4
tv1370 = -228						; size = 4
tv1031 = -224						; size = 4
tv1425 = -220						; size = 4
tv1407 = -216						; size = 4
tv1366 = -212						; size = 4
tv1296 = -208						; size = 4
tv1360 = -204						; size = 4
tv1292 = -200						; size = 4
tv1423 = -196						; size = 4
tv1413 = -192						; size = 4
tv1356 = -188						; size = 4
tv1280 = -184						; size = 4
_incomingMissileRangeSquared$8 = -180			; size = 4
tv1276 = -176						; size = 4
tv1329 = -172						; size = 4
_ata$9 = -168						; size = 4
tv1421 = -164						; size = 4
_el$10 = -160						; size = 4
tv1325 = -156						; size = 4
tv1065 = -152						; size = 4
tv1319 = -148						; size = 4
_rangeSquare$11 = -144					; size = 4
tv1419 = -140						; size = 4
tv1409 = -136						; size = 4
tv1315 = -132						; size = 4
tv1023 = -128						; size = 4
tv1309 = -124						; size = 4
tv1019 = -120						; size = 4
tv1417 = -116						; size = 4
tv1405 = -112						; size = 4
tv1305 = -108						; size = 4
_az$12 = -104						; size = 4
_missileRangeSquared$13 = -100				; size = 4
tv335 = -96						; size = 4
_ourFOV$14 = -92					; size = 4
$T15 = -88						; size = 4
_ourCenter$16 = -84					; size = 4
_dz$17 = -80						; size = 4
tv346 = -76						; size = 4
_eyeball$18 = -72					; size = 4
_dy$19 = -68						; size = 4
_data1$ = -64						; size = 2
_i$20 = -60						; size = 4
_data0$ = -56						; size = 2
_dx$21 = -52						; size = 4
_dz$22 = -48						; size = 4
_canSee$23 = -44					; size = 4
_dy$24 = -40						; size = 4
_mesgType$ = -36					; size = 2
_radioMessage$ = -32					; size = 4
_dx$25 = -28						; size = 4
_speaker$ = -24						; size = 4
_data2$ = -20						; size = 2
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_missile$ = 8						; size = 4
_clearAll$ = 12						; size = 4
?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z PROC	; SimBaseClass::SetIncomingMissile
; _this$ = ecx

; 879  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 880  : 	FalconRadioChatterMessage	*radioMessage=NULL;

	mov	DWORD PTR _radioMessage$[ebp], 0

; 881  : 	short mesgType=0;

	xor	eax, eax
	mov	WORD PTR _mesgType$[ebp], ax

; 882  : 	short data0=-1, data1=-1, data2=-1;

	or	ecx, -1
	mov	WORD PTR _data0$[ebp], cx
	or	edx, -1
	mov	WORD PTR _data1$[ebp], dx
	or	eax, -1
	mov	WORD PTR _data2$[ebp], ax

; 883  : 	SimBaseClass* speaker=NULL;

	mov	DWORD PTR _speaker$[ebp], 0

; 884  : 	float dx=0.0F, dy=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0

; 885  : 
; 886  :    // Is the target the player
; 887  :    if (missile && this == SimDriver.GetPlayerEntity())

	cmp	DWORD PTR _missile$[ebp], 0
	je	$LN37@SetIncomin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	$LN37@SetIncomin

; 888  : 	{
; 889  :       // Does he have a wingman?
; 890  :       // Component list is zero based
; 891  :       if (SimDriver.RunningInstantAction())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RunningInstantAction@SimulationDriver@@QBE_NXZ ; SimulationDriver::RunningInstantAction
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN62@SetIncomin

; 892  :          speaker = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _speaker$[ebp], edx

; 893  :       else

	jmp	SHORT $LN61@SetIncomin
$LN62@SetIncomin:

; 894  :          speaker = SimDriver.GetPlayerEntity()->GetCampaignObject()->GetComponentNumber(1);

	push	1
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	mov	ecx, eax
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentNumber@CampBaseClass@@QAEPAVSimBaseClass@@H@Z ; CampBaseClass::GetComponentNumber
	mov	DWORD PTR _speaker$[ebp], eax
$LN61@SetIncomin:

; 895  : 
; 896  :       if (speaker && incomingMissile[0] != missile)

	cmp	DWORD PTR _speaker$[ebp], 0
	je	$LN37@SetIncomin
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+420]
	cmp	edx, DWORD PTR _missile$[ebp]
	je	$LN37@SetIncomin

; 897  :       {
; 898  : // 2000-10-02 ADDED BY S.G. Wingman NEEDS TO BE CLOSE TO THE SHOOTER AND NOT DEFENSIVE (UNLESS ACE) BEFORE A LAUNCH WARNING IS SAID
; 899  : 		float dx, dy, dz, rangeSquare;
; 900  : 
; 901  : 		// 2000-10-10 Instead of using the distance between us and our wingman, I'll use the distance between our wingman and the missile.
; 902  : 		// He must be able to see (we won't bother doing frame occlusion here though) it before he can warn the player.
; 903  : 		// We will assume if the missile was launch from 6 NM or closer, he WILL see it unless other conditions prevent him from seeing it
; 904  : 		// This will get the REAL range between our wingman and us.
; 905  : 		dx = speaker->XPos() - missile->XPos();

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1011[ebp]
	movss	xmm0, DWORD PTR tv1011[ebp]
	mov	ecx, DWORD PTR _missile$[ebp]
	movss	DWORD PTR tv1405[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1015[ebp]
	movss	xmm0, DWORD PTR tv1405[ebp]
	subss	xmm0, DWORD PTR tv1015[ebp]
	movss	DWORD PTR _dx$25[ebp], xmm0

; 906  : 		dy = speaker->YPos() - missile->YPos();

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1019[ebp]
	movss	xmm0, DWORD PTR tv1019[ebp]
	mov	ecx, DWORD PTR _missile$[ebp]
	movss	DWORD PTR tv1407[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1023[ebp]
	movss	xmm0, DWORD PTR tv1407[ebp]
	subss	xmm0, DWORD PTR tv1023[ebp]
	movss	DWORD PTR _dy$19[ebp], xmm0

; 907  : 		dz = speaker->ZPos() - missile->ZPos();

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1027[ebp]
	movss	xmm0, DWORD PTR tv1027[ebp]
	mov	ecx, DWORD PTR _missile$[ebp]
	movss	DWORD PTR tv1409[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1031[ebp]
	movss	xmm0, DWORD PTR tv1409[ebp]
	subss	xmm0, DWORD PTR tv1031[ebp]
	movss	DWORD PTR _dz$17[ebp], xmm0

; 908  : 		rangeSquare = dx*dx + dy*dy + dz*dz;

	movss	xmm0, DWORD PTR _dx$25[ebp]
	mulss	xmm0, DWORD PTR _dx$25[ebp]
	movss	xmm1, DWORD PTR _dy$19[ebp]
	mulss	xmm1, DWORD PTR _dy$19[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$17[ebp]
	mulss	xmm1, DWORD PTR _dz$17[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rangeSquare$11[ebp], xmm0

; 909  : 
; 910  : 		if (rangeSquare < 6.0f * NM_TO_FT * 6.0f * NM_TO_FT &&				// Range is below 6 NM AND 
; 911  : 			(SimDriver.RunningInstantAction() ||							// We're in instant action (in thise case rangeSquare will be 0 because it's the player) OR
; 912  : 			 ((SimVehicleClass *)speaker)->Brain()->SkillLevel() == 4 ||		// Skill of wingman is ace OR
; 913  : 			 (((DigitalBrain *)((SimVehicleClass *)speaker)->Brain())->GetCurrentMode() != DigitalBrain::GunsJinkMode &&		// Wingman not defensive
; 914  : 			 ((DigitalBrain *)((SimVehicleClass *)speaker)->Brain())->GetCurrentMode()  != DigitalBrain::MissileDefeatMode &&
; 915  : 			 ((DigitalBrain *)((SimVehicleClass *)speaker)->Brain())->GetCurrentMode()  != DigitalBrain::DefensiveModes))) {

	movss	xmm0, DWORD PTR __real@4e9e71e5
	comiss	xmm0, DWORD PTR _rangeSquare$11[ebp]
	jbe	$LN37@SetIncomin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?RunningInstantAction@SimulationDriver@@QBE_NXZ ; SimulationDriver::RunningInstantAction
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN58@SetIncomin
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	cmp	eax, 4
	je	SHORT $LN58@SetIncomin
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ ; DigitalBrain::GetCurrentMode
	cmp	eax, 3
	je	$LN37@SetIncomin
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ ; DigitalBrain::GetCurrentMode
	cmp	eax, 4
	je	$LN37@SetIncomin
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?GetCurrentMode@DigitalBrain@@QAE?AW4DigiMode@1@XZ ; DigitalBrain::GetCurrentMode
	cmp	eax, 6
	je	$LN37@SetIncomin
$LN58@SetIncomin:

; 916  : 
; 917  : // END OF ADDED SECTION EXCEPT FOR THE INDENTATION OF THE FOLLOWING CODE
; 918  : 			 if (missile->EntityType()->classInfo_[VU_STYPE] == STYPE_MISSILE_AIR_AIR)

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 1
	jne	SHORT $LN57@SetIncomin

; 919  : 			 {
; 920  :    			  mesgType = rcINBOUND;

	mov	eax, 98					; 00000062H
	mov	WORD PTR _mesgType$[ebp], ax

; 921  : 				data0 = (short)(missile->Type() - VU_LAST_ENTITY_TYPE);

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	ecx, ax
	sub	ecx, 100				; 00000064H
	mov	WORD PTR _data0$[ebp], cx
	jmp	$LN38@SetIncomin
$LN57@SetIncomin:

; 922  : //            MonoPrint ("Playing Air Missile message %d\n", data0);
; 923  : 			 }
; 924  : 			 else if (missile->EntityType()->classInfo_[VU_STYPE] == STYPE_MISSILE_SURF_AIR)

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 5
	jne	$LN55@SetIncomin

; 925  : 			 {
; 926  : 			     ShiAssert(missile->IsMissile());
; 927  :    			  mesgType = rcSAM;

	mov	ecx, 181				; 000000b5H
	mov	WORD PTR _mesgType$[ebp], cx

; 928  : 				data0 = ((FlightClass*)speaker->GetCampaignObject())->callsign_id;

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	dx, BYTE PTR [eax+425]
	mov	WORD PTR _data0$[ebp], dx

; 929  : 				data1 = (short)((((FlightClass*)speaker->GetCampaignObject())->callsign_num - 1) * 4 + 2);

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	movzx	eax, BYTE PTR [eax+426]
	lea	ecx, DWORD PTR [eax*4-2]
	mov	WORD PTR _data1$[ebp], cx

; 930  : 				// Find location of launch
; 931  : 				// Note missile vu entity doesn't actually have a position yet
; 932  : 				dx = ((MissileClass*)missile)->x - speaker->XPos();

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1059[ebp]
	mov	edx, DWORD PTR _missile$[ebp]
	movss	xmm0, DWORD PTR [edx+756]
	subss	xmm0, DWORD PTR tv1059[ebp]
	movss	DWORD PTR _dx$25[ebp], xmm0

; 933  : 				dy = ((MissileClass*)missile)->y - speaker->YPos();

	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1065[ebp]
	mov	eax, DWORD PTR _missile$[ebp]
	movss	xmm0, DWORD PTR [eax+760]
	subss	xmm0, DWORD PTR tv1065[ebp]
	movss	DWORD PTR _dy$19[ebp], xmm0

; 934  : 				dx = (float)atan2 (dy, dx);

	cvtss2sd xmm0, DWORD PTR _dx$25[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$19[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _dx$25[ebp]

; 935  : 				if (dx < -157.5F * DTR)

	movss	xmm0, DWORD PTR __real@c02fedde
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN54@SetIncomin

; 936  : 				   data2 = 5; // South

	mov	ecx, 5
	mov	WORD PTR _data2$[ebp], cx
	jmp	$LN39@SetIncomin
$LN54@SetIncomin:

; 937  : 				else if (dx < -112.5F * DTR)

	movss	xmm0, DWORD PTR __real@bffb53cf
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN52@SetIncomin

; 938  : 				   data2 = 6; // Southwest

	mov	edx, 6
	mov	WORD PTR _data2$[ebp], dx
	jmp	$LN39@SetIncomin
$LN52@SetIncomin:

; 939  : 				else if (dx < -67.5F * DTR)

	movss	xmm0, DWORD PTR __real@bf96cbe3
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN50@SetIncomin

; 940  : 				   data2 = 7; // West

	mov	eax, 7
	mov	WORD PTR _data2$[ebp], ax
	jmp	$LN39@SetIncomin
$LN50@SetIncomin:

; 941  : 				else if (dx < -22.5F * DTR)

	movss	xmm0, DWORD PTR __real@bec90fd9
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN48@SetIncomin

; 942  : 				   data2 = 0; // Northwest

	xor	ecx, ecx
	mov	WORD PTR _data2$[ebp], cx
	jmp	SHORT $LN39@SetIncomin
$LN48@SetIncomin:

; 943  : 				else if (dx <  22.5F * DTR)

	movss	xmm0, DWORD PTR __real@3ec90fd9
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN46@SetIncomin

; 944  : 				   data2 = 1; // North

	mov	edx, 1
	mov	WORD PTR _data2$[ebp], dx
	jmp	SHORT $LN39@SetIncomin
$LN46@SetIncomin:

; 945  : 				else if (dx <  67.5F * DTR)

	movss	xmm0, DWORD PTR __real@3f96cbe3
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN44@SetIncomin

; 946  : 				   data2 = 2; // Northeast

	mov	eax, 2
	mov	WORD PTR _data2$[ebp], ax
	jmp	SHORT $LN39@SetIncomin
$LN44@SetIncomin:

; 947  : 				else if (dx <  112.5F * DTR)

	movss	xmm0, DWORD PTR __real@3ffb53cf
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN42@SetIncomin

; 948  : 				   data2 = 3; // East;

	mov	ecx, 3
	mov	WORD PTR _data2$[ebp], cx
	jmp	SHORT $LN39@SetIncomin
$LN42@SetIncomin:

; 949  : 				else if (dx <  157.5F * DTR)

	movss	xmm0, DWORD PTR __real@402fedde
	comiss	xmm0, DWORD PTR _dx$25[ebp]
	jbe	SHORT $LN40@SetIncomin

; 950  : 				   data2 = 4; // Southeast

	mov	edx, 4
	mov	WORD PTR _data2$[ebp], dx

; 951  : 				else

	jmp	SHORT $LN39@SetIncomin
$LN40@SetIncomin:

; 952  : 				   data2 = 5; // South again

	mov	eax, 5
	mov	WORD PTR _data2$[ebp], ax
$LN39@SetIncomin:

; 953  : 				//MonoPrint ("Playing SAM Missile message %d %d %d\n", data0, data1, data2);
; 954  : 			 }
; 955  : 			 else

	jmp	SHORT $LN38@SetIncomin
$LN55@SetIncomin:

; 956  :    			  mesgType = 0;

	xor	ecx, ecx
	mov	WORD PTR _mesgType$[ebp], cx
$LN38@SetIncomin:

; 957  : 
; 958  : 			 if (mesgType)

	movsx	edx, WORD PTR _mesgType$[ebp]
	test	edx, edx
	je	$LN37@SetIncomin

; 959  : 			 {
; 960  : 				 radioMessage = new FalconRadioChatterMessage( Id() , FalconLocalGame );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN68@SetIncomin
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN66@SetIncomin
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv335[ebp], eax
	jmp	SHORT $LN67@SetIncomin
$LN66@SetIncomin:
	mov	DWORD PTR tv335[ebp], 0
$LN67@SetIncomin:
	push	1
	mov	ecx, DWORD PTR tv335[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv346[ebp], eax
	jmp	SHORT $LN69@SetIncomin
$LN68@SetIncomin:
	mov	DWORD PTR tv346[ebp], 0
$LN69@SetIncomin:
	mov	eax, DWORD PTR tv346[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _radioMessage$[ebp], ecx

; 961  : 				 radioMessage->dataBlock.edata[0] = data0;

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _data0$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 962  : 				 radioMessage->dataBlock.edata[1] = data1;

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _data1$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 963  : 				 radioMessage->dataBlock.edata[2] = data2;

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	cx, WORD PTR _data2$[ebp]
	mov	WORD PTR [eax+edx+64], cx

; 964  : //				 radioMessage->dataBlock.voice_id = (uchar)speaker->GetPilotVoiceId();
; 965  : 				 radioMessage->dataBlock.voice_id = ((FlightClass*)(((AircraftClass*)speaker)->GetCampaignObject()))->GetPilotVoiceID(((AircraftClass*)speaker)->GetCampaignObject()->GetComponentIndex(((AircraftClass*)speaker)));

	mov	edx, DWORD PTR _speaker$[ebp]
	push	edx
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetComponentIndex@CampBaseClass@@QAEHPAVVuEntity@@@Z ; CampBaseClass::GetComponentIndex
	push	eax
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?GetPilotVoiceID@FlightClass@@QAEEH@Z	; FlightClass::GetPilotVoiceID
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+61], al

; 966  : 				 radioMessage->dataBlock.from = speaker->GetCampaignObject()->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _speaker$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 967  : 				 radioMessage->dataBlock.to = MESSAGE_FOR_FLIGHT;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	BYTE PTR [ecx+60], 3

; 968  : 				 radioMessage->dataBlock.message = mesgType;

	mov	edx, DWORD PTR _radioMessage$[ebp]
	mov	ax, WORD PTR _mesgType$[ebp]
	mov	WORD PTR [edx+62], ax

; 969  : 				 radioMessage->dataBlock.time_to_play = 50;

	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [ecx+56], 50			; 00000032H

; 970  : 
; 971  : 				radioMessage->dataBlock.time_to_play *= (rand() % 5) + 1;

	call	_rand
	cdq
	mov	ecx, 5
	idiv	ecx
	add	edx, 1
	mov	eax, DWORD PTR _radioMessage$[ebp]
	imul	edx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _radioMessage$[ebp]
	mov	DWORD PTR [ecx+56], edx

; 972  : 
; 973  : 				FalconSendMessage (radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN37@SetIncomin:

; 974  : 			 } // SAM or AIM
; 975  : 		} // END OF ADDED INDENTATION
; 976  :       } // Has wingman
; 977  :    } // Is player
; 978  : 
; 979  : // 2000-11-17 ADDED BY S.G. SO IF WE HAVE TRUE FOR clearAll, THAT'S WHAT WE DO...
; 980  : 	if (clearAll == TRUE) {

	cmp	DWORD PTR _clearAll$[ebp], 1
	jne	SHORT $LN36@SetIncomin

; 981  : 		// Clean up the array and that's it...
; 982  : 		for (int i = 0; i < sizeof (incomingMissile) / sizeof (SimBaseClass *); i++) {

	mov	DWORD PTR _i$20[ebp], 0
	jmp	SHORT $LN35@SetIncomin
$LN34@SetIncomin:
	mov	eax, DWORD PTR _i$20[ebp]
	add	eax, 1
	mov	DWORD PTR _i$20[ebp], eax
$LN35@SetIncomin:
	cmp	DWORD PTR _i$20[ebp], 2
	jae	SHORT $LN33@SetIncomin

; 983  : 			if (incomingMissile[i]) {

	mov	ecx, DWORD PTR _i$20[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+420], 0
	je	SHORT $LN32@SetIncomin

; 984  : 				VuDeReferenceEntity( incomingMissile[i]);

	mov	eax, DWORD PTR _i$20[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+420]
	push	edx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 985  : 				incomingMissile[i] = NULL;

	mov	eax, DWORD PTR _i$20[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+420], 0
$LN32@SetIncomin:

; 986  : 			}
; 987  : 		}

	jmp	SHORT $LN34@SetIncomin
$LN33@SetIncomin:

; 988  : 		return;

	jmp	$LN64@SetIncomin
$LN36@SetIncomin:

; 989  : 	}
; 990  : 	
; 991  : 	// If it's not an airplane or the target is the player, no need to do our fancy tests...
; 992  : 	if (!IsAirplane() || this == SimDriver.GetPlayerEntity()) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	SHORT $LN30@SetIncomin
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	$LN31@SetIncomin
$LN30@SetIncomin:

; 993  : 		if ( incomingMissile[0] && (missile == NULL || incomingMissile[0]->IsDead()) )

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+420], 0
	je	SHORT $LN29@SetIncomin
	cmp	DWORD PTR _missile$[ebp], 0
	je	SHORT $LN28@SetIncomin
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+420]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx+420]
	mov	edx, DWORD PTR [esi+340]
	call	edx
	test	eax, eax
	je	SHORT $LN29@SetIncomin
$LN28@SetIncomin:

; 994  : 		{
; 995  : 			VuDeReferenceEntity( incomingMissile[0] );

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+420]
	push	edx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 996  : 			incomingMissile[0] = NULL;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+420], 0
$LN29@SetIncomin:

; 997  : 		}
; 998  : 
; 999  : 		if ( missile && incomingMissile[0] == NULL)

	cmp	DWORD PTR _missile$[ebp], 0
	je	SHORT $LN27@SetIncomin
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+420], 0
	jne	SHORT $LN27@SetIncomin

; 1000 : 		{
; 1001 : 			incomingMissile[0] = missile;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _missile$[ebp]
	mov	DWORD PTR [edx+ecx+420], eax

; 1002 : 			VuReferenceEntity( incomingMissile[0] );

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+420]
	push	eax
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4
$LN27@SetIncomin:

; 1003 : 		}
; 1004 : 	}
; 1005 : 	// So it is an AI airplane after all :-)
; 1006 : 	else {

	jmp	$LN1@SetIncomin
$LN31@SetIncomin:

; 1007 : 		// Because F4 doesn't clean up its act, need to make sure exploded missiles are not accounted for
; 1008 : 		// We do the holding spot first
; 1009 : 		if (incomingMissile[1] && incomingMissile[1]->IsDead()) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+420], 0
	je	SHORT $LN25@SetIncomin
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+420]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+eax+420]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	je	SHORT $LN25@SetIncomin

; 1010 : 			VuDeReferenceEntity( incomingMissile[1] );

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+420]
	push	eax
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 1011 : 			incomingMissile[1] = NULL;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+420], 0
$LN25@SetIncomin:

; 1012 : 		}
; 1013 : 
; 1014 : 		// then the incoming missile spot, this one also check is missile is NULL, then it uses what's in our holding spot for the incoming. That's why we tested it first
; 1015 : 		if (incomingMissile[0] && (missile == NULL || incomingMissile[0]->IsDead())) {

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+420], 0
	je	$LN24@SetIncomin
	cmp	DWORD PTR _missile$[ebp], 0
	je	SHORT $LN23@SetIncomin
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+420]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+edx+420]
	mov	edx, DWORD PTR [esi+340]
	call	edx
	test	eax, eax
	je	SHORT $LN24@SetIncomin
$LN23@SetIncomin:

; 1016 : 			VuDeReferenceEntity( incomingMissile[0] );

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+420]
	push	edx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 1017 : 
; 1018 : 			// Now restore our previous missile (if we had one).
; 1019 : 			incomingMissile[0] = incomingMissile[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax+420]
	mov	DWORD PTR [edx+ecx+420], eax

; 1020 : 			incomingMissile[1] = NULL;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+420], 0

; 1021 : 			incomingMissileEvadeTimer = 10000000; // 1645 NM should be high enough for a starting distance

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+432], 10000000		; 00989680H

; 1022 : 			incomingMissileRange = 500 * NM_TO_FT; //initialize

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@4a396e66
	movss	DWORD PTR [ecx+428], xmm0
$LN24@SetIncomin:

; 1023 : 		}
; 1024 : 
; 1025 : 		// Now that the explosed missile were taken care of, check if we have a missile hurdling toward us...
; 1026 : 		if (missile) {

	cmp	DWORD PTR _missile$[ebp], 0
	je	$LN1@SetIncomin

; 1027 : 			// 2000-10-02 BEFORE WE DO ANYTHING HERE, WE NEED TO KNOW IF THE AI CAN ACTUALLY SEE THE MISSILE IF IT'S AN IR MISSILE
; 1028 : 			// Only IRST missiles need to be picked up visually. Other missile type are handled by MissileDefeatCheck
; 1029 : 			if (((MissileClass *)missile)->GetSeekerType() == SensorClass::IRST) {

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?GetSeekerType@MissileClass@@QAEHXZ	; MissileClass::GetSeekerType
	test	eax, eax
	jne	$LN9@SetIncomin

; 1030 : 				int canSee = FALSE;

	mov	DWORD PTR _canSee$23[ebp], 0

; 1031 : 
; 1032 : 				// Now we must know if our airplane is eyeball capable...
; 1033 : 				VisualClass *eyeball = (VisualClass*)FindSensor((SimMoverClass *)this, SensorClass::Visual );

	push	3
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _eyeball$18[ebp], eax

; 1034 : 				if (eyeball) {

	cmp	DWORD PTR _eyeball$18[ebp], 0
	je	$LN16@SetIncomin

; 1035 : 					float az, el, ata, ataFrom, droll;
; 1036 : 
; 1037 : 					CalcRelValues (this, missile, &az, &el, &ata, &ataFrom, &droll);

	lea	eax, DWORD PTR _droll$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _ataFrom$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _ata$9[ebp]
	push	edx
	lea	eax, DWORD PTR _el$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _az$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _missile$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z ; CalcRelValues

; 1038 : 
; 1039 : 					// Now this will tell us if the missile can be seen
; 1040 : 					canSee = eyeball->CanSeeObject(az, el);

	add	esp, 24					; 00000018H
	movss	xmm0, DWORD PTR _el$10[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$12[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _eyeball$18[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _eyeball$18[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	mov	DWORD PTR _canSee$23[ebp], eax

; 1041 : 
; 1042 : 					if (canSee) {

	cmp	DWORD PTR _canSee$23[ebp], 0
	je	$LN16@SetIncomin

; 1043 : 						float ourFOV, ourCenter;
; 1044 : 
; 1045 : 						// If we can theoritically see it, now see if we are looking in its direction...
; 1046 : 						if (((SimMoverClass *)this)->targetPtr) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+656], 0
	je	SHORT $LN18@SetIncomin

; 1047 : 							// We are looking at someone, limit our field of view to 50 to 90 degrees (both side)
; 1048 : 							ourFOV = (((SimVehicleClass *)this)->Brain()->SkillLevel() + 5.0f) * 10.0f * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _ourFOV$14[ebp], xmm0

; 1049 : 							ourCenter = ((SimMoverClass *)this)->targetPtr->localData->ata;	// Where we are looking

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+656]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _ourCenter$16[ebp], xmm0

; 1050 : 						}
; 1051 : 						else {

	jmp	SHORT $LN17@SetIncomin
$LN18@SetIncomin:

; 1052 : 							// We are scanning the horizon, we scan from 75 to 135 degress (both side)
; 1053 : 							ourFOV = (((SimVehicleClass *)this)->Brain()->SkillLevel() + 5.0f) * 15.0f * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR __real@41700000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _ourFOV$14[ebp], xmm0

; 1054 : 							ourCenter = 0.0f; // dead center

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ourCenter$16[ebp], xmm0
$LN17@SetIncomin:

; 1055 : 						}
; 1056 : 
; 1057 : 						// If the missiles angle is further than our (fixated) field of view, we cannot see the missile
; 1058 : 						if (fabs(ata - ourCenter) > ourFOV)

	movss	xmm0, DWORD PTR _ata$9[ebp]
	subss	xmm0, DWORD PTR _ourCenter$16[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1250[ebp]
	movss	xmm0, DWORD PTR tv1250[ebp]
	comiss	xmm0, DWORD PTR _ourFOV$14[ebp]
	jbe	SHORT $LN16@SetIncomin

; 1059 : 							canSee = FALSE;

	mov	DWORD PTR _canSee$23[ebp], 0
$LN16@SetIncomin:

; 1060 : 
; 1061 : 					}
; 1062 : 				}
; 1063 : 
; 1064 : 				// If the missile was launched caged...
; 1065 : 				// Marco Edit - Boresight instead of caged
; 1066 : 				// 2002-01-02 MODIFIED BY S.G. Removed the '!' so it goes in if slaved.
; 1067 : 				if (((MissileClass *)missile)->isSlave) {

	mov	edx, DWORD PTR _missile$[ebp]
	cmp	DWORD PTR [edx+736], 0
	je	SHORT $LN15@SetIncomin

; 1068 : 					// And we cannot see it...
; 1069 : 					if (!canSee) {

	cmp	DWORD PTR _canSee$23[ebp], 0
	jne	SHORT $LN13@SetIncomin

; 1070 : 						// Roll the dice to see if he will 'see' it based on his skill
; 1071 : 						if (((SimVehicleClass *)this)->Brain()->SkillLevel() + 5 > rand() % 10)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	mov	esi, eax
	add	esi, 5
	call	_rand
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	cmp	esi, edx
	jle	SHORT $LN13@SetIncomin

; 1072 : 							canSee = TRUE;

	mov	DWORD PTR _canSee$23[ebp], 1
$LN13@SetIncomin:

; 1073 : 					}
; 1074 : 				}

	jmp	SHORT $LN10@SetIncomin
$LN15@SetIncomin:

; 1075 : 				// The missile was launched uncaged and we cannot see it and the pilot is either an ace or a veteran...
; 1076 : 				else if (!canSee && ((SimVehicleClass *)this)->Brain()->SkillLevel() > 2) {

	cmp	DWORD PTR _canSee$23[ebp], 0
	jne	SHORT $LN10@SetIncomin
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	cmp	eax, 2
	jle	SHORT $LN10@SetIncomin

; 1077 : 					// Roll the dice to see if he will 'see' it based on his skill
; 1078 : 					if (4 - ((SimVehicleClass *)this)->Brain()->SkillLevel() + 8 <= rand() % 10)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	mov	esi, 4
	sub	esi, eax
	add	esi, 8
	call	_rand
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	cmp	esi, edx
	jg	SHORT $LN10@SetIncomin

; 1079 : 						canSee = TRUE;

	mov	DWORD PTR _canSee$23[ebp], 1
$LN10@SetIncomin:

; 1080 : 				}
; 1081 : 
; 1082 : 				if (!canSee)

	cmp	DWORD PTR _canSee$23[ebp], 0
	jne	SHORT $LN9@SetIncomin

; 1083 : 					return;

	jmp	$LN64@SetIncomin
$LN9@SetIncomin:

; 1084 : 			}
; 1085 : 
; 1086 : 
; 1087 : 			// Do we have a missile ALREADY hurdling toward us?
; 1088 : 			if (incomingMissile[0]) {

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+420], 0
	je	$LN8@SetIncomin

; 1089 : 				float dx, dy, dz, missileRangeSquared, incomingMissileRangeSquared;
; 1090 : 
; 1091 : 				// This will get the REAL range between the missile and us. targetPtr->localData->range might not point at us or targetPtr might even be NULL. Not good.
; 1092 : 				dx = missile->XPos() - this->XPos();

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1276[ebp]
	movss	xmm0, DWORD PTR tv1276[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1411[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1280[ebp]
	movss	xmm0, DWORD PTR tv1411[ebp]
	subss	xmm0, DWORD PTR tv1280[ebp]
	movss	DWORD PTR _dx$21[ebp], xmm0

; 1093 : 				dy = missile->YPos() - this->YPos();

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1284[ebp]
	movss	xmm0, DWORD PTR tv1284[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1413[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1288[ebp]
	movss	xmm0, DWORD PTR tv1413[ebp]
	subss	xmm0, DWORD PTR tv1288[ebp]
	movss	DWORD PTR _dy$24[ebp], xmm0

; 1094 : 				dz = missile->ZPos() - this->ZPos();

	mov	ecx, DWORD PTR _missile$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1292[ebp]
	movss	xmm0, DWORD PTR tv1292[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1415[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1296[ebp]
	movss	xmm0, DWORD PTR tv1415[ebp]
	subss	xmm0, DWORD PTR tv1296[ebp]
	movss	DWORD PTR _dz$22[ebp], xmm0

; 1095 : 				missileRangeSquared = dx*dx + dy*dy + dz*dz;

	movss	xmm0, DWORD PTR _dx$21[ebp]
	mulss	xmm0, DWORD PTR _dx$21[ebp]
	movss	xmm1, DWORD PTR _dy$24[ebp]
	mulss	xmm1, DWORD PTR _dy$24[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$22[ebp]
	mulss	xmm1, DWORD PTR _dz$22[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _missileRangeSquared$13[ebp], xmm0

; 1096 : 
; 1097 : 				dx = incomingMissile[0]->XPos() - this->XPos();

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+420]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1305[ebp]
	movss	xmm0, DWORD PTR tv1305[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1417[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1309[ebp]
	movss	xmm0, DWORD PTR tv1417[ebp]
	subss	xmm0, DWORD PTR tv1309[ebp]
	movss	DWORD PTR _dx$21[ebp], xmm0

; 1098 : 				dy = incomingMissile[0]->YPos() - this->YPos();

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+420]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1315[ebp]
	movss	xmm0, DWORD PTR tv1315[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1419[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1319[ebp]
	movss	xmm0, DWORD PTR tv1419[ebp]
	subss	xmm0, DWORD PTR tv1319[ebp]
	movss	DWORD PTR _dy$24[ebp], xmm0

; 1099 : 				dz = incomingMissile[0]->ZPos() - this->ZPos();

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+420]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1325[ebp]
	movss	xmm0, DWORD PTR tv1325[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1421[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1329[ebp]
	movss	xmm0, DWORD PTR tv1421[ebp]
	subss	xmm0, DWORD PTR tv1329[ebp]
	movss	DWORD PTR _dz$22[ebp], xmm0

; 1100 : 				incomingMissileRangeSquared = dx*dx + dy*dy + dz*dz;

	movss	xmm0, DWORD PTR _dx$21[ebp]
	mulss	xmm0, DWORD PTR _dx$21[ebp]
	movss	xmm1, DWORD PTR _dy$24[ebp]
	mulss	xmm1, DWORD PTR _dy$24[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$22[ebp]
	mulss	xmm1, DWORD PTR _dz$22[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _incomingMissileRangeSquared$8[ebp], xmm0

; 1101 : 
; 1102 : 				// Is the range of this missile closer than what we are currently avoiding?
; 1103 : 				if (missileRangeSquared < incomingMissileRangeSquared) {

	movss	xmm0, DWORD PTR _incomingMissileRangeSquared$8[ebp]
	comiss	xmm0, DWORD PTR _missileRangeSquared$13[ebp]
	jbe	$LN7@SetIncomin

; 1104 : 					// Yes. so de-reference the missile in the holding queue (must be further than incomingMissile if it's there anyway) if there is one
; 1105 : 					if (incomingMissile[1])

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+420], 0
	je	SHORT $LN6@SetIncomin

; 1106 : 						VuDeReferenceEntity( incomingMissile[1] );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+420]
	push	edx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4
$LN6@SetIncomin:

; 1107 : 
; 1108 : 					// The currently incoming missile will be moved to the holding spot...
; 1109 : 					incomingMissile[1] = incomingMissile[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax+420]
	mov	DWORD PTR [edx+ecx+420], eax

; 1110 : 
; 1111 : 					// And this missile is our new immediate threat
; 1112 : 					incomingMissile[0] = missile;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _missile$[ebp]
	mov	DWORD PTR [edx+ecx+420], eax

; 1113 : 					VuReferenceEntity( missile );

	mov	ecx, DWORD PTR _missile$[ebp]
	push	ecx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 1114 : 					incomingMissileEvadeTimer = 10000000; // 1645 NM should be high enough for a starting distance

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+432], 10000000		; 00989680H
	jmp	$LN2@SetIncomin
$LN7@SetIncomin:

; 1115 : 				}
; 1116 : 				// If we have a missile already in our holding spot, see if the new one is closer. If it is, it will replace the misile in the holding spot.
; 1117 : 				else if (incomingMissile[1]) {

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+420], 0
	je	$LN4@SetIncomin

; 1118 : 					float holdingMissileRangeSquared;
; 1119 : 
; 1120 : 					dx = incomingMissile[1]->XPos() - this->XPos();

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+420]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1356[ebp]
	movss	xmm0, DWORD PTR tv1356[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1423[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1360[ebp]
	movss	xmm0, DWORD PTR tv1423[ebp]
	subss	xmm0, DWORD PTR tv1360[ebp]
	movss	DWORD PTR _dx$21[ebp], xmm0

; 1121 : 					dy = incomingMissile[1]->YPos() - this->YPos();

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+420]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1366[ebp]
	movss	xmm0, DWORD PTR tv1366[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1425[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1370[ebp]
	movss	xmm0, DWORD PTR tv1425[ebp]
	subss	xmm0, DWORD PTR tv1370[ebp]
	movss	DWORD PTR _dy$24[ebp], xmm0

; 1122 : 					dz = incomingMissile[1]->ZPos() - this->ZPos();

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+420]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1376[ebp]
	movss	xmm0, DWORD PTR tv1376[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv1427[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1380[ebp]
	movss	xmm0, DWORD PTR tv1427[ebp]
	subss	xmm0, DWORD PTR tv1380[ebp]
	movss	DWORD PTR _dz$22[ebp], xmm0

; 1123 : 					holdingMissileRangeSquared = dx*dx + dy*dy + dz*dz;

	movss	xmm0, DWORD PTR _dx$21[ebp]
	mulss	xmm0, DWORD PTR _dx$21[ebp]
	movss	xmm1, DWORD PTR _dy$24[ebp]
	mulss	xmm1, DWORD PTR _dy$24[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$22[ebp]
	mulss	xmm1, DWORD PTR _dz$22[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _holdingMissileRangeSquared$6[ebp], xmm0

; 1124 : 
; 1125 : 					// If it's closer, de-reference the missile in the holding spot and use this one.
; 1126 : 					if (missileRangeSquared < holdingMissileRangeSquared) {

	movss	xmm0, DWORD PTR _holdingMissileRangeSquared$6[ebp]
	comiss	xmm0, DWORD PTR _missileRangeSquared$13[ebp]
	jbe	SHORT $LN3@SetIncomin

; 1127 : 						VuDeReferenceEntity( incomingMissile[1] );

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+420]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 1128 : 
; 1129 : 						// Our 'holding' missile will be this one. The other one will be ignored though :-( Once we make a incoming missile queue, this problem will be gone :-)
; 1130 : 						incomingMissile[1] = missile;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _missile$[ebp]
	mov	DWORD PTR [eax+edx+420], ecx

; 1131 : 						VuReferenceEntity( missile );

	mov	edx, DWORD PTR _missile$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4
$LN3@SetIncomin:

; 1132 : 					}
; 1133 : 				}
; 1134 : 				// So we don't have a missile in the holding spot yet, make this one that missile.
; 1135 : 				else {

	jmp	SHORT $LN2@SetIncomin
$LN4@SetIncomin:

; 1136 : 						incomingMissile[1] = missile;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _missile$[ebp]
	mov	DWORD PTR [ecx+eax+420], edx

; 1137 : 						VuReferenceEntity( missile );

	mov	eax, DWORD PTR _missile$[ebp]
	push	eax
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4
$LN2@SetIncomin:

; 1138 : 				}
; 1139 : 			}
; 1140 : 			// We don't have an incoming missile, so this one becomes our incoming missile
; 1141 : 			else {

	jmp	SHORT $LN1@SetIncomin
$LN8@SetIncomin:

; 1142 : 				incomingMissile[0] = missile;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _missile$[ebp]
	mov	DWORD PTR [edx+ecx+420], eax

; 1143 : 				VuReferenceEntity( incomingMissile[0] );

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+420]
	push	eax
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 1144 : 				incomingMissileEvadeTimer = 10000000; // 1645 NM should be high enough for a starting distance

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+432], 10000000		; 00989680H
$LN1@SetIncomin:
$LN64@SetIncomin:

; 1145 : 			}
; 1146 : 		}
; 1147 : 	}
; 1148 : // END OF REWRITTEN SECTION
; 1149 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z$0:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-312]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ENDP	; SimBaseClass::SetIncomingMissile
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Mass@SimBaseClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Mass@SimBaseClass@@UAEMXZ PROC				; SimBaseClass::Mass, COMDAT
; _this$ = ecx

; 267  : 	virtual float Mass(void)		{return 2500.0F;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@451c4000
	mov	esp, ebp
	pop	ebp
	ret	0
?Mass@SimBaseClass@@UAEMXZ ENDP				; SimBaseClass::Mass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ PROC ; SimBaseClass::SpecialData, COMDAT
; _this$ = ecx

; 264  : 	SimBaseSpecialData* SpecialData(void) {return &specialData;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	esp, ebp
	pop	ebp
	ret	0
?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ ENDP ; SimBaseClass::SpecialData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Regenerate@SimBaseClass@@UAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Regenerate@SimBaseClass@@UAEXMMMM@Z PROC		; SimBaseClass::Regenerate, COMDAT
; _this$ = ecx

; 261  : 	virtual void Regenerate(float, float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Regenerate@SimBaseClass@@UAEXMMMM@Z ENDP		; SimBaseClass::Regenerate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetVuPosition@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetVuPosition@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::SetVuPosition, COMDAT
; _this$ = ecx

; 260  : 	virtual void SetVuPosition() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetVuPosition@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::SetVuPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ PROC	; SimBaseClass::ConfigurePlayerAvionics, COMDAT
; _this$ = ecx

; 259  : 	virtual void ConfigurePlayerAvionics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ ENDP	; SimBaseClass::ConfigurePlayerAvionics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakeNonPlayerVehicle, COMDAT
; _this$ = ecx

; 258  : 	virtual void MakeNonPlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakeNonPlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakePlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakePlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakePlayerVehicle, COMDAT
; _this$ = ecx

; 257  : 	virtual void MakePlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakePlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakePlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 8
$T3 = -40						; size = 8
$T4 = -32						; size = 4
tv146 = -28						; size = 4
$T5 = -24						; size = 4
_wingCommand$6 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_flag$ = 8						; size = 4
?SetDead@SimBaseClass@@UAEXH@Z PROC			; SimBaseClass::SetDead
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDead@SimBaseClass@@UAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 583  : 	// 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS CLEARED
; 584  : 	//  SetIncomingMissile( NULL );
; 585  : 	SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 586  : 	// END OF ADDED SECTION
; 587  : 	SetThreat( NULL, THREAT_NONE );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat

; 588  : 	if (flag){

	cmp	DWORD PTR _flag$[ebp], 0
	je	$LN10@SetDead

; 589  : 		// Pdromote another flight member, if this is the lead
; 590  : 		if (campaignObject && campaignObject->GetComponents () && campaignObject->GetComponentLead() == this)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??B?$VuBin@VCampBaseClass@@@@QBE_NXZ	; VuBin<CampBaseClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	$LN9@SetDead
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
	mov	ecx, eax
	call	?GetComponents@CampBaseClass@@QBEPAVTailInsertList@@XZ ; CampBaseClass::GetComponents
	test	eax, eax
	je	$LN9@SetDead
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
	mov	ecx, eax
	call	?GetComponentLead@CampBaseClass@@QAEPAVSimBaseClass@@XZ ; CampBaseClass::GetComponentLead
	cmp	eax, DWORD PTR _this$[ebp]
	jne	$LN9@SetDead

; 591  : 		{
; 592  : 			FalconWingmanMsg* wingCommand			= 
; 593  : 				new FalconWingmanMsg (campaignObject->Id(), vuLocalSessionEntity.get());

	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN13@SetDead
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconWingmanMsg@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconWingmanMsg::FalconWingmanMsg
	mov	DWORD PTR tv146[ebp], eax
	jmp	SHORT $LN14@SetDead
$LN13@SetDead:
	mov	DWORD PTR tv146[ebp], 0
$LN14@SetDead:
	mov	ecx, DWORD PTR tv146[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _wingCommand$6[ebp], edx

; 594  : 			wingCommand->dataBlock.from			= Id();

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _wingCommand$6[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 595  : 			wingCommand->dataBlock.to				= AiAllButSender;

	mov	ecx, 5
	mov	edx, DWORD PTR _wingCommand$6[ebp]
	mov	WORD PTR [edx+56], cx

; 596  : 			wingCommand->dataBlock.command		= FalconWingmanMsg::WMPromote;

	mov	eax, DWORD PTR _wingCommand$6[ebp]
	mov	DWORD PTR [eax+58], 39			; 00000027H

; 597  : 			wingCommand->dataBlock.newTarget		= FalconNullId;

	mov	ecx, DWORD PTR _wingCommand$6[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+62], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+66], eax

; 598  : 			
; 599  : 			FalconSendMessage (wingCommand,TRUE);

	push	1
	mov	ecx, DWORD PTR _wingCommand$6[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN9@SetDead:

; 600  : 		}
; 601  : 		SetFlag(OBJ_DEAD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 602  : 		
; 603  : 		// Check for undead aircraft, and regenerate instead of removing
; 604  : 		if (IsSetFalcFlag(FEC_REGENERATING))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	test	eax, eax
	je	SHORT $LN8@SetDead

; 605  : 		{
; 606  : 			// 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS CLEARED
; 607  : 			SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 608  : 			// END OF ADDED SECTION
; 609  : 			SetThreat( NULL, THREAT_NONE );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat

; 610  : 			
; 611  : 			if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN7@SetDead

; 612  : 				Sleep();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+108]
	call	edx
$LN7@SetDead:

; 613  : 			}
; 614  : 			
; 615  : 			if (IsLocal()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@SetDead

; 616  : 				SimDogfight.RegenerateAircraft((AircraftClass*)this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, OFFSET ?SimDogfight@@3VDogfightClass@@A ; SimDogfight
	call	?RegenerateAircraft@DogfightClass@@QAEXPAVAircraftClass@@@Z ; DogfightClass::RegenerateAircraft

; 617  : 				if (this == SimDriver.GetPlayerEntity()){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN6@SetDead

; 618  : 					SimDriver.SetPlayerEntity (NULL);

	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?SetPlayerEntity@SimulationDriver@@QAEXPAVSimMoverClass@@@Z ; SimulationDriver::SetPlayerEntity
$LN6@SetDead:

; 619  : 				}
; 620  : 			}
; 621  : 		}

	jmp	SHORT $LN4@SetDead
$LN8@SetDead:

; 622  : 		else if (!IsSetRemoveFlag()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetRemoveFlag@SimBaseClass@@QBEHXZ	; SimBaseClass::IsSetRemoveFlag
	test	eax, eax
	jne	SHORT $LN4@SetDead

; 623  : 			if (this == FalconLocalSession->GetPlayerEntity()){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetPlayerEntity@FalconSessionEntity@@QBEPAVFalconEntity@@XZ ; FalconSessionEntity::GetPlayerEntity
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN2@SetDead

; 624  : 				OTWDriver.StartExitMenuCountdown();

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?StartExitMenuCountdown@OTWDriverClass@@QAEXXZ ; OTWDriverClass::StartExitMenuCountdown
$LN2@SetDead:

; 625  : 			}
; 626  : 
; 627  : 			// OTWDriver.SetExitMenu (TRUE);
; 628  : 			SetRemoveFlag();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRemoveFlag@SimBaseClass@@QAEXXZ	; SimBaseClass::SetRemoveFlag
$LN4@SetDead:

; 629  : 		}
; 630  : 	}
; 631  : 	else {

	jmp	SHORT $LN11@SetDead
$LN10@SetDead:

; 632  : 		UnSetFlag (OBJ_DEAD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag
$LN11@SetDead:

; 633  : 	}
; 634  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDead@SimBaseClass@@UAEXH@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetDead@SimBaseClass@@UAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDead@SimBaseClass@@UAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDead@SimBaseClass@@UAEXH@Z ENDP			; SimBaseClass::SetDead
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_deathMessage$ = 8					; size = 4
?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z PROC ; SimBaseClass::ApplyDeathMessage
; _this$ = ecx

; 745  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 746  : 	// we want to set pctStrength to new value here....
; 747  : 	// do this when pctStrenght from the death message is less than the
; 748  : 	// current pctStrength.  This should help sync dying on different
; 749  : 	// hosts on the net
; 750  : 	if ( pctStrength > deathMessage->dataBlock.deathPctStrength )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _deathMessage$[ebp]
	movss	xmm0, DWORD PTR [eax+292]
	comiss	xmm0, DWORD PTR [ecx+52]
	jbe	SHORT $LN9@ApplyDeath

; 751  : 		pctStrength = deathMessage->dataBlock.deathPctStrength;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _deathMessage$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+292], ecx
$LN9@ApplyDeath:

; 752  : 
; 753  : //    MonoPrint ("Entity %d Got Death Msg! Local: %s, Show Explode: %s\n",
; 754  : //		   		Id().num_,
; 755  : //				IsLocal() ? "TRUE" : "FALSE",
; 756  : //				IsSetFlag( SHOW_EXPLOSION ) ? "TRUE" : "FALSE" );
; 757  : 
; 758  : 	if (VM)

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	SHORT $LN8@ApplyDeath

; 759  : 		VM->RemoveRadioCalls(Id());

	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?RemoveRadioCalls@VoiceManager@@QAEXVVU_ID@@@Z ; VoiceManager::RemoveRadioCalls
$LN8@ApplyDeath:

; 760  : 
; 761  :    	// debug non local
; 762  :    	if ( !IsLocal() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	jne	$LN1@ApplyDeath

; 763  :    	{
; 764  : //	 	MonoPrint( "NonLocal Apply Death Message: Pct Strength now: %f\n", pctStrength );
; 765  : 
; 766  : 		// OK, this is a big hack for the time being.  Explosions aren't
; 767  : 		// showing for nonlocal entities.  Let's force them right now:
; 768  : 		if ( !IsSetFlag( SHOW_EXPLOSION ) )

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	jne	SHORT $LN6@ApplyDeath

; 769  : 		{
; 770  : 			if (IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN2@ApplyDeath

; 771  : 			{
; 772  : 				if ( IsAirplane() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN4@ApplyDeath

; 773  : 				{
; 774  : 					((AircraftClass *)this)->RunExplosion();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunExplosion@AircraftClass@@QAEXXZ	; AircraftClass::RunExplosion
	jmp	SHORT $LN2@ApplyDeath
$LN4@ApplyDeath:

; 775  : 				}
; 776  : 				else if ( IsHelicopter() )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	test	eax, eax
	je	SHORT $LN2@ApplyDeath

; 777  : 				{
; 778  : 					((HelicopterClass *)this)->RunExplosion();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunExplosion@HelicopterClass@@QAEXXZ	; HelicopterClass::RunExplosion
$LN2@ApplyDeath:

; 779  : 				}
; 780  : 			}
; 781  : 			SetExploding( TRUE ); // make sure

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExploding@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetExploding

; 782  : 			SetFlag( SHOW_EXPLOSION );

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag
$LN6@ApplyDeath:

; 783  : 		}
; 784  : 
; 785  : 		if ((!IsStatic ()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@ApplyDeath

; 786  : 		{
; 787  : 			SetDead (TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+364]
	call	eax
$LN1@ApplyDeath:

; 788  : 		}
; 789  :    	}
; 790  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z ENDP ; SimBaseClass::ApplyDeathMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_damageMessage$ = 8					; size = 4
?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z PROC ; SimBaseClass::ApplyDamage
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :    lastShooter = damageMessage->dataBlock.fEntityID;

	mov	eax, DWORD PTR _damageMessage$[ebp]
	mov	ecx, DWORD PTR [eax+74]
	mov	edx, DWORD PTR [eax+78]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], ecx
	mov	DWORD PTR [eax+268], edx

; 742  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z ENDP ; SimBaseClass::ApplyDamage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetTransform@SimBaseClass@@UAEXQAY02M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?GetTransform@SimBaseClass@@UAEXQAY02M@Z PROC		; SimBaseClass::GetTransform, COMDAT
; _this$ = ecx

; 253  : 	virtual void GetTransform(TransformMatrix) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTransform@SimBaseClass@@UAEXQAY02M@Z ENDP		; SimBaseClass::GetTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Exec@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Exec@SimBaseClass@@UAEHXZ PROC				; SimBaseClass::Exec, COMDAT
; _this$ = ecx

; 252  : 	virtual int Exec(void) { return TRUE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?Exec@SimBaseClass@@UAEHXZ ENDP				; SimBaseClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
tv138 = -8						; size = 4
_this$ = -4						; size = 4
_initData$ = 8						; size = 4
?Init@SimBaseClass@@UAEXPAVSimInitDataClass@@@Z PROC	; SimBaseClass::Init
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	if (initData){

	cmp	DWORD PTR _initData$[ebp], 0
	je	$LN2@Init

; 290  : 		SetPosition (initData->x, initData->y, initData->z);

	mov	eax, DWORD PTR _initData$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _initData$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+60]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _initData$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+56]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 291  : 		SetCampaignFlag(initData->flags);

	mov	eax, DWORD PTR _initData$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCampaignFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetCampaignFlag

; 292  : 		SetStatus(initData->status);

	mov	edx, DWORD PTR _initData$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetStatus

; 293  : 		SetFlagSilent(initData->specialFlags); // sfr: was missing special flags here

	mov	ecx, DWORD PTR _initData$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagSilent@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetFlagSilent

; 294  : 		displayPriority = initData->displayPriority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _initData$[ebp]
	mov	dl, BYTE PTR [ecx+164]
	mov	BYTE PTR [eax+336], dl

; 295  : 		if (initData->createFlags & SIDC_FORCE_ID){

	mov	eax, DWORD PTR _initData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 4
	je	SHORT $LN1@Init

; 296  : 			share_.id_ = initData->forcedId;

	mov	edx, DWORD PTR _initData$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], ecx
$LN1@Init:

; 297  : 		}
; 298  : 		SetSendCreate(initData->createFlags & SIDC_SILENT_INSERT ? VU_SC_DONT_SEND : VU_SC_SEND_OOB);

	mov	eax, DWORD PTR _initData$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN5@Init
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN6@Init
$LN5@Init:
	mov	DWORD PTR tv138[ebp], 2
$LN6@Init:
	mov	edx, DWORD PTR tv138[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ; VuEntity::SetSendCreate

; 299  : 
; 300  : 		SetCallsign (initData->callsignIdx);

	mov	eax, DWORD PTR _initData$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCallsign@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetCallsign

; 301  : 		SetSlot(initData->campSlot);

	mov	edx, DWORD PTR _initData$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSlot@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetSlot

; 302  : 		SetCountry(initData->side);

	mov	ecx, DWORD PTR _initData$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCountry@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetCountry

; 303  : 		SetCampaignObject(initData->campBase);

	mov	eax, DWORD PTR _initData$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCampaignObject@SimBaseClass@@QAEXPAVCampBaseClass@@@Z ; SimBaseClass::SetCampaignObject
$LN2@Init:

; 304  : 	}
; 305  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@SimBaseClass@@UAEXPAVSimInitDataClass@@@Z ENDP	; SimBaseClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetAfterburnerStage@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetAfterburnerStage
; _this$ = ecx

; 1573 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1574 : 	if (specialData.afterburner_stage != s){

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+184]
	cmp	ecx, DWORD PTR _s$[ebp]
	je	SHORT $LN2@SetAfterbu

; 1575 : 		specialData.afterburner_stage = static_cast<uchar>(s);

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _s$[ebp]
	mov	BYTE PTR [edx+184], al

; 1576 : 		//MakeSimBaseDirty (DIRTY_SIM_AFTERBURNER, DDP[176].priority);
; 1577 : 		MakeSimBaseDirty (DIRTY_SIM_AFTERBURNER, SEND_SOON);

	push	4096					; 00001000H
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetAfterbu:

; 1578 : 	}
; 1579 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAfterburnerStage@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetAfterburnerStage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rng$ = 8						; size = 4
?SetRdrRng@SimBaseClass@@QAEXM@Z PROC			; SimBaseClass::SetRdrRng
; _this$ = ecx

; 1548 : void SimBaseClass::SetRdrRng(float rng){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1549 : 
; 1550 : 	if (specialData.rdrNominalRng != rng){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	ucomiss	xmm0, DWORD PTR _rng$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetRdrRng

; 1551 : 		specialData.rdrNominalRng = rng;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rng$[ebp]
	movss	DWORD PTR [ecx+156], xmm0

; 1552 : 		//MakeSimBaseDirty (DIRTY_SIM_RADAR_SLOW, DDP[175].priority);
; 1553 : 		MakeSimBaseDirty(DIRTY_SIM_RADAR_SLOW, SEND_LATER);

	push	256					; 00000100H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN1@SetRdrRng:

; 1554 : 	}
; 1555 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRdrRng@SimBaseClass@@QAEXM@Z ENDP			; SimBaseClass::SetRdrRng
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cycle$ = 8						; size = 4
?SetRdrCycleTime@SimBaseClass@@QAEXM@Z PROC		; SimBaseClass::SetRdrCycleTime
; _this$ = ecx

; 1540 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1541 : 	if (specialData.rdrCycleTime != cycle){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	ucomiss	xmm0, DWORD PTR _cycle$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetRdrCycl

; 1542 : 		specialData.rdrCycleTime = cycle;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cycle$[ebp]
	movss	DWORD PTR [ecx+168], xmm0

; 1543 : 		//MakeSimBaseDirty (DIRTY_SIM_RADAR_SLOW, DDP[174].priority);
; 1544 : 		MakeSimBaseDirty (DIRTY_SIM_RADAR_SLOW, SEND_LATER);

	push	256					; 00000100H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN1@SetRdrCycl:

; 1545 : 	}
; 1546 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRdrCycleTime@SimBaseClass@@QAEXM@Z ENDP		; SimBaseClass::SetRdrCycleTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_el$ = 8						; size = 4
?SetRdrElCenter@SimBaseClass@@QAEXM@Z PROC		; SimBaseClass::SetRdrElCenter
; _this$ = ecx

; 1525 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1526 : // This _SHOULD_ be used by the RWR but isn't currently...
; 1527 : //	if (specialData.rdrElCenter != el)
; 1528 : //	{
; 1529 : //		MakeSimBaseDirty (DIRTY_SIM_RADAR, SEND_SOON);
; 1530 : //	}
; 1531 : 
; 1532 : 	specialData.rdrElCenter = el;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [eax+164], xmm0

; 1533 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRdrElCenter@SimBaseClass@@QAEXM@Z ENDP		; SimBaseClass::SetRdrElCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_az$ = 8						; size = 4
?SetRdrAzCenter@SimBaseClass@@QAEXM@Z PROC		; SimBaseClass::SetRdrAzCenter
; _this$ = ecx

; 1510 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1511 : // This _SHOULD_ be used by the RWR but isn't currently...
; 1512 : //	if (specialData.rdrAzCenter != az)
; 1513 : //	{
; 1514 : //		MakeSimBaseDirty (DIRTY_SIM_RADAR, SEND_SOON);
; 1515 : //	}
; 1516 : 
; 1517 : 	specialData.rdrAzCenter = az;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [eax+160], xmm0

; 1518 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRdrAzCenter@SimBaseClass@@QAEXM@Z ENDP		; SimBaseClass::SetRdrAzCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_el$ = 8						; size = 4
?SetRdrEl@SimBaseClass@@QAEXM@Z PROC			; SimBaseClass::SetRdrEl
; _this$ = ecx

; 1497 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1498 : 	if (specialData.rdrEl != el){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	ucomiss	xmm0, DWORD PTR _el$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetRdrEl

; 1499 : 		specialData.rdrEl = el;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [ecx+152], xmm0

; 1500 : 		//MakeSimBaseDirty (DIRTY_SIM_RADAR, DDP[173].priority);
; 1501 : 		MakeSimBaseDirty (DIRTY_SIM_RADAR, SEND_SOON);

	push	4096					; 00001000H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN1@SetRdrEl:

; 1502 : 	}
; 1503 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRdrEl@SimBaseClass@@QAEXM@Z ENDP			; SimBaseClass::SetRdrEl
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_az$ = 8						; size = 4
?SetRdrAz@SimBaseClass@@QAEXM@Z PROC			; SimBaseClass::SetRdrAz
; _this$ = ecx

; 1484 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1485 : 	if (specialData.rdrAz != az){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+148]
	ucomiss	xmm0, DWORD PTR _az$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetRdrAz

; 1486 : 		specialData.rdrAz = az;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 1487 : 		//MakeSimBaseDirty (DIRTY_SIM_RADAR, DDP[172].priority);
; 1488 : 		MakeSimBaseDirty (DIRTY_SIM_RADAR, SEND_SOON);

	push	4096					; 00001000H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN1@SetRdrAz:

; 1489 : 	}
; 1490 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetRdrAz@SimBaseClass@@QAEXM@Z ENDP			; SimBaseClass::SetRdrAz
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_value$ = -12						; size = 4
_diff$ = -8						; size = 4
_this$ = -4						; size = 4
_powerOutput$ = 8					; size = 4
?SetPowerOutput@SimBaseClass@@QAEXM@Z PROC		; SimBaseClass::SetPowerOutput
; _this$ = ecx

; 1452 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1453 : 	int	diff, value;
; 1454 : 
; 1455 : 	value = FloatToInt32(powerOutput / 1.5f * 255.0f);

	movss	xmm0, DWORD PTR _powerOutput$[ebp]
	divss	xmm0, DWORD PTR __real@3fc00000
	mulss	xmm0, DWORD PTR __real@437f0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _value$[ebp], eax

; 1456 : 
; 1457 : 	ShiAssert( value >= 0    );
; 1458 : 	ShiAssert( value <= 0xFF );
; 1459 : 
; 1460 : 	specialData.powerOutput = powerOutput;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _powerOutput$[ebp]
	movss	DWORD PTR [eax+188], xmm0

; 1461 : 
; 1462 : 	diff = specialData.powerOutputNet - value;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+192]
	sub	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _diff$[ebp], edx

; 1463 : 
; 1464 : 	// 2000-11-17 ADDED BY S.G. SO OTHER VEHICLE USES THE RPM IN THEIR ENGINE TEMP
; 1465 : 	//	specialData.engineHeatOutput = powerOutput;
; 1466 : 	// END OF ADDED SECTION
; 1467 : 
; 1468 : 	if ((diff < -g_nMPPowerXmitThreshold) || (diff > g_nMPPowerXmitThreshold))

	mov	eax, DWORD PTR ?g_nMPPowerXmitThreshold@@3HA ; g_nMPPowerXmitThreshold
	neg	eax
	cmp	DWORD PTR _diff$[ebp], eax
	jl	SHORT $LN1@SetPowerOu
	mov	ecx, DWORD PTR _diff$[ebp]
	cmp	ecx, DWORD PTR ?g_nMPPowerXmitThreshold@@3HA ; g_nMPPowerXmitThreshold
	jle	SHORT $LN2@SetPowerOu
$LN1@SetPowerOu:

; 1469 : 	{
; 1470 : 		specialData.powerOutputNet = static_cast<uchar>(value);

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [edx+192], al

; 1471 : 		// 2000-11-17 ADDED BY S.G. SO OTHER VEHICLE USES THE RPM IN THEIR ENGINE TEMP
; 1472 : 		//		specialData.engineHeatOutputNet = static_cast<uchar>(value);
; 1473 : 		// END OF ADDED SECTION
; 1474 : 		//MakeSimBaseDirty (DIRTY_SIM_POWER_OUTPUT, DDP[171].priority);
; 1475 : 		MakeSimBaseDirty (DIRTY_SIM_POWER_OUTPUT, SEND_SOMETIME);

	push	16					; 00000010H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetPowerOu:

; 1476 : 	}
; 1477 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetPowerOutput@SimBaseClass@@QAEXM@Z ENDP		; SimBaseClass::SetPowerOutput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?ClearStatusBit@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::ClearStatusBit
; _this$ = ecx

; 1440 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1441 : 	if (specialData.status & status){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	and	ecx, DWORD PTR _status$[ebp]
	je	SHORT $LN2@ClearStatu

; 1442 : 		specialData.status &= ~status;

	mov	edx, DWORD PTR _status$[ebp]
	not	edx
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+176]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], edx

; 1443 : 		MakeSimBaseDirty (DIRTY_SIM_STATUS, SEND_RELIABLE);

	push	1048576					; 00100000H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@ClearStatu:

; 1444 : 	}
; 1445 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearStatusBit@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::ClearStatusBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatusBit@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetStatusBit
; _this$ = ecx

; 1428 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1429 : 	if (!(specialData.status & status)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	and	ecx, DWORD PTR _status$[ebp]
	jne	SHORT $LN2@SetStatusB

; 1430 : 		specialData.status |= status;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	or	eax, DWORD PTR _status$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], eax

; 1431 : 		MakeSimBaseDirty (DIRTY_SIM_STATUS, SEND_SOON);

	push	4096					; 00001000H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetStatusB:

; 1432 : 	}
; 1433 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatusBit@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetStatusBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::SetStatus
; _this$ = ecx

; 1416 : void SimBaseClass::SetStatus(int status){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1417 : 	if (specialData.status != status){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	cmp	ecx, DWORD PTR _status$[ebp]
	je	SHORT $LN2@SetStatus

; 1418 : 		specialData.status = status;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx+176], eax

; 1419 : 		MakeSimBaseDirty (DIRTY_SIM_STATUS, SEND_SOON);

	push	4096					; 00001000H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetStatus:

; 1420 : 	}
; 1421 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSide$ = 8						; size = 4
?SetCountry@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::SetCountry
; _this$ = ecx

; 1380 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1381 : 	specialData.country = newSide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSide$[ebp]
	mov	DWORD PTR [eax+180], ecx

; 1382 : 	//MakeSimBaseDirty (DIRTY_SIM_COUNTRY, DDP[165].priority);
; 1383 : 	MakeSimBaseDirty (DIRTY_SIM_COUNTRY, SEND_SOON);

	push	4096					; 00001000H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty

; 1384 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCountry@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::SetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?UnSetFlagSilent@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::UnSetFlagSilent
; _this$ = ecx

; 1369 : void SimBaseClass::UnSetFlagSilent (int flag){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1370 : 	if (specialData.flags & flag){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN2@UnSetFlagS

; 1371 : 		specialData.flags &= ~(flag);

	mov	edx, DWORD PTR _flag$[ebp]
	not	edx
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+172]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], edx
$LN2@UnSetFlagS:

; 1372 : 	}
; 1373 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnSetFlagSilent@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::UnSetFlagSilent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetFlagSilent@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetFlagSilent
; _this$ = ecx

; 1363 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1364 : 	if (!(specialData.flags & flag)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	jne	SHORT $LN2@SetFlagSil

; 1365 : 		specialData.flags |= flag;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	or	eax, DWORD PTR _flag$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], eax
$LN2@SetFlagSil:

; 1366 : 	}
; 1367 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagSilent@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetFlagSilent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?UnSetFlag@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::UnSetFlag
; _this$ = ecx

; 1350 : void SimBaseClass::UnSetFlag(int flag){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1351 : 	if (specialData.flags & flag){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN2@UnSetFlag

; 1352 : 		specialData.flags &= ~(flag);

	mov	edx, DWORD PTR _flag$[ebp]
	not	edx
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+172]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], edx

; 1353 : 		//MakeSimBaseDirty (DIRTY_SIM_FLAGS, DDP[164].priority);
; 1354 : 		MakeSimBaseDirty (DIRTY_SIM_FLAGS, SEND_RELIABLE);

	push	1048576					; 00100000H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@UnSetFlag:

; 1355 : 	}
; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?UnSetFlag@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::UnSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetFlag@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::SetFlag
; _this$ = ecx

; 1342 : void SimBaseClass::SetFlag(int flag){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1343 : 	if (!(specialData.flags & flag)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	jne	SHORT $LN2@SetFlag

; 1344 : 		specialData.flags |= flag;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	or	eax, DWORD PTR _flag$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], eax

; 1345 : 		//MakeSimBaseDirty (DIRTY_SIM_FLAGS, DDP[163].priority);
; 1346 : 		MakeSimBaseDirty (DIRTY_SIM_FLAGS, SEND_RELIABLE);

	push	1048576					; 00100000H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetFlag:

; 1347 : 	}
; 1348 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlag@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::SetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAfterburnerStage@SimBaseClass@@QAEHXZ PROC		; SimBaseClass::GetAfterburnerStage
; _this$ = ecx

; 1586 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1587 : 	return specialData.afterburner_stage;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+184]

; 1588 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetAfterburnerStage@SimBaseClass@@QAEHXZ ENDP		; SimBaseClass::GetAfterburnerStage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ent$ = 8						; size = 4
?SetCampaignObject@SimBaseClass@@QAEXPAVCampBaseClass@@@Z PROC ; SimBaseClass::SetCampaignObject
; _this$ = ecx

; 645  : void SimBaseClass::SetCampaignObject(CampBaseClass *ent){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	if ((int)ent > MAX_IA_CAMP_UNIT){

	cmp	DWORD PTR _ent$[ebp], 65536		; 00010000H
	jle	SHORT $LN2@SetCampaig

; 647  : 		campaignObject.reset(ent);

	mov	eax, DWORD PTR _ent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::reset
$LN2@SetCampaig:

; 648  : 	}
; 649  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCampaignObject@SimBaseClass@@QAEXPAVCampBaseClass@@@Z ENDP ; SimBaseClass::SetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasAreaJamming@SimBaseClass@@UAEHXZ PROC		; SimBaseClass::HasAreaJamming
; _this$ = ecx

; 845  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 846  :    return FALSE;

	xor	eax, eax

; 847  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasAreaJamming@SimBaseClass@@UAEHXZ ENDP		; SimBaseClass::HasAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasSPJamming@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::HasSPJamming
; _this$ = ecx

; 838  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 839  : 	// This is clearly wrong -- we can return TRUE to IsSPJamming, while not admitting to
; 840  : 	// HAVING SPJamming....
; 841  :    return FALSE;

	xor	eax, eax

; 842  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasSPJamming@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::HasSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAreaJamming@SimBaseClass@@UAEHXZ PROC		; SimBaseClass::IsAreaJamming
; _this$ = ecx

; 833  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 834  :    return FALSE;

	xor	eax, eax

; 835  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAreaJamming@SimBaseClass@@UAEHXZ ENDP		; SimBaseClass::IsAreaJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSPJamming@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::IsSPJamming
; _this$ = ecx

; 828  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 829  :    return IsSetFlag(ECM_ON);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag

; 830  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSPJamming@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::IsSPJamming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetNewestFlareID@SimBaseClass@@QAEXVVU_ID@@@Z PROC	; SimBaseClass::SetNewestFlareID
; _this$ = ecx

; 1404 : void SimBaseClass::SetNewestFlareID(VU_ID id){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1405 : 	if (specialData.FlareID != id){

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@SetNewestF

; 1406 : 		specialData.FlareID = id;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR [edx+220], eax
	mov	ecx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [edx+224], ecx

; 1407 : 		//MakeSimBaseDirty (DIRTY_SIM_FLARE, DDP[167].priority);
; 1408 : 		MakeSimBaseDirty (DIRTY_SIM_FLARE, SEND_NOW);

	push	65536					; 00010000H
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetNewestF:

; 1409 : 	}
; 1410 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetNewestFlareID@SimBaseClass@@QAEXVVU_ID@@@Z ENDP	; SimBaseClass::SetNewestFlareID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?SetNewestChaffID@SimBaseClass@@QAEXVVU_ID@@@Z PROC	; SimBaseClass::SetNewestChaffID
; _this$ = ecx

; 1391 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1392 : 	if (specialData.ChaffID != id)

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@SetNewestC

; 1393 : 	{
; 1394 : 		specialData.ChaffID = id;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR [edx+212], eax
	mov	ecx, DWORD PTR _id$[ebp+4]
	mov	DWORD PTR [edx+216], ecx

; 1395 : 		//MakeSimBaseDirty (DIRTY_SIM_CHAFF, DDP[166].priority);
; 1396 : 		MakeSimBaseDirty (DIRTY_SIM_CHAFF, SEND_NOW);

	push	65536					; 00010000H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeSimBaseDirty@SimBaseClass@@QAEXW4Dirty_Sim_Base@@W4Dirtyness@@@Z ; SimBaseClass::MakeSimBaseDirty
$LN2@SetNewestC:

; 1397 : 	}
; 1398 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetNewestChaffID@SimBaseClass@@QAEXVVU_ID@@@Z ENDP	; SimBaseClass::SetNewestChaffID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetSlot@SimBaseClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSlot$ = 8						; size = 4
?SetSlot@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::SetSlot, COMDAT
; _this$ = ecx

; 191  : 	void SetSlot(int newSlot) { slotNumber = newSlot; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSlot$[ebp]
	mov	DWORD PTR [eax+236], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSlot@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::SetSlot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetCallsign@SimBaseClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newCallsign$ = 8					; size = 4
?SetCallsign@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::SetCallsign, COMDAT
; _this$ = ecx

; 190  : 	void SetCallsign(int newCallsign) { callsignIdx = newCallsign; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCallsign$[ebp]
	mov	DWORD PTR [eax+232], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCallsign@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::SetCallsign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetFiring@SimBaseClass@@QAEXH@Z PROC			; SimBaseClass::SetFiring
; _this$ = ecx

; 638  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 639  :    if (flag)

	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $LN2@SetFiring

; 640  :       SetFlag (OBJ_FIRING_GUN);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 641  :    else

	jmp	SHORT $LN3@SetFiring
$LN2@SetFiring:

; 642  :       UnSetFlag (OBJ_FIRING_GUN);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag
$LN3@SetFiring:

; 643  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFiring@SimBaseClass@@QAEXH@Z ENDP			; SimBaseClass::SetFiring
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetExploding@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetExploding
; _this$ = ecx

; 564  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 565  : // 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS CLEARED
; 566  : //  SetIncomingMissile( NULL );
; 567  : 	SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 568  : // END OF ADDED SECTION
; 569  :    SetThreat( NULL, THREAT_NONE );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat

; 570  :    if (flag)

	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $LN2@SetExplodi

; 571  :    {
; 572  :       SetFlag (OBJ_EXPLODING);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 573  :    }
; 574  :    else

	jmp	SHORT $LN3@SetExplodi
$LN2@SetExplodi:

; 575  :    {
; 576  : 	   UnSetFlag (OBJ_EXPLODING);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnSetFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetFlag
$LN3@SetExplodi:

; 577  :    }
; 578  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetExploding@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
tv319 = -20						; size = 4
tv311 = -16						; size = 4
tv303 = -12						; size = 4
_session$2 = -8						; size = 4
_this$ = -4						; size = 4
?SetRemoveSilentFlag@SimBaseClass@@QAEXXZ PROC		; SimBaseClass::SetRemoveSilentFlag
; _this$ = ecx

; 518  : void SimBaseClass::SetRemoveSilentFlag (void){

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 	// 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS CLEARED
; 520  : 	//  SetIncomingMissile( NULL );
; 521  : 	SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 522  : 	// END OF ADDED SECTION
; 523  :     SetThreat( NULL, THREAT_NONE );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat

; 524  : 
; 525  : 	if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN4@SetRemoveS

; 526  : 		Sleep();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN4@SetRemoveS:

; 527  : 	}
; 528  : 
; 529  : 	// Detach any player who is attached to this entity
; 530  : 	if (IsPlayer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN1@SetRemoveS

; 531  : 	{
; 532  : 		FalconSessionEntity *session = (FalconSessionEntity*) vuDatabase->Find(OwnerId());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _session$2[ebp], eax

; 533  : 		GameManager.DetachPlayerFromVehicle (session, (SimMoverClass*)this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _session$2[ebp]
	push	edx
	mov	ecx, OFFSET ?GameManager@@3VGameManagerClass@@A ; GameManager
	call	?DetachPlayerFromVehicle@GameManagerClass@@QAEHPAVFalconSessionEntity@@PAVSimMoverClass@@@Z ; GameManagerClass::DetachPlayerFromVehicle

; 534  : 		// KCK: One problem with this is that when the entity goes away, so does this
; 535  : 		// player's camera. I'm going to temporarily set the player's camera to the
; 536  : 		// player's session, and setting the session's location
; 537  : 		// This will get cleared on sim exit.
; 538  : 		if (session){

	cmp	DWORD PTR _session$2[ebp], 0
	je	SHORT $LN2@SetRemoveS

; 539  : 			session->SetPosition(XPos(),YPos(),ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _session$2[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 540  : 			session->ClearCameras();

	push	0
	mov	ecx, DWORD PTR _session$2[ebp]
	call	?ClearCameras@VuSessionEntity@@QAEX_N@Z	; VuSessionEntity::ClearCameras

; 541  : 			session->AttachCamera(session);

	push	0
	mov	eax, DWORD PTR _session$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$2[ebp]
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN2@SetRemoveS:

; 542  : 		}
; 543  : 		// Pan out if it's the local player
; 544  : 		if (session == FalconLocalSession)

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$2[ebp], eax
	jne	$LN1@SetRemoveS

; 545  : 		{
; 546  : 			OTWDriver.SetEndFlightPoint(
; 547  : 				XPos() - dmx[0][0] * 1000.0f,
; 548  : 				YPos() - dmx[0][1] * 1000.0f,
; 549  : 				ZPos() - dmx[0][2] * 1000.0f );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv303[ebp]
	movss	xmm0, DWORD PTR tv303[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR __real@447a0000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv311[ebp]
	movss	xmm0, DWORD PTR tv311[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR __real@447a0000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv319[ebp]
	movss	xmm0, DWORD PTR tv319[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR __real@447a0000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetEndFlightPoint@OTWDriverClass@@QAEXMMM@Z ; OTWDriverClass::SetEndFlightPoint

; 550  : 			OTWDriver.SetEndFlightVec(
; 551  : 				-dmx[0][0],
; 552  : 				-dmx[0][1],
; 553  : 				-dmx[0][2] );

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetEndFlightVec@OTWDriverClass@@QAEXMMM@Z ; OTWDriverClass::SetEndFlightVec
$LN1@SetRemoveS:

; 554  : 		}
; 555  : 	}
; 556  : 	localFlags |= REMOVE_NEXT_FRAME;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+284]
	or	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+284], dl

; 557  : 
; 558  :     SetFlag (OBJ_DEAD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 559  : 
; 560  : 	vuDatabase->SilentRemove(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?SilentRemove@VuDatabase@@QAEHPAVVuEntity@@@Z ; VuDatabase::SilentRemove

; 561  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetRemoveSilentFlag@SimBaseClass@@QAEXXZ ENDP		; SimBaseClass::SetRemoveSilentFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
tv319 = -20						; size = 4
tv311 = -16						; size = 4
tv303 = -12						; size = 4
_session$2 = -8						; size = 4
_this$ = -4						; size = 4
?SetRemoveFlag@SimBaseClass@@QAEXXZ PROC		; SimBaseClass::SetRemoveFlag
; _this$ = ecx

; 468  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 469  : 	// 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS CLEARED
; 470  : 	//  SetIncomingMissile( NULL );
; 471  : 	SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 472  : 	// END OF ADDED SECTION
; 473  :     SetThreat( NULL, THREAT_NONE );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat

; 474  : 
; 475  : 	// OW commented out after fixing feature memory leak (features now using this function too)
; 476  : 	//	ShiAssert(!IsStatic());
; 477  : 
; 478  : 	if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN4@SetRemoveF

; 479  : 		Sleep();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
$LN4@SetRemoveF:

; 480  : 	}
; 481  : 
; 482  : 	// Detach any player who is attached to this entity
; 483  : 	if (IsPlayer()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN1@SetRemoveF

; 484  : 		FalconSessionEntity *session = (FalconSessionEntity*) vuDatabase->Find(OwnerId());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _session$2[ebp], eax

; 485  : 		GameManager.DetachPlayerFromVehicle (session, (SimMoverClass*)this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _session$2[ebp]
	push	edx
	mov	ecx, OFFSET ?GameManager@@3VGameManagerClass@@A ; GameManager
	call	?DetachPlayerFromVehicle@GameManagerClass@@QAEHPAVFalconSessionEntity@@PAVSimMoverClass@@@Z ; GameManagerClass::DetachPlayerFromVehicle

; 486  : 		// KCK: One problem with this is that when the entity goes away, so does this
; 487  : 		// player's camera. I'm going to temporarily set the player's camera to the
; 488  : 		// player's session, and setting the session's location
; 489  : 		// This will get cleared on sim exit.
; 490  : 		if (session){

	cmp	DWORD PTR _session$2[ebp], 0
	je	SHORT $LN2@SetRemoveF

; 491  : 			session->SetPosition(XPos(),YPos(),ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _session$2[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 492  : 			session->ClearCameras();

	push	0
	mov	ecx, DWORD PTR _session$2[ebp]
	call	?ClearCameras@VuSessionEntity@@QAEX_N@Z	; VuSessionEntity::ClearCameras

; 493  : 			session->AttachCamera(session);

	push	0
	mov	eax, DWORD PTR _session$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _session$2[ebp]
	call	?AttachCamera@VuSessionEntity@@QAEHPAVVuEntity@@_N@Z ; VuSessionEntity::AttachCamera
$LN2@SetRemoveF:

; 494  : 		}
; 495  : 		// Pan out if it's the local player
; 496  : 		if (session == FalconLocalSession){

	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$2[ebp], eax
	jne	$LN1@SetRemoveF

; 497  : 			OTWDriver.SetEndFlightPoint(
; 498  : 				XPos() - dmx[0][0] * 1000.0f,
; 499  : 				YPos() - dmx[0][1] * 1000.0f,
; 500  : 				ZPos() - dmx[0][2] * 1000.0f 
; 501  : 			);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv303[ebp]
	movss	xmm0, DWORD PTR tv303[ebp]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR __real@447a0000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv311[ebp]
	movss	xmm0, DWORD PTR tv311[ebp]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR __real@447a0000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv319[ebp]
	movss	xmm0, DWORD PTR tv319[ebp]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR __real@447a0000
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetEndFlightPoint@OTWDriverClass@@QAEXMMM@Z ; OTWDriverClass::SetEndFlightPoint

; 502  : 			OTWDriver.SetEndFlightVec(
; 503  : 				-dmx[0][0],
; 504  : 				-dmx[0][1],
; 505  : 				-dmx[0][2] 
; 506  : 			);

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR [eax+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetEndFlightVec@OTWDriverClass@@QAEXMMM@Z ; OTWDriverClass::SetEndFlightVec
$LN1@SetRemoveF:

; 507  : 		}
; 508  : 	}
; 509  : 	localFlags |= REMOVE_NEXT_FRAME;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+284]
	or	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+284], dl

; 510  : 
; 511  :     SetFlag(OBJ_DEAD);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 512  : 
; 513  : 	// sfr: do this while looping objects
; 514  : 	// sfr: safe to do here again with garbage collector
; 515  : 	vuDatabase->Remove(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Remove@VuDatabase@@QAEHPAVVuEntity@@@Z	; VuDatabase::Remove

; 516  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetRemoveFlag@SimBaseClass@@QAEXXZ ENDP		; SimBaseClass::SetRemoveFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetRemoveFlag@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSetRemoveFlag@SimBaseClass@@QBEHXZ PROC		; SimBaseClass::IsSetRemoveFlag, COMDAT
; _this$ = ecx

; 185  : 	int IsSetRemoveFlag() const { return localFlags & REMOVE_NEXT_FRAME; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSetRemoveFlag@SimBaseClass@@QBEHXZ ENDP		; SimBaseClass::IsSetRemoveFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetCampaignFlag@SimBaseClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetCampaignFlag@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetCampaignFlag, COMDAT
; _this$ = ecx

; 183  : 	void SetCampaignFlag(int flag){ campaignFlags |= flag; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCampaignFlag@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetCampaignFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?UnSetLocalFlag@SimBaseClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?UnSetLocalFlag@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::UnSetLocalFlag, COMDAT
; _this$ = ecx

; 181  : 	void UnSetLocalFlag(int flag){ localFlags &= ~(flag); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _flag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+284]
	and	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+284], dl
	mov	esp, ebp
	pop	ebp
	ret	4
?UnSetLocalFlag@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::UnSetLocalFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetLocalFlag@SimBaseClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetLocalFlag@SimBaseClass@@QAEXH@Z PROC		; SimBaseClass::SetLocalFlag, COMDAT
; _this$ = ecx

; 180  : 	void SetLocalFlag(int flag){ localFlags |= flag; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+284]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+284], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLocalFlag@SimBaseClass@@QAEXH@Z ENDP		; SimBaseClass::SetLocalFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsAwake@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 177  : 	int IsAwake() const { return localFlags & OBJ_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsDead@SimBaseClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsDead@SimBaseClass@@UBEHXZ PROC			; SimBaseClass::IsDead, COMDAT
; _this$ = ecx

; 174  : 	virtual int IsDead() const { return (specialData.flags & OBJ_DEAD ? true : false); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@IsDead
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsDead
$LN3@IsDead:
	mov	BYTE PTR tv68[ebp], 0
$LN4@IsDead:
	movzx	eax, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@SimBaseClass@@UBEHXZ ENDP			; SimBaseClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsExploding@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsExploding@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::IsExploding, COMDAT
; _this$ = ecx

; 173  : 	virtual int IsExploding () { return (specialData.flags & OBJ_EXPLODING ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@IsExplodin
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsExplodin
$LN3@IsExplodin:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsExplodin:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?OnGround@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?OnGround@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::OnGround, COMDAT
; _this$ = ecx

; 172  : 	virtual int OnGround () { return (specialData.flags & ON_GROUND ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@OnGround
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@OnGround
$LN3@OnGround:
	mov	DWORD PTR tv68[ebp], 0
$LN4@OnGround:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeRemote@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::MakeRemote
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 	// LEON TODO: Need to do all necessary shit to convert from a remote to a local entity.
; 354  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MakeRemote@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::MakeRemote
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLocal@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::MakeLocal
; _this$ = ecx

; 347  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 	// LEON TODO: Need to do all necessary shit to convert from a local to a remote entity.
; 349  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLocal@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::MakeLocal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ PROC	; SimBaseClass::GetMovementType
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 	if (campaignObject)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??B?$VuBin@VCampBaseClass@@@@QBE_NXZ	; VuBin<CampBaseClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetMovemen

; 459  : 		return campaignObject->GetMovementType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [edx+228]
	call	eax
	jmp	SHORT $LN3@GetMovemen

; 460  : 	else

	jmp	SHORT $LN3@GetMovemen
$LN2@GetMovemen:

; 461  : 		return NoMove;		// This should eventually never happen, but probably doesn't matter in IA or Dogfight

	xor	eax, eax
$LN3@GetMovemen:

; 462  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ ENDP	; SimBaseClass::GetMovementType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?Sleep@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::Sleep
; _this$ = ecx

; 416  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 417  : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 418  : 
; 419  : 	// KCK: Stops this object from being sim aware
; 420  : 	if (!IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	jne	SHORT $LN2@Sleep

; 421  : 		return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	jmp	SHORT $LN3@Sleep
$LN2@Sleep:

; 422  : 	}
; 423  : 
; 424  : 	// 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS CLEARED
; 425  : 	//  SetIncomingMissile( NULL );
; 426  : 	SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 427  : 	// END OF ADDED SECTION
; 428  :     SetThreat( NULL, THREAT_NONE );

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetThreat@SimBaseClass@@QAEXPAVFalconEntity@@H@Z ; SimBaseClass::SetThreat

; 429  : 
; 430  : 	UnSetLocalFlag(OBJ_AWAKE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnSetLocalFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::UnSetLocalFlag

; 431  : 
; 432  : 	// Remove the drawable object
; 433  : 	if (drawPointer){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@Sleep

; 434  : 		OTWDriver.RemoveObject (drawPointer, TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z ; OTWDriverClass::RemoveObject

; 435  : 		drawPointer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0
$LN1@Sleep:

; 436  : 	}
; 437  : 
; 438  : #if 0	// The code screws up IA by violently removing vehicles from the campaign unit prior to reagg, thus "losing" them.
; 439  : /*
; 440  : 	if (SimDriver.RunningInstantAction() && !IsSetFlag(MOTION_OWNSHIP))
; 441  : 		{
; 442  : 		// This is an instant action game - We want to remove the object
; 443  : 		// and regenate a new one
; 444  : 		//if (Strength() < MaxStrength())
; 445  : 			//SimDriver.UpdateIAStats(this);
; 446  : 		//else
; 447  : 			//InstantAction.RegenTarget (this);
; 448  : 		if (!IsSetRemoveFlag())
; 449  : 			SetRemoveFlag();
; 450  : 		}
; 451  : */
; 452  : #endif
; 453  : 	return retval;

	mov	eax, DWORD PTR _retval$[ebp]
$LN3@Sleep:

; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_freq$1 = -40						; size = 8
_beg$2 = -32						; size = 8
_end$3 = -24						; size = 8
_res$4 = -16						; size = 8
_scale$ = -8						; size = 4
_this$ = -4						; size = 4
?Wake@SimBaseClass@@UAEHXZ PROC				; SimBaseClass::Wake
; _this$ = ecx

; 373  : int SimBaseClass::Wake(){

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 	float scale;
; 375  : 
; 376  : 	// KCK: Sets up this object to become sim aware
; 377  : 	ShiAssert (!IsAwake());
; 378  : 
; 379  : 	// Join our flight, if we have one
; 380  : 	JoinFlight();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+324]
	call	eax

; 381  : 
; 382  : 	// edg: sanity check scale -- I've had problems.  Don't ask....
; 383  : 	scale = OTWDriver.Scale();

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?Scale@OTWDriverClass@@QAEMXZ		; OTWDriverClass::Scale
	fstp	DWORD PTR _scale$[ebp]

; 384  : 	if ( scale < 1.0f ){

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _scale$[ebp]
	jbe	SHORT $LN4@Wake

; 385  : 		scale = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scale$[ebp], xmm0
$LN4@Wake:

; 386  : 	}
; 387  : 
; 388  : 	ShiAssert (OTWDriver.IsActive());
; 389  : 
; 390  : 	// Create a drawable object
; 391  : 	// Note:  Our child classes could have already created our drawable for us.
; 392  : 	if (!drawPointer || drawPointer == (DrawableObject*)0xbaadf00d) // FRB

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN2@Wake
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+332], -1163005939	; baadf00dH
	jne	$LN1@Wake
$LN2@Wake:

; 393  : 	{
; 394  : 		drawPointer = NULL; // FRB - Just in case it is not initialized (= 0xbaadf00d)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0

; 395  : 		//START_PROFILE("CREATEVISUAL");
; 396  : 		static LARGE_INTEGER biggest = { 0 };
; 397  : 		LARGE_INTEGER freq, res;
; 398  : 		LARGE_INTEGER beg, end;
; 399  : 		QueryPerformanceCounter(&beg);

	lea	ecx, DWORD PTR _beg$2[ebp]
	push	ecx
	call	DWORD PTR __imp__QueryPerformanceCounter@4

; 400  : 		OTWDriver.CreateVisualObject(this, scale);

	push	ecx
	movss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CreateVisualObject@OTWDriverClass@@QAEXPAVSimBaseClass@@M@Z ; OTWDriverClass::CreateVisualObject

; 401  : 		QueryPerformanceCounter(&end);

	lea	eax, DWORD PTR _end$3[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4

; 402  : 		QueryPerformanceFrequency(&freq);

	lea	ecx, DWORD PTR _freq$1[ebp]
	push	ecx
	call	DWORD PTR __imp__QueryPerformanceFrequency@4

; 403  : 		res.QuadPart = ((end.QuadPart - beg.QuadPart) * 1000000) / freq.QuadPart;

	mov	edx, DWORD PTR _end$3[ebp]
	sub	edx, DWORD PTR _beg$2[ebp]
	mov	eax, DWORD PTR _end$3[ebp+4]
	sbb	eax, DWORD PTR _beg$2[ebp+4]
	push	0
	push	1000000					; 000f4240H
	push	eax
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _freq$1[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _freq$1[ebp]
	push	ecx
	push	edx
	push	eax
	call	__alldiv
	mov	DWORD PTR _res$4[ebp], eax
	mov	DWORD PTR _res$4[ebp+4], edx

; 404  : 		if (res.QuadPart > biggest.QuadPart){

	mov	edx, DWORD PTR _res$4[ebp+4]
	cmp	edx, DWORD PTR ?biggest@?7??Wake@SimBaseClass@@UAEHXZ@4T_LARGE_INTEGER@@A+4
	jl	SHORT $LN1@Wake
	jg	SHORT $LN7@Wake
	mov	eax, DWORD PTR _res$4[ebp]
	cmp	eax, DWORD PTR ?biggest@?7??Wake@SimBaseClass@@UAEHXZ@4T_LARGE_INTEGER@@A
	jbe	SHORT $LN1@Wake
$LN7@Wake:

; 405  : 			biggest.QuadPart = res.QuadPart;

	mov	ecx, DWORD PTR _res$4[ebp]
	mov	DWORD PTR ?biggest@?7??Wake@SimBaseClass@@UAEHXZ@4T_LARGE_INTEGER@@A, ecx
	mov	edx, DWORD PTR _res$4[ebp+4]
	mov	DWORD PTR ?biggest@?7??Wake@SimBaseClass@@UAEHXZ@4T_LARGE_INTEGER@@A+4, edx
$LN1@Wake:

; 406  : 		}
; 407  : 		REPORT_VALUE("CREATEVISUALBIG (us)", biggest.QuadPart);
; 408  : 		//STOP_PROFILE("CREATEVISUAL");
; 409  : 	}
; 410  : 
; 411  : 	SetLocalFlag(OBJ_AWAKE);	

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetLocalFlag@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetLocalFlag

; 412  : 	return 1;

	mov	eax, 1

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@SimBaseClass@@UAEHXZ ENDP				; SimBaseClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T1 = -112						; size = 8
$T2 = -104						; size = 8
_classPtr$3 = -96					; size = 4
_campObj$4 = -92					; size = 4
_this$ = -88						; size = 4
_temp$5 = -84						; size = 40
_label$6 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_new_owner$ = 8						; size = 8
?ChangeOwner@SimBaseClass@@UAEXVVU_ID@@@Z PROC		; SimBaseClass::ChangeOwner
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	ShiAssert ( new_owner );
; 310  : 
; 311  : 	if (new_owner == OwnerId()){

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	push	eax
	lea	ecx, DWORD PTR _new_owner$[ebp]
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@ChangeOwne

; 312  : 		return;		// Nothing to do!

	jmp	$LN7@ChangeOwne
$LN6@ChangeOwne:

; 313  : 	}
; 314  : 
; 315  : 	if (IsVehicle ()){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+176]
	call	edx
	test	eax, eax
	je	$LN5@ChangeOwne

; 316  : 		Falcon4EntityClassType	*classPtr = (Falcon4EntityClassType*)this->EntityType();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$3[ebp], eax

; 317  : 		char					label[40] = {0};

	mov	BYTE PTR _label$6[ebp], 0
	push	39					; 00000027H
	push	0
	lea	eax, DWORD PTR _label$6[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 318  : 		CampEntity				campObj;
; 319  : 
; 320  : 		campObj = GetCampaignObject();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR _campObj$4[ebp], eax

; 321  : 		if (campObj && campObj->IsFlight() && campObj->InPackage()){

	cmp	DWORD PTR _campObj$4[ebp], 0
	je	SHORT $LN4@ChangeOwne
	mov	ecx, DWORD PTR _campObj$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _campObj$4[ebp]
	mov	eax, DWORD PTR [edx+248]
	call	eax
	test	eax, eax
	je	SHORT $LN4@ChangeOwne
	mov	ecx, DWORD PTR _campObj$4[ebp]
	call	?InPackage@CampBaseClass@@QAEHXZ	; CampBaseClass::InPackage
	test	eax, eax
	je	SHORT $LN4@ChangeOwne

; 322  : 			char temp[40];
; 323  : 			GetCallsign(((Flight)campObj)->callsign_id,((Flight)campObj)->callsign_num,temp);

	lea	ecx, DWORD PTR _temp$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _campObj$4[ebp]
	movzx	eax, BYTE PTR [edx+426]
	push	eax
	mov	ecx, DWORD PTR _campObj$4[ebp]
	movzx	edx, BYTE PTR [ecx+425]
	push	edx
	call	?GetCallsign@@YAXHHPAD@Z		; GetCallsign
	add	esp, 12					; 0000000cH

; 324  : 			sprintf (label, "%s%d",temp,((SimVehicleClass*)this)->vehicleInUnit+1);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+664]
	add	ecx, 1
	push	ecx
	lea	edx, DWORD PTR _temp$5[ebp]
	push	edx
	push	OFFSET ??_C@_04HGGBINEM@?$CFs?$CFd?$AA@
	lea	eax, DWORD PTR _label$6[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 325  : 		}
; 326  : 		else {

	jmp	SHORT $LN5@ChangeOwne
$LN4@ChangeOwne:

; 327  : 			sprintf (label, "%s", ((VehicleClassDataType*)(classPtr->dataPtr))->Name);

	mov	ecx, DWORD PTR _classPtr$3[ebp]
	mov	edx, DWORD PTR [ecx+77]
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _label$6[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN5@ChangeOwne:

; 328  : 		}
; 329  : 	}
; 330  : 
; 331  : 	// LEON TODO: Fill in various sub class's MakeRemote() functions
; 332  : 	if (IsLocal() && new_owner != FalconLocalSession->Id()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@ChangeOwne
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	push	eax
	lea	ecx, DWORD PTR _new_owner$[ebp]
	call	??9VU_ID@@QBE_NABV0@@Z			; VU_ID::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ChangeOwne

; 333  : 		MakeRemote();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+336]
	call	eax
$LN2@ChangeOwne:

; 334  : 	}
; 335  : 
; 336  : 	// KCK: Changes VU owner id to the new session
; 337  : 	// Note, Also sends transfer message to the remote machine
; 338  : 	SetOwnerId(new_owner);

	mov	ecx, DWORD PTR _new_owner$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _new_owner$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetOwnerId@VuEntity@@QAEXVVU_ID@@@Z	; VuEntity::SetOwnerId

; 339  : 
; 340  : 	// LEON TODO: Fill in various sub class's MakeLocal() functions
; 341  : 	if (IsLocal()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@ChangeOwne

; 342  : 		MakeLocal();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+332]
	call	eax
$LN7@ChangeOwne:

; 343  : 	}
; 344  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeOwner@SimBaseClass@@UAEXVVU_ID@@@Z ENDP		; SimBaseClass::ChangeOwner
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?GetCampID@SimBaseClass@@UAEFXZ PROC			; SimBaseClass::GetCampID
; _this$ = ecx

; 362  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 363  : 	if (GetCampaignObject()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	test	eax, eax
	je	SHORT $LN2@GetCampID

; 364  : 		return GetCampaignObject()->GetCampID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv74[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax
	jmp	SHORT $LN3@GetCampID

; 365  : 	} 
; 366  : 	else {

	jmp	SHORT $LN3@GetCampID
$LN2@GetCampID:

; 367  : 		return 0;

	xor	eax, eax
$LN3@GetCampID:

; 368  : 	}
; 369  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampID@SimBaseClass@@UAEFXZ ENDP			; SimBaseClass::GetCampID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCountry@SimBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@SimBaseClass@@UAEEXZ PROC			; SimBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 157  : 	virtual uchar GetCountry() { return (uchar)specialData.country; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@SimBaseClass@@UAEEXZ ENDP			; SimBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTeam@SimBaseClass@@UAEEXZ PROC			; SimBaseClass::GetTeam
; _this$ = ecx

; 357  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 358  : 	return (uchar)(::GetTeam((uchar)specialData.country));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	push	ecx
	call	?GetTeam@@YAEE@Z			; GetTeam
	add	esp, 4

; 359  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@SimBaseClass@@UAEEXZ ENDP			; SimBaseClass::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSimBase@SimBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@SimBaseClass@@UAE_NXZ PROC			; SimBaseClass::IsSimBase, COMDAT
; _this$ = ecx

; 152  : 	virtual bool IsSimBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@SimBaseClass@@UAE_NXZ ENDP			; SimBaseClass::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupLocalData@SimBaseClass@@AAEXXZ PROC		; SimBaseClass::CleanupLocalData
; _this$ = ecx

; 272  : void SimBaseClass::CleanupLocalData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  : 	if (drawPointer){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@CleanupLoc

; 274  : 		OTWDriver.RemoveObject(drawPointer, TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z ; OTWDriverClass::RemoveObject

; 275  : 		drawPointer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0
$LN1@CleanupLoc:

; 276  : 	}
; 277  : 	//if ( platformAngles ){
; 278  : 	//	delete platformAngles;
; 279  : 	//}
; 280  : 	//platformAngles = NULL;
; 281  : 
; 282  : 	// JB 010118
; 283  : 	SetIncomingMissile( NULL, TRUE );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIncomingMissile@SimBaseClass@@QAEXPAV1@H@Z ; SimBaseClass::SetIncomingMissile

; 284  : 	campaignObject.reset();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::reset

; 285  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupLocalData@SimBaseClass@@AAEXXZ ENDP		; SimBaseClass::CleanupLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitLocalData@SimBaseClass@@AAEXXZ PROC		; SimBaseClass::InitLocalData
; _this$ = ecx

; 153  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 154  : #if 1
; 155  : 	strength = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+240], xmm0

; 156  : 	maxStrength = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+244], xmm0

; 157  : 	pctStrength = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+292], xmm0

; 158  : 	dyingTimer = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+248], xmm0

; 159  : 	sfxTimer = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+252], xmm0

; 160  : 	timeOfDeath = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0

; 161  : 	lastDamageTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 0

; 162  : 	explosionTimer = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0

; 163  : 	drawPointer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+332], 0

; 164  : 	displayPriority = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+336], 0

; 165  : 	campaignFlags = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+280], 0

; 166  : 	localFlags = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+284], 0

; 167  : 	memset(incomingMissile, 0, sizeof(incomingMissile));

	push	8
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 420				; 000001a4H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 168  : 	threatObj.reset();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?reset@?$VuBin@VFalconEntity@@@@QAEXPAVFalconEntity@@@Z ; VuBin<FalconEntity>::reset

; 169  : 	threatType = THREAT_NONE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+440], 0

; 170  : 	memset(&specialData, 0, sizeof(specialData));

	push	80					; 00000050H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 171  : 	slotNumber = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+236], 0

; 172  : 	callsignIdx = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+232], 0

; 173  : 	SetTypeFlag(FalconSimEntity);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTypeFlag@FalconEntity@@QAEXH@Z	; FalconEntity::SetTypeFlag

; 174  : 	lastShooter = FalconNullId;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [edx+264], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [edx+268], ecx

; 175  : 	lastChaff	= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], 0

; 176  : 	lastFlare	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+276], 0

; 177  : 	dmx[0][0] = 1.0F;

	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0

; 178  : 	dmx[0][1] = 0.0F;

	mov	edx, 12					; 0000000cH
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 179  : 	dmx[0][2] = 0.0F;

	mov	eax, 12					; 0000000cH
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0

; 180  : 	dmx[1][0] = 0.0F;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0

; 181  : 	dmx[1][1] = 1.0F;

	mov	edx, 12					; 0000000cH
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0

; 182  : 	dmx[1][2] = 0.0F;

	mov	eax, 12					; 0000000cH
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+eax], xmm0

; 183  : 	dmx[2][0] = 0.0F;

	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0

; 184  : 	dmx[2][1] = 0.0F;

	mov	edx, 12					; 0000000cH
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 185  : 	dmx[2][2] = 1.0F;

	mov	eax, 12					; 0000000cH
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+eax], xmm0

; 186  : #else
; 187  : 	//initData = NULL;
; 188  : 	strength = 0.0;
; 189  : 	maxStrength = 0.0;
; 190  : 	pctStrength = 0.0;
; 191  : 	dyingTimer = 0.0;
; 192  : 	sfxTimer = 0.0;
; 193  : 	timeOfDeath = 0;
; 194  : 	lastDamageTime = 0;
; 195  : 	explosionTimer = 0;
; 196  : 	drawPointer = NULL;
; 197  : 	displayPriority = 0;
; 198  : 	campaignFlags = 0;
; 199  : 	localFlags = 0;
; 200  : 	// 2000-11-17 MODIFIED BY S.G. SO THE WHOLE incomingMissile ARRAY IS INITIALIZED
; 201  : 	//	incomingMissile = NULL;
; 202  : 	memset(incomingMissile, 0, sizeof(incomingMissile));
; 203  : 	// END OF MODIFIED SECTION
; 204  : 
; 205  : 	threatObj.reset();
; 206  : 	threatType = THREAT_NONE;
; 207  : 
; 208  : 	// edg: why wouldn't platform angles be NULL?  I'm suspicious that we
; 209  : 	// may be getting called 2x here and leaking mem
; 210  : 	//platformAngles = new ObjectGeometry;
; 211  : 	//SetStatus(0);
; 212  : 	memset(&specialData, 0, sizeof(specialData));
; 213  : 	SetSlot(0);
; 214  : 	SetCountry(0);
; 215  : 	SetCallsign(0);
; 216  : 	SetTypeFlag(FalconSimEntity);
; 217  : 	lastShooter = FalconNullId;
; 218  : 	lastChaff	= 0;
; 219  : 	lastFlare	= 0;
; 220  : 	dmx[0][0] = 1.0F;
; 221  : 	dmx[0][1] = 0.0F;
; 222  : 	dmx[0][2] = 0.0F;
; 223  : 	dmx[1][0] = 0.0F;
; 224  : 	dmx[1][1] = 1.0F;
; 225  : 	dmx[1][2] = 0.0F;
; 226  : 	dmx[2][0] = 0.0F;
; 227  : 	dmx[2][1] = 0.0F;
; 228  : 	dmx[2][2] = 1.0F;
; 229  : 	if (IsLocal()){
; 230  : 		SetPosition (0.0f, 0.0f, 0.0f );
; 231  : 		SetDelta (0.0f, 0.0f, 0.0f );
; 232  : 		SetYPR (0.0f, 0.0f, 0.0f );
; 233  : 		SetYPRDelta (0.0f, 0.0f, 0.0f );
; 234  : 	}
; 235  : #endif
; 236  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitLocalData@SimBaseClass@@AAEXXZ ENDP		; SimBaseClass::InitLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupData@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::CleanupData
; _this$ = ecx

; 267  : void SimBaseClass::CleanupData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@SimBaseClass@@AAEXXZ	; SimBaseClass::CleanupLocalData

; 269  : 	FalconEntity::CleanupData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupData@FalconEntity@@UAEXXZ	; FalconEntity::CleanupData

; 270  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupData@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::CleanupData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitData@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::InitData
; _this$ = ecx

; 238  : void SimBaseClass::InitData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 239  : 	FalconEntity::InitData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitData@FalconEntity@@UAEXXZ		; FalconEntity::InitData

; 240  : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimBaseClass@@AAEXXZ	; SimBaseClass::InitLocalData

; 241  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitData@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::InitData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1SimBaseClass@@UAE@XZ PROC				; SimBaseClass::~SimBaseClass
; _this$ = ecx

; 244  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1SimBaseClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SimBaseClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 245  : #if COUNT_SIMBASE
; 246  : 	{
; 247  : 		F4ScopeLock l(sbm);
; 248  : 		--nSimBase;
; 249  : 	}
; 250  : #endif
; 251  : 	// We should not be awake - this is the out of order messages stuff
; 252  : 	// REMOVE ASAP
; 253  : 	if (IsAwake()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN2@SimBaseCla

; 254  : 		Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@SimBaseClass@@UAEHXZ		; SimBaseClass::Sleep
$LN2@SimBaseCla:

; 255  : 	}
; 256  : 
; 257  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@SimBaseClass@@AAEXXZ	; SimBaseClass::CleanupLocalData

; 258  : 
; 259  : 	// for regeneration stuff
; 260  : 	// sfr: @todo move this to cleanup
; 261  : 	if (reinitData){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+416], 0
	je	SHORT $LN1@SimBaseCla

; 262  : 		delete reinitData;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@SimBaseCla:

; 263  : 	}
; 264  : 	reinitData = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], 0

; 265  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??1F4SoundPos@@QAE@XZ			; F4SoundPos::~F4SoundPos
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	??1?$VuBin@VFalconEntity@@@@QAE@XZ	; VuBin<FalconEntity>::~VuBin<FalconEntity>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	??1ObjectGeometry@@QAE@XZ		; ObjectGeometry::~ObjectGeometry
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??1SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::~SimBaseSpecialData
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??1?$VuBin@VCampBaseClass@@@@QAE@XZ	; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FalconEntity@@UAE@XZ			; FalconEntity::~FalconEntity
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1SimBaseClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEntity@@UAE@XZ			; FalconEntity::~FalconEntity
__unwindfunclet$??1SimBaseClass@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1?$VuBin@VCampBaseClass@@@@QAE@XZ	; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
__unwindfunclet$??1SimBaseClass@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::~SimBaseSpecialData
__unwindfunclet$??1SimBaseClass@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1ObjectGeometry@@QAE@XZ		; ObjectGeometry::~ObjectGeometry
__unwindfunclet$??1SimBaseClass@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	jmp	??1?$VuBin@VFalconEntity@@@@QAE@XZ	; VuBin<FalconEntity>::~VuBin<FalconEntity>
__unwindfunclet$??1SimBaseClass@@UAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1F4SoundPos@@QAE@XZ			; F4SoundPos::~F4SoundPos
__ehhandler$??1SimBaseClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1SimBaseClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1SimBaseClass@@UAE@XZ ENDP				; SimBaseClass::~SimBaseClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_camp_obj$ = -28					; size = 8
_this$ = -20						; size = 4
_flag$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_filePtr$ = 8						; size = 4
??0SimBaseClass@@QAE@PAU_iobuf@@@Z PROC			; SimBaseClass::SimBaseClass
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimBaseClass@@QAE@PAU_iobuf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _filePtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEntity@@QAE@PAU_iobuf@@@Z	; FalconEntity::FalconEntity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SimBaseClass@@6B@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::VuBin<CampBaseClass>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??0SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::SimBaseSpecialData
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	??0ObjectGeometry@@QAE@XZ		; ObjectGeometry::ObjectGeometry
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z ; VuBin<FalconEntity>::VuBin<FalconEntity>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??0F4SoundPos@@QAE@XZ			; F4SoundPos::F4SoundPos
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 80   : #if COUNT_SIMBASE
; 81   : 	{
; 82   : 		F4ScopeLock l(sbm);
; 83   : 		++nSimBase;
; 84   : 	}
; 85   : #endif
; 86   : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimBaseClass@@AAEXXZ	; SimBaseClass::InitLocalData

; 87   : 	VU_ID camp_obj;

	lea	ecx, DWORD PTR _camp_obj$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 88   : 	char flag;
; 89   : 	//platformAngles = NULL;
; 90   : 	reinitData = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], 0

; 91   : 	campaignObject.reset();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::reset

; 92   : 	fread (SpecialData(), sizeof (SimBaseSpecialData), 1, filePtr);

	mov	eax, DWORD PTR _filePtr$[ebp]
	push	eax
	push	1
	push	80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ ; SimBaseClass::SpecialData
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 93   : 	fread (&flag, sizeof (char), 1, filePtr);

	mov	ecx, DWORD PTR _filePtr$[ebp]
	push	ecx
	push	1
	push	1
	lea	edx, DWORD PTR _flag$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 94   : 	if (flag)

	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN2@SimBaseCla

; 95   : 	{
; 96   : 		fread (&camp_obj, sizeof (VU_ID), 1, filePtr);

	mov	ecx, DWORD PTR _filePtr$[ebp]
	push	ecx
	push	1
	push	8
	lea	edx, DWORD PTR _camp_obj$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 97   : 		SetCampaignObject((CampBaseClass*)vuDatabase->Find(camp_obj));

	mov	eax, DWORD PTR _camp_obj$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _camp_obj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCampaignObject@SimBaseClass@@QAEXPAVCampBaseClass@@@Z ; SimBaseClass::SetCampaignObject

; 98   : 	}
; 99   : 	else

	jmp	SHORT $LN1@SimBaseCla
$LN2@SimBaseCla:

; 100  : 	{
; 101  : 		fread (&campaignObject, sizeof (int), 1, filePtr);

	mov	edx, DWORD PTR _filePtr$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
$LN1@SimBaseCla:

; 102  : 	}
; 103  : 	fread (&callsignIdx, sizeof (int), 1, filePtr);

	mov	ecx, DWORD PTR _filePtr$[ebp]
	push	ecx
	push	1
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 104  : 	dirty_simbase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0

; 105  : 	nonLocalData = NULL;		// OW

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+412], 0

; 106  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEntity@@UAE@XZ			; FalconEntity::~FalconEntity
__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1?$VuBin@VCampBaseClass@@@@QAE@XZ	; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::~SimBaseSpecialData
__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1ObjectGeometry@@QAE@XZ		; ObjectGeometry::~ObjectGeometry
__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	jmp	??1?$VuBin@VFalconEntity@@@@QAE@XZ	; VuBin<FalconEntity>::~VuBin<FalconEntity>
__unwindfunclet$??0SimBaseClass@@QAE@PAU_iobuf@@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1F4SoundPos@@QAE@XZ			; F4SoundPos::~F4SoundPos
__ehhandler$??0SimBaseClass@@QAE@PAU_iobuf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimBaseClass@@QAE@PAU_iobuf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimBaseClass@@QAE@PAU_iobuf@@@Z ENDP			; SimBaseClass::SimBaseClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_camp_object$ = -28					; size = 8
_this$ = -20						; size = 4
_flag$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0SimBaseClass@@QAE@PAPAEPAJ@Z PROC			; SimBaseClass::SimBaseClass
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimBaseClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEntity@@QAE@PAPAEPAJ@Z		; FalconEntity::FalconEntity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7SimBaseClass@@6B@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::VuBin<CampBaseClass>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??0SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::SimBaseSpecialData
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	??0ObjectGeometry@@QAE@XZ		; ObjectGeometry::ObjectGeometry
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z ; VuBin<FalconEntity>::VuBin<FalconEntity>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??0F4SoundPos@@QAE@XZ			; F4SoundPos::F4SoundPos
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 110  : #if COUNT_SIMBASE
; 111  : 	{
; 112  : 		F4ScopeLock l(sbm);
; 113  : 		++nSimBase;
; 114  : 	}
; 115  : #endif
; 116  : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimBaseClass@@AAEXXZ	; SimBaseClass::InitLocalData

; 117  : 	VU_ID	camp_object;

	lea	ecx, DWORD PTR _camp_object$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 118  : 	char flag;
; 119  : 	//platformAngles = NULL;
; 120  : 	reinitData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+416], 0

; 121  : 	campaignObject.reset();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::reset

; 122  : 	memcpychk(SpecialData(), stream, sizeof (SimBaseSpecialData), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	80					; 00000050H
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SpecialData@SimBaseClass@@QAEPAVSimBaseSpecialData@@XZ ; SimBaseClass::SpecialData
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 123  : 	memcpychk(&flag, stream, sizeof (char), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _flag$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 124  : 	if (flag) {

	movsx	eax, BYTE PTR _flag$[ebp]
	test	eax, eax
	je	SHORT $LN2@SimBaseCla

; 125  : 		memcpychk(&camp_object, stream, sizeof (VU_ID), rem);

	mov	ecx, DWORD PTR _rem$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	lea	eax, DWORD PTR _camp_object$[ebp]
	push	eax
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 126  : 		SetCampaignObject((CampBaseClass*)vuDatabase->Find(camp_object));

	mov	ecx, DWORD PTR _camp_object$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _camp_object$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCampaignObject@SimBaseClass@@QAEXPAVCampBaseClass@@@Z ; SimBaseClass::SetCampaignObject

; 127  : 	}
; 128  : 	else {

	jmp	SHORT $LN1@SimBaseCla
$LN2@SimBaseCla:

; 129  : 		memcpychk(&campaignObject, stream, sizeof (int), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 144				; 00000090H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H
$LN1@SimBaseCla:

; 130  : 	}
; 131  : 	memcpychk(&callsignIdx, stream, sizeof (int), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 132  : 	dirty_simbase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0

; 133  : 	nonLocalData = NULL;		// OW

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+412], 0

; 134  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEntity@@UAE@XZ			; FalconEntity::~FalconEntity
__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1?$VuBin@VCampBaseClass@@@@QAE@XZ	; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::~SimBaseSpecialData
__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1ObjectGeometry@@QAE@XZ		; ObjectGeometry::~ObjectGeometry
__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	jmp	??1?$VuBin@VFalconEntity@@@@QAE@XZ	; VuBin<FalconEntity>::~VuBin<FalconEntity>
__unwindfunclet$??0SimBaseClass@@QAE@PAPAEPAJ@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1F4SoundPos@@QAE@XZ			; F4SoundPos::~F4SoundPos
__ehhandler$??0SimBaseClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimBaseClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimBaseClass@@QAE@PAPAEPAJ@Z ENDP			; SimBaseClass::SimBaseClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 2
??0SimBaseClass@@QAE@G@Z PROC				; SimBaseClass::SimBaseClass
; _this$ = ecx

; 137  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SimBaseClass@@QAE@G@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ?VolatileNS@@3VIdNamespace@@A	; VolatileNS
	call	?GetIdFromNamespace@@YAKAAVIdNamespace@@@Z ; GetIdFromNamespace
	add	esp, 4
	push	eax
	movzx	eax, WORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0FalconEntity@@QAE@GK@Z		; FalconEntity::FalconEntity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SimBaseClass@@6B@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::VuBin<CampBaseClass>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??0SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::SimBaseSpecialData
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	??0ObjectGeometry@@QAE@XZ		; ObjectGeometry::ObjectGeometry
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	??0?$VuBin@VFalconEntity@@@@QAE@PAVFalconEntity@@@Z ; VuBin<FalconEntity>::VuBin<FalconEntity>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??0F4SoundPos@@QAE@XZ			; F4SoundPos::F4SoundPos
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 138  : #if COUNT_SIMBASE
; 139  : 	{
; 140  : 		F4ScopeLock l(sbm);
; 141  : 		++nSimBase;
; 142  : 	}
; 143  : #endif
; 144  : 	//platformAngles = NULL;
; 145  : 	reinitData = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], 0

; 146  : 	campaignObject.reset();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ; VuBin<CampBaseClass>::reset

; 147  : 	dirty_simbase = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+228], 0

; 148  : 	nonLocalData = NULL;		// OW

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+412], 0

; 149  : 	InitLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@SimBaseClass@@AAEXXZ	; SimBaseClass::InitLocalData

; 150  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SimBaseClass@@QAE@G@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1FalconEntity@@UAE@XZ			; FalconEntity::~FalconEntity
__unwindfunclet$??0SimBaseClass@@QAE@G@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1?$VuBin@VCampBaseClass@@@@QAE@XZ	; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
__unwindfunclet$??0SimBaseClass@@QAE@G@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1SimBaseSpecialData@@QAE@XZ		; SimBaseSpecialData::~SimBaseSpecialData
__unwindfunclet$??0SimBaseClass@@QAE@G@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1ObjectGeometry@@QAE@XZ		; ObjectGeometry::~ObjectGeometry
__unwindfunclet$??0SimBaseClass@@QAE@G@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	jmp	??1?$VuBin@VFalconEntity@@@@QAE@XZ	; VuBin<FalconEntity>::~VuBin<FalconEntity>
__unwindfunclet$??0SimBaseClass@@QAE@G@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1F4SoundPos@@QAE@XZ			; F4SoundPos::~F4SoundPos
__ehhandler$??0SimBaseClass@@QAE@G@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SimBaseClass@@QAE@G@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SimBaseClass@@QAE@G@Z ENDP				; SimBaseClass::SimBaseClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?JoinFlight@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?JoinFlight@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::JoinFlight, COMDAT
; _this$ = ecx

; 139  : 	virtual void JoinFlight (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoinFlight@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::JoinFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?WeaponKeepAlive@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WeaponKeepAlive@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::WeaponKeepAlive, COMDAT
; _this$ = ecx

; 136  : 	virtual void WeaponKeepAlive( void ) { return; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?WeaponKeepAlive@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::WeaponKeepAlive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newe$ = 8						; size = 4
?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z PROC ; VuBin<CampBaseClass>::reset, COMDAT
; _this$ = ecx

; 60   : 	void reset(E *newe = NULL){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 		if (newe == e){ return; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newe$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@reset
	jmp	SHORT $LN2@reset
$LN1@reset:

; 62   : 		VuReferenceEntity(newe); // ref new pointer

	mov	edx, DWORD PTR _newe$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 63   : 		VuDeReferenceEntity(e);  // unref old pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 64   : 		e = newe;                // get new pointer

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newe$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@reset:

; 65   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?reset@?$VuBin@VCampBaseClass@@@@QAEXPAVCampBaseClass@@@Z ENDP ; VuBin<CampBaseClass>::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VCampBaseClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VCampBaseClass@@@@QBE_NXZ PROC		; VuBin<CampBaseClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VCampBaseClass@@@@QBE_NXZ ENDP		; VuBin<CampBaseClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??7?$VuBin@VCampBaseClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??7?$VuBin@VCampBaseClass@@@@QBE_NXZ PROC		; VuBin<CampBaseClass>::operator!, COMDAT
; _this$ = ecx

; 37   : 	bool operator!() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 		return e == NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 39   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??7?$VuBin@VCampBaseClass@@@@QBE_NXZ ENDP		; VuBin<CampBaseClass>::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??1?$VuBin@VCampBaseClass@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$VuBin@VCampBaseClass@@@@QAE@XZ PROC		; VuBin<CampBaseClass>::~VuBin<CampBaseClass>, COMDAT
; _this$ = ecx

; 19   : 	~VuBin(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 		VuDeReferenceEntity((VuEntity *)e);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 21   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$VuBin@VCampBaseClass@@@@QAE@XZ ENDP		; VuBin<CampBaseClass>::~VuBin<CampBaseClass>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z PROC ; VuBin<CampBaseClass>::VuBin<CampBaseClass>, COMDAT
; _this$ = ecx

; 11   : 	explicit VuBin(E *e = NULL) : e(e){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	mov	DWORD PTR [eax], ecx

; 12   : 		VuReferenceEntity(e);

	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 13   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$VuBin@VCampBaseClass@@@@QAE@PAVCampBaseClass@@@Z ENDP ; VuBin<CampBaseClass>::VuBin<CampBaseClass>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SimBaseNonLocalData@@QAE@XZ PROC			; SimBaseNonLocalData::~SimBaseNonLocalData
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1SimBaseNonLocalData@@QAE@XZ ENDP			; SimBaseNonLocalData::~SimBaseNonLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\simlib\simbase.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SimBaseNonLocalData@@QAE@XZ PROC			; SimBaseNonLocalData::SimBaseNonLocalData
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	dx = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+16], xmm0

; 63   : 	dy = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+20], xmm0

; 64   : 	dz = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+24], xmm0

; 65   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SimBaseNonLocalData@@QAE@XZ ENDP			; SimBaseNonLocalData::SimBaseNonLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbsinl.cpp
;	COMDAT ??1SimBaseSpecialData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SimBaseSpecialData@@QAE@XZ PROC			; SimBaseSpecialData::~SimBaseSpecialData, COMDAT
; _this$ = ecx

; 19   : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1SimBaseSpecialData@@QAE@XZ ENDP			; SimBaseSpecialData::~SimBaseSpecialData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbsinl.cpp
;	COMDAT ??0SimBaseSpecialData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SimBaseSpecialData@@QAE@XZ PROC			; SimBaseSpecialData::SimBaseSpecialData, COMDAT
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 9    : 	memset (this, 0, sizeof(SimBaseSpecialData));

	push	80					; 00000050H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 10   : 	ChaffID = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+64], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+68], eax

; 11   : 	FlareID = FalconNullId;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [ecx+72], edx
	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [ecx+76], eax

; 12   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SimBaseSpecialData@@QAE@XZ ENDP			; SimBaseSpecialData::SimBaseSpecialData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\geometry.h
;	COMDAT ??1ObjectGeometry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ObjectGeometry@@QAE@XZ PROC				; ObjectGeometry::~ObjectGeometry, COMDAT
; _this$ = ecx

; 26   : 	~ObjectGeometry(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1ObjectGeometry@@QAE@XZ ENDP				; ObjectGeometry::~ObjectGeometry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\geometry.h
;	COMDAT ??0ObjectGeometry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ObjectGeometry@@QAE@XZ PROC				; ObjectGeometry::ObjectGeometry, COMDAT
; _this$ = ecx

; 25   : 	ObjectGeometry(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ObjectGeometry@@QAE@XZ ENDP				; ObjectGeometry::ObjectGeometry
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEject@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEject, COMDAT
; _this$ = ecx

; 138  : 	virtual int IsEject (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMover@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMover, COMDAT
; _this$ = ecx

; 134  : 	virtual int IsMover (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetTypeFlag@FalconEntity@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetTypeFlag@FalconEntity@@QAEXH@Z PROC			; FalconEntity::SetTypeFlag, COMDAT
; _this$ = ecx

; 108  : 	void SetTypeFlag (int flag)					{ falconType |= flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+137], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTypeFlag@FalconEntity@@QAEXH@Z ENDP			; FalconEntity::SetTypeFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z PROC	; VuEntity::SetSendCreate, COMDAT
; _this$ = ecx

; 148  : 	void SetSendCreate(VU_SEND_TYPE sc) { share_.flags_.breakdown_.sendCreate_ = sc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sc$[ebp]
	and	eax, 3
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -193				; ffffff3fH
	or	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSendCreate@VuEntity@@QAEXW4VU_SEND_TYPE@1@@Z ENDP	; VuEntity::SetSendCreate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??9VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??9VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator!=, COMDAT
; _this$ = ecx

; 111  : 	bool operator != (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return (
; 113  : 			num_ == rhs.num_ ? 
; 114  : 			(creator_ == rhs.creator_ ? false : true) : 
; 115  : 			true
; 116  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 1
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 117  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??9VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
