; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\FCC\Grndfcc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?Released@@3_NA					; Released
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?Released@@3_NA DB 01H DUP (?)				; Released
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_DTOS_SLEW_RATE DD 03d4ccccdr			; 0.05
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?abs@@YAMM@Z					; abs
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
PUBLIC	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
PUBLIC	?AirGroundMode@FireControlComputer@@AAEXXZ	; FireControlComputer::AirGroundMode
PUBLIC	?DTOSMode@FireControlComputer@@AAEXXZ		; FireControlComputer::DTOSMode
PUBLIC	?CalculateImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateImpactPoint
PUBLIC	?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateRocketImpactPoint
PUBLIC	?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::FindRelativeImpactPoint
PUBLIC	?DelayModePipperCorrection@FireControlComputer@@AAEXXZ ; FireControlComputer::DelayModePipperCorrection
PUBLIC	?CheckForBombRelease@FireControlComputer@@AAEXXZ ; FireControlComputer::CheckForBombRelease
PUBLIC	?DesignateGroundTarget@FireControlComputer@@AAEXXZ ; FireControlComputer::DesignateGroundTarget
PUBLIC	?SetDesignatedTarget@FireControlComputer@@AAEXXZ ; FireControlComputer::SetDesignatedTarget
PUBLIC	?CalculateReleaseRange@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateReleaseRange
PUBLIC	?FindTargetError@FireControlComputer@@AAEXXZ	; FireControlComputer::FindTargetError
PUBLIC	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
PUBLIC	?PlayerFCC@FireControlComputer@@QAEHXZ		; FireControlComputer::PlayerFCC
PUBLIC	?LADDMode@FireControlComputer@@QAEXXZ		; FireControlComputer::LADDMode
PUBLIC	?CalculateLADDReleaseRange@FireControlComputer@@QAEXXZ ; FireControlComputer::CalculateLADDReleaseRange
PUBLIC	??B?$VuBin@VMissileClass@@@@QBE_NXZ		; VuBin<MissileClass>::operator bool
PUBLIC	??C?$VuBin@VMissileClass@@@@QBEPAVMissileClass@@XZ ; VuBin<MissileClass>::operator->
PUBLIC	?CurHardpoint@SMSBaseClass@@QAEHXZ		; SMSBaseClass::CurHardpoint
PUBLIC	?GetAGBReleaseAngle@SMSClass@@QAEHXZ		; SMSClass::GetAGBReleaseAngle
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ	; SimVehicleClass::Brain
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	?IsDigital@AircraftClass@@QAEHXZ		; AircraftClass::IsDigital
PUBLIC	?FabsF@@YAMM@Z					; FabsF
PUBLIC	?SqrtF@@YAMM@Z					; SqrtF
PUBLIC	?SkillLevel@BaseBrain@@QAEHXZ			; BaseBrain::SkillLevel
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	?IsLocked@LaserPodClass@@QAEHXZ			; LaserPodClass::IsLocked
PUBLIC	?GetTargetPosition@LaserPodClass@@QAEXPAM00@Z	; LaserPodClass::GetTargetPosition
PUBLIC	?atanh@@YAMN@Z					; atanh
PUBLIC	?calcgrav@@YAMPAVFireControlComputer@@@Z	; calcgrav
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa34
PUBLIC	__real@3dcccccd
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@400ccccd
PUBLIC	__real@40800000
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@4200b53f
PUBLIC	__real@42652ee1
PUBLIC	__real@4280b53f
PUBLIC	__real@42f00000
PUBLIC	__real@45bde1b0
PUBLIC	__real@45fa0000
PUBLIC	__real@461c4000
PUBLIC	__real@463de1b0
PUBLIC	__real@46c35000
PUBLIC	__real@476d5a1c
PUBLIC	__real@47c35000
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0000000
PUBLIC	__real@c0800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_log:PROC
EXTRN	_sin:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?GetJDAMLift@BombClass@@QAEMXZ:PROC		; BombClass::GetJDAMLift
EXTRN	?GetJSOWmaxRange@BombClass@@QAEMXZ:PROC		; BombClass::GetJSOWmaxRange
EXTRN	?FindGroundIntersection@FireControlComputer@@AAEHMMPAM00@Z:PROC ; FireControlComputer::FindGroundIntersection
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?GetAreaFloorAndCeiling@OTWDriverClass@@QAEXPAM0@Z:PROC ; OTWDriverClass::GetAreaFloorAndCeiling
EXTRN	?GetGroundIntersection@OTWDriverClass@@QAEHPAUeuler@@PAUvector@@@Z:PROC ; OTWDriverClass::GetGroundIntersection
EXTRN	?FindRocketGroundImpact@MissileClass@@QAEHPAM000@Z:PROC ; MissileClass::FindRocketGroundImpact
EXTRN	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindSpeedInFeetPerSecond
EXTRN	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindHeadingAt
EXTRN	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z:PROC ; FindLaserPod
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?dragConstant@BombClass@@2MA:DWORD		; BombClass::dragConstant
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	?g_fCursorSpeed@@3MA:DWORD			; g_fCursorSpeed
EXTRN	?g_bEnableWindsAloft@@3_NA:BYTE			; g_bEnableWindsAloft
EXTRN	?g_fGroundImpactMod@@3MA:DWORD			; g_fGroundImpactMod
EXTRN	?g_fBombTimeStep@@3MA:DWORD			; g_fBombTimeStep
EXTRN	?g_bBombNumLoopOnly@@3_NA:BYTE			; g_bBombNumLoopOnly
EXTRN	?g_fHighDragGravFactor@@3MA:DWORD		; g_fHighDragGravFactor
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@47c35000
CONST	SEGMENT
__real@47c35000 DD 047c35000r			; 100000
CONST	ENDS
;	COMDAT __real@476d5a1c
CONST	SEGMENT
__real@476d5a1c DD 0476d5a1cr			; 60762.1
CONST	ENDS
;	COMDAT __real@46c35000
CONST	SEGMENT
__real@46c35000 DD 046c35000r			; 25000
CONST	ENDS
;	COMDAT __real@463de1b0
CONST	SEGMENT
__real@463de1b0 DD 0463de1b0r			; 12152.4
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45fa0000
CONST	SEGMENT
__real@45fa0000 DD 045fa0000r			; 8000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@4280b53f
CONST	SEGMENT
__real@4280b53f DD 04280b53fr			; 64.354
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?maxFudgeValue4@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA
_DATA	SEGMENT
?maxFudgeValue4@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA DD 041f00000r ; 30 ; `FireControlComputer::CalculateReleaseRange'::`42'::maxFudgeValue4
_DATA	ENDS
;	COMDAT ?maxFudgeValue3@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA
_DATA	SEGMENT
?maxFudgeValue3@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA DD 044638000r ; 910 ; `FireControlComputer::CalculateReleaseRange'::`42'::maxFudgeValue3
_DATA	ENDS
;	COMDAT ?minFudgeValue@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA
_DATA	SEGMENT
?minFudgeValue@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA DD 040000000r ; 2 ; `FireControlComputer::CalculateReleaseRange'::`42'::minFudgeValue
_DATA	ENDS
;	COMDAT ?LIMIT_PIPPER_AZ@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
CONST	SEGMENT
?LIMIT_PIPPER_AZ@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB DD 040490fd9r ; 3.14159 ; `FireControlComputer::DelayModePipperCorrection'::`2'::LIMIT_PIPPER_AZ
CONST	ENDS
;	COMDAT ?LIMIT_PIPPER_EL_MIN@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
CONST	SEGMENT
?LIMIT_PIPPER_EL_MIN@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB DD 0be685694r ; -0.226893 ; `FireControlComputer::DelayModePipperCorrection'::`2'::LIMIT_PIPPER_EL_MIN
CONST	ENDS
;	COMDAT ?LIMIT_PIPPER_EL_MAX@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
CONST	SEGMENT
?LIMIT_PIPPER_EL_MAX@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB DD 03d56774er ; 0.0523599 ; `FireControlComputer::DelayModePipperCorrection'::`2'::LIMIT_PIPPER_EL_MAX
CONST	ENDS
;	COMDAT ?test@?DG@??CalculateImpactPoint@FireControlComputer@@AAEXXZ@4MA
_DATA	SEGMENT
?test@?DG@??CalculateImpactPoint@FireControlComputer@@AAEXXZ@4MA DD 03f800000r ; 1 ; `FireControlComputer::CalculateImpactPoint'::`54'::test
_DATA	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv284 = -20						; size = 4
tv279 = -16						; size = 4
tv233 = -12						; size = 4
tv169 = -8						; size = 4
_theBomb$ = -4						; size = 4
_FCC$ = 8						; size = 4
?calcgrav@@YAMPAVFireControlComputer@@@Z PROC		; calcgrav

; 247  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi

; 248  : 	BombClass *theBomb;
; 249  : 
; 250  : 	if ( FCC && FCC->PlayerFCC() && FCC->Sms && FCC->Sms->CurHardpoint() >= 0 && 
; 251  : 		 FCC->Sms->hardPoint[FCC->Sms->CurHardpoint()] && 
; 252  : 		 FCC->Sms->hardPoint[FCC->Sms->CurHardpoint()]->weaponPointer && 
; 253  : 		 FCC->Sms->hardPoint[FCC->Sms->CurHardpoint()]->weaponPointer->IsBomb())			//be EXTRA careful

	cmp	DWORD PTR _FCC$[ebp], 0
	je	$LN3@calcgrav
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?PlayerFCC@FireControlComputer@@QAEHXZ	; FireControlComputer::PlayerFCC
	test	eax, eax
	je	$LN3@calcgrav
	mov	eax, DWORD PTR _FCC$[ebp]
	cmp	DWORD PTR [eax+408], 0
	je	$LN3@calcgrav
	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	ecx, DWORD PTR [ecx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	test	eax, eax
	jl	$LN3@calcgrav
	mov	edx, DWORD PTR _FCC$[ebp]
	mov	esi, DWORD PTR [edx+408]
	mov	eax, DWORD PTR _FCC$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	$LN3@calcgrav
	mov	edx, DWORD PTR _FCC$[ebp]
	mov	esi, DWORD PTR [edx+408]
	mov	eax, DWORD PTR _FCC$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	$LN3@calcgrav
	mov	eax, DWORD PTR _FCC$[ebp]
	mov	esi, DWORD PTR [eax+408]
	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	ecx, DWORD PTR [ecx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv169[ebp], eax
	mov	eax, DWORD PTR tv169[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	$LN3@calcgrav

; 254  : 	{
; 255  : 		theBomb = (BombClass *)FCC->Sms->hardPoint[FCC->Sms->CurHardpoint()]->weaponPointer.get();

	mov	ecx, DWORD PTR _FCC$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _FCC$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _theBomb$[ebp], eax

; 256  : 		if (
; 257  : 			theBomb && !(F4IsBadReadPtr(theBomb, sizeof(BombClass))) &&															//be EXTRA EXTRA careful
; 258  : 			(theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_GPS) ||
; 259  : 			(theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)
; 260  : 		){

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN1@calcgrav
	push	836					; 00000344H
	mov	edx, DWORD PTR _theBomb$[ebp]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@calcgrav
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 4
	je	SHORT $LN2@calcgrav
$LN1@calcgrav:
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN3@calcgrav
$LN2@calcgrav:

; 261  : 			// RV - Biker - Never give neg. gravity
; 262  : 			return max(GRAVITY - theBomb->GetJDAMLift(), 0.0f);		//The 0.6 value was derived from testing to prevent the CCRP from dropping when the bomb cant actually get to the target

	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?GetJDAMLift@BombClass@@QAEMXZ		; BombClass::GetJDAMLift
	fstp	DWORD PTR tv279[ebp]
	movss	xmm0, DWORD PTR __real@4200b53f
	subss	xmm0, DWORD PTR tv279[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@calcgrav
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?GetJDAMLift@BombClass@@QAEMXZ		; BombClass::GetJDAMLift
	fstp	DWORD PTR tv284[ebp]
	movss	xmm0, DWORD PTR __real@4200b53f
	subss	xmm0, DWORD PTR tv284[ebp]
	movss	DWORD PTR tv233[ebp], xmm0
	jmp	SHORT $LN8@calcgrav
$LN7@calcgrav:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv233[ebp], xmm0
$LN8@calcgrav:
	fld	DWORD PTR tv233[ebp]
	jmp	SHORT $LN5@calcgrav
$LN3@calcgrav:

; 263  : 		}
; 264  : 	}
; 265  : 	return GRAVITY;

	fld	DWORD PTR __real@4200b53f
$LN5@calcgrav:

; 266  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?calcgrav@@YAMPAVFireControlComputer@@@Z ENDP		; calcgrav
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv84 = -20						; size = 8
tv81 = -12						; size = 8
tv86 = -4						; size = 4
_x$ = 8							; size = 8
?atanh@@YAMN@Z PROC					; atanh

; 1111 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 1112 :    return (float)(0.5F * log ((1+x)/(1-x)));

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	addsd	xmm0, QWORD PTR _x$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _x$[ebp]
	divsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv81[ebp]
	movsd	xmm0, QWORD PTR tv81[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv84[ebp], xmm0
	fld	QWORD PTR tv84[ebp]
	fstp	DWORD PTR tv86[ebp]
	fld	DWORD PTR tv86[ebp]

; 1113 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?atanh@@YAMN@Z ENDP					; atanh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\laserpod.h
;	COMDAT ?GetTargetPosition@LaserPodClass@@QAEXPAM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
?GetTargetPosition@LaserPodClass@@QAEXPAM00@Z PROC	; LaserPodClass::GetTargetPosition, COMDAT
; _this$ = ecx

; 30   : 	void GetTargetPosition (float* a, float* b, float* c)	{ *a=tgtX; *b=tgtY; *c=tgtZ; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax], edx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetTargetPosition@LaserPodClass@@QAEXPAM00@Z ENDP	; LaserPodClass::GetTargetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\laserpod.h
;	COMDAT ?IsLocked@LaserPodClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsLocked@LaserPodClass@@QAEHXZ PROC			; LaserPodClass::IsLocked, COMDAT
; _this$ = ecx

; 19   : 	int IsLocked (void)							{return (hasTarget == TargetLocked);}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 1
	jne	SHORT $LN3@IsLocked
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsLocked
$LN3@IsLocked:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsLocked:
	mov	eax, DWORD PTR tv66[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLocked@LaserPodClass@@QAEHXZ ENDP			; LaserPodClass::IsLocked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbrain.h
;	COMDAT ?SkillLevel@BaseBrain@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkillLevel@BaseBrain@@QAEHXZ PROC			; BaseBrain::SkillLevel, COMDAT
; _this$ = ecx

; 40   :       int SkillLevel(void) {return skillLevel;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?SkillLevel@BaseBrain@@QAEHXZ ENDP			; BaseBrain::SkillLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?SqrtF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?SqrtF@@YAMM@Z PROC					; SqrtF, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp

; 50   : 	_asm
; 51   : 	{
; 52   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 53   : 		fsqrt;

	fsqrt

; 54   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 55   : 	}
; 56   : 
; 57   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 58   : }

	pop	ebp
	ret	0
?SqrtF@@YAMM@Z ENDP					; SqrtF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\fmath.h
;	COMDAT ?FabsF@@YAMM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?FabsF@@YAMM@Z PROC					; FabsF, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp

; 38   : 	_asm
; 39   : 	{
; 40   : 		fld f;

	fld	DWORD PTR _f$[ebp]

; 41   : 		fabs;

	fabs

; 42   : 		fstp f;

	fstp	DWORD PTR _f$[ebp]

; 43   : 	}
; 44   : 
; 45   : 	return f;

	fld	DWORD PTR _f$[ebp]

; 46   : }

	pop	ebp
	ret	0
?FabsF@@YAMM@Z ENDP					; FabsF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsDigital@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDigital@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsDigital, COMDAT
; _this$ = ecx

; 385  : 	int IsDigital() { return isDigital; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+948]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDigital@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsDigital
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simveh.h
;	COMDAT ?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ PROC	; SimVehicleClass::Brain, COMDAT
; _this$ = ecx

; 67   : 	BaseBrain* Brain(void) {return theBrain;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+672]
	mov	esp, ebp
	pop	ebp
	ret	0
?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ENDP	; SimVehicleClass::Brain
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBReleaseAngle@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBReleaseAngle@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBReleaseAngle, COMDAT
; _this$ = ecx

; 310  : 	int GetAGBReleaseAngle(void)   { return agbProfile[curProfile].releaseAngle;    }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+216]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBReleaseAngle@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBReleaseAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?CurHardpoint@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurHardpoint@SMSBaseClass@@QAEHXZ PROC			; SMSBaseClass::CurHardpoint, COMDAT
; _this$ = ecx

; 88   : 	int CurHardpoint (void) {return curHardpoint;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurHardpoint@SMSBaseClass@@QAEHXZ ENDP			; SMSBaseClass::CurHardpoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VMissileClass@@@@QBEPAVMissileClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VMissileClass@@@@QBEPAVMissileClass@@XZ PROC	; VuBin<MissileClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VMissileClass@@@@QBEPAVMissileClass@@XZ ENDP	; VuBin<MissileClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VMissileClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VMissileClass@@@@QBE_NXZ PROC		; VuBin<MissileClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VMissileClass@@@@QBE_NXZ ENDP		; VuBin<MissileClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CalculateLADDReleaseRange@FireControlComputer@@QAEXXZ PROC ; FireControlComputer::CalculateLADDReleaseRange
; _this$ = ecx

; 1283 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1284 : #if 0
; 1285 : 	float xDot, yDot, zDot;
; 1286 : 	float laddAngle = 0.0F;
; 1287 : 	float curRange;
; 1288 : 	float dx, dy, rx, ry, radius;
; 1289 : 	float minRange = 100000.0F;
; 1290 : 	float tmpTime;
; 1291 : 	float maxDelay;
; 1292 : 	int wayTooFar = FALSE;
; 1293 : 	LADDAnticipation lastCue = laddAnticipationCue;
; 1294 : 
; 1295 : 	float a, b, c, t;
; 1296 : 
; 1297 : 	mlTrig trig;
; 1298 : 	float hdg,vel;
; 1299 : 
; 1300 : 		hdg = ((WeatherClass*)realWeather)->WindHeadingAt(&pos);
; 1301 : 		vel =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);
; 1302 : 		mlSinCos (&trig, hdg);
; 1303 : 
; 1304 :    dx = groundDesignateX - (platform->XPos() + trig.cos * vel * groundImpactTime);
; 1305 :    dy = groundDesignateY - (platform->YPos() + trig.sin * vel * groundImpactTime);
; 1306 : 
; 1307 :    rx =  platform->platformAngles.cospsi*dx + platform->platformAngles.sinpsi*dy;
; 1308 :    ry = -platform->platformAngles.sinpsi*dx + platform->platformAngles.cospsi*dy;
; 1309 : 
; 1310 :    airGroundBearing = (float)atan2 (ry,rx);
; 1311 :    dx = groundDesignateX - groundImpactX;
; 1312 :    dy = groundDesignateY - groundImpactY;
; 1313 :    airGroundRange = (float)sqrt(dx*dx + dy*dy);
; 1314 : 
; 1315 :    if (airGroundRange < minRange)
; 1316 :       minRange = airGroundRange;
; 1317 : 
; 1318 :    //Distance from target to us
; 1319 :    curRange = (float)sqrt(
; 1320 :       (groundDesignateX - platform->XPos()) * (groundDesignateX - platform->XPos()) +
; 1321 :       (groundDesignateY - platform->YPos()) * (groundDesignateY - platform->YPos()));
; 1322 : 
; 1323 :    laddAnticipationCue = NoLADDCue;
; 1324 : 
; 1325 :    if ((Sms->CurHardpoint() >= 0) && (Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->flags & SMSClass::Loftable))
; 1326 :    {
; 1327 : 
; 1328 : 	   //OK, so it's loftable. Since we want to set a distance from the TGT where we want to make our 
; 1329 : 	   //pull up, the angle at which we're going to toss is the thing to find.
; 1330 : 	   //we know:
; 1331 : 	   //--range from designated point to us.
; 1332 : 	   //--the bearing from us to the TGT (will be used by HUD)
; 1333 : 	   //--the range from us in the air to the TGT down there.
; 1334 : 	   //NEEDED: pitch to release the weapon
; 1335 : 
; 1336 : 	   //laddAngle = 45.0F * DTR;
; 1337 : 
; 1338 : 	   //Let's find out big our radius is
; 1339 : 	   // 4 G pull-up to release
; 1340 : 	   //radius = platform->GetVt() * platform->GetVt() / (4.0F * GRAVITY);
; 1341 : 	   radius = platform->GetVt() * platform->GetVt() / (4.0F * calcgrav(this));		//Wombat778 3-12-04
; 1342 : 
; 1343 : 	   //Let's get the distance from the TGT to where we should release out weapons
; 1344 : 	   float ReleaseRange = curRange - SafetyDistance; //SafetyDistance should be settable thru the MFD
; 1345 : 
; 1346 : 	   //add the distance of our radius. Now we know at what distance we should start our pull up
; 1347 : 	   //ReleaseRange += radius * trig.cos;
; 1348 : 
; 1349 : 	   /*mlSinCos (&trig, laddAngle);
; 1350 : 	   xDot = platform->GetVt() * trig.cos * platform->platformAngles.cospsi;
; 1351 : 	   yDot = platform->GetVt() * trig.cos * platform->platformAngles.sinpsi;
; 1352 : 	   zDot = -platform->GetVt() * trig.sin;
; 1353 : 
; 1354 : 	   a = 0.5F * GRAVITY;*/
; 1355 : 
; 1356 : 	   // Calculate level release range
; 1357 : 	   //c = platform->ZPos() - groundDesignateZ;
; 1358 : 	   // Can't throw bomb up, so clamp
; 1359 : 	   //c = min (c, 0.0F);
; 1360 : 
; 1361 : 	   //NOT USED
; 1362 : 	   /*t = (float)sqrt(- 4 * a * c) / (2.0F * a);
; 1363 : 	   airGroundMinRange = (float)sqrt(xDot*t * xDot*t + yDot*t * yDot*t);*/
; 1364 : 
; 1365 : 	   // Calc max range
; 1366 : 	   //b = zDot;
; 1367 : 	   //c = platform->ZPos() - groundDesignateZ - radius * trig.sin;
; 1368 : 
; 1369 : 	   //t = (-b + (float)sqrt(b * b - 4 * a * c)) / (2.0F * a);
; 1370 : 
; 1371 : 
; 1372 : 	   //airGroundMaxRange = (float)sqrt(xDot*t * xDot*t + yDot*t * yDot*t);
; 1373 : 	   //airGroundMaxRange += radius * trig.cos;
; 1374 : 
; 1375 : 	   t = (curRange - ReleaseRange) / platform->GetVt();
; 1376 : 	   if (t >= 10.0F)
; 1377 : 	   {
; 1378 : 		   tmpTime = (curRange - ReleaseRange) / platform->GetVt();
; 1379 : 		   wayTooFar = TRUE;
; 1380 : 	   }
; 1381 : 	   else if (t >= 2.0F)
; 1382 : 	   {
; 1383 : 		   tmpTime = (curRange - ReleaseRange) / platform->GetVt();
; 1384 : 		   laddAnticipationCue = EarlyPreLADD;
; 1385 : 	   }
; 1386 : 	   else if (t >= 0.0F)
; 1387 : 	   {
; 1388 : 		   tmpTime = (curRange - ReleaseRange) / platform->GetVt();
; 1389 : 		   laddAnticipationCue = PreLADD;
; 1390 : 	   }
; 1391 : 	   else if (t >= -2.0F)
; 1392 : 	   {
; 1393 : 		   tmpTime = airGroundRange / platform->GetVt();
; 1394 : 		   laddAnticipationCue = LADDPullUp;
; 1395 : 	   }
; 1396 : 	   else
; 1397 : 	   {
; 1398 : 		   tmpTime = airGroundRange / platform->GetVt();
; 1399 : 		   laddAnticipationCue = LADDAwaitingRelease;
; 1400 : 	   }
; 1401 :    }
; 1402 :    else
; 1403 :    {
; 1404 : 	   tmpTime = airGroundRange / platform->GetVt();
; 1405 : 	   airGroundMaxRange = -1.0F;
; 1406 :    }
; 1407 : 
; 1408 :    maxDelay = 0.5F;
; 1409 :    
; 1410 :    if (laddAnticipationCue == NoCue || 
; 1411 : 	   (laddAnticipationCue == AwaitingRelease && laddAnticipationCue == lastCue))
; 1412 :    {
; 1413 : 	   if (!wayTooFar && releaseConsent && !postDrop &&
; 1414 : 		   ((tmpTime < 0.1F || ( airGroundDelayTime > 0.0 && airGroundDelayTime < maxDelay &&
; 1415 : 		   tmpTime > airGroundDelayTime)) || bombReleaseOverride) && Sms->curWeapon)
; 1416 : 	   {
; 1417 : 		   bombPickle = TRUE;
; 1418 : 	   }
; 1419 :    }
; 1420 :    airGroundDelayTime = tmpTime;
; 1421 : #endif
; 1422 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateLADDReleaseRange@FireControlComputer@@QAEXXZ ENDP ; FireControlComputer::CalculateLADDReleaseRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LADDMode@FireControlComputer@@QAEXXZ PROC		; FireControlComputer::LADDMode
; _this$ = ecx

; 1200 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1201 : #if 0
; 1202 : 	float pitch, yaw, tmpX, tmpY, tmpZ;
; 1203 : 	float dx, dy, dz, rx, ry, rz;
; 1204 : 	float xMove = 0.0F, yMove = 0.0F;
; 1205 : 	mlTrig trig;
; 1206 : 	
; 1207 : 	// Drop Track on command
; 1208 : 	if (dropTrackCmd)
; 1209 : 	{
; 1210 : 		preDesignate = TRUE;
; 1211 : 		groundPipperAz = 0.0F;
; 1212 : 		groundPipperEl = 0.0F;
; 1213 : 	}
; 1214 : 	
; 1215 : 	// Move the cursors as needed
; 1216 : 	if (cursorXCmd != 0) || (cursorYCmd != 0)
; 1217 : 		if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == true) && (IO.AnalogIsUsed(AXIS_CURSOR_Y) == true))
; 1218 : 		{
; 1219 : 			yMove = (float)cursorYCmd / 10000.0F;
; 1220 : 			xMove = (float)cursorXCmd / 10000.0F;
; 1221 : 		}
; 1222 : 		else
; 1223 : 		{
; 1224 : 			yMove = (float)cursorYCmd;
; 1225 : 			xMove = (float)cursorXCmd;
; 1226 : 		}
; 1227 : 
; 1228 : 	groundPipperEl += yMove * g_fCursorSpeed * DTOS_SLEW_RATE * SimLibMajorFrameTime;
; 1229 : 	groundPipperAz += xMove * g_fCursorSpeed * DTOS_SLEW_RATE * SimLibMajorFrameTime;
; 1230 : 	
; 1231 : 	if (preDesignate || (cursorXCmd != 0) || (cursorYCmd != 0))
; 1232 : 	{
; 1233 : 		groundDesignateAz = -cockpitFlightData.beta*DTR + cockpitFlightData.windOffset*platform->platformAngles.cosphi;
; 1234 : 		groundDesignateAz += groundPipperAz;
; 1235 : 		groundDesignateEl = -cockpitFlightData.alpha*DTR + cockpitFlightData.windOffset*platform->platformAngles.sinphi;
; 1236 : 		groundDesignateEl += groundPipperEl;
; 1237 : 		groundDesignateDroll = (float)atan2 (sin(groundDesignateAz), sin(groundDesignateEl));
; 1238 : 		
; 1239 : 		if (releaseConsent || designateCmd || !preDesignate)
; 1240 : 		{
; 1241 : 			// Convert from the body relative flight path marker angles to world space pitch/yaw
; 1242 : 			mlSinCos (&trig, platform->Roll());
; 1243 : 			yaw   = platform->Yaw();
; 1244 : 			pitch = platform->Pitch();
; 1245 : 			pitch += groundDesignateEl * trig.cos - groundDesignateAz*trig.sin;
; 1246 : 			yaw   += groundDesignateEl * trig.sin + groundDesignateAz*trig.cos;
; 1247 : 			if (FindGroundIntersection (pitch, yaw, &tmpX, &tmpY, &tmpZ))
; 1248 : 			{
; 1249 : 				groundDesignateX = tmpX;
; 1250 : 				groundDesignateY = tmpY;
; 1251 : 				groundDesignateZ = tmpZ;
; 1252 : 				preDesignate = FALSE;
; 1253 : 			}
; 1254 : 		}
; 1255 : 	}
; 1256 : 	
; 1257 : 	// Do post designate work
; 1258 : 	if (!preDesignate)
; 1259 : 	{
; 1260 : 		CalculateImpactPoint();
; 1261 : 		
; 1262 : 		dx = groundDesignateX - platform->XPos();
; 1263 : 		dy = groundDesignateY - platform->YPos();
; 1264 : 		dz = groundDesignateZ - platform->ZPos();
; 1265 : 		
; 1266 : 		rx = platform->dmx[0][0]*dx + platform->dmx[0][1]*dy + platform->dmx[0][2]*dz;
; 1267 : 		ry = platform->dmx[1][0]*dx + platform->dmx[1][1]*dy + platform->dmx[1][2]*dz;
; 1268 : 		rz = platform->dmx[2][0]*dx + platform->dmx[2][1]*dy + platform->dmx[2][2]*dz;
; 1269 : 		
; 1270 : 		groundDesignateDroll = (float)atan2 (ry,-rz);
; 1271 : 		groundDesignateAz = (float)atan2 (ry,rx);
; 1272 : 		groundDesignateEl = (float)atan (-rz/(float)sqrt(rx*rx+ry*ry+.1F));
; 1273 : 		
; 1274 : 		CalculateLADDReleaseRange();
; 1275 : 	}
; 1276 : 	else
; 1277 : 	{
; 1278 : 		airGroundDelayTime = 0.0F;
; 1279 : 	}
; 1280 : #endif
; 1281 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LADDMode@FireControlComputer@@QAEXXZ ENDP		; FireControlComputer::LADDMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?PlayerFCC@FireControlComputer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PlayerFCC@FireControlComputer@@QAEHXZ PROC		; FireControlComputer::PlayerFCC, COMDAT
; _this$ = ecx

; 286  : 	int PlayerFCC (void) {return playerFCC;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+92]
	mov	esp, ebp
	pop	ebp
	ret	0
?PlayerFCC@FireControlComputer@@QAEHXZ ENDP		; FireControlComputer::PlayerFCC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ PROC ; FireControlComputer::GetMasterMode, COMDAT
; _this$ = ecx

; 276  : 	FCCMasterMode GetMasterMode (void) {return (masterMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ENDP ; FireControlComputer::GetMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_trig$ = -64						; size = 8
tv268 = -56						; size = 4
_hdg$ = -52						; size = 4
_rx$ = -48						; size = 4
tv293 = -44						; size = 4
_ry$ = -40						; size = 4
tv259 = -36						; size = 4
_vel$ = -32						; size = 4
_dx$ = -28						; size = 4
_dy$ = -24						; size = 4
_this$ = -20						; size = 4
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?FindTargetError@FireControlComputer@@AAEXXZ PROC	; FireControlComputer::FindTargetError
; _this$ = ecx

; 737  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 738  : float dx, dy;
; 739  : float rx, ry;
; 740  : mlTrig trig;
; 741  : float hdg,vel;
; 742  : 
; 743  : 	Tpoint			pos;
; 744  : 
; 745  : 	pos.x = platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 746  : 	pos.y = platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 747  : 	pos.z = platform->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 748  : 
; 749  : 	hdg = ((WeatherClass*)realWeather)->WindHeadingAt(&pos);

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	fstp	DWORD PTR _hdg$[ebp]

; 750  : 	vel =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR _vel$[ebp]

; 751  : 	mlSinCos (&trig, hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 752  : 
; 753  : 
; 754  :    dx = groundDesignateX - (platform->XPos() + trig.cos * vel * groundImpactTime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv259[ebp]
	movss	xmm0, DWORD PTR tv259[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _vel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+360]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+376]
	subss	xmm1, xmm0
	movss	DWORD PTR _dx$[ebp], xmm1

; 755  :    dy = groundDesignateY - (platform->YPos() + trig.sin * vel * groundImpactTime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv268[ebp]
	movss	xmm0, DWORD PTR tv268[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _vel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [ecx+360]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+380]
	subss	xmm1, xmm0
	movss	DWORD PTR _dy$[ebp], xmm1

; 756  :    //MI What do these lines do here?????????
; 757  :    //dx = groundDesignateX - groundImpactX;
; 758  :    //dy = groundDesignateY - groundImpactY;
; 759  : 
; 760  :    rx =  platform->platformAngles.cospsi*dx + platform->platformAngles.sinpsi*dy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR [ecx+408]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	movss	xmm1, DWORD PTR [eax+404]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 761  :    ry = -platform->platformAngles.sinpsi*dx + platform->platformAngles.cospsi*dy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	movss	xmm0, DWORD PTR [edx+404]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm1, DWORD PTR [ecx+408]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 762  : 
; 763  :    airGroundBearing = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+336]

; 764  : 
; 765  :    airGroundDelayTime = airGroundRange / platform->GetVt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv293[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+332]
	divss	xmm0, DWORD PTR tv293[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+328], xmm0

; 766  : 
; 767  :    dx = groundDesignateX - groundImpactX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+376]
	subss	xmm0, DWORD PTR [eax+348]
	movss	DWORD PTR _dx$[ebp], xmm0

; 768  :    dy = groundDesignateY - groundImpactY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+380]
	subss	xmm0, DWORD PTR [edx+352]
	movss	DWORD PTR _dy$[ebp], xmm0

; 769  :    airGroundRange = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+332]

; 770  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FindTargetError@FireControlComputer@@AAEXXZ ENDP	; FireControlComputer::FindTargetError
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_lpdZ$1 = -372						; size = 4
tv1311 = -368						; size = 4
_lpdY$2 = -364						; size = 4
tv1183 = -360						; size = 4
tv1592 = -356						; size = 4
tv1633 = -352						; size = 4
_lastCue$ = -348					; size = 4
tv1345 = -344						; size = 4
tv1553 = -340						; size = 4
tv1287 = -336						; size = 4
tv1543 = -332						; size = 4
tv1226 = -328						; size = 4
tv1533 = -324						; size = 4
tv1149 = -320						; size = 4
tv1523 = -316						; size = 4
tv1324 = -312						; size = 4
tv1514 = -308						; size = 4
tv1637 = -304						; size = 4
tv1647 = -300						; size = 4
tv1280 = -296						; size = 4
tv1503 = -292						; size = 4
tv1233 = -288						; size = 4
tv1645 = -284						; size = 4
_ry$ = -280						; size = 4
tv1493 = -276						; size = 4
tv1167 = -272						; size = 4
tv1643 = -268						; size = 4
tv1356 = -264						; size = 4
tv1483 = -260						; size = 4
tv1330 = -256						; size = 4
tv1641 = -252						; size = 4
tv1319 = -248						; size = 4
tv1470 = -244						; size = 4
tv1303 = -240						; size = 4
tv1460 = -236						; size = 4
tv1292 = -232						; size = 4
tv1434 = -228						; size = 4
tv1635 = -224						; size = 4
_radical$3 = -220					; size = 4
tv1599 = -216						; size = 4
tv1426 = -212						; size = 4
tv1240 = -208						; size = 4
tv1414 = -204						; size = 4
_lpdX$4 = -200						; size = 4
tv1402 = -196						; size = 4
tv1219 = -192						; size = 4
tv1391 = -188						; size = 4
_rx$ = -184						; size = 4
tv1375 = -180						; size = 4
tv1174 = -176						; size = 4
tv1639 = -172						; size = 4
tv1158 = -168						; size = 4
tv1365 = -164						; size = 4
_hdg$ = -160						; size = 4
_zDot$ = -156						; size = 4
tv1597 = -152						; size = 4
_vel$ = -148						; size = 4
tv710 = -144						; size = 4
tv423 = -140						; size = 4
_minRange$ = -136					; size = 4
_maxDelay$ = -132					; size = 4
tv616 = -128						; size = 4
_wayTooFar$ = -124					; size = 4
tv732 = -120						; size = 4
tv755 = -116						; size = 4
_radius$ = -112						; size = 4
_angleFactor$5 = -108					; size = 4
tv476 = -104						; size = 4
_speedFactor$6 = -100					; size = 4
tv744 = -96						; size = 4
_laserPod$7 = -92					; size = 4
_b$ = -88						; size = 4
_trig$ = -84						; size = 8
_yDot$ = -76						; size = 4
_tossAngle$ = -72					; size = 4
_xDot$ = -68						; size = 4
_curRange$ = -64					; size = 4
_a$ = -60						; size = 4
_altFactor$8 = -56					; size = 4
_theBomb$ = -52						; size = 4
_dx$ = -48						; size = 4
_dy$ = -44						; size = 4
_c$ = -40						; size = 4
_tmpTime$ = -36						; size = 4
_isJDAM$ = -29						; size = 1
_t$ = -28						; size = 4
_isJSOW$ = -21						; size = 1
_this$ = -20						; size = 4
_pos$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?CalculateReleaseRange@FireControlComputer@@AAEXXZ PROC	; FireControlComputer::CalculateReleaseRange
; _this$ = ecx

; 868  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 869  : float xDot, yDot, zDot;
; 870  : float tossAngle, curRange;
; 871  : float dx, dy, rx, ry, radius;
; 872  : float minRange = 100000.0F;

	movss	xmm0, DWORD PTR __real@47c35000
	movss	DWORD PTR _minRange$[ebp], xmm0

; 873  : float tmpTime;
; 874  : float maxDelay;
; 875  : int wayTooFar = FALSE;

	mov	DWORD PTR _wayTooFar$[ebp], 0

; 876  : bool isJSOW = false;

	mov	BYTE PTR _isJSOW$[ebp], 0

; 877  : bool isJDAM = false;

	mov	BYTE PTR _isJDAM$[ebp], 0

; 878  : TossAnticipation lastCue = tossAnticipationCue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	DWORD PTR _lastCue$[ebp], ecx

; 879  : #ifdef NODRAG
; 880  : float a, b, c, t;
; 881  : #endif
; 882  : mlTrig trig;
; 883  : float hdg,vel;
; 884  : BombClass *theBomb;
; 885  : 
; 886  : 	theBomb = GetTheBomb();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _theBomb$[ebp], eax

; 887  : 	if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW) 

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN38@CalculateR
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 5
	jne	SHORT $LN38@CalculateR

; 888  : 	{
; 889  : 		isJSOW = true;

	mov	BYTE PTR _isJSOW$[ebp], 1
$LN38@CalculateR:

; 890  : 	}
; 891  : 
; 892  : 	if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_GPS) 

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN37@CalculateR
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 4
	jne	SHORT $LN37@CalculateR

; 893  : 	{
; 894  : 		isJDAM = true;

	mov	BYTE PTR _isJDAM$[ebp], 1
$LN37@CalculateR:

; 895  : 	}
; 896  : 
; 897  : 	if (isJSOW || isJDAM) 

	movzx	eax, BYTE PTR _isJSOW$[ebp]
	test	eax, eax
	jne	SHORT $LN35@CalculateR
	movzx	ecx, BYTE PTR _isJDAM$[ebp]
	test	ecx, ecx
	je	$LN34@CalculateR
$LN35@CalculateR:

; 898  : 	{
; 899  : 		// RV - Biker - If we have a locked target on laser pod go to TOO
; 900  : 		LaserPodClass* laserPod = (LaserPodClass* )FindLaserPod (platform);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _laserPod$7[ebp], eax

; 901  : 		if (laserPod && laserPod->IsLocked() && Sms->JDAMtargeting == SMSBaseClass::TOO
; 902  : 				&& ((AircraftClass *)platform)->IsPlayer() 
; 903  : 				&& (((AircraftClass *)platform)->AutopilotType() != AircraftClass::CombatAP)) 

	cmp	DWORD PTR _laserPod$7[ebp], 0
	je	$LN34@CalculateR
	mov	ecx, DWORD PTR _laserPod$7[ebp]
	call	?IsLocked@LaserPodClass@@QAEHXZ		; LaserPodClass::IsLocked
	test	eax, eax
	je	$LN34@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	cmp	DWORD PTR [edx+36], 1
	jne	$LN34@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	$LN34@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	je	SHORT $LN34@CalculateR

; 904  : 		{
; 905  : 			((AircraftClass*)platform)->JDAMAllowAutoStep = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	BYTE PTR [eax+1788], 0

; 906  : 			float lpdX;
; 907  : 			float lpdY;
; 908  : 			float lpdZ;
; 909  : 			laserPod->GetTargetPosition(&lpdX, &lpdY, &lpdZ);

	lea	ecx, DWORD PTR _lpdZ$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _lpdY$2[ebp]
	push	edx
	lea	eax, DWORD PTR _lpdX$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _laserPod$7[ebp]
	call	?GetTargetPosition@LaserPodClass@@QAEXPAM00@Z ; LaserPodClass::GetTargetPosition

; 910  : 			((AircraftClass*)platform)->JDAMtgtPos.x = lpdX;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	movss	xmm0, DWORD PTR _lpdX$4[ebp]
	movss	DWORD PTR [edx+1776], xmm0

; 911  : 			((AircraftClass*)platform)->JDAMtgtPos.y = lpdY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR _lpdY$2[ebp]
	movss	DWORD PTR [ecx+1780], xmm0

; 912  : 			((AircraftClass*)platform)->JDAMtgtPos.z = lpdZ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	movss	xmm0, DWORD PTR _lpdZ$1[ebp]
	movss	DWORD PTR [eax+1784], xmm0
$LN34@CalculateR:

; 913  : 		}
; 914  : 	}
; 915  : 
; 916  : 		Tpoint			pos;
; 917  : 		pos.x = platform->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 918  : 		pos.y = platform->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 919  : 		pos.z = platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]

; 920  : 
; 921  : 		if(g_bEnableWindsAloft)

	movzx	ecx, BYTE PTR ?g_bEnableWindsAloft@@3_NA ; g_bEnableWindsAloft
	test	ecx, ecx
	je	$LN33@CalculateR

; 922  : 		{
; 923  : 			hdg = ((WeatherClass*)realWeather)->WindHeadingAt(&pos);

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	fstp	DWORD PTR _hdg$[ebp]

; 924  : 			vel =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR _vel$[ebp]

; 925  : 			mlSinCos (&trig, hdg);

	push	ecx
	movss	xmm0, DWORD PTR _hdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 926  : 
; 927  : 			dx = groundDesignateX - (platform->XPos() + trig.cos * vel * groundImpactTime);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1149[ebp]
	movss	xmm0, DWORD PTR tv1149[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _vel$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+360]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+376]
	subss	xmm1, xmm0
	movss	DWORD PTR _dx$[ebp], xmm1

; 928  : 			dy = groundDesignateY - (platform->YPos() + trig.sin * vel * groundImpactTime);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1158[ebp]
	movss	xmm0, DWORD PTR tv1158[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _vel$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+360]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+380]
	subss	xmm1, xmm0
	movss	DWORD PTR _dy$[ebp], xmm1

; 929  : 		}
; 930  : 		else

	jmp	SHORT $LN32@CalculateR
$LN33@CalculateR:

; 931  : 		{
; 932  : 			dx = groundDesignateX - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1167[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	subss	xmm0, DWORD PTR tv1167[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 933  : 			dy = groundDesignateY - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1174[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+380]
	subss	xmm0, DWORD PTR tv1174[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0
$LN32@CalculateR:

; 934  : 		}
; 935  :    predictedClimbAngle = 10.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+224], xmm0

; 936  :    predictedReleaseAltitude = -platform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1183[ebp]
	movss	xmm0, DWORD PTR tv1183[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+228], xmm0

; 937  : 
; 938  :    rx =  platform->platformAngles.cospsi*dx + platform->platformAngles.sinpsi*dy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm0, DWORD PTR [ecx+408]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	movss	xmm1, DWORD PTR [eax+404]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 939  :    ry = -platform->platformAngles.sinpsi*dx + platform->platformAngles.cospsi*dy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	movss	xmm0, DWORD PTR [edx+404]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm1, DWORD PTR [ecx+408]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 940  : 
; 941  :    airGroundBearing = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+336]

; 942  :    dx = groundDesignateX - groundImpactX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	subss	xmm0, DWORD PTR [ecx+348]
	movss	DWORD PTR _dx$[ebp], xmm0

; 943  :    dy = groundDesignateY - groundImpactY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+380]
	subss	xmm0, DWORD PTR [eax+352]
	movss	DWORD PTR _dy$[ebp], xmm0

; 944  :    airGroundRange = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+332]

; 945  : 
; 946  :    if (airGroundRange < minRange)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _minRange$[ebp]
	comiss	xmm0, DWORD PTR [edx+332]
	jbe	SHORT $LN31@CalculateR

; 947  :       minRange = airGroundRange;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+332]
	movss	DWORD PTR _minRange$[ebp], xmm0
$LN31@CalculateR:

; 948  : 
; 949  :    curRange = (float)sqrt(
; 950  :       (groundDesignateX - platform->XPos()) * (groundDesignateX - platform->XPos()) +
; 951  :       (groundDesignateY - platform->YPos()) * (groundDesignateY - platform->YPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1219[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+376]
	subss	xmm0, DWORD PTR tv1219[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	DWORD PTR tv1597[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1226[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+376]
	subss	xmm0, DWORD PTR tv1226[ebp]
	movss	xmm1, DWORD PTR tv1597[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	movss	DWORD PTR tv1599[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1233[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+380]
	subss	xmm0, DWORD PTR tv1233[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	movss	DWORD PTR tv1633[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1240[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+380]
	subss	xmm0, DWORD PTR tv1240[ebp]
	movss	xmm1, DWORD PTR tv1633[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1599[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _curRange$[ebp]

; 952  : 
; 953  :    // Bomb Range w/ loft  Assume 45 Degree Toss.
; 954  :    if ((Sms->CurHardpoint() >= 0) && (Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->flags & SMSClass::Loftable))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	test	eax, eax
	jl	$LN30@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv423[ebp], edx
	mov	eax, DWORD PTR tv423[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv423[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN30@CalculateR

; 955  :    {
; 956  : 	   //MI
; 957  : 	   if(!g_bRealisticAvionics || !playerFCC || (((AircraftClass *)platform)->AutopilotType() == AircraftClass::CombatAP))

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN28@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN28@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	SHORT $LN29@CalculateR
$LN28@CalculateR:

; 958  : 		   tossAngle = 45.0F * DTR;

	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _tossAngle$[ebp], xmm0

; 959  : 	   else

	jmp	SHORT $LN25@CalculateR
$LN29@CalculateR:

; 960  : 	   {
; 961  : 		   if(Sms)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+408], 0
	je	SHORT $LN26@CalculateR

; 962  : 			   //tossAngle = Sms->angle * DTR;
; 963  : 			   tossAngle = Sms->GetAGBReleaseAngle() * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBReleaseAngle@SMSClass@@QAEHXZ	; SMSClass::GetAGBReleaseAngle
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _tossAngle$[ebp], xmm0

; 964  : 		   else

	jmp	SHORT $LN25@CalculateR
$LN26@CalculateR:

; 965  : 			   tossAngle = 45.0F * DTR;

	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _tossAngle$[ebp], xmm0
$LN25@CalculateR:

; 966  : 	   }
; 967  :    }
; 968  :    else

	jmp	SHORT $LN24@CalculateR
$LN30@CalculateR:

; 969  :    {
; 970  : 	  tossAngle = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tossAngle$[ebp], xmm0
$LN24@CalculateR:

; 971  :    }
; 972  : 
; 973  :    tossAnticipationCue = NoCue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 0

; 974  :    if ((Sms->CurHardpoint() >= 0) && (Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->flags & SMSClass::Loftable))

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	test	eax, eax
	jl	$LN23@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+408]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv476[ebp], eax
	mov	ecx, DWORD PTR tv476[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv476[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	$LN23@CalculateR

; 975  :    {
; 976  : 	  // 4 G pull-up to release
; 977  : 	  
; 978  : 	   //radius = platform->GetVt() * platform->GetVt() / (4.0F * GRAVITY);
; 979  : 	   radius = platform->GetVt() * platform->GetVt() / (4.0F * calcgrav(this));		//Wombat778 3-12-04

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1280[ebp]
	movss	xmm0, DWORD PTR tv1280[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+140]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv1635[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1287[ebp]
	movss	xmm0, DWORD PTR tv1635[ebp]
	mulss	xmm0, DWORD PTR tv1287[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	DWORD PTR tv1637[ebp], xmm0
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR tv1292[ebp]
	movss	xmm0, DWORD PTR tv1292[ebp]
	mulss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR tv1637[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _radius$[ebp], xmm1

; 980  : 
; 981  : 
; 982  :    #ifdef NODRAG
; 983  : 	  mlSinCos (&trig, tossAngle);

	push	ecx
	movss	xmm0, DWORD PTR _tossAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 984  : 	  xDot = platform->GetVt() * trig.cos * platform->platformAngles.cospsi;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv1303[ebp]
	movss	xmm0, DWORD PTR tv1303[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mulss	xmm0, DWORD PTR [ecx+408]
	movss	DWORD PTR _xDot$[ebp], xmm0

; 985  : 	  yDot = platform->GetVt() * trig.cos * platform->platformAngles.sinpsi;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1311[ebp]
	movss	xmm0, DWORD PTR tv1311[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mulss	xmm0, DWORD PTR [edx+404]
	movss	DWORD PTR _yDot$[ebp], xmm0

; 986  : 	  zDot = -platform->GetVt() * trig.sin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv1319[ebp]
	movss	xmm0, DWORD PTR tv1319[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _zDot$[ebp], xmm0

; 987  : 
; 988  : 	  //a = 0.5F * GRAVITY;
; 989  : 	  a = 0.5F * calcgrav(this);			//Wombat778 3-12-04

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR tv1324[ebp]
	movss	xmm0, DWORD PTR tv1324[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _a$[ebp], xmm0

; 990  : 
; 991  : 
; 992  : 	  // Calculate level release range
; 993  : 	  c = platform->ZPos() - groundDesignateZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1330[ebp]
	movss	xmm0, DWORD PTR tv1330[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+384]
	movss	DWORD PTR _c$[ebp], xmm0

; 994  : 	  // Can't throw bomb up, so clamp
; 995  : 	  c = min (c, 0.0F);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _c$[ebp]
	jbe	SHORT $LN41@CalculateR
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR tv616[ebp], xmm0
	jmp	SHORT $LN42@CalculateR
$LN41@CalculateR:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv616[ebp], xmm0
$LN42@CalculateR:
	movss	xmm0, DWORD PTR tv616[ebp]
	movss	DWORD PTR _c$[ebp], xmm0

; 996  : 
; 997  : 	  t = (float)SqrtF(FabsF(- 4 * a * c)) / (2.0F * a);

	movss	xmm0, DWORD PTR __real@c0800000
	mulss	xmm0, DWORD PTR _a$[ebp]
	mulss	xmm0, DWORD PTR _c$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FabsF@@YAMM@Z				; FabsF
	fstp	DWORD PTR [esp]
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR tv1345[ebp]
	movss	xmm0, DWORD PTR tv1345[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 998  : 	  airGroundMinRange = (float)SqrtF(xDot*t * xDot*t + yDot*t * yDot*t);

	movss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mulss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR _yDot$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR _yDot$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+340]

; 999  : 	  if (theBomb && isJSOW )

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN22@CalculateR
	movzx	ecx, BYTE PTR _isJSOW$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@CalculateR

; 1000 : 		  missileWEZDisplayRange = theBomb->GetJSOWmaxRange() * NM_TO_FT;

	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?GetJSOWmaxRange@BombClass@@QAEMXZ	; BombClass::GetJSOWmaxRange
	fstp	DWORD PTR tv1356[ebp]
	movss	xmm0, DWORD PTR tv1356[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+312], xmm0

; 1001 : 	  else

	jmp	SHORT $LN21@CalculateR
$LN22@CalculateR:

; 1002 : 		  missileWEZDisplayRange = 10.0F * NM_TO_FT;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@476d5a1c
	movss	DWORD PTR [eax+312], xmm0
$LN21@CalculateR:

; 1003 : 
; 1004 : 	  // Calc max range
; 1005 : 	  b = zDot;

	movss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _b$[ebp], xmm0

; 1006 : 	  c = platform->ZPos() - groundDesignateZ - radius * trig.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1365[ebp]
	movss	xmm0, DWORD PTR tv1365[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+384]
	movss	xmm1, DWORD PTR _radius$[ebp]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _c$[ebp], xmm0

; 1007 : 
; 1008 : 	  t = (-b + (float)SqrtF(b * b - 4 * a * c)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _b$[ebp]
	mulss	xmm1, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR __real@40800000
	mulss	xmm2, DWORD PTR _a$[ebp]
	mulss	xmm2, DWORD PTR _c$[ebp]
	subss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1639[ebp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR tv1375[ebp]
	movss	xmm0, DWORD PTR tv1639[ebp]
	addss	xmm0, DWORD PTR tv1375[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 1009 : 
; 1010 : 	  airGroundMaxRange = (float)SqrtF(xDot*t * xDot*t + yDot*t * yDot*t);

	movss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mulss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR _yDot$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR _yDot$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+344]

; 1011 : 	  airGroundMaxRange += radius * trig.cos;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+344], xmm0

; 1012 : 
; 1013 : 		// RV - Biker
; 1014 : 		if (isJSOW) {

	movzx	eax, BYTE PTR _isJSOW$[ebp]
	test	eax, eax
	je	$LN20@CalculateR

; 1015 : 			float radical = (float)sqrt (2.0F * GRAVITY * (groundDesignateZ - platform->ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1391[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+384]
	subss	xmm0, DWORD PTR tv1391[ebp]
	mulss	xmm0, DWORD PTR __real@4280b53f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _radical$3[ebp]

; 1016 : 			float altFactor = (groundDesignateZ - platform->ZPos() - 10000.0f)/25000.0f + 0.50f; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1402[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+384]
	subss	xmm0, DWORD PTR tv1402[ebp]
	subss	xmm0, DWORD PTR __real@461c4000
	divss	xmm0, DWORD PTR __real@46c35000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _altFactor$8[ebp], xmm0

; 1017 : 			altFactor = min(altFactor, 1.0f)/11.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _altFactor$8[ebp]
	jbe	SHORT $LN43@CalculateR
	movss	xmm0, DWORD PTR _altFactor$8[ebp]
	movss	DWORD PTR tv710[ebp], xmm0
	jmp	SHORT $LN44@CalculateR
$LN43@CalculateR:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv710[ebp], xmm0
$LN44@CalculateR:
	movss	xmm0, DWORD PTR tv710[ebp]
	divss	xmm0, DWORD PTR __real@41300000
	movss	DWORD PTR _altFactor$8[ebp], xmm0

; 1018 : 			float speedFactor = platform->GetVt()*radical/max(calcgrav(this), 0.5f);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR tv1414[ebp]
	movss	xmm0, DWORD PTR tv1414[ebp]
	comiss	xmm0, DWORD PTR __real@3f000000
	jbe	SHORT $LN45@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR tv732[ebp]
	jmp	SHORT $LN46@CalculateR
$LN45@CalculateR:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv732[ebp], xmm0
$LN46@CalculateR:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1426[ebp]
	movss	xmm0, DWORD PTR tv1426[ebp]
	mulss	xmm0, DWORD PTR _radical$3[ebp]
	divss	xmm0, DWORD PTR tv732[ebp]
	movss	DWORD PTR _speedFactor$6[ebp], xmm0

; 1019 : 			float angleFactor = cos(min(abs(groundDesignateAz), 90.0f*DTR)*2.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+364]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv1434[ebp]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	comiss	xmm0, DWORD PTR tv1434[ebp]
	jbe	SHORT $LN47@CalculateR
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+364]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv744[ebp]
	jmp	SHORT $LN48@CalculateR
$LN47@CalculateR:
	movss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR tv744[ebp], xmm0
$LN48@CalculateR:
	movss	xmm0, DWORD PTR tv744[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _angleFactor$5[ebp]

; 1020 : 
; 1021 : 			airGroundMaxRange = max(speedFactor * altFactor * angleFactor, 2.0f * NM_TO_FT);

	movss	xmm0, DWORD PTR _speedFactor$6[ebp]
	mulss	xmm0, DWORD PTR _altFactor$8[ebp]
	mulss	xmm0, DWORD PTR _angleFactor$5[ebp]
	comiss	xmm0, DWORD PTR __real@463de1b0
	jbe	SHORT $LN49@CalculateR
	movss	xmm0, DWORD PTR _speedFactor$6[ebp]
	mulss	xmm0, DWORD PTR _altFactor$8[ebp]
	mulss	xmm0, DWORD PTR _angleFactor$5[ebp]
	movss	DWORD PTR tv755[ebp], xmm0
	jmp	SHORT $LN50@CalculateR
$LN49@CalculateR:
	movss	xmm0, DWORD PTR __real@463de1b0
	movss	DWORD PTR tv755[ebp], xmm0
$LN50@CalculateR:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv755[ebp]
	movss	DWORD PTR [eax+344], xmm0

; 1022 : 			airGroundMinRange = 2.0f * NM_TO_FT;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@463de1b0
	movss	DWORD PTR [ecx+340], xmm0
$LN20@CalculateR:

; 1023 : 		}
; 1024 : 
; 1025 : // 2001-05-23 ADDED BY S.G. FUDGE THE airGroundMinRange AND airGroundMaxRange TO ACCOUNT FOR PSEUDO DRAG :-(
; 1026 : 	  static float minFudgeValue = 2.0f;
; 1027 : 	  static float maxFudgeValue1 = -7000.0f;
; 1028 : 	  static float maxFudgeValue2 = 0.1f;
; 1029 : 	  static float maxFudgeValue3 = 910.0f;
; 1030 : 	  static float maxFudgeValue4 = 30.0f;
; 1031 : 
; 1032 :       airGroundMinRange -= platform->GetVt() * minFudgeValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1460[ebp]
	movss	xmm0, DWORD PTR tv1460[ebp]
	mulss	xmm0, DWORD PTR ?minFudgeValue@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+340]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+340], xmm1

; 1033 : //    float tmp1AirGroundMaxRange = airGroundMaxRange - (platform->GetVt() * platform->GetVt() * (float)sqrt(platform->GetVt()) / maxFudgeValue1);
; 1034 : // This was hard to come up with. This 'formula' brings low level tossing in par with the Cher Min's Low level tossing chart.
; 1035 :       airGroundMaxRange += (maxFudgeValue3 - platform->GetVt()) * maxFudgeValue4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv1470[ebp]
	movss	xmm0, DWORD PTR ?maxFudgeValue3@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA
	subss	xmm0, DWORD PTR tv1470[ebp]
	mulss	xmm0, DWORD PTR ?maxFudgeValue4@?CK@??CalculateReleaseRange@FireControlComputer@@AAEXXZ@4MA
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+344]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+344], xmm0

; 1036 : 
; 1037 : // END OF ADDED SECTION
; 1038 :    #else
; 1039 :       #error "Not implemented"
; 1040 :    #endif
; 1041 : 
; 1042 : 	  t = (curRange - airGroundMaxRange) / platform->GetVt();

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _curRange$[ebp]
	subss	xmm0, DWORD PTR [edx+344]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	movss	DWORD PTR tv1641[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1483[ebp]
	movss	xmm0, DWORD PTR tv1641[ebp]
	divss	xmm0, DWORD PTR tv1483[ebp]
	movss	DWORD PTR _t$[ebp], xmm0

; 1043 : 	  if (!isJSOW)

	movzx	eax, BYTE PTR _isJSOW$[ebp]
	test	eax, eax
	jne	$LN19@CalculateR

; 1044 : 		{
; 1045 : 			if (t >= 10.0F)

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR __real@41200000
	jb	SHORT $LN18@CalculateR

; 1046 : 			{
; 1047 : 			tmpTime = (curRange - airGroundMaxRange) / platform->GetVt();

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _curRange$[ebp]
	subss	xmm0, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv1643[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1493[ebp]
	movss	xmm0, DWORD PTR tv1643[ebp]
	divss	xmm0, DWORD PTR tv1493[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1048 : 				wayTooFar = TRUE;

	mov	DWORD PTR _wayTooFar$[ebp], 1
	jmp	$LN11@CalculateR
$LN18@CalculateR:

; 1049 : 			}
; 1050 : 			else if (t >= 2.0F)

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR __real@40000000
	jb	SHORT $LN16@CalculateR

; 1051 : 			{
; 1052 : 			tmpTime = (curRange - airGroundMaxRange) / platform->GetVt();

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _curRange$[ebp]
	subss	xmm0, DWORD PTR [ecx+344]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	movss	DWORD PTR tv1645[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv1503[ebp]
	movss	xmm0, DWORD PTR tv1645[ebp]
	divss	xmm0, DWORD PTR tv1503[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1053 : 			tossAnticipationCue = EarlyPreToss;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 1
	jmp	$LN11@CalculateR
$LN16@CalculateR:

; 1054 : 			}
; 1055 : 			else if (t >= 0.0F)

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN14@CalculateR

; 1056 : 			{
; 1057 : 			tmpTime = (curRange - airGroundMaxRange) / platform->GetVt();

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _curRange$[ebp]
	subss	xmm0, DWORD PTR [edx+344]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	movss	DWORD PTR tv1647[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv1514[ebp]
	movss	xmm0, DWORD PTR tv1647[ebp]
	divss	xmm0, DWORD PTR tv1514[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1058 : 			tossAnticipationCue = PreToss;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 2
	jmp	$LN11@CalculateR
$LN14@CalculateR:

; 1059 : 			}
; 1060 : 			else if (t >= -2.0F)

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR __real@c0000000
	jb	SHORT $LN12@CalculateR

; 1061 : 			{
; 1062 : 			tmpTime = airGroundRange / platform->GetVt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1523[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+332]
	divss	xmm0, DWORD PTR tv1523[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1063 : 			tossAnticipationCue = PullUp;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], 3

; 1064 : 			}
; 1065 : 			else

	jmp	SHORT $LN11@CalculateR
$LN12@CalculateR:

; 1066 : 			{
; 1067 : 			tmpTime = airGroundRange / platform->GetVt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv1533[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+332]
	divss	xmm0, DWORD PTR tv1533[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1068 : 			tossAnticipationCue = AwaitingRelease;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 4
$LN11@CalculateR:

; 1069 : 			}
; 1070 : 		}
; 1071 : 		else

	jmp	SHORT $LN10@CalculateR
$LN19@CalculateR:

; 1072 : 		{ // Cobra - JSOW
; 1073 : 			tmpTime = airGroundRange / platform->GetVt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv1543[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+332]
	divss	xmm0, DWORD PTR tv1543[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1074 : 			tossAnticipationCue = AwaitingRelease;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], 4
$LN10@CalculateR:

; 1075 : 		}
; 1076 :    }
; 1077 :    else

	jmp	SHORT $LN9@CalculateR
$LN23@CalculateR:

; 1078 :    {
; 1079 : 	  tmpTime = airGroundRange / platform->GetVt();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv1553[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+332]
	divss	xmm0, DWORD PTR tv1553[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 1080 : 	  airGroundMaxRange = -1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+344], xmm0
$LN9@CalculateR:

; 1081 :    }
; 1082 : 
; 1083 :    // Let LGB's be dropped up to 10 closer than max TOF
; 1084 :    if (masterMode == AirGroundLaser)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+144], 8
	jne	SHORT $LN8@CalculateR

; 1085 :    {
; 1086 :       maxDelay = 10.0F;

	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _maxDelay$[ebp], xmm0

; 1087 :    }
; 1088 :    else

	jmp	SHORT $LN7@CalculateR
$LN8@CalculateR:

; 1089 :    {
; 1090 :       maxDelay = 0.5F;

	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _maxDelay$[ebp], xmm0
$LN7@CalculateR:

; 1091 :    }
; 1092 : 
; 1093 :    if (tossAnticipationCue == NoCue || 
; 1094 :       (tossAnticipationCue == AwaitingRelease && tossAnticipationCue == lastCue)) // AwaitingRelease = lastCue

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN5@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 4
	jne	$LN4@CalculateR
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+212]
	cmp	eax, DWORD PTR _lastCue$[ebp]
	jne	$LN4@CalculateR
$LN5@CalculateR:

; 1095 :    {
; 1096 :       if (!wayTooFar && releaseConsent && !postDrop && ((tmpTime < 0.1F || 
; 1097 :          (airGroundDelayTime > 0.0 && airGroundDelayTime < maxDelay && tmpTime > airGroundDelayTime)) ||
; 1098 :           bombReleaseOverride) && Sms->curWeapon)

	cmp	DWORD PTR _wayTooFar$[ebp], 0
	jne	$LN4@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+181]
	test	edx, edx
	je	$LN4@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+183]
	test	ecx, ecx
	jne	SHORT $LN4@CalculateR
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR _tmpTime$[ebp]
	ja	SHORT $LN3@CalculateR
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+328]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxDelay$[ebp]
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	SHORT $LN2@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpTime$[ebp]
	comiss	xmm0, DWORD PTR [ecx+328]
	ja	SHORT $LN3@CalculateR
$LN2@CalculateR:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+100], 0
	je	SHORT $LN4@CalculateR
$LN3@CalculateR:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@CalculateR

; 1099 :       {
; 1100 :          bombPickle = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+191], 1
$LN4@CalculateR:

; 1101 :       }
; 1102 :    }
; 1103 :    airGroundDelayTime = tmpTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpTime$[ebp]
	movss	DWORD PTR [eax+328], xmm0

; 1104 : 
; 1105 :    // RV - Biker - Launch JSOW	
; 1106 :    if (isJSOW && releaseConsent && !postDrop && Sms->curWeapon && Sms->JDAMPowered && Sms->JDAMInitTimer <= 4.0f && abs(groundDesignateAz) < 45.0f*DTR)

	movzx	ecx, BYTE PTR _isJSOW$[ebp]
	test	ecx, ecx
	je	$LN1@CalculateR
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+181]
	test	eax, eax
	je	$LN1@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+183]
	test	edx, edx
	jne	SHORT $LN1@CalculateR
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CalculateR
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	SHORT $LN1@CalculateR
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	movss	xmm0, DWORD PTR __real@40800000
	comiss	xmm0, DWORD PTR [eax+32]
	jb	SHORT $LN1@CalculateR
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+364]
	movss	DWORD PTR [esp], xmm0
	call	?abs@@YAMM@Z				; abs
	add	esp, 4
	fstp	DWORD PTR tv1592[ebp]
	movss	xmm0, DWORD PTR __real@3f490fd9
	comiss	xmm0, DWORD PTR tv1592[ebp]
	jbe	SHORT $LN1@CalculateR

; 1107 : 	   bombPickle = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+191], 1
$LN1@CalculateR:

; 1108 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateReleaseRange@FireControlComputer@@AAEXXZ ENDP	; FireControlComputer::CalculateReleaseRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv746 = -84						; size = 4
tv764 = -80						; size = 4
tv694 = -76						; size = 4
tv687 = -72						; size = 4
tv680 = -68						; size = 4
tv762 = -64						; size = 4
tv656 = -60						; size = 4
tv760 = -56						; size = 4
tv641 = -52						; size = 4
_rz$ = -48						; size = 4
_bGPS$ = -44						; size = 4
tv84 = -40						; size = 4
_rx$ = -36						; size = 4
_dz$ = -32						; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_curWaypoint$ = -20					; size = 4
_ry$ = -16						; size = 4
_theBomb$ = -12						; size = 4
_theRadar$ = -8						; size = 4
_this$ = -4						; size = 4
?SetDesignatedTarget@FireControlComputer@@AAEXXZ PROC	; FireControlComputer::SetDesignatedTarget
; _this$ = ecx

; 795  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 796  : float dx, dy, dz;
; 797  : float rx, ry, rz;
; 798  : RadarClass* theRadar = (RadarClass*) FindSensor (platform, SensorClass::Radar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 799  : WayPointClass* curWaypoint = platform->curWaypoint;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [eax+728]
	mov	DWORD PTR _curWaypoint$[ebp], ecx

; 800  : 
; 801  :    if (targetPtr && targetPtr->BaseData()->OnGround() )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+132], 0
	je	$LN12@SetDesigna
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	je	SHORT $LN12@SetDesigna

; 802  :    {
; 803  :       groundDesignateX = targetPtr->BaseData()->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+376]

; 804  :       groundDesignateY = targetPtr->BaseData()->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+380]

; 805  : 	  // edg: sigh.  ground targets can't be trusted to have a valid Z
; 806  :       // groundDesignateZ = targetPtr->BaseData()->ZPos();
; 807  :       groundDesignateZ = OTWDriver.GetGroundLevel(groundDesignateX, groundDesignateY);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+380]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+376]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+384]
	jmp	$LN6@SetDesigna
$LN12@SetDesigna:

; 808  :    }
; 809  :    else if (theRadar && theRadar->CurrentTarget())

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	$LN10@SetDesigna
	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	SHORT $LN10@SetDesigna

; 810  :    {
; 811  :       groundDesignateX = theRadar->CurrentTarget()->BaseData()->XPos();

	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+376]

; 812  :       groundDesignateY = theRadar->CurrentTarget()->BaseData()->YPos();

	mov	ecx, DWORD PTR _theRadar$[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+380]

; 813  : 	  // edg: sigh.  ground targets can't be trusted to have a valid Z
; 814  :       // groundDesignateZ = targetPtr->BaseData()->ZPos();
; 815  :       groundDesignateZ = OTWDriver.GetGroundLevel(groundDesignateX, groundDesignateY);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+380]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+376]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+384]
	jmp	$LN6@SetDesigna
$LN10@SetDesigna:

; 816  :    }
; 817  :    else if (theRadar && theRadar->IsAG())

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	SHORT $LN8@SetDesigna
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	SHORT $LN8@SetDesigna

; 818  :    {
; 819  :       theRadar->GetAGCenter (&groundDesignateX, &groundDesignateY);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	push	edx
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax

; 820  :       groundDesignateZ = OTWDriver.GetGroundLevel(groundDesignateX, groundDesignateY);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+380]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+376]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+384]
	jmp	SHORT $LN6@SetDesigna
$LN8@SetDesigna:

; 821  :    }
; 822  :    else if (curWaypoint)

	cmp	DWORD PTR _curWaypoint$[ebp], 0
	je	SHORT $LN6@SetDesigna

; 823  :    {
; 824  :       curWaypoint->GetLocation (&groundDesignateX, &groundDesignateY, &groundDesignateZ);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 376				; 00000178H
	push	eax
	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 825  :       groundDesignateZ = OTWDriver.GetGroundLevel(groundDesignateX, groundDesignateY);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+380]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+376]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+384]
$LN6@SetDesigna:

; 826  :    }
; 827  :    //
; 828  :    // What happens if none of the above conditions are met?  Could/should that ever happen?
; 829  :    // Can one of the conditions be removed and used as a default case?
; 830  :    //
; 831  : 	// COBRA - RED - Rewritten GPS guided bombs check
; 832  : 	int bGPS = FALSE;

	mov	DWORD PTR _bGPS$[ebp], 0

; 833  : 	BombClass *theBomb = GetTheBomb();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _theBomb$[ebp], eax

; 834  : 	if (theBomb && (theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_GPS ||
; 835  : 			theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW))

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN5@SetDesigna
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 4
	je	SHORT $LN4@SetDesigna
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN5@SetDesigna
$LN4@SetDesigna:

; 836  : 		bGPS = TRUE;

	mov	DWORD PTR _bGPS$[ebp], 1
$LN5@SetDesigna:

; 837  : 	// 2001-04-12 ADDED BY S.G. NEED TO MAKE A VARIABLE DESIGNATE BASED ON SKILL AND ALTITUDE
; 838  : 	if (platform->IsAirplane() && !bGPS &&
; 839  : 	 ( ((AircraftClass *)platform)->IsDigital() ||
; 840  : 	 ((AircraftClass *)platform)->AutopilotType() == AircraftClass::CombatAP  ) ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+192]
	call	edx
	test	eax, eax
	je	$LN3@SetDesigna
	cmp	DWORD PTR _bGPS$[ebp], 0
	jne	$LN3@SetDesigna
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	jne	SHORT $LN2@SetDesigna
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	$LN3@SetDesigna
$LN2@SetDesigna:

; 841  : 		// Intentionnaly, I didn't play with the sign of ZPos because it will be 'below' groundDesignateZ and therefore - - will make it + and the end value will be positive
; 842  : 		groundDesignateX += (float)((5 - platform->Brain()->SkillLevel()) * xBombAccuracy) * ((groundDesignateZ - platform->ZPos()) / 10000.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	mov	ecx, 5
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+172]
	cvtsi2ss xmm0, ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	DWORD PTR tv760[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv641[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+384]
	subss	xmm0, DWORD PTR tv641[ebp]
	divss	xmm0, DWORD PTR __real@461c4000
	movss	xmm1, DWORD PTR tv760[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [edx+376]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+376], xmm1

; 843  : 		groundDesignateY += (float)((5 - platform->Brain()->SkillLevel()) * yBombAccuracy) * ((groundDesignateZ - platform->ZPos()) / 10000.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?Brain@SimVehicleClass@@QAEPAVBaseBrain@@XZ ; SimVehicleClass::Brain
	mov	ecx, eax
	call	?SkillLevel@BaseBrain@@QAEHXZ		; BaseBrain::SkillLevel
	mov	edx, 5
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [eax+176]
	cvtsi2ss xmm0, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	movss	DWORD PTR tv762[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv656[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+384]
	subss	xmm0, DWORD PTR tv656[ebp]
	divss	xmm0, DWORD PTR __real@461c4000
	movss	xmm1, DWORD PTR tv762[ebp]
	mulss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm1, DWORD PTR [eax+380]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+380], xmm1
$LN3@SetDesigna:

; 844  : 	}
; 845  : // END OF ADDED SECTION
; 846  : 
; 847  : 	 // Cobra - Make sure the current JSOW target is a target WP target.
; 848  : 	if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	SHORT $LN1@SetDesigna
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 5
	jne	SHORT $LN1@SetDesigna

; 849  : 	 {
; 850  :       curWaypoint->GetLocation (&groundDesignateX, &groundDesignateY, &groundDesignateZ);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 380				; 0000017cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 376				; 00000178H
	push	eax
	mov	ecx, DWORD PTR _curWaypoint$[ebp]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 851  :       groundDesignateZ = OTWDriver.GetGroundLevel(groundDesignateX, groundDesignateY);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+380]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+376]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+384]
$LN1@SetDesigna:

; 852  : 	 }
; 853  : 
; 854  :    dx = groundDesignateX - platform->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv680[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+376]
	subss	xmm0, DWORD PTR tv680[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 855  :    dy = groundDesignateY - platform->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv687[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+380]
	subss	xmm0, DWORD PTR tv687[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 856  :    dz = groundDesignateZ - platform->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv694[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+384]
	subss	xmm0, DWORD PTR tv694[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 857  : 
; 858  :    rx = platform->dmx[0][0]*dx + platform->dmx[0][1]*dy + platform->dmx[0][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 859  :    ry = platform->dmx[1][0]*dx + platform->dmx[1][1]*dy + platform->dmx[1][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 860  :    rz = platform->dmx[2][0]*dx + platform->dmx[2][1]*dy + platform->dmx[2][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 861  : 
; 862  :    groundDesignateAz    = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+364]

; 863  :    groundDesignateEl    = (float)atan (-rz/(float)sqrt(rx*rx+ry*ry+0.1f));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv764[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv746[ebp]
	movss	xmm0, DWORD PTR tv764[ebp]
	divss	xmm0, DWORD PTR tv746[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+368]

; 864  :    groundDesignateDroll = (float)atan2 (ry,-rz);

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+372]

; 865  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetDesignatedTarget@FireControlComputer@@AAEXXZ ENDP	; FireControlComputer::SetDesignatedTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv513 = -92						; size = 4
tv426 = -88						; size = 4
tv511 = -84						; size = 4
tv400 = -80						; size = 4
tv485 = -76						; size = 4
tv419 = -72						; size = 4
tv515 = -68						; size = 4
tv433 = -64						; size = 4
tv389 = -60						; size = 4
_rz$ = -56						; size = 4
_rx$ = -52						; size = 4
_dz$ = -48						; size = 4
_ry$ = -44						; size = 4
_dx$ = -40						; size = 4
_dy$ = -36						; size = 4
_this$ = -32						; size = 4
_pos$ = -28						; size = 12
_dir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DesignateGroundTarget@FireControlComputer@@AAEXXZ PROC	; FireControlComputer::DesignateGroundTarget
; _this$ = ecx

; 678  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 679  : 	float dx, dy, dz;
; 680  : 	float rx, ry, rz;
; 681  : 	euler dir;
; 682  : 	vector pos;
; 683  : 
; 684  : 	if (groundPipperOnHud){

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+186]
	test	ecx, ecx
	je	SHORT $LN4@DesignateG

; 685  : 		// Just the use impact point we already got
; 686  : 		groundDesignateX = groundImpactX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+348]
	mov	DWORD PTR [edx+376], ecx

; 687  : 		groundDesignateY = groundImpactY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	DWORD PTR [edx+380], ecx

; 688  : 		groundDesignateZ = groundImpactZ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+356]
	mov	DWORD PTR [edx+384], ecx

; 689  : 		preDesignate = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+182], 0

; 690  : 	}
; 691  : 	else

	jmp	$LN2@DesignateG
$LN4@DesignateG:

; 692  : 	{
; 693  : 		// Compute where the delay pipper falls on the ground and designate there
; 694  : 		dir.pitch =	 
; 695  : 			groundPipperEl * platform->platformAngles.cosphi +
; 696  : 			-groundPipperAz * platform->platformAngles.sinphi +
; 697  : 			platform->Pitch()
; 698  : 		;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+392]
	mulss	xmm0, DWORD PTR [ecx+400]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+388]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mulss	xmm1, DWORD PTR [edx+396]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	DWORD PTR tv511[ebp], xmm0
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv389[ebp]
	movss	xmm0, DWORD PTR tv511[ebp]
	addss	xmm0, DWORD PTR tv389[ebp]
	movss	DWORD PTR _dir$[ebp+4], xmm0

; 699  : 		dir.yaw =	 
; 700  : 			groundPipperEl * platform->platformAngles.sinphi +
; 701  : 			groundPipperAz * platform->platformAngles.cosphi +
; 702  : 			platform->Yaw()
; 703  : 		;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+392]
	mulss	xmm0, DWORD PTR [edx+396]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+388]
	mulss	xmm1, DWORD PTR [edx+400]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	movss	DWORD PTR tv513[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv400[ebp]
	movss	xmm0, DWORD PTR tv513[ebp]
	addss	xmm0, DWORD PTR tv400[ebp]
	movss	DWORD PTR _dir$[ebp], xmm0

; 704  : 		dir.roll = platform->Roll();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR _dir$[ebp+8]

; 705  : 		
; 706  : 		if (OTWDriver.GetGroundIntersection (&dir, &pos))

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundIntersection@OTWDriverClass@@QAEHPAUeuler@@PAUvector@@@Z ; OTWDriverClass::GetGroundIntersection
	test	eax, eax
	je	SHORT $LN2@DesignateG

; 707  : 		{
; 708  : 			groundDesignateX = pos.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [edx+376], xmm0

; 709  : 			groundDesignateY = pos.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [eax+380], xmm0

; 710  : 			groundDesignateZ = pos.z;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [ecx+384], xmm0

; 711  : 			preDesignate = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+182], 0
$LN2@DesignateG:

; 712  : 		}
; 713  : 	}
; 714  : 
; 715  : 	// If we got a valid designation above, compute some useful geometry
; 716  : 	if (preDesignate == FALSE)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+182]
	test	ecx, ecx
	jne	$LN1@DesignateG

; 717  : 	{
; 718  : 		dx = groundDesignateX - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv419[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	subss	xmm0, DWORD PTR tv419[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 719  : 		dy = groundDesignateY - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv426[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+380]
	subss	xmm0, DWORD PTR tv426[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 720  : 		dz = groundDesignateZ - platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv433[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+384]
	subss	xmm0, DWORD PTR tv433[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 721  : 		
; 722  : 		rx = platform->dmx[0][0]*dx + platform->dmx[0][1]*dy + platform->dmx[0][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 723  : 		ry = platform->dmx[1][0]*dx + platform->dmx[1][1]*dy + platform->dmx[1][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 724  : 		rz = platform->dmx[2][0]*dx + platform->dmx[2][1]*dy + platform->dmx[2][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 725  : 		
; 726  : 		groundDesignateAz    = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+364]

; 727  : 		groundDesignateEl    = (float)atan (-rz/(float)sqrt(rx*rx+ry*ry+0.1f));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv515[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv485[ebp]
	movss	xmm0, DWORD PTR tv515[ebp]
	divss	xmm0, DWORD PTR tv485[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+368]

; 728  : 		groundDesignateDroll = (float)atan2 (ry,-rz);

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+372]

; 729  : 		
; 730  : 		dx = groundDesignateX - groundImpactX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+376]
	subss	xmm0, DWORD PTR [eax+348]
	movss	DWORD PTR _dx$[ebp], xmm0

; 731  : 		dy = groundDesignateY - groundImpactY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+380]
	subss	xmm0, DWORD PTR [edx+352]
	movss	DWORD PTR _dy$[ebp], xmm0

; 732  : 		airGroundRange = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+332]
$LN1@DesignateG:

; 733  : 	}
; 734  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DesignateGroundTarget@FireControlComputer@@AAEXXZ ENDP	; FireControlComputer::DesignateGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv140 = -12						; size = 4
_tmpTime$ = -8						; size = 4
_this$ = -4						; size = 4
?CheckForBombRelease@FireControlComputer@@AAEXXZ PROC	; FireControlComputer::CheckForBombRelease
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 774  : float tmpTime;
; 775  : 
; 776  :    // Set some flags to make us look like CCRP
; 777  :    tossAnticipationCue = AwaitingRelease;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 4

; 778  :    airGroundMaxRange = -1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [ecx+344], xmm0

; 779  : 
; 780  :    // How long to null the impact point error assuming level flight toward the target?
; 781  :    tmpTime = airGroundRange / platform->GetVt();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+332]
	divss	xmm0, DWORD PTR tv140[ebp]
	movss	DWORD PTR _tmpTime$[ebp], xmm0

; 782  : 
; 783  :    if ((tmpTime < 0.1F || (airGroundDelayTime > 0.0 &&
; 784  :         airGroundDelayTime < 0.4F && tmpTime > airGroundDelayTime)) &&
; 785  :         Sms->curWeapon)

	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR _tmpTime$[ebp]
	ja	SHORT $LN2@CheckForBo
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+328]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN3@CheckForBo
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ecccccd
	comiss	xmm0, DWORD PTR [eax+328]
	jbe	SHORT $LN3@CheckForBo
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpTime$[ebp]
	comiss	xmm0, DWORD PTR [ecx+328]
	jbe	SHORT $LN3@CheckForBo
$LN2@CheckForBo:
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@CheckForBo

; 786  :    {
; 787  :       bombPickle = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+191], 1

; 788  :       airGroundDelayTime = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+328], xmm0

; 789  :    }
; 790  :    else

	jmp	SHORT $LN1@CheckForBo
$LN3@CheckForBo:

; 791  :       airGroundDelayTime = tmpTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpTime$[ebp]
	movss	DWORD PTR [eax+328], xmm0
$LN1@CheckForBo:

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckForBombRelease@FireControlComputer@@AAEXXZ ENDP	; FireControlComputer::CheckForBombRelease
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_rollTrig$ = -20					; size = 8
tv168 = -12						; size = 4
_dRoll$ = -8						; size = 4
_this$ = -4						; size = 4
?DelayModePipperCorrection@FireControlComputer@@AAEXXZ PROC ; FireControlComputer::DelayModePipperCorrection
; _this$ = ecx

; 627  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 	float	dRoll;
; 629  : 	mlTrig	rollTrig;
; 630  : 	static const float	LIMIT_PIPPER_EL_MAX	=   3.0f * DTR;
; 631  : 	static const float	LIMIT_PIPPER_EL_MIN	= -13.0f * DTR;
; 632  : 	static const float	LIMIT_PIPPER_AZ		=   180.0f * DTR;//me123 from 9
; 633  : 
; 634  : 	// Compute the angle to the pipper from the boresight cross
; 635  : 	dRoll = (float)atan2( sin(groundPipperAz), sin(groundPipperEl) );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+392]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+388]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _dRoll$[ebp]

; 636  : 	mlSinCos( &rollTrig, dRoll );

	push	ecx
	movss	xmm0, DWORD PTR _dRoll$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _rollTrig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 637  : 	groundPipperOnHud = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+186], 1

; 638  : 
; 639  : 	// See if the pipper falls out of bounds in elevation
; 640  : 	if (groundPipperEl > LIMIT_PIPPER_EL_MAX) {

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+392]
	comiss	xmm0, DWORD PTR ?LIMIT_PIPPER_EL_MAX@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	jbe	SHORT $LN6@DelayModeP

; 641  : //		groundPipperAz = atan2( tan(LIMIT_PIPPER_EL_MAX) * tan(groundPipperAz), tan(groundPipperEl) );
; 642  : 		groundPipperEl = LIMIT_PIPPER_EL_MAX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?LIMIT_PIPPER_EL_MAX@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	movss	DWORD PTR [edx+392], xmm0

; 643  : 		groundPipperOnHud = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+186], 0
	jmp	SHORT $LN4@DelayModeP
$LN6@DelayModeP:

; 644  : 	} else if (groundPipperEl < LIMIT_PIPPER_EL_MIN) {

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?LIMIT_PIPPER_EL_MIN@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	comiss	xmm0, DWORD PTR [ecx+392]
	jbe	SHORT $LN4@DelayModeP

; 645  : //		groundPipperAz = atan2( tan(-LIMIT_PIPPER_EL_MIN) * tan(groundPipperAz), tan(-groundPipperEl) );
; 646  : 		groundPipperEl = LIMIT_PIPPER_EL_MIN;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?LIMIT_PIPPER_EL_MIN@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	movss	DWORD PTR [edx+392], xmm0

; 647  : 		groundPipperOnHud = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+186], 0
$LN4@DelayModeP:

; 648  : 	}
; 649  : 
; 650  : 	// See if the pipper falls out of bounds in azmuth
; 651  : 	if (fabs(groundPipperAz) > LIMIT_PIPPER_AZ) {

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+388]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv168[ebp]
	movss	xmm0, DWORD PTR tv168[ebp]
	comiss	xmm0, DWORD PTR ?LIMIT_PIPPER_AZ@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	jbe	SHORT $LN3@DelayModeP

; 652  : 		if (groundPipperAz > LIMIT_PIPPER_AZ) {

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+388]
	comiss	xmm0, DWORD PTR ?LIMIT_PIPPER_AZ@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	jbe	SHORT $LN2@DelayModeP

; 653  : //			groundPipperEl = atan2( tan(LIMIT_PIPPER_AZ) * tan(groundPipperEl), tan(groundPipperAz) );
; 654  : 			groundPipperAz = LIMIT_PIPPER_AZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?LIMIT_PIPPER_AZ@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	movss	DWORD PTR [eax+388], xmm0

; 655  : 		} else {

	jmp	SHORT $LN1@DelayModeP
$LN2@DelayModeP:

; 656  : //			groundPipperEl = atan2( tan(LIMIT_PIPPER_AZ) * tan(groundPipperEl), tan(-groundPipperAz) );
; 657  : 			groundPipperAz = -LIMIT_PIPPER_AZ;

	movss	xmm0, DWORD PTR ?LIMIT_PIPPER_AZ@?1??DelayModePipperCorrection@FireControlComputer@@AAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+388], xmm0
$LN1@DelayModeP:

; 658  : 		}
; 659  : 		groundPipperOnHud = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+186], 0
$LN3@DelayModeP:

; 660  : 	}
; 661  : 
; 662  : #if 0
; 663  : 	// See if the pipper falls off screen
; 664  : 	if (groundPipperEl >  5.0F * DTR || groundPipperEl < -13.0F * DTR ||
; 665  : 		groundPipperAz > 10.0F * DTR || groundPipperAz < -10.0F * DTR)
; 666  : 	{
; 667  : 		// This computes a new az and el in the same direction with a 13 degree solid angle
; 668  : 		groundPipperEl = atan( tan(13.0f*DTR) * rollTrig.cos );
; 669  : 		groundPipperAz = atan( tan(13.0f*DTR) * rollTrig.sin );
; 670  : 
; 671  : 		groundPipperOnHud = FALSE;
; 672  : 	}
; 673  : #endif
; 674  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DelayModePipperCorrection@FireControlComputer@@AAEXXZ ENDP ; FireControlComputer::DelayModePipperCorrection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv688 = -176						; size = 8
_trigWind$1 = -168					; size = 8
tv702 = -160						; size = 4
_zDot$ = -156						; size = 4
tv678 = -152						; size = 4
tv872 = -148						; size = 4
tv852 = -144						; size = 4
tv693 = -140						; size = 4
tv882 = -136						; size = 4
_grav$ = -132						; size = 4
tv793 = -128						; size = 4
tv628 = -124						; size = 4
tv786 = -120						; size = 4
tv876 = -116						; size = 4
tv779 = -112						; size = 4
tv874 = -108						; size = 4
tv763 = -104						; size = 4
tv671 = -100						; size = 4
tv880 = -96						; size = 4
tv637 = -92						; size = 4
tv712 = -88						; size = 4
_c$ = -84						; size = 4
tv878 = -80						; size = 4
tv707 = -76						; size = 4
tv664 = -72						; size = 4
_wind$2 = -68						; size = 4
_t$ = -64						; size = 4
_a$ = -60						; size = 4
_winddx$ = -56						; size = 4
_b$ = -52						; size = 4
_winddy$ = -48						; size = 4
_rz$ = -44						; size = 4
_rx$ = -40						; size = 4
_ry$ = -36						; size = 4
_dz$ = -32						; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_this$ = -20						; size = 4
_pos$3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ PROC ; FireControlComputer::FindRelativeImpactPoint
; _this$ = ecx

; 539  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 540  : 	float dx, dy, dz;
; 541  : 	float rx, ry, rz;
; 542  : 	float a,b,c,t;	
; 543  : 	//float grav = GRAVITY;
; 544  : 	float grav = calcgrav(this);		//Wombat778 3-12-04

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR _grav$[ebp]

; 545  : 	float zDot = platform->ZDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _zDot$[ebp]

; 546  : 	float winddx = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _winddx$[ebp], xmm0

; 547  : 	float winddy = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _winddy$[ebp], xmm0

; 548  : 	//MI
; 549  : 	// POGOLOOK I think this is already calculated in above and doesn't need to be added again here...
; 550  : 	// with this code, the pipper jumps on the HUD as soon as you designate
; 551  : 	if(g_bEnableWindsAloft)

	movzx	edx, BYTE PTR ?g_bEnableWindsAloft@@3_NA ; g_bEnableWindsAloft
	test	edx, edx
	je	$LN8@FindRelati

; 552  : 	{
; 553  : 		mlTrig trigWind;
; 554  : 		float wind;
; 555  : 
; 556  : 		// factor in current wind me123
; 557  : 		a = 0.5F * grav;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _grav$[ebp]
	movss	DWORD PTR _a$[ebp], xmm0

; 558  : 		b = zDot;

	movss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _b$[ebp], xmm0

; 559  : 		c = platform->ZPos() - groundDesignateZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv628[ebp]
	movss	xmm0, DWORD PTR tv628[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+384]
	movss	DWORD PTR _c$[ebp], xmm0

; 560  : 		t = (-b + (float)sqrt(b * b - 4 * a * c)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _b$[ebp]
	mulss	xmm1, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR __real@40800000
	mulss	xmm2, DWORD PTR _a$[ebp]
	mulss	xmm2, DWORD PTR _c$[ebp]
	subss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv872[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv637[ebp]
	movss	xmm0, DWORD PTR tv872[ebp]
	addss	xmm0, DWORD PTR tv637[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 561  : 
; 562  : 
; 563  : 		Tpoint			pos;
; 564  : 		pos.x = platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$3[ebp]

; 565  : 		pos.y = platform->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$3[ebp+4]

; 566  : 		pos.z = platform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$3[ebp+8]

; 567  : 		mlSinCos(&trigWind, ((WeatherClass*)realWeather)->WindHeadingAt(&pos));

	lea	edx, DWORD PTR _pos$3[ebp]
	push	edx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _trigWind$1[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 568  : 		wind =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	ecx, DWORD PTR _pos$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR _wind$2[ebp]

; 569  : 		winddx = trigWind.cos * wind*t;

	movss	xmm0, DWORD PTR _trigWind$1[ebp+4]
	mulss	xmm0, DWORD PTR _wind$2[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _winddx$[ebp], xmm0

; 570  : 		winddy = trigWind.sin * wind*t;

	movss	xmm0, DWORD PTR _trigWind$1[ebp]
	mulss	xmm0, DWORD PTR _wind$2[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR _winddy$[ebp], xmm0
$LN8@FindRelati:

; 571  : 	}
; 572  : 
; 573  : 	if (preDesignate){

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+182]
	test	eax, eax
	je	$LN7@FindRelati

; 574  : 		dx = groundImpactX - platform->XPos()+winddx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv664[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+348]
	subss	xmm0, DWORD PTR tv664[ebp]
	addss	xmm0, DWORD PTR _winddx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 575  : 		dy = groundImpactY - platform->YPos()+winddy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv671[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+352]
	subss	xmm0, DWORD PTR tv671[ebp]
	addss	xmm0, DWORD PTR _winddy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 576  : 		dz = groundImpactZ - platform->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv678[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+356]
	subss	xmm0, DWORD PTR tv678[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 577  : 
; 578  : 		// Cobra - Rocket calcs are screwed up (dx/dy instead of dy/dx)
; 579  : 		if (subMode == OBSOLETERCKT || subMode == STRAF)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+148], 11			; 0000000bH
	je	SHORT $LN5@FindRelati
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+148], 12			; 0000000cH
	jne	$LN6@FindRelati
$LN5@FindRelati:

; 580  : 		{
; 581  : 			//----------------------------------
; 582  : 			groundPipperAz = ((float)atan2 (dx,dy) - platform->Yaw());

	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv688[ebp]
	movsd	xmm0, QWORD PTR tv688[ebp]
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	DWORD PTR tv874[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv693[ebp]
	movss	xmm0, DWORD PTR tv874[ebp]
	subss	xmm0, DWORD PTR tv693[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+388], xmm0

; 583  : 			groundPipperEl = (float)atan (-dz/(float)sqrt(dx*dx+dy*dy+.01F)) - platform->Pitch();

	movss	xmm0, DWORD PTR _dz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _dx$[ebp]
	movss	xmm2, DWORD PTR _dy$[ebp]
	mulss	xmm2, DWORD PTR _dy$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3c23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv876[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv702[ebp]
	movss	xmm0, DWORD PTR tv876[ebp]
	divss	xmm0, DWORD PTR tv702[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv707[ebp]
	movss	xmm0, DWORD PTR tv707[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	movss	DWORD PTR tv878[ebp], xmm0
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv712[ebp]
	movss	xmm0, DWORD PTR tv878[ebp]
	subss	xmm0, DWORD PTR tv712[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+392], xmm0

; 584  : 			//----------------------------------
; 585  : 		}
; 586  : 		else

	jmp	$LN4@FindRelati
$LN6@FindRelati:

; 587  : 		{
; 588  : 			rx = platform->dmx[0][0]*dx + platform->dmx[0][1]*dy + platform->dmx[0][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 589  : 			ry = platform->dmx[1][0]*dx + platform->dmx[1][1]*dy + platform->dmx[1][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 590  : 			rz = platform->dmx[2][0]*dx + platform->dmx[2][1]*dy + platform->dmx[2][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 591  : 			groundPipperAz = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+388]

; 592  : 			groundPipperEl = (float)atan (-rz/(float)sqrt(rx*rx+ry*ry+.1F));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv880[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv763[ebp]
	movss	xmm0, DWORD PTR tv880[ebp]
	divss	xmm0, DWORD PTR tv763[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+392]
$LN4@FindRelati:

; 593  : 		}
; 594  : 
; 595  : 		//MI
; 596  : 		if(g_bRealisticAvionics && TheHud){

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN3@FindRelati
	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN3@FindRelati

; 597  : 			TheHud->SlantRange = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	fstp	DWORD PTR [ecx+5132]
$LN3@FindRelati:

; 598  : 		}
; 599  : 	}
; 600  : 	else {

	jmp	$LN1@FindRelati
$LN7@FindRelati:

; 601  : 		dx = groundDesignateX - platform->XPos()+winddx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv779[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	subss	xmm0, DWORD PTR tv779[ebp]
	addss	xmm0, DWORD PTR _winddx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 602  : 		dy = groundDesignateY - platform->YPos()+winddy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv786[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+380]
	subss	xmm0, DWORD PTR tv786[ebp]
	addss	xmm0, DWORD PTR _winddy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 603  : 		dz = groundDesignateZ - platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv793[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+384]
	subss	xmm0, DWORD PTR tv793[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 604  : 		
; 605  : 		rx = platform->dmx[0][0]*dx + platform->dmx[0][1]*dy + platform->dmx[0][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 606  : 		ry = platform->dmx[1][0]*dx + platform->dmx[1][1]*dy + platform->dmx[1][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 607  : 		rz = platform->dmx[2][0]*dx + platform->dmx[2][1]*dy + platform->dmx[2][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 608  : 		
; 609  : 		groundDesignateDroll = (float)atan2 (ry,-rz);

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+372]

; 610  : 		groundDesignateAz = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+364]

; 611  : 		groundDesignateEl = (float)atan (-rz/(float)sqrt(rx*rx+ry*ry+.1F));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv882[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv852[ebp]
	movss	xmm0, DWORD PTR tv882[ebp]
	divss	xmm0, DWORD PTR tv852[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+368]

; 612  : 		groundPipperAz = groundDesignateAz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+364]
	mov	DWORD PTR [edx+388], ecx

; 613  : 		groundPipperEl = groundDesignateEl;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	mov	DWORD PTR [edx+392], ecx

; 614  : 
; 615  : 		//MI
; 616  : 		if(g_bRealisticAvionics && TheHud){

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN1@FindRelati
	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN1@FindRelati

; 617  : 			TheHud->SlantRange = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	fstp	DWORD PTR [eax+5132]
$LN1@FindRelati:

; 618  : 		}
; 619  : 	}
; 620  : 
; 621  : //	groundPipperAz = max ( min ( groundPipperAz, 10.0F * DTR), -10.0F * DTR);
; 622  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ ENDP ; FireControlComputer::FindRelativeImpactPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_lau$1 = -36						; size = 4
tv143 = -32						; size = 4
tv78 = -28						; size = 4
_ImpactTime$ = -24					; size = 4
_ImpactZ$ = -20						; size = 4
_ImpactY$ = -16						; size = 4
_ImpactX$ = -12						; size = 4
_this$ = -8						; size = 4
tv171 = -2						; size = 1
tv130 = -1						; size = 1
?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ PROC ; FireControlComputer::CalculateRocketImpactPoint
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	float ImpactX = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ImpactX$[ebp], xmm0

; 176  : 	float ImpactY = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ImpactY$[ebp], xmm0

; 177  : 	float ImpactZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ImpactZ$[ebp], xmm0

; 178  : 	float ImpactTime = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ImpactTime$[ebp], xmm0

; 179  : 
; 180  : 	noSolution = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+193], 1

; 181  : 	if ( fccWeaponPtr )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@CalculateR

; 182  : 	{
; 183  : 		if ( fccWeaponPtr->IsMissile() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv78[ebp], eax
	mov	edx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	test	eax, eax
	je	$LN4@CalculateR

; 184  : 		{
; 185  : 			noSolution = !((MissileClass *)fccWeaponPtr.get())->FindRocketGroundImpact(
; 186  : 				&ImpactX,
; 187  : 				&ImpactY,
; 188  : 				&ImpactZ,
; 189  : 				&ImpactTime );

	lea	eax, DWORD PTR _ImpactTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ImpactZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ImpactY$[ebp]
	push	edx
	lea	eax, DWORD PTR _ImpactX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	ecx, eax
	call	?FindRocketGroundImpact@MissileClass@@QAEHPAM000@Z ; MissileClass::FindRocketGroundImpact
	test	eax, eax
	jne	SHORT $LN8@CalculateR
	mov	BYTE PTR tv130[ebp], 1
	jmp	SHORT $LN9@CalculateR
$LN8@CalculateR:
	mov	BYTE PTR tv130[ebp], 0
$LN9@CalculateR:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv130[ebp]
	mov	BYTE PTR [ecx+193], dl

; 190  : 
; 191  : 				groundImpactX = ImpactX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactX$[ebp]
	movss	DWORD PTR [eax+348], xmm0

; 192  : 				groundImpactY = ImpactY;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactY$[ebp]
	movss	DWORD PTR [ecx+352], xmm0

; 193  : 				groundImpactZ = ImpactZ;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactZ$[ebp]
	movss	DWORD PTR [edx+356], xmm0

; 194  : 				groundImpactTime = ImpactTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactTime$[ebp]
	movss	DWORD PTR [eax+360], xmm0

; 195  : 		}
; 196  : 		else

	jmp	$LN1@CalculateR
$LN4@CalculateR:

; 197  : 		{
; 198  : 			if ( fccWeaponPtr->IsLauncher() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv143[ebp]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	test	eax, eax
	je	$LN1@CalculateR

; 199  : 			{   
; 200  : 				BombClass *lau = (BombClass *)fccWeaponPtr.get();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _lau$1[ebp], eax

; 201  : 
; 202  : 				// the rocketPointer is used to retain a missile object
; 203  : 				// to be used to compute the impact prediction
; 204  : 				// this object is freed/allocated when the Lau's munition's 
; 205  : 				// WeaponId does not match rocketWeaponId
; 206  : 
; 207  : 				/* MLR 5/29/2004 - Handled in UpdateWeaponPointer() 
; 208  : 				if(lau->LauGetWeaponId() != rocketWeaponId)
; 209  : 				{
; 210  : 					
; 211  : 					if(rocketPointer)
; 212  : 						delete rocketPointer;
; 213  : 
; 214  : 					if(lau->LauGetWeaponId())
; 215  : 					{
; 216  : 						rocketPointer = (MissileClass *)InitAMissile(Sms->Ownship(), lau->LauGetWeaponId(), 0);
; 217  : 					}
; 218  : 					else
; 219  : 					{
; 220  : 						rocketPointer = 0;
; 221  : 					}
; 222  : 					rocketWeaponId = lau->LauGetWeaponId();
; 223  : 				}
; 224  : 				*/
; 225  : 
; 226  : 				if(rocketPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 512				; 00000200H
	call	??B?$VuBin@VMissileClass@@@@QBE_NXZ	; VuBin<MissileClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CalculateR

; 227  : 				{
; 228  : 					noSolution = !rocketPointer->FindRocketGroundImpact(
; 229  : 																					&ImpactX,
; 230  : 																					&ImpactY,
; 231  : 																					&ImpactZ,
; 232  : 																					&ImpactTime );

	lea	edx, DWORD PTR _ImpactTime$[ebp]
	push	edx
	lea	eax, DWORD PTR _ImpactZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ImpactY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ImpactX$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 512				; 00000200H
	call	??C?$VuBin@VMissileClass@@@@QBEPAVMissileClass@@XZ ; VuBin<MissileClass>::operator->
	mov	ecx, eax
	call	?FindRocketGroundImpact@MissileClass@@QAEHPAM000@Z ; MissileClass::FindRocketGroundImpact
	test	eax, eax
	jne	SHORT $LN10@CalculateR
	mov	BYTE PTR tv171[ebp], 1
	jmp	SHORT $LN11@CalculateR
$LN10@CalculateR:
	mov	BYTE PTR tv171[ebp], 0
$LN11@CalculateR:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR [eax+193], cl

; 233  : 
; 234  : 					groundImpactX = ImpactX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactX$[ebp]
	movss	DWORD PTR [edx+348], xmm0

; 235  : 					groundImpactY = ImpactY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactY$[ebp]
	movss	DWORD PTR [eax+352], xmm0

; 236  : 					groundImpactZ = ImpactZ;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactZ$[ebp]
	movss	DWORD PTR [ecx+356], xmm0

; 237  : 					groundImpactTime = ImpactTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ImpactTime$[ebp]
	movss	DWORD PTR [edx+360], xmm0
$LN1@CalculateR:

; 238  : 				}
; 239  : 			}	
; 240  : 		}
; 241  : 	}
; 242  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ ENDP ; FireControlComputer::CalculateRocketImpactPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_tfloor$1 = -360					; size = 4
_TgtAngle$2 = -356					; size = 4
tv1361 = -352						; size = 8
_GndAngle$3 = -344					; size = 4
tv1328 = -340						; size = 8
_TargetRange$4 = -332					; size = 4
_mass$ = -328						; size = 4
_GroundRange$5 = -324					; size = 4
_TgtGrndRange$6 = -320					; size = 4
_area$ = -316						; size = 4
_trigWind$7 = -312					; size = 8
tv1118 = -304						; size = 4
tv984 = -300						; size = 4
_tceil$8 = -296						; size = 4
tv1242 = -292						; size = 4
tv1421 = -288						; size = 4
tv1234 = -284						; size = 4
tv1140 = -280						; size = 4
tv1188 = -276						; size = 4
tv1008 = -272						; size = 4
tv1176 = -268						; size = 4
tv1419 = -264						; size = 4
tv1165 = -260						; size = 4
tv1425 = -256						; size = 4
_nextwinddy$9 = -252					; size = 4
tv1228 = -248						; size = 4
_nextwinddx$10 = -244					; size = 4
_raty$11 = -240						; size = 4
tv1347 = -236						; size = 4
_ratx$12 = -232						; size = 4
tv1340 = -228						; size = 4
tv1423 = -224						; size = 4
tv1333 = -220						; size = 4
tv1148 = -216						; size = 4
tv1314 = -212						; size = 4
tv1124 = -208						; size = 4
tv1307 = -204						; size = 4
tv1015 = -200						; size = 4
tv1300 = -196						; size = 4
tv1002 = -192						; size = 4
tv1263 = -188						; size = 4
tv977 = -184						; size = 4
tv1427 = -180						; size = 4
tv1248 = -176						; size = 4
tv993 = -172						; size = 4
tv254 = -168						; size = 4
_horiz$13 = -164					; size = 4
_winddy$14 = -160					; size = 4
tv277 = -156						; size = 4
_winddx$15 = -152					; size = 4
tv431 = -148						; size = 4
_wind$16 = -144						; size = 4
_xt$ = -140						; size = 4
_lastY$ = -136						; size = 4
tv231 = -132						; size = 4
_lastX$ = -128						; size = 4
tv408 = -124						; size = 4
_lastZ$ = -120						; size = 4
_yt$ = -116						; size = 4
tv455 = -112						; size = 4
_ry$ = -108						; size = 4
_rx$ = -104						; size = 4
_delta$ = -100						; size = 4
_theBomb$ = -96						; size = 4
_maxTime$ = -92						; size = 4
_dragCoeff$ = -88					; size = 4
_rz$ = -84						; size = 4
_a$ = -80						; size = 4
_c$ = -76						; size = 4
_b$ = -72						; size = 4
_isJSOW$ = -65						; size = 1
_grav$ = -64						; size = 4
_timeStep$ = -60					; size = 4
_vdragy$ = -56						; size = 4
_vdragx$ = -52						; size = 4
_zDot$ = -48						; size = 4
_dz$ = -44						; size = 4
_yDot$ = -40						; size = 4
_xDot$ = -36						; size = 4
_t$ = -32						; size = 4
_dy$ = -28						; size = 4
_dx$ = -24						; size = 4
_this$ = -20						; size = 4
_pos$17 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?CalculateImpactPoint@FireControlComputer@@AAEXXZ PROC	; FireControlComputer::CalculateImpactPoint
; _this$ = ecx

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 271  : 	float maxTime, timeStep;
; 272  : #ifndef NODRAG
; 273  : 	float vx, vy;
; 274  : #endif
; 275  : 	float dx, dy, dz;
; 276  : 	float rx, ry, rz;
; 277  : 	float area;
; 278  : 	float mass;
; 279  : 	float lastX, lastY, lastZ;
; 280  : 	float delta, dragCoeff;
; 281  : 	float xDot, yDot, zDot;
; 282  : 	float a, b, c, t, xt, yt;
; 283  : 	float vdragx, vdragy;
; 284  : 	BombClass *theBomb;
; 285  : 	bool isJSOW = false;

	mov	BYTE PTR _isJSOW$[ebp], 0

; 286  : 
; 287  : 	float grav = calcgrav(this);		//Wombat778 3-12-04

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR _grav$[ebp]

; 288  : 
; 289  :    // For now, assume a perfect world, with zero drag, and no wind
; 290  :    // height = h0 + v0*t + 0.5*a*t*t
; 291  :    // Solve for t when height = ground height
; 292  :    // Always use the later t
; 293  :    groundImpactZ = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+356], xmm0

; 294  :    groundImpactTime = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+360], xmm0

; 295  : 
; 296  :    xDot = platform->XDelta();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR _xDot$[ebp]

; 297  :    yDot = platform->YDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR _yDot$[ebp]

; 298  :    zDot = platform->ZDelta();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR _zDot$[ebp]

; 299  : 	//MI externalised
; 300  :    timeStep = g_fBombTimeStep;

	movss	xmm0, DWORD PTR ?g_fBombTimeStep@@3MA
	movss	DWORD PTR _timeStep$[ebp], xmm0

; 301  : 
; 302  : 	// COBRA - RED - Rewritten JSOW check
; 303  : 	maxTime = 120.0F;

	movss	xmm0, DWORD PTR __real@42f00000
	movss	DWORD PTR _maxTime$[ebp], xmm0

; 304  : 	theBomb = GetTheBomb();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _theBomb$[ebp], eax

; 305  : 	if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW){

	cmp	DWORD PTR _theBomb$[ebp], 0
	je	$LN25@CalculateI
	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN25@CalculateI

; 306  : 		isJSOW = true;

	mov	BYTE PTR _isJSOW$[ebp], 1

; 307  : 		maxTime = ((theBomb->GetJSOWmaxRange()*NM_TO_FT)/platform->GetVt())*2.2f; // 1200.0F;

	mov	ecx, DWORD PTR _theBomb$[ebp]
	call	?GetJSOWmaxRange@BombClass@@QAEMXZ	; BombClass::GetJSOWmaxRange
	fstp	DWORD PTR tv977[ebp]
	movss	xmm0, DWORD PTR tv977[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+140]
	mov	edx, DWORD PTR [eax+220]
	movss	DWORD PTR tv1419[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv984[ebp]
	movss	xmm0, DWORD PTR tv1419[ebp]
	divss	xmm0, DWORD PTR tv984[ebp]
	mulss	xmm0, DWORD PTR __real@400ccccd
	movss	DWORD PTR _maxTime$[ebp], xmm0
$LN25@CalculateI:

; 308  : 	}
; 309  : 
; 310  : 
; 311  :    if (!preDesignate && GetMasterMode() != AirGroundLaser)	//MI added check for Laser

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+182]
	test	ecx, ecx
	jne	$LN24@CalculateI
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	cmp	eax, 8
	je	$LN24@CalculateI

; 312  :    {
; 313  : 
; 314  :       a = 0.5F * grav;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _grav$[ebp]
	movss	DWORD PTR _a$[ebp], xmm0

; 315  :       b = zDot;

	movss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _b$[ebp], xmm0

; 316  :       c = platform->ZPos() - groundDesignateZ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv993[ebp]
	movss	xmm0, DWORD PTR tv993[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+384]
	movss	DWORD PTR _c$[ebp], xmm0

; 317  : 
; 318  :       t = (-b + (float)sqrt(b * b - 4 * a * c)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _b$[ebp]
	mulss	xmm1, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR __real@40800000
	mulss	xmm2, DWORD PTR _a$[ebp]
	mulss	xmm2, DWORD PTR _c$[ebp]
	subss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1421[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1002[ebp]
	movss	xmm0, DWORD PTR tv1421[ebp]
	addss	xmm0, DWORD PTR tv1002[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 319  :       groundImpactX = platform->XPos() + xDot* t;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1008[ebp]
	movss	xmm0, DWORD PTR tv1008[ebp]
	movss	xmm1, DWORD PTR _xDot$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+348], xmm0

; 320  :       groundImpactY = platform->YPos() + yDot* t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1015[ebp]
	movss	xmm0, DWORD PTR tv1015[ebp]
	movss	xmm1, DWORD PTR _yDot$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+352], xmm0

; 321  :       groundImpactZ = groundDesignateZ;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	mov	DWORD PTR [edx+356], ecx

; 322  : 	  groundImpactTime = t;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [edx+360], xmm0
$LN24@CalculateI:

; 323  :    }
; 324  :    // M.N. no "else if" here, or dumb bombs will drop short
; 325  :    if (Sms->CurHardpoint() >= 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	test	eax, eax
	jl	$LN1@CalculateI

; 326  :    {
; 327  :       rx = Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->xEjection;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv231[ebp], edx
	mov	eax, DWORD PTR tv231[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv231[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _rx$[ebp], xmm0

; 328  :       ry = Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->yEjection;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv254[ebp], edx
	mov	eax, DWORD PTR tv254[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv254[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _ry$[ebp], xmm0

; 329  :       rz = Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->zEjection;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv277[ebp], edx
	mov	eax, DWORD PTR tv277[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv277[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _rz$[ebp], xmm0

; 330  :       //LRKLUDGE  Replace this with Terrain LOS check when its ready
; 331  :       xDot += platform->dmx[0][0]*rx + platform->dmx[1][0]*ry + platform->dmx[2][0]*rz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _xDot$[ebp]
	movss	DWORD PTR _xDot$[ebp], xmm0

; 332  :       yDot += platform->dmx[0][1]*rx + platform->dmx[1][1]*ry + platform->dmx[2][1]*rz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _yDot$[ebp]
	movss	DWORD PTR _yDot$[ebp], xmm0

; 333  :       zDot += platform->dmx[0][2]*rx + platform->dmx[1][2]*ry + platform->dmx[2][2]*rz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _zDot$[ebp], xmm0

; 334  : 
; 335  :       area  = Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->area;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv408[ebp], edx
	mov	eax, DWORD PTR tv408[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv408[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _area$[ebp], xmm0

; 336  :       mass  = Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->weight / grav;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv431[ebp], edx
	mov	eax, DWORD PTR tv431[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv431[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _grav$[ebp]
	movss	DWORD PTR _mass$[ebp], xmm0

; 337  :       dragCoeff  = Sms->hardPoint[Sms->CurHardpoint()]->GetWeaponData()->cd;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR tv455[ebp], edx
	mov	eax, DWORD PTR tv455[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv455[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _dragCoeff$[ebp], xmm0

; 338  : 
; 339  : 	  // edg kludge: drag coeff >= 1.0 is a durandal (w/chute)
; 340  : 	  if ( dragCoeff >= 1.0f )

	movss	xmm0, DWORD PTR _dragCoeff$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN22@CalculateI

; 341  : 		  //MI
; 342  : 		  //grav *= 0.65f;
; 343  : 		  grav *= g_fHighDragGravFactor;

	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR ?g_fHighDragGravFactor@@3MA
	movss	DWORD PTR _grav$[ebp], xmm0
$LN22@CalculateI:

; 344  : 
; 345  : 
; 346  :       // dragCoeff = 0.5F * RHOASL * area * dragCoeff;
; 347  :       // v0Factor = (float)atanh(sqrt(dragCoeff / grav) * zDot);
; 348  : 
; 349  : 	  float ratx, raty, horiz, tfloor, tceil;
; 350  : 
; 351  : 	  horiz = (float)sqrt( xDot * xDot + yDot * yDot + 0.1f);

	movss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _xDot$[ebp]
	movss	xmm1, DWORD PTR _yDot$[ebp]
	mulss	xmm1, DWORD PTR _yDot$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _horiz$13[ebp]

; 352  : 	  ratx = (float)fabs(xDot)/horiz;

	push	ecx
	movss	xmm0, DWORD PTR _xDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1118[ebp]
	movss	xmm0, DWORD PTR tv1118[ebp]
	divss	xmm0, DWORD PTR _horiz$13[ebp]
	movss	DWORD PTR _ratx$12[ebp], xmm0

; 353  : 	  raty = (float)fabs(yDot)/horiz;

	push	ecx
	movss	xmm0, DWORD PTR _yDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1124[ebp]
	movss	xmm0, DWORD PTR tv1124[ebp]
	divss	xmm0, DWORD PTR _horiz$13[ebp]
	movss	DWORD PTR _raty$11[ebp], xmm0

; 354  : 
; 355  :       // Start position
; 356  :       dx = platform->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _dx$[ebp]

; 357  :       dy = platform->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _dy$[ebp]

; 358  :       dz = platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _dz$[ebp]

; 359  : 
; 360  : 	  // for 1st sec, there's no drag only gravity
; 361  : 	  dx += xDot;

	movss	xmm0, DWORD PTR _dx$[ebp]
	addss	xmm0, DWORD PTR _xDot$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 362  : 	  dy += yDot;

	movss	xmm0, DWORD PTR _dy$[ebp]
	addss	xmm0, DWORD PTR _yDot$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 363  : 	  
; 364  : 	  //dz += zDot + 0.5f * GRAVITY;
; 365  : 	  //zDot += GRAVITY;
; 366  : 	  dz += zDot + 0.5f * calcgrav(this);			//Wombat778 3-12-04

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR tv1140[ebp]
	movss	xmm0, DWORD PTR tv1140[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _zDot$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 367  : 	  zDot += calcgrav(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?calcgrav@@YAMPAVFireControlComputer@@@Z ; calcgrav
	add	esp, 4
	fstp	DWORD PTR tv1148[ebp]
	movss	xmm0, DWORD PTR tv1148[ebp]
	addss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _zDot$[ebp], xmm0

; 368  : 
; 369  : 
; 370  : 
; 371  : 	  // first we're going to use analytic methods to get us most of
; 372  : 	  // the way thru the calculation, and then use numerical integration
; 373  : 	  // to get us to the impact point.  First, calc the time it will take
; 374  : 	  // for the bomb to drop some pct of the dist to the ground.   Then
; 375  : 	  // calc the times where x and y vel vectors will drop to zero due
; 376  : 	  // to drag.  Use the smallest of these times for the analytic part to
; 377  : 	  // calc the starting position for numerical integration.
; 378  :       OTWDriver.GetAreaFloorAndCeiling( &tfloor, &tceil );

	lea	eax, DWORD PTR _tceil$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _tfloor$1[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetAreaFloorAndCeiling@OTWDriverClass@@QAEXPAM0@Z ; OTWDriverClass::GetAreaFloorAndCeiling

; 379  :       a = 0.5F * grav;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _grav$[ebp]
	movss	DWORD PTR _a$[ebp], xmm0

; 380  :       b = zDot;

	movss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _b$[ebp], xmm0

; 381  :       // c = (platform->ZPos() - OTWDriver.GetApproxGroundLevel( platform->XPos(), platform->YPos() ) ) * 0.8f;
; 382  :       c = dz - tceil;

	movss	xmm0, DWORD PTR _dz$[ebp]
	subss	xmm0, DWORD PTR _tceil$8[ebp]
	movss	DWORD PTR _c$[ebp], xmm0

; 383  : 	  //MI
; 384  : 	  if (g_bBombNumLoopOnly){

	movzx	edx, BYTE PTR ?g_bBombNumLoopOnly@@3_NA	; g_bBombNumLoopOnly
	test	edx, edx
	je	SHORT $LN21@CalculateI

; 385  : 		  c = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _c$[ebp], xmm0
	jmp	SHORT $LN19@CalculateI
$LN21@CalculateI:

; 386  : 	  }
; 387  : 	  else if ( c > 0.0f ){

	movss	xmm0, DWORD PTR _c$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@CalculateI

; 388  : 		  c = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _c$[ebp], xmm0
$LN19@CalculateI:

; 389  : 	  }
; 390  : 
; 391  : 	  // time to drop some pct of the way down
; 392  :       t = (-b + (float)sqrt(b * b - 4 * a * c)) / (2.0F * a);

	movss	xmm0, DWORD PTR _b$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _b$[ebp]
	mulss	xmm1, DWORD PTR _b$[ebp]
	movss	xmm2, DWORD PTR __real@40800000
	mulss	xmm2, DWORD PTR _a$[ebp]
	mulss	xmm2, DWORD PTR _c$[ebp]
	subss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1423[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1165[ebp]
	movss	xmm0, DWORD PTR tv1423[ebp]
	addss	xmm0, DWORD PTR tv1165[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _a$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 393  : 
; 394  : 	  // now calc the x and y times
; 395  : 	  vdragx = dragCoeff * BombClass::dragConstant * ratx;

	movss	xmm0, DWORD PTR _dragCoeff$[ebp]
	mulss	xmm0, DWORD PTR ?dragConstant@BombClass@@2MA
	mulss	xmm0, DWORD PTR _ratx$12[ebp]
	movss	DWORD PTR _vdragx$[ebp], xmm0

; 396  : 	  if ( vdragx != 0.0f )

	movss	xmm0, DWORD PTR _vdragx$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@CalculateI

; 397  : 	  {
; 398  : 		  xt = (float)fabs(xDot) / ( vdragx );

	push	ecx
	movss	xmm0, DWORD PTR _xDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1176[ebp]
	movss	xmm0, DWORD PTR tv1176[ebp]
	divss	xmm0, DWORD PTR _vdragx$[ebp]
	movss	DWORD PTR _xt$[ebp], xmm0

; 399  : 		  if ( xt < t )

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR _xt$[ebp]
	jbe	SHORT $LN17@CalculateI

; 400  : 		  		t = xt;

	movss	xmm0, DWORD PTR _xt$[ebp]
	movss	DWORD PTR _t$[ebp], xmm0
$LN17@CalculateI:

; 401  :       }
; 402  : 	  vdragy = dragCoeff * BombClass::dragConstant * raty;

	movss	xmm0, DWORD PTR _dragCoeff$[ebp]
	mulss	xmm0, DWORD PTR ?dragConstant@BombClass@@2MA
	mulss	xmm0, DWORD PTR _raty$11[ebp]
	movss	DWORD PTR _vdragy$[ebp], xmm0

; 403  : 	  if ( vdragy != 0.0f )

	movss	xmm0, DWORD PTR _vdragy$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@CalculateI

; 404  : 	  {
; 405  : 		  yt = (float)fabs(yDot) / ( vdragy );

	push	ecx
	movss	xmm0, DWORD PTR _yDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1188[ebp]
	movss	xmm0, DWORD PTR tv1188[ebp]
	divss	xmm0, DWORD PTR _vdragy$[ebp]
	movss	DWORD PTR _yt$[ebp], xmm0

; 406  : 		  if ( yt < t )

	movss	xmm0, DWORD PTR _t$[ebp]
	comiss	xmm0, DWORD PTR _yt$[ebp]
	jbe	SHORT $LN15@CalculateI

; 407  : 		  		t = yt;

	movss	xmm0, DWORD PTR _yt$[ebp]
	movss	DWORD PTR _t$[ebp], xmm0
$LN15@CalculateI:

; 408  :       }
; 409  : 
; 410  : 	  // change x and y drags to appropriate sign (opposite vel)
; 411  : 	  if ( xDot > 0.0f )

	movss	xmm0, DWORD PTR _xDot$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@CalculateI

; 412  : 	  		vdragx = -vdragx;

	movss	xmm0, DWORD PTR _vdragx$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vdragx$[ebp], xmm0
$LN14@CalculateI:

; 413  : 	  if ( yDot > 0.0f )

	movss	xmm0, DWORD PTR _yDot$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@CalculateI

; 414  : 	  		vdragy = -vdragy;

	movss	xmm0, DWORD PTR _vdragy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _vdragy$[ebp], xmm0
$LN13@CalculateI:

; 415  : 
; 416  : 
; 417  : 	  dz += zDot * t + 0.5f * grav * t * t;

	movss	xmm0, DWORD PTR _zDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR _grav$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 418  : 	  dx += xDot * t + 0.5f * vdragx * t * t;

	movss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR _vdragx$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 419  : 	  dy += yDot * t + 0.5f * vdragy * t * t;

	movss	xmm0, DWORD PTR _yDot$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR _vdragy$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	mulss	xmm1, DWORD PTR _t$[ebp]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 420  : 
; 421  : 	  zDot += grav * t;

	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _zDot$[ebp], xmm0

; 422  : 	  yDot += vdragy * t;

	movss	xmm0, DWORD PTR _vdragy$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR _yDot$[ebp]
	movss	DWORD PTR _yDot$[ebp], xmm0

; 423  : 	  xDot += vdragx * t;

	movss	xmm0, DWORD PTR _vdragx$[ebp]
	mulss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR _xDot$[ebp]
	movss	DWORD PTR _xDot$[ebp], xmm0

; 424  : 
; 425  : 	  // numerical integration loop
; 426  : 	  vdragx *= timeStep;

	movss	xmm0, DWORD PTR _vdragx$[ebp]
	mulss	xmm0, DWORD PTR _timeStep$[ebp]
	movss	DWORD PTR _vdragx$[ebp], xmm0

; 427  : 	  vdragy *= timeStep;

	movss	xmm0, DWORD PTR _vdragy$[ebp]
	mulss	xmm0, DWORD PTR _timeStep$[ebp]
	movss	DWORD PTR _vdragy$[ebp], xmm0

; 428  : 	  // add back in the 1st sec
; 429  : 	  groundImpactTime = t + 1.0f;

	movss	xmm0, DWORD PTR _t$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+360], xmm0
$LN12@CalculateI:

; 430  :       do
; 431  :       {
; 432  :          lastX = dx;

	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _lastX$[ebp], xmm0

; 433  :          lastY = dy;

	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _lastY$[ebp], xmm0

; 434  :          lastZ = dz;

	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _lastZ$[ebp], xmm0

; 435  : 
; 436  :          dx += xDot * timeStep;

	movss	xmm0, DWORD PTR _xDot$[ebp]
	mulss	xmm0, DWORD PTR _timeStep$[ebp]
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 437  :          dy += yDot * timeStep;

	movss	xmm0, DWORD PTR _yDot$[ebp]
	mulss	xmm0, DWORD PTR _timeStep$[ebp]
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 438  :          dz += zDot * timeStep;

	movss	xmm0, DWORD PTR _zDot$[ebp]
	mulss	xmm0, DWORD PTR _timeStep$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 439  : 
; 440  : 		 if ( fabs( xDot ) < fabs( vdragx ) )

	push	ecx
	movss	xmm0, DWORD PTR _xDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1228[ebp]
	movss	xmm0, DWORD PTR tv1228[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _vdragx$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1425[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1234[ebp]
	movss	xmm0, DWORD PTR tv1234[ebp]
	movss	xmm1, DWORD PTR tv1425[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@CalculateI

; 441  : 		 {
; 442  : 			  xDot = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xDot$[ebp], xmm0

; 443  : 		 }
; 444  : 		 else

	jmp	SHORT $LN8@CalculateI
$LN9@CalculateI:

; 445  : 		 {
; 446  : 			  xDot += vdragx;

	movss	xmm0, DWORD PTR _xDot$[ebp]
	addss	xmm0, DWORD PTR _vdragx$[ebp]
	movss	DWORD PTR _xDot$[ebp], xmm0
$LN8@CalculateI:

; 447  : 		 }
; 448  : 		 if ( fabs( yDot ) < fabs( vdragy ) )

	push	ecx
	movss	xmm0, DWORD PTR _yDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1242[ebp]
	movss	xmm0, DWORD PTR tv1242[ebp]
	push	ecx
	movss	xmm1, DWORD PTR _vdragy$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1427[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1248[ebp]
	movss	xmm0, DWORD PTR tv1248[ebp]
	movss	xmm1, DWORD PTR tv1427[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@CalculateI

; 449  : 		 {
; 450  : 			  yDot = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yDot$[ebp], xmm0

; 451  : 		 }
; 452  : 		 else

	jmp	SHORT $LN6@CalculateI
$LN7@CalculateI:

; 453  : 		 {
; 454  : 			  yDot += vdragy;

	movss	xmm0, DWORD PTR _yDot$[ebp]
	addss	xmm0, DWORD PTR _vdragy$[ebp]
	movss	DWORD PTR _yDot$[ebp], xmm0
$LN6@CalculateI:

; 455  : 		 }
; 456  :          zDot += grav * timeStep;

	movss	xmm0, DWORD PTR _grav$[ebp]
	mulss	xmm0, DWORD PTR _timeStep$[ebp]
	addss	xmm0, DWORD PTR _zDot$[ebp]
	movss	DWORD PTR _zDot$[ebp], xmm0

; 457  :          groundImpactTime += timeStep;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+360]
	addss	xmm0, DWORD PTR _timeStep$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+360], xmm0

; 458  : 
; 459  :       }
; 460  :       while (dz <= OTWDriver.GetGroundLevel(dx, dy) && groundImpactTime < maxTime);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv1263[ebp]
	movss	xmm0, DWORD PTR tv1263[ebp]
	comiss	xmm0, DWORD PTR _dz$[ebp]
	jb	SHORT $LN5@CalculateI
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _maxTime$[ebp]
	comiss	xmm0, DWORD PTR [eax+360]
	ja	$LN12@CalculateI
$LN5@CalculateI:

; 461  : 
; 462  :       if (groundImpactTime >= maxTime)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+360]
	comiss	xmm0, DWORD PTR _maxTime$[ebp]
	jb	SHORT $LN4@CalculateI

; 463  :          noSolution = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+193], 1

; 464  :       else

	jmp	SHORT $LN3@CalculateI
$LN4@CalculateI:

; 465  :          noSolution = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+193], 0
$LN3@CalculateI:

; 466  : 
; 467  :       groundImpactZ = OTWDriver.GetGroundLevel(dx, dy);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+356]

; 468  : 
; 469  : // 2002-03-28 MI make this configurable for better adjustments
; 470  : // 2001-06-17 ADDED BY S.G. ONLY IF IT'S NOT A GUN
; 471  : 	  if (Sms->curWeaponClass != wcGunWpn)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	cmp	DWORD PTR [eax+156], 3
	je	SHORT $LN2@CalculateI

; 472  : // 2001-04-14 ADDED BY S.G. KLUDGE TO MAKE THE BOMBS HIT WHERE THEY ARE SUPPOSED TO HIT
; 473  : 		  groundImpactZ -= g_fGroundImpactMod;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+356]
	subss	xmm0, DWORD PTR ?g_fGroundImpactMod@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+356], xmm0
$LN2@CalculateI:

; 474  : // END OF ADDED SECTION
; 475  : 
; 476  :       // Interpolate for the time
; 477  :       delta = (groundImpactZ - lastZ) / (dz - lastZ);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+356]
	subss	xmm0, DWORD PTR _lastZ$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	subss	xmm1, DWORD PTR _lastZ$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _delta$[ebp], xmm0

; 478  :       groundImpactTime = (groundImpactTime - timeStep) + delta * timeStep;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+360]
	subss	xmm0, DWORD PTR _timeStep$[ebp]
	movss	xmm1, DWORD PTR _delta$[ebp]
	mulss	xmm1, DWORD PTR _timeStep$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+360], xmm0

; 479  :       groundImpactX = lastX + delta * (dx - lastX);

	movss	xmm0, DWORD PTR _dx$[ebp]
	subss	xmm0, DWORD PTR _lastX$[ebp]
	mulss	xmm0, DWORD PTR _delta$[ebp]
	addss	xmm0, DWORD PTR _lastX$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+348], xmm0

; 480  :       groundImpactY = lastY + delta * (dy - lastY);

	movss	xmm0, DWORD PTR _dy$[ebp]
	subss	xmm0, DWORD PTR _lastY$[ebp]
	mulss	xmm0, DWORD PTR _delta$[ebp]
	addss	xmm0, DWORD PTR _lastY$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+352], xmm0

; 481  : 
; 482  : 			// Cobra - test
; 483  :          dx = groundImpactX - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1300[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+348]
	subss	xmm0, DWORD PTR tv1300[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 484  :          dy = groundImpactY - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1307[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+352]
	subss	xmm0, DWORD PTR tv1307[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 485  :          dz = groundImpactZ - platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1314[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+356]
	subss	xmm0, DWORD PTR tv1314[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 486  :          float GroundRange = (float)SqrtF(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR _GroundRange$5[ebp]

; 487  : 				 float GndAngle = (float)(atan2(dy, dx)) * RTD;

	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1328[ebp]
	movsd	xmm0, QWORD PTR tv1328[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _GndAngle$3[ebp], xmm0

; 488  : 
; 489  : 					dx = groundDesignateX - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1333[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+376]
	subss	xmm0, DWORD PTR tv1333[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 490  : 					dy = groundDesignateY - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1340[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+380]
	subss	xmm0, DWORD PTR tv1340[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 491  : 					dz = groundDesignateZ - platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1347[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+384]
	subss	xmm0, DWORD PTR tv1347[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 492  :          float TargetRange = (float)SqrtF(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR _TargetRange$4[ebp]

; 493  : 				 float TgtAngle = (float)(atan2(dy, dx)) * RTD;

	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv1361[ebp]
	movsd	xmm0, QWORD PTR tv1361[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _TgtAngle$2[ebp], xmm0

; 494  : 
; 495  :          dx = groundDesignateX - groundImpactX;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+376]
	subss	xmm0, DWORD PTR [eax+348]
	movss	DWORD PTR _dx$[ebp], xmm0

; 496  :          dy = groundDesignateY - groundImpactY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+380]
	subss	xmm0, DWORD PTR [edx+352]
	movss	DWORD PTR _dy$[ebp], xmm0

; 497  :          dz = groundDesignateZ - groundImpactZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+384]
	subss	xmm0, DWORD PTR [ecx+356]
	movss	DWORD PTR _dz$[ebp], xmm0

; 498  :          float TgtGrndRange = (float)SqrtF(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtF@@YAMM@Z				; SqrtF
	add	esp, 4
	fstp	DWORD PTR _TgtGrndRange$6[ebp]

; 499  : 
; 500  : 		//me123 lets add the wind change effect to the bomb fall
; 501  : 	  //MI
; 502  : 	  if(g_bEnableWindsAloft)

	movzx	edx, BYTE PTR ?g_bEnableWindsAloft@@3_NA ; g_bEnableWindsAloft
	test	edx, edx
	je	$LN1@CalculateI

; 503  : 	  {
; 504  : 		  mlTrig trigWind;
; 505  : 		  float wind;
; 506  : 		  Tpoint			pos;
; 507  : 		  pos.x = platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$17[ebp]

; 508  : 		  pos.y = platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$17[ebp+4]

; 509  : 		  pos.z = platform->ZPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$17[ebp+8]

; 510  : 
; 511  : 		  // current wind
; 512  : 		  mlSinCos(&trigWind, ((WeatherClass*)realWeather)->WindHeadingAt(&pos));

	lea	eax, DWORD PTR _pos$17[ebp]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindHeadingAt@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindHeadingAt
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trigWind$7[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 513  : 		  wind =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	edx, DWORD PTR _pos$17[ebp]
	push	edx
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	fstp	DWORD PTR _wind$16[ebp]

; 514  : 		  float winddx = trigWind.cos * wind;

	movss	xmm0, DWORD PTR _trigWind$7[ebp+4]
	mulss	xmm0, DWORD PTR _wind$16[ebp]
	movss	DWORD PTR _winddx$15[ebp], xmm0

; 515  : 		  float winddy = trigWind.sin * wind;

	movss	xmm0, DWORD PTR _trigWind$7[ebp]
	mulss	xmm0, DWORD PTR _wind$16[ebp]
	movss	DWORD PTR _winddy$14[ebp], xmm0

; 516  : 		  
; 517  : 
; 518  : 
; 519  : 		  /*		//wind at 1/3 the altitude
; 520  : 		  pos.z = platform->ZPos()/3f;
; 521  : 		  mlSinCos(&trigWind, ((WeatherClass*)realWeather)->WindHeadingAt(&pos));
; 522  : 		  wind =  ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);
; 523  : 		  float nextwinddx = trigWind.cos * wind;
; 524  : 		  float nextwinddy = trigWind.sin * wind;
; 525  : 		  */
; 526  : 		  float nextwinddx = winddx*0.5f;

	movss	xmm0, DWORD PTR _winddx$15[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _nextwinddx$10[ebp], xmm0

; 527  : 		  float nextwinddy = winddy*0.5f;

	movss	xmm0, DWORD PTR _winddy$14[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _nextwinddy$9[ebp], xmm0

; 528  : 
; 529  : 		  //factor in the change
; 530  : 		  static float test = 1.0f;
; 531  : 		  groundImpactX += (nextwinddx-winddx) * groundImpactTime*test*0.5f;

	movss	xmm0, DWORD PTR _nextwinddx$10[ebp]
	subss	xmm0, DWORD PTR _winddx$15[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+360]
	mulss	xmm0, DWORD PTR ?test@?DG@??CalculateImpactPoint@FireControlComputer@@AAEXXZ@4MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+348]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+348], xmm0

; 532  : 		  groundImpactY += (nextwinddy-winddy) * groundImpactTime*test*0.5f;

	movss	xmm0, DWORD PTR _nextwinddy$9[ebp]
	subss	xmm0, DWORD PTR _winddy$14[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+360]
	mulss	xmm0, DWORD PTR ?test@?DG@??CalculateImpactPoint@FireControlComputer@@AAEXXZ@4MA
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+352]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+352], xmm0

; 533  : 		  groundImpactZ = OTWDriver.GetGroundLevel(groundImpactX, groundImpactY);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+352]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+348]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+356]
$LN1@CalculateI:

; 534  : 	  }
; 535  :    }
; 536  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateImpactPoint@FireControlComputer@@AAEXXZ ENDP	; FireControlComputer::CalculateImpactPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
_trig$ = -84						; size = 8
tv641 = -76						; size = 4
tv650 = -72						; size = 4
tv582 = -68						; size = 4
tv575 = -64						; size = 4
tv568 = -60						; size = 4
_tmpZ$ = -56						; size = 4
_tmpY$ = -52						; size = 4
_tmpX$ = -48						; size = 4
_rz$ = -44						; size = 4
_rx$ = -40						; size = 4
_dz$ = -36						; size = 4
_dy$ = -32						; size = 4
_dx$ = -28						; size = 4
_pitch$ = -24						; size = 4
_yaw$ = -20						; size = 4
_xMove$ = -16						; size = 4
_yMove$ = -12						; size = 4
_ry$ = -8						; size = 4
_this$ = -4						; size = 4
?DTOSMode@FireControlComputer@@AAEXXZ PROC		; FireControlComputer::DTOSMode
; _this$ = ecx

; 1116 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 1117 : 	float pitch, yaw, tmpX, tmpY, tmpZ;
; 1118 : 	float dx, dy, dz, rx, ry, rz;
; 1119 : 	float xMove = 0.0F, yMove = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xMove$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yMove$[ebp], xmm0

; 1120 : 	mlTrig trig;
; 1121 : 	
; 1122 : 	// Drop Track on command
; 1123 : 	if (dropTrackCmd)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+185]
	test	ecx, ecx
	je	SHORT $LN14@DTOSMode

; 1124 : 	{
; 1125 : 		preDesignate = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+182], 1

; 1126 : 		groundPipperAz = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+388], xmm0

; 1127 : 		groundPipperEl = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+392], xmm0
$LN14@DTOSMode:

; 1128 : 	}
; 1129 : 	
; 1130 : 	// Move the cursors as needed
; 1131 : 	if ((cursorXCmd != 0) || (cursorYCmd != 0))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+196], 0
	jne	SHORT $LN12@DTOSMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN10@DTOSMode
$LN12@DTOSMode:

; 1132 : 		if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == true) && (IO.AnalogIsUsed(AXIS_CURSOR_Y) == true))

	push	11					; 0000000bH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN11@DTOSMode
	push	12					; 0000000cH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN11@DTOSMode

; 1133 : 		{
; 1134 : 			yMove = (float)cursorYCmd / 10000.0F;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+200]
	divss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR _yMove$[ebp], xmm0

; 1135 : 			xMove = (float)cursorXCmd / 10000.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+196]
	divss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR _xMove$[ebp], xmm0

; 1136 : 		}
; 1137 : 		else

	jmp	SHORT $LN10@DTOSMode
$LN11@DTOSMode:

; 1138 : 		{
; 1139 : 			yMove = (float)cursorYCmd;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+200]
	movss	DWORD PTR _yMove$[ebp], xmm0

; 1140 : 			xMove = (float)cursorXCmd;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+196]
	movss	DWORD PTR _xMove$[ebp], xmm0
$LN10@DTOSMode:

; 1141 : 		}
; 1142 : 
; 1143 : 	groundPipperEl += yMove * g_fCursorSpeed * DTOS_SLEW_RATE * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _yMove$[ebp]
	mulss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	mulss	xmm0, DWORD PTR _DTOS_SLEW_RATE
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+392]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+392], xmm0

; 1144 : 	groundPipperAz += xMove * g_fCursorSpeed * DTOS_SLEW_RATE * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _xMove$[ebp]
	mulss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	mulss	xmm0, DWORD PTR _DTOS_SLEW_RATE
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+388]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+388], xmm0

; 1145 : 	
; 1146 : 	if (preDesignate || (cursorXCmd != 0) || (cursorYCmd != 0))

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+182]
	test	eax, eax
	jne	SHORT $LN8@DTOSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+196], 0
	jne	SHORT $LN8@DTOSMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	$LN5@DTOSMode
$LN8@DTOSMode:

; 1147 : 	{
; 1148 : 		groundDesignateAz = -cockpitFlightData.beta*DTR + cockpitFlightData.windOffset*platform->platformAngles.cosphi;

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+28
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+64
	mulss	xmm1, DWORD PTR [ecx+400]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+364], xmm0

; 1149 : 		groundDesignateAz += groundPipperAz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+364]
	addss	xmm0, DWORD PTR [ecx+388]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+364], xmm0

; 1150 : 		groundDesignateEl = -cockpitFlightData.alpha*DTR + cockpitFlightData.windOffset*platform->platformAngles.sinphi;

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+24
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	movss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+64
	mulss	xmm1, DWORD PTR [ecx+396]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+368], xmm0

; 1151 : 		groundDesignateEl += groundPipperEl;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+368]
	addss	xmm0, DWORD PTR [ecx+392]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+368], xmm0

; 1152 : 		groundDesignateDroll = (float)atan2 (sin(groundDesignateAz), sin(groundDesignateEl));

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+368]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+364]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+372]

; 1153 : 		
; 1154 : 		if (releaseConsent || designateCmd || !preDesignate)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+181]
	test	ecx, ecx
	jne	SHORT $LN6@DTOSMode
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+184]
	test	eax, eax
	jne	SHORT $LN6@DTOSMode
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+182]
	test	edx, edx
	jne	$LN5@DTOSMode
$LN6@DTOSMode:

; 1155 : 		{
; 1156 : 			// Convert from the body relative flight path marker angles to world space pitch/yaw
; 1157 : 			mlSinCos (&trig, platform->Roll());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1158 : 			yaw   = platform->Yaw();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _yaw$[ebp]

; 1159 : 			pitch = platform->Pitch();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR _pitch$[ebp]

; 1160 : 			pitch += groundDesignateEl * trig.cos - groundDesignateAz*trig.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+368]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+364]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	subss	xmm0, xmm1
	addss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR _pitch$[ebp], xmm0

; 1161 : 			yaw   += groundDesignateEl * trig.sin + groundDesignateAz*trig.cos;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+368]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+364]
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR _yaw$[ebp], xmm0

; 1162 : 			if (FindGroundIntersection (pitch, yaw, &tmpX, &tmpY, &tmpZ))

	lea	edx, DWORD PTR _tmpZ$[ebp]
	push	edx
	lea	eax, DWORD PTR _tmpY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tmpX$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindGroundIntersection@FireControlComputer@@AAEHMMPAM00@Z ; FireControlComputer::FindGroundIntersection
	test	eax, eax
	je	SHORT $LN5@DTOSMode

; 1163 : 			{
; 1164 : 				groundDesignateX = tmpX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpX$[ebp]
	movss	DWORD PTR [edx+376], xmm0

; 1165 : 				groundDesignateY = tmpY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpY$[ebp]
	movss	DWORD PTR [eax+380], xmm0

; 1166 : 				groundDesignateZ = tmpZ;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpZ$[ebp]
	movss	DWORD PTR [ecx+384], xmm0

; 1167 : 				preDesignate = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+182], 0
$LN5@DTOSMode:

; 1168 : 			}
; 1169 : 		}
; 1170 : 	}
; 1171 : 	
; 1172 : 	// Do post designate work
; 1173 : 	if (!preDesignate)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+182]
	test	ecx, ecx
	jne	$LN4@DTOSMode

; 1174 : 	{
; 1175 : 		if(masterMode==AirGroundRocket)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+144], 13			; 0000000dH
	jne	SHORT $LN3@DTOSMode

; 1176 : 			CalculateRocketImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateRocketImpactPoint

; 1177 : 		else

	jmp	SHORT $LN2@DTOSMode
$LN3@DTOSMode:

; 1178 : 			CalculateImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateImpactPoint
$LN2@DTOSMode:

; 1179 : 		
; 1180 : 		dx = groundDesignateX - platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv568[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+376]
	subss	xmm0, DWORD PTR tv568[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1181 : 		dy = groundDesignateY - platform->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv575[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+380]
	subss	xmm0, DWORD PTR tv575[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1182 : 		dz = groundDesignateZ - platform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv582[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+384]
	subss	xmm0, DWORD PTR tv582[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1183 : 		
; 1184 : 		rx = platform->dmx[0][0]*dx + platform->dmx[0][1]*dy + platform->dmx[0][2]*dz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 1185 : 		ry = platform->dmx[1][0]*dx + platform->dmx[1][1]*dy + platform->dmx[1][2]*dz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 1186 : 		rz = platform->dmx[2][0]*dx + platform->dmx[2][1]*dy + platform->dmx[2][2]*dz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 1187 : 		
; 1188 : 		groundDesignateDroll = (float)atan2 (ry,-rz);

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+372]

; 1189 : 		groundDesignateAz = (float)atan2 (ry,rx);

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+364]

; 1190 : 		groundDesignateEl = (float)atan (-rz/(float)sqrt(rx*rx+ry*ry+.1F));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv650[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv641[ebp]
	movss	xmm0, DWORD PTR tv650[ebp]
	divss	xmm0, DWORD PTR tv641[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+368]

; 1191 : 		
; 1192 : 		CalculateReleaseRange();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateReleaseRange@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateReleaseRange

; 1193 : 	}
; 1194 : 	else

	jmp	SHORT $LN1@DTOSMode
$LN4@DTOSMode:

; 1195 : 	{
; 1196 : 		airGroundDelayTime = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+328], xmm0
$LN1@DTOSMode:

; 1197 : 	}
; 1198 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DTOSMode@FireControlComputer@@AAEXXZ ENDP		; FireControlComputer::DTOSMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv361 = -52						; size = 4
tv355 = -48						; size = 4
tv349 = -44						; size = 4
tv331 = -40						; size = 4
tv325 = -36						; size = 4
tv319 = -32						; size = 4
tv214 = -28						; size = 4
_theBomb$1 = -24					; size = 4
_dz$ = -20						; size = 4
tv65 = -16						; size = 4
_dy$ = -12						; size = 4
_dx$ = -8						; size = 4
_this$ = -4						; size = 4
?AirGroundMode@FireControlComputer@@AAEXXZ PROC		; FireControlComputer::AirGroundMode
; _this$ = ecx

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 61   : float dx, dy, dz;
; 62   : 
; 63   :    switch (subMode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 7
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 14			; 0000000eH
	ja	$LN28@AirGroundM
	mov	eax, DWORD PTR tv65[ebp]
	movzx	ecx, BYTE PTR $LN34@AirGroundM[eax]
	jmp	DWORD PTR $LN35@AirGroundM[ecx*4]
$LN27@AirGroundM:

; 64   :    {
; 65   :       case CCIP:
; 66   : 		  if(masterMode==AirGroundRocket)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+144], 13			; 0000000dH
	jne	SHORT $LN26@AirGroundM

; 67   : 			  CalculateRocketImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateRocketImpactPoint

; 68   : 		  else

	jmp	SHORT $LN25@AirGroundM
$LN26@AirGroundM:

; 69   : 			CalculateImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateImpactPoint
$LN25@AirGroundM:

; 70   : 
; 71   :          FindRelativeImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::FindRelativeImpactPoint

; 72   : 
; 73   : 		 if (preDesignate) {

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+182]
	test	ecx, ecx
	je	SHORT $LN24@AirGroundM

; 74   : 
; 75   : 			DelayModePipperCorrection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DelayModePipperCorrection@FireControlComputer@@AAEXXZ ; FireControlComputer::DelayModePipperCorrection

; 76   : 
; 77   : 			if (releaseConsent) {

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+181]
	test	eax, eax
	je	SHORT $LN23@AirGroundM

; 78   : 				DesignateGroundTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DesignateGroundTarget@FireControlComputer@@AAEXXZ ; FireControlComputer::DesignateGroundTarget

; 79   : 			} else {

	jmp	SHORT $LN22@AirGroundM
$LN23@AirGroundM:

; 80   : 				airGroundDelayTime = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+328], xmm0
$LN22@AirGroundM:

; 81   : 			}

	jmp	SHORT $LN20@AirGroundM
$LN24@AirGroundM:

; 82   : 		 }
; 83   : 		 else if (!releaseConsent)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+181]
	test	eax, eax
	jne	SHORT $LN20@AirGroundM

; 84   :          {
; 85   :             preDesignate = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+182], 1
$LN20@AirGroundM:

; 86   :          }
; 87   : 
; 88   :          if (!preDesignate && !postDrop)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+182]
	test	eax, eax
	jne	SHORT $LN19@AirGroundM
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+183]
	test	edx, edx
	jne	SHORT $LN19@AirGroundM

; 89   :          {
; 90   :             FindTargetError();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindTargetError@FireControlComputer@@AAEXXZ ; FireControlComputer::FindTargetError

; 91   :             CheckForBombRelease();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckForBombRelease@FireControlComputer@@AAEXXZ ; FireControlComputer::CheckForBombRelease
$LN19@AirGroundM:

; 92   :          }
; 93   :       break;

	jmp	$LN28@AirGroundM
$LN18@AirGroundM:

; 94   : 			case OBSOLETERCKT:
; 95   : 				CalculateRocketImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateRocketImpactPoint

; 96   : 				FindRelativeImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::FindRelativeImpactPoint

; 97   : 				dx = platform->XPos() - groundImpactX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv319[ebp]
	movss	xmm0, DWORD PTR tv319[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+348]
	movss	DWORD PTR _dx$[ebp], xmm0

; 98   : 				dy = platform->YPos() - groundImpactY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv325[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+352]
	movss	DWORD PTR _dy$[ebp], xmm0

; 99   : 				dz = platform->ZPos() - groundImpactZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv331[ebp]
	movss	xmm0, DWORD PTR tv331[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+356]
	movss	DWORD PTR _dz$[ebp], xmm0

; 100  : 				airGroundRange = (float)sqrt(dx*dx + dy*dy);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+332]

; 101  : 				if (!releaseConsent){

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+181]
	test	edx, edx
	jne	SHORT $LN17@AirGroundM

; 102  : 					preDesignate = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+182], 1
	jmp	SHORT $LN15@AirGroundM
$LN17@AirGroundM:

; 103  : 				}
; 104  : 				else if (!postDrop && Sms->curWeapon){

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+183]
	test	edx, edx
	jne	SHORT $LN15@AirGroundM
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@AirGroundM

; 105  : 					bombPickle = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+191], 1
$LN15@AirGroundM:

; 106  : 				}
; 107  : 			break;

	jmp	$LN28@AirGroundM
$LN14@AirGroundM:

; 108  : 			case STRAF:
; 109  : 				CalculateImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateImpactPoint

; 110  : 				FindRelativeImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::FindRelativeImpactPoint

; 111  : 				dx = platform->XPos() - groundImpactX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv349[ebp]
	movss	xmm0, DWORD PTR tv349[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+348]
	movss	DWORD PTR _dx$[ebp], xmm0

; 112  : 				dy = platform->YPos() - groundImpactY;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+140]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv355[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+352]
	movss	DWORD PTR _dy$[ebp], xmm0

; 113  : 				dz = platform->ZPos() - groundImpactZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR tv361[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+356]
	movss	DWORD PTR _dz$[ebp], xmm0

; 114  : 				airGroundRange = (float)sqrt(dx*dx + dy*dy + dz*dz);

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+332]

; 115  : 				airGroundDelayTime = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+328], xmm0

; 116  : 				inRange = (airGroundRange < 8000.0F) ? TRUE : FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@45fa0000
	comiss	xmm0, DWORD PTR [edx+332]
	jbe	SHORT $LN32@AirGroundM
	mov	DWORD PTR tv214[ebp], 1
	jmp	SHORT $LN33@AirGroundM
$LN32@AirGroundM:
	mov	DWORD PTR tv214[ebp], 0
$LN33@AirGroundM:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv214[ebp]
	mov	DWORD PTR [eax+216], ecx

; 117  : 			break;

	jmp	$LN28@AirGroundM
$LN13@AirGroundM:

; 118  : 
; 119  :       case CCRP:
; 120  :          SetDesignatedTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDesignatedTarget@FireControlComputer@@AAEXXZ ; FireControlComputer::SetDesignatedTarget

; 121  : 
; 122  :          // Where will it hit?
; 123  :  					if(masterMode==AirGroundRocket)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+144], 13			; 0000000dH
	jne	SHORT $LN12@AirGroundM

; 124  : 						CalculateRocketImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateRocketImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateRocketImpactPoint

; 125  : 					else

	jmp	SHORT $LN11@AirGroundM
$LN12@AirGroundM:

; 126  : 						CalculateImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateImpactPoint
$LN11@AirGroundM:

; 127  : 					FindRelativeImpactPoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindRelativeImpactPoint@FireControlComputer@@AAEXXZ ; FireControlComputer::FindRelativeImpactPoint

; 128  : 					CalculateReleaseRange();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateReleaseRange@FireControlComputer@@AAEXXZ ; FireControlComputer::CalculateReleaseRange

; 129  : 					FindTargetError(); // Cobra - Get some A/G stats

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindTargetError@FireControlComputer@@AAEXXZ ; FireControlComputer::FindTargetError

; 130  :       break;

	jmp	$LN28@AirGroundM
$LN10@AirGroundM:

; 131  : 
; 132  :       case DTOSS:
; 133  :          // Put the TD box in the right place
; 134  :          DTOSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DTOSMode@FireControlComputer@@AAEXXZ	; FireControlComputer::DTOSMode

; 135  :       break;

	jmp	$LN28@AirGroundM
$LN9@AirGroundM:

; 136  : 
; 137  : 	  case LADD:
; 138  : 		  SetDesignatedTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDesignatedTarget@FireControlComputer@@AAEXXZ ; FireControlComputer::SetDesignatedTarget

; 139  : 		  LADDMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LADDMode@FireControlComputer@@QAEXXZ	; FireControlComputer::LADDMode

; 140  :       break;

	jmp	$LN28@AirGroundM
$LN8@AirGroundM:

; 141  : 	  case MAN:
; 142  : 		  if(releaseConsent && !Released)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+181]
	test	ecx, ecx
	je	$LN7@AirGroundM
	movzx	edx, BYTE PTR ?Released@@3_NA		; Released
	test	edx, edx
	jne	$LN7@AirGroundM

; 143  : 		  {
; 144  : 				// Cobra - Check for JDAM/JSOW ready to be dropped
; 145  : 				BombClass *theBomb;
; 146  : 				theBomb = GetTheBomb();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ; FireControlComputer::GetTheBomb
	mov	DWORD PTR _theBomb$1[ebp], eax

; 147  : 				if (theBomb && ((AircraftClass*)platform->IsPlayer() && ((AircraftClass *)platform)->AutopilotType() != AircraftClass::CombatAP ) &&
; 148  : 					((theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_GPS) ||
; 149  : 					(theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)) &&
; 150  : 					(!Sms->JDAMPowered))

	cmp	DWORD PTR _theBomb$1[ebp], 0
	je	$LN6@AirGroundM
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN6@AirGroundM
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+140]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	je	SHORT $LN6@AirGroundM
	mov	ecx, DWORD PTR _theBomb$1[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	edx, 1
	imul	edx, 3
	movzx	eax, BYTE PTR [eax+edx+8]
	cmp	eax, 4
	je	SHORT $LN5@AirGroundM
	mov	ecx, DWORD PTR _theBomb$1[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN6@AirGroundM
$LN5@AirGroundM:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	movzx	edx, BYTE PTR [ecx+28]
	test	edx, edx
	jne	SHORT $LN6@AirGroundM

; 151  : 				{
; 152  : 					releaseConsent = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+181], 0

; 153  : 					Released = TRUE;

	mov	BYTE PTR ?Released@@3_NA, 1		; Released

; 154  : 					bombPickle = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+191], 0

; 155  : 				}
; 156  : 				else

	jmp	SHORT $LN4@AirGroundM
$LN6@AirGroundM:

; 157  : 				{
; 158  : 					Released = TRUE;

	mov	BYTE PTR ?Released@@3_NA, 1		; Released

; 159  : 					bombPickle = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+191], 1
$LN4@AirGroundM:

; 160  : 				}

	jmp	SHORT $LN2@AirGroundM
$LN7@AirGroundM:

; 161  : 		  }
; 162  : 		  else if(!releaseConsent && Released)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+181]
	test	ecx, ecx
	jne	SHORT $LN2@AirGroundM
	movzx	edx, BYTE PTR ?Released@@3_NA		; Released
	test	edx, edx
	je	SHORT $LN2@AirGroundM

; 163  : 			  Released = FALSE;

	mov	BYTE PTR ?Released@@3_NA, 0		; Released
$LN2@AirGroundM:
$LN28@AirGroundM:

; 164  : 	  break;
; 165  :    }
; 166  : 
; 167  :    if (!releaseConsent)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+181]
	test	ecx, ecx
	jne	SHORT $LN1@AirGroundM

; 168  :    {
; 169  :       postDrop = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+183], 0
$LN1@AirGroundM:

; 170  :    }
; 171  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN35@AirGroundM:
	DD	$LN27@AirGroundM
	DD	$LN13@AirGroundM
	DD	$LN9@AirGroundM
	DD	$LN10@AirGroundM
	DD	$LN18@AirGroundM
	DD	$LN14@AirGroundM
	DD	$LN8@AirGroundM
	DD	$LN28@AirGroundM
$LN34@AirGroundM:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	6
?AirGroundMode@FireControlComputer@@AAEXXZ ENDP		; FireControlComputer::AirGroundMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\fcc\grndfcc.cpp
_TEXT	SEGMENT
tv168 = -8						; size = 4
_this$ = -4						; size = 4
?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ PROC ; FireControlComputer::GetTheBomb
; _this$ = ecx

; 46   : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 
; 48   : 	if ( Sms && 
; 49   : 		 Sms->CurHardpoint() >= 0 && 
; 50   : 		 Sms->hardPoint[Sms->CurHardpoint()] && 
; 51   : 		 Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer && 
; 52   : 		 Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer->IsBomb())			//be EXTRA careful

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+408], 0
	je	$LN2@GetTheBomb
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	test	eax, eax
	jl	$LN2@GetTheBomb
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+408]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	$LN2@GetTheBomb
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+408]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetTheBomb
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+408]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::operator->
	mov	DWORD PTR tv168[ebp], eax
	mov	eax, DWORD PTR tv168[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv168[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	SHORT $LN2@GetTheBomb

; 53   : 		return (BombClass *)Sms->hardPoint[Sms->CurHardpoint()]->weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+408]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	ecx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	jmp	SHORT $LN3@GetTheBomb

; 54   : 	else

	jmp	SHORT $LN3@GetTheBomb
$LN2@GetTheBomb:

; 55   : 		return NULL;

	xor	eax, eax
$LN3@GetTheBomb:

; 56   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTheBomb@FireControlComputer@@QAEPAVBombClass@@XZ ENDP ; FireControlComputer::GetTheBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::operator->, COMDAT
; _this$ = ecx

; 50   : 	E *operator->() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 52   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??C?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?abs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?abs@@YAMM@Z PROC					; abs, COMDAT

; 499  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?abs@@YAMM@Z ENDP					; abs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
