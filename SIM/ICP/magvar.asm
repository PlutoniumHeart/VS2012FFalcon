; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\magvar.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_igrf2000 DB	'IGRF2000', 00H
	ORG $+3
	DB	'igrf000.html', 00H
	ORG $+19
	DQ	0409f400000000000r		; 2000
	DQ	0409f400000000000r		; 2000
	DQ	0409f540000000000r		; 2005
	DQ	0c056800000000000r		; -90
	DQ	04056800000000000r		; 90
	DQ	00000000000000000r		; 0
	DQ	04076800000000000r		; 360
	DD	0aH
	DQ	00000000000000000r		; 0
	ORG $+80
	DQ	0c0dcebc000000000r		; -29615
	DQ	0c09b000000000000r		; -1728
	ORG $+72
	DQ	0c0a1b60000000000r		; -2267
	DQ	040a8000000000000r		; 3072
	DQ	0409a200000000000r		; 1672
	ORG $+64
	DQ	04094f40000000000r		; 1341
	DQ	0c0a1e40000000000r		; -2290
	DQ	04093940000000000r		; 1253
	DQ	04086580000000000r		; 715
	ORG $+56
	DQ	0408d380000000000r		; 935
	DQ	04088980000000000r		; 787
	DQ	0406f600000000000r		; 251
	DQ	0c079500000000000r		; -405
	DQ	0405b800000000000r		; 110
	ORG $+48
	DQ	0c06b200000000000r		; -217
	DQ	04075f00000000000r		; 351
	DQ	0406bc00000000000r		; 222
	DQ	0c060600000000000r		; -131
	DQ	0c065200000000000r		; -169
	DQ	0c028000000000000r		; -12
	ORG $+40
	DQ	04052000000000000r		; 72
	DQ	04051000000000000r		; 68
	DQ	04052800000000000r		; 74
	DQ	0c064200000000000r		; -161
	DQ	0c014000000000000r		; -5
	DQ	04031000000000000r		; 17
	DQ	0c056c00000000000r		; -91
	ORG $+32
	DQ	04053c00000000000r		; 79
	DQ	0c052800000000000r		; -74
	DQ	00000000000000000r		; 0
	DQ	04040800000000000r		; 33
	DQ	04022000000000000r		; 9
	DQ	0401c000000000000r		; 7
	DQ	04020000000000000r		; 8
	DQ	0c000000000000000r		; -2
	ORG $+24
	DQ	04039000000000000r		; 25
	DQ	04018000000000000r		; 6
	DQ	0c022000000000000r		; -9
	DQ	0c020000000000000r		; -8
	DQ	0c031000000000000r		; -17
	DQ	04022000000000000r		; 9
	DQ	0401c000000000000r		; 7
	DQ	0c020000000000000r		; -8
	DQ	0c01c000000000000r		; -7
	ORG $+16
	DQ	04014000000000000r		; 5
	DQ	04022000000000000r		; 9
	DQ	04008000000000000r		; 3
	DQ	0c020000000000000r		; -8
	DQ	04018000000000000r		; 6
	DQ	0c022000000000000r		; -9
	DQ	0c000000000000000r		; -2
	DQ	04022000000000000r		; 9
	DQ	0c010000000000000r		; -4
	DQ	0c020000000000000r		; -8
	ORG $+8
	DQ	0c000000000000000r		; -2
	DQ	0c018000000000000r		; -6
	DQ	04000000000000000r		; 2
	DQ	0c008000000000000r		; -3
	DQ	00000000000000000r		; 0
	DQ	04010000000000000r		; 4
	DQ	03ff0000000000000r		; 1
	DQ	04000000000000000r		; 2
	DQ	04010000000000000r		; 4
	DQ	00000000000000000r		; 0
	DQ	0bff0000000000000r		; -1
	DQ	00000000000000000r		; 0
	ORG $+80
	DQ	00000000000000000r		; 0
	DQ	040b4420000000000r		; 5186
	ORG $+72
	DQ	00000000000000000r		; 0
	DQ	0c0a35c0000000000r		; -2478
	DQ	0c07ca00000000000r		; -458
	ORG $+64
	DQ	00000000000000000r		; 0
	DQ	0c06c600000000000r		; -227
	DQ	04072800000000000r		; 296
	DQ	0c07ec00000000000r		; -492
	ORG $+56
	DQ	00000000000000000r		; 0
	DQ	04071000000000000r		; 272
	DQ	0c06d000000000000r		; -232
	DQ	0405dc00000000000r		; 119
	DQ	0c073000000000000r		; -304
	ORG $+48
	DQ	00000000000000000r		; 0
	DQ	04046000000000000r		; 44
	DQ	04065800000000000r		; 172
	DQ	0c060c00000000000r		; -134
	DQ	0c044000000000000r		; -40
	DQ	0405ac00000000000r		; 107
	ORG $+40
	DQ	00000000000000000r		; 0
	DQ	0c031000000000000r		; -17
	DQ	04050000000000000r		; 64
	DQ	04050400000000000r		; 65
	DQ	0c04e800000000000r		; -61
	DQ	03ff0000000000000r		; 1
	DQ	04046000000000000r		; 44
	ORG $+32
	DQ	00000000000000000r		; 0
	DQ	0c050400000000000r		; -65
	DQ	0c038000000000000r		; -24
	DQ	04018000000000000r		; 6
	DQ	04038000000000000r		; 24
	DQ	0402e000000000000r		; 15
	DQ	0c039000000000000r		; -25
	DQ	0c018000000000000r		; -6
	ORG $+24
	DQ	00000000000000000r		; 0
	DQ	04028000000000000r		; 12
	DQ	0c036000000000000r		; -22
	DQ	04020000000000000r		; 8
	DQ	0c035000000000000r		; -21
	DQ	0402e000000000000r		; 15
	DQ	04022000000000000r		; 9
	DQ	0c030000000000000r		; -16
	DQ	0c008000000000000r		; -3
	ORG $+16
	DQ	00000000000000000r		; 0
	DQ	0c034000000000000r		; -20
	DQ	0402a000000000000r		; 13
	DQ	04028000000000000r		; 12
	DQ	0c018000000000000r		; -6
	DQ	0c020000000000000r		; -8
	DQ	04022000000000000r		; 9
	DQ	04010000000000000r		; 4
	DQ	0c020000000000000r		; -8
	DQ	04014000000000000r		; 5
	ORG $+8
	DQ	00000000000000000r		; 0
	DQ	03ff0000000000000r		; 1
	DQ	00000000000000000r		; 0
	DQ	04010000000000000r		; 4
	DQ	04014000000000000r		; 5
	DQ	0c018000000000000r		; -6
	DQ	0bff0000000000000r		; -1
	DQ	0c008000000000000r		; -3
	DQ	00000000000000000r		; 0
	DQ	0c000000000000000r		; -2
	DQ	0c020000000000000r		; -8
	DQ	00000000000000000r		; 0
	ORG $+80
	DQ	0402d333333333333r		; 14.6
	DQ	04025666666666666r		; 10.7
	ORG $+72
	DQ	0c028cccccccccccdr		; -12.4
	DQ	03ff199999999999ar		; 1.1
	DQ	0bff199999999999ar		; -1.1
	ORG $+64
	DQ	03fe6666666666666r		; 0.7
	DQ	0c01599999999999ar		; -5.4
	DQ	03feccccccccccccdr		; 0.9
	DQ	0c01ecccccccccccdr		; -7.7
	ORG $+56
	DQ	0bff4cccccccccccdr		; -1.3
	DQ	03ff999999999999ar		; 1.6
	DQ	0c01d333333333333r		; -7.3
	DQ	04007333333333333r		; 2.9
	DQ	0c00999999999999ar		; -3.2
	ORG $+48
	DQ	00000000000000000r		; 0
	DQ	0bfe6666666666666r		; -0.7
	DQ	0c000cccccccccccdr		; -2.1
	DQ	0c006666666666666r		; -2.8
	DQ	0bfe999999999999ar		; -0.8
	DQ	04004000000000000r		; 2.5
	ORG $+40
	DQ	03ff0000000000000r		; 1
	DQ	0bfd999999999999ar		; -0.4
	DQ	03feccccccccccccdr		; 0.9
	DQ	04000000000000000r		; 2
	DQ	0bfe3333333333333r		; -0.6
	DQ	0bfd3333333333333r		; -0.3
	DQ	03ff3333333333333r		; 1.2
	ORG $+32
	DQ	0bfd999999999999ar		; -0.4
	DQ	0bfd999999999999ar		; -0.4
	DQ	0bfd3333333333333r		; -0.3
	DQ	03ff199999999999ar		; 1.1
	DQ	03ff199999999999ar		; 1.1
	DQ	0bfc999999999999ar		; -0.2
	DQ	03fe3333333333333r		; 0.6
	DQ	0bfeccccccccccccdr		; -0.9
	ORG $+24
	DQ	0bfd3333333333333r		; -0.3
	DQ	03fc999999999999ar		; 0.2
	DQ	0bfd3333333333333r		; -0.3
	DQ	03fd999999999999ar		; 0.4
	DQ	0bff0000000000000r		; -1
	DQ	03fd3333333333333r		; 0.3
	DQ	0bfe0000000000000r		; -0.5
	DQ	0bfe6666666666666r		; -0.7
	DQ	0bfd999999999999ar		; -0.4
	ORG $+16
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	ORG $+8
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	ORG $+80
	DQ	00000000000000000r		; 0
	DQ	0c036800000000000r		; -22.5
	ORG $+72
	DQ	00000000000000000r		; 0
	DQ	0c03499999999999ar		; -20.6
	DQ	0c023333333333333r		; -9.6
	ORG $+64
	DQ	00000000000000000r		; 0
	DQ	04018000000000000r		; 6
	DQ	0bfb999999999999ar		; -0.1
	DQ	0c02c666666666666r		; -14.2
	ORG $+56
	DQ	00000000000000000r		; 0
	DQ	04000cccccccccccdr		; 2.1
	DQ	03ff4cccccccccccdr		; 1.3
	DQ	04014000000000000r		; 5
	DQ	03fd3333333333333r		; 0.3
	ORG $+48
	DQ	00000000000000000r		; 0
	DQ	0bfb999999999999ar		; -0.1
	DQ	03fe3333333333333r		; 0.6
	DQ	03ffb333333333333r		; 1.7
	DQ	03ffe666666666666r		; 1.9
	DQ	03fb999999999999ar		; 0.1
	ORG $+40
	DQ	00000000000000000r		; 0
	DQ	0bfc999999999999ar		; -0.2
	DQ	0bff6666666666666r		; -1.4
	DQ	00000000000000000r		; 0
	DQ	0bfe999999999999ar		; -0.8
	DQ	00000000000000000r		; 0
	DQ	03feccccccccccccdr		; 0.9
	ORG $+32
	DQ	00000000000000000r		; 0
	DQ	03ff199999999999ar		; 1.1
	DQ	00000000000000000r		; 0
	DQ	03fd3333333333333r		; 0.3
	DQ	0bfb999999999999ar		; -0.1
	DQ	0bfe3333333333333r		; -0.6
	DQ	0bfe6666666666666r		; -0.7
	DQ	03fc999999999999ar		; 0.2
	ORG $+24
	DQ	00000000000000000r		; 0
	DQ	03fb999999999999ar		; 0.1
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	03fd3333333333333r		; 0.3
	DQ	03fe3333333333333r		; 0.6
	DQ	0bfd999999999999ar		; -0.4
	DQ	03fd3333333333333r		; 0.3
	DQ	03fe6666666666666r		; 0.7
	ORG $+16
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	ORG $+8
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
	DQ	00000000000000000r		; 0
?A2@?1??compute@@9@9 DQ 0418365eee7e28240r	; 4.06809e+007 ; `compute'::`2'::A2
?B2@?1??compute@@9@9 DQ 0418344b25fbf487fr	; 4.04087e+007 ; `compute'::`2'::B2
_DATA	ENDS
PUBLIC	_getVar
PUBLIC	_compute
PUBLIC	_computedef
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@404ca5dc1a63c1f8
PUBLIC	__real@4056800000000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@40b8e33333333333
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_atan:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_pow:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_CT	DQ	01H DUP (?)
_ST	DQ	01H DUP (?)
_CP	DQ	0cH DUP (?)
_SP	DQ	0cH DUP (?)
_G	DQ	079H DUP (?)
_H	DQ	079H DUP (?)
_P	DQ	090H DUP (?)
_A_R	DQ	0dH DUP (?)
_BSS	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@40b8e33333333333
CONST	SEGMENT
__real@40b8e33333333333 DQ 040b8e33333333333r	; 6371.2
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@4056800000000000
CONST	SEGMENT
__real@4056800000000000 DQ 04056800000000000r	; 90
CONST	ENDS
;	COMDAT __real@404ca5dc1a63c1f8
CONST	SEGMENT
__real@404ca5dc1a63c1f8 DQ 0404ca5dc1a63c1f8r	; 57.2958
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
_f$ = 8							; size = 4
_lat$ = 12						; size = 8
_lon$ = 20						; size = 8
_elev$ = 28						; size = 8
_year$ = 36						; size = 8
_computedef PROC

; 127  :   double lat,double lon,double elev,double year) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 128  :     compute(f, lat, lon, elev, year, igrf2000);

	sub	esp, 3976				; 00000f88H
	mov	ecx, 994				; 000003e2H
	mov	esi, OFFSET _igrf2000
	mov	edi, esp
	rep movsd
	sub	esp, 8
	movsd	xmm0, QWORD PTR _year$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _elev$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lon$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lat$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_compute
	add	esp, 4012				; 00000facH

; 129  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	0
_computedef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv89 = -24						; size = 8
tv86 = -16						; size = 8
tv92 = -8						; size = 8
_n$ = 8							; size = 4
_m$ = 12						; size = 4
_D6	PROC

; 326  : static double D6(int n,int m) { return((n+1)*sqrt(n*n-m*m)/(double)(2*n+1)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	cvtsi2sd xmm0, eax
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	imul	edx, DWORD PTR _m$[ebp]
	sub	ecx, edx
	cvtsi2sd xmm1, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv92[ebp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv86[ebp]
	movsd	xmm0, QWORD PTR tv92[ebp]
	mulsd	xmm0, QWORD PTR tv86[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	cvtsi2sd xmm1, ecx
	divsd	xmm0, xmm1
	movsd	QWORD PTR tv89[ebp], xmm0
	fld	QWORD PTR tv89[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_D6	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv90 = -24						; size = 8
tv87 = -16						; size = 8
tv93 = -8						; size = 8
_n$ = 8							; size = 4
_m$ = 12						; size = 4
_D5	PROC

; 325  : static double D5(int n,int m) { return(n*sqrt((n+1)*(n+1)-m*m)/(double)(2*n+1)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	cvtsi2sd xmm0, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	imul	eax, ecx
	mov	edx, DWORD PTR _m$[ebp]
	imul	edx, DWORD PTR _m$[ebp]
	sub	eax, edx
	cvtsi2sd xmm1, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv93[ebp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv87[ebp]
	movsd	xmm0, QWORD PTR tv93[ebp]
	mulsd	xmm0, QWORD PTR tv87[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	cvtsi2sd xmm1, ecx
	divsd	xmm0, xmm1
	movsd	QWORD PTR tv90[ebp], xmm0
	fld	QWORD PTR tv90[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_D5	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv132 = -24						; size = 8
tv91 = -16						; size = 8
_d$ = -8						; size = 8
_n$ = 8							; size = 4
_m$ = 12						; size = 4
_dPdt	PROC

; 316  : static double dPdt(int n,int m) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 317  :   double d;
; 318  :   d = D5(n,m) * P[n+1][m];

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_D5
	add	esp, 8
	fstp	QWORD PTR tv91[ebp]
	movsd	xmm0, QWORD PTR tv91[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _P[edx+eax*8]
	movsd	QWORD PTR _d$[ebp], xmm0

; 319  :   if(n>m) d -= D6(n,m) * P[n-1][m];     /* D6(n,n)=0 */

	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _m$[ebp]
	jle	SHORT $LN1@dPdt
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	_D6
	add	esp, 8
	fstp	QWORD PTR tv132[ebp]
	movsd	xmm0, QWORD PTR tv132[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _P[ecx+edx*8]
	movsd	xmm1, QWORD PTR _d$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _d$[ebp], xmm1
$LN1@dPdt:

; 320  :   d = d/ST;

	movsd	xmm0, QWORD PTR _d$[ebp]
	divsd	xmm0, QWORD PTR _ST
	movsd	QWORD PTR _d$[ebp], xmm0

; 321  :   return(d);

	fld	QWORD PTR _d$[ebp]

; 322  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_dPdt	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv144 = -32						; size = 8
tv148 = -24						; size = 8
_b$ = -16						; size = 8
_n$ = -8						; size = 4
_m$ = -4						; size = 4
_degree$ = 8						; size = 4
_Bt	PROC

; 303  : static double Bt(int degree) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 304  :   int n,m;
; 305  :   double b=0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _b$[ebp], xmm0

; 306  :   for(n=1; n<=degree; n++) {

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN6@Bt
$LN5@Bt:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN6@Bt:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _degree$[ebp]
	jg	$LN4@Bt

; 307  :     for(m=0; m<=n; m++) {

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN3@Bt
$LN2@Bt:
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 1
	mov	DWORD PTR _m$[ebp], edx
$LN3@Bt:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jg	$LN1@Bt

; 308  :       b -= (G[n][m]*CP[m] + H[n][m]*SP[m]) * A_R[n+2] * dPdt(n,m);

	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movsd	xmm0, QWORD PTR _G[ecx+edx*8]
	mulsd	xmm0, QWORD PTR _CP[eax*8]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movsd	xmm1, QWORD PTR _H[ecx+edx*8]
	mulsd	xmm1, QWORD PTR _SP[eax*8]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _n$[ebp]
	mulsd	xmm0, QWORD PTR _A_R[ecx*8+16]
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	movsd	QWORD PTR tv148[ebp], xmm0
	call	_dPdt
	add	esp, 8
	fstp	QWORD PTR tv144[ebp]
	movsd	xmm0, QWORD PTR tv148[ebp]
	mulsd	xmm0, QWORD PTR tv144[ebp]
	movsd	xmm1, QWORD PTR _b$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _b$[ebp], xmm1

; 309  :     }

	jmp	$LN2@Bt
$LN1@Bt:

; 310  :   }

	jmp	$LN5@Bt
$LN4@Bt:

; 311  :   return(b);

	fld	QWORD PTR _b$[ebp]

; 312  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Bt	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
_b$ = -16						; size = 8
_m$ = -8						; size = 4
_n$ = -4						; size = 4
_degree$ = 8						; size = 4
_Br	PROC

; 291  : static double Br(int degree) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 292  :   int n,m;
; 293  :   double b=0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _b$[ebp], xmm0

; 294  :   for(n=1;n<=degree;n++) {

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN6@Br
$LN5@Br:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN6@Br:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _degree$[ebp]
	jg	$LN4@Br

; 295  :     for(m=0;m<=n;m++) {

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN3@Br
$LN2@Br:
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 1
	mov	DWORD PTR _m$[ebp], edx
$LN3@Br:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jg	SHORT $LN1@Br

; 296  :       b += (n+1) * (G[n][m]*CP[m] + H[n][m]*SP[m]) * A_R[n+2] * P[n][m];

	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsd	xmm1, QWORD PTR _G[edx+eax*8]
	mulsd	xmm1, QWORD PTR _CP[ecx*8]
	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movsd	xmm2, QWORD PTR _H[edx+eax*8]
	mulsd	xmm2, QWORD PTR _SP[ecx*8]
	addsd	xmm1, xmm2
	mulsd	xmm0, xmm1
	mov	edx, DWORD PTR _n$[ebp]
	mulsd	xmm0, QWORD PTR _A_R[edx*8+16]
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _P[eax+ecx*8]
	addsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR _b$[ebp], xmm0

; 297  :     }

	jmp	$LN2@Br
$LN1@Br:

; 298  :   }

	jmp	$LN5@Br
$LN4@Br:

; 299  :   return(b);

	fld	QWORD PTR _b$[ebp]

; 300  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Br	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv149 = -24						; size = 8
_b$ = -16						; size = 8
_n$ = -8						; size = 4
_m$ = -4						; size = 4
_degree$ = 8						; size = 4
_Bp	PROC

; 279  : static double Bp(int degree) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 280  :   int n,m;
; 281  :   double b=0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _b$[ebp], xmm0

; 282  :   for(n=1;n<=degree;n++) {

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN6@Bp
$LN5@Bp:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN6@Bp:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _degree$[ebp]
	jg	$LN4@Bp

; 283  :     for(m=0;m<=n;m++) {

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN3@Bp
$LN2@Bp:
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 1
	mov	DWORD PTR _m$[ebp], edx
$LN3@Bp:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jg	SHORT $LN1@Bp

; 284  :       b += m * (G[n][m]*SP[m] - H[n][m]*CP[m]) * A_R[n+2] * P[n][m];

	cvtsi2sd xmm0, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movsd	xmm1, QWORD PTR _G[ecx+edx*8]
	mulsd	xmm1, QWORD PTR _SP[eax*8]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 88					; 00000058H
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movsd	xmm2, QWORD PTR _H[ecx+edx*8]
	mulsd	xmm2, QWORD PTR _CP[eax*8]
	subsd	xmm1, xmm2
	mulsd	xmm0, xmm1
	mov	ecx, DWORD PTR _n$[ebp]
	mulsd	xmm0, QWORD PTR _A_R[ecx*8+16]
	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _P[edx+eax*8]
	addsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR _b$[ebp], xmm0

; 285  :     }

	jmp	$LN2@Bp
$LN1@Bp:

; 286  :   }

	jmp	$LN5@Bp
$LN4@Bp:

; 287  :   return(b/ST);

	movsd	xmm0, QWORD PTR _b$[ebp]
	divsd	xmm0, QWORD PTR _ST
	movsd	QWORD PTR tv149[ebp], xmm0
	fld	QWORD PTR tv149[ebp]

; 288  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_Bp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
_n$ = 8							; size = 4
_m$ = 12						; size = 4
_C3	PROC

; 258  : static double C3(int n,int m) {

	push	ebp
	mov	ebp, esp

; 259  :   return(sqrt((double)((n-1)*(n-1)-m*m)/((double)(n*n-m*m))));

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	imul	eax, ecx
	mov	edx, DWORD PTR _m$[ebp]
	imul	edx, DWORD PTR _m$[ebp]
	sub	eax, edx
	cvtsi2sd xmm0, eax
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	imul	ecx, DWORD PTR _m$[ebp]
	sub	eax, ecx
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8

; 260  : }

	pop	ebp
	ret	0
_C3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv85 = -24						; size = 8
tv83 = -16						; size = 8
tv88 = -8						; size = 8
_n$ = 8							; size = 4
_m$ = 12						; size = 4
_C2	PROC

; 254  : static double C2(int n,int m) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 255  :   return((double)(2*n-1)/sqrt((double)(n*n-m*m)));

	mov	eax, DWORD PTR _n$[ebp]
	lea	ecx, DWORD PTR [eax+eax-1]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	imul	eax, DWORD PTR _m$[ebp]
	sub	edx, eax
	cvtsi2sd xmm1, edx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv88[ebp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv83[ebp]
	movsd	xmm0, QWORD PTR tv88[ebp]
	divsd	xmm0, QWORD PTR tv83[ebp]
	movsd	QWORD PTR tv85[ebp], xmm0
	fld	QWORD PTR tv85[ebp]

; 256  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_C2	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv73 = -8						; size = 4
tv66 = -4						; size = 4
_n$ = 8							; size = 4
_C1	PROC

; 250  : static double C1(int n) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 251  :   return(sqrt((double)((n?2:1)*(2*n-1))/(double)((n-1?2:1)*2*n)));

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN3@C1
	mov	DWORD PTR tv66[ebp], 2
	jmp	SHORT $LN4@C1
$LN3@C1:
	mov	DWORD PTR tv66[ebp], 1
$LN4@C1:
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	je	SHORT $LN5@C1
	mov	DWORD PTR tv73[ebp], 2
	jmp	SHORT $LN6@C1
$LN5@C1:
	mov	DWORD PTR tv73[ebp], 1
$LN6@C1:
	mov	ecx, DWORD PTR _n$[ebp]
	lea	edx, DWORD PTR [ecx+ecx-1]
	imul	edx, DWORD PTR tv66[ebp]
	cvtsi2sd xmm0, edx
	mov	eax, DWORD PTR tv73[ebp]
	shl	eax, 1
	imul	eax, DWORD PTR _n$[ebp]
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8

; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_C1	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv193 = -32						; size = 8
tv181 = -24						; size = 8
tv167 = -16						; size = 8
_m$ = -8						; size = 4
_n$ = -4						; size = 4
_degree$ = 8						; size = 4
_schmidt PROC

; 232  : static void schmidt(int degree) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 233  :   int n,m;
; 234  :   P[0][0] = 1.0;

	mov	eax, 96					; 00000060H
	imul	eax, 0
	mov	ecx, 8
	imul	ecx, 0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _P[eax+ecx], xmm0

; 235  :   /*  Pnn (Langel, eqn 26, p 256) */
; 236  :   for(n=1; n<=degree+1; n++)

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN10@schmidt
$LN9@schmidt:
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 1
	mov	DWORD PTR _n$[ebp], edx
$LN10@schmidt:
	mov	eax, DWORD PTR _degree$[ebp]
	add	eax, 1
	cmp	DWORD PTR _n$[ebp], eax
	jg	SHORT $LN8@schmidt

; 237  :     P[n][n] = C1(n) * ST * P[n-1][n-1];

	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	_C1
	add	esp, 4
	fstp	QWORD PTR tv167[ebp]
	movsd	xmm0, QWORD PTR tv167[ebp]
	mulsd	xmm0, QWORD PTR _ST
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, 1
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _n$[ebp]
	mulsd	xmm0, QWORD PTR _P[edx+eax*8-8]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _n$[ebp]
	movsd	QWORD PTR _P[ecx+edx*8], xmm0
	jmp	SHORT $LN9@schmidt
$LN8@schmidt:

; 238  :   /*  Pnm, m<n (Langel, eqn 27, p 256) */
; 239  :   for(n=1; n<=degree+1; n++) {

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN7@schmidt
$LN6@schmidt:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN7@schmidt:
	mov	ecx, DWORD PTR _degree$[ebp]
	add	ecx, 1
	cmp	DWORD PTR _n$[ebp], ecx
	jg	$LN5@schmidt

; 240  :     for(m=0; m<n; m++) {

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN4@schmidt
$LN3@schmidt:
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 1
	mov	DWORD PTR _m$[ebp], edx
$LN4@schmidt:
	mov	eax, DWORD PTR _m$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	$LN2@schmidt

; 241  :       P[n][m] = C2(n,m) * CT * P[n-1][m];

	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	call	_C2
	add	esp, 8
	fstp	QWORD PTR tv181[ebp]
	movsd	xmm0, QWORD PTR tv181[ebp]
	mulsd	xmm0, QWORD PTR _CT
	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _P[eax+ecx*8]
	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _m$[ebp]
	movsd	QWORD PTR _P[edx+eax*8], xmm0

; 242  :       if(m<n-1) P[n][m] -= C3(n,m) * P[n-2][m];         /* C3(n,n-1)=0 */

	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _m$[ebp], ecx
	jge	SHORT $LN1@schmidt
	mov	esi, DWORD PTR _n$[ebp]
	imul	esi, 96					; 00000060H
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	_C3
	add	esp, 8
	fstp	QWORD PTR tv193[ebp]
	movsd	xmm0, QWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 2
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _P[ecx+edx*8]
	mov	eax, DWORD PTR _m$[ebp]
	movsd	xmm1, QWORD PTR _P[esi+eax*8]
	subsd	xmm1, xmm0
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _m$[ebp]
	movsd	QWORD PTR _P[ecx+edx*8], xmm1
$LN1@schmidt:

; 243  :     }

	jmp	$LN3@schmidt
$LN2@schmidt:

; 244  :   }

	jmp	$LN6@schmidt
$LN5@schmidt:

; 245  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_schmidt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
_dy$ = -32						; size = 8
_phi$ = -24						; size = 8
_theta$ = -16						; size = 8
_n$ = -8						; size = 4
_m$ = -4						; size = 4
_lat$ = 8						; size = 8
_lon$ = 16						; size = 8
_R$ = 24						; size = 8
_year$ = 32						; size = 8
_x$ = 40						; size = 3976
_setup	PROC

; 196  : static void setup(double lat,double lon,double R,double year,struct model x) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 197  :   double theta=(90.0-lat)*M_PI/180.0;   /* colatitude/radians */

	movsd	xmm0, QWORD PTR __real@4056800000000000
	subsd	xmm0, QWORD PTR _lat$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, QWORD PTR __real@4066800000000000
	movsd	QWORD PTR _theta$[ebp], xmm0

; 198  :   double phi=lon*M_PI/180.0;            /* longitude/radians */

	movsd	xmm0, QWORD PTR _lon$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, QWORD PTR __real@4066800000000000
	movsd	QWORD PTR _phi$[ebp], xmm0

; 199  :   int n,m;
; 200  :   double dy;
; 201  : 
; 202  :   CT = cos(theta);                      /* cos,sin(theta) */

	sub	esp, 8
	movsd	xmm0, QWORD PTR _theta$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR _CT

; 203  :   ST = sin(theta);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _theta$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR _ST

; 204  :   for(m=0; m<=x.degree+1; m++) {

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN12@setup
$LN11@setup:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN12@setup:
	mov	ecx, DWORD PTR _x$[ebp+100]
	add	ecx, 1
	cmp	DWORD PTR _m$[ebp], ecx
	jg	SHORT $LN10@setup

; 205  :     CP[m] = cos((double)m*phi);         /* cos,sin(m*phi) */

	cvtsi2sd xmm0, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _phi$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	mov	edx, DWORD PTR _m$[ebp]
	fstp	QWORD PTR _CP[edx*8]

; 206  :     SP[m] = sin((double)m*phi);

	cvtsi2sd xmm0, DWORD PTR _m$[ebp]
	mulsd	xmm0, QWORD PTR _phi$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	mov	eax, DWORD PTR _m$[ebp]
	fstp	QWORD PTR _SP[eax*8]

; 207  :   }

	jmp	SHORT $LN11@setup
$LN10@setup:

; 208  :   dy = year - x.epoch;          /* update g,h for secular variation */

	movsd	xmm0, QWORD PTR _year$[ebp]
	subsd	xmm0, QWORD PTR _x$[ebp+44]
	movsd	QWORD PTR _dy$[ebp], xmm0

; 209  :   for(n=1; n<=x.degree; n++) {

	mov	DWORD PTR _n$[ebp], 1
	jmp	SHORT $LN9@setup
$LN8@setup:
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$[ebp], ecx
$LN9@setup:
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _x$[ebp+100]
	jg	$LN7@setup

; 210  :     for(m=0; m<=n; m++) {

	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN6@setup
$LN5@setup:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN6@setup:
	mov	ecx, DWORD PTR _m$[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	jg	$LN4@setup

; 211  :       G[n][m] = x.g[n][m] + dy*x.gs[n][m];

	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 88					; 00000058H
	lea	eax, DWORD PTR _x$[ebp+edx+104]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 88					; 00000058H
	lea	edx, DWORD PTR _x$[ebp+ecx+2040]
	mov	ecx, DWORD PTR _m$[ebp]
	movsd	xmm0, QWORD PTR _dy$[ebp]
	mulsd	xmm0, QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR _m$[ebp]
	addsd	xmm0, QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	movsd	QWORD PTR _G[eax+ecx*8], xmm0

; 212  :       H[n][m] = x.h[n][m] + dy*x.hs[n][m];

	mov	edx, DWORD PTR _n$[ebp]
	imul	edx, 88					; 00000058H
	lea	eax, DWORD PTR _x$[ebp+edx+1072]
	mov	ecx, DWORD PTR _n$[ebp]
	imul	ecx, 88					; 00000058H
	lea	edx, DWORD PTR _x$[ebp+ecx+3008]
	mov	ecx, DWORD PTR _m$[ebp]
	movsd	xmm0, QWORD PTR _dy$[ebp]
	mulsd	xmm0, QWORD PTR [edx+ecx*8]
	mov	edx, DWORD PTR _m$[ebp]
	addsd	xmm0, QWORD PTR [eax+edx*8]
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _m$[ebp]
	movsd	QWORD PTR _H[eax+ecx*8], xmm0

; 213  :     }

	jmp	$LN5@setup
$LN4@setup:

; 214  :   }

	jmp	$LN8@setup
$LN7@setup:

; 215  :   A_R[1] = R0/R;                        /* (A/R)^N */

	movsd	xmm0, QWORD PTR __real@40b8e33333333333
	divsd	xmm0, QWORD PTR _R$[ebp]
	mov	edx, 8
	shl	edx, 0
	movsd	QWORD PTR _A_R[edx], xmm0

; 216  :   for(n=2; n<=x.degree+2; n++) {

	mov	DWORD PTR _n$[ebp], 2
	jmp	SHORT $LN3@setup
$LN2@setup:
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN3@setup:
	mov	ecx, DWORD PTR _x$[ebp+100]
	add	ecx, 2
	cmp	DWORD PTR _n$[ebp], ecx
	jg	SHORT $LN1@setup

; 217  :     A_R[n] = pow(A_R[1],(double)n);

	cvtsi2sd xmm0, DWORD PTR _n$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 8
	shl	edx, 0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _A_R[edx]
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	fstp	QWORD PTR _A_R[eax*8]

; 218  :   }

	jmp	SHORT $LN2@setup
$LN1@setup:

; 219  :   schmidt(x.degree);                    /* spherical harmonics */

	mov	ecx, DWORD PTR _x$[ebp+100]
	push	ecx
	call	_schmidt
	add	esp, 4

; 220  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_setup	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
tv352 = -136						; size = 8
tv292 = -128						; size = 8
tv340 = -120						; size = 8
tv300 = -112						; size = 8
tv274 = -104						; size = 8
_CC$ = -96						; size = 8
_BB$ = -88						; size = 8
_AA$ = -80						; size = 8
_DD$ = -72						; size = 8
_R$ = -64						; size = 8
_SD$ = -56						; size = 8
_CD$ = -48						; size = 8
_slat$ = -40						; size = 8
_clat$ = -32						; size = 8
_Z$ = -24						; size = 8
_Y$ = -16						; size = 8
_X$ = -8						; size = 8
_f$ = 8							; size = 4
_lat$ = 12						; size = 8
_lon$ = 20						; size = 8
_elev$ = 28						; size = 8
_year$ = 36						; size = 8
_x$ = 44						; size = 3976
_compute PROC

; 140  :   double lat,double lon,double elev,double year,struct model x) {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi

; 141  :   static double A2=A*A, B2=B*B;         /* earth semimajor,semiminor axes */
; 142  :   double clat,slat,AA,BB,CC,DD,R,CD,SD, X,Y,Z;
; 143  : 
; 144  :   /* convert geodetic (geographic) to geocentric coordinates for the
; 145  :    * oblate spheroidal earth (Langel, eqns 51, 53, 57, pp 266-7; note
; 146  :    * that eqn 51 p 266 has a typographical error) */
; 147  :   clat = cos(lat*M_PI/180.);

	movsd	xmm0, QWORD PTR _lat$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, QWORD PTR __real@4066800000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR _clat$[ebp]

; 148  :   slat = sin(lat*M_PI/180.);

	movsd	xmm0, QWORD PTR _lat$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb54442d18
	divsd	xmm0, QWORD PTR __real@4066800000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR _slat$[ebp]

; 149  :   AA = A2 * clat * clat;

	movsd	xmm0, QWORD PTR ?A2@?1??compute@@9@9
	mulsd	xmm0, QWORD PTR _clat$[ebp]
	mulsd	xmm0, QWORD PTR _clat$[ebp]
	movsd	QWORD PTR _AA$[ebp], xmm0

; 150  :   BB = B2 * slat * slat;

	movsd	xmm0, QWORD PTR ?B2@?1??compute@@9@9
	mulsd	xmm0, QWORD PTR _slat$[ebp]
	mulsd	xmm0, QWORD PTR _slat$[ebp]
	movsd	QWORD PTR _BB$[ebp], xmm0

; 151  :   CC = AA + BB;

	movsd	xmm0, QWORD PTR _AA$[ebp]
	addsd	xmm0, QWORD PTR _BB$[ebp]
	movsd	QWORD PTR _CC$[ebp], xmm0

; 152  :   DD = sqrt(CC);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _CC$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _DD$[ebp]

; 153  :   /* distance to center of earth (Langel, eqn 53, p 266) */
; 154  :   R = sqrt(elev*(elev + 2.*DD) + (A2*AA + B2*BB)/CC);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR _DD$[ebp]
	addsd	xmm0, QWORD PTR _elev$[ebp]
	mulsd	xmm0, QWORD PTR _elev$[ebp]
	movsd	xmm1, QWORD PTR ?A2@?1??compute@@9@9
	mulsd	xmm1, QWORD PTR _AA$[ebp]
	movsd	xmm2, QWORD PTR ?B2@?1??compute@@9@9
	mulsd	xmm2, QWORD PTR _BB$[ebp]
	addsd	xmm1, xmm2
	divsd	xmm1, QWORD PTR _CC$[ebp]
	addsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR _R$[ebp]

; 155  :   /* cos,sin of angle between geodetic and geocentric latitude */
; 156  :   CD = (elev + DD)/R;

	movsd	xmm0, QWORD PTR _elev$[ebp]
	addsd	xmm0, QWORD PTR _DD$[ebp]
	divsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR _CD$[ebp], xmm0

; 157  :   SD = (A2 - B2)/DD * slat * clat / R;

	movsd	xmm0, QWORD PTR ?A2@?1??compute@@9@9
	subsd	xmm0, QWORD PTR ?B2@?1??compute@@9@9
	divsd	xmm0, QWORD PTR _DD$[ebp]
	mulsd	xmm0, QWORD PTR _slat$[ebp]
	mulsd	xmm0, QWORD PTR _clat$[ebp]
	divsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR _SD$[ebp], xmm0

; 158  :   /* geocentric latitude (Langel, eqn 51, p 266) */
; 159  :   lat = 180./M_PI* atan((slat*CD - clat*SD) / (clat*CD + slat*SD));

	movsd	xmm0, QWORD PTR _slat$[ebp]
	mulsd	xmm0, QWORD PTR _CD$[ebp]
	movsd	xmm1, QWORD PTR _clat$[ebp]
	mulsd	xmm1, QWORD PTR _SD$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _clat$[ebp]
	mulsd	xmm1, QWORD PTR _CD$[ebp]
	movsd	xmm2, QWORD PTR _slat$[ebp]
	mulsd	xmm2, QWORD PTR _SD$[ebp]
	addsd	xmm1, xmm2
	divsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv274[ebp]
	movsd	xmm0, QWORD PTR tv274[ebp]
	mulsd	xmm0, QWORD PTR __real@404ca5dc1a63c1f8
	movsd	QWORD PTR _lat$[ebp], xmm0

; 160  :   /* printf("geocentric lat %.1f deg, elev %.3f km\n",lat,R-R0); */
; 161  : 
; 162  :   /* initialize variables and compute geocentric field components */
; 163  :   setup(lat,lon, R, year, x);

	sub	esp, 3976				; 00000f88H
	mov	ecx, 994				; 000003e2H
	lea	esi, DWORD PTR _x$[ebp]
	mov	edi, esp
	rep movsd
	sub	esp, 8
	movsd	xmm0, QWORD PTR _year$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lon$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lat$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_setup
	add	esp, 4008				; 00000fa8H

; 164  :   X = -Bt(x.degree);                    /* field to geocentric N */

	mov	eax, DWORD PTR _x$[ebp+100]
	push	eax
	call	_Bt
	add	esp, 4
	fstp	QWORD PTR tv292[ebp]
	movsd	xmm0, QWORD PTR tv292[ebp]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _X$[ebp], xmm0

; 165  :   Y = Bp(x.degree);                     /* field to E */

	mov	ecx, DWORD PTR _x$[ebp+100]
	push	ecx
	call	_Bp
	add	esp, 4
	fstp	QWORD PTR _Y$[ebp]

; 166  :   Z = -Br(x.degree);                    /* field geocentric down */

	mov	edx, DWORD PTR _x$[ebp+100]
	push	edx
	call	_Br
	add	esp, 4
	fstp	QWORD PTR tv300[ebp]
	movsd	xmm0, QWORD PTR tv300[ebp]
	xorpd	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _Z$[ebp], xmm0

; 167  : 
; 168  :   /* convert geocentric to geodetic coordinates (Langel, eqns 56, p 267) */
; 169  :   f[0] = X*CD + Z*SD;                   /* field to geodetic N */

	movsd	xmm0, QWORD PTR _X$[ebp]
	mulsd	xmm0, QWORD PTR _CD$[ebp]
	movsd	xmm1, QWORD PTR _Z$[ebp]
	mulsd	xmm1, QWORD PTR _SD$[ebp]
	addsd	xmm0, xmm1
	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _f$[ebp]
	movsd	QWORD PTR [ecx+eax], xmm0

; 170  :   f[1] = Y;

	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _f$[ebp]
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [eax+edx], xmm0

; 171  :   f[2] = Z*CD - X*SD;                   /* field geodetic down */

	movsd	xmm0, QWORD PTR _Z$[ebp]
	mulsd	xmm0, QWORD PTR _CD$[ebp]
	movsd	xmm1, QWORD PTR _X$[ebp]
	mulsd	xmm1, QWORD PTR _SD$[ebp]
	subsd	xmm0, xmm1
	mov	ecx, 8
	shl	ecx, 1
	mov	edx, DWORD PTR _f$[ebp]
	movsd	QWORD PTR [edx+ecx], xmm0

; 172  :   X = f[0];

	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _f$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax]
	movsd	QWORD PTR _X$[ebp], xmm0

; 173  :   Z = f[2];

	mov	edx, 8
	shl	edx, 1
	mov	eax, DWORD PTR _f$[ebp]
	movsd	xmm0, QWORD PTR [eax+edx]
	movsd	QWORD PTR _Z$[ebp], xmm0

; 174  :   /* compute other components (Langel, eqns 46, 47, p 264) */
; 175  :   f[3] = sqrt(X*X + Y*Y);               /* horizontal */

	movsd	xmm0, QWORD PTR _X$[ebp]
	mulsd	xmm0, QWORD PTR _X$[ebp]
	movsd	xmm1, QWORD PTR _Y$[ebp]
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	addsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	ecx, 8
	imul	ecx, 3
	mov	edx, DWORD PTR _f$[ebp]
	fstp	QWORD PTR [edx+ecx]

; 176  :   f[4] = sqrt(X*X + Y*Y + Z*Z);         /* total field */

	movsd	xmm0, QWORD PTR _X$[ebp]
	mulsd	xmm0, QWORD PTR _X$[ebp]
	movsd	xmm1, QWORD PTR _Y$[ebp]
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _Z$[ebp]
	mulsd	xmm1, QWORD PTR _Z$[ebp]
	addsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	mov	eax, 8
	shl	eax, 2
	mov	ecx, DWORD PTR _f$[ebp]
	fstp	QWORD PTR [ecx+eax]

; 177  :   f[5] = atan2(Y,X)*180.0/M_PI;         /* declination, E of N, degrees */

	sub	esp, 8
	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv340[ebp]
	movsd	xmm0, QWORD PTR tv340[ebp]
	mulsd	xmm0, QWORD PTR __real@4066800000000000
	divsd	xmm0, QWORD PTR __real@400921fb54442d18
	mov	edx, 8
	imul	edx, 5
	mov	eax, DWORD PTR _f$[ebp]
	movsd	QWORD PTR [eax+edx], xmm0

; 178  :   f[6] = atan2(Z,f[3])*180.0/M_PI;      /* inclination, degrees */

	mov	ecx, 8
	imul	ecx, 3
	mov	edx, DWORD PTR _f$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+ecx]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Z$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv352[ebp]
	movsd	xmm0, QWORD PTR tv352[ebp]
	mulsd	xmm0, QWORD PTR __real@4066800000000000
	divsd	xmm0, QWORD PTR __real@400921fb54442d18
	mov	eax, 8
	imul	eax, 6
	mov	ecx, DWORD PTR _f$[ebp]
	movsd	QWORD PTR [ecx+eax], xmm0

; 179  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_compute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\magvar.c
_TEXT	SEGMENT
_f$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
_lat$ = 8						; size = 8
_lon$ = 16						; size = 8
_elev$ = 24						; size = 8
_year$ = 32						; size = 8
_getVar	PROC

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 120  :   double f[7];
; 121  : 
; 122  :   compute(f,lat,lon,elev,year,igrf2000);       /* compute field compenents */

	sub	esp, 3976				; 00000f88H
	mov	ecx, 994				; 000003e2H
	mov	esi, OFFSET _igrf2000
	mov	edi, esp
	rep movsd
	sub	esp, 8
	movsd	xmm0, QWORD PTR _year$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _elev$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lon$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _lat$[ebp]
	movsd	QWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_compute
	add	esp, 4012				; 00000facH

; 123  :   return f[5] ;

	mov	ecx, 8
	imul	ecx, 5
	fld	QWORD PTR _f$[ebp+ecx]

; 124  : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_getVar	ENDP
_TEXT	ENDS
END
