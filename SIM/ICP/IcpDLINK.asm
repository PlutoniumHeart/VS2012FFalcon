; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\IcpDLINK.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
PUBLIC	?ExecDLINKMode@ICPClass@@QAEXXZ			; ICPClass::ExecDLINKMode
PUBLIC	?PNUpdateDLINKMode@ICPClass@@QAEXHH@Z		; ICPClass::PNUpdateDLINKMode
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_09IEKIACFI@DLINK?5?$CF2d?$AA@		; `string'
PUBLIC	??_C@_0O@MHDHEOKD@NO?5DLINK?5DATA?$AA@		; `string'
PUBLIC	??_C@_0BA@EBCELNDP@DLINK?5?$CF2d?5?5?$CF?95s?$AA@ ; `string'
PUBLIC	??_C@_0BG@PLAGJNEI@PRI?3?5?$CF?98s?5?5THRT?3?5?$CF?98s?$AA@ ; `string'
PUBLIC	??_C@_0BF@GEGFIHIB@IP?9TGT?5?$CF3s?5?$CK?5?5?$CF4s?5NM?$AA@ ; `string'
PUBLIC	??_C@_0BC@HNDPIBNI@PRI?5?$CF?98s?5THR?5?$CF?98s?$AA@ ; `string'
PUBLIC	??_C@_0BC@CACIHBGC@IP?9TGT?5?$CF3s?$CK?5?$CF4sNM?$AA@ ; `string'
PUBLIC	??_C@_0BD@NEAICIMK@PRI?5?$CF?98s?5?5THR?5?$CF?98s?$AA@ ; `string'
EXTRN	_strlen:PROC
EXTRN	_sprintf:PROC
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetDataLink@NavigationSystem@@QAEXPAW4DLinkPointType@FalconDLinkMessage@@PAHPAD2222@Z:PROC ; NavigationSystem::GetDataLink
EXTRN	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z:PROC	; ICPClass::FillDEDMatrix
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_0BD@NEAICIMK@PRI?5?$CF?98s?5?5THR?5?$CF?98s?$AA@
CONST	SEGMENT
??_C@_0BD@NEAICIMK@PRI?5?$CF?98s?5?5THR?5?$CF?98s?$AA@ DB 'PRI %-8s  THR '
	DB	'%-8s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CACIHBGC@IP?9TGT?5?$CF3s?$CK?5?$CF4sNM?$AA@
CONST	SEGMENT
??_C@_0BC@CACIHBGC@IP?9TGT?5?$CF3s?$CK?5?$CF4sNM?$AA@ DB 'IP-TGT %3s* %4s'
	DB	'NM', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HNDPIBNI@PRI?5?$CF?98s?5THR?5?$CF?98s?$AA@
CONST	SEGMENT
??_C@_0BC@HNDPIBNI@PRI?5?$CF?98s?5THR?5?$CF?98s?$AA@ DB 'PRI %-8s THR %-8'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GEGFIHIB@IP?9TGT?5?$CF3s?5?$CK?5?5?$CF4s?5NM?$AA@
CONST	SEGMENT
??_C@_0BF@GEGFIHIB@IP?9TGT?5?$CF3s?5?$CK?5?5?$CF4s?5NM?$AA@ DB 'IP-TGT %3'
	DB	's *  %4s NM', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PLAGJNEI@PRI?3?5?$CF?98s?5?5THRT?3?5?$CF?98s?$AA@
CONST	SEGMENT
??_C@_0BG@PLAGJNEI@PRI?3?5?$CF?98s?5?5THRT?3?5?$CF?98s?$AA@ DB 'PRI: %-8s'
	DB	'  THRT: %-8s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EBCELNDP@DLINK?5?$CF2d?5?5?$CF?95s?$AA@
CONST	SEGMENT
??_C@_0BA@EBCELNDP@DLINK?5?$CF2d?5?5?$CF?95s?$AA@ DB 'DLINK %2d  %-5s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MHDHEOKD@NO?5DLINK?5DATA?$AA@
CONST	SEGMENT
??_C@_0O@MHDHEOKD@NO?5DLINK?5DATA?$AA@ DB 'NO DLINK DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IEKIACFI@DLINK?5?$CF2d?$AA@
CONST	SEGMENT
??_C@_09IEKIACFI@DLINK?5?$CF2d?$AA@ DB 'DLINK %2d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpdlink.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_button$ = 8						; size = 4
_mode$ = 12						; size = 4
?PNUpdateDLINKMode@ICPClass@@QAEXHH@Z PROC		; ICPClass::PNUpdateDLINKMode
; _this$ = ecx

; 85   : void ICPClass::PNUpdateDLINKMode(int button, int mode) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 87   : 	if(button == PREV_BUTTON) {

	cmp	DWORD PTR _button$[ebp], 13		; 0000000dH
	jne	SHORT $LN3@PNUpdateDL

; 88   :       playerAC->FCC->waypointStepCmd = -1;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], -1
	jmp	SHORT $LN2@PNUpdateDL
$LN3@PNUpdateDL:

; 89   :    }
; 90   : 	else if(button == NEXT_BUTTON) {

	cmp	DWORD PTR _button$[ebp], 14		; 0000000eH
	jne	SHORT $LN2@PNUpdateDL

; 91   :       playerAC->FCC->waypointStepCmd = 1;

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+936]
	mov	BYTE PTR [eax+194], 1
$LN2@PNUpdateDL:

; 92   :    }
; 93   : 
; 94   : 	mUpdateFlags |= DLINK_UPDATE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	or	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx

; 95   : 	mUpdateFlags |= CNI_UPDATE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx

; 96   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?PNUpdateDLINKMode@ICPClass@@QAEXHH@Z ENDP		; ICPClass::PNUpdateDLINKMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpdlink.cpp
_TEXT	SEGMENT
_pheading$ = -68					; size = 4
_pointNumber$ = -64					; size = 4
_type$ = -60						; size = 4
_this$ = -56						; size = 4
_pthreat$ = -52						; size = 15
_ptarget$ = -36						; size = 15
_pdistance$ = -20					; size = 5
_ptype$ = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
?ExecDLINKMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecDLINKMode
; _this$ = ecx

; 11   : void ICPClass::ExecDLINKMode(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 12   : 
; 13   : 	FalconDLinkMessage::DLinkPointType 	type;
; 14   : 	int		pointNumber;
; 15   : 	char		ptype[5];
; 16   : 	char		ptarget[15];
; 17   : 	char		pthreat[15];
; 18   : 	char		pheading[4];
; 19   : 	char		pdistance[5];
; 20   : 
; 21   : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	$LN15@ExecDLINKM

; 22   : 	{ 
; 23   : 		if(mUpdateFlags & DLINK_UPDATE) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 2
	je	$LN14@ExecDLINKM

; 24   : 		{
; 25   : 			mUpdateFlags &= !DLINK_UPDATE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 26   : 
; 27   : 			//MI Changed for DLINK stuff
; 28   : #if 0
; 29   : 			sprintf(mpLine1, "OPERATIONAL");
; 30   : 			sprintf(mpLine2, "");
; 31   : 			sprintf(mpLine3, "");
; 32   : #endif
; 33   : 		
; 34   : 			gNavigationSys->GetDataLink(&type, &pointNumber, ptype, ptarget, pthreat, pheading, pdistance);

	lea	eax, DWORD PTR _pdistance$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pheading$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pthreat$[ebp]
	push	edx
	lea	eax, DWORD PTR _ptarget$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pointNumber$[ebp]
	push	edx
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetDataLink@NavigationSystem@@QAEXPAW4DLinkPointType@FalconDLinkMessage@@PAHPAD2222@Z ; NavigationSystem::GetDataLink

; 35   : 
; 36   : 			if(type == FalconDLinkMessage::NODLINK) 

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN13@ExecDLINKM

; 37   : 			{
; 38   : 				sprintf(mpLine1, "DLINK %2d", pointNumber + 1);

	mov	ecx, DWORD PTR _pointNumber$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_09IEKIACFI@DLINK?5?$CF2d?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 39   : 				sprintf(mpLine2, "NO DLINK DATA");

	push	OFFSET ??_C@_0O@MHDHEOKD@NO?5DLINK?5DATA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	call	_sprintf
	add	esp, 8

; 40   : 				sprintf(mpLine3, "");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	push	ecx
	call	_sprintf
	add	esp, 8
	jmp	$LN14@ExecDLINKM
$LN13@ExecDLINKM:

; 41   : 			}
; 42   : 			else if((type == FalconDLinkMessage::IP || type == FalconDLinkMessage::TGT) && *pheading && *pdistance) {

	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN10@ExecDLINKM
	cmp	DWORD PTR _type$[ebp], 2
	jne	SHORT $LN11@ExecDLINKM
$LN10@ExecDLINKM:
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _pheading$[ebp+edx]
	test	eax, eax
	je	SHORT $LN11@ExecDLINKM
	mov	ecx, 1
	imul	ecx, 0
	movsx	edx, BYTE PTR _pdistance$[ebp+ecx]
	test	edx, edx
	je	SHORT $LN11@ExecDLINKM

; 43   : 				sprintf(mpLine1, "DLINK %2d  %-5s", pointNumber + 1, ptype);

	lea	eax, DWORD PTR _ptype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pointNumber$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0BA@EBCELNDP@DLINK?5?$CF2d?5?5?$CF?95s?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 44   : 				sprintf(mpLine2, "PRI: %-8s  THRT: %-8s", ptarget, pthreat);			

	lea	eax, DWORD PTR _pthreat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptarget$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@PLAGJNEI@PRI?3?5?$CF?98s?5?5THRT?3?5?$CF?98s?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 45   : 				sprintf(mpLine3, "IP-TGT %3s *  %4s NM", pheading, pdistance);

	lea	eax, DWORD PTR _pdistance$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pheading$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BF@GEGFIHIB@IP?9TGT?5?$CF3s?5?$CK?5?5?$CF4s?5NM?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 46   : 			}
; 47   : 			else 

	jmp	SHORT $LN14@ExecDLINKM
$LN11@ExecDLINKM:

; 48   : 			{
; 49   : 				sprintf(mpLine1, "DLINK %2d  %-5s", pointNumber + 1, ptype);

	lea	eax, DWORD PTR _ptype$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pointNumber$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0BA@EBCELNDP@DLINK?5?$CF2d?5?5?$CF?95s?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 50   : 				sprintf(mpLine2, "PRI: %-8s  THRT: %-8s", ptarget, pthreat);			

	lea	eax, DWORD PTR _pthreat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptarget$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@PLAGJNEI@PRI?3?5?$CF?98s?5?5THRT?3?5?$CF?98s?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 51   : 				sprintf(mpLine3, "");

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 156				; 0000009cH
	push	eax
	call	_sprintf
	add	esp, 8
$LN14@ExecDLINKM:

; 52   : 			}
; 53   : 		}
; 54   : 	}
; 55   : 	else

	jmp	$LN16@ExecDLINKM
$LN15@ExecDLINKM:

; 56   : 	{
; 57   : 		if(gNavigationSys)

	cmp	DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A, 0 ; gNavigationSys
	je	SHORT $LN7@ExecDLINKM

; 58   : 			gNavigationSys->GetDataLink(&type, &pointNumber, ptype, ptarget, pthreat, pheading, pdistance);

	lea	ecx, DWORD PTR _pdistance$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pheading$[ebp]
	push	edx
	lea	eax, DWORD PTR _pthreat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptarget$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ptype$[ebp]
	push	edx
	lea	eax, DWORD PTR _pointNumber$[ebp]
	push	eax
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetDataLink@NavigationSystem@@QAEXPAW4DLinkPointType@FalconDLinkMessage@@PAHPAD2222@Z ; NavigationSystem::GetDataLink
$LN7@ExecDLINKM:

; 59   : 		if(type == FalconDLinkMessage::NODLINK || type == NULL) 

	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN5@ExecDLINKM
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN6@ExecDLINKM
$LN5@ExecDLINKM:

; 60   : 		{
; 61   : 			sprintf(tempstr, "DLINK %2d", pointNumber + 1, ptype);

	lea	edx, DWORD PTR _ptype$[ebp]
	push	edx
	mov	eax, DWORD PTR _pointNumber$[ebp]
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_09IEKIACFI@DLINK?5?$CF2d?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 62   : 			FillDEDMatrix(0,10,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 63   : 			FillDEDMatrix(1,5, "NO DLINK DATA");

	push	0
	push	OFFSET ??_C@_0O@MHDHEOKD@NO?5DLINK?5DATA?$AA@
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
	jmp	$LN16@ExecDLINKM
$LN6@ExecDLINKM:

; 64   : 		}
; 65   : 		else if((type == FalconDLinkMessage::IP || type == FalconDLinkMessage::TGT) && *pheading && *pdistance) 

	cmp	DWORD PTR _type$[ebp], 1
	je	SHORT $LN2@ExecDLINKM
	cmp	DWORD PTR _type$[ebp], 2
	jne	$LN3@ExecDLINKM
$LN2@ExecDLINKM:
	mov	eax, 1
	imul	eax, 0
	movsx	ecx, BYTE PTR _pheading$[ebp+eax]
	test	ecx, ecx
	je	$LN3@ExecDLINKM
	mov	edx, 1
	imul	edx, 0
	movsx	eax, BYTE PTR _pdistance$[ebp+edx]
	test	eax, eax
	je	$LN3@ExecDLINKM

; 66   : 		{
; 67   : 			sprintf(tempstr, "DLINK %2d", pointNumber + 1, ptype);

	lea	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pointNumber$[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_09IEKIACFI@DLINK?5?$CF2d?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 68   : 			FillDEDMatrix(0,10,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 69   : 			sprintf(tempstr, "PRI %-8s THR %-8s", ptarget, pthreat);

	lea	edx, DWORD PTR _pthreat$[ebp]
	push	edx
	lea	eax, DWORD PTR _ptarget$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@HNDPIBNI@PRI?5?$CF?98s?5THR?5?$CF?98s?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 70   : 			FillDEDMatrix(1, ((25-strlen(tempstr))/2), tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 25					; 00000019H
	sub	ecx, eax
	shr	ecx, 1
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 71   : 			sprintf(tempstr, "IP-TGT %3s* %4sNM", pheading, pdistance);

	lea	edx, DWORD PTR _pdistance$[ebp]
	push	edx
	lea	eax, DWORD PTR _pheading$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@CACIHBGC@IP?9TGT?5?$CF3s?$CK?5?$CF4sNM?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 72   : 			FillDEDMatrix(2, ((25-strlen(tempstr))/2), tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 25					; 00000019H
	sub	ecx, eax
	shr	ecx, 1
	push	ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 73   : 		}
; 74   : 		else 

	jmp	$LN16@ExecDLINKM
$LN3@ExecDLINKM:

; 75   : 		{
; 76   : 			sprintf(tempstr, "DLINK %2d  %-5s", pointNumber + 1, ptype);

	lea	edx, DWORD PTR _ptype$[ebp]
	push	edx
	mov	eax, DWORD PTR _pointNumber$[ebp]
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BA@EBCELNDP@DLINK?5?$CF2d?5?5?$CF?95s?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 77   : 			FillDEDMatrix(0,10,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 78   : 			sprintf(tempstr, "PRI %-8s  THR %-8s", ptarget, pthreat);

	lea	eax, DWORD PTR _pthreat$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptarget$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BD@NEAICIMK@PRI?5?$CF?98s?5?5THR?5?$CF?98s?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 79   : 			FillDEDMatrix(2, ((25-strlen(tempstr))/2), tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 25					; 00000019H
	sub	edx, eax
	shr	edx, 1
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN16@ExecDLINKM:

; 80   : 		}
; 81   : 	}
; 82   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ExecDLINKMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecDLINKMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
