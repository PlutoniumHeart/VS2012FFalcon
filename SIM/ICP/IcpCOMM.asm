; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\IcpCOMM.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?ENTRUpdateCOMMMode@ICPClass@@QAEXXZ		; ICPClass::ENTRUpdateCOMMMode
PUBLIC	?PNUpdateCOMMMode@ICPClass@@QAEXHH@Z		; ICPClass::PNUpdateCOMMMode
PUBLIC	?ExecCOMM1Mode@ICPClass@@QAEXXZ			; ICPClass::ExecCOMM1Mode
PUBLIC	?ExecCOMM2Mode@ICPClass@@QAEXXZ			; ICPClass::ExecCOMM2Mode
PUBLIC	?IsICPSet@ICPClass@@QAEHH@Z			; ICPClass::IsICPSet
PUBLIC	?GetICPTertiaryMode@ICPClass@@QAEJXZ		; ICPClass::GetICPTertiaryMode
PUBLIC	??_C@_09LDLAIMHJ@UHF?5?5BOTH?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_03PHIAGONP@PRE?$AA@			; `string'
PUBLIC	??_C@_05NCDMKKFD@?$CF1?40f?$AA@			; `string'
PUBLIC	??_C@_01KHDNNMEB@?$AB?$AA@			; `string'
PUBLIC	??_C@_03HFAHPIOK@TOD?$AA@			; `string'
PUBLIC	??_C@_05KLHICNFN@?$CF3?42f?$AA@			; `string'
PUBLIC	??_C@_02LIPFKLKA@NB?$AA@			; `string'
PUBLIC	??_C@_07NDLOCAPE@VHF?5?5ON?$AA@			; `string'
PUBLIC	??_C@_06GCBBONBM@512?426?$AA@			; `string'
PUBLIC	??_C@_02KLACDDFP@WB?$AA@			; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@403b051eb851eb85
PUBLIC	__real@403d0ccccccccccd
PUBLIC	__real@40400000
PUBLIC	__real@40425c28f5c28f5c
PUBLIC	__real@404431eb851eb852
PUBLIC	__real@4046cf5c28f5c28f
PUBLIC	__real@404acf5c28f5c28f
PUBLIC	__real@404d666666666666
PUBLIC	__real@405abccccccccccd
PUBLIC	__real@405e866666666666
PUBLIC	__real@405ee7ae147ae148
PUBLIC	__real@405f547ae147ae14
PUBLIC	__real@4061980000000000
PUBLIC	__real@4061c0a3d70a3d71
PUBLIC	__real@4061d9999999999a
PUBLIC	__real@406228a3d70a3d71
PUBLIC	__real@4062680000000000
PUBLIC	__real@40660b3333333333
PUBLIC	__real@406733d70a3d70a4
PUBLIC	__real@40674b3333333333
PUBLIC	__real@4068df0a3d70a3d7
PUBLIC	__real@406bc33333333333
PUBLIC	__real@406bd9999999999a
PUBLIC	__real@4070051eb851eb85
PUBLIC	__real@40706ccccccccccd
PUBLIC	__real@40707ccccccccccd
PUBLIC	__real@40734ccccccccccd
PUBLIC	__real@4074233333333333
PUBLIC	__real@40742b3333333333
PUBLIC	__real@4076a66666666666
PUBLIC	__real@4076a9999999999a
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
PUBLIC	__real@41500000
PUBLIC	__real@41600000
PUBLIC	__real@41700000
EXTRN	_sprintf:PROC
EXTRN	?ScratchPad@ICPClass@@QAEXHHH@Z:PROC		; ICPClass::ScratchPad
EXTRN	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z:PROC	; ICPClass::FillDEDMatrix
EXTRN	?UHFBackup@ICPClass@@QAEXXZ:PROC		; ICPClass::UHFBackup
EXTRN	?VHFBackup@ICPClass@@QAEXXZ:PROC		; ICPClass::VHFBackup
EXTRN	?ForwardCycleFreq@VoiceManager@@QAEXH@Z:PROC	; VoiceManager::ForwardCycleFreq
EXTRN	?BackwardCycleFreq@VoiceManager@@QAEXH@Z:PROC	; VoiceManager::BackwardCycleFreq
EXTRN	?GetUHFSrc@NavigationSystem@@QAE?AW4UHF_Mode_Type@1@XZ:PROC ; NavigationSystem::GetUHFSrc
EXTRN	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ:PROC ; NavigationSystem::GetControlSrc
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4076a9999999999a
CONST	SEGMENT
__real@4076a9999999999a DQ 04076a9999999999ar	; 362.6
CONST	ENDS
;	COMDAT __real@4076a66666666666
CONST	SEGMENT
__real@4076a66666666666 DQ 04076a66666666666r	; 362.4
CONST	ENDS
;	COMDAT __real@40742b3333333333
CONST	SEGMENT
__real@40742b3333333333 DQ 040742b3333333333r	; 322.7
CONST	ENDS
;	COMDAT __real@4074233333333333
CONST	SEGMENT
__real@4074233333333333 DQ 04074233333333333r	; 322.2
CONST	ENDS
;	COMDAT __real@40734ccccccccccd
CONST	SEGMENT
__real@40734ccccccccccd DQ 040734ccccccccccdr	; 308.8
CONST	ENDS
;	COMDAT __real@40707ccccccccccd
CONST	SEGMENT
__real@40707ccccccccccd DQ 040707ccccccccccdr	; 263.8
CONST	ENDS
;	COMDAT __real@40706ccccccccccd
CONST	SEGMENT
__real@40706ccccccccccd DQ 040706ccccccccccdr	; 262.8
CONST	ENDS
;	COMDAT __real@4070051eb851eb85
CONST	SEGMENT
__real@4070051eb851eb85 DQ 04070051eb851eb85r	; 256.32
CONST	ENDS
;	COMDAT __real@406bd9999999999a
CONST	SEGMENT
__real@406bd9999999999a DQ 0406bd9999999999ar	; 222.8
CONST	ENDS
;	COMDAT __real@406bc33333333333
CONST	SEGMENT
__real@406bc33333333333 DQ 0406bc33333333333r	; 222.1
CONST	ENDS
;	COMDAT __real@4068df0a3d70a3d7
CONST	SEGMENT
__real@4068df0a3d70a3d7 DQ 04068df0a3d70a3d7r	; 198.97
CONST	ENDS
;	COMDAT __real@40674b3333333333
CONST	SEGMENT
__real@40674b3333333333 DQ 040674b3333333333r	; 186.35
CONST	ENDS
;	COMDAT __real@406733d70a3d70a4
CONST	SEGMENT
__real@406733d70a3d70a4 DQ 0406733d70a3d70a4r	; 185.62
CONST	ENDS
;	COMDAT __real@40660b3333333333
CONST	SEGMENT
__real@40660b3333333333 DQ 040660b3333333333r	; 176.35
CONST	ENDS
;	COMDAT __real@4062680000000000
CONST	SEGMENT
__real@4062680000000000 DQ 04062680000000000r	; 147.25
CONST	ENDS
;	COMDAT __real@406228a3d70a3d71
CONST	SEGMENT
__real@406228a3d70a3d71 DQ 0406228a3d70a3d71r	; 145.27
CONST	ENDS
;	COMDAT __real@4061d9999999999a
CONST	SEGMENT
__real@4061d9999999999a DQ 04061d9999999999ar	; 142.8
CONST	ENDS
;	COMDAT __real@4061c0a3d70a3d71
CONST	SEGMENT
__real@4061c0a3d70a3d71 DQ 04061c0a3d70a3d71r	; 142.02
CONST	ENDS
;	COMDAT __real@4061980000000000
CONST	SEGMENT
__real@4061980000000000 DQ 04061980000000000r	; 140.75
CONST	ENDS
;	COMDAT __real@405f547ae147ae14
CONST	SEGMENT
__real@405f547ae147ae14 DQ 0405f547ae147ae14r	; 125.32
CONST	ENDS
;	COMDAT __real@405ee7ae147ae148
CONST	SEGMENT
__real@405ee7ae147ae148 DQ 0405ee7ae147ae148r	; 123.62
CONST	ENDS
;	COMDAT __real@405e866666666666
CONST	SEGMENT
__real@405e866666666666 DQ 0405e866666666666r	; 122.1
CONST	ENDS
;	COMDAT __real@405abccccccccccd
CONST	SEGMENT
__real@405abccccccccccd DQ 0405abccccccccccdr	; 106.95
CONST	ENDS
;	COMDAT __real@404d666666666666
CONST	SEGMENT
__real@404d666666666666 DQ 0404d666666666666r	; 58.8
CONST	ENDS
;	COMDAT __real@404acf5c28f5c28f
CONST	SEGMENT
__real@404acf5c28f5c28f DQ 0404acf5c28f5c28fr	; 53.62
CONST	ENDS
;	COMDAT __real@4046cf5c28f5c28f
CONST	SEGMENT
__real@4046cf5c28f5c28f DQ 04046cf5c28f5c28fr	; 45.62
CONST	ENDS
;	COMDAT __real@404431eb851eb852
CONST	SEGMENT
__real@404431eb851eb852 DQ 0404431eb851eb852r	; 40.39
CONST	ENDS
;	COMDAT __real@40425c28f5c28f5c
CONST	SEGMENT
__real@40425c28f5c28f5c DQ 040425c28f5c28f5cr	; 36.72
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@403d0ccccccccccd
CONST	SEGMENT
__real@403d0ccccccccccd DQ 0403d0ccccccccccdr	; 29.05
CONST	ENDS
;	COMDAT __real@403b051eb851eb85
CONST	SEGMENT
__real@403b051eb851eb85 DQ 0403b051eb851eb85r	; 27.02
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_02KLACDDFP@WB?$AA@
CONST	SEGMENT
??_C@_02KLACDDFP@WB?$AA@ DB 'WB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCBBONBM@512?426?$AA@
CONST	SEGMENT
??_C@_06GCBBONBM@512?426?$AA@ DB '512.26', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NDLOCAPE@VHF?5?5ON?$AA@
CONST	SEGMENT
??_C@_07NDLOCAPE@VHF?5?5ON?$AA@ DB 'VHF  ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LIPFKLKA@NB?$AA@
CONST	SEGMENT
??_C@_02LIPFKLKA@NB?$AA@ DB 'NB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLHICNFN@?$CF3?42f?$AA@
CONST	SEGMENT
??_C@_05KLHICNFN@?$CF3?42f?$AA@ DB '%3.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HFAHPIOK@TOD?$AA@
CONST	SEGMENT
??_C@_03HFAHPIOK@TOD?$AA@ DB 'TOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KHDNNMEB@?$AB?$AA@
CONST	SEGMENT
??_C@_01KHDNNMEB@?$AB?$AA@ DB 01H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCDMKKFD@?$CF1?40f?$AA@
CONST	SEGMENT
??_C@_05NCDMKKFD@?$CF1?40f?$AA@ DB '%1.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHIAGONP@PRE?$AA@
CONST	SEGMENT
??_C@_03PHIAGONP@PRE?$AA@ DB 'PRE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LDLAIMHJ@UHF?5?5BOTH?$AA@
CONST	SEGMENT
??_C@_09LDLAIMHJ@UHF?5?5BOTH?$AA@ DB 'UHF  BOTH', 00H	; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?GetICPTertiaryMode@ICPClass@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetICPTertiaryMode@ICPClass@@QAEJXZ PROC		; ICPClass::GetICPTertiaryMode, COMDAT
; _this$ = ecx

; 569  : 	long GetICPTertiaryMode(void) {return mICPTertiaryMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetICPTertiaryMode@ICPClass@@QAEJXZ ENDP		; ICPClass::GetICPTertiaryMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsICPSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsICPSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsICPSet, COMDAT
; _this$ = ecx

; 499  : 	int IsICPSet (int testFlag) {return ICPModeFlags & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsICPSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsICPSet
$LN3@IsICPSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsICPSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsICPSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsICPSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpcomm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecCOMM2Mode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecCOMM2Mode
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	//change our active radio
; 138  : 	WhichRadio = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1496], 1

; 139  : 	if(VM)

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	$LN64@ExecCOMM2M

; 140  : 	{
; 141  : 		if(VM->radiofilter[1] == rcfOff)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 0
	jne	SHORT $LN63@ExecCOMM2M

; 142  : 			CommChannel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 0
	jmp	$LN33@ExecCOMM2M
$LN63@ExecCOMM2M:

; 143  : 		else if(VM->radiofilter[1] == rcfFlight1)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 1
	jne	SHORT $LN61@ExecCOMM2M

; 144  : 		{
; 145  : 			VHFChann = 145.27;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406228a3d70a3d71
	movsd	QWORD PTR [eax+1360], xmm0

; 146  : 			CommChannel = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 1
	jmp	$LN33@ExecCOMM2M
$LN61@ExecCOMM2M:

; 147  : 		}
; 148  : 		else if(VM->radiofilter[1] == rcfFlight2)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [eax+edx+136], 2
	jne	SHORT $LN59@ExecCOMM2M

; 149  : 		{
; 150  : 			VHFChann = 145.27;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406228a3d70a3d71
	movsd	QWORD PTR [ecx+1360], xmm0

; 151  : 			CommChannel = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1388], 2
	jmp	$LN33@ExecCOMM2M
$LN59@ExecCOMM2M:

; 152  : 		}
; 153  : 		else if(VM->radiofilter[1] == rcfFlight3)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [ecx+eax+136], 3
	jne	SHORT $LN57@ExecCOMM2M

; 154  : 		{
; 155  : 			VHFChann = 145.27;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406228a3d70a3d71
	movsd	QWORD PTR [edx+1360], xmm0

; 156  : 			CommChannel = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 3
	jmp	$LN33@ExecCOMM2M
$LN57@ExecCOMM2M:

; 157  : 		}
; 158  : 		else if(VM->radiofilter[1] == rcfFlight4)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 4
	jne	SHORT $LN55@ExecCOMM2M

; 159  : 		{
; 160  : 			VHFChann = 145.27;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406228a3d70a3d71
	movsd	QWORD PTR [eax+1360], xmm0

; 161  : 			CommChannel = 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 4
	jmp	$LN33@ExecCOMM2M
$LN55@ExecCOMM2M:

; 162  : 		}
; 163  : 		else if(VM->radiofilter[1] == rcfFlight5)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [eax+edx+136], 5
	jne	SHORT $LN53@ExecCOMM2M

; 164  : 		{
; 165  : 			VHFChann = 145.27;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406228a3d70a3d71
	movsd	QWORD PTR [ecx+1360], xmm0

; 166  : 			CommChannel = 5;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1388], 5
	jmp	$LN33@ExecCOMM2M
$LN53@ExecCOMM2M:

; 167  : 		}
; 168  : 		else if(VM->radiofilter[1] == rcfPackage1)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [ecx+eax+136], 6
	jne	SHORT $LN51@ExecCOMM2M

; 169  : 		{
; 170  : 			VHFChann = 222.10;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406bc33333333333
	movsd	QWORD PTR [edx+1360], xmm0

; 171  : 			CommChannel = 6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 6
	jmp	$LN33@ExecCOMM2M
$LN51@ExecCOMM2M:

; 172  : 		}
; 173  : 		else if(VM->radiofilter[1] == rcfPackage2)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 7
	jne	SHORT $LN49@ExecCOMM2M

; 174  : 		{
; 175  : 			VHFChann = 222.10;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406bc33333333333
	movsd	QWORD PTR [eax+1360], xmm0

; 176  : 			CommChannel = 7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 7
	jmp	$LN33@ExecCOMM2M
$LN49@ExecCOMM2M:

; 177  : 		}
; 178  : 		else if(VM->radiofilter[1] == rcfPackage3)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [eax+edx+136], 8
	jne	SHORT $LN47@ExecCOMM2M

; 179  : 		{
; 180  : 			VHFChann = 222.10;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406bc33333333333
	movsd	QWORD PTR [ecx+1360], xmm0

; 181  : 			CommChannel = 8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1388], 8
	jmp	$LN33@ExecCOMM2M
$LN47@ExecCOMM2M:

; 182  : 		}
; 183  : 		else if(VM->radiofilter[1] == rcfPackage4)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [ecx+eax+136], 9
	jne	SHORT $LN45@ExecCOMM2M

; 184  : 		{
; 185  : 			VHFChann = 222.10;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406bc33333333333
	movsd	QWORD PTR [edx+1360], xmm0

; 186  : 			CommChannel = 9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 9
	jmp	$LN33@ExecCOMM2M
$LN45@ExecCOMM2M:

; 187  : 		}
; 188  : 		else if(VM->radiofilter[1] == rcfPackage5)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 10		; 0000000aH
	jne	SHORT $LN43@ExecCOMM2M

; 189  : 		{
; 190  : 			VHFChann = 222.10;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406bc33333333333
	movsd	QWORD PTR [eax+1360], xmm0

; 191  : 			CommChannel = 10;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 10		; 0000000aH
	jmp	$LN33@ExecCOMM2M
$LN43@ExecCOMM2M:

; 192  : 		}
; 193  : 		else if(VM->radiofilter[1] == rcfFromPackage)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [eax+edx+136], 11		; 0000000bH
	jne	SHORT $LN41@ExecCOMM2M

; 194  : 		{
; 195  : 			VHFChann = 147.25;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4062680000000000
	movsd	QWORD PTR [ecx+1360], xmm0

; 196  : 			CommChannel = 3;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1388], 3
	jmp	$LN33@ExecCOMM2M
$LN41@ExecCOMM2M:

; 197  : 		}
; 198  : 		else if(VM->radiofilter[1] == rcfProx)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [ecx+eax+136], 12		; 0000000cH
	jne	SHORT $LN39@ExecCOMM2M

; 199  : 		{
; 200  : 			VHFChann = 256.32;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4070051eb851eb85
	movsd	QWORD PTR [edx+1360], xmm0

; 201  : 			CommChannel = 11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 11		; 0000000bH
	jmp	$LN33@ExecCOMM2M
$LN39@ExecCOMM2M:

; 202  : 		}
; 203  : 		else if(VM->radiofilter[1] == rcfTeam)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 13		; 0000000dH
	jne	SHORT $LN37@ExecCOMM2M

; 204  : 		{
; 205  : 			VHFChann = 186.35;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40674b3333333333
	movsd	QWORD PTR [eax+1360], xmm0

; 206  : 			CommChannel = 12;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 12		; 0000000cH
	jmp	SHORT $LN33@ExecCOMM2M
$LN37@ExecCOMM2M:

; 207  : 		}
; 208  : 		else if(VM->radiofilter[1] == rcfAll)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [eax+edx+136], 14		; 0000000eH
	jne	SHORT $LN35@ExecCOMM2M

; 209  : 		{
; 210  : 			VHFChann = 198.97;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4068df0a3d70a3d7
	movsd	QWORD PTR [ecx+1360], xmm0

; 211  : 			CommChannel = 13;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1388], 13		; 0000000dH
	jmp	SHORT $LN33@ExecCOMM2M
$LN35@ExecCOMM2M:

; 212  : 		}
; 213  : 		else if(VM->radiofilter[1] == rcfTower)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [ecx+eax+136], 15		; 0000000fH
	jne	SHORT $LN33@ExecCOMM2M

; 214  : 		{
; 215  : 			VHFChann = 176.35;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40660b3333333333
	movsd	QWORD PTR [edx+1360], xmm0

; 216  : 			CommChannel = 14;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 14		; 0000000eH
$LN33@ExecCOMM2M:

; 217  : 		}
; 218  : 	}
; 219  : 	else

	jmp	SHORT $LN32@ExecCOMM2M
$LN64@ExecCOMM2M:

; 220  : 		CommChannel = 8;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 8
$LN32@ExecCOMM2M:

; 221  : 
; 222  : 	if(PREVHF == 1)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN31@ExecCOMM2M

; 223  : 		VHFChann = 40.39;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@404431eb851eb852
	movsd	QWORD PTR [eax+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN31@ExecCOMM2M:

; 224  : 	else if(PREVHF == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	ucomiss	xmm0, DWORD PTR __real@40000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN29@ExecCOMM2M

; 225  : 		VHFChann = 36.72;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40425c28f5c28f5c
	movsd	QWORD PTR [edx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN29@ExecCOMM2M:

; 226  : 	else if(PREVHF == 3)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	ucomiss	xmm0, DWORD PTR __real@40400000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN27@ExecCOMM2M

; 227  : 		VHFChann = 29.05;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@403d0ccccccccccd
	movsd	QWORD PTR [ecx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN27@ExecCOMM2M:

; 228  : 	else if(PREVHF == 4)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	ucomiss	xmm0, DWORD PTR __real@40800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@ExecCOMM2M

; 229  : 		VHFChann = 45.62;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4046cf5c28f5c28f
	movsd	QWORD PTR [eax+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN25@ExecCOMM2M:

; 230  : 	else if(PREVHF == 5)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	ucomiss	xmm0, DWORD PTR __real@40a00000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN23@ExecCOMM2M

; 231  : 		VHFChann = 27.02;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@403b051eb851eb85
	movsd	QWORD PTR [edx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN23@ExecCOMM2M:

; 232  : 	else if(PREVHF == 6)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	ucomiss	xmm0, DWORD PTR __real@40c00000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN21@ExecCOMM2M

; 233  : 		VHFChann = 53.62;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@404acf5c28f5c28f
	movsd	QWORD PTR [ecx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN21@ExecCOMM2M:

; 234  : 	else if(PREVHF == 7)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	ucomiss	xmm0, DWORD PTR __real@40e00000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN19@ExecCOMM2M

; 235  : 		VHFChann = 58.80;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@404d666666666666
	movsd	QWORD PTR [eax+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN19@ExecCOMM2M:

; 236  : 	else if(PREVHF == 8)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	ucomiss	xmm0, DWORD PTR __real@41000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN17@ExecCOMM2M

; 237  : 		VHFChann = 36.72;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40425c28f5c28f5c
	movsd	QWORD PTR [edx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN17@ExecCOMM2M:

; 238  : 	else if(PREVHF == 9)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	ucomiss	xmm0, DWORD PTR __real@41100000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@ExecCOMM2M

; 239  : 		VHFChann = 29.05;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@403d0ccccccccccd
	movsd	QWORD PTR [ecx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN15@ExecCOMM2M:

; 240  : 	else if(PREVHF == 10)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	ucomiss	xmm0, DWORD PTR __real@41200000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@ExecCOMM2M

; 241  : 		VHFChann = 45.62;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4046cf5c28f5c28f
	movsd	QWORD PTR [eax+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN13@ExecCOMM2M:

; 242  : 	else if(PREVHF == 11)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	ucomiss	xmm0, DWORD PTR __real@41300000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@ExecCOMM2M

; 243  : 		VHFChann = 27.02;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@403b051eb851eb85
	movsd	QWORD PTR [edx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN11@ExecCOMM2M:

; 244  : 	else if(PREVHF == 12)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	ucomiss	xmm0, DWORD PTR __real@41400000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@ExecCOMM2M

; 245  : 		VHFChann = 53.62;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@404acf5c28f5c28f
	movsd	QWORD PTR [ecx+1360], xmm0
	jmp	$LN3@ExecCOMM2M
$LN9@ExecCOMM2M:

; 246  : 	else if(PREVHF == 13)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	ucomiss	xmm0, DWORD PTR __real@41500000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@ExecCOMM2M

; 247  : 		VHFChann = 58.80;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@404d666666666666
	movsd	QWORD PTR [eax+1360], xmm0
	jmp	SHORT $LN3@ExecCOMM2M
$LN7@ExecCOMM2M:

; 248  : 	else if(PREVHF == 14)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	ucomiss	xmm0, DWORD PTR __real@41600000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@ExecCOMM2M

; 249  : 		VHFChann = 58.80;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@404d666666666666
	movsd	QWORD PTR [edx+1360], xmm0
	jmp	SHORT $LN3@ExecCOMM2M
$LN5@ExecCOMM2M:

; 250  : 	else if(PREVHF == 15)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	ucomiss	xmm0, DWORD PTR __real@41700000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@ExecCOMM2M

; 251  :   		VHFChann = 122.10;//Cobra 10/31/04 TJL

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@405e866666666666
	movsd	QWORD PTR [ecx+1360], xmm0
$LN3@ExecCOMM2M:

; 252  : 	if(gNavigationSys->GetControlSrc() == NavigationSystem::AUXCOMM)

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ ; NavigationSystem::GetControlSrc
	cmp	eax, 1
	jne	SHORT $LN2@ExecCOMM2M

; 253  : 		VHFBackup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VHFBackup@ICPClass@@QAEXXZ		; ICPClass::VHFBackup

; 254  : 	else

	jmp	$LN1@ExecCOMM2M
$LN2@ExecCOMM2M:

; 255  : 	{
; 256  : 		//Line1
; 257  : 		FillDEDMatrix(0,10,"VHF  ON");

	push	0
	push	OFFSET ??_C@_07NDLOCAPE@VHF?5?5ON?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 258  : 		//Line2
; 259  : 		FillDEDMatrix(1,3,"512.26");

	push	0
	push	OFFSET ??_C@_06GCBBONBM@512?426?$AA@
	push	3
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 260  : 		//Line3
; 261  : 		PossibleInputs = 5;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 5

; 262  : 		ScratchPad(2,15,22);

	push	22					; 00000016H
	push	15					; 0000000fH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 263  : 		//Line4
; 264  : 		FillDEDMatrix(3,2,"PRE");

	push	0
	push	OFFSET ??_C@_03PHIAGONP@PRE?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 265  : 		sprintf(tempstr, "%1.0f", PREVHF);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+1348]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NCDMKKFD@?$CF1?40f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 266  : 		FillDEDMatrix(3,10,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 267  : 		FillDEDMatrix(3,13,"\x01");

	push	0
	push	OFFSET ??_C@_01KHDNNMEB@?$AB?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 268  : 		//Line5
; 269  : 		sprintf(tempstr, "%3.2f", VHFChann);

	mov	eax, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+1360]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05KLHICNFN@?$CF3?42f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 270  : 		FillDEDMatrix(4,6,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	6
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 271  : 		FillDEDMatrix(4,20,"WB");

	push	0
	push	OFFSET ??_C@_02KLACDDFP@WB?$AA@
	push	20					; 00000014H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecCOMM2M:

; 272  : 	}
; 273  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecCOMM2Mode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecCOMM2Mode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpcomm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecCOMM1Mode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecCOMM1Mode
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 
; 39   : 	//change our active radio
; 40   : 	WhichRadio = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1496], 0

; 41   : 	if(VM)

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	$LN64@ExecCOMM1M

; 42   : 	{
; 43   : 		if(VM->radiofilter[0] == rcfOff)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 0
	jne	SHORT $LN63@ExecCOMM1M

; 44   : 			CommChannel = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 0
	jmp	$LN33@ExecCOMM1M
$LN63@ExecCOMM1M:

; 45   : 		else if(VM->radiofilter[0] == rcfFlight1)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 1
	jne	SHORT $LN61@ExecCOMM1M

; 46   : 			CommChannel = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 1
	jmp	$LN33@ExecCOMM1M
$LN61@ExecCOMM1M:

; 47   : 		else if(VM->radiofilter[0] == rcfFlight2)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 2
	jne	SHORT $LN59@ExecCOMM1M

; 48   : 			CommChannel = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 2
	jmp	$LN33@ExecCOMM1M
$LN59@ExecCOMM1M:

; 49   : 		else if(VM->radiofilter[0] == rcfFlight3)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 3
	jne	SHORT $LN57@ExecCOMM1M

; 50   : 			CommChannel = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 3
	jmp	$LN33@ExecCOMM1M
$LN57@ExecCOMM1M:

; 51   : 		else if(VM->radiofilter[0] == rcfFlight4)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 4
	jne	SHORT $LN55@ExecCOMM1M

; 52   : 			CommChannel = 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 4
	jmp	$LN33@ExecCOMM1M
$LN55@ExecCOMM1M:

; 53   : 		else if(VM->radiofilter[0] == rcfFlight5)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 5
	jne	SHORT $LN53@ExecCOMM1M

; 54   : 			CommChannel = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 5
	jmp	$LN33@ExecCOMM1M
$LN53@ExecCOMM1M:

; 55   : 		else if(VM->radiofilter[0] == rcfPackage1)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 6
	jne	SHORT $LN51@ExecCOMM1M

; 56   : 			CommChannel = 6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 6
	jmp	$LN33@ExecCOMM1M
$LN51@ExecCOMM1M:

; 57   : 		else if(VM->radiofilter[0] == rcfPackage2)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 7
	jne	SHORT $LN49@ExecCOMM1M

; 58   : 			CommChannel = 7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 7
	jmp	$LN33@ExecCOMM1M
$LN49@ExecCOMM1M:

; 59   : 		else if(VM->radiofilter[0] == rcfPackage3)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 8
	jne	SHORT $LN47@ExecCOMM1M

; 60   : 			CommChannel = 8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 8
	jmp	$LN33@ExecCOMM1M
$LN47@ExecCOMM1M:

; 61   : 		else if(VM->radiofilter[0] == rcfPackage4)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 9
	jne	SHORT $LN45@ExecCOMM1M

; 62   : 			CommChannel = 9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 9
	jmp	$LN33@ExecCOMM1M
$LN45@ExecCOMM1M:

; 63   : 		else if(VM->radiofilter[0] == rcfPackage5)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 10		; 0000000aH
	jne	SHORT $LN43@ExecCOMM1M

; 64   : 			CommChannel = 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 10		; 0000000aH
	jmp	$LN33@ExecCOMM1M
$LN43@ExecCOMM1M:

; 65   : 		else if(VM->radiofilter[0] == rcfFromPackage)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 11		; 0000000bH
	jne	SHORT $LN41@ExecCOMM1M

; 66   : 			CommChannel = 11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 11		; 0000000bH
	jmp	$LN33@ExecCOMM1M
$LN41@ExecCOMM1M:

; 67   : 		else if(VM->radiofilter[0] == rcfProx)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 12		; 0000000cH
	jne	SHORT $LN39@ExecCOMM1M

; 68   : 			CommChannel = 12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 12		; 0000000cH
	jmp	SHORT $LN33@ExecCOMM1M
$LN39@ExecCOMM1M:

; 69   : 		else if(VM->radiofilter[0] == rcfTeam)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 13		; 0000000dH
	jne	SHORT $LN37@ExecCOMM1M

; 70   : 			CommChannel = 13;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 13		; 0000000dH
	jmp	SHORT $LN33@ExecCOMM1M
$LN37@ExecCOMM1M:

; 71   : 		else if(VM->radiofilter[0] == rcfAll)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 14		; 0000000eH
	jne	SHORT $LN35@ExecCOMM1M

; 72   : 			CommChannel = 14;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 14		; 0000000eH
	jmp	SHORT $LN33@ExecCOMM1M
$LN35@ExecCOMM1M:

; 73   : 		else if(VM->radiofilter[0] == rcfTower)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	cmp	DWORD PTR [edx+ecx+136], 15		; 0000000fH
	jne	SHORT $LN33@ExecCOMM1M

; 74   : 			CommChannel = 15;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1388], 15		; 0000000fH
$LN33@ExecCOMM1M:

; 75   : 	}
; 76   : 	else

	jmp	SHORT $LN32@ExecCOMM1M
$LN64@ExecCOMM1M:

; 77   : 		CommChannel = 8;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1388], 8
$LN32@ExecCOMM1M:

; 78   : 
; 79   : 	if(PREUHF == 1)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN31@ExecCOMM1M

; 80   : 		UHFChann = 125.32;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@405f547ae147ae14
	movsd	QWORD PTR [eax+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN31@ExecCOMM1M:

; 81   : 	else if(PREUHF == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	ucomiss	xmm0, DWORD PTR __real@40000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN29@ExecCOMM1M

; 82   : 		UHFChann = 106.95;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@405abccccccccccd
	movsd	QWORD PTR [edx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN29@ExecCOMM1M:

; 83   : 	else if(PREUHF == 3)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	ucomiss	xmm0, DWORD PTR __real@40400000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN27@ExecCOMM1M

; 84   : 		UHFChann = 140.75;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4061980000000000
	movsd	QWORD PTR [ecx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN27@ExecCOMM1M:

; 85   : 	else if(PREUHF == 4)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	ucomiss	xmm0, DWORD PTR __real@40800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@ExecCOMM1M

; 86   : 		UHFChann = 123.62;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@405ee7ae147ae148
	movsd	QWORD PTR [eax+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN25@ExecCOMM1M:

; 87   : 	else if(PREUHF == 5)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	ucomiss	xmm0, DWORD PTR __real@40a00000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN23@ExecCOMM1M

; 88   : 		UHFChann = 142.02;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4061c0a3d70a3d71
	movsd	QWORD PTR [edx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN23@ExecCOMM1M:

; 89   : 	else if(PREUHF == 6)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	ucomiss	xmm0, DWORD PTR __real@40c00000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN21@ExecCOMM1M

; 90   : 		UHFChann = 185.62;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406733d70a3d70a4
	movsd	QWORD PTR [ecx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN21@ExecCOMM1M:

; 91   : 	else if(PREUHF == 7)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	ucomiss	xmm0, DWORD PTR __real@40e00000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN19@ExecCOMM1M

; 92   : 		UHFChann = 262.80;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40706ccccccccccd
	movsd	QWORD PTR [eax+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN19@ExecCOMM1M:

; 93   : 	else if(PREUHF == 8)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	ucomiss	xmm0, DWORD PTR __real@41000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN17@ExecCOMM1M

; 94   : 		UHFChann = 142.80;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4061d9999999999a
	movsd	QWORD PTR [edx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN17@ExecCOMM1M:

; 95   : 	else if(PREUHF == 9)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	ucomiss	xmm0, DWORD PTR __real@41100000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@ExecCOMM1M

; 96   : 		UHFChann = 322.70;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40742b3333333333
	movsd	QWORD PTR [ecx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN15@ExecCOMM1M:

; 97   : 	else if(PREUHF == 10)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	ucomiss	xmm0, DWORD PTR __real@41200000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@ExecCOMM1M

; 98   : 		UHFChann = 362.60;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4076a9999999999a
	movsd	QWORD PTR [eax+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN13@ExecCOMM1M:

; 99   : 	else if(PREUHF == 11)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	ucomiss	xmm0, DWORD PTR __real@41300000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@ExecCOMM1M

; 100  : 		UHFChann = 322.20;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4074233333333333
	movsd	QWORD PTR [edx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN11@ExecCOMM1M:

; 101  : 	else if(PREUHF == 12)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	ucomiss	xmm0, DWORD PTR __real@41400000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@ExecCOMM1M

; 102  : 		UHFChann = 362.40;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@4076a66666666666
	movsd	QWORD PTR [ecx+1352], xmm0
	jmp	$LN3@ExecCOMM1M
$LN9@ExecCOMM1M:

; 103  : 	else if(PREUHF == 13)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	ucomiss	xmm0, DWORD PTR __real@41500000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@ExecCOMM1M

; 104  : 		UHFChann = 222.80;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@406bd9999999999a
	movsd	QWORD PTR [eax+1352], xmm0
	jmp	SHORT $LN3@ExecCOMM1M
$LN7@ExecCOMM1M:

; 105  : 	else if(PREUHF == 14)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	ucomiss	xmm0, DWORD PTR __real@41600000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@ExecCOMM1M

; 106  : 		UHFChann = 263.80;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40707ccccccccccd
	movsd	QWORD PTR [edx+1352], xmm0
	jmp	SHORT $LN3@ExecCOMM1M
$LN5@ExecCOMM1M:

; 107  : 	else if(PREUHF == 15)//Cobra TJL 10/31/04

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	ucomiss	xmm0, DWORD PTR __real@41700000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@ExecCOMM1M

; 108  : 		UHFChann = 308.80;

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40734ccccccccccd
	movsd	QWORD PTR [ecx+1352], xmm0
$LN3@ExecCOMM1M:

; 109  : 		
; 110  : 
; 111  : 	if(gNavigationSys->GetControlSrc() == NavigationSystem::AUXCOMM)

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ ; NavigationSystem::GetControlSrc
	cmp	eax, 1
	jne	SHORT $LN2@ExecCOMM1M

; 112  : 		UHFBackup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UHFBackup@ICPClass@@QAEXXZ		; ICPClass::UHFBackup

; 113  : 	else

	jmp	$LN1@ExecCOMM1M
$LN2@ExecCOMM1M:

; 114  : 	{
; 115  : 		//Line1
; 116  : 		FillDEDMatrix(0,10,"UHF  BOTH");  // MD -- 20031121: oops, fixed UFH typo

	push	0
	push	OFFSET ??_C@_09LDLAIMHJ@UHF?5?5BOTH?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 117  : 		//Line2
; 118  : 		sprintf(tempstr,"%d",CommChannel);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1388]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 119  : 		FillDEDMatrix(1,9,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	9
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 120  : 		//Line3
; 121  : 		PossibleInputs = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 5

; 122  : 		ScratchPad(2,15,22);

	push	22					; 00000016H
	push	15					; 0000000fH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 123  : 		//Line4
; 124  : 		FillDEDMatrix(3,2,"PRE");

	push	0
	push	OFFSET ??_C@_03PHIAGONP@PRE?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 125  : 		sprintf(tempstr, "%1.0f", PREUHF);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+1344]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NCDMKKFD@?$CF1?40f?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 126  : 		FillDEDMatrix(3,10,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 127  : 		FillDEDMatrix(3,13,"\x01");

	push	0
	push	OFFSET ??_C@_01KHDNNMEB@?$AB?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 128  : 		FillDEDMatrix(3,19, "TOD");

	push	0
	push	OFFSET ??_C@_03HFAHPIOK@TOD?$AA@
	push	19					; 00000013H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 129  : 		//Line5
; 130  : 		sprintf(tempstr,"%3.2f",UHFChann);

	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+1352]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05KLHICNFN@?$CF3?42f?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 131  : 		FillDEDMatrix(4,6,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	6
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 132  : 		FillDEDMatrix(4,20,"NB");

	push	0
	push	OFFSET ??_C@_02LIPFKLKA@NB?$AA@
	push	20					; 00000014H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecCOMM1M:

; 133  : 	}
; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecCOMM1Mode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecCOMM1Mode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpcomm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_button$ = 8						; size = 4
___formal$ = 12						; size = 4
?PNUpdateCOMMMode@ICPClass@@QAEXHH@Z PROC		; ICPClass::PNUpdateCOMMMode
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	$LN20@PNUpdateCO

; 277  : 	{
; 278  : 		//MI Original Code
; 279  : 		if(button == PREV_BUTTON) 

	cmp	DWORD PTR _button$[ebp], 13		; 0000000dH
	jne	SHORT $LN19@PNUpdateCO

; 280  : 		{
; 281  : 			if(gNavigationSys->GetUHFSrc() == NavigationSystem::UHF_NORM) {

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetUHFSrc@NavigationSystem@@QAE?AW4UHF_Mode_Type@1@XZ ; NavigationSystem::GetUHFSrc
	test	eax, eax
	jne	SHORT $LN18@PNUpdateCO

; 282  : 
; 283  : 				if(GetICPTertiaryMode() == COMM1_MODE) 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetICPTertiaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPTertiaryMode
	cmp	eax, 6
	jne	SHORT $LN17@PNUpdateCO

; 284  : 				{
; 285  : 					VM->BackwardCycleFreq(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?BackwardCycleFreq@VoiceManager@@QAEXH@Z ; VoiceManager::BackwardCycleFreq

; 286  : 				}
; 287  : 				else 

	jmp	SHORT $LN18@PNUpdateCO
$LN17@PNUpdateCO:

; 288  : 				{
; 289  : 					VM->BackwardCycleFreq(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?BackwardCycleFreq@VoiceManager@@QAEXH@Z ; VoiceManager::BackwardCycleFreq
$LN18@PNUpdateCO:

; 290  : 				}
; 291  : 			}
; 292  : 		}
; 293  : 		else 

	jmp	SHORT $LN15@PNUpdateCO
$LN19@PNUpdateCO:

; 294  : 		{
; 295  : 			if(gNavigationSys->GetUHFSrc() == NavigationSystem::UHF_NORM) 

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetUHFSrc@NavigationSystem@@QAE?AW4UHF_Mode_Type@1@XZ ; NavigationSystem::GetUHFSrc
	test	eax, eax
	jne	SHORT $LN15@PNUpdateCO

; 296  : 			{
; 297  : 				if(GetICPTertiaryMode() == COMM1_MODE) 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetICPTertiaryMode@ICPClass@@QAEJXZ	; ICPClass::GetICPTertiaryMode
	cmp	eax, 6
	jne	SHORT $LN13@PNUpdateCO

; 298  : 				{
; 299  : 					VM->ForwardCycleFreq(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ForwardCycleFreq@VoiceManager@@QAEXH@Z	; VoiceManager::ForwardCycleFreq

; 300  : 				}
; 301  : 				else 

	jmp	SHORT $LN15@PNUpdateCO
$LN13@PNUpdateCO:

; 302  : 				{
; 303  : 					VM->ForwardCycleFreq(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ForwardCycleFreq@VoiceManager@@QAEXH@Z	; VoiceManager::ForwardCycleFreq
$LN15@PNUpdateCO:

; 304  : 				}
; 305  : 			}
; 306  : 		}
; 307  : 
; 308  : 		mUpdateFlags |= CNI_UPDATE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	or	edx, 256				; 00000100H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx

; 309  : 	}
; 310  : 	else

	jmp	$LN21@PNUpdateCO
$LN20@PNUpdateCO:

; 311  : 	{
; 312  : 		//MI Modified stuff
; 313  : 		if(button == PREV_BUTTON) 

	cmp	DWORD PTR _button$[ebp], 13		; 0000000dH
	jne	SHORT $LN10@PNUpdateCO

; 314  : 		{
; 315  : 			if(gNavigationSys->GetUHFSrc() == NavigationSystem::UHF_NORM) 

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetUHFSrc@NavigationSystem@@QAE?AW4UHF_Mode_Type@1@XZ ; NavigationSystem::GetUHFSrc
	test	eax, eax
	jne	SHORT $LN9@PNUpdateCO

; 316  : 			{
; 317  : 				if(IsICPSet(ICPClass::EDIT_UHF))

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN8@PNUpdateCO

; 318  : 					VM->BackwardCycleFreq(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?BackwardCycleFreq@VoiceManager@@QAEXH@Z ; VoiceManager::BackwardCycleFreq
	jmp	SHORT $LN9@PNUpdateCO
$LN8@PNUpdateCO:

; 319  : 				else if(IsICPSet(ICPClass::EDIT_VHF))

	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN9@PNUpdateCO

; 320  : 					VM->BackwardCycleFreq(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?BackwardCycleFreq@VoiceManager@@QAEXH@Z ; VoiceManager::BackwardCycleFreq
$LN9@PNUpdateCO:

; 321  : 			}
; 322  : 		}
; 323  : 		else 

	jmp	SHORT $LN21@PNUpdateCO
$LN10@PNUpdateCO:

; 324  : 		{
; 325  : 			if(gNavigationSys->GetUHFSrc() == NavigationSystem::UHF_NORM) 

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetUHFSrc@NavigationSystem@@QAE?AW4UHF_Mode_Type@1@XZ ; NavigationSystem::GetUHFSrc
	test	eax, eax
	jne	SHORT $LN21@PNUpdateCO

; 326  : 			{
; 327  : 				if(IsICPSet(ICPClass::EDIT_UHF))

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN3@PNUpdateCO

; 328  : 					VM->ForwardCycleFreq(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ForwardCycleFreq@VoiceManager@@QAEXH@Z	; VoiceManager::ForwardCycleFreq
	jmp	SHORT $LN21@PNUpdateCO
$LN3@PNUpdateCO:

; 329  : 				else if(IsICPSet(ICPClass::EDIT_VHF))

	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN21@PNUpdateCO

; 330  : 					VM->ForwardCycleFreq(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?ForwardCycleFreq@VoiceManager@@QAEXH@Z	; VoiceManager::ForwardCycleFreq
$LN21@PNUpdateCO:

; 331  : 			}
; 332  : 		}
; 333  : 	}
; 334  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?PNUpdateCOMMMode@ICPClass@@QAEXHH@Z ENDP		; ICPClass::PNUpdateCOMMMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpcomm.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ENTRUpdateCOMMMode@ICPClass@@QAEXXZ PROC		; ICPClass::ENTRUpdateCOMMMode
; _this$ = ecx

; 336  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 
; 338  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ENTRUpdateCOMMMode@ICPClass@@QAEXXZ ENDP		; ICPClass::ENTRUpdateCOMMMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
