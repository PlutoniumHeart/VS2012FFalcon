; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\IcpLIST.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_cosf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?ExecLISTMode@ICPClass@@QAEXXZ			; ICPClass::ExecLISTMode
PUBLIC	?ExecDESTMode@ICPClass@@QAEXXZ			; ICPClass::ExecDESTMode
PUBLIC	?ExecOA1Mode@ICPClass@@QAEXXZ			; ICPClass::ExecOA1Mode
PUBLIC	?ExecOA2Mode@ICPClass@@QAEXXZ			; ICPClass::ExecOA2Mode
PUBLIC	?ExecBingo@ICPClass@@QAEXXZ			; ICPClass::ExecBingo
PUBLIC	?ExecVIPMode@ICPClass@@QAEXXZ			; ICPClass::ExecVIPMode
PUBLIC	?ExecNAVMode@ICPClass@@QAEXXZ			; ICPClass::ExecNAVMode
PUBLIC	?ExecMANMode@ICPClass@@QAEXXZ			; ICPClass::ExecMANMode
PUBLIC	?ExecINSMode@ICPClass@@QAEXXZ			; ICPClass::ExecINSMode
PUBLIC	?ExecEWSMode@ICPClass@@QAEXXZ			; ICPClass::ExecEWSMode
PUBLIC	?ChaffPGM@ICPClass@@QAEXXZ			; ICPClass::ChaffPGM
PUBLIC	?FlarePGM@ICPClass@@QAEXXZ			; ICPClass::FlarePGM
PUBLIC	?ExecMODEMode@ICPClass@@QAEXXZ			; ICPClass::ExecMODEMode
PUBLIC	?UpdateMODEMode@ICPClass@@QAEXXZ		; ICPClass::UpdateMODEMode
PUBLIC	?ExecVRPMode@ICPClass@@QAEXXZ			; ICPClass::ExecVRPMode
PUBLIC	?ExecINTGMode@ICPClass@@QAEXXZ			; ICPClass::ExecINTGMode
PUBLIC	?IsICPSet@ICPClass@@QAEHH@Z			; ICPClass::IsICPSet
PUBLIC	?IsIFFSet@ICPClass@@QAEHH@Z			; ICPClass::IsIFFSet
PUBLIC	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_04PCOPKCKE@LIST?$AA@			; `string'
PUBLIC	??_C@_01KHDNNMEB@?$AB?$AA@			; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_04IIEJFGNN@DEST?$AA@			; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_04GCBBOEEK@BNGO?$AA@			; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_03PFCNJLIG@VIP?$AA@			; `string'
PUBLIC	??_C@_01DGKLNCNG@R?$AA@				; `string'
PUBLIC	??_C@_04MDHIECHK@INTG?$AA@			; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_03DIMJBCMI@NAV?$AA@			; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN?$AA@			; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_03NDDFJJAJ@INS?$AA@			; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_04CMOFCHOK@DLNK?$AA@			; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_03IKBELOEO@EWS?$AA@			; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_04KAFEECCN@MODE?$AA@			; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_03OFFONHBH@VRP?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_04MKAMAPIC@MISC?$AA@			; `string'
PUBLIC	??_C@_09DGMPCDFL@DEST?5?5DIR?$AA@		; `string'
PUBLIC	??_C@_0M@JJFFFDAK@?$CF3d?$CK0?$CF2?42f?8?$AA@	; `string'
PUBLIC	??_C@_0L@OPDFOOKO@?$CF3d?$CK?$CF2?42f?8?$AA@	; `string'
PUBLIC	??_C@_06BOCKAEBL@LAT?5?5N?$AA@			; `string'
PUBLIC	??_C@_01IMBAIPIC@?$AC?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_06CLMIICFH@LNG?5?5E?$AA@			; `string'
PUBLIC	??_C@_04OCLMINKH@ELEV?$AA@			; `string'
PUBLIC	??_C@_07FPGNNANI@?$CF4?40fFT?$AA@		; `string'
PUBLIC	??_C@_03HAIEHMHM@TOS?$AA@			; `string'
PUBLIC	??_C@_09KBANMNIG@DEST?5?5OA1?$AA@		; `string'
PUBLIC	??_C@_03HKIDJOMC@RNG?$AA@			; `string'
PUBLIC	??_C@_04COHIKBOA@?$CFdFT?$AA@			; `string'
PUBLIC	??_C@_03DPKGJDEJ@BRG?$AA@			; `string'
PUBLIC	??_C@_06NNABEIOP@?$CF3?41f?8?$AA@		; `string'
PUBLIC	??_C@_09IKCAJOEF@DEST?5?5OA2?$AA@		; `string'
PUBLIC	??_C@_05CALBCIIC@BINGO?$AA@			; `string'
PUBLIC	??_C@_03KPIFFHNE@SET?$AA@			; `string'
PUBLIC	??_C@_05GKHKKECO@TOTAL?$AA@			; `string'
PUBLIC	??_C@_05EGKEKLOI@?$CFdLBS?$AA@			; `string'
PUBLIC	??_C@_0L@IJFFEGKH@VIP?9TO?9TGT?$AA@		; `string'
PUBLIC	??_C@_08NPBNGOAB@VIP?5?58?5?$AB?$AA@		; `string'
PUBLIC	??_C@_04BFFDNCED@TBRG?$AA@			; `string'
PUBLIC	??_C@_0L@MGDPPIMF@NAV?5STATUS?$AA@		; `string'
PUBLIC	??_C@_0BB@PBGHOLNB@SYS?5ACCUR?5?5?5HIGH?$AA@	; `string'
PUBLIC	??_C@_0BB@EIEFFLLN@GPS?5ACCUR?5?5?5HIGH?$AA@	; `string'
PUBLIC	??_C@_07DIGHFMHP@MSN?5DUR?$AA@			; `string'
PUBLIC	??_C@_04EFPNNCJL@DAYS?$AA@			; `string'
PUBLIC	??_C@_09OOCGLNDP@KEY?5VALID?$AA@		; `string'
PUBLIC	??_C@_05PEKKFJNG@WSPAN?$AA@			; `string'
PUBLIC	??_C@_04IFDHODFC@MBAL?$AA@			; `string'
PUBLIC	??_C@_03IEFALBGA@0FT?$AA@			; `string'
PUBLIC	??_C@_03EHDBJKGI@TOF?$AA@			; `string'
PUBLIC	??_C@_06CCMKKKLC@0?40SEC?$AA@			; `string'
PUBLIC	??_C@_06NOIEBBEC@?$CF2?41f?1?$AA@		; `string'
PUBLIC	??_C@_02PLJDPFIO@00?$AA@			; `string'
PUBLIC	??_C@_03KDFFCEML@RDY?$AA@			; `string'
PUBLIC	??_C@_03NDEAONJP@?5?5?5?$AA@			; `string'
PUBLIC	??_C@_04MCJBGOFF@SALT?$AA@			; `string'
PUBLIC	??_C@_04GCEFONOF@THDG?$AA@			; `string'
PUBLIC	??_C@_03HKPPEPCN@G?1S?$AA@			; `string'
PUBLIC	??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@		; `string'
PUBLIC	??_C@_0M@PNHEFLEE@INS?508?40?110?$AA@		; `string'
PUBLIC	??_C@_0BF@DICBMHG@LAT?5?5N?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@IGBAJDBN@LAT?5?5N?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@JFNCPKEJ@LNG?5?5E?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@NPFOCCFH@LNG?5?5E?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@ ; `string'
PUBLIC	??_C@_0N@IBNBHHJE@THDG?5?5228?42?$CK?$AA@	; `string'
PUBLIC	??_C@_0N@JPKENNEE@EWS?5?5CONTROL?$AA@		; `string'
PUBLIC	??_C@_02EKMCNAHJ@CH?$AA@			; `string'
PUBLIC	??_C@_06EMBJMLFN@REQJAM?$AA@			; `string'
PUBLIC	??_C@_03GLLFCHKL@?5ON?$AA@			; `string'
PUBLIC	??_C@_03MPPIHBHJ@OFF?$AA@			; `string'
PUBLIC	??_C@_02CIGFNHJG@FL?$AA@			; `string'
PUBLIC	??_C@_04JKILKFAB@FDBK?$AA@			; `string'
PUBLIC	??_C@_02LNCFOLKC@O1?$AA@			; `string'
PUBLIC	??_C@_06OGKGOLNC@REQCTR?$AA@			; `string'
PUBLIC	??_C@_02JGAILIGB@O2?$AA@			; `string'
PUBLIC	??_C@_0BB@FBDPMPIO@CMDS?5?5CHAFF?5?5PGM?$AA@	; `string'
PUBLIC	??_C@_02NAAABDFG@BQ?$AA@			; `string'
PUBLIC	??_C@_02OHLFFGPO@?50?$AA@			; `string'
PUBLIC	??_C@_05KHKKLCAB@?$CF2?40d?$AA@			; `string'
PUBLIC	??_C@_02FCBLILAP@BI?$AA@			; `string'
PUBLIC	??_C@_05NAHKBEAK@?$CF1?43f?$AA@			; `string'
PUBLIC	??_C@_02MNOENKBB@SQ?$AA@			; `string'
PUBLIC	??_C@_02EPPPECEI@SI?$AA@			; `string'
PUBLIC	??_C@_05NBLIHODN@?$CF1?42f?$AA@			; `string'
PUBLIC	??_C@_0BB@OAJKOGPK@CMDS?5?5FLARE?5?5PGM?$AA@	; `string'
PUBLIC	??_C@_0L@EGJEPCMN@TGT?9TO?9VRP?$AA@		; `string'
PUBLIC	??_C@_09GCLAPBGN@TGT?5?5?59?5?$AB?$AA@		; `string'
PUBLIC	??_C@_07HAPJDOIE@INTG?5ON?$AA@			; `string'
PUBLIC	??_C@_03GHGKPJIJ@CPL?$AA@			; `string'
PUBLIC	??_C@_02LOKBDPMM@M1?$AA@			; `string'
PUBLIC	??_C@_02NBHMMMHK@13?$AA@			; `string'
PUBLIC	??_C@_02KDKICELI@MC?$AA@			; `string'
PUBLIC	??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@			; `string'
PUBLIC	??_C@_02JFIMGMAP@M2?$AA@			; `string'
PUBLIC	??_C@_04GCLJABMA@1234?$AA@			; `string'
PUBLIC	??_C@_02MDNGMLIJ@M4?$AA@			; `string'
PUBLIC	??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@		; `string'
PUBLIC	??_C@_02IMJHFNEO@M3?$AA@			; `string'
PUBLIC	??_C@_04GGHKDNGG@4000?$AA@			; `string'
PUBLIC	??_C@_08IPOIHKDN@RST?5?5?$CI7?$CJ?$AA@		; `string'
PUBLIC	??_C@_08ECJFAHDM@INTG?5OFF?$AA@			; `string'
PUBLIC	??_C@_04BKMIICND@B?$CI6?$CJ?$AA@		; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f17ac60
PUBLIC	__real@41200000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@45be3840
PUBLIC	__real@4b9fa682
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_sprintf:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?ScratchPad@ICPClass@@QAEXHHH@Z:PROC		; ICPClass::ScratchPad
EXTRN	?FormatTime@ICPClass@@QAEXJPAD@Z:PROC		; ICPClass::FormatTime
EXTRN	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z:PROC	; ICPClass::FillDEDMatrix
EXTRN	?AddSTPT@ICPClass@@QAEXHH@Z:PROC		; ICPClass::AddSTPT
EXTRN	?ShowFlareIndex@ICPClass@@QAEXHH@Z:PROC		; ICPClass::ShowFlareIndex
EXTRN	?ShowChaffIndex@ICPClass@@QAEXHH@Z:PROC		; ICPClass::ShowChaffIndex
EXTRN	?GetINSInfo@ICPClass@@QAEXXZ:PROC		; ICPClass::GetINSInfo
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z:PROC ; CockpitManager::GetButtonPointer
EXTRN	?SimICPNav1@@YAXKHPAX@Z:PROC			; SimICPNav1
EXTRN	?SimICPAA1@@YAXKHPAX@Z:PROC			; SimICPAA1
EXTRN	?SimICPAG1@@YAXKHPAX@Z:PROC			; SimICPAG1
EXTRN	?Distance@@YAMMMMM@Z:PROC			; Distance
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?FALCON_ORIGIN_LAT@@3MA:DWORD			; FALCON_ORIGIN_LAT
EXTRN	?FALCON_ORIGIN_LONG@@3MA:DWORD			; FALCON_ORIGIN_LONG
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?g_bINS@@3_NA:BYTE				; g_bINS
EXTRN	?g_bIFF@@3_NA:BYTE				; g_bIFF
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4b9fa682
CONST	SEGMENT
__real@4b9fa682 DD 04b9fa682r			; 2.09257e+007
CONST	ENDS
;	COMDAT __real@45be3840
CONST	SEGMENT
__real@45be3840 DD 045be3840r			; 6087.03
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKMIICND@B?$CI6?$CJ?$AA@
CONST	SEGMENT
??_C@_04BKMIICND@B?$CI6?$CJ?$AA@ DB 'B(6)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ECJFAHDM@INTG?5OFF?$AA@
CONST	SEGMENT
??_C@_08ECJFAHDM@INTG?5OFF?$AA@ DB 'INTG OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPOIHKDN@RST?5?5?$CI7?$CJ?$AA@
CONST	SEGMENT
??_C@_08IPOIHKDN@RST?5?5?$CI7?$CJ?$AA@ DB 'RST  (7)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGHKDNGG@4000?$AA@
CONST	SEGMENT
??_C@_04GGHKDNGG@4000?$AA@ DB '4000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IMJHFNEO@M3?$AA@
CONST	SEGMENT
??_C@_02IMJHFNEO@M3?$AA@ DB 'M3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@
CONST	SEGMENT
??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@ DB 'A(6)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDNGMLIJ@M4?$AA@
CONST	SEGMENT
??_C@_02MDNGMLIJ@M4?$AA@ DB 'M4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCLJABMA@1234?$AA@
CONST	SEGMENT
??_C@_04GCLJABMA@1234?$AA@ DB '1234', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JFIMGMAP@M2?$AA@
CONST	SEGMENT
??_C@_02JFIMGMAP@M2?$AA@ DB 'M2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@
CONST	SEGMENT
??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@ DB '(5)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KDKICELI@MC?$AA@
CONST	SEGMENT
??_C@_02KDKICELI@MC?$AA@ DB 'MC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NBHMMMHK@13?$AA@
CONST	SEGMENT
??_C@_02NBHMMMHK@13?$AA@ DB '13', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LOKBDPMM@M1?$AA@
CONST	SEGMENT
??_C@_02LOKBDPMM@M1?$AA@ DB 'M1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHGKPJIJ@CPL?$AA@
CONST	SEGMENT
??_C@_03GHGKPJIJ@CPL?$AA@ DB 'CPL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HAPJDOIE@INTG?5ON?$AA@
CONST	SEGMENT
??_C@_07HAPJDOIE@INTG?5ON?$AA@ DB 'INTG ON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCLAPBGN@TGT?5?5?59?5?$AB?$AA@
CONST	SEGMENT
??_C@_09GCLAPBGN@TGT?5?5?59?5?$AB?$AA@ DB 'TGT   9 ', 01H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EGJEPCMN@TGT?9TO?9VRP?$AA@
CONST	SEGMENT
??_C@_0L@EGJEPCMN@TGT?9TO?9VRP?$AA@ DB 'TGT-TO-VRP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAJKOGPK@CMDS?5?5FLARE?5?5PGM?$AA@
CONST	SEGMENT
??_C@_0BB@OAJKOGPK@CMDS?5?5FLARE?5?5PGM?$AA@ DB 'CMDS  FLARE  PGM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBLIHODN@?$CF1?42f?$AA@
CONST	SEGMENT
??_C@_05NBLIHODN@?$CF1?42f?$AA@ DB '%1.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EPPPECEI@SI?$AA@
CONST	SEGMENT
??_C@_02EPPPECEI@SI?$AA@ DB 'SI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNOENKBB@SQ?$AA@
CONST	SEGMENT
??_C@_02MNOENKBB@SQ?$AA@ DB 'SQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAHKBEAK@?$CF1?43f?$AA@
CONST	SEGMENT
??_C@_05NAHKBEAK@?$CF1?43f?$AA@ DB '%1.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCBLILAP@BI?$AA@
CONST	SEGMENT
??_C@_02FCBLILAP@BI?$AA@ DB 'BI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KHKKLCAB@?$CF2?40d?$AA@
CONST	SEGMENT
??_C@_05KHKKLCAB@?$CF2?40d?$AA@ DB '%2.0d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OHLFFGPO@?50?$AA@
CONST	SEGMENT
??_C@_02OHLFFGPO@?50?$AA@ DB ' 0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NAAABDFG@BQ?$AA@
CONST	SEGMENT
??_C@_02NAAABDFG@BQ?$AA@ DB 'BQ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBDPMPIO@CMDS?5?5CHAFF?5?5PGM?$AA@
CONST	SEGMENT
??_C@_0BB@FBDPMPIO@CMDS?5?5CHAFF?5?5PGM?$AA@ DB 'CMDS  CHAFF  PGM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JGAILIGB@O2?$AA@
CONST	SEGMENT
??_C@_02JGAILIGB@O2?$AA@ DB 'O2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGKGOLNC@REQCTR?$AA@
CONST	SEGMENT
??_C@_06OGKGOLNC@REQCTR?$AA@ DB 'REQCTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNCFOLKC@O1?$AA@
CONST	SEGMENT
??_C@_02LNCFOLKC@O1?$AA@ DB 'O1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKILKFAB@FDBK?$AA@
CONST	SEGMENT
??_C@_04JKILKFAB@FDBK?$AA@ DB 'FDBK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIGFNHJG@FL?$AA@
CONST	SEGMENT
??_C@_02CIGFNHJG@FL?$AA@ DB 'FL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPPIHBHJ@OFF?$AA@
CONST	SEGMENT
??_C@_03MPPIHBHJ@OFF?$AA@ DB 'OFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLLFCHKL@?5ON?$AA@
CONST	SEGMENT
??_C@_03GLLFCHKL@?5ON?$AA@ DB ' ON', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMBJMLFN@REQJAM?$AA@
CONST	SEGMENT
??_C@_06EMBJMLFN@REQJAM?$AA@ DB 'REQJAM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EKMCNAHJ@CH?$AA@
CONST	SEGMENT
??_C@_02EKMCNAHJ@CH?$AA@ DB 'CH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JPKENNEE@EWS?5?5CONTROL?$AA@
CONST	SEGMENT
??_C@_0N@JPKENNEE@EWS?5?5CONTROL?$AA@ DB 'EWS  CONTROL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBNBHHJE@THDG?5?5228?42?$CK?$AA@
CONST	SEGMENT
??_C@_0N@IBNBHHJE@THDG?5?5228?42?$CK?$AA@ DB 'THDG  228.2*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NPFOCCFH@LNG?5?5E?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@
CONST	SEGMENT
??_C@_0BE@NPFOCCFH@LNG?5?5E?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@ DB 'LNG  E %3'
	DB	'd* %2.2f''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JFNCPKEJ@LNG?5?5E?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@
CONST	SEGMENT
??_C@_0BF@JFNCPKEJ@LNG?5?5E?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@ DB 'LNG  E %'
	DB	'3d* 0%2.2f''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IGBAJDBN@LAT?5?5N?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@
CONST	SEGMENT
??_C@_0BE@IGBAJDBN@LAT?5?5N?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@ DB 'LAT  N %3'
	DB	'd* %2.2f''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DICBMHG@LAT?5?5N?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@
CONST	SEGMENT
??_C@_0BF@DICBMHG@LAT?5?5N?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@ DB 'LAT  N %3'
	DB	'd* 0%2.2f''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PNHEFLEE@INS?508?40?110?$AA@
CONST	SEGMENT
??_C@_0M@PNHEFLEE@INS?508?40?110?$AA@ DB 'INS 08.0/10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@ DB '     ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HKPPEPCN@G?1S?$AA@
CONST	SEGMENT
??_C@_03HKPPEPCN@G?1S?$AA@ DB 'G/S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCEFONOF@THDG?$AA@
CONST	SEGMENT
??_C@_04GCEFONOF@THDG?$AA@ DB 'THDG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCJBGOFF@SALT?$AA@
CONST	SEGMENT
??_C@_04MCJBGOFF@SALT?$AA@ DB 'SALT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDEAONJP@?5?5?5?$AA@
CONST	SEGMENT
??_C@_03NDEAONJP@?5?5?5?$AA@ DB '   ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KDFFCEML@RDY?$AA@
CONST	SEGMENT
??_C@_03KDFFCEML@RDY?$AA@ DB 'RDY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PLJDPFIO@00?$AA@
CONST	SEGMENT
??_C@_02PLJDPFIO@00?$AA@ DB '00', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOIEBBEC@?$CF2?41f?1?$AA@
CONST	SEGMENT
??_C@_06NOIEBBEC@?$CF2?41f?1?$AA@ DB '%2.1f/', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CCMKKKLC@0?40SEC?$AA@
CONST	SEGMENT
??_C@_06CCMKKKLC@0?40SEC?$AA@ DB '0.0SEC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EHDBJKGI@TOF?$AA@
CONST	SEGMENT
??_C@_03EHDBJKGI@TOF?$AA@ DB 'TOF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IEFALBGA@0FT?$AA@
CONST	SEGMENT
??_C@_03IEFALBGA@0FT?$AA@ DB '0FT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFDHODFC@MBAL?$AA@
CONST	SEGMENT
??_C@_04IFDHODFC@MBAL?$AA@ DB 'MBAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEKKFJNG@WSPAN?$AA@
CONST	SEGMENT
??_C@_05PEKKFJNG@WSPAN?$AA@ DB 'WSPAN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OOCGLNDP@KEY?5VALID?$AA@
CONST	SEGMENT
??_C@_09OOCGLNDP@KEY?5VALID?$AA@ DB 'KEY VALID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFPNNCJL@DAYS?$AA@
CONST	SEGMENT
??_C@_04EFPNNCJL@DAYS?$AA@ DB 'DAYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIGHFMHP@MSN?5DUR?$AA@
CONST	SEGMENT
??_C@_07DIGHFMHP@MSN?5DUR?$AA@ DB 'MSN DUR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EIEFFLLN@GPS?5ACCUR?5?5?5HIGH?$AA@
CONST	SEGMENT
??_C@_0BB@EIEFFLLN@GPS?5ACCUR?5?5?5HIGH?$AA@ DB 'GPS ACCUR   HIGH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PBGHOLNB@SYS?5ACCUR?5?5?5HIGH?$AA@
CONST	SEGMENT
??_C@_0BB@PBGHOLNB@SYS?5ACCUR?5?5?5HIGH?$AA@ DB 'SYS ACCUR   HIGH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGDPPIMF@NAV?5STATUS?$AA@
CONST	SEGMENT
??_C@_0L@MGDPPIMF@NAV?5STATUS?$AA@ DB 'NAV STATUS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFFDNCED@TBRG?$AA@
CONST	SEGMENT
??_C@_04BFFDNCED@TBRG?$AA@ DB 'TBRG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPBNGOAB@VIP?5?58?5?$AB?$AA@
CONST	SEGMENT
??_C@_08NPBNGOAB@VIP?5?58?5?$AB?$AA@ DB 'VIP  8 ', 01H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IJFFEGKH@VIP?9TO?9TGT?$AA@
CONST	SEGMENT
??_C@_0L@IJFFEGKH@VIP?9TO?9TGT?$AA@ DB 'VIP-TO-TGT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGKEKLOI@?$CFdLBS?$AA@
CONST	SEGMENT
??_C@_05EGKEKLOI@?$CFdLBS?$AA@ DB '%dLBS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GKHKKECO@TOTAL?$AA@
CONST	SEGMENT
??_C@_05GKHKKECO@TOTAL?$AA@ DB 'TOTAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KPIFFHNE@SET?$AA@
CONST	SEGMENT
??_C@_03KPIFFHNE@SET?$AA@ DB 'SET', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CALBCIIC@BINGO?$AA@
CONST	SEGMENT
??_C@_05CALBCIIC@BINGO?$AA@ DB 'BINGO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IKCAJOEF@DEST?5?5OA2?$AA@
CONST	SEGMENT
??_C@_09IKCAJOEF@DEST?5?5OA2?$AA@ DB 'DEST  OA2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNABEIOP@?$CF3?41f?8?$AA@
CONST	SEGMENT
??_C@_06NNABEIOP@?$CF3?41f?8?$AA@ DB '%3.1f''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DPKGJDEJ@BRG?$AA@
CONST	SEGMENT
??_C@_03DPKGJDEJ@BRG?$AA@ DB 'BRG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04COHIKBOA@?$CFdFT?$AA@
CONST	SEGMENT
??_C@_04COHIKBOA@?$CFdFT?$AA@ DB '%dFT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HKIDJOMC@RNG?$AA@
CONST	SEGMENT
??_C@_03HKIDJOMC@RNG?$AA@ DB 'RNG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBANMNIG@DEST?5?5OA1?$AA@
CONST	SEGMENT
??_C@_09KBANMNIG@DEST?5?5OA1?$AA@ DB 'DEST  OA1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HAIEHMHM@TOS?$AA@
CONST	SEGMENT
??_C@_03HAIEHMHM@TOS?$AA@ DB 'TOS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPGNNANI@?$CF4?40fFT?$AA@
CONST	SEGMENT
??_C@_07FPGNNANI@?$CF4?40fFT?$AA@ DB '%4.0fFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCLMINKH@ELEV?$AA@
CONST	SEGMENT
??_C@_04OCLMINKH@ELEV?$AA@ DB 'ELEV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLMIICFH@LNG?5?5E?$AA@
CONST	SEGMENT
??_C@_06CLMIICFH@LNG?5?5E?$AA@ DB 'LNG  E', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IMBAIPIC@?$AC?$AA@
CONST	SEGMENT
??_C@_01IMBAIPIC@?$AC?$AA@ DB 02H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BOCKAEBL@LAT?5?5N?$AA@
CONST	SEGMENT
??_C@_06BOCKAEBL@LAT?5?5N?$AA@ DB 'LAT  N', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPDFOOKO@?$CF3d?$CK?$CF2?42f?8?$AA@
CONST	SEGMENT
??_C@_0L@OPDFOOKO@?$CF3d?$CK?$CF2?42f?8?$AA@ DB '%3d*%2.2f''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJFFFDAK@?$CF3d?$CK0?$CF2?42f?8?$AA@
CONST	SEGMENT
??_C@_0M@JJFFFDAK@?$CF3d?$CK0?$CF2?42f?8?$AA@ DB '%3d*0%2.2f''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DGMPCDFL@DEST?5?5DIR?$AA@
CONST	SEGMENT
??_C@_09DGMPCDFL@DEST?5?5DIR?$AA@ DB 'DEST  DIR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKAMAPIC@MISC?$AA@
CONST	SEGMENT
??_C@_04MKAMAPIC@MISC?$AA@ DB 'MISC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFFONHBH@VRP?$AA@
CONST	SEGMENT
??_C@_03OFFONHBH@VRP?$AA@ DB 'VRP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KAFEECCN@MODE?$AA@
CONST	SEGMENT
??_C@_04KAFEECCN@MODE?$AA@ DB 'MODE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKBELOEO@EWS?$AA@
CONST	SEGMENT
??_C@_03IKBELOEO@EWS?$AA@ DB 'EWS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CMOFCHOK@DLNK?$AA@
CONST	SEGMENT
??_C@_04CMOFCHOK@DLNK?$AA@ DB 'DLNK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDDFJJAJ@INS?$AA@
CONST	SEGMENT
??_C@_03NDDFJJAJ@INS?$AA@ DB 'INS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN?$AA@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN?$AA@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV?$AA@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV?$AA@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDHIECHK@INTG?$AA@
CONST	SEGMENT
??_C@_04MDHIECHK@INTG?$AA@ DB 'INTG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R?$AA@
CONST	SEGMENT
??_C@_01DGKLNCNG@R?$AA@ DB 'R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFCNJLIG@VIP?$AA@
CONST	SEGMENT
??_C@_03PFCNJLIG@VIP?$AA@ DB 'VIP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCBBOEEK@BNGO?$AA@
CONST	SEGMENT
??_C@_04GCBBOEEK@BNGO?$AA@ DB 'BNGO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IIEJFGNN@DEST?$AA@
CONST	SEGMENT
??_C@_04IIEJFGNN@DEST?$AA@ DB 'DEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KHDNNMEB@?$AB?$AA@
CONST	SEGMENT
??_C@_01KHDNNMEB@?$AB?$AA@ DB 01H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCOPKCKE@LIST?$AA@
CONST	SEGMENT
??_C@_04PCOPKCKE@LIST?$AA@ DB 'LIST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z PROC	; AircraftClass::INSState, COMDAT
; _this$ = ecx

; 211  : 	int INSState(INSAlignFlags fl) { return (INSFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@INSState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@INSState
$LN3@INSState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@INSState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ENDP	; AircraftClass::INSState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsIFFSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsIFFSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsIFFSet, COMDAT
; _this$ = ecx

; 516  : 	int IsIFFSet (int testFlag) {return IFFModes & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1540]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsIFFSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsIFFSet
$LN3@IsIFFSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsIFFSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsIFFSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsIFFSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsICPSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsICPSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsICPSet, COMDAT
; _this$ = ecx

; 499  : 	int IsICPSet (int testFlag) {return ICPModeFlags & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsICPSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsICPSet
$LN3@IsICPSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsICPSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsICPSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsICPSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecINTGMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecINTGMode
; _this$ = ecx

; 797  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 798  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 799  : 	if(!g_bIFF)

	movzx	eax, BYTE PTR ?g_bIFF@@3_NA		; g_bIFF
	test	eax, eax
	jne	$LN15@ExecINTGMo

; 800  : 	{
; 801  : 		//Line1
; 802  : 		FillDEDMatrix(0,1,"INTG ON");

	push	0
	push	OFFSET ??_C@_07HAPJDOIE@INTG?5ON?$AA@
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 803  : 		FillDEDMatrix(0,18,"CPL");

	push	0
	push	OFFSET ??_C@_03GHGKPJIJ@CPL?$AA@
	push	18					; 00000012H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 804  : 		AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 805  : 		//Line3
; 806  : 		FillDEDMatrix(2,2,"M1",2);

	push	2
	push	OFFSET ??_C@_02LOKBDPMM@M1?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 807  : 		FillDEDMatrix(2,5,"13");

	push	0
	push	OFFSET ??_C@_02NBHMMMHK@13?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 808  : 		FillDEDMatrix(2,10,"MC",2);

	push	2
	push	OFFSET ??_C@_02KDKICELI@MC?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 809  : 		FillDEDMatrix(2,14,"(5)");

	push	0
	push	OFFSET ??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 810  : 		FillDEDMatrix(2,18,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	18					; 00000012H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 811  : 		FillDEDMatrix(2,24,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	24					; 00000018H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 812  : 		//Line4
; 813  : 		FillDEDMatrix(3,2,"M2");

	push	0
	push	OFFSET ??_C@_02JFIMGMAP@M2?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 814  : 		FillDEDMatrix(3,5,"1234");

	push	0
	push	OFFSET ??_C@_04GCLJABMA@1234?$AA@
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 815  : 		FillDEDMatrix(3,10,"M4");

	push	0
	push	OFFSET ??_C@_02MDNGMLIJ@M4?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 816  : 		FillDEDMatrix(3,13,"A(6)");

	push	0
	push	OFFSET ??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 817  : 		//Line5
; 818  : 		FillDEDMatrix(4,2,"M3",2);

	push	2
	push	OFFSET ??_C@_02IMJHFNEO@M3?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 819  : 		FillDEDMatrix(4,5,"4000");

	push	0
	push	OFFSET ??_C@_04GGHKDNGG@4000?$AA@
	push	5
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 820  : 		FillDEDMatrix(4,17,"RST  (7)");

	push	0
	push	OFFSET ??_C@_08IPOIHKDN@RST?5?5?$CI7?$CJ?$AA@
	push	17					; 00000011H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 821  : 		return;

	jmp	$LN16@ExecINTGMo
$LN15@ExecINTGMo:

; 822  : 	}
; 823  : 	//Line1
; 824  : 	if(playerAC && !playerAC->HasPower(AircraftClass::IFFPower))

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN14@ExecINTGMo
	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	jne	SHORT $LN14@ExecINTGMo

; 825  : 		FillDEDMatrix(0,1,"INTG OFF");

	push	0
	push	OFFSET ??_C@_08ECJFAHDM@INTG?5OFF?$AA@
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 826  : 	else

	jmp	SHORT $LN13@ExecINTGMo
$LN14@ExecINTGMo:

; 827  : 		FillDEDMatrix(0,1,"INTG ON");

	push	0
	push	OFFSET ??_C@_07HAPJDOIE@INTG?5ON?$AA@
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN13@ExecINTGMo:

; 828  : 	FillDEDMatrix(0,18,"CPL");

	push	0
	push	OFFSET ??_C@_03GHGKPJIJ@CPL?$AA@
	push	18					; 00000012H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 829  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 830  : 	//Line3
; 831  : 	if(IsIFFSet(ICPClass::MODE_1))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN12@ExecINTGMo

; 832  : 		FillDEDMatrix(2,2,"M1",2);

	push	2
	push	OFFSET ??_C@_02LOKBDPMM@M1?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 833  : 	else

	jmp	SHORT $LN11@ExecINTGMo
$LN12@ExecINTGMo:

; 834  : 		FillDEDMatrix(2,2,"M1");

	push	0
	push	OFFSET ??_C@_02LOKBDPMM@M1?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN11@ExecINTGMo:

; 835  : 
; 836  : 	sprintf(tempstr, "%d", Mode1Code);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1544]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 837  : 	FillDEDMatrix(2,5, tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 838  : 	if(IsIFFSet(ICPClass::MODE_C))

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN10@ExecINTGMo

; 839  : 		FillDEDMatrix(2,10,"MC",2);

	push	2
	push	OFFSET ??_C@_02KDKICELI@MC?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 840  : 	else

	jmp	SHORT $LN9@ExecINTGMo
$LN10@ExecINTGMo:

; 841  : 		FillDEDMatrix(2,10,"MC");

	push	0
	push	OFFSET ??_C@_02KDKICELI@MC?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN9@ExecINTGMo:

; 842  : 
; 843  : 	FillDEDMatrix(2,14,"(5)");

	push	0
	push	OFFSET ??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 844  : 	ScratchPad(2,18,24);

	push	24					; 00000018H
	push	18					; 00000012H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 845  : 	PossibleInputs = 5;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 5

; 846  : 	//Line4
; 847  : 	if(IsIFFSet(ICPClass::MODE_2))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN8@ExecINTGMo

; 848  : 		FillDEDMatrix(3,2,"M2",2);

	push	2
	push	OFFSET ??_C@_02JFIMGMAP@M2?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 849  : 	else

	jmp	SHORT $LN7@ExecINTGMo
$LN8@ExecINTGMo:

; 850  : 		FillDEDMatrix(3,2,"M2");

	push	0
	push	OFFSET ??_C@_02JFIMGMAP@M2?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN7@ExecINTGMo:

; 851  : 
; 852  : 	sprintf(tempstr,"%d", Mode2Code);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1548]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 853  : 	FillDEDMatrix(3,5,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 854  : 	if(IsIFFSet(ICPClass::MODE_4))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN6@ExecINTGMo

; 855  : 		FillDEDMatrix(3,10,"M4",2);

	push	2
	push	OFFSET ??_C@_02MDNGMLIJ@M4?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 856  : 	else

	jmp	SHORT $LN5@ExecINTGMo
$LN6@ExecINTGMo:

; 857  : 		FillDEDMatrix(3,10,"M4");

	push	0
	push	OFFSET ??_C@_02MDNGMLIJ@M4?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecINTGMo:

; 858  : 
; 859  : 	if(IsIFFSet(ICPClass::MODE_4B))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN4@ExecINTGMo

; 860  : 		FillDEDMatrix(3,13,"B(6)");

	push	0
	push	OFFSET ??_C@_04BKMIICND@B?$CI6?$CJ?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 861  : 	else

	jmp	SHORT $LN3@ExecINTGMo
$LN4@ExecINTGMo:

; 862  : 		FillDEDMatrix(3,13,"A(6)");

	push	0
	push	OFFSET ??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecINTGMo:

; 863  : 	//Line5
; 864  : 	if(IsIFFSet(ICPClass::MODE_3))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN2@ExecINTGMo

; 865  : 		FillDEDMatrix(4,2,"M3",2);

	push	2
	push	OFFSET ??_C@_02IMJHFNEO@M3?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 866  : 	else

	jmp	SHORT $LN1@ExecINTGMo
$LN2@ExecINTGMo:

; 867  : 		FillDEDMatrix(4,2,"M3");

	push	0
	push	OFFSET ??_C@_02IMJHFNEO@M3?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecINTGMo:

; 868  : 
; 869  : 	sprintf(tempstr, "%d", Mode3Code);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1552]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 870  : 	FillDEDMatrix(4,5,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	5
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 871  : 	FillDEDMatrix(4,17,"RST  (7)");

	push	0
	push	OFFSET ??_C@_08IPOIHKDN@RST?5?5?$CI7?$CJ?$AA@
	push	17					; 00000011H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN16@ExecINTGMo:

; 872  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecINTGMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecINTGMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecVRPMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecVRPMode
; _this$ = ecx

; 754  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 755  : 	//Line1
; 756  : 	FillDEDMatrix(0,9,"TGT-TO-VRP");

	push	0
	push	OFFSET ??_C@_0L@EGJEPCMN@TGT?9TO?9VRP?$AA@
	push	9
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 757  : 	//Line2
; 758  : 	FillDEDMatrix(1,8,"TGT   9 \x01");

	push	0
	push	OFFSET ??_C@_09GCLAPBGN@TGT?5?5?59?5?$AB?$AA@
	push	8
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 759  : 	//Line3
; 760  : 	FillDEDMatrix(2,8,"TBRG");

	push	0
	push	OFFSET ??_C@_04BFFDNCED@TBRG?$AA@
	push	8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 761  : 	if(VRP_BRG)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+713]
	test	ecx, ecx
	je	SHORT $LN6@ExecVRPMod

; 762  : 	{
; 763  : 		PossibleInputs = 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 4

; 764  : 		ScratchPad(2,13,20);

	push	20					; 00000014H
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 765  : 	}
; 766  : 	else

	jmp	SHORT $LN5@ExecVRPMod
$LN6@ExecVRPMod:

; 767  : 	{
; 768  : 		sprintf(tempstr,"%3.1f'",fVRP_BRG);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+724]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06NNABEIOP@?$CF3?41f?8?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 769  : 		FillDEDMatrix(2,20-strlen(tempstr),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 20					; 00000014H
	sub	ecx, eax
	push	ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecVRPMod:

; 770  : 	}
; 771  : 	//Line4
; 772  : 	FillDEDMatrix(3,9,"RNG");

	push	0
	push	OFFSET ??_C@_03HKIDJOMC@RNG?$AA@
	push	9
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 773  : 	if(VRP_RNG)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+712]
	test	eax, eax
	je	SHORT $LN4@ExecVRPMod

; 774  : 	{
; 775  : 		PossibleInputs = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 6

; 776  : 		ScratchPad(3,13,22);

	push	22					; 00000016H
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 777  : 	}
; 778  : 	else

	jmp	SHORT $LN3@ExecVRPMod
$LN4@ExecVRPMod:

; 779  : 	{
; 780  : 		sprintf(tempstr,"%dFT", iVRP_RNG);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+716]
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 781  : 		FillDEDMatrix(3,22-strlen(tempstr),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 22					; 00000016H
	sub	ecx, eax
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecVRPMod:

; 782  : 	}
; 783  : 	//Line5
; 784  : 	FillDEDMatrix(4,8,"ELEV");

	push	0
	push	OFFSET ??_C@_04OCLMINKH@ELEV?$AA@
	push	8
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 785  : 	if(VRP_ALT)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+714]
	test	eax, eax
	je	SHORT $LN2@ExecVRPMod

; 786  : 	{
; 787  : 		PossibleInputs = 5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 5

; 788  : 		ScratchPad(4,13,21);

	push	21					; 00000015H
	push	13					; 0000000dH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 789  : 	}
; 790  : 	else

	jmp	SHORT $LN1@ExecVRPMod
$LN2@ExecVRPMod:

; 791  : 	{
; 792  : 		sprintf(tempstr,"%dFT", iVRP_ALT);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+720]
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 793  : 		FillDEDMatrix(4,(21-strlen(tempstr)),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 21					; 00000015H
	sub	ecx, eax
	push	ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecVRPMod:

; 794  : 	}
; 795  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecVRPMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecVRPMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_pButton$1 = -16					; size = 4
_pButton$2 = -12					; size = 4
_pButton$3 = -8						; size = 4
_this$ = -4						; size = 4
?UpdateMODEMode@ICPClass@@QAEXXZ PROC			; ICPClass::UpdateMODEMode
; _this$ = ecx

; 735  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 736  : 	if(IN_AA && mICPPrimaryMode != AA_MODE)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+729]
	test	ecx, ecx
	je	SHORT $LN4@UpdateMODE
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 11			; 0000000bH
	je	SHORT $LN4@UpdateMODE

; 737  : 	{
; 738  : 		CPButtonObject* pButton = OTWDriver.pCockpitManager->GetButtonPointer( ICP_AA_BUTTON_ID );

	push	1013					; 000003f5H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z ; CockpitManager::GetButtonPointer
	mov	DWORD PTR _pButton$3[ebp], eax

; 739  : 		SimICPAA1(ICP_AA_BUTTON_ID, KEY_DOWN, pButton );

	mov	eax, DWORD PTR _pButton$3[ebp]
	push	eax
	push	8
	push	1013					; 000003f5H
	call	?SimICPAA1@@YAXKHPAX@Z			; SimICPAA1
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@UpdateMODE
$LN4@UpdateMODE:

; 740  : 	}
; 741  : 	else if(IN_AG && mICPPrimaryMode != AG_MODE)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+728]
	test	edx, edx
	je	SHORT $LN2@UpdateMODE
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 12			; 0000000cH
	je	SHORT $LN2@UpdateMODE

; 742  : 	{
; 743  : 		CPButtonObject* pButton = OTWDriver.pCockpitManager->GetButtonPointer( ICP_NAV_BUTTON_ID );

	push	1012					; 000003f4H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z ; CockpitManager::GetButtonPointer
	mov	DWORD PTR _pButton$2[ebp], eax

; 744  : 		SimICPAG1(ICP_AG_BUTTON_ID, KEY_DOWN, pButton );

	mov	ecx, DWORD PTR _pButton$2[ebp]
	push	ecx
	push	8
	push	1014					; 000003f6H
	call	?SimICPAG1@@YAXKHPAX@Z			; SimICPAG1
	add	esp, 12					; 0000000cH

; 745  : 	}
; 746  : 	else

	jmp	SHORT $LN3@UpdateMODE
$LN2@UpdateMODE:

; 747  : 	{
; 748  : 		CPButtonObject* pButton = OTWDriver.pCockpitManager->GetButtonPointer( ICP_NAV_BUTTON_ID );

	push	1012					; 000003f4H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	call	?GetButtonPointer@CockpitManager@@QAEPAVCPButtonObject@@H@Z ; CockpitManager::GetButtonPointer
	mov	DWORD PTR _pButton$1[ebp], eax

; 749  : 		SimICPNav1(ICP_NAV_BUTTON_ID, KEY_DOWN, pButton );

	mov	edx, DWORD PTR _pButton$1[ebp]
	push	edx
	push	8
	push	1012					; 000003f4H
	call	?SimICPNav1@@YAXKHPAX@Z			; SimICPNav1
	add	esp, 12					; 0000000cH
$LN3@UpdateMODE:

; 750  : 	}
; 751  : 	ExecMODEMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMODEMode@ICPClass@@QAEXXZ		; ICPClass::ExecMODEMode

; 752  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateMODEMode@ICPClass@@QAEXXZ ENDP			; ICPClass::UpdateMODEMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecMODEMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecMODEMode
; _this$ = ecx

; 728  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 729  : 	//Line1
; 730  : 	FillDEDMatrix(0,10,"MODE");

	push	0
	push	OFFSET ??_C@_04KAFEECCN@MODE?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 731  : 	ScratchPad(0,15,19);

	push	19					; 00000013H
	push	15					; 0000000fH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 732  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 733  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecMODEMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecMODEMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FlarePGM@ICPClass@@QAEXXZ PROC				; ICPClass::FlarePGM
; _this$ = ecx

; 668  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 	//Line1
; 670  : 	FillDEDMatrix(0,6,"CMDS  FLARE  PGM");

	push	0
	push	OFFSET ??_C@_0BB@OAJKOGPK@CMDS?5?5FLARE?5?5PGM?$AA@
	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 671  : 	ShowFlareIndex(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowFlareIndex@ICPClass@@QAEXHH@Z	; ICPClass::ShowFlareIndex

; 672  : 	//Line2
; 673  : 	FillDEDMatrix(1,10,"BQ");

	push	0
	push	OFFSET ??_C@_02NAAABDFG@BQ?$AA@
	push	10					; 0000000aH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 674  : 	if(BQ)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+496]
	test	ecx, ecx
	je	SHORT $LN12@FlarePGM

; 675  : 	{
; 676  : 		PossibleInputs = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 2

; 677  : 		ScratchPad(1,13,16);

	push	16					; 00000010H
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 678  : 	}
; 679  : 	else

	jmp	SHORT $LN11@FlarePGM
$LN12@FlarePGM:

; 680  : 	{
; 681  : 		if(iFLARE_BQ[FPI] <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+664]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+540], 0
	ja	SHORT $LN10@FlarePGM

; 682  : 			sprintf(tempstr," 0");

	push	OFFSET ??_C@_02OHLFFGPO@?50?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 8

; 683  : 		else

	jmp	SHORT $LN9@FlarePGM
$LN10@FlarePGM:

; 684  : 			sprintf(tempstr,"%2.0d",iFLARE_BQ[FPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+664]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+540]
	push	ecx
	push	OFFSET ??_C@_05KHKKLCAB@?$CF2?40d?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN9@FlarePGM:

; 685  : 		FillDEDMatrix(1,14,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	14					; 0000000eH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN11@FlarePGM:

; 686  : 	}
; 687  : 	//Line3
; 688  : 	FillDEDMatrix(2,10,"BI");

	push	0
	push	OFFSET ??_C@_02FCBLILAP@BI?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 689  : 	if(BI)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+497]
	test	edx, edx
	je	SHORT $LN8@FlarePGM

; 690  : 	{
; 691  : 		PossibleInputs = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 5

; 692  : 		ScratchPad(2,13,20);

	push	20					; 00000014H
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 693  : 	}
; 694  : 	else

	jmp	SHORT $LN7@FlarePGM
$LN8@FlarePGM:

; 695  : 	{
; 696  : 		sprintf(tempstr,"%1.3f",fFLARE_BI[FPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+664]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+edx*4+620]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NAHKBEAK@?$CF1?43f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 697  : 		FillDEDMatrix(2,15,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	15					; 0000000fH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN7@FlarePGM:

; 698  : 	}
; 699  : 	//Line4
; 700  : 	FillDEDMatrix(3,10,"SQ");

	push	0
	push	OFFSET ??_C@_02MNOENKBB@SQ?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 701  : 	if(SQ)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+498]
	test	ecx, ecx
	je	SHORT $LN6@FlarePGM

; 702  : 	{
; 703  : 		PossibleInputs = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 2

; 704  : 		ScratchPad(3,13,16);

	push	16					; 00000010H
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 705  : 	}
; 706  : 	else

	jmp	SHORT $LN5@FlarePGM
$LN6@FlarePGM:

; 707  : 	{
; 708  : 		if(iFLARE_SQ[FPI] <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+664]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+560], 0
	ja	SHORT $LN4@FlarePGM

; 709  : 			sprintf(tempstr," 0");

	push	OFFSET ??_C@_02OHLFFGPO@?50?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 8

; 710  : 		else

	jmp	SHORT $LN3@FlarePGM
$LN4@FlarePGM:

; 711  : 			sprintf(tempstr,"%2.0d",iFLARE_SQ[FPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+664]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+560]
	push	ecx
	push	OFFSET ??_C@_05KHKKLCAB@?$CF2?40d?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN3@FlarePGM:

; 712  : 		FillDEDMatrix(3,14,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@FlarePGM:

; 713  : 	}
; 714  : 	//Line5
; 715  : 	FillDEDMatrix(4,10,"SI");

	push	0
	push	OFFSET ??_C@_02EPPPECEI@SI?$AA@
	push	10					; 0000000aH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 716  : 	if(SI)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+499]
	test	edx, edx
	je	SHORT $LN2@FlarePGM

; 717  : 	{
; 718  : 		PossibleInputs = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 5

; 719  : 		ScratchPad(4,13,19);

	push	19					; 00000013H
	push	13					; 0000000dH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 720  : 	}
; 721  : 	else

	jmp	SHORT $LN1@FlarePGM
$LN2@FlarePGM:

; 722  : 	{
; 723  : 		sprintf(tempstr,"%1.2f",fFLARE_SI[FPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+664]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+edx*4+640]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NBLIHODN@?$CF1?42f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 724  : 		FillDEDMatrix(4,15,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	15					; 0000000fH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@FlarePGM:

; 725  : 	}
; 726  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlarePGM@ICPClass@@QAEXXZ ENDP				; ICPClass::FlarePGM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ChaffPGM@ICPClass@@QAEXXZ PROC				; ICPClass::ChaffPGM
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 609  : 	//Line1
; 610  : 	FillDEDMatrix(0,6,"CMDS  CHAFF  PGM");

	push	0
	push	OFFSET ??_C@_0BB@FBDPMPIO@CMDS?5?5CHAFF?5?5PGM?$AA@
	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 611  : 	ShowChaffIndex(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowChaffIndex@ICPClass@@QAEXHH@Z	; ICPClass::ShowChaffIndex

; 612  : 	//Line2
; 613  : 	FillDEDMatrix(1,10,"BQ");

	push	0
	push	OFFSET ??_C@_02NAAABDFG@BQ?$AA@
	push	10					; 0000000aH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 614  : 	if(BQ)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+496]
	test	ecx, ecx
	je	SHORT $LN12@ChaffPGM

; 615  : 	{
; 616  : 		PossibleInputs = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 2

; 617  : 		ScratchPad(1,13,16);

	push	16					; 00000010H
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 618  : 	}
; 619  : 	else

	jmp	SHORT $LN11@ChaffPGM
$LN12@ChaffPGM:

; 620  : 	{
; 621  : 		if(iCHAFF_BQ[CPI] <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+660]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+500], 0
	ja	SHORT $LN10@ChaffPGM

; 622  : 			sprintf(tempstr," 0");

	push	OFFSET ??_C@_02OHLFFGPO@?50?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 8

; 623  : 		else

	jmp	SHORT $LN9@ChaffPGM
$LN10@ChaffPGM:

; 624  : 			sprintf(tempstr,"%2.0d",iCHAFF_BQ[CPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+500]
	push	ecx
	push	OFFSET ??_C@_05KHKKLCAB@?$CF2?40d?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN9@ChaffPGM:

; 625  : 		FillDEDMatrix(1,14,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	14					; 0000000eH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN11@ChaffPGM:

; 626  : 	}
; 627  : 	//Line3
; 628  : 	FillDEDMatrix(2,10,"BI");

	push	0
	push	OFFSET ??_C@_02FCBLILAP@BI?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 629  : 	if(BI)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+497]
	test	edx, edx
	je	SHORT $LN8@ChaffPGM

; 630  : 	{
; 631  : 		PossibleInputs = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 5

; 632  : 		ScratchPad(2,13,20);

	push	20					; 00000014H
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 633  : 	}
; 634  : 	else

	jmp	SHORT $LN7@ChaffPGM
$LN8@ChaffPGM:

; 635  : 	{
; 636  : 		sprintf(tempstr,"%1.3f",fCHAFF_BI[CPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+edx*4+580]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NAHKBEAK@?$CF1?43f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 637  : 		FillDEDMatrix(2,15,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	15					; 0000000fH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN7@ChaffPGM:

; 638  : 	}
; 639  : 	//Line4
; 640  : 	FillDEDMatrix(3,10,"SQ");

	push	0
	push	OFFSET ??_C@_02MNOENKBB@SQ?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 641  : 	if(SQ)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+498]
	test	ecx, ecx
	je	SHORT $LN6@ChaffPGM

; 642  : 	{
; 643  : 		PossibleInputs = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 2

; 644  : 		ScratchPad(3,13,16);

	push	16					; 00000010H
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 645  : 	}
; 646  : 	else

	jmp	SHORT $LN5@ChaffPGM
$LN6@ChaffPGM:

; 647  : 	{
; 648  : 		if(iCHAFF_SQ[CPI] <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+660]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+520], 0
	ja	SHORT $LN4@ChaffPGM

; 649  : 			sprintf(tempstr," 0");

	push	OFFSET ??_C@_02OHLFFGPO@?50?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 8

; 650  : 		else

	jmp	SHORT $LN3@ChaffPGM
$LN4@ChaffPGM:

; 651  : 			sprintf(tempstr,"%2.0d",iCHAFF_SQ[CPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+520]
	push	ecx
	push	OFFSET ??_C@_05KHKKLCAB@?$CF2?40d?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN3@ChaffPGM:

; 652  : 		FillDEDMatrix(3,14,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ChaffPGM:

; 653  : 	}
; 654  : 	//Line5
; 655  : 	FillDEDMatrix(4,10,"SI");

	push	0
	push	OFFSET ??_C@_02EPPPECEI@SI?$AA@
	push	10					; 0000000aH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 656  : 	if(SI)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+499]
	test	edx, edx
	je	SHORT $LN2@ChaffPGM

; 657  : 	{
; 658  : 		PossibleInputs = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 5

; 659  : 		ScratchPad(4,13,19);

	push	19					; 00000013H
	push	13					; 0000000dH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 660  : 	}
; 661  : 	else

	jmp	SHORT $LN1@ChaffPGM
$LN2@ChaffPGM:

; 662  : 	{
; 663  : 		sprintf(tempstr,"%1.2f",fCHAFF_SI[CPI]);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+660]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+edx*4+600]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NBLIHODN@?$CF1?42f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 664  : 		FillDEDMatrix(4,15,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	15					; 0000000fH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ChaffPGM:

; 665  : 	}
; 666  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChaffPGM@ICPClass@@QAEXXZ ENDP				; ICPClass::ChaffPGM
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecEWSMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecEWSMode
; _this$ = ecx

; 553  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 554  : 	//Line1
; 555  : 	FillDEDMatrix(0,6,"EWS  CONTROL");

	push	0
	push	OFFSET ??_C@_0N@JPKENNEE@EWS?5?5CONTROL?$AA@
	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 556  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 557  : 	//Line2
; 558  : 	FillDEDMatrix(1,2,"CH");

	push	0
	push	OFFSET ??_C@_02EKMCNAHJ@CH?$AA@
	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 559  : 	PossibleInputs = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 2

; 560  : 	if(IsICPSet(ICPClass::CHAFF_BINGO))

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN10@ExecEWSMod

; 561  : 		ScratchPad(1,7,10);

	push	10					; 0000000aH
	push	7
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 562  : 	else

	jmp	SHORT $LN9@ExecEWSMod
$LN10@ExecEWSMod:

; 563  : 	{
; 564  : 		sprintf(tempstr,"%d",ChaffBingo);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 565  : 		FillDEDMatrix(1,(10-strlen(tempstr)), tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, 10					; 0000000aH
	sub	ecx, eax
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN9@ExecEWSMod:

; 566  : 	} 
; 567  : 	FillDEDMatrix(1,13,"REQJAM");

	push	0
	push	OFFSET ??_C@_06EMBJMLFN@REQJAM?$AA@
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 568  : 	if(IsICPSet(ICPClass::EDIT_JAMMER))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN8@ExecEWSMod

; 569  : 	{
; 570  : 		FillDEDMatrix(1,20,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	20					; 00000014H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 571  : 		FillDEDMatrix(1,24,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	24					; 00000018H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN8@ExecEWSMod:

; 572  : 	}
; 573  : 	if(EWS_JAMMER_ON)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+483]
	test	eax, eax
	je	SHORT $LN7@ExecEWSMod

; 574  : 		FillDEDMatrix(1,21," ON");

	push	0
	push	OFFSET ??_C@_03GLLFCHKL@?5ON?$AA@
	push	21					; 00000015H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 575  : 	else

	jmp	SHORT $LN6@ExecEWSMod
$LN7@ExecEWSMod:

; 576  : 		FillDEDMatrix(1,21,"OFF");

	push	0
	push	OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
	push	21					; 00000015H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN6@ExecEWSMod:

; 577  : 	//Line3
; 578  : 	FillDEDMatrix(2,2,"FL");

	push	0
	push	OFFSET ??_C@_02CIGFNHJG@FL?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 579  : 	if(IsICPSet(ICPClass::FLARE_BINGO))

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN5@ExecEWSMod

; 580  : 		ScratchPad(2,7,10);

	push	10					; 0000000aH
	push	7
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 581  : 	else

	jmp	SHORT $LN4@ExecEWSMod
$LN5@ExecEWSMod:

; 582  : 	{ 
; 583  : 		sprintf(tempstr,"%d",FlareBingo);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+488]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 584  : 		FillDEDMatrix(2,(10-strlen(tempstr)),tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_strlen
	add	esp, 4
	mov	ecx, 10					; 0000000aH
	sub	ecx, eax
	push	ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN4@ExecEWSMod:

; 585  : 	} 
; 586  : 	FillDEDMatrix(2,13,"FDBK"); //JPG 12 Jun 04 - Ideally, it would be nice to turn this & REQCTR on/off to coincide w/

	push	0
	push	OFFSET ??_C@_04JKILKFAB@FDBK?$AA@
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 587  : 	FillDEDMatrix(2,21," ON");   //the Betty words, but it's more trouble than it's worth.

	push	0
	push	OFFSET ??_C@_03GLLFCHKL@?5ON?$AA@
	push	21					; 00000015H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 588  : 	//Line4
; 589  : 	FillDEDMatrix(3,2,"O1");

	push	0
	push	OFFSET ??_C@_02LNCFOLKC@O1?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 590  : 	FillDEDMatrix(3,9,"0");

	push	0
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	9
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 591  : 	FillDEDMatrix(3,12,"REQCTR");

	push	0
	push	OFFSET ??_C@_06OGKGOLNC@REQCTR?$AA@
	push	12					; 0000000cH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 592  : 	FillDEDMatrix(3,21," ON");

	push	0
	push	OFFSET ??_C@_03GLLFCHKL@?5ON?$AA@
	push	21					; 00000015H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 593  : 	//Line5
; 594  : 	FillDEDMatrix(4,2,"O2");

	push	0
	push	OFFSET ??_C@_02JGAILIGB@O2?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 595  : 	FillDEDMatrix(4,9,"0");

	push	0
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	9
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 596  : 	FillDEDMatrix(4,13,"BINGO");

	push	0
	push	OFFSET ??_C@_05CALBCIIC@BINGO?$AA@
	push	13					; 0000000dH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 597  : 	if(IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN3@ExecEWSMod

; 598  : 	{
; 599  : 		FillDEDMatrix(4,20,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	20					; 00000014H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 600  : 		FillDEDMatrix(4,24,"\x02",2);	

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	24					; 00000018H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecEWSMod:

; 601  : 	}
; 602  : 	if(EWS_BINGO_ON)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+484]
	test	eax, eax
	je	SHORT $LN2@ExecEWSMod

; 603  : 		FillDEDMatrix(4,21," ON");

	push	0
	push	OFFSET ??_C@_03GLLFCHKL@?5ON?$AA@
	push	21					; 00000015H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 604  : 	else

	jmp	SHORT $LN11@ExecEWSMod
$LN2@ExecEWSMod:

; 605  : 		FillDEDMatrix(4,21,"OFF");

	push	0
	push	OFFSET ??_C@_03MPPIHBHJ@OFF?$AA@
	push	21					; 00000015H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN11@ExecEWSMod:

; 606  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecEWSMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecEWSMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_GroundSpeed$1 = -76					; size = 4
tv794 = -72						; size = 4
tv730 = -68						; size = 4
tv808 = -64						; size = 4
_GroundSpeed$2 = -60					; size = 4
tv845 = -56						; size = 4
tv753 = -52						; size = 4
tv379 = -48						; size = 4
_State$3 = -44						; size = 4
_GroundSpeed$4 = -40					; size = 4
_playerAC$ = -36					; size = 4
_this$ = -32						; size = 4
_tempstr2$5 = -28					; size = 10
_tempstr1$6 = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
?ExecINSMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecINSMode
; _this$ = ecx

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 346  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 347  : 	//Line1
; 348  : 	if(g_bINS)

	movzx	eax, BYTE PTR ?g_bINS@@3_NA		; g_bINS
	test	eax, eax
	je	$LN38@ExecINSMod

; 349  : 	{
; 350  : 		GetINSInfo();					//Wombat778 10-17-2003  Update the INS info.  Was static before.

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetINSInfo@ICPClass@@QAEXXZ		; ICPClass::GetINSInfo

; 351  : 		FillDEDMatrix(0,5,"INS");

	push	0
	push	OFFSET ??_C@_03NDDFJJAJ@INS?$AA@
	push	5
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 352  : 		AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 353  : 		char tempstr1[10] = "";

	mov	cl, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _tempstr1$6[ebp], cl
	xor	edx, edx
	mov	DWORD PTR _tempstr1$6[ebp+1], edx
	mov	DWORD PTR _tempstr1$6[ebp+5], edx
	mov	BYTE PTR _tempstr1$6[ebp+9], dl

; 354  : 		char tempstr2[10] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _tempstr2$5[ebp], al
	xor	ecx, ecx
	mov	DWORD PTR _tempstr2$5[ebp+1], ecx
	mov	DWORD PTR _tempstr2$5[ebp+5], ecx
	mov	BYTE PTR _tempstr2$5[ebp+9], cl

; 355  : 		if(playerAC)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN6@ExecINSMod

; 356  : 		{
; 357  : 			INSTime = playerAC->INSAlignmentTimer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+772]
	mov	DWORD PTR [edx+1556], ecx

; 358  : 			int State = playerAC->INSStatus;

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+784]
	mov	DWORD PTR _State$3[ebp], eax

; 359  : 			
; 360  : 			INSTime /= 60;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1556]
	divss	xmm0, DWORD PTR __real@42700000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1556], xmm0

; 361  : 			sprintf(tempstr2,"%d", State);

	mov	eax, DWORD PTR _State$3[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tempstr2$5[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 362  : 			sprintf(tempstr1,"%2.1f/", INSTime);

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+1556]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06NOIEBBEC@?$CF2?41f?1?$AA@
	lea	eax, DWORD PTR _tempstr1$6[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 363  : 			FillDEDMatrix(0,9,tempstr1);

	push	0
	lea	ecx, DWORD PTR _tempstr1$6[ebp]
	push	ecx
	push	9
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 364  : 			FillDEDMatrix(0,14, tempstr2);

	push	0
	lea	edx, DWORD PTR _tempstr2$5[ebp]
	push	edx
	push	14					; 0000000eH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 365  : 			if(!playerAC->HasAligned && 
; 366  : 				playerAC->INSState(AircraftClass::INS_Nav))

	mov	eax, DWORD PTR _playerAC$[ebp]
	movzx	ecx, BYTE PTR [eax+781]
	test	ecx, ecx
	jne	SHORT $LN36@ExecINSMod
	push	32					; 00000020H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN36@ExecINSMod

; 367  : 			{
; 368  : 				FillDEDMatrix(0,14,"00");

	push	0
	push	OFFSET ??_C@_02PLJDPFIO@00?$AA@
	push	14					; 0000000eH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
	jmp	$LN28@ExecINSMod
$LN36@ExecINSMod:

; 369  : 			}
; 370  : 			else if(!playerAC->INSState(AircraftClass::INS_Aligned))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	jne	SHORT $LN34@ExecINSMod

; 371  : 			{
; 372  : 				if(State <= 70)

	cmp	DWORD PTR _State$3[ebp], 70		; 00000046H
	jg	SHORT $LN33@ExecINSMod

; 373  : 					FillDEDMatrix(0,17,"RDY");

	push	0
	push	OFFSET ??_C@_03KDFFCEML@RDY?$AA@
	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 374  : 				else

	jmp	SHORT $LN32@ExecINSMod
$LN33@ExecINSMod:

; 375  : 					FillDEDMatrix(0,17,"   ");

	push	0
	push	OFFSET ??_C@_03NDEAONJP@?5?5?5?$AA@
	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN32@ExecINSMod:

; 376  : 			}
; 377  : 			else if(playerAC->INSState(AircraftClass::INS_AlignNorm) &&

	jmp	SHORT $LN28@ExecINSMod
$LN34@ExecINSMod:

; 378  : 				playerAC->INSState(AircraftClass::INS_Aligned))

	push	2
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN28@ExecINSMod
	push	64					; 00000040H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN28@ExecINSMod

; 379  : 			{
; 380  : 				if(vuxRealTime & 0x200)

	mov	edx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	edx, 512				; 00000200H
	je	SHORT $LN29@ExecINSMod

; 381  : 					FillDEDMatrix(0,17,"RDY");

	push	0
	push	OFFSET ??_C@_03KDFFCEML@RDY?$AA@
	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 382  : 				else

	jmp	SHORT $LN28@ExecINSMod
$LN29@ExecINSMod:

; 383  : 					FillDEDMatrix(0,17,"   ");

	push	0
	push	OFFSET ??_C@_03NDEAONJP@?5?5?5?$AA@
	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN28@ExecINSMod:

; 384  : 			}
; 385  : 
; 386  : 			//coords stuff
; 387  : 			FillDEDMatrix(1,5,"LAT  N");

	push	0
	push	OFFSET ??_C@_06BOCKAEBL@LAT?5?5N?$AA@
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 388  : 			FillDEDMatrix(2,5,"LNG  E");

	push	0
	push	OFFSET ??_C@_06CLMIICFH@LNG?5?5E?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 389  : 			FillDEDMatrix(3,4,"SALT");

	push	0
	push	OFFSET ??_C@_04MCJBGOFF@SALT?$AA@
	push	4
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 390  : 			FillDEDMatrix(4,3,"THDG");

	push	0
	push	OFFSET ??_C@_04GCEFONOF@THDG?$AA@
	push	3
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 391  : 			if(INSLine == 0 && Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1560], 0
	jne	SHORT $LN27@ExecINSMod
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+732]
	test	edx, edx
	je	SHORT $LN27@ExecINSMod

; 392  : 			{
; 393  : 				//LAT line
; 394  : 				PossibleInputs = 6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 6

; 395  : 				ScratchPad(1,12,23);

	push	23					; 00000017H
	push	12					; 0000000cH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 396  : 			}
; 397  : 			else

	jmp	$LN23@ExecINSMod
$LN27@ExecINSMod:

; 398  : 			{
; 399  : 				if(playerAC->INSState(AircraftClass::INS_HUD_FPM)) //28 Jul 04 - If INS off/failed, we lose all cruise info

	push	512					; 00000200H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN25@ExecINSMod

; 400  : 					{
; 401  : 						FillDEDMatrix(1, 13, INSLat);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1584				; 00000630H
	push	ecx
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN25@ExecINSMod:

; 402  : 					}
; 403  : 				if(INSLine == 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1560], 0
	jne	SHORT $LN24@ExecINSMod

; 404  : 				{
; 405  : 					FillDEDMatrix(1,12,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	12					; 0000000cH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 406  : 					FillDEDMatrix(1,23,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	23					; 00000017H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 407  : 				}
; 408  : 				else

	jmp	SHORT $LN23@ExecINSMod
$LN24@ExecINSMod:

; 409  : 				{
; 410  : 						FillDEDMatrix(1,12," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	12					; 0000000cH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 411  : 						FillDEDMatrix(1,23," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	23					; 00000017H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN23@ExecINSMod:

; 412  : 				}
; 413  : 			}
; 414  : 			if(INSLine == 1 && Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1560], 1
	jne	SHORT $LN22@ExecINSMod
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+732]
	test	edx, edx
	je	SHORT $LN22@ExecINSMod

; 415  : 			{
; 416  : 				//LONG line
; 417  : 				PossibleInputs = 7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 7

; 418  : 				ScratchPad(2,12,23);

	push	23					; 00000017H
	push	12					; 0000000cH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 419  : 			}
; 420  : 			else

	jmp	$LN18@ExecINSMod
$LN22@ExecINSMod:

; 421  : 			{
; 422  : 				if(playerAC->INSState(AircraftClass::INS_HUD_FPM)) //28 Jul 04 - If INS off/failed, we lose all cruise info

	push	512					; 00000200H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN20@ExecINSMod

; 423  : 				{
; 424  : 					FillDEDMatrix(2,13, INSLong);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1564				; 0000061cH
	push	ecx
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN20@ExecINSMod:

; 425  : 				}
; 426  : 				if(INSLine == 1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1560], 1
	jne	SHORT $LN19@ExecINSMod

; 427  : 				{
; 428  : 					FillDEDMatrix(2,12,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	12					; 0000000cH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 429  : 					FillDEDMatrix(2,23,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	23					; 00000017H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 430  : 				}
; 431  : 				else

	jmp	SHORT $LN18@ExecINSMod
$LN19@ExecINSMod:

; 432  : 				{
; 433  : 						FillDEDMatrix(2,12," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	12					; 0000000cH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 434  : 						FillDEDMatrix(2,23," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	23					; 00000017H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN18@ExecINSMod:

; 435  : 				}
; 436  : 			}
; 437  : 			if(INSLine == 2 && Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1560], 2
	jne	SHORT $LN17@ExecINSMod
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+732]
	test	edx, edx
	je	SHORT $LN17@ExecINSMod

; 438  : 			{
; 439  : 				//ALT line
; 440  : 				PossibleInputs = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 5

; 441  : 				ScratchPad(3,14,22);

	push	22					; 00000016H
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 442  : 			}
; 443  : 			else

	jmp	$LN12@ExecINSMod
$LN17@ExecINSMod:

; 444  : 			{
; 445  : 				if(playerAC->INSState(AircraftClass::INS_HUD_FPM)) //28 Jul 04 - If INS off/failed, we lose all cruise info

	push	512					; 00000200H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN15@ExecINSMod

; 446  : 				{
; 447  : 						FillDEDMatrix(3,21-(strlen(altStr)), " ");	//Wombat778 10-17-2003 make sure that old digit doesnt show below 10000ft

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1604				; 00000644H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 21					; 00000015H
	sub	edx, eax
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 448  : 					FillDEDMatrix(3,22-(strlen(altStr)), altStr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1604				; 00000644H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1604				; 00000644H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 22					; 00000016H
	sub	edx, eax
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN15@ExecINSMod:

; 449  : 				}
; 450  : 				if(INSLine == 2)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1560], 2
	jne	SHORT $LN14@ExecINSMod

; 451  : 				{
; 452  : 					FillDEDMatrix(3,14,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 453  : 					FillDEDMatrix(3,22,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	22					; 00000016H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 454  : 				}
; 455  : 				else

	jmp	SHORT $LN12@ExecINSMod
$LN14@ExecINSMod:

; 456  : 				{
; 457  : 					if(playerAC->INSState(AircraftClass::INS_HUD_FPM)) //28 Jul 04 - If INS off/failed, we lose all cruise info

	push	512					; 00000200H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN12@ExecINSMod

; 458  : 					{
; 459  : 						FillDEDMatrix(3,14," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 460  : 						FillDEDMatrix(3,22," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	22					; 00000016H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN12@ExecINSMod:

; 461  : 					}
; 462  : 				}
; 463  : 			}
; 464  : 			if(INSLine == 3 && Manual_Input)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+1560], 3
	jne	$LN11@ExecINSMod
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+732]
	test	eax, eax
	je	$LN11@ExecINSMod

; 465  : 			{
; 466  : 				//THDG line
; 467  : 				PossibleInputs = 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 4

; 468  : 				ScratchPad(4,8,15);

	push	15					; 0000000fH
	push	8
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 469  : 
; 470  : 				int GroundSpeed = FloatToInt32((float)sqrt(cockpitFlightData.xDot*cockpitFlightData.xDot + 
; 471  : 					cockpitFlightData.yDot*cockpitFlightData.yDot) * FTPSEC_TO_KNOTS);

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+12
	mulss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+12
	movss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+16
	mulss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+16
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv730[ebp]
	movss	xmm0, DWORD PTR tv730[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _GroundSpeed$4[ebp], eax

; 472  : 				GroundSpeed = max(GroundSpeed, 999);

	cmp	DWORD PTR _GroundSpeed$4[ebp], 999	; 000003e7H
	jle	SHORT $LN41@ExecINSMod
	mov	edx, DWORD PTR _GroundSpeed$4[ebp]
	mov	DWORD PTR tv379[ebp], edx
	jmp	SHORT $LN42@ExecINSMod
$LN41@ExecINSMod:
	mov	DWORD PTR tv379[ebp], 999		; 000003e7H
$LN42@ExecINSMod:
	mov	eax, DWORD PTR tv379[ebp]
	mov	DWORD PTR _GroundSpeed$4[ebp], eax

; 473  : 				sprintf(tempstr,"%d",GroundSpeed);

	mov	ecx, DWORD PTR _GroundSpeed$4[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 474  : 				FillDEDMatrix(4,17,"G/S");

	push	0
	push	OFFSET ??_C@_03HKPPEPCN@G?1S?$AA@
	push	17					; 00000011H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 475  : 				FillDEDMatrix(4,(25-strlen(tempstr)),tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 25					; 00000019H
	sub	edx, eax
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 476  : 			}
; 477  : 			else

	jmp	$LN6@ExecINSMod
$LN11@ExecINSMod:

; 478  : 			{
; 479  : 				if(playerAC->INSState(AircraftClass::INS_HUD_FPM)) //28 Jul 04 - If INS off/failed, we lose all cruise info

	push	512					; 00000200H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN9@ExecINSMod

; 480  : 				{
; 481  : 					FillDEDMatrix(4,15-(strlen(INSHead)), INSHead);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1614				; 0000064eH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1614				; 0000064eH
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 15					; 0000000fH
	sub	edx, eax
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN9@ExecINSMod:

; 482  : 				}
; 483  : 				if(INSLine == 3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1560], 3
	jne	SHORT $LN8@ExecINSMod

; 484  : 				{
; 485  : 					FillDEDMatrix(4,8,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	8
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 486  : 					FillDEDMatrix(4,15,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	15					; 0000000fH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 487  : 				}
; 488  : 				else

	jmp	SHORT $LN7@ExecINSMod
$LN8@ExecINSMod:

; 489  : 				{
; 490  : 					FillDEDMatrix(4,8," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	8
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 491  : 					FillDEDMatrix(4,15," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	15					; 0000000fH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN7@ExecINSMod:

; 492  : 
; 493  : 				}
; 494  : 				int GroundSpeed = FloatToInt32((float)sqrt(cockpitFlightData.xDot*cockpitFlightData.xDot + 
; 495  : 					cockpitFlightData.yDot*cockpitFlightData.yDot) * FTPSEC_TO_KNOTS);

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+12
	mulss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+12
	movss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+16
	mulss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+16
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv753[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _GroundSpeed$1[ebp], eax

; 496  : 				FillDEDMatrix(4,20, "     ");

	push	0
	push	OFFSET ??_C@_05IFKLLJBC@?5?5?5?5?5?$AA@
	push	20					; 00000014H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 497  : 				sprintf(tempstr,"%d",GroundSpeed);

	mov	ecx, DWORD PTR _GroundSpeed$1[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 498  : 				FillDEDMatrix(4,17,"G/S");

	push	0
	push	OFFSET ??_C@_03HKPPEPCN@G?1S?$AA@
	push	17					; 00000011H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 499  : 				if(playerAC->INSState(AircraftClass::INS_HUD_FPM)) //28 Jul 04 - If INS off/failed, we lose all cruise info

	push	512					; 00000200H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	je	SHORT $LN6@ExecINSMod

; 500  : 					{
; 501  : 					FillDEDMatrix(4,(25-strlen(tempstr)),tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 25					; 00000019H
	sub	edx, eax
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN6@ExecINSMod:

; 502  : 					}
; 503  : 			}
; 504  : 		}
; 505  : 	}
; 506  : 	else

	jmp	$LN5@ExecINSMod
$LN38@ExecINSMod:

; 507  : 	{
; 508  : 		FillDEDMatrix(0,5,"INS 08.0/10");

	push	0
	push	OFFSET ??_C@_0M@PNHEFLEE@INS?508?40?110?$AA@
	push	5
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 509  : 		AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 510  : 		//Display some bogus INS info here, along with the current
; 511  : 		//coords of the plane
; 512  : 		latitude	= (FALCON_ORIGIN_LAT * FT_PER_DEGREE + cockpitFlightData.x) / EARTH_RADIUS_FT;

	movss	xmm0, DWORD PTR ?FALCON_ORIGIN_LAT@@3MA
	mulss	xmm0, DWORD PTR __real@45be3840
	mulss	xmm0, DWORD PTR __real@42700000
	addss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A
	divss	xmm0, DWORD PTR __real@4b9fa682
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+304], xmm0

; 513  : 		cosLatitude = (float)cos(latitude);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+304]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+308]

; 514  : 		longitude	= ((FALCON_ORIGIN_LONG * DTR * EARTH_RADIUS_FT * cosLatitude) + cockpitFlightData.y) / (EARTH_RADIUS_FT * cosLatitude);

	movss	xmm0, DWORD PTR ?FALCON_ORIGIN_LONG@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mulss	xmm0, DWORD PTR __real@4b9fa682
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+308]
	addss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+4
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@4b9fa682
	mulss	xmm1, DWORD PTR [ecx+308]
	divss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+312], xmm0

; 515  : 		
; 516  : 		latitude	*= RTD;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+304]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+304], xmm0

; 517  : 		longitude	*= RTD;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+312]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+312], xmm0

; 518  : 		
; 519  : 		longDeg		= FloatToInt32(longitude);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 520  : 		longMin		= (float)fabs(longitude - longDeg) * DEG_TO_MIN;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+320]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+312]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv794[ebp]
	movss	xmm0, DWORD PTR tv794[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+332], xmm0

; 521  : 
; 522  : 		latDeg		= FloatToInt32(latitude);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+304]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 523  : 		latMin		= (float)fabs(latitude - latDeg) * DEG_TO_MIN;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+316]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+304]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv808[ebp]
	movss	xmm0, DWORD PTR tv808[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+328], xmm0

; 524  : 
; 525  : 		// format lat/long here
; 526  : 		if(latMin < 10.0F) 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [edx+328]
	jbe	SHORT $LN4@ExecINSMod

; 527  : 			sprintf(latStr, "LAT  N %3d* 0%2.2f\'\n", latDeg, latMin);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+328]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	push	edx
	push	OFFSET ??_C@_0BF@DICBMHG@LAT?5?5N?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 528  : 		else 

	jmp	SHORT $LN3@ExecINSMod
$LN4@ExecINSMod:

; 529  : 			sprintf(latStr, "LAT  N %3d* %2.2f\'\n", latDeg, latMin);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+328]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+316]
	push	eax
	push	OFFSET ??_C@_0BE@IGBAJDBN@LAT?5?5N?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN3@ExecINSMod:

; 530  : 		if(longMin < 10.0F) 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [edx+332]
	jbe	SHORT $LN2@ExecINSMod

; 531  : 			sprintf(longStr, "LNG  E %3d* 0%2.2f\'\n", longDeg, longMin);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+332]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+320]
	push	edx
	push	OFFSET ??_C@_0BF@JFNCPKEJ@LNG?5?5E?5?$CF3d?$CK?50?$CF2?42f?8?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 532  : 		else 

	jmp	SHORT $LN1@ExecINSMod
$LN2@ExecINSMod:

; 533  : 			sprintf(longStr, "LNG  E %3d* %2.2f\'\n", longDeg, longMin);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+332]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	push	eax
	push	OFFSET ??_C@_0BE@NPFOCCFH@LNG?5?5E?5?$CF3d?$CK?5?$CF2?42f?8?6?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN1@ExecINSMod:

; 534  : 		//Line 2
; 535  : 		FillDEDMatrix(1,5,latStr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 348				; 0000015cH
	push	edx
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 536  : 		//Line3
; 537  : 		FillDEDMatrix(2,5,longStr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	push	eax
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 538  : 		
; 539  : 		//Line4
; 540  : 		FillDEDMatrix(3,4,"SALT");

	push	0
	push	OFFSET ??_C@_04MCJBGOFF@SALT?$AA@
	push	4
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 541  : 		sprintf(tempstr,  "%dFT", (long)-cockpitFlightData.z);

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+8
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si ecx, xmm0
	push	ecx
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 542  : 		FillDEDMatrix(3,15,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	15					; 0000000fH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 543  : 		//Line5
; 544  : 		FillDEDMatrix(4,3,"THDG  228.2*");

	push	0
	push	OFFSET ??_C@_0N@IBNBHHJE@THDG?5?5228?42?$CK?$AA@
	push	3
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 545  : 		int GroundSpeed = FloatToInt32((float)sqrt(cockpitFlightData.xDot*cockpitFlightData.xDot + 
; 546  : 			cockpitFlightData.yDot*cockpitFlightData.yDot) * FTPSEC_TO_KNOTS);

	movss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+12
	mulss	xmm0, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+12
	movss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+16
	mulss	xmm1, DWORD PTR ?cockpitFlightData@@3VFlightData@@A+16
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv845[ebp]
	movss	xmm0, DWORD PTR tv845[ebp]
	mulss	xmm0, DWORD PTR __real@3f17ac60
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _GroundSpeed$2[ebp], eax

; 547  : 		sprintf(tempstr,"%d",GroundSpeed);

	mov	ecx, DWORD PTR _GroundSpeed$2[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 548  : 		FillDEDMatrix(4,16,"G/S");

	push	0
	push	OFFSET ??_C@_03HKPPEPCN@G?1S?$AA@
	push	16					; 00000010H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 549  : 		FillDEDMatrix(4,(24-strlen(tempstr)),tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 24					; 00000018H
	sub	edx, eax
	push	edx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecINSMod:

; 550  : 	}
; 551  : }	

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ExecINSMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecINSMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecMANMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecMANMode
; _this$ = ecx

; 327  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 328  : 	//Line 1
; 329  : 	FillDEDMatrix(0,10,"MAN");

	push	0
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 330  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 331  : 	//Line 2
; 332  : 	FillDEDMatrix(1,6,"WSPAN");

	push	0
	push	OFFSET ??_C@_05PEKKFJNG@WSPAN?$AA@
	push	6
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 333  : 	PossibleInputs = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+748], 3

; 334  : 	ScratchPad(1,12,18);

	push	18					; 00000012H
	push	12					; 0000000cH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 335  : 	//Line 3
; 336  : 	FillDEDMatrix(2,10,"MBAL");

	push	0
	push	OFFSET ??_C@_04IFDHODFC@MBAL?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 337  : 	//Line 4 
; 338  : 	FillDEDMatrix(3,5,"RNG");

	push	0
	push	OFFSET ??_C@_03HKIDJOMC@RNG?$AA@
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 339  : 	FillDEDMatrix(3,17,"0FT");

	push	0
	push	OFFSET ??_C@_03IEFALBGA@0FT?$AA@
	push	17					; 00000011H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 340  : 	//Line5
; 341  : 	FillDEDMatrix(4,6,"TOF");

	push	0
	push	OFFSET ??_C@_03EHDBJKGI@TOF?$AA@
	push	6
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 342  : 	FillDEDMatrix(4,14,"0.0SEC");

	push	0
	push	OFFSET ??_C@_06CCMKKKLC@0?40SEC?$AA@
	push	14					; 0000000eH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 343  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecMANMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecMANMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecNAVMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecNAVMode
; _this$ = ecx

; 309  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 310  : 	//Line1
; 311  : 	FillDEDMatrix(0,10,"NAV STATUS");

	push	0
	push	OFFSET ??_C@_0L@MGDPPIMF@NAV?5STATUS?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 312  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 313  : 	//Line2
; 314  : 	FillDEDMatrix(1,5,"SYS ACCUR   HIGH");

	push	0
	push	OFFSET ??_C@_0BB@PBGHOLNB@SYS?5ACCUR?5?5?5HIGH?$AA@
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 315  : 	//Line3
; 316  : 	FillDEDMatrix(2,5,"GPS ACCUR   HIGH");

	push	0
	push	OFFSET ??_C@_0BB@EIEFFLLN@GPS?5ACCUR?5?5?5HIGH?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 317  : 	//Line4
; 318  : 	FillDEDMatrix(3,5,"MSN DUR");

	push	0
	push	OFFSET ??_C@_07DIGHFMHP@MSN?5DUR?$AA@
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 319  : 	FillDEDMatrix(3,15,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	15					; 0000000fH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 320  : 	FillDEDMatrix(3,17,"5");

	push	0
	push	OFFSET ??_C@_01BMBHCPLG@5?$AA@
	push	17					; 00000011H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 321  : 	FillDEDMatrix(3,18,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	18					; 00000012H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 322  : 	FillDEDMatrix(3,20,"DAYS");

	push	0
	push	OFFSET ??_C@_04EFPNNCJL@DAYS?$AA@
	push	20					; 00000014H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 323  : 	//Line5
; 324  : 	FillDEDMatrix(4,5,"KEY VALID");

	push	0
	push	OFFSET ??_C@_09OOCGLNDP@KEY?5VALID?$AA@
	push	5
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 325  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecNAVMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecNAVMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecVIPMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecVIPMode
; _this$ = ecx

; 266  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	//Line 1
; 268  : 	FillDEDMatrix(0,10,"VIP-TO-TGT");

	push	0
	push	OFFSET ??_C@_0L@IJFFEGKH@VIP?9TO?9TGT?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 269  : 	//Line 2
; 270  : 	FillDEDMatrix(1,9,"VIP  8 \x01");

	push	0
	push	OFFSET ??_C@_08NPBNGOAB@VIP?5?58?5?$AB?$AA@
	push	9
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 271  : 	//Line 3
; 272  : 	FillDEDMatrix(2,8,"TBRG");

	push	0
	push	OFFSET ??_C@_04BFFDNCED@TBRG?$AA@
	push	8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 273  : 	if(VIP_BRG)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+697]
	test	ecx, ecx
	je	SHORT $LN6@ExecVIPMod

; 274  : 	{
; 275  : 		PossibleInputs = 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 4

; 276  : 		ScratchPad(2,14,21);

	push	21					; 00000015H
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 277  : 	}
; 278  : 	else

	jmp	SHORT $LN5@ExecVIPMod
$LN6@ExecVIPMod:

; 279  : 	{
; 280  : 		sprintf(tempstr,"%3.1f'",fVIP_BRG);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+708]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06NNABEIOP@?$CF3?41f?8?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 281  : 		FillDEDMatrix(2,21-strlen(tempstr),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 21					; 00000015H
	sub	ecx, eax
	push	ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecVIPMod:

; 282  : 	}
; 283  : 	//Line4
; 284  : 	FillDEDMatrix(3,9,"RNG");

	push	0
	push	OFFSET ??_C@_03HKIDJOMC@RNG?$AA@
	push	9
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 285  : 	if(VIP_RNG)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+696]
	test	eax, eax
	je	SHORT $LN4@ExecVIPMod

; 286  : 	{
; 287  : 		PossibleInputs = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 6

; 288  : 		ScratchPad(3,13,22);

	push	22					; 00000016H
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 289  : 	}
; 290  : 	else

	jmp	SHORT $LN3@ExecVIPMod
$LN4@ExecVIPMod:

; 291  : 	{
; 292  : 		sprintf(tempstr,"%dFT", iVIP_RNG);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+700]
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 293  : 		FillDEDMatrix(3,22-strlen(tempstr),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 22					; 00000016H
	sub	ecx, eax
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecVIPMod:

; 294  : 	}
; 295  : 	//Line5
; 296  : 	FillDEDMatrix(4,8,"ELEV");

	push	0
	push	OFFSET ??_C@_04OCLMINKH@ELEV?$AA@
	push	8
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 297  : 	if(VIP_ALT)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+698]
	test	eax, eax
	je	SHORT $LN2@ExecVIPMod

; 298  : 	{
; 299  : 		PossibleInputs = 5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 5

; 300  : 		ScratchPad(4,13,21);

	push	21					; 00000015H
	push	13					; 0000000dH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 301  : 	}
; 302  : 	else

	jmp	SHORT $LN1@ExecVIPMod
$LN2@ExecVIPMod:

; 303  : 	{
; 304  : 		sprintf(tempstr,"%dFT", iVIP_ALT);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+704]
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 305  : 		FillDEDMatrix(4,(21-strlen(tempstr)),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 21					; 00000015H
	sub	ecx, eax
	push	ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecVIPMod:

; 306  : 	}
; 307  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecVIPMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecVIPMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecBingo@ICPClass@@QAEXXZ PROC			; ICPClass::ExecBingo
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 248  : 	//Line1
; 249  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 250  : 	FillDEDMatrix(0,10,"BINGO");

	push	0
	push	OFFSET ??_C@_05CALBCIIC@BINGO?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 251  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 252  : 	//Get our current FOB
; 253  : 	total = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1524], 0

; 254  : 	if (playerAC)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN1@ExecBingo

; 255  : 		total = (long)((AircraftClass*)(playerAC))->GetTotalFuel();

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+468]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1524], eax
$LN1@ExecBingo:

; 256  : 	//Line3
; 257  : 	PossibleInputs = 5;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 5

; 258  : 	FillDEDMatrix(2,5,"SET");

	push	0
	push	OFFSET ??_C@_03KPIFFHNE@SET?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 259  : 	ScratchPad(2,10,19);

	push	19					; 00000013H
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 260  : 	//Line4
; 261  : 	FillDEDMatrix(3,3,"TOTAL");

	push	0
	push	OFFSET ??_C@_05GKHKKECO@TOTAL?$AA@
	push	3
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 262  : 	sprintf(tempstr,"%dLBS", total);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1524]
	push	ecx
	push	OFFSET ??_C@_05EGKEKLOI@?$CFdLBS?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 263  : 	FillDEDMatrix(3,11,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	11					; 0000000bH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecBingo@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecBingo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecOA2Mode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecOA2Mode
; _this$ = ecx

; 205  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 206  : 	//Line1
; 207  : 	FillDEDMatrix(0,4,"DEST  OA2");

	push	0
	push	OFFSET ??_C@_09IKCAJOEF@DEST?5?5OA2?$AA@
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 208  : 	AddSTPT(0,17);

	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 209  : 	//Line3
; 210  : 	FillDEDMatrix(2,5,"RNG");

	push	0
	push	OFFSET ??_C@_03HKIDJOMC@RNG?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 211  : 	if(OA_RNG)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+668]
	test	ecx, ecx
	je	SHORT $LN6@ExecOA2Mod

; 212  : 	{
; 213  : 		PossibleInputs = 6;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 6

; 214  : 		ScratchPad(2,9,18);

	push	18					; 00000012H
	push	9
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 215  : 	}
; 216  : 	else

	jmp	SHORT $LN5@ExecOA2Mod
$LN6@ExecOA2Mod:

; 217  : 	{
; 218  : 		sprintf(tempstr,"%dFT", iOA_RNG2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 219  : 		FillDEDMatrix(2,18-strlen(tempstr),tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 18					; 00000012H
	sub	edx, eax
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecOA2Mod:

; 220  : 	}
; 221  : 	//Line4
; 222  : 	FillDEDMatrix(3,5,"BRG");

	push	0
	push	OFFSET ??_C@_03DPKGJDEJ@BRG?$AA@
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 223  : 	if(OA_BRG)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+669]
	test	ecx, ecx
	je	SHORT $LN4@ExecOA2Mod

; 224  : 	{
; 225  : 		PossibleInputs = 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 4

; 226  : 		ScratchPad(3,9,16);

	push	16					; 00000010H
	push	9
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 227  : 	}
; 228  : 	else

	jmp	SHORT $LN3@ExecOA2Mod
$LN4@ExecOA2Mod:

; 229  : 	{
; 230  : 		sprintf(tempstr,"%3.1f'",fOA_BRG2);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+692]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06NNABEIOP@?$CF3?41f?8?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 231  : 		FillDEDMatrix(3,16-strlen(tempstr),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 16					; 00000010H
	sub	ecx, eax
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecOA2Mod:

; 232  : 	}
; 233  : 	//Line5
; 234  : 	FillDEDMatrix(4,4,"ELEV");

	push	0
	push	OFFSET ??_C@_04OCLMINKH@ELEV?$AA@
	push	4
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 235  : 	if(OA_ALT)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+670]
	test	eax, eax
	je	SHORT $LN2@ExecOA2Mod

; 236  : 	{
; 237  : 		PossibleInputs = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 6

; 238  : 		ScratchPad(4,9,18);

	push	18					; 00000012H
	push	9
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 239  : 	}
; 240  : 	else

	jmp	SHORT $LN1@ExecOA2Mod
$LN2@ExecOA2Mod:

; 241  : 	{
; 242  : 		sprintf(tempstr,"%dFT", iOA_ALT2);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+684]
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 243  : 		FillDEDMatrix(4,(18-strlen(tempstr)),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 18					; 00000012H
	sub	ecx, eax
	push	ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecOA2Mod:

; 244  : 	}
; 245  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecOA2Mode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecOA2Mode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecOA1Mode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecOA1Mode
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	//Line1
; 165  : 	FillDEDMatrix(0,4,"DEST  OA1");

	push	0
	push	OFFSET ??_C@_09KBANMNIG@DEST?5?5OA1?$AA@
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 166  : 	AddSTPT(0,17);

	push	17					; 00000011H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 167  : 	//Line3
; 168  : 	FillDEDMatrix(2,5,"RNG");

	push	0
	push	OFFSET ??_C@_03HKIDJOMC@RNG?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 169  : 	if(OA_RNG)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+668]
	test	ecx, ecx
	je	SHORT $LN6@ExecOA1Mod

; 170  : 	{
; 171  : 		PossibleInputs = 6;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 6

; 172  : 		ScratchPad(2,9,18);

	push	18					; 00000012H
	push	9
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 173  : 	}
; 174  : 	else

	jmp	SHORT $LN5@ExecOA1Mod
$LN6@ExecOA1Mod:

; 175  : 	{
; 176  : 		sprintf(tempstr,"%dFT", iOA_RNG);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	push	ecx
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 177  : 		FillDEDMatrix(2,18-strlen(tempstr),tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, 18					; 00000012H
	sub	edx, eax
	push	edx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecOA1Mod:

; 178  : 	}
; 179  : 	//Line4
; 180  : 	FillDEDMatrix(3,5,"BRG");

	push	0
	push	OFFSET ??_C@_03DPKGJDEJ@BRG?$AA@
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 181  : 	if(OA_BRG)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+669]
	test	ecx, ecx
	je	SHORT $LN4@ExecOA1Mod

; 182  : 	{
; 183  : 		PossibleInputs = 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 4

; 184  : 		ScratchPad(3,9,16);

	push	16					; 00000010H
	push	9
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 185  : 	}
; 186  : 	else

	jmp	SHORT $LN3@ExecOA1Mod
$LN4@ExecOA1Mod:

; 187  : 	{
; 188  : 		sprintf(tempstr,"%3.1f'",fOA_BRG);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+688]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06NNABEIOP@?$CF3?41f?8?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 189  : 		FillDEDMatrix(3,(16-strlen(tempstr)),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 16					; 00000010H
	sub	ecx, eax
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecOA1Mod:

; 190  : 	}
; 191  : 	//Line5
; 192  : 	FillDEDMatrix(4,4,"ELEV");

	push	0
	push	OFFSET ??_C@_04OCLMINKH@ELEV?$AA@
	push	4
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 193  : 	if(OA_ALT)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+670]
	test	eax, eax
	je	SHORT $LN2@ExecOA1Mod

; 194  : 	{
; 195  : 		PossibleInputs = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 6

; 196  : 		ScratchPad(4,9,18);

	push	18					; 00000012H
	push	9
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 197  : 	}
; 198  : 	else

	jmp	SHORT $LN1@ExecOA1Mod
$LN2@ExecOA1Mod:

; 199  : 	{
; 200  : 		sprintf(tempstr,"%dFT",iOA_ALT);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+676]
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 201  : 		FillDEDMatrix(4,(18-strlen(tempstr)),tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, 18					; 00000012H
	sub	ecx, eax
	push	ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecOA1Mod:

; 202  : 	}
; 203  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecOA1Mode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecOA1Mode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_ETA$1 = -24						; size = 4
tv520 = -20						; size = 4
tv454 = -16						; size = 4
tv440 = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecDESTMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecDESTMode
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 	//Line1
; 68   : 	FillDEDMatrix(0,4,"DEST  DIR");

	push	0
	push	OFFSET ??_C@_09DGMPCDFL@DEST?5?5DIR?$AA@
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 69   : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 70   : 		
; 71   : 	//Get the current waypoint location
; 72   : 	xCurr = yCurr = zCurr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+344], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+340], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+336], xmm0

; 73   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 74   : 	if (playerAC && playerAC->curWaypoint)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN14@ExecDESTMo
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+728], 0
	je	SHORT $LN14@ExecDESTMo

; 75   : 		playerAC->curWaypoint->GetLocation(&xCurr, &yCurr, &zCurr);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 344				; 00000158H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 340				; 00000154H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 336				; 00000150H
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+728]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation
$LN14@ExecDESTMo:

; 76   : 		
; 77   : 	latitude	= (FALCON_ORIGIN_LAT * FT_PER_DEGREE + xCurr) / EARTH_RADIUS_FT;

	movss	xmm0, DWORD PTR ?FALCON_ORIGIN_LAT@@3MA
	mulss	xmm0, DWORD PTR __real@45be3840
	mulss	xmm0, DWORD PTR __real@42700000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+336]
	divss	xmm0, DWORD PTR __real@4b9fa682
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+304], xmm0

; 78   : 	cosLatitude = (float)cos(latitude);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+304]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+308]

; 79   : 	longitude	= ((FALCON_ORIGIN_LONG * DTR * EARTH_RADIUS_FT * cosLatitude) + yCurr) / (EARTH_RADIUS_FT * cosLatitude);

	movss	xmm0, DWORD PTR ?FALCON_ORIGIN_LONG@@3MA
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mulss	xmm0, DWORD PTR __real@4b9fa682
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+308]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+340]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@4b9fa682
	mulss	xmm1, DWORD PTR [edx+308]
	divss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+312], xmm0

; 80   : 		
; 81   : 	latitude	*= RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+304]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+304], xmm0

; 82   : 	longitude	*= RTD;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+312]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+312], xmm0

; 83   : 	
; 84   : 	longDeg		= FloatToInt32(longitude);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+312]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], eax

; 85   : 	longMin		= (float)fabs(longitude - longDeg) * DEG_TO_MIN;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+320]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+312]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv440[ebp]
	movss	xmm0, DWORD PTR tv440[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+332], xmm0

; 86   : 
; 87   : 	latDeg		= FloatToInt32(latitude);

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+304]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 88   : 	latMin		= (float)fabs(latitude - latDeg) * DEG_TO_MIN;

	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+316]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+304]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv454[ebp]
	movss	xmm0, DWORD PTR tv454[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+328], xmm0

; 89   : 
; 90   : 	// format lat/long here
; 91   : 	if(latMin < 10.0F) 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [edx+328]
	jbe	SHORT $LN13@ExecDESTMo

; 92   : 		sprintf(latStr, "%3d*0%2.2f\'", latDeg, latMin);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+328]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	push	edx
	push	OFFSET ??_C@_0M@JJFFFDAK@?$CF3d?$CK0?$CF2?42f?8?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 93   : 	else 

	jmp	SHORT $LN12@ExecDESTMo
$LN13@ExecDESTMo:

; 94   : 		sprintf(latStr, "%3d*%2.2f\'", latDeg, latMin);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+328]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+316]
	push	eax
	push	OFFSET ??_C@_0L@OPDFOOKO@?$CF3d?$CK?$CF2?42f?8?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN12@ExecDESTMo:

; 95   : 	if(longMin < 10.0F) 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR [edx+332]
	jbe	SHORT $LN11@ExecDESTMo

; 96   : 		sprintf(longStr, "%3d*0%2.2f\'", longDeg, longMin);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+332]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+320]
	push	edx
	push	OFFSET ??_C@_0M@JJFFFDAK@?$CF3d?$CK0?$CF2?42f?8?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 97   : 	else 

	jmp	SHORT $LN10@ExecDESTMo
$LN11@ExecDESTMo:

; 98   : 		sprintf(longStr, "%3d*%2.2f\'", longDeg, longMin);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+332]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+320]
	push	eax
	push	OFFSET ??_C@_0L@OPDFOOKO@?$CF3d?$CK?$CF2?42f?8?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H
$LN10@ExecDESTMo:

; 99   : 
; 100  : 	//Line2
; 101  : 	if(IsICPSet(ICPClass::EDIT_LAT) && Manual_Input)

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN9@ExecDESTMo
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+732]
	test	eax, eax
	je	SHORT $LN9@ExecDESTMo

; 102  : 	{
; 103  : 		FillDEDMatrix(1,5,"LAT  N");

	push	0
	push	OFFSET ??_C@_06BOCKAEBL@LAT?5?5N?$AA@
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 104  : 		PossibleInputs = 6;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 6

; 105  : 		ScratchPad(1,13,24);

	push	24					; 00000018H
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 106  : 	}
; 107  : 	else

	jmp	$LN8@ExecDESTMo
$LN9@ExecDESTMo:

; 108  : 	{
; 109  : 		if(IsICPSet(ICPClass::EDIT_LAT))

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN7@ExecDESTMo

; 110  : 		{
; 111  : 			FillDEDMatrix(1,13,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 112  : 			FillDEDMatrix(1,24,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	24					; 00000018H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 113  : 		}
; 114  : 		else

	jmp	SHORT $LN6@ExecDESTMo
$LN7@ExecDESTMo:

; 115  : 		{
; 116  : 			FillDEDMatrix(1,13," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 117  : 			FillDEDMatrix(1,24," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	24					; 00000018H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN6@ExecDESTMo:

; 118  : 		}
; 119  : 		FillDEDMatrix(1,5,"LAT  N");

	push	0
	push	OFFSET ??_C@_06BOCKAEBL@LAT?5?5N?$AA@
	push	5
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 120  : 		sprintf(tempstr,"%s", latStr);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 348				; 0000015cH
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 121  : 		FillDEDMatrix(1,14,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	14					; 0000000eH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN8@ExecDESTMo:

; 122  : 		
; 123  : 	}
; 124  : 	//Line3
; 125  : 	if(IsICPSet(ICPClass::EDIT_LONG) && Manual_Input)

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN5@ExecDESTMo
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+732]
	test	eax, eax
	je	SHORT $LN5@ExecDESTMo

; 126  : 	{
; 127  : 		FillDEDMatrix(2,5,"LNG  E");

	push	0
	push	OFFSET ??_C@_06CLMIICFH@LNG?5?5E?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 128  : 		PossibleInputs = 7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+748], 7

; 129  : 		ScratchPad(2,13,24);

	push	24					; 00000018H
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 130  : 	}
; 131  : 	else

	jmp	$LN4@ExecDESTMo
$LN5@ExecDESTMo:

; 132  : 	{	
; 133  : 		if(IsICPSet(ICPClass::EDIT_LONG))

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN3@ExecDESTMo

; 134  : 		{
; 135  : 			FillDEDMatrix(2,13,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 136  : 			FillDEDMatrix(2,24,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	24					; 00000018H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 137  : 		}
; 138  : 		else

	jmp	SHORT $LN2@ExecDESTMo
$LN3@ExecDESTMo:

; 139  : 		{
; 140  : 			FillDEDMatrix(2,13," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 141  : 			FillDEDMatrix(2,24," ");

	push	0
	push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	push	24					; 00000018H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN2@ExecDESTMo:

; 142  : 		}
; 143  : 		FillDEDMatrix(2,5,"LNG  E");

	push	0
	push	OFFSET ??_C@_06CLMIICFH@LNG?5?5E?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 144  : 		sprintf(tempstr, "%s", longStr);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 388				; 00000184H
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 145  : 		FillDEDMatrix(2,14,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN4@ExecDESTMo:

; 146  : 	}
; 147  : 	//Line4
; 148  : 	FillDEDMatrix(3,4,"ELEV");

	push	0
	push	OFFSET ??_C@_04OCLMINKH@ELEV?$AA@
	push	4
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 149  : 	sprintf(tempstr,"%4.0fFT",-zCurr);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+344]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07FPGNNANI@?$CF4?40fFT?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 150  : 	FillDEDMatrix(3,13,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 151  : 	//Line5
; 152  : 	if(playerAC)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN1@ExecDESTMo

; 153  : 	{
; 154  : 		VU_TIME ETA = SimLibElapsedTime / SEC_TO_MSEC + FloatToInt32(Distance(
; 155  : 		playerAC->XPos(), playerAC->YPos(), xCurr, yCurr) 
; 156  : 		/ playerAC->af->vt);

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+340]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+336]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?Distance@@YAMMMMM@Z			; Distance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv520[ebp]
	movss	xmm0, DWORD PTR tv520[ebp]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+932]
	divss	xmm0, DWORD PTR [edx+1120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _ETA$1[ebp], esi

; 157  : 		FormatTime(ETA, tempstr);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _ETA$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FormatTime@ICPClass@@QAEXJPAD@Z	; ICPClass::FormatTime
$LN1@ExecDESTMo:

; 158  : 	}
; 159  : 	FillDEDMatrix(4,5,"TOS");

	push	0
	push	OFFSET ??_C@_03HAIEHMHM@TOS?$AA@
	push	5
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 160  : 	FillDEDMatrix(4,13,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	13					; 0000000dH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 161  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?ExecDESTMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecDESTMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icplist.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecLISTMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecLISTMode
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	//Line1
; 30   : 	FillDEDMatrix(0,10,"LIST");

	push	0
	push	OFFSET ??_C@_04PCOPKCKE@LIST?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 31   : 	sprintf(tempstr, "%d",mWPIndex + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 32   : 	if(mWPIndex+1 <10)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	add	ecx, 1
	cmp	ecx, 10					; 0000000aH
	jge	SHORT $LN2@ExecLISTMo

; 33   : 		FillDEDMatrix(0,22,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 34   : 	else

	jmp	SHORT $LN1@ExecLISTMo
$LN2@ExecLISTMo:

; 35   : 		FillDEDMatrix(0,21,tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	21					; 00000015H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN1@ExecLISTMo:

; 36   : 	FillDEDMatrix(0,24,"\x01");

	push	0
	push	OFFSET ??_C@_01KHDNNMEB@?$AB?$AA@
	push	24					; 00000018H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 37   : 	//Line2
; 38   : 	FillDEDMatrix(1,PosA,"1",2);

	push	2
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 39   : 	FillDEDMatrix(1,PosB,"DEST");

	push	0
	push	OFFSET ??_C@_04IIEJFGNN@DEST?$AA@
	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 40   : 	FillDEDMatrix(1,PosC,"2",2);

	push	2
	push	OFFSET ??_C@_01FDFGLJHB@2?$AA@
	push	7
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 41   : 	FillDEDMatrix(1,PosD,"BNGO");

	push	0
	push	OFFSET ??_C@_04GCBBOEEK@BNGO?$AA@
	push	8
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 42   : 	FillDEDMatrix(1,PosE,"3",2);

	push	2
	push	OFFSET ??_C@_01EKENIIDA@3?$AA@
	push	13					; 0000000dH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 43   : 	FillDEDMatrix(1,PosF,"VIP");

	push	0
	push	OFFSET ??_C@_03PFCNJLIG@VIP?$AA@
	push	14					; 0000000eH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 44   : 	FillDEDMatrix(1,PosG,"R",2);

	push	2
	push	OFFSET ??_C@_01DGKLNCNG@R?$AA@
	push	20					; 00000014H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 45   : 	FillDEDMatrix(1,PosH,"INTG");

	push	0
	push	OFFSET ??_C@_04MDHIECHK@INTG?$AA@
	push	21					; 00000015H
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 46   : 	//Line3
; 47   : 	FillDEDMatrix(2,PosA,"4",2);

	push	2
	push	OFFSET ??_C@_01FAMBOPH@4?$AA@
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 48   : 	FillDEDMatrix(2,PosB,"NAV");

	push	0
	push	OFFSET ??_C@_03DIMJBCMI@NAV?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 49   : 	FillDEDMatrix(2,PosC,"5",2);

	push	2
	push	OFFSET ??_C@_01BMBHCPLG@5?$AA@
	push	7
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 50   : 	FillDEDMatrix(2,PosD,"MAN");

	push	0
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 51   : 	FillDEDMatrix(2,PosE,"6",2);

	push	2
	push	OFFSET ??_C@_01DHDKHMHF@6?$AA@
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 52   : 	FillDEDMatrix(2,PosF,"INS");

	push	0
	push	OFFSET ??_C@_03NDDFJJAJ@INS?$AA@
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 53   : 	FillDEDMatrix(2,PosG,"E",2);

	push	2
	push	OFFSET ??_C@_01DDCIFGEA@E?$AA@
	push	20					; 00000014H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 54   : 	FillDEDMatrix(2,PosH,"DLNK");

	push	0
	push	OFFSET ??_C@_04CMOFCHOK@DLNK?$AA@
	push	21					; 00000015H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 55   : 	//Line4
; 56   : 	FillDEDMatrix(3,PosA,"7",2);

	push	2
	push	OFFSET ??_C@_01COCBENDE@7?$AA@
	push	1
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 57   : 	FillDEDMatrix(3,PosB,"EWS");

	push	0
	push	OFFSET ??_C@_03IKBELOEO@EWS?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 58   : 	FillDEDMatrix(3,PosC,"8",2);

	push	2
	push	OFFSET ??_C@_01KJLJFBPL@8?$AA@
	push	7
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 59   : 	FillDEDMatrix(3,PosD,"MODE");

	push	0
	push	OFFSET ??_C@_04KAFEECCN@MODE?$AA@
	push	8
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 60   : 	FillDEDMatrix(3,PosE,"9",2);

	push	2
	push	OFFSET ??_C@_01LAKCGALK@9?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 61   : 	FillDEDMatrix(3,PosF,"VRP");

	push	0
	push	OFFSET ??_C@_03OFFONHBH@VRP?$AA@
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 62   : 	FillDEDMatrix(3,PosG,"0",2);

	push	2
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	20					; 00000014H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 63   : 	FillDEDMatrix(3,PosH,"MISC");

	push	0
	push	OFFSET ??_C@_04MKAMAPIC@MISC?$AA@
	push	21					; 00000015H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 64   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecLISTMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecLISTMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
