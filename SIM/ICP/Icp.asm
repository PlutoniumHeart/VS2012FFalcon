; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\Icp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?mpPointTypeNames@@3PAPADA			; mpPointTypeNames
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	??_C@_04OKGDLNCL@NONE?$AA@			; `string'
PUBLIC	??_C@_02DALMIMOA@GM?$AA@			; `string'
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	??_C@_03PPOGOLCL@POS?$AA@			; `string'
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	??_C@_04LAGKJDOM@STPT?$AA@			; `string'
PUBLIC	??_C@_05MIGCICNN@DLINK?$AA@			; `string'
PUBLIC	??_C@_04MGKDMHFC@MARK?$AA@			; `string'
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	??_C@_03NALBENGH@ILS?$AA@			; `string'
PUBLIC	??_C@_06KDCNJKDM@CRUISE?$AA@			; `string'
PUBLIC	??_C@_05MKDDHAMH@COMM1?$AA@			; `string'
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	??_C@_05OBBOCDAE@COMM2?$AA@			; `string'
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	??_C@_05KJCLNFLA@FAULT?$AA@			; `string'
PUBLIC	??_C@_04DLAJPPA@ALOW?$AA@			; `string'
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	??_C@_03DIMJBCMI@NAV?$AA@			; `string'
PUBLIC	??_C@_04PCOPKCKE@LIST?$AA@			; `string'
PUBLIC	??_C@_03OKJDCOKF@IFF?$AA@			; `string'
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	??_C@_02JIIELPFO@AA?$AA@			; `string'
PUBLIC	??_C@_02MONOBINI@AG?$AA@			; `string'
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?ICPModeNames@@3PAPADA				; ICPModeNames
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ??_C@_02MONOBINI@AG?$AA@
CONST	SEGMENT
??_C@_02MONOBINI@AG?$AA@ DB 'AG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JIIELPFO@AA?$AA@
CONST	SEGMENT
??_C@_02JIIELPFO@AA?$AA@ DB 'AA', 00H			; `string'
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ??_C@_03OKJDCOKF@IFF?$AA@
CONST	SEGMENT
??_C@_03OKJDCOKF@IFF?$AA@ DB 'IFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCOPKCKE@LIST?$AA@
CONST	SEGMENT
??_C@_04PCOPKCKE@LIST?$AA@ DB 'LIST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DIMJBCMI@NAV?$AA@
CONST	SEGMENT
??_C@_03DIMJBCMI@NAV?$AA@ DB 'NAV', 00H			; `string'
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ??_C@_04DLAJPPA@ALOW?$AA@
CONST	SEGMENT
??_C@_04DLAJPPA@ALOW?$AA@ DB 'ALOW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJCLNFLA@FAULT?$AA@
CONST	SEGMENT
??_C@_05KJCLNFLA@FAULT?$AA@ DB 'FAULT', 00H		; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ??_C@_05OBBOCDAE@COMM2?$AA@
CONST	SEGMENT
??_C@_05OBBOCDAE@COMM2?$AA@ DB 'COMM2', 00H		; `string'
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ??_C@_05MKDDHAMH@COMM1?$AA@
CONST	SEGMENT
??_C@_05MKDDHAMH@COMM1?$AA@ DB 'COMM1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDCNJKDM@CRUISE?$AA@
CONST	SEGMENT
??_C@_06KDCNJKDM@CRUISE?$AA@ DB 'CRUISE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NALBENGH@ILS?$AA@
CONST	SEGMENT
??_C@_03NALBENGH@ILS?$AA@ DB 'ILS', 00H			; `string'
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ??_C@_04MGKDMHFC@MARK?$AA@
CONST	SEGMENT
??_C@_04MGKDMHFC@MARK?$AA@ DB 'MARK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIGCICNN@DLINK?$AA@
CONST	SEGMENT
??_C@_05MIGCICNN@DLINK?$AA@ DB 'DLINK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LAGKJDOM@STPT?$AA@
CONST	SEGMENT
??_C@_04LAGKJDOM@STPT?$AA@ DB 'STPT', 00H		; `string'
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ??_C@_03PPOGOLCL@POS?$AA@
CONST	SEGMENT
??_C@_03PPOGOLCL@POS?$AA@ DB 'POS', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ??_C@_02DALMIMOA@GM?$AA@
CONST	SEGMENT
??_C@_02DALMIMOA@GM?$AA@ DB 'GM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE?$AA@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE?$AA@ DB 'NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
_DATA	SEGMENT
?mpPointTypeNames@@3PAPADA DD FLAT:??_C@_04OKGDLNCL@NONE?$AA@ ; mpPointTypeNames
	DD	FLAT:??_C@_02DALMIMOA@GM?$AA@
	DD	FLAT:??_C@_03PPOGOLCL@POS?$AA@
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?ICPModeNames@@3PAPADA DD FLAT:??_C@_04LAGKJDOM@STPT?$AA@ ; ICPModeNames
	DD	FLAT:??_C@_05MIGCICNN@DLINK?$AA@
	DD	FLAT:??_C@_04MGKDMHFC@MARK?$AA@
	DD	FLAT:??_C@_03NALBENGH@ILS?$AA@
	DD	FLAT:??_C@_06KDCNJKDM@CRUISE?$AA@
	DD	FLAT:??_C@_05MKDDHAMH@COMM1?$AA@
	DD	FLAT:??_C@_05OBBOCDAE@COMM2?$AA@
	DD	FLAT:??_C@_05KJCLNFLA@FAULT?$AA@
	DD	FLAT:??_C@_04DLAJPPA@ALOW?$AA@
	DD	FLAT:??_C@_03DIMJBCMI@NAV?$AA@
	DD	FLAT:??_C@_04PCOPKCKE@LIST?$AA@
	DD	FLAT:??_C@_03OKJDCOKF@IFF?$AA@
	DD	FLAT:??_C@_02JIIELPFO@AA?$AA@
	DD	FLAT:??_C@_02MONOBINI@AG?$AA@
	ORG $+8
_DATA	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?GetFaultCount@FaultClass@@QAEHXZ		; FaultClass::GetFaultCount
PUBLIC	?GetFFaultCount@FackClass@@QAEHXZ		; FackClass::GetFFaultCount
PUBLIC	?GetFirstFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z ; FackClass::GetFirstFault
PUBLIC	?GetNextFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z ; FackClass::GetNextFault
PUBLIC	?HandleENTR@ICPClass@@QAEXH@Z			; ICPClass::HandleENTR
PUBLIC	?HandlePrevNext@ICPClass@@QAEXHH@Z		; ICPClass::HandlePrevNext
PUBLIC	?NewMode@ICPClass@@QAEXH@Z			; ICPClass::NewMode
PUBLIC	?GetCruiseIndex@ICPClass@@QAEHXZ		; ICPClass::GetCruiseIndex
PUBLIC	?SetCruiseIndex@ICPClass@@QAEXH@Z		; ICPClass::SetCruiseIndex
PUBLIC	?ChangeToCNI@ICPClass@@QAEXXZ			; ICPClass::ChangeToCNI
PUBLIC	?SetICPFlag@ICPClass@@QAEXH@Z			; ICPClass::SetICPFlag
PUBLIC	?IsICPSet@ICPClass@@QAEHH@Z			; ICPClass::IsICPSet
PUBLIC	??0ICPClass@@QAE@XZ				; ICPClass::ICPClass
PUBLIC	??1ICPClass@@QAE@XZ				; ICPClass::~ICPClass
PUBLIC	?Exec@ICPClass@@QAEXXZ				; ICPClass::Exec
PUBLIC	?HandleInput@ICPClass@@QAEXHPAVCPButtonObject@@@Z ; ICPClass::HandleInput
PUBLIC	?SetOwnship@ICPClass@@QAEXXZ			; ICPClass::SetOwnship
PUBLIC	?GetTertiaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetTertiaryExclusiveButton
PUBLIC	?GetSecondaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetSecondaryExclusiveButton
PUBLIC	?InitPrimaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z ; ICPClass::InitPrimaryExclusiveButton
PUBLIC	?InitTertiaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z ; ICPClass::InitTertiaryExclusiveButton
PUBLIC	?GetPrimaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ; ICPClass::GetPrimaryExclusiveButton
PUBLIC	?GetDEDStrings@ICPClass@@QAEXPAD00@Z		; ICPClass::GetDEDStrings
PUBLIC	?SetRadio@VoiceManager@@QAEXH@Z			; VoiceManager::SetRadio
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@41700000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z:PROC ; FireControlComputer::SetStptMode
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	?SetCurrentState@CPButtonObject@@QAEXH@Z:PROC	; CPButtonObject::SetCurrentState
EXTRN	?GetFirstFault@FaultClass@@QAEHPAW4type_FSubSystem@1@PAH@Z:PROC ; FaultClass::GetFirstFault
EXTRN	?GetNextFault@FaultClass@@QAEHPAW4type_FSubSystem@1@PAH@Z:PROC ; FaultClass::GetNextFault
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?ENTRUpdateCOMMMode@ICPClass@@QAEXXZ:PROC	; ICPClass::ENTRUpdateCOMMMode
EXTRN	?PNUpdateCOMMMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateCOMMMode
EXTRN	?ExecCOMM1Mode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCOMM1Mode
EXTRN	?ExecCOMM2Mode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCOMM2Mode
EXTRN	?ExecIFFMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecIFFMode
EXTRN	?ExecLISTMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecLISTMode
EXTRN	?ExecMISCMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMISCMode
EXTRN	?OneButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::OneButton
EXTRN	?TwoButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::TwoButton
EXTRN	?ThreeButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::ThreeButton
EXTRN	?FourButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::FourButton
EXTRN	?FifeButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::FifeButton
EXTRN	?SixButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::SixButton
EXTRN	?SevenButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::SevenButton
EXTRN	?EightButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::EightButton
EXTRN	?NineButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::NineButton
EXTRN	?ZeroButton@ICPClass@@QAEXH@Z:PROC		; ICPClass::ZeroButton
EXTRN	?CNISwitch@ICPClass@@QAEXH@Z:PROC		; ICPClass::CNISwitch
EXTRN	?ExecCNIMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCNIMode
EXTRN	?ExecILSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecILSMode
EXTRN	?ENTRUpdateILSMode@ICPClass@@QAEXXZ:PROC	; ICPClass::ENTRUpdateILSMode
EXTRN	?PNUpdateILSMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateILSMode
EXTRN	?ExecALOWMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecALOWMode
EXTRN	?PNUpdateALOWMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateALOWMode
EXTRN	?ExecSTPTMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecSTPTMode
EXTRN	?PNUpdateSTPTMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateSTPTMode
EXTRN	?CheckAutoSTPT@ICPClass@@QAEXXZ:PROC		; ICPClass::CheckAutoSTPT
EXTRN	?ExecCRUSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCRUSMode
EXTRN	?PNUpdateCRUSMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateCRUSMode
EXTRN	?ExecTimeMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecTimeMode
EXTRN	?ExecMARKMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMARKMode
EXTRN	?PNUpdateMARKMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateMARKMode
EXTRN	?ENTRUpdateMARKMode@ICPClass@@QAEXXZ:PROC	; ICPClass::ENTRUpdateMARKMode
EXTRN	?ExecFIXMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecFIXMode
EXTRN	?ExecACALMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecACALMode
EXTRN	?ExecFACKMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecFACKMode
EXTRN	?PNUpdateFACKMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateFACKMode
EXTRN	?ExecDESTMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecDESTMode
EXTRN	?ExecOA1Mode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecOA1Mode
EXTRN	?ExecOA2Mode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecOA2Mode
EXTRN	?ExecBingo@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecBingo
EXTRN	?ExecVIPMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecVIPMode
EXTRN	?ExecNAVMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecNAVMode
EXTRN	?ExecMANMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMANMode
EXTRN	?ExecINSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecINSMode
EXTRN	?ExecEWSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecEWSMode
EXTRN	?ChaffPGM@ICPClass@@QAEXXZ:PROC			; ICPClass::ChaffPGM
EXTRN	?FlarePGM@ICPClass@@QAEXXZ:PROC			; ICPClass::FlarePGM
EXTRN	?ExecMODEMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMODEMode
EXTRN	?ExecVRPMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecVRPMode
EXTRN	?ExecINTGMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecINTGMode
EXTRN	?ExecDLINKMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecDLINKMode
EXTRN	?PNUpdateDLINKMode@ICPClass@@QAEXHH@Z:PROC	; ICPClass::PNUpdateDLINKMode
EXTRN	?ExecCORRMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCORRMode
EXTRN	?ExecMAGVMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMAGVMode
EXTRN	?ExecOFPMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecOFPMode
EXTRN	?ExecINSMMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecINSMMode
EXTRN	?ExecLASRMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecLASRMode
EXTRN	?ExecGPSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecGPSMode
EXTRN	?ExecDRNGMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecDRNGMode
EXTRN	?ExecBullMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecBullMode
EXTRN	?ExecWPTMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecWPTMode
EXTRN	?ExecHARMMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecHARMMode
EXTRN	?ExecWinAmpMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecWinAmpMode
EXTRN	?InitStuff@ICPClass@@QAEXXZ:PROC		; ICPClass::InitStuff
EXTRN	?ClearStrings@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearStrings
EXTRN	?ClearFlags@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearFlags
EXTRN	?HandleManualInput@ICPClass@@QAEXH@Z:PROC	; ICPClass::HandleManualInput
EXTRN	?ClearInput@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearInput
EXTRN	?CheckMode@ICPClass@@QAEHXZ:PROC		; ICPClass::CheckMode
EXTRN	?PushedSame@ICPClass@@QAEXH@Z:PROC		; ICPClass::PushedSame
EXTRN	?ManualInput@ICPClass@@QAEHXZ:PROC		; ICPClass::ManualInput
EXTRN	?LeaveCNI@ICPClass@@QAEXXZ:PROC			; ICPClass::LeaveCNI
EXTRN	?ClearDigits@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearDigits
EXTRN	?ClearString@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearString
EXTRN	?ResetSubPages@ICPClass@@QAEXXZ:PROC		; ICPClass::ResetSubPages
EXTRN	?ICPEnter@ICPClass@@QAEXXZ:PROC			; ICPClass::ICPEnter
EXTRN	?StepHOMERNGSTPT@ICPClass@@QAEXH@Z:PROC		; ICPClass::StepHOMERNGSTPT
EXTRN	?EWSOnOff@ICPClass@@QAEXXZ:PROC			; ICPClass::EWSOnOff
EXTRN	?StepEWSProg@ICPClass@@QAEXH@Z:PROC		; ICPClass::StepEWSProg
EXTRN	?GetINSInfo@ICPClass@@QAEXXZ:PROC		; ICPClass::GetINSInfo
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetDEDSwitch@HudClass@@QAEHXZ:PROC		; HudClass::GetDEDSwitch
EXTRN	?Previous@WinAmpFrontEnd@@QAEXXZ:PROC		; WinAmpFrontEnd::Previous
EXTRN	?Next@WinAmpFrontEnd@@QAEXXZ:PROC		; WinAmpFrontEnd::Next
EXTRN	?VolUp@WinAmpFrontEnd@@QAEXXZ:PROC		; WinAmpFrontEnd::VolUp
EXTRN	?VolDown@WinAmpFrontEnd@@QAEXXZ:PROC		; WinAmpFrontEnd::VolDown
EXTRN	?TogglePlayback@WinAmpFrontEnd@@QAEXXZ:PROC	; WinAmpFrontEnd::TogglePlayback
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?VM@@3PAVVoiceManager@@A:DWORD			; VM
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?winamp@@3PAVWinAmpFrontEnd@@A:DWORD		; winamp
EXTRN	?g_bPilotEntertainment@@3_NA:BYTE		; g_bPilotEntertainment
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falcsnd\voicemanager.h
;	COMDAT ?SetRadio@VoiceManager@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_radio$ = 8						; size = 4
?SetRadio@VoiceManager@@QAEXH@Z PROC			; VoiceManager::SetRadio, COMDAT
; _this$ = ecx

; 215  : 	void		SetRadio				(int radio)			{currRadio = radio;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _radio$[ebp]
	mov	DWORD PTR [eax+144], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadio@VoiceManager@@QAEXH@Z ENDP			; VoiceManager::SetRadio
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pstr1$ = 8						; size = 4
_pstr2$ = 12						; size = 4
_pstr3$ = 16						; size = 4
?GetDEDStrings@ICPClass@@QAEXPAD00@Z PROC		; ICPClass::GetDEDStrings
; _this$ = ecx

; 982  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 983  : 	strcpy(pstr1, mpLine1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _pstr1$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 984  : 	strcpy(pstr2, mpLine2);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	mov	eax, DWORD PTR _pstr2$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 985  : 	strcpy(pstr3, mpLine3);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	push	ecx
	mov	edx, DWORD PTR _pstr3$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8

; 986  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetDEDStrings@ICPClass@@QAEXPAD00@Z ENDP		; ICPClass::GetDEDStrings
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPrimaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ PROC ; ICPClass::GetPrimaryExclusiveButton
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		return mpPrimaryExclusiveButton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+244]

; 138  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrimaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ENDP ; ICPClass::GetPrimaryExclusiveButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbutton$ = 8						; size = 4
?InitTertiaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z PROC ; ICPClass::InitTertiaryExclusiveButton
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		mpTertiaryExclusiveButton = pbutton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbutton$[ebp]
	mov	DWORD PTR [eax+236], ecx

; 167  : 		mpTertiaryExclusiveButton->SetCurrentState(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+236]
	call	?SetCurrentState@CPButtonObject@@QAEXH@Z ; CPButtonObject::SetCurrentState

; 168  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InitTertiaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z ENDP ; ICPClass::InitTertiaryExclusiveButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbutton$ = 8						; size = 4
?InitPrimaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z PROC ; ICPClass::InitPrimaryExclusiveButton
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		mpPrimaryExclusiveButton = pbutton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbutton$[ebp]
	mov	DWORD PTR [eax+244], ecx

; 157  : 		mpPrimaryExclusiveButton->SetCurrentState(1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+244]
	call	?SetCurrentState@CPButtonObject@@QAEXH@Z ; CPButtonObject::SetCurrentState

; 158  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?InitPrimaryExclusiveButton@ICPClass@@QAEXPAVCPButtonObject@@@Z ENDP ; ICPClass::InitPrimaryExclusiveButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSecondaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ PROC ; ICPClass::GetSecondaryExclusiveButton
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		return mpSecondaryExclusiveButton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+240]

; 148  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSecondaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ENDP ; ICPClass::GetSecondaryExclusiveButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTertiaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ PROC ; ICPClass::GetTertiaryExclusiveButton
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 		return mpTertiaryExclusiveButton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+236]

; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTertiaryExclusiveButton@ICPClass@@QAEPAVCPButtonObject@@XZ ENDP ; ICPClass::GetTertiaryExclusiveButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?SetOwnship@ICPClass@@QAEXXZ PROC			; ICPClass::SetOwnship
; _this$ = ecx

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 176  : 	
; 177  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 178  : 
; 179  : 	if(playerAC && playerAC->IsAirplane()) // 2002-02-15 MODIFIED BY S.G. Added the IsAirplane test since it could be an ejected pilot

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN2@SetOwnship
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	je	SHORT $LN2@SetOwnship

; 180  : 	{
; 181  : 
; 182  : 		// Waypoint Stuff
; 183  : 		mpWayPoints				= playerAC->waypoint; // head of the waypoint list

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+732]
	mov	DWORD PTR [ecx+4], eax

; 184  : 		mNumWayPts				= (BYTE) playerAC->numWaypoints;

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+736]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], edx

; 185  : 
; 186  : 		mCruiseWPIndex			= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0

; 187  : 		mpCruiseWP				= mpWayPoints;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+288], ecx

; 188  : 		mList					= STPT_LIST;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 0

; 189  : 
; 190  : 		// Fault stuff
; 191  : 		mFaultNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 192  : 		mFaultFunc = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], 0

; 193  : 	}
; 194  : 	else { // 2002-02-15 ADDED BY S.G. Clear it up if we can't get the player's aircraft info

	jmp	SHORT $LN3@SetOwnship
$LN2@SetOwnship:

; 195  : 		// Waypoint Stuff
; 196  : 		mpWayPoints				= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 197  : 		mNumWayPts				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], 0

; 198  : 
; 199  : 		mCruiseWPIndex			= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0

; 200  : 		mpCruiseWP				= mpWayPoints;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+288], ecx

; 201  : 		mList					= STPT_LIST;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 0

; 202  : 
; 203  : 		// Fault stuff
; 204  : 		mFaultNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 205  : 		mFaultFunc = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], 0
$LN3@SetOwnship:

; 206  : 	}
; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetOwnship@ICPClass@@QAEXXZ ENDP			; ICPClass::SetOwnship
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
tv162 = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
_pbutton$ = 12						; size = 4
?HandleInput@ICPClass@@QAEXHPAVCPButtonObject@@@Z PROC	; ICPClass::HandleInput
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 220  : 
; 221  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	$LN224@HandleInpu

; 222  : 	{
; 223  : 		//MI original code
; 224  : 		if(mode == AA_BUTTON || mode == AG_BUTTON || mode == NAV_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 11		; 0000000bH
	je	SHORT $LN222@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 12		; 0000000cH
	je	SHORT $LN222@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 10		; 0000000aH
	jne	SHORT $LN223@HandleInpu
$LN222@HandleInpu:

; 225  : 		{
; 226  : 			if(pbutton != mpPrimaryExclusiveButton) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pbutton$[ebp]
	cmp	edx, DWORD PTR [ecx+244]
	je	SHORT $LN220@HandleInpu

; 227  : 			{
; 228  : 				mpPrimaryExclusiveButton->SetCurrentState(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	call	?SetCurrentState@CPButtonObject@@QAEXH@Z ; CPButtonObject::SetCurrentState

; 229  : 				mICPPrimaryMode				= mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 230  : 				mpPrimaryExclusiveButton	= pbutton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbutton$[ebp]
	mov	DWORD PTR [eax+244], ecx

; 231  : 				if(mICPSecondaryMode == NONE_MODE) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN220@HandleInpu

; 232  : 				{
; 233  : 					mUpdateFlags |= CNI_UPDATE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 234  : 					ExecCNIMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCNIMode@ICPClass@@QAEXXZ		; ICPClass::ExecCNIMode
$LN220@HandleInpu:

; 235  : 				}
; 236  : 			}
; 237  : 		}

	jmp	$LN202@HandleInpu
$LN223@HandleInpu:

; 238  : 		else if(mode == PREV_BUTTON || mode == NEXT_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 13		; 0000000dH
	je	SHORT $LN217@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 14		; 0000000eH
	jne	SHORT $LN218@HandleInpu
$LN217@HandleInpu:

; 239  : 		{
; 240  : 			HandlePrevNext(mode, mICPSecondaryMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandlePrevNext@ICPClass@@QAEXHH@Z	; ICPClass::HandlePrevNext
	jmp	$LN202@HandleInpu
$LN218@HandleInpu:

; 241  : 		}
; 242  : 		else if(mode == ENTR_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 15		; 0000000fH
	jne	SHORT $LN215@HandleInpu

; 243  : 		{
; 244  : 			HandleENTR(mICPSecondaryMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleENTR@ICPClass@@QAEXH@Z		; ICPClass::HandleENTR
	jmp	$LN202@HandleInpu
$LN215@HandleInpu:

; 245  : 		}
; 246  : 		else if(mode == COMM1_BUTTON || mode == COMM2_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 6
	je	SHORT $LN212@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 7
	jne	SHORT $LN213@HandleInpu
$LN212@HandleInpu:

; 247  : 		{
; 248  : 			if(pbutton != mpTertiaryExclusiveButton) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pbutton$[ebp]
	cmp	eax, DWORD PTR [edx+236]
	je	SHORT $LN208@HandleInpu

; 249  : 			{
; 250  : 				mpTertiaryExclusiveButton->SetCurrentState(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+236]
	call	?SetCurrentState@CPButtonObject@@QAEXH@Z ; CPButtonObject::SetCurrentState

; 251  : 				mICPTertiaryMode				= mode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [edx+16], eax

; 252  : 				mpTertiaryExclusiveButton	= pbutton;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pbutton$[ebp]
	mov	DWORD PTR [ecx+236], edx

; 253  : 				mUpdateFlags |= CNI_UPDATE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 254  : 				if(VM) {

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	SHORT $LN208@HandleInpu

; 255  : 					if(mode == COMM1_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 6
	jne	SHORT $LN209@HandleInpu

; 256  : 					{
; 257  : 						VM->SetRadio(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?SetRadio@VoiceManager@@QAEXH@Z		; VoiceManager::SetRadio

; 258  : 					}
; 259  : 					else 

	jmp	SHORT $LN208@HandleInpu
$LN209@HandleInpu:

; 260  : 					{
; 261  : 						VM->SetRadio(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?SetRadio@VoiceManager@@QAEXH@Z		; VoiceManager::SetRadio
$LN208@HandleInpu:

; 262  : 					}
; 263  : 				}
; 264  : 			}				
; 265  : 		}
; 266  : 		else 

	jmp	$LN202@HandleInpu
$LN213@HandleInpu:

; 267  : 		{
; 268  : 			if(pbutton == mpSecondaryExclusiveButton) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbutton$[ebp]
	cmp	ecx, DWORD PTR [eax+240]
	jne	SHORT $LN206@HandleInpu

; 269  : 			{
; 270  : 				mICPSecondaryMode = NONE_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 271  : 				mpSecondaryExclusiveButton->SetCurrentState(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?SetCurrentState@CPButtonObject@@QAEXH@Z ; CPButtonObject::SetCurrentState

; 272  : 				mpSecondaryExclusiveButton  = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+240], 0

; 273  : 				mUpdateFlags |= CNI_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 274  : 				ExecCNIMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCNIMode@ICPClass@@QAEXXZ		; ICPClass::ExecCNIMode

; 275  : 			}
; 276  : 			else 

	jmp	$LN202@HandleInpu
$LN206@HandleInpu:

; 277  : 			{
; 278  : 				if(mpSecondaryExclusiveButton != NULL) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+240], 0
	je	SHORT $LN204@HandleInpu

; 279  : 				{
; 280  : 					mpSecondaryExclusiveButton->SetCurrentState(0);			

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	?SetCurrentState@CPButtonObject@@QAEXH@Z ; CPButtonObject::SetCurrentState
$LN204@HandleInpu:

; 281  : 				}
; 282  : 
; 283  : 				mICPSecondaryMode				= mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 284  : 				mpSecondaryExclusiveButton = pbutton;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbutton$[ebp]
	mov	DWORD PTR [eax+240], ecx

; 285  : 
; 286  : 
; 287  : 				switch(mode) 

	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv162[ebp], edx
	mov	eax, DWORD PTR tv162[ebp]
	sub	eax, 1
	mov	DWORD PTR tv162[ebp], eax
	cmp	DWORD PTR tv162[ebp], 8
	ja	$LN202@HandleInpu
	mov	ecx, DWORD PTR tv162[ebp]
	jmp	DWORD PTR $LN227@HandleInpu[ecx*4]

; 288  : 				{
; 289  : 				case NONE_MODE:
; 290  : 					break;

	jmp	$LN202@HandleInpu
$LN200@HandleInpu:

; 291  : 				case STPT_BUTTON:
; 292  : 					playerAC->FCC->SetStptMode(FireControlComputer::FCCWaypoint);

	push	0
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 293  : 					playerAC->FCC->waypointStepCmd = 127;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], 127			; 0000007fH

; 294  : 					mUpdateFlags |= STPT_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 295  : 					break;

	jmp	$LN202@HandleInpu
$LN199@HandleInpu:

; 296  : 				case DLINK_BUTTON:
; 297  : 					playerAC->FCC->SetStptMode(FireControlComputer::FCCDLinkpoint);

	push	1
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 298  : 					playerAC->FCC->waypointStepCmd = 127;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], 127			; 0000007fH

; 299  : 					mUpdateFlags |= DLINK_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 300  : 					ExecDLINKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDLINKMode@ICPClass@@QAEXXZ		; ICPClass::ExecDLINKMode

; 301  : 					break;

	jmp	$LN202@HandleInpu
$LN198@HandleInpu:

; 302  : 				case MARK_BUTTON:
; 303  : 					playerAC->FCC->SetStptMode(FireControlComputer::FCCMarkpoint);

	push	2
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 304  : 					playerAC->FCC->waypointStepCmd = 127;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], 127			; 0000007fH

; 305  : 					mUpdateFlags |= MARK_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 306  : 					ExecMARKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMARKMode@ICPClass@@QAEXXZ		; ICPClass::ExecMARKMode

; 307  : 					break;

	jmp	SHORT $LN202@HandleInpu
$LN197@HandleInpu:

; 308  : 				case ILS_BUTTON:
; 309  : 					mUpdateFlags |= ILS_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 310  : 					ExecILSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILSMode@ICPClass@@QAEXXZ		; ICPClass::ExecILSMode

; 311  : 					break;

	jmp	SHORT $LN202@HandleInpu
$LN196@HandleInpu:

; 312  : 				case CRUS_BUTTON:
; 313  : 					mUpdateFlags |= CRUS_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 314  : 					ExecCRUSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCRUSMode@ICPClass@@QAEXXZ		; ICPClass::ExecCRUSMode

; 315  : 					break;

	jmp	SHORT $LN202@HandleInpu
$LN195@HandleInpu:

; 316  : 				case FACK_BUTTON:
; 317  : 					mUpdateFlags |= FACK_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 318  : 				PNUpdateFACKMode (NEXT_BUTTON, FACK_BUTTON);

	push	8
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateFACKMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateFACKMode

; 319  : 					ExecFACKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecFACKMode@ICPClass@@QAEXXZ		; ICPClass::ExecFACKMode

; 320  : 					break;

	jmp	SHORT $LN202@HandleInpu
$LN194@HandleInpu:

; 321  : 				case ALOW_BUTTON:
; 322  : 					mUpdateFlags |= ALOW_UPDATE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN202@HandleInpu:

; 323  : 					break;
; 324  : 				}
; 325  : 			}
; 326  : 		}
; 327  : 	}
; 328  : 	else

	jmp	$LN1@HandleInpu
$LN224@HandleInpu:

; 329  : 	{
; 330  : 		if(!playerAC->HasPower(AircraftClass::UFCPower) ||
; 331  : 			playerAC->mFaults->GetFault(FaultClass::ufc_fault))

	push	8
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	SHORT $LN191@HandleInpu
	push	28					; 0000001cH
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN192@HandleInpu
$LN191@HandleInpu:

; 332  : 			return;

	jmp	$LN225@HandleInpu
$LN192@HandleInpu:

; 333  : 
; 334  : 		//Master Modes
; 335  : 		if(mode == AA_BUTTON || mode == AG_BUTTON || mode == NAV_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 11		; 0000000bH
	je	SHORT $LN189@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 12		; 0000000cH
	je	SHORT $LN189@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 10		; 0000000aH
	jne	SHORT $LN190@HandleInpu
$LN189@HandleInpu:

; 336  : 		{
; 337  : 			mICPPrimaryMode	= mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 338  : 			if(IsICPSet(ICPClass::MODE_LIST) && mICPSecondaryMode == EIGHT_BUTTON)

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN188@HandleInpu
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 24			; 00000018H
	jne	SHORT $LN188@HandleInpu

; 339  : 				ExecMODEMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMODEMode@ICPClass@@QAEXXZ		; ICPClass::ExecMODEMode
$LN188@HandleInpu:

; 340  : 			if(mode == AA_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 11		; 0000000bH
	jne	SHORT $LN187@HandleInpu

; 341  : 			{
; 342  : 				IN_AA = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+729], 1

; 343  : 				IN_AG = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+728], 0
	jmp	SHORT $LN185@HandleInpu
$LN187@HandleInpu:

; 344  : 			}
; 345  : 			else if(mode == AG_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 12		; 0000000cH
	jne	SHORT $LN185@HandleInpu

; 346  : 			{
; 347  : 				IN_AA = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+729], 0

; 348  : 				IN_AG = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+728], 1
$LN185@HandleInpu:

; 349  : 			}
; 350  : 		}
; 351  : 
; 352  : 		/****************************************************/
; 353  : 		/*These are OVERRIDE buttons. With each of these	*/
; 354  : 		/*we can get into specific DED pages, no matter in	*/
; 355  : 		/*what mode we've been before.						*/
; 356  : 		/****************************************************/
; 357  : 
; 358  : 		else if(mode == COMM1_BUTTON || mode == COMM2_BUTTON ||

	jmp	$LN1@HandleInpu
$LN190@HandleInpu:

; 359  : 			mode == LIST_BUTTON || mode == IFF_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 6
	je	SHORT $LN182@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 7
	je	SHORT $LN182@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 21		; 00000015H
	je	SHORT $LN182@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 20		; 00000014H
	jne	SHORT $LN183@HandleInpu
$LN182@HandleInpu:

; 360  : 		{
; 361  : 			//This results in a new DED page, clear our strings
; 362  : 			ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 363  : 
; 364  : 			//Did we push the same button as before?
; 365  : 			if(mICPTertiaryMode == mode && mode != CNI_MODE)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _mode$[ebp]
	jne	SHORT $LN181@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 27		; 0000001bH
	je	SHORT $LN181@HandleInpu

; 366  : 				PushedSame(LastMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1380]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushedSame@ICPClass@@QAEXH@Z		; ICPClass::PushedSame

; 367  : 			else

	jmp	SHORT $LN180@HandleInpu
$LN181@HandleInpu:

; 368  : 				NewMode(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NewMode@ICPClass@@QAEXH@Z		; ICPClass::NewMode
$LN180@HandleInpu:
	jmp	$LN1@HandleInpu
$LN183@HandleInpu:

; 369  : 		}
; 370  : 		//END OVERRIDE FUNCTIONS
; 371  : 		//special case, FACK
; 372  : 		else if(mode == FACK_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 8
	jne	$LN178@HandleInpu

; 373  : 		{
; 374  : 		    if (playerAC && playerAC->mFaults) { 

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN177@HandleInpu
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+928], 0
	je	$LN177@HandleInpu

; 375  : 			if (m_FaultDisplay == false) { // was off

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+468]
	test	edx, edx
	jne	SHORT $LN176@HandleInpu

; 376  : 			    m_FaultDisplay = true; // now on

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+468], 1

; 377  : 			    //have a fault, update our display
; 378  : 			    playerAC->mFaults->GetFirstFault(&m_subsystem, &m_function);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 476				; 000001dcH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 472				; 000001d8H
	push	edx
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFirstFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z ; FackClass::GetFirstFault

; 379  : 			}
; 380  : 			else { // move to next fault

	jmp	SHORT $LN174@HandleInpu
$LN176@HandleInpu:

; 381  : 			    if (playerAC->mFaults->GetFFaultCount() <= 0 ||
; 382  : 				playerAC->mFaults->GetNextFault(&m_subsystem, &m_function) == FALSE)

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFFaultCount@FackClass@@QAEHXZ	; FackClass::GetFFaultCount
	test	eax, eax
	jle	SHORT $LN173@HandleInpu
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 476				; 000001dcH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	push	eax
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetNextFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z ; FackClass::GetNextFault
	test	eax, eax
	jne	SHORT $LN174@HandleInpu
$LN173@HandleInpu:

; 383  : 				m_FaultDisplay = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+468], 0
$LN174@HandleInpu:

; 384  : 			}
; 385  : 			mUpdateFlags |= FACK_UPDATE; // we need to do some work

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN177@HandleInpu:

; 386  : 		    }
; 387  : 		}

	jmp	$LN1@HandleInpu
$LN178@HandleInpu:

; 388  : 
; 389  : 		//SENCONDAR FUNCTIONS
; 390  : 		else if(mode == PREV_BUTTON || mode == NEXT_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 13		; 0000000dH
	je	SHORT $LN170@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 14		; 0000000eH
	jne	$LN171@HandleInpu
$LN170@HandleInpu:

; 391  : 		{
; 392  : 			ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 393  : 			if(IsICPSet(ICPClass::EDIT_STPT))

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN169@HandleInpu

; 394  : 				PNUpdateSTPTMode(mode, 0);

	push	0
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateSTPTMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateSTPTMode
	jmp	$LN126@HandleInpu
$LN169@HandleInpu:

; 395  : 
; 396  : 			else if(mICPSecondaryMode == CRUS_MODE)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 5
	jne	SHORT $LN167@HandleInpu

; 397  : 				StepHOMERNGSTPT(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StepHOMERNGSTPT@ICPClass@@QAEXH@Z	; ICPClass::StepHOMERNGSTPT
	jmp	$LN126@HandleInpu
$LN167@HandleInpu:

; 398  : 			else if(IsICPSet(ICPClass::MODE_CNI) && mICPSecondaryMode == SEVEN_BUTTON)

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN165@HandleInpu
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 3
	jne	SHORT $LN165@HandleInpu

; 399  : 				PNUpdateMARKMode(mode, 0);

	push	0
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateMARKMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateMARKMode
	jmp	$LN126@HandleInpu
$LN165@HandleInpu:

; 400  : 
; 401  : 			else if(IsICPSet(ICPClass::EDIT_VHF) || IsICPSet(ICPClass::EDIT_UHF))

	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN162@HandleInpu
	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN163@HandleInpu
$LN162@HandleInpu:

; 402  : 				PNUpdateCOMMMode(mode, 0);

	push	0
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateCOMMMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateCOMMMode
	jmp	$LN126@HandleInpu
$LN163@HandleInpu:

; 403  : 
; 404  : 			else if(IsICPSet(ICPClass::MODE_DLINK))

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN160@HandleInpu

; 405  : 				PNUpdateDLINKMode(mode, 0);

	push	0
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateDLINKMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateDLINKMode
	jmp	$LN126@HandleInpu
$LN160@HandleInpu:

; 406  : 
; 407  : 			else if(IsICPSet(ICPClass::MODE_COMM1))//Cobra 10/31/04 TJL

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN158@HandleInpu

; 408  : 			{
; 409  : 				if(mode == NEXT_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 14		; 0000000eH
	jne	SHORT $LN157@HandleInpu

; 410  : 				{
; 411  : 					if(PREUHF == NUM_COMM_CHANNELS)	// ASSO:

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	ucomiss	xmm0, DWORD PTR __real@41700000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN156@HandleInpu

; 412  : 						PREUHF = 1;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+1344], xmm0

; 413  : 					else

	jmp	SHORT $LN155@HandleInpu
$LN156@HandleInpu:

; 414  : 						PREUHF++;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1344]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1344], xmm0
$LN155@HandleInpu:

; 415  : 				}
; 416  : 				else

	jmp	SHORT $LN152@HandleInpu
$LN157@HandleInpu:

; 417  : 				{
; 418  : 					if(PREUHF == 1)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1344]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN153@HandleInpu

; 419  : 						PREUHF = NUM_COMM_CHANNELS;	// ASSO:

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [eax+1344], xmm0

; 420  : 					else

	jmp	SHORT $LN152@HandleInpu
$LN153@HandleInpu:

; 421  : 						PREUHF--;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1344]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+1344], xmm0
$LN152@HandleInpu:

; 422  : 				}

	jmp	$LN126@HandleInpu
$LN158@HandleInpu:

; 423  : 			}
; 424  : 			else if(IsICPSet(ICPClass::MODE_COMM2))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN150@HandleInpu

; 425  : 			{
; 426  : 				if(mode == NEXT_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 14		; 0000000eH
	jne	SHORT $LN149@HandleInpu

; 427  : 				{
; 428  : 					if(PREVHF == NUM_COMM_CHANNELS)	// ASSO:

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	ucomiss	xmm0, DWORD PTR __real@41700000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN148@HandleInpu

; 429  : 						PREVHF = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+1348], xmm0

; 430  : 					else

	jmp	SHORT $LN147@HandleInpu
$LN148@HandleInpu:

; 431  : 						PREVHF++;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1348]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1348], xmm0
$LN147@HandleInpu:

; 432  : 				}
; 433  : 				else

	jmp	SHORT $LN144@HandleInpu
$LN149@HandleInpu:

; 434  : 				{
; 435  : 					if(PREVHF == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1348]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN145@HandleInpu

; 436  : 						PREVHF = NUM_COMM_CHANNELS;	// ASSO:

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR [edx+1348], xmm0

; 437  : 					else

	jmp	SHORT $LN144@HandleInpu
$LN145@HandleInpu:

; 438  : 						PREVHF--;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1348]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1348], xmm0
$LN144@HandleInpu:

; 439  : 				}

	jmp	$LN126@HandleInpu
$LN150@HandleInpu:

; 440  : 			}
; 441  : 			else if(IsICPSet(ICPClass::MODE_CNI) && mICPSecondaryMode == SIX_BUTTON)

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN142@HandleInpu
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 23			; 00000017H
	jne	$LN142@HandleInpu

; 442  : 			{
; 443  : 				if(mode == NEXT_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 14		; 0000000eH
	jne	SHORT $LN141@HandleInpu

; 444  : 				{
; 445  : 					if(running)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+456]
	test	ecx, ecx
	je	SHORT $LN140@HandleInpu

; 446  : 					{
; 447  : 						running = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+456], 0

; 448  : 						stopped = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+457], 1
	jmp	SHORT $LN137@HandleInpu
$LN140@HandleInpu:

; 449  : 					}
; 450  : 					else if(stopped)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+457]
	test	edx, edx
	je	SHORT $LN138@HandleInpu

; 451  : 					{
; 452  : 						running = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+456], 1

; 453  : 						stopped = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+457], 0

; 454  : 					}
; 455  : 					else

	jmp	SHORT $LN137@HandleInpu
$LN138@HandleInpu:

; 456  : 					{
; 457  : 						Start = vuxGameTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR [edx+460], eax

; 458  : 						running = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+456], 1
$LN137@HandleInpu:

; 459  : 					}
; 460  : 				}
; 461  : 				else

	jmp	SHORT $LN136@HandleInpu
$LN141@HandleInpu:

; 462  : 				{
; 463  : 					Start = vuxGameTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	mov	DWORD PTR [edx+460], eax

; 464  : 					Difference = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], 0

; 465  : 					running = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+456], 0

; 466  : 					stopped = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+457], 0
$LN136@HandleInpu:

; 467  : 				}

	jmp	$LN126@HandleInpu
$LN142@HandleInpu:

; 468  : 			}
; 469  : 			else if(IsICPSet(ICPClass::MODE_LIST) && mICPSecondaryMode == EWS_MODE)

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN134@HandleInpu
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 55			; 00000037H
	jne	SHORT $LN134@HandleInpu

; 470  : 			{
; 471  : 				if(PGMFlare || PGMChaff)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+482]
	test	eax, eax
	jne	SHORT $LN132@HandleInpu
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+481]
	test	edx, edx
	je	SHORT $LN133@HandleInpu
$LN132@HandleInpu:

; 472  : 					StepEWSProg(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StepEWSProg@ICPClass@@QAEXH@Z		; ICPClass::StepEWSProg

; 473  : 				else

	jmp	SHORT $LN131@HandleInpu
$LN133@HandleInpu:

; 474  : 					PNUpdateSTPTMode(mode, 0);

	push	0
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateSTPTMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateSTPTMode
$LN131@HandleInpu:
	jmp	SHORT $LN126@HandleInpu
$LN134@HandleInpu:

; 475  : 			}
; 476  : 			// Retro 3Jan2004 start
; 477  : 			else if ((g_bPilotEntertainment)&&(winamp)&&(IsICPSet(ICPClass::MISC_MODE) && mICPSecondaryMode == ZERO_MODE))

	movzx	edx, BYTE PTR ?g_bPilotEntertainment@@3_NA ; g_bPilotEntertainment
	test	edx, edx
	je	SHORT $LN126@HandleInpu
	cmp	DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A, 0 ; winamp
	je	SHORT $LN126@HandleInpu
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN126@HandleInpu
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 26			; 0000001aH
	jne	SHORT $LN126@HandleInpu

; 478  : 			{
; 479  : 				if (mode == PREV_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 13		; 0000000dH
	jne	SHORT $LN128@HandleInpu

; 480  : 					winamp->VolDown();

	mov	ecx, DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A ; winamp
	call	?VolDown@WinAmpFrontEnd@@QAEXXZ		; WinAmpFrontEnd::VolDown
	jmp	SHORT $LN126@HandleInpu
$LN128@HandleInpu:

; 481  : 				else if (mode == NEXT_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 14		; 0000000eH
	jne	SHORT $LN126@HandleInpu

; 482  : 					winamp->VolUp();

	mov	ecx, DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A ; winamp
	call	?VolUp@WinAmpFrontEnd@@QAEXXZ		; WinAmpFrontEnd::VolUp
$LN126@HandleInpu:

; 483  : 			} // Retro 3Jan2004 end
; 484  : 		}

	jmp	$LN1@HandleInpu
$LN171@HandleInpu:

; 485  : 		else if(mode == ENTR_BUTTON) 

	cmp	DWORD PTR _mode$[ebp], 15		; 0000000fH
	jne	SHORT $LN124@HandleInpu

; 486  : 			ICPEnter();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ICPEnter@ICPClass@@QAEXXZ		; ICPClass::ICPEnter
	jmp	$LN1@HandleInpu
$LN124@HandleInpu:

; 487  : 		else if(mode == CLEAR_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 30		; 0000001eH
	jne	SHORT $LN122@HandleInpu

; 488  : 		{
; 489  : 			if(IsICPSet(ICPClass::MODE_LIST) && mICPSecondaryMode == 0)

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN121@HandleInpu
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN121@HandleInpu

; 490  : 			{
; 491  : 				ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 492  : 				ExecINTGMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecINTGMode@ICPClass@@QAEXXZ		; ICPClass::ExecINTGMode

; 493  : 				mICPSecondaryMode = 100;	//small hack

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 100			; 00000064H

; 494  : 			}
; 495  : 			else

	jmp	SHORT $LN120@HandleInpu
$LN121@HandleInpu:

; 496  : 				ClearInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearInput@ICPClass@@QAEXXZ		; ICPClass::ClearInput
$LN120@HandleInpu:
	jmp	$LN1@HandleInpu
$LN122@HandleInpu:

; 497  : 		}
; 498  : 		else if (mode == UP_MODE || mode == DOWN_MODE || mode == SEQ_MODE || mode == CNI_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 28		; 0000001cH
	je	SHORT $LN117@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 29		; 0000001dH
	je	SHORT $LN117@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 31		; 0000001fH
	je	SHORT $LN117@HandleInpu
	cmp	DWORD PTR _mode$[ebp], 27		; 0000001bH
	jne	$LN118@HandleInpu
$LN117@HandleInpu:

; 499  : 		{
; 500  : 			if(mode == CNI_MODE)

	cmp	DWORD PTR _mode$[ebp], 27		; 0000001bH
	jne	SHORT $LN116@HandleInpu

; 501  : 				mICPTertiaryMode = CNI_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 27			; 0000001bH
$LN116@HandleInpu:

; 502  : 			CNISwitch(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CNISwitch@ICPClass@@QAEXH@Z		; ICPClass::CNISwitch

; 503  : 
; 504  : 			// Retro 3Jan2004 start
; 505  : 			// Retro from here, kind of a hack having this here..
; 506  : 			if ((g_bPilotEntertainment)&&(winamp)&&(IsICPSet(ICPClass::MISC_MODE) && mICPSecondaryMode == ZERO_MODE))

	movzx	edx, BYTE PTR ?g_bPilotEntertainment@@3_NA ; g_bPilotEntertainment
	test	edx, edx
	je	SHORT $LN110@HandleInpu
	cmp	DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A, 0 ; winamp
	je	SHORT $LN110@HandleInpu
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN110@HandleInpu
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 26			; 0000001aH
	jne	SHORT $LN110@HandleInpu

; 507  : 			{
; 508  : 				if (mode == UP_MODE)

	cmp	DWORD PTR _mode$[ebp], 28		; 0000001cH
	jne	SHORT $LN114@HandleInpu

; 509  : 					winamp->Next();

	mov	ecx, DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A ; winamp
	call	?Next@WinAmpFrontEnd@@QAEXXZ		; WinAmpFrontEnd::Next
	jmp	SHORT $LN110@HandleInpu
$LN114@HandleInpu:

; 510  : 				else if (mode == DOWN_MODE)

	cmp	DWORD PTR _mode$[ebp], 29		; 0000001dH
	jne	SHORT $LN112@HandleInpu

; 511  : 					winamp->Previous();

	mov	ecx, DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A ; winamp
	call	?Previous@WinAmpFrontEnd@@QAEXXZ	; WinAmpFrontEnd::Previous
	jmp	SHORT $LN110@HandleInpu
$LN112@HandleInpu:

; 512  : 				else if (mode == SEQ_MODE)

	cmp	DWORD PTR _mode$[ebp], 31		; 0000001fH
	jne	SHORT $LN110@HandleInpu

; 513  : 					winamp->TogglePlayback();

	mov	ecx, DWORD PTR ?winamp@@3PAVWinAmpFrontEnd@@A ; winamp
	call	?TogglePlayback@WinAmpFrontEnd@@QAEXXZ	; WinAmpFrontEnd::TogglePlayback
$LN110@HandleInpu:

; 514  : 			} // Retro 3Jan2004 end
; 515  : 		}

	jmp	$LN1@HandleInpu
$LN118@HandleInpu:

; 516  : 		//******************
; 517  : 		//******************
; 518  : 		//SECONDARY BUTTONS*
; 519  : 		//******************
; 520  : 		//******************
; 521  : 
; 522  : 		//'1' BUTTON
; 523  : 		else if(mode == ONE_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 4
	jne	SHORT $LN108@HandleInpu

; 524  : 		{
; 525  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN107@HandleInpu

; 526  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN101@HandleInpu
$LN107@HandleInpu:

; 527  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN105@HandleInpu

; 528  : 				HandleManualInput(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN101@HandleInpu
$LN105@HandleInpu:

; 529  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN102@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN103@HandleInpu
$LN102@HandleInpu:

; 530  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 531  : 			else

	jmp	SHORT $LN101@HandleInpu
$LN103@HandleInpu:

; 532  : 				OneButton(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OneButton@ICPClass@@QAEXH@Z		; ICPClass::OneButton
$LN101@HandleInpu:
	jmp	$LN1@HandleInpu
$LN108@HandleInpu:

; 533  : 		}
; 534  : 		//'2' BUTTON
; 535  : 		else if(mode == TWO_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 9
	jne	SHORT $LN99@HandleInpu

; 536  : 		{
; 537  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN98@HandleInpu

; 538  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN92@HandleInpu
$LN98@HandleInpu:

; 539  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN96@HandleInpu

; 540  : 				HandleManualInput(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN92@HandleInpu
$LN96@HandleInpu:

; 541  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN93@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN94@HandleInpu
$LN93@HandleInpu:

; 542  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 543  : 			else

	jmp	SHORT $LN92@HandleInpu
$LN94@HandleInpu:

; 544  : 				TwoButton(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TwoButton@ICPClass@@QAEXH@Z		; ICPClass::TwoButton
$LN92@HandleInpu:
	jmp	$LN1@HandleInpu
$LN99@HandleInpu:

; 545  : 		}
; 546  : 		//'3' BUTTON
; 547  : 		else if(mode == THREE_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 22		; 00000016H
	jne	SHORT $LN90@HandleInpu

; 548  : 		{
; 549  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN89@HandleInpu

; 550  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN83@HandleInpu
$LN89@HandleInpu:

; 551  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN87@HandleInpu

; 552  : 				HandleManualInput(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN83@HandleInpu
$LN87@HandleInpu:

; 553  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN84@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN85@HandleInpu
$LN84@HandleInpu:

; 554  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 555  : 			else

	jmp	SHORT $LN83@HandleInpu
$LN85@HandleInpu:

; 556  : 				ThreeButton(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ThreeButton@ICPClass@@QAEXH@Z		; ICPClass::ThreeButton
$LN83@HandleInpu:
	jmp	$LN1@HandleInpu
$LN90@HandleInpu:

; 557  : 		}
; 558  : 		//'4' BUTTON
; 559  : 		else if(mode  == FOUR_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN81@HandleInpu

; 560  : 		{
; 561  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN80@HandleInpu

; 562  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN74@HandleInpu
$LN80@HandleInpu:

; 563  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN78@HandleInpu

; 564  : 				HandleManualInput(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN74@HandleInpu
$LN78@HandleInpu:

; 565  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN75@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN76@HandleInpu
$LN75@HandleInpu:

; 566  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 567  : 			else

	jmp	SHORT $LN74@HandleInpu
$LN76@HandleInpu:

; 568  : 				FourButton(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FourButton@ICPClass@@QAEXH@Z		; ICPClass::FourButton
$LN74@HandleInpu:
	jmp	$LN1@HandleInpu
$LN81@HandleInpu:

; 569  : 		}
; 570  : 		//'5' BUTTON
; 571  : 		else if(mode == FIFE_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 5
	jne	SHORT $LN72@HandleInpu

; 572  : 		{
; 573  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN71@HandleInpu

; 574  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN65@HandleInpu
$LN71@HandleInpu:

; 575  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN69@HandleInpu

; 576  : 				HandleManualInput(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN65@HandleInpu
$LN69@HandleInpu:

; 577  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN66@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN67@HandleInpu
$LN66@HandleInpu:

; 578  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 579  : 			else

	jmp	SHORT $LN65@HandleInpu
$LN67@HandleInpu:

; 580  : 				FifeButton(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FifeButton@ICPClass@@QAEXH@Z		; ICPClass::FifeButton
$LN65@HandleInpu:
	jmp	$LN1@HandleInpu
$LN72@HandleInpu:

; 581  : 		}
; 582  : 		//'6' BUTTON
; 583  : 		else if(mode == SIX_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 23		; 00000017H
	jne	SHORT $LN63@HandleInpu

; 584  : 		{
; 585  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN62@HandleInpu

; 586  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN56@HandleInpu
$LN62@HandleInpu:

; 587  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN60@HandleInpu

; 588  : 				HandleManualInput(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN56@HandleInpu
$LN60@HandleInpu:

; 589  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN57@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN58@HandleInpu
$LN57@HandleInpu:

; 590  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 591  : 			else

	jmp	SHORT $LN56@HandleInpu
$LN58@HandleInpu:

; 592  : 				SixButton(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SixButton@ICPClass@@QAEXH@Z		; ICPClass::SixButton
$LN56@HandleInpu:
	jmp	$LN1@HandleInpu
$LN63@HandleInpu:

; 593  : 		}
; 594  : 		//'7' BUTTON
; 595  : 		else if(mode == SEVEN_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN54@HandleInpu

; 596  : 		{
; 597  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN53@HandleInpu

; 598  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN47@HandleInpu
$LN53@HandleInpu:

; 599  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN51@HandleInpu

; 600  : 				HandleManualInput(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN47@HandleInpu
$LN51@HandleInpu:

; 601  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN48@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN49@HandleInpu
$LN48@HandleInpu:

; 602  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 603  : 			else

	jmp	SHORT $LN47@HandleInpu
$LN49@HandleInpu:

; 604  : 				SevenButton(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SevenButton@ICPClass@@QAEXH@Z		; ICPClass::SevenButton
$LN47@HandleInpu:
	jmp	$LN1@HandleInpu
$LN54@HandleInpu:

; 605  : 		}
; 606  : 		//'8' BUTTON
; 607  : 		else if(mode == EIGHT_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 24		; 00000018H
	jne	SHORT $LN45@HandleInpu

; 608  : 		{
; 609  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN44@HandleInpu

; 610  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN38@HandleInpu
$LN44@HandleInpu:

; 611  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN42@HandleInpu

; 612  : 				HandleManualInput(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN38@HandleInpu
$LN42@HandleInpu:

; 613  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN39@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN40@HandleInpu
$LN39@HandleInpu:

; 614  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 615  : 			else

	jmp	SHORT $LN38@HandleInpu
$LN40@HandleInpu:

; 616  : 				EightButton(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EightButton@ICPClass@@QAEXH@Z		; ICPClass::EightButton
$LN38@HandleInpu:
	jmp	$LN1@HandleInpu
$LN45@HandleInpu:

; 617  : 		}
; 618  : 		//'9' BUTTON
; 619  : 		else if(mode == NINE_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 25		; 00000019H
	jne	SHORT $LN36@HandleInpu

; 620  : 		{
; 621  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN35@HandleInpu

; 622  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN29@HandleInpu
$LN35@HandleInpu:

; 623  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN33@HandleInpu

; 624  : 				HandleManualInput(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput
	jmp	SHORT $LN29@HandleInpu
$LN33@HandleInpu:

; 625  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN30@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN31@HandleInpu
$LN30@HandleInpu:

; 626  : 				EWSOnOff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EWSOnOff@ICPClass@@QAEXXZ		; ICPClass::EWSOnOff

; 627  : 			else

	jmp	SHORT $LN29@HandleInpu
$LN31@HandleInpu:

; 628  : 				NineButton(mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NineButton@ICPClass@@QAEXH@Z		; ICPClass::NineButton
$LN29@HandleInpu:
	jmp	$LN1@HandleInpu
$LN36@HandleInpu:

; 629  : 		}
; 630  : 		//'0' BUTTON
; 631  : 		else if(mode == ZERO_BUTTON)

	cmp	DWORD PTR _mode$[ebp], 26		; 0000001aH
	jne	$LN1@HandleInpu

; 632  : 		{
; 633  : 			if((IsICPSet(ICPClass::MODE_CNI) && mICPSecondaryMode == FIFE_BUTTON) && !IsICPSet(ICPClass::BLOCK_MODE))

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN26@HandleInpu
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 5
	jne	$LN26@HandleInpu
	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	$LN26@HandleInpu

; 634  : 			{
; 635  : 				if(Cruise_RNG)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+436]
	test	eax, eax
	je	SHORT $LN25@HandleInpu

; 636  : 				{
; 637  : 					if(GetCruiseIndex() == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCruiseIndex@ICPClass@@QAEHXZ	; ICPClass::GetCruiseIndex
	cmp	eax, 1
	jne	SHORT $LN24@HandleInpu

; 638  : 						SetCruiseIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex

; 639  : 					else

	jmp	SHORT $LN23@HandleInpu
$LN24@HandleInpu:

; 640  : 						SetCruiseIndex(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex
$LN23@HandleInpu:
	jmp	$LN12@HandleInpu
$LN25@HandleInpu:

; 641  : 				}
; 642  : 				else if(Cruise_HOME)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+437]
	test	edx, edx
	je	SHORT $LN21@HandleInpu

; 643  : 				{
; 644  : 					if(GetCruiseIndex() == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCruiseIndex@ICPClass@@QAEHXZ	; ICPClass::GetCruiseIndex
	cmp	eax, 2
	jne	SHORT $LN20@HandleInpu

; 645  : 						SetCruiseIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex

; 646  : 					else

	jmp	SHORT $LN19@HandleInpu
$LN20@HandleInpu:

; 647  : 						SetCruiseIndex(2);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex
$LN19@HandleInpu:
	jmp	SHORT $LN12@HandleInpu
$LN21@HandleInpu:

; 648  : 				}
; 649  : 				else if(Cruise_EDR)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+438]
	test	ecx, ecx
	je	SHORT $LN17@HandleInpu

; 650  : 				{
; 651  : 					if(GetCruiseIndex() == 3)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCruiseIndex@ICPClass@@QAEHXZ	; ICPClass::GetCruiseIndex
	cmp	eax, 3
	jne	SHORT $LN16@HandleInpu

; 652  : 						SetCruiseIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex

; 653  : 					else

	jmp	SHORT $LN15@HandleInpu
$LN16@HandleInpu:

; 654  : 						SetCruiseIndex(3);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex
$LN15@HandleInpu:

; 655  : 				}
; 656  : 				else

	jmp	SHORT $LN12@HandleInpu
$LN17@HandleInpu:

; 657  : 				{
; 658  : 					if(GetCruiseIndex() == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCruiseIndex@ICPClass@@QAEHXZ	; ICPClass::GetCruiseIndex
	test	eax, eax
	jne	SHORT $LN13@HandleInpu

; 659  : 						SetCruiseIndex(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex

; 660  : 					else

	jmp	SHORT $LN12@HandleInpu
$LN13@HandleInpu:

; 661  : 						SetCruiseIndex(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCruiseIndex@ICPClass@@QAEXH@Z	; ICPClass::SetCruiseIndex
$LN12@HandleInpu:

; 662  : 				}
; 663  : 				return;

	jmp	$LN225@HandleInpu
	jmp	SHORT $LN10@HandleInpu
$LN26@HandleInpu:

; 664  : 			}
; 665  : 			else if(IsICPSet(ICPClass::MISC_MODE) && mICPSecondaryMode == EIGHT_BUTTON)

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN10@HandleInpu
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 24			; 00000018H
	jne	SHORT $LN10@HandleInpu

; 666  : 			{
; 667  : 				if(ShowBullseyeInfo)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+300]
	test	ecx, ecx
	je	SHORT $LN9@HandleInpu

; 668  : 					ShowBullseyeInfo = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+300], 0

; 669  : 				else

	jmp	SHORT $LN8@HandleInpu
$LN9@HandleInpu:

; 670  : 					ShowBullseyeInfo = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+300], 1
$LN8@HandleInpu:

; 671  : 				return;

	jmp	SHORT $LN225@HandleInpu
$LN10@HandleInpu:

; 672  : 			}
; 673  : 			if(CheckMode())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckMode@ICPClass@@QAEHXZ		; ICPClass::CheckMode
	test	eax, eax
	je	SHORT $LN7@HandleInpu

; 674  : 				return;

	jmp	SHORT $LN225@HandleInpu
	jmp	SHORT $LN1@HandleInpu
$LN7@HandleInpu:

; 675  : 			else if(IsICPSet(ICPClass::EDIT_JAMMER) || IsICPSet(ICPClass::EWS_EDIT_BINGO))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN4@HandleInpu
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN5@HandleInpu
$LN4@HandleInpu:

; 676  : 				return;

	jmp	SHORT $LN225@HandleInpu
	jmp	SHORT $LN1@HandleInpu
$LN5@HandleInpu:

; 677  : 			else if(ManualInput())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ManualInput@ICPClass@@QAEHXZ		; ICPClass::ManualInput
	test	eax, eax
	je	SHORT $LN2@HandleInpu

; 678  : 				HandleManualInput(mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleManualInput@ICPClass@@QAEXH@Z	; ICPClass::HandleManualInput

; 679  : 			else

	jmp	SHORT $LN1@HandleInpu
$LN2@HandleInpu:

; 680  : 				ZeroButton(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZeroButton@ICPClass@@QAEXH@Z		; ICPClass::ZeroButton
$LN1@HandleInpu:
$LN225@HandleInpu:

; 681  : 		}
; 682  : 		/*else if(mode == FACK_BUTTON)
; 683  : 		{
; 684  : 			ClearStrings();
; 685  : 			ClearFlags();
; 686  : 			SetICPFlag(ICPClass::MODE_FACK);
; 687  : 			PNUpdateFACKMode (NEXT_BUTTON, FACK_BUTTON);
; 688  : 			ExecFACKMode();
; 689  : 		}*/
; 690  : 	}
; 691  : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN227@HandleInpu:
	DD	$LN200@HandleInpu
	DD	$LN199@HandleInpu
	DD	$LN198@HandleInpu
	DD	$LN197@HandleInpu
	DD	$LN196@HandleInpu
	DD	$LN202@HandleInpu
	DD	$LN202@HandleInpu
	DD	$LN195@HandleInpu
	DD	$LN194@HandleInpu
?HandleInput@ICPClass@@QAEXHPAVCPButtonObject@@@Z ENDP	; ICPClass::HandleInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
tv201 = -20						; size = 4
tv166 = -16						; size = 4
tv149 = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?Exec@ICPClass@@QAEXXZ PROC				; ICPClass::Exec
; _this$ = ecx

; 699  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 700  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN80@Exec

; 701  : 	{
; 702  : 		//MI original code
; 703  : 		switch (mICPSecondaryMode)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 9
	ja	SHORT $LN78@Exec
	mov	eax, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN86@Exec[eax*4]
$LN77@Exec:

; 704  : 		{
; 705  : 		case NONE_MODE:
; 706  : 			ExecCNIMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCNIMode@ICPClass@@QAEXXZ		; ICPClass::ExecCNIMode

; 707  : 			break;

	jmp	SHORT $LN78@Exec
$LN76@Exec:

; 708  : 		case STPT_MODE:
; 709  : 			ExecSTPTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecSTPTMode@ICPClass@@QAEXXZ		; ICPClass::ExecSTPTMode

; 710  : 			break;

	jmp	SHORT $LN78@Exec
$LN75@Exec:

; 711  : 		case DLINK_MODE:
; 712  : 			ExecDLINKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDLINKMode@ICPClass@@QAEXXZ		; ICPClass::ExecDLINKMode

; 713  : 			break;

	jmp	SHORT $LN78@Exec
$LN74@Exec:

; 714  : 		case MARK_MODE:
; 715  : 			ExecMARKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMARKMode@ICPClass@@QAEXXZ		; ICPClass::ExecMARKMode

; 716  : 			break;

	jmp	SHORT $LN78@Exec
$LN73@Exec:

; 717  : 		case ILS_MODE:
; 718  : 			ExecILSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILSMode@ICPClass@@QAEXXZ		; ICPClass::ExecILSMode

; 719  : 			break;

	jmp	SHORT $LN78@Exec
$LN72@Exec:

; 720  : 		case CRUS_MODE:
; 721  : 			ExecCRUSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCRUSMode@ICPClass@@QAEXXZ		; ICPClass::ExecCRUSMode

; 722  : 			break;

	jmp	SHORT $LN78@Exec
$LN71@Exec:

; 723  : 	#if 0	
; 724  : 		case COMM1_MODE:
; 725  : 		case COMM2_MODE:
; 726  : 			ExecCNIMode();
; 727  : 			break;
; 728  : 	#endif
; 729  : 		case FACK_MODE:
; 730  : 			ExecFACKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecFACKMode@ICPClass@@QAEXXZ		; ICPClass::ExecFACKMode

; 731  : 			break;

	jmp	SHORT $LN78@Exec
$LN70@Exec:

; 732  : 		case ALOW_MODE:
; 733  : 			ExecALOWMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecALOWMode@ICPClass@@QAEXXZ		; ICPClass::ExecALOWMode
$LN78@Exec:

; 734  : 			break;
; 735  : 		default:
; 736  : 			ShiWarning ("BAD ICP Mode");
; 737  : 			break;
; 738  : 		}
; 739  : 	}
; 740  : 	else

	jmp	$LN81@Exec
$LN80@Exec:

; 741  : 	{
; 742  : 		//for flashing stuff
; 743  : 		flash = (vuxRealTime & 0x180);

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	ecx, 384				; 00000180H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+752], ecx

; 744  : 
; 745  : 		//do this once here
; 746  : 		if(FillStrings)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1652]
	test	ecx, ecx
	je	SHORT $LN67@Exec

; 747  : 		{
; 748  : 			GetINSInfo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetINSInfo@ICPClass@@QAEXXZ		; ICPClass::GetINSInfo

; 749  : 			FillStrings = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1652], 0
$LN67@Exec:

; 750  : 		}
; 751  : 		
; 752  : 		//automaticaly switch waypoints when in parameters and selected
; 753  : 		if(!MAN)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+431]
	test	ecx, ecx
	jne	SHORT $LN66@Exec

; 754  : 			CheckAutoSTPT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckAutoSTPT@ICPClass@@QAEXXZ		; ICPClass::CheckAutoSTPT
$LN66@Exec:

; 755  : 
; 756  : 		if(IsICPSet(ICPClass::MODE_FACK) || TheHud && TheHud->GetDEDSwitch() == HudClass::PFL_DATA)

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	jne	SHORT $LN64@Exec
	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN65@Exec
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	call	?GetDEDSwitch@HudClass@@QAEHXZ		; HudClass::GetDEDSwitch
	cmp	eax, 2
	jne	SHORT $LN65@Exec
$LN64@Exec:

; 757  : 			ExecFACKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecFACKMode@ICPClass@@QAEXXZ		; ICPClass::ExecFACKMode
$LN65@Exec:

; 758  : 
; 759  : 		if(IsICPSet(ICPClass::MODE_COMM1))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN63@Exec

; 760  : 		{
; 761  : 			ExecCOMM1Mode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCOMM1Mode@ICPClass@@QAEXXZ		; ICPClass::ExecCOMM1Mode

; 762  : 			return;

	jmp	$LN81@Exec
	jmp	$LN81@Exec
$LN63@Exec:

; 763  : 		}
; 764  : 		else if(IsICPSet(ICPClass::MODE_COMM2))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN61@Exec

; 765  : 		{
; 766  : 			ExecCOMM2Mode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCOMM2Mode@ICPClass@@QAEXXZ		; ICPClass::ExecCOMM2Mode

; 767  : 			return;

	jmp	$LN81@Exec
	jmp	$LN81@Exec
$LN61@Exec:

; 768  : 		}
; 769  : 		else if(IsICPSet(ICPClass::MODE_IFF))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN59@Exec

; 770  : 			ExecIFFMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecIFFMode@ICPClass@@QAEXXZ		; ICPClass::ExecIFFMode
	jmp	$LN81@Exec
$LN59@Exec:

; 771  : 		
; 772  : 		else if(IsICPSet(ICPClass::MODE_CNI))

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN57@Exec

; 773  : 		{
; 774  : 			switch(mICPSecondaryMode)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv149[ebp], eax
	cmp	DWORD PTR tv149[ebp], 25		; 00000019H
	ja	SHORT $LN55@Exec
	mov	ecx, DWORD PTR tv149[ebp]
	movzx	edx, BYTE PTR $LN83@Exec[ecx]
	jmp	DWORD PTR $LN87@Exec[edx*4]
$LN54@Exec:

; 775  : 			{
; 776  : 			case NONE_MODE:
; 777  : 				ExecCNIMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCNIMode@ICPClass@@QAEXXZ		; ICPClass::ExecCNIMode

; 778  : 				break;

	jmp	SHORT $LN55@Exec
$LN53@Exec:

; 779  : 			case ONE_BUTTON:
; 780  : 				ExecILSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILSMode@ICPClass@@QAEXXZ		; ICPClass::ExecILSMode

; 781  : 				break;

	jmp	SHORT $LN55@Exec
$LN52@Exec:

; 782  : 			case TWO_BUTTON:
; 783  : 				ExecALOWMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecALOWMode@ICPClass@@QAEXXZ		; ICPClass::ExecALOWMode

; 784  : 				break;

	jmp	SHORT $LN55@Exec
$LN51@Exec:

; 785  : 			case THREE_BUTTON:
; 786  : 				ExecFACKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecFACKMode@ICPClass@@QAEXXZ		; ICPClass::ExecFACKMode

; 787  : 				break;

	jmp	SHORT $LN55@Exec
$LN50@Exec:

; 788  : 			case FOUR_BUTTON:
; 789  : 				ExecSTPTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecSTPTMode@ICPClass@@QAEXXZ		; ICPClass::ExecSTPTMode

; 790  : 				break;

	jmp	SHORT $LN55@Exec
$LN49@Exec:

; 791  : 			case FIFE_BUTTON:
; 792  : 				ExecCRUSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCRUSMode@ICPClass@@QAEXXZ		; ICPClass::ExecCRUSMode

; 793  : 				break;

	jmp	SHORT $LN55@Exec
$LN48@Exec:

; 794  : 			case SIX_BUTTON:
; 795  : 				ExecTimeMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecTimeMode@ICPClass@@QAEXXZ		; ICPClass::ExecTimeMode

; 796  : 				break;

	jmp	SHORT $LN55@Exec
$LN47@Exec:

; 797  : 			case SEVEN_BUTTON:
; 798  : 				ExecMARKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMARKMode@ICPClass@@QAEXXZ		; ICPClass::ExecMARKMode

; 799  : 				break;

	jmp	SHORT $LN55@Exec
$LN46@Exec:

; 800  : 			case EIGHT_BUTTON:
; 801  : 				ExecFIXMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecFIXMode@ICPClass@@QAEXXZ		; ICPClass::ExecFIXMode

; 802  : 				break;

	jmp	SHORT $LN55@Exec
$LN45@Exec:

; 803  : 			case NINE_BUTTON:
; 804  : 				ExecACALMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecACALMode@ICPClass@@QAEXXZ		; ICPClass::ExecACALMode
$LN55@Exec:

; 805  : 				break;
; 806  : 			default:
; 807  : 				break;
; 808  : 			}
; 809  : 		}
; 810  : 		else if(IsICPSet(ICPClass::MODE_LIST))

	jmp	$LN81@Exec
$LN57@Exec:
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN42@Exec

; 811  : 		{
; 812  : 			switch(mICPSecondaryMode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv166[ebp], ecx
	cmp	DWORD PTR tv166[ebp], 100		; 00000064H
	ja	$LN40@Exec
	mov	edx, DWORD PTR tv166[ebp]
	movzx	eax, BYTE PTR $LN84@Exec[edx]
	jmp	DWORD PTR $LN88@Exec[eax*4]
$LN39@Exec:

; 813  : 			{
; 814  : 			case ONE_BUTTON:
; 815  : 				if(OA1)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+429]
	test	edx, edx
	je	SHORT $LN38@Exec

; 816  : 					ExecOA1Mode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecOA1Mode@ICPClass@@QAEXXZ		; ICPClass::ExecOA1Mode
	jmp	SHORT $LN37@Exec
$LN38@Exec:

; 817  : 				else if(OA2)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+430]
	test	ecx, ecx
	je	SHORT $LN36@Exec

; 818  : 					ExecOA2Mode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecOA2Mode@ICPClass@@QAEXXZ		; ICPClass::ExecOA2Mode

; 819  : 				else

	jmp	SHORT $LN37@Exec
$LN36@Exec:

; 820  : 					ExecDESTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDESTMode@ICPClass@@QAEXXZ		; ICPClass::ExecDESTMode
$LN37@Exec:

; 821  : 				break;

	jmp	$LN40@Exec
$LN34@Exec:

; 822  : 			case TWO_BUTTON:
; 823  : 				ExecBingo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBingo@ICPClass@@QAEXXZ		; ICPClass::ExecBingo

; 824  : 				break;

	jmp	$LN40@Exec
$LN33@Exec:

; 825  : 			case THREE_BUTTON:
; 826  : 				ExecVIPMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecVIPMode@ICPClass@@QAEXXZ		; ICPClass::ExecVIPMode

; 827  : 				break;

	jmp	$LN40@Exec
$LN32@Exec:

; 828  : 			case FOUR_BUTTON:
; 829  : 				ExecNAVMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecNAVMode@ICPClass@@QAEXXZ		; ICPClass::ExecNAVMode

; 830  : 				break;

	jmp	SHORT $LN40@Exec
$LN31@Exec:

; 831  : 			case FIFE_BUTTON:
; 832  : 				ExecMANMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMANMode@ICPClass@@QAEXXZ		; ICPClass::ExecMANMode

; 833  : 				break;

	jmp	SHORT $LN40@Exec
$LN30@Exec:

; 834  : 			case SIX_BUTTON:
; 835  : 				ExecINSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecINSMode@ICPClass@@QAEXXZ		; ICPClass::ExecINSMode

; 836  : 				break;

	jmp	SHORT $LN40@Exec
$LN29@Exec:

; 837  : 			case EWS_MODE:
; 838  : 				if(EWSMain)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+480]
	test	eax, eax
	je	SHORT $LN28@Exec

; 839  : 					ExecEWSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecEWSMode@ICPClass@@QAEXXZ		; ICPClass::ExecEWSMode
	jmp	SHORT $LN27@Exec
$LN28@Exec:

; 840  : 				else if(PGMChaff)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+481]
	test	edx, edx
	je	SHORT $LN26@Exec

; 841  : 					ChaffPGM();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChaffPGM@ICPClass@@QAEXXZ		; ICPClass::ChaffPGM

; 842  : 				else

	jmp	SHORT $LN27@Exec
$LN26@Exec:

; 843  : 					FlarePGM();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlarePGM@ICPClass@@QAEXXZ		; ICPClass::FlarePGM
$LN27@Exec:

; 844  : 				break;

	jmp	SHORT $LN40@Exec
$LN24@Exec:

; 845  : 			case EIGHT_BUTTON:
; 846  : 				ExecMODEMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMODEMode@ICPClass@@QAEXXZ		; ICPClass::ExecMODEMode

; 847  : 				break;

	jmp	SHORT $LN40@Exec
$LN23@Exec:

; 848  : 			case NINE_BUTTON:
; 849  : 				ExecVRPMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecVRPMode@ICPClass@@QAEXXZ		; ICPClass::ExecVRPMode

; 850  : 				break;

	jmp	SHORT $LN40@Exec
$LN22@Exec:

; 851  : 			case ZERO_BUTTON:
; 852  : 				ExecMISCMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMISCMode@ICPClass@@QAEXXZ		; ICPClass::ExecMISCMode

; 853  : 				break;

	jmp	SHORT $LN40@Exec
$LN21@Exec:

; 854  : 			case 100:
; 855  : 				ExecINTGMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecINTGMode@ICPClass@@QAEXXZ		; ICPClass::ExecINTGMode

; 856  : 				break;

	jmp	SHORT $LN40@Exec
$LN20@Exec:

; 857  : 			case NONE_MODE:
; 858  : 				ExecLISTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecLISTMode@ICPClass@@QAEXXZ		; ICPClass::ExecLISTMode
$LN40@Exec:

; 859  : 				break;
; 860  : 			default:
; 861  : 				break;
; 862  : 			}
; 863  : 		}
; 864  : 		else if(IsICPSet(ICPClass::MISC_MODE))

	jmp	$LN81@Exec
$LN42@Exec:
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN81@Exec

; 865  : 		{
; 866  : 			switch(mICPSecondaryMode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv201[ebp], ecx
	cmp	DWORD PTR tv201[ebp], 26		; 0000001aH
	ja	$LN81@Exec
	mov	edx, DWORD PTR tv201[ebp]
	movzx	eax, BYTE PTR $LN85@Exec[edx]
	jmp	DWORD PTR $LN89@Exec[eax*4]
$LN14@Exec:

; 867  : 			{
; 868  : 			case ONE_BUTTON:
; 869  : 				ExecCORRMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCORRMode@ICPClass@@QAEXXZ		; ICPClass::ExecCORRMode

; 870  : 				break;

	jmp	SHORT $LN81@Exec
$LN13@Exec:

; 871  : 			case TWO_BUTTON:
; 872  : 				ExecMAGVMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMAGVMode@ICPClass@@QAEXXZ		; ICPClass::ExecMAGVMode

; 873  : 				break;

	jmp	SHORT $LN81@Exec
$LN12@Exec:

; 874  : 			case THREE_BUTTON:
; 875  : 				ExecOFPMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecOFPMode@ICPClass@@QAEXXZ		; ICPClass::ExecOFPMode

; 876  : 				break;

	jmp	SHORT $LN81@Exec
$LN11@Exec:

; 877  : 			case FOUR_BUTTON:
; 878  : 				ExecINSMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecINSMMode@ICPClass@@QAEXXZ		; ICPClass::ExecINSMMode

; 879  : 				break;

	jmp	SHORT $LN81@Exec
$LN10@Exec:

; 880  : 			case FIFE_BUTTON:
; 881  : 				ExecLASRMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecLASRMode@ICPClass@@QAEXXZ		; ICPClass::ExecLASRMode

; 882  : 				break;

	jmp	SHORT $LN81@Exec
$LN9@Exec:

; 883  : 			case SIX_BUTTON:
; 884  : 				ExecGPSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecGPSMode@ICPClass@@QAEXXZ		; ICPClass::ExecGPSMode

; 885  : 				break;

	jmp	SHORT $LN81@Exec
$LN8@Exec:

; 886  : 			case SEVEN_BUTTON:
; 887  : 				ExecDRNGMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDRNGMode@ICPClass@@QAEXXZ		; ICPClass::ExecDRNGMode

; 888  : 				break;

	jmp	SHORT $LN81@Exec
$LN7@Exec:

; 889  : 			case EIGHT_BUTTON:
; 890  : 				ExecBullMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBullMode@ICPClass@@QAEXXZ		; ICPClass::ExecBullMode

; 891  : 				break;

	jmp	SHORT $LN81@Exec
$LN6@Exec:

; 892  : 			case NINE_BUTTON:
; 893  : 				ExecWPTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecWPTMode@ICPClass@@QAEXXZ		; ICPClass::ExecWPTMode

; 894  : 				break;

	jmp	SHORT $LN81@Exec
$LN5@Exec:

; 895  : 			case ZERO_BUTTON:
; 896  : 				{	// Retro 3Jan2004 start
; 897  : 					if (g_bPilotEntertainment == false)

	movzx	ecx, BYTE PTR ?g_bPilotEntertainment@@3_NA ; g_bPilotEntertainment
	test	ecx, ecx
	jne	SHORT $LN4@Exec

; 898  : 						ExecHARMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecHARMMode@ICPClass@@QAEXXZ		; ICPClass::ExecHARMMode

; 899  : 					else

	jmp	SHORT $LN3@Exec
$LN4@Exec:

; 900  : 						ExecWinAmpMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecWinAmpMode@ICPClass@@QAEXXZ	; ICPClass::ExecWinAmpMode
$LN3@Exec:

; 901  : 					break;

	jmp	SHORT $LN81@Exec
$LN2@Exec:

; 902  : 				}	// Retro 3Jan2004 end
; 903  : 			case NONE_MODE:
; 904  : 				ExecMISCMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMISCMode@ICPClass@@QAEXXZ		; ICPClass::ExecMISCMode
$LN81@Exec:

; 905  : 			default:
; 906  : 				break;
; 907  : 			}
; 908  : 		}
; 909  : 	}
; 910  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN86@Exec:
	DD	$LN77@Exec
	DD	$LN76@Exec
	DD	$LN75@Exec
	DD	$LN74@Exec
	DD	$LN73@Exec
	DD	$LN72@Exec
	DD	$LN78@Exec
	DD	$LN78@Exec
	DD	$LN71@Exec
	DD	$LN70@Exec
$LN87@Exec:
	DD	$LN54@Exec
	DD	$LN50@Exec
	DD	$LN47@Exec
	DD	$LN53@Exec
	DD	$LN49@Exec
	DD	$LN52@Exec
	DD	$LN51@Exec
	DD	$LN48@Exec
	DD	$LN46@Exec
	DD	$LN45@Exec
	DD	$LN55@Exec
$LN83@Exec:
	DB	0
	DB	1
	DB	10					; 0000000aH
	DB	2
	DB	3
	DB	4
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
	DB	7
	DB	8
	DB	9
	npad	2
$LN88@Exec:
	DD	$LN20@Exec
	DD	$LN32@Exec
	DD	$LN39@Exec
	DD	$LN31@Exec
	DD	$LN34@Exec
	DD	$LN33@Exec
	DD	$LN30@Exec
	DD	$LN24@Exec
	DD	$LN23@Exec
	DD	$LN22@Exec
	DD	$LN29@Exec
	DD	$LN21@Exec
	DD	$LN40@Exec
$LN84@Exec:
	DB	0
	DB	1
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	2
	DB	3
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	4
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	10					; 0000000aH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	11					; 0000000bH
	npad	3
$LN89@Exec:
	DD	$LN2@Exec
	DD	$LN11@Exec
	DD	$LN8@Exec
	DD	$LN14@Exec
	DD	$LN10@Exec
	DD	$LN13@Exec
	DD	$LN12@Exec
	DD	$LN9@Exec
	DD	$LN7@Exec
	DD	$LN6@Exec
	DD	$LN5@Exec
	DD	$LN81@Exec
$LN85@Exec:
	DB	0
	DB	1
	DB	11					; 0000000bH
	DB	2
	DB	3
	DB	4
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	5
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
?Exec@ICPClass@@QAEXXZ ENDP				; ICPClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ICPClass@@QAE@XZ PROC				; ICPClass::~ICPClass
; _this$ = ecx

; 53   : ICPClass::~ICPClass() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 
; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1ICPClass@@QAE@XZ ENDP				; ICPClass::~ICPClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICPClass@@QAE@XZ PROC				; ICPClass::ICPClass
; _this$ = ecx

; 61   : ICPClass::ICPClass() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 
; 63   : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	$LN2@ICPClass

; 64   : 	{
; 65   : 		//MI Original code
; 66   : 		strcpy(mpSelectedModeName, ICPModeNames[NAV_MODE]);

	mov	ecx, 4
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR ?ICPModeNames@@3PAPADA[ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_strcpy
	add	esp, 8

; 67   : 		mICPPrimaryMode				= AA_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 11			; 0000000bH

; 68   : 		mICPSecondaryMode			= NONE_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 69   : 		mICPTertiaryMode			= COMM1_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 6

; 70   : 		mpTertiaryExclusiveButton	= NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+236], 0

; 71   : 		mpSecondaryExclusiveButton	= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+240], 0

; 72   : 		mpPrimaryExclusiveButton	= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 73   : 
; 74   : 		mWPIndex					= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+256], 0

; 75   : 		mMarkIndex				= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], 0

; 76   : 		mDLinkIndex				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+272], 0

; 77   : 		mList						= STPT_LIST;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], 0

; 78   : 		HomeWP = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+440], 1

; 79   : 
; 80   : 		*mpLine1 = '\0';

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+36], 0

; 81   : 		*mpLine2 = '\0';

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+96], 0

; 82   : 		*mpLine3 = '\0';

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+156], 0

; 83   : 
; 84   : 		//Wombat778 10-20-2003  Initialize the PFL in easy avionics. Should fix easy avionics CTD. Should I just put the whole InitStuff() line here?
; 85   : 		m_FaultDisplay = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+468], 0

; 86   : 		m_subsystem = FaultClass::amux_fault;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], 0

; 87   : 		m_function = FaultClass::nofault;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+476], 0

; 88   : 		//end of PFL Initialization
; 89   : 
; 90   : 		mUpdateFlags = CNI_UPDATE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 256			; 00000100H

; 91   : 	}
; 92   : 	else

	jmp	$LN3@ICPClass
$LN2@ICPClass:

; 93   : 	{
; 94   : 		//MI modified for ICP stuff
; 95   : 		strcpy(mpSelectedModeName, ICPModeNames[NAV_MODE]);

	mov	ecx, 4
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR ?ICPModeNames@@3PAPADA[ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_strcpy
	add	esp, 8

; 96   : 
; 97   : 		mICPPrimaryMode					= NAV_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 10			; 0000000aH

; 98   : 		mICPSecondaryMode				= NONE_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 99   : 		mICPTertiaryMode				= NONE_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 100  : 		mpTertiaryExclusiveButton		= NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+236], 0

; 101  : 		mpSecondaryExclusiveButton		= NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+240], 0

; 102  : 		mpPrimaryExclusiveButton		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+244], 0

; 103  : 		LastMode						= CNI_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1380], 27		; 0000001bH

; 104  : 
; 105  : 		mWPIndex						= 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], 0

; 106  : 		mMarkIndex						= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0

; 107  : 		mDLinkIndex						= 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0

; 108  : 		mList							= STPT_LIST;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], 0

; 109  : 
; 110  : 		*mpLine1 = '\0';

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+36], 0

; 111  : 		*mpLine2 = '\0';

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+96], 0

; 112  : 		*mpLine3 = '\0';

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+156], 0

; 113  : 
; 114  : 		//Init our stuff
; 115  : 		InitStuff();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitStuff@ICPClass@@QAEXXZ		; ICPClass::InitStuff

; 116  : 
; 117  : 		mUpdateFlags = CNI_UPDATE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 256			; 00000100H
$LN3@ICPClass:

; 118  : 	}
; 119  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICPClass@@QAE@XZ ENDP				; ICPClass::ICPClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsICPSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsICPSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsICPSet, COMDAT
; _this$ = ecx

; 499  : 	int IsICPSet (int testFlag) {return ICPModeFlags & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsICPSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsICPSet
$LN3@IsICPSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsICPSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsICPSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsICPSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?SetICPFlag@ICPClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetICPFlag@ICPClass@@QAEXH@Z PROC			; ICPClass::SetICPFlag, COMDAT
; _this$ = ecx

; 497  : 	void SetICPFlag (int newFlag) {ICPModeFlags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1376], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetICPFlag@ICPClass@@QAEXH@Z ENDP			; ICPClass::SetICPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ChangeToCNI@ICPClass@@QAEXXZ PROC			; ICPClass::ChangeToCNI
; _this$ = ecx

; 1043 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1044 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1045 : 
; 1046 : 	ResetSubPages();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetSubPages@ICPClass@@QAEXXZ		; ICPClass::ResetSubPages

; 1047 : 	if (playerAC && playerAC->FCC)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN1@ChangeToCN
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+936], 0
	je	SHORT $LN1@ChangeToCN

; 1048 : 	{
; 1049 : 		playerAC->FCC->SetStptMode(FireControlComputer::FCCWaypoint);

	push	0
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 1050 : 		playerAC->FCC->waypointStepCmd = 127;

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+936]
	mov	BYTE PTR [eax+194], 127			; 0000007fH
$LN1@ChangeToCN:

; 1051 : 	}
; 1052 : 	ClearFlags();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlags@ICPClass@@QAEXXZ		; ICPClass::ClearFlags

; 1053 : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 1054 : 	ClearString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearString@ICPClass@@QAEXXZ		; ICPClass::ClearString

; 1055 : 	ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@ICPClass@@QAEXXZ		; ICPClass::ClearDigits

; 1056 : 	ClearCount = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1488], 0

; 1057 : 	InputsMade = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+744], 0

; 1058 : 	SetICPFlag(ICPClass::MODE_CNI);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1059 : 	SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1060 : 	LaserLine = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1660], 1

; 1061 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ChangeToCNI@ICPClass@@QAEXXZ ENDP			; ICPClass::ChangeToCNI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?SetCruiseIndex@ICPClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_NewIndex$ = 8						; size = 4
?SetCruiseIndex@ICPClass@@QAEXH@Z PROC			; ICPClass::SetCruiseIndex, COMDAT
; _this$ = ecx

; 360  : 	void SetCruiseIndex(int NewIndex)	{CruiseMode = NewIndex;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NewIndex$[ebp]
	mov	DWORD PTR [eax+452], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCruiseIndex@ICPClass@@QAEXH@Z ENDP			; ICPClass::SetCruiseIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?GetCruiseIndex@ICPClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCruiseIndex@ICPClass@@QAEHXZ PROC			; ICPClass::GetCruiseIndex, COMDAT
; _this$ = ecx

; 359  : 	int GetCruiseIndex(void)	{return CruiseMode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+452]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCruiseIndex@ICPClass@@QAEHXZ ENDP			; ICPClass::GetCruiseIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_playerAC$ = -12					; size = 4
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?NewMode@ICPClass@@QAEXH@Z PROC				; ICPClass::NewMode
; _this$ = ecx

; 988  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 989  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 990  : 
; 991  : 	//Clear our Flags
; 992  : 	ClearFlags();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlags@ICPClass@@QAEXXZ		; ICPClass::ClearFlags

; 993  : 	//Clear our strings
; 994  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 995  : 	
; 996  : 	LastMode = mICPTertiaryMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+1380], edx

; 997  : 	mICPTertiaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 998  : 
; 999  : 	ResetSubPages();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetSubPages@ICPClass@@QAEXXZ		; ICPClass::ResetSubPages

; 1000 : 	Manual_Input = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+732], 0

; 1001 : 	MadeInput = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1500], 0

; 1002 : 
; 1003 : 	ClearCount = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1488], 0

; 1004 : 	InputsMade = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+744], 0

; 1005 : 
; 1006 : 	playerAC->FCC->SetStptMode(FireControlComputer::FCCWaypoint);

	push	0
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 1007 : 	playerAC->FCC->waypointStepCmd = 127;

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+936]
	mov	BYTE PTR [edx+194], 127			; 0000007fH

; 1008 : 
; 1009 : 	switch (mode)

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	sub	ecx, 6
	mov	DWORD PTR tv81[ebp], ecx
	cmp	DWORD PTR tv81[ebp], 15			; 0000000fH
	ja	$LN10@NewMode
	mov	edx, DWORD PTR tv81[ebp]
	movzx	eax, BYTE PTR $LN12@NewMode[edx]
	jmp	DWORD PTR $LN13@NewMode[eax*4]
$LN7@NewMode:

; 1010 : 	{
; 1011 : 	case COMM1_BUTTON:
; 1012 : 		LeaveCNI();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNI@ICPClass@@QAEXXZ		; ICPClass::LeaveCNI

; 1013 : 		SetICPFlag(ICPClass::MODE_COMM1);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1014 : 		if(VM) 

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	SHORT $LN6@NewMode

; 1015 : 			VM->SetRadio(0);

	push	0
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?SetRadio@VoiceManager@@QAEXH@Z		; VoiceManager::SetRadio
$LN6@NewMode:

; 1016 : 		WhichRadio = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1496], 0

; 1017 : 		ExecCOMM1Mode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCOMM1Mode@ICPClass@@QAEXXZ		; ICPClass::ExecCOMM1Mode

; 1018 : 		break;

	jmp	$LN10@NewMode
$LN5@NewMode:

; 1019 : 	case COMM2_BUTTON:
; 1020 : 		LeaveCNI();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNI@ICPClass@@QAEXXZ		; ICPClass::LeaveCNI

; 1021 : 		SetICPFlag(ICPClass::MODE_COMM2);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1022 : 		if(VM) 

	cmp	DWORD PTR ?VM@@3PAVVoiceManager@@A, 0	; VM
	je	SHORT $LN4@NewMode

; 1023 : 			VM->SetRadio(1);

	push	1
	mov	ecx, DWORD PTR ?VM@@3PAVVoiceManager@@A	; VM
	call	?SetRadio@VoiceManager@@QAEXH@Z		; VoiceManager::SetRadio
$LN4@NewMode:

; 1024 : 		WhichRadio = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1496], 1

; 1025 : 		ExecCOMM2Mode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCOMM2Mode@ICPClass@@QAEXXZ		; ICPClass::ExecCOMM2Mode

; 1026 : 		break;

	jmp	SHORT $LN10@NewMode
$LN3@NewMode:

; 1027 : 	case LIST_BUTTON:
; 1028 : 		LeaveCNI();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNI@ICPClass@@QAEXXZ		; ICPClass::LeaveCNI

; 1029 : 		SetICPFlag(ICPClass::MODE_LIST);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1030 : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1031 : 		ExecLISTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecLISTMode@ICPClass@@QAEXXZ		; ICPClass::ExecLISTMode

; 1032 : 		break;

	jmp	SHORT $LN10@NewMode
$LN2@NewMode:

; 1033 : 	case IFF_BUTTON:
; 1034 : 		LeaveCNI();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNI@ICPClass@@QAEXXZ		; ICPClass::LeaveCNI

; 1035 : 		SetICPFlag(ICPClass::MODE_IFF);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 1036 : 		ExecIFFMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecIFFMode@ICPClass@@QAEXXZ		; ICPClass::ExecIFFMode
$LN10@NewMode:

; 1037 : 		break;
; 1038 : 	default:
; 1039 : 		break;
; 1040 : 	}
; 1041 : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@NewMode:
	DD	$LN7@NewMode
	DD	$LN5@NewMode
	DD	$LN2@NewMode
	DD	$LN3@NewMode
	DD	$LN10@NewMode
$LN12@NewMode:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	3
?NewMode@ICPClass@@QAEXH@Z ENDP				; ICPClass::NewMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_button$ = 8						; size = 4
_mode$ = 12						; size = 4
?HandlePrevNext@ICPClass@@QAEXHH@Z PROC			; ICPClass::HandlePrevNext
; _this$ = ecx

; 939  : void ICPClass::HandlePrevNext(int button, int mode){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 940  : 	// critial section this
; 941  : 	switch(mode){

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 9
	ja	$LN12@HandlePrev
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN14@HandlePrev[ecx*4]
$LN9@HandlePrev:

; 942  : 		case STPT_MODE:
; 943  : 			PNUpdateSTPTMode(button, mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateSTPTMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateSTPTMode

; 944  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN8@HandlePrev:

; 945  : 
; 946  : 		case DLINK_MODE:
; 947  : 			PNUpdateDLINKMode(button, mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateDLINKMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateDLINKMode

; 948  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN7@HandlePrev:

; 949  : 
; 950  : 		case MARK_MODE:
; 951  : 			PNUpdateMARKMode(button, mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateMARKMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateMARKMode

; 952  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN6@HandlePrev:

; 953  : 
; 954  : 		case ILS_MODE:
; 955  : 			PNUpdateILSMode(button, mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateILSMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateILSMode

; 956  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN5@HandlePrev:

; 957  : 
; 958  : 		case CRUS_MODE:
; 959  : 			PNUpdateCRUSMode(button, mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateCRUSMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateCRUSMode

; 960  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN4@HandlePrev:

; 961  : 
; 962  : 		case FACK_MODE:
; 963  : 			PNUpdateFACKMode(button, mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateFACKMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateFACKMode

; 964  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN3@HandlePrev:

; 965  : 
; 966  : 		case ALOW_MODE:
; 967  : 			PNUpdateALOWMode(button, mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateALOWMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateALOWMode

; 968  : 		break;

	jmp	SHORT $LN12@HandlePrev
$LN2@HandlePrev:

; 969  : 		
; 970  : 		case NONE_MODE:
; 971  : 		case COMM1_MODE:
; 972  : 		case COMM2_MODE:
; 973  : 			PNUpdateCOMMMode(button, mode);

	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PNUpdateCOMMMode@ICPClass@@QAEXHH@Z	; ICPClass::PNUpdateCOMMMode
$LN12@HandlePrev:

; 974  : 		break;
; 975  : 
; 976  : 		default:
; 977  : 			ShiWarning ("BAD ICP Mode");
; 978  : 		break;
; 979  : 	}
; 980  : }

	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN14@HandlePrev:
	DD	$LN2@HandlePrev
	DD	$LN9@HandlePrev
	DD	$LN8@HandlePrev
	DD	$LN7@HandlePrev
	DD	$LN6@HandlePrev
	DD	$LN5@HandlePrev
	DD	$LN2@HandlePrev
	DD	$LN2@HandlePrev
	DD	$LN4@HandlePrev
	DD	$LN3@HandlePrev
?HandlePrevNext@ICPClass@@QAEXHH@Z ENDP			; ICPClass::HandlePrevNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icp.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv64 = -4						; size = 4
_mode$ = 8						; size = 4
?HandleENTR@ICPClass@@QAEXH@Z PROC			; ICPClass::HandleENTR
; _this$ = ecx

; 916  : void ICPClass::HandleENTR(int mode){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 
; 918  : 	switch(mode) {

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 3
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 4
	ja	SHORT $LN6@HandleENTR
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN8@HandleENTR[edx*4]
$LN3@HandleENTR:

; 919  : 		case MARK_MODE:
; 920  : 			ENTRUpdateMARKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ENTRUpdateMARKMode@ICPClass@@QAEXXZ	; ICPClass::ENTRUpdateMARKMode

; 921  : 		break;

	jmp	SHORT $LN6@HandleENTR
$LN2@HandleENTR:

; 922  : 
; 923  : 		case ILS_MODE:
; 924  : 			ENTRUpdateILSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ENTRUpdateILSMode@ICPClass@@QAEXXZ	; ICPClass::ENTRUpdateILSMode

; 925  : 		break;

	jmp	SHORT $LN6@HandleENTR
$LN1@HandleENTR:

; 926  : 
; 927  : 		case COMM1_MODE:
; 928  : 		case COMM2_MODE:
; 929  : 			ENTRUpdateCOMMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ENTRUpdateCOMMMode@ICPClass@@QAEXXZ	; ICPClass::ENTRUpdateCOMMMode
$LN6@HandleENTR:

; 930  : 		break;
; 931  : 	}
; 932  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@HandleENTR:
	DD	$LN3@HandleENTR
	DD	$LN2@HandleENTR
	DD	$LN6@HandleENTR
	DD	$LN1@HandleENTR
	DD	$LN1@HandleENTR
?HandleENTR@ICPClass@@QAEXH@Z ENDP			; ICPClass::HandleENTR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?GetNextFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystemp$ = 8					; size = 4
_functionp$ = 12					; size = 4
?GetNextFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z PROC ; FackClass::GetNextFault, COMDAT
; _this$ = ecx

; 68   :     { return mFaults.GetNextFault(subsystemp, functionp); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _functionp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subsystemp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetNextFault@FaultClass@@QAEHPAW4type_FSubSystem@1@PAH@Z ; FaultClass::GetNextFault
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNextFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z ENDP ; FackClass::GetNextFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?GetFirstFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystemp$ = 8					; size = 4
_functionp$ = 12					; size = 4
?GetFirstFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z PROC ; FackClass::GetFirstFault, COMDAT
; _this$ = ecx

; 66   :     { return mFaults.GetFirstFault(subsystemp, functionp); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _functionp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subsystemp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetFirstFault@FaultClass@@QAEHPAW4type_FSubSystem@1@PAH@Z ; FaultClass::GetFirstFault
	mov	esp, ebp
	pop	ebp
	ret	8
?GetFirstFault@FackClass@@QAEHPAW4type_FSubSystem@FaultClass@@PAH@Z ENDP ; FackClass::GetFirstFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?GetFFaultCount@FackClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFFaultCount@FackClass@@QAEHXZ PROC			; FackClass::GetFFaultCount, COMDAT
; _this$ = ecx

; 47   :     int		GetFFaultCount(void) {return mFaults.GetFaultCount();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetFaultCount@FaultClass@@QAEHXZ	; FaultClass::GetFaultCount
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFFaultCount@FackClass@@QAEHXZ ENDP			; FackClass::GetFFaultCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fault.h
;	COMDAT ?GetFaultCount@FaultClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFaultCount@FaultClass@@QAEHXZ PROC			; FaultClass::GetFaultCount, COMDAT
; _this$ = ecx

; 180  :        int	GetFaultCount(void) {return mFaultCount;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+256]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFaultCount@FaultClass@@QAEHXZ ENDP			; FaultClass::GetFaultCount
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
