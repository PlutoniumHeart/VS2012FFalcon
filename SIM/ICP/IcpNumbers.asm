; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\IcpNumbers.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?OneButton@ICPClass@@QAEXH@Z			; ICPClass::OneButton
PUBLIC	?TwoButton@ICPClass@@QAEXH@Z			; ICPClass::TwoButton
PUBLIC	?ThreeButton@ICPClass@@QAEXH@Z			; ICPClass::ThreeButton
PUBLIC	?FourButton@ICPClass@@QAEXH@Z			; ICPClass::FourButton
PUBLIC	?FifeButton@ICPClass@@QAEXH@Z			; ICPClass::FifeButton
PUBLIC	?SixButton@ICPClass@@QAEXH@Z			; ICPClass::SixButton
PUBLIC	?SevenButton@ICPClass@@QAEXH@Z			; ICPClass::SevenButton
PUBLIC	?EightButton@ICPClass@@QAEXH@Z			; ICPClass::EightButton
PUBLIC	?NineButton@ICPClass@@QAEXH@Z			; ICPClass::NineButton
PUBLIC	?ZeroButton@ICPClass@@QAEXH@Z			; ICPClass::ZeroButton
PUBLIC	?ExecTimeMode@ICPClass@@QAEXXZ			; ICPClass::ExecTimeMode
PUBLIC	?ExecFIXMode@ICPClass@@QAEXXZ			; ICPClass::ExecFIXMode
PUBLIC	?ExecACALMode@ICPClass@@QAEXXZ			; ICPClass::ExecACALMode
PUBLIC	?SetICPFlag@ICPClass@@QAEXH@Z			; ICPClass::SetICPFlag
PUBLIC	?ClearICPFlag@ICPClass@@QAEXH@Z			; ICPClass::ClearICPFlag
PUBLIC	?IsICPSet@ICPClass@@QAEHH@Z			; ICPClass::IsICPSet
PUBLIC	??_C@_04OHBONDIN@TIME?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_03GHDNOBPC@?$CF8s?$AA@			; `string'
PUBLIC	??_C@_01IMBAIPIC@?$AC?$AA@			; `string'
PUBLIC	??_C@_04BDKHIBGF@HACK?$AA@			; `string'
PUBLIC	??_C@_01KHDNNMEB@?$AB?$AA@			; `string'
PUBLIC	??_C@_09BNHDMGEP@DELTA?5TOS?$AA@		; `string'
PUBLIC	??_C@_08HPPJPGGP@00?300?300?$AA@		; `string'
PUBLIC	??_C@_03GNONEGBB@FIX?$AA@			; `string'
PUBLIC	??_C@_05OHBJNLDE@OFLY?$AC?$AA@			; `string'
PUBLIC	??_C@_04LAGKJDOM@STPT?$AA@			; `string'
PUBLIC	??_C@_05BJPCNOLC@DELTA?$AA@			; `string'
PUBLIC	??_C@_05EDPCMGNC@0?41NM?$AA@			; `string'
PUBLIC	??_C@_09DELPEPFI@SYS?5ACCUR?$AA@		; `string'
PUBLIC	??_C@_04PKDHFCJF@HIGH?$AA@			; `string'
PUBLIC	??_C@_09LGFJNIJB@GPS?5ACCUR?$AA@		; `string'
PUBLIC	??_C@_04PIHLGJDG@ACAL?$AA@			; `string'
PUBLIC	??_C@_05OCKJIFDC@RALT?$AC?$AA@			; `string'
PUBLIC	??_C@_03FKEEPDEP@ALT?$AA@			; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN?$AA@			; `string'
PUBLIC	??_C@_04OCLMINKH@ELEV?$AA@			; `string'
PUBLIC	??_C@_05HGCJAAHM@512FT?$AA@			; `string'
PUBLIC	??_C@_09BMLFEPEK@ALT?5DELTA?$AA@		; `string'
PUBLIC	??_C@_04LFIDNFBI@78FT?$AA@			; `string'
PUBLIC	??_C@_09OHJBJAEA@POS?5DELTA?$AA@		; `string'
PUBLIC	??_C@_05PLEOKBLH@0?40NM?$AA@			; `string'
EXTRN	_sprintf:PROC
EXTRN	?ExecMISCMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMISCMode
EXTRN	?ExecILSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecILSMode
EXTRN	?ExecALOWMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecALOWMode
EXTRN	?ExecCRUSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCRUSMode
EXTRN	?ExecMARKMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMARKMode
EXTRN	?ExecDESTMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecDESTMode
EXTRN	?ExecBingo@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecBingo
EXTRN	?ExecVIPMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecVIPMode
EXTRN	?ExecNAVMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecNAVMode
EXTRN	?ExecMANMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMANMode
EXTRN	?ExecINSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecINSMode
EXTRN	?ExecEWSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecEWSMode
EXTRN	?ExecMODEMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMODEMode
EXTRN	?UpdateMODEMode@ICPClass@@QAEXXZ:PROC		; ICPClass::UpdateMODEMode
EXTRN	?ExecVRPMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecVRPMode
EXTRN	?ExecDLINKMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecDLINKMode
EXTRN	?ExecCORRMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecCORRMode
EXTRN	?ExecMAGVMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecMAGVMode
EXTRN	?ExecOFPMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecOFPMode
EXTRN	?ExecINSMMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecINSMMode
EXTRN	?ExecLASRMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecLASRMode
EXTRN	?ExecGPSMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecGPSMode
EXTRN	?ExecDRNGMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecDRNGMode
EXTRN	?ExecBullMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecBullMode
EXTRN	?ExecWPTMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecWPTMode
EXTRN	?ExecHARMMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecHARMMode
EXTRN	?ExecWinAmpMode@ICPClass@@QAEXXZ:PROC		; ICPClass::ExecWinAmpMode
EXTRN	?CheckForHARM@ICPClass@@QAEHXZ:PROC		; ICPClass::CheckForHARM
EXTRN	?ClearStrings@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearStrings
EXTRN	?ClearFlags@ICPClass@@QAEXXZ:PROC		; ICPClass::ClearFlags
EXTRN	?FormatTime@ICPClass@@QAEXJPAD@Z:PROC		; ICPClass::FormatTime
EXTRN	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z:PROC	; ICPClass::FillDEDMatrix
EXTRN	?LeaveCNI@ICPClass@@QAEXXZ:PROC			; ICPClass::LeaveCNI
EXTRN	?LeaveCNIPage@ICPClass@@QAEXXZ:PROC		; ICPClass::LeaveCNIPage
EXTRN	?AddSTPT@ICPClass@@QAEXHH@Z:PROC		; ICPClass::AddSTPT
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z:PROC ; FireControlComputer::SetStptMode
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_bPilotEntertainment@@3_NA:BYTE		; g_bPilotEntertainment
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_05PLEOKBLH@0?40NM?$AA@
CONST	SEGMENT
??_C@_05PLEOKBLH@0?40NM?$AA@ DB '0.0NM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OHJBJAEA@POS?5DELTA?$AA@
CONST	SEGMENT
??_C@_09OHJBJAEA@POS?5DELTA?$AA@ DB 'POS DELTA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFIDNFBI@78FT?$AA@
CONST	SEGMENT
??_C@_04LFIDNFBI@78FT?$AA@ DB '78FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BMLFEPEK@ALT?5DELTA?$AA@
CONST	SEGMENT
??_C@_09BMLFEPEK@ALT?5DELTA?$AA@ DB 'ALT DELTA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGCJAAHM@512FT?$AA@
CONST	SEGMENT
??_C@_05HGCJAAHM@512FT?$AA@ DB '512FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCLMINKH@ELEV?$AA@
CONST	SEGMENT
??_C@_04OCLMINKH@ELEV?$AA@ DB 'ELEV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN?$AA@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN?$AA@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKEEPDEP@ALT?$AA@
CONST	SEGMENT
??_C@_03FKEEPDEP@ALT?$AA@ DB 'ALT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OCKJIFDC@RALT?$AC?$AA@
CONST	SEGMENT
??_C@_05OCKJIFDC@RALT?$AC?$AA@ DB 'RALT', 02H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PIHLGJDG@ACAL?$AA@
CONST	SEGMENT
??_C@_04PIHLGJDG@ACAL?$AA@ DB 'ACAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGFJNIJB@GPS?5ACCUR?$AA@
CONST	SEGMENT
??_C@_09LGFJNIJB@GPS?5ACCUR?$AA@ DB 'GPS ACCUR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKDHFCJF@HIGH?$AA@
CONST	SEGMENT
??_C@_04PKDHFCJF@HIGH?$AA@ DB 'HIGH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DELPEPFI@SYS?5ACCUR?$AA@
CONST	SEGMENT
??_C@_09DELPEPFI@SYS?5ACCUR?$AA@ DB 'SYS ACCUR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EDPCMGNC@0?41NM?$AA@
CONST	SEGMENT
??_C@_05EDPCMGNC@0?41NM?$AA@ DB '0.1NM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BJPCNOLC@DELTA?$AA@
CONST	SEGMENT
??_C@_05BJPCNOLC@DELTA?$AA@ DB 'DELTA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LAGKJDOM@STPT?$AA@
CONST	SEGMENT
??_C@_04LAGKJDOM@STPT?$AA@ DB 'STPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHBJNLDE@OFLY?$AC?$AA@
CONST	SEGMENT
??_C@_05OHBJNLDE@OFLY?$AC?$AA@ DB 'OFLY', 02H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03GNONEGBB@FIX?$AA@
CONST	SEGMENT
??_C@_03GNONEGBB@FIX?$AA@ DB 'FIX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HPPJPGGP@00?300?300?$AA@
CONST	SEGMENT
??_C@_08HPPJPGGP@00?300?300?$AA@ DB '00:00:00', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BNHDMGEP@DELTA?5TOS?$AA@
CONST	SEGMENT
??_C@_09BNHDMGEP@DELTA?5TOS?$AA@ DB 'DELTA TOS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KHDNNMEB@?$AB?$AA@
CONST	SEGMENT
??_C@_01KHDNNMEB@?$AB?$AA@ DB 01H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDKHIBGF@HACK?$AA@
CONST	SEGMENT
??_C@_04BDKHIBGF@HACK?$AA@ DB 'HACK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01IMBAIPIC@?$AC?$AA@
CONST	SEGMENT
??_C@_01IMBAIPIC@?$AC?$AA@ DB 02H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHDNOBPC@?$CF8s?$AA@
CONST	SEGMENT
??_C@_03GHDNOBPC@?$CF8s?$AA@ DB '%8s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHBONDIN@TIME?$AA@
CONST	SEGMENT
??_C@_04OHBONDIN@TIME?$AA@ DB 'TIME', 00H		; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsICPSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsICPSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsICPSet, COMDAT
; _this$ = ecx

; 499  : 	int IsICPSet (int testFlag) {return ICPModeFlags & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsICPSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsICPSet
$LN3@IsICPSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsICPSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsICPSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsICPSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?ClearICPFlag@ICPClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearICPFlag@ICPClass@@QAEXH@Z PROC			; ICPClass::ClearICPFlag, COMDAT
; _this$ = ecx

; 498  : 	void ClearICPFlag (int newFlag) {ICPModeFlags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+1376]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1376], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearICPFlag@ICPClass@@QAEXH@Z ENDP			; ICPClass::ClearICPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?SetICPFlag@ICPClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetICPFlag@ICPClass@@QAEXH@Z PROC			; ICPClass::SetICPFlag, COMDAT
; _this$ = ecx

; 497  : 	void SetICPFlag (int newFlag) {ICPModeFlags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1376]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1376], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetICPFlag@ICPClass@@QAEXH@Z ENDP			; ICPClass::SetICPFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecACALMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecACALMode
; _this$ = ecx

; 401  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	//Line1
; 403  : 	FillDEDMatrix(0,1,"ACAL");

	push	0
	push	OFFSET ??_C@_04PIHLGJDG@ACAL?$AA@
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 404  : 	FillDEDMatrix(0,6,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 405  : 	FillDEDMatrix(0,7,"RALT\x02",2);

	push	2
	push	OFFSET ??_C@_05OCKJIFDC@RALT?$AC?$AA@
	push	7
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 406  : 	FillDEDMatrix(0,13,"ALT");

	push	0
	push	OFFSET ??_C@_03FKEEPDEP@ALT?$AA@
	push	13					; 0000000dH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 407  : 	AddSTPT(0,22);

	push	22					; 00000016H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 408  : 	//Line2
; 409  : 	FillDEDMatrix(1,8,"MAN");

	push	0
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	8
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 410  : 	//Line3
; 411  : 	FillDEDMatrix(2,8,"ELEV");

	push	0
	push	OFFSET ??_C@_04OCLMINKH@ELEV?$AA@
	push	8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 412  : 	FillDEDMatrix(2,16,"512FT");

	push	0
	push	OFFSET ??_C@_05HGCJAAHM@512FT?$AA@
	push	16					; 00000010H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 413  : 	//Line4
; 414  : 	FillDEDMatrix(3,2,"ALT DELTA");

	push	0
	push	OFFSET ??_C@_09BMLFEPEK@ALT?5DELTA?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 415  : 	FillDEDMatrix(3,17,"78FT");

	push	0
	push	OFFSET ??_C@_04LFIDNFBI@78FT?$AA@
	push	17					; 00000011H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 416  : 	//Line5
; 417  : 	FillDEDMatrix(4,2,"POS DELTA");

	push	0
	push	OFFSET ??_C@_09OHJBJAEA@POS?5DELTA?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 418  : 	FillDEDMatrix(4,17,"0.0NM");

	push	0
	push	OFFSET ??_C@_05PLEOKBLH@0?40NM?$AA@
	push	17					; 00000011H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 419  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecACALMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecACALMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecFIXMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecFIXMode
; _this$ = ecx

; 382  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 383  : 	//Line1
; 384  : 	FillDEDMatrix(0,10,"FIX");

	push	0
	push	OFFSET ??_C@_03GNONEGBB@FIX?$AA@
	push	10					; 0000000aH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 385  : 	FillDEDMatrix(0,14,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	14					; 0000000eH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 386  : 	FillDEDMatrix(0,15,"OFLY\x02",2);

	push	2
	push	OFFSET ??_C@_05OHBJNLDE@OFLY?$AC?$AA@
	push	15					; 0000000fH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 387  : 	//Line2
; 388  : 	FillDEDMatrix(1,9,"STPT");

	push	0
	push	OFFSET ??_C@_04LAGKJDOM@STPT?$AA@
	push	9
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 389  : 	AddSTPT(1,14);

	push	14					; 0000000eH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddSTPT@ICPClass@@QAEXHH@Z		; ICPClass::AddSTPT

; 390  : 	//Line3
; 391  : 	FillDEDMatrix(2,8,"DELTA");

	push	0
	push	OFFSET ??_C@_05BJPCNOLC@DELTA?$AA@
	push	8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 392  : 	FillDEDMatrix(2,17,"0.1NM");

	push	0
	push	OFFSET ??_C@_05EDPCMGNC@0?41NM?$AA@
	push	17					; 00000011H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 393  : 	//Line4
; 394  : 	FillDEDMatrix(3,7,"SYS ACCUR");

	push	0
	push	OFFSET ??_C@_09DELPEPFI@SYS?5ACCUR?$AA@
	push	7
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 395  : 	FillDEDMatrix(3,18,"HIGH");

	push	0
	push	OFFSET ??_C@_04PKDHFCJF@HIGH?$AA@
	push	18					; 00000012H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 396  : 	//Line5
; 397  : 	FillDEDMatrix(4,7,"GPS ACCUR");

	push	0
	push	OFFSET ??_C@_09LGFJNIJB@GPS?5ACCUR?$AA@
	push	7
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 398  : 	FillDEDMatrix(4,18,"HIGH");

	push	0
	push	OFFSET ??_C@_04PKDHFCJF@HIGH?$AA@
	push	18					; 00000012H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 399  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecFIXMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecFIXMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecTimeMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecTimeMode
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 348  : 	//Line1
; 349  : 	FillDEDMatrix(0,13,"TIME");

	push	0
	push	OFFSET ??_C@_04OHBONDIN@TIME?$AA@
	push	13					; 0000000dH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 350  : 	//Line3
; 351  : 	FillDEDMatrix(2,5,"SYSTEM");

	push	0
	push	OFFSET ??_C@_06FDHFNJBJ@SYSTEM?$AA@
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 352  : 	// Format Line 2: Current Time
; 353  : 	FormatTime(vuxGameTime / 1000, timeStr);		// Get game time and convert to secs

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 217				; 000000d9H
	push	eax
	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FormatTime@ICPClass@@QAEXJPAD@Z	; ICPClass::FormatTime

; 354  : 	sprintf(tempstr,"%8s",timeStr);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 217				; 000000d9H
	push	edx
	push	OFFSET ??_C@_03GHDNOBPC@?$CF8s?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 355  : 	FillDEDMatrix(2,13,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	13					; 0000000dH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 356  : 	FillDEDMatrix(2,14,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 357  : 	FillDEDMatrix(2,22,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	22					; 00000016H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 358  : 	//Line4
; 359  : 	FillDEDMatrix(3,7,"HACK");

	push	0
	push	OFFSET ??_C@_04BDKHIBGF@HACK?$AA@
	push	7
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 360  : 	if(running)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+456]
	test	eax, eax
	je	SHORT $LN4@ExecTimeMo

; 361  : 	{
; 362  : 		Difference = (vuxGameTime - Start);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	sub	edx, DWORD PTR [ecx+460]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], edx

; 363  : 		FormatTime(Difference / 1000, tempstr);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FormatTime@ICPClass@@QAEXJPAD@Z	; ICPClass::FormatTime

; 364  : 		FillDEDMatrix(3,14,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
	jmp	$LN3@ExecTimeMo
$LN4@ExecTimeMo:

; 365  : 	}
; 366  : 	else if(stopped)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+457]
	test	ecx, ecx
	je	SHORT $LN2@ExecTimeMo

; 367  : 	{
; 368  : 		FormatTime(Difference / 1000, tempstr);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FormatTime@ICPClass@@QAEXJPAD@Z	; ICPClass::FormatTime

; 369  : 		FillDEDMatrix(3,14,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 370  : 	}
; 371  : 	else

	jmp	SHORT $LN3@ExecTimeMo
$LN2@ExecTimeMo:

; 372  : 	{
; 373  : 		FormatTime(Difference / 1000, tempstr);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+464]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FormatTime@ICPClass@@QAEXJPAD@Z	; ICPClass::FormatTime

; 374  : 		FillDEDMatrix(3,14,tempstr);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	push	14					; 0000000eH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecTimeMo:

; 375  : 	}
; 376  : 	FillDEDMatrix(3,23,"\x01");

	push	0
	push	OFFSET ??_C@_01KHDNNMEB@?$AB?$AA@
	push	23					; 00000017H
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 377  : 	//Line5
; 378  : 	FillDEDMatrix(4,2,"DELTA TOS");

	push	0
	push	OFFSET ??_C@_09BNHDMGEP@DELTA?5TOS?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 379  : 	FillDEDMatrix(4,14,"00:00:00");

	push	0
	push	OFFSET ??_C@_08HPPJPGGP@00?300?300?$AA@
	push	14					; 0000000eH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 380  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecTimeMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecTimeMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?ZeroButton@ICPClass@@QAEXH@Z PROC			; ICPClass::ZeroButton
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 290  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN13@ZeroButton

; 291  : 	{
; 292  : 		if(IsICPSet(ICPClass::MODE_LIST) && mICPSecondaryMode == EIGHT_BUTTON)

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN12@ZeroButton
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 24			; 00000018H
	jne	SHORT $LN12@ZeroButton

; 293  : 			UpdateMODEMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateMODEMode@ICPClass@@QAEXXZ	; ICPClass::UpdateMODEMode

; 294  : 		else

	jmp	SHORT $LN11@ZeroButton
$LN12@ZeroButton:

; 295  : 		{
; 296  : 			//Set our LastMode
; 297  : 			LastMode = LIST_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1380], 21		; 00000015H

; 298  : 			//MISC PAGE
; 299  : 			SetICPFlag(ICPClass::MISC_MODE);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 300  : 			ClearICPFlag(ICPClass::MODE_LIST);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearICPFlag@ICPClass@@QAEXH@Z		; ICPClass::ClearICPFlag

; 301  : 			ExecMISCMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMISCMode@ICPClass@@QAEXXZ		; ICPClass::ExecMISCMode
$LN11@ZeroButton:

; 302  : 		}

	jmp	$LN14@ZeroButton
$LN13@ZeroButton:

; 303  : 	}
; 304  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	$LN9@ZeroButton

; 305  : 	{
; 306  : extern bool g_bPilotEntertainment;	// Retro 3Jan2004
; 307  : 
; 308  : 		// ORIGINAL STUFF	// Retro 3Jan2004
; 309  : 		if (g_bPilotEntertainment == false)

	movzx	edx, BYTE PTR ?g_bPilotEntertainment@@3_NA ; g_bPilotEntertainment
	test	edx, edx
	jne	SHORT $LN8@ZeroButton

; 310  : 		{
; 311  : 			if(!CheckForHARM())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckForHARM@ICPClass@@QAEHXZ		; ICPClass::CheckForHARM
	test	eax, eax
	jne	SHORT $LN7@ZeroButton

; 312  : 				return;

	jmp	$LN14@ZeroButton
$LN7@ZeroButton:

; 313  : 
; 314  : 			LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 315  : 			ExecHARMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecHARMMode@ICPClass@@QAEXXZ		; ICPClass::ExecHARMMode

; 316  : 
; 317  : 			mICPSecondaryMode = mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 318  : 			//Once we got here, only modechange will get us back
; 319  : 			SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 320  : 		}
; 321  : 		// RETRO STUFF	// Retro 3Jan2004
; 322  : 		else

	jmp	SHORT $LN6@ZeroButton
$LN8@ZeroButton:

; 323  : 		{
; 324  : 			LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 325  : 			ClearICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearICPFlag@ICPClass@@QAEXH@Z		; ICPClass::ClearICPFlag

; 326  : 			ExecWinAmpMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecWinAmpMode@ICPClass@@QAEXXZ	; ICPClass::ExecWinAmpMode

; 327  : 
; 328  : 			mICPSecondaryMode = mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 329  : 			//Once we got here, only modechange will get us back
; 330  : 			SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN6@ZeroButton:

; 331  : 		}

	jmp	SHORT $LN14@ZeroButton
$LN9@ZeroButton:

; 332  : 	}
; 333  : 	//ILS
; 334  : 	else if(IsICPSet(ICPClass::MODE_CNI) && mICPSecondaryMode == ONE_BUTTON)

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN14@ZeroButton
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 4
	jne	SHORT $LN14@ZeroButton

; 335  : 	{
; 336  : 		if(ILSPageSel == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+296], 1
	jne	SHORT $LN14@ZeroButton

; 337  : 		{
; 338  : 			if(CMDSTRG)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1501]
	test	eax, eax
	je	SHORT $LN2@ZeroButton

; 339  : 				CMDSTRG = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1501], 0

; 340  : 			else

	jmp	SHORT $LN14@ZeroButton
$LN2@ZeroButton:

; 341  : 				CMDSTRG = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1501], 1
$LN14@ZeroButton:

; 342  : 		}
; 343  : 	}
; 344  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ZeroButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::ZeroButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?NineButton@ICPClass@@QAEXH@Z PROC			; ICPClass::NineButton
; _this$ = ecx

; 256  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 258  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@NineButton

; 259  : 	{
; 260  : 		ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 261  : 		mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 262  : 		//Set our LastMode
; 263  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 264  : 		//VIP PAGE
; 265  : 		VRP_BRG = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+713], 1

; 266  : 		LastMode = LIST_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1380], 21		; 00000015H

; 267  : 		ExecVRPMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecVRPMode@ICPClass@@QAEXXZ		; ICPClass::ExecVRPMode
	jmp	SHORT $LN3@NineButton
$LN4@NineButton:

; 268  : 	}
; 269  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@NineButton

; 270  : 	{
; 271  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 272  : 		ExecWPTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecWPTMode@ICPClass@@QAEXXZ		; ICPClass::ExecWPTMode

; 273  : 		//Once we got here, only modechange will get us back
; 274  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 275  : 	}
; 276  : 	else

	jmp	SHORT $LN3@NineButton
$LN2@NineButton:

; 277  : 	{
; 278  : 		//ACAL page, called directly
; 279  : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 280  : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 281  : 		//Once we got here, only modechange will get us back
; 282  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN3@NineButton:

; 283  : 	}
; 284  : 
; 285  : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NineButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::NineButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?EightButton@ICPClass@@QAEXH@Z PROC			; ICPClass::EightButton
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 230  : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 231  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@EightButto

; 232  : 	{
; 233  : 		//Set our LastMode
; 234  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 235  : 		//MODE PAGE
; 236  : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 237  : 		ExecMODEMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMODEMode@ICPClass@@QAEXXZ		; ICPClass::ExecMODEMode
	jmp	SHORT $LN5@EightButto
$LN4@EightButto:

; 238  : 	}
; 239  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@EightButto

; 240  : 	{
; 241  : 		LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 242  : 		ExecBullMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBullMode@ICPClass@@QAEXXZ		; ICPClass::ExecBullMode

; 243  : 		//Once we got here, only modechange will get us back
; 244  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 245  : 	}
; 246  : 	else

	jmp	SHORT $LN5@EightButto
$LN2@EightButto:

; 247  : 	{
; 248  : 		//Fix page, called directly
; 249  : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 250  : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 251  : 		//Once we got here, only modechange will get us back
; 252  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN5@EightButto:

; 253  : 	}
; 254  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?EightButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::EightButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SevenButton@ICPClass@@QAEXH@Z PROC			; ICPClass::SevenButton
; _this$ = ecx

; 196  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 198  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 199  : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 200  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@SevenButto

; 201  : 	{
; 202  : 		//Set our LastMode
; 203  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 204  : 		mICPSecondaryMode = EWS_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 55			; 00000037H

; 205  : 		SetICPFlag(ICPClass::CHAFF_BINGO);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 206  : 		ClearICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearICPFlag@ICPClass@@QAEXH@Z		; ICPClass::ClearICPFlag

; 207  : 		ExecEWSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecEWSMode@ICPClass@@QAEXXZ		; ICPClass::ExecEWSMode
	jmp	SHORT $LN5@SevenButto
$LN4@SevenButto:

; 208  : 	}
; 209  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@SevenButto

; 210  : 	{
; 211  : 		LastMode = LIST_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1380], 21		; 00000015H

; 212  : 		ExecDRNGMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDRNGMode@ICPClass@@QAEXXZ		; ICPClass::ExecDRNGMode

; 213  : 		//Once we got here, only modechange will get us back
; 214  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 215  : 	}
; 216  : 	else

	jmp	SHORT $LN5@SevenButto
$LN2@SevenButto:

; 217  : 	{
; 218  : 		//MKPT PAGE
; 219  : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 220  : 		playerAC->FCC->SetStptMode(FireControlComputer::FCCMarkpoint);

	push	2
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 221  : 		playerAC->FCC->waypointStepCmd = 127;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], 127			; 0000007fH

; 222  : 		ExecMARKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMARKMode@ICPClass@@QAEXXZ		; ICPClass::ExecMARKMode

; 223  : 		//Once we got here, only modechange will get us back
; 224  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN5@SevenButto:

; 225  : 	}
; 226  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SevenButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::SevenButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SixButton@ICPClass@@QAEXH@Z PROC			; ICPClass::SixButton
; _this$ = ecx

; 169  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 171  : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 172  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@SixButton

; 173  : 	{
; 174  : 		//Set our LastMode
; 175  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 176  : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 177  : 		//INS PAGE
; 178  : 		ExecINSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecINSMode@ICPClass@@QAEXXZ		; ICPClass::ExecINSMode
	jmp	SHORT $LN5@SixButton
$LN4@SixButton:

; 179  : 	}
; 180  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@SixButton

; 181  : 	{
; 182  : 		LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 183  : 		ExecGPSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecGPSMode@ICPClass@@QAEXXZ		; ICPClass::ExecGPSMode

; 184  : 		//Once we got here, only modechange will get us back
; 185  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 186  : 	}
; 187  : 	else

	jmp	SHORT $LN5@SixButton
$LN2@SixButton:

; 188  : 	{
; 189  : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 190  : 		ExecTimeMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecTimeMode@ICPClass@@QAEXXZ		; ICPClass::ExecTimeMode

; 191  : 		//Once we got here, only modechange will get us back
; 192  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN5@SixButton:

; 193  : 	}
; 194  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SixButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::SixButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?FifeButton@ICPClass@@QAEXH@Z PROC			; ICPClass::FifeButton
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 141  : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 142  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN5@FifeButton

; 143  : 	{
; 144  : 		//Set our LastMode
; 145  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 146  : 		//MAN PAGE
; 147  : 		ExecMANMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMANMode@ICPClass@@QAEXXZ		; ICPClass::ExecMANMode
	jmp	SHORT $LN6@FifeButton
$LN5@FifeButton:

; 148  : 	}
; 149  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN3@FifeButton

; 150  : 	{
; 151  : 		//Set our LastMode
; 152  : 		LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 153  : 		//LASR PAGE
; 154  : 		ExecLASRMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecLASRMode@ICPClass@@QAEXXZ		; ICPClass::ExecLASRMode

; 155  : 		//Once we got here, only modechange will get us back
; 156  : 		//SetICPFlag(ICPClass::BLOCK_MODE);
; 157  : 	}
; 158  : 	else

	jmp	SHORT $LN6@FifeButton
$LN3@FifeButton:

; 159  : 	{
; 160  : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 161  : 		//Only set this when not here
; 162  : 		if(!Cruise_HOME && !Cruise_RNG && !Cruise_TOS)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+437]
	test	edx, edx
	jne	SHORT $LN1@FifeButton
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+436]
	test	ecx, ecx
	jne	SHORT $LN1@FifeButton
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+439]
	test	eax, eax
	jne	SHORT $LN1@FifeButton

; 163  : 			SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN1@FifeButton:

; 164  : 		//CRUS PAGE
; 165  : 		ExecCRUSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCRUSMode@ICPClass@@QAEXXZ		; ICPClass::ExecCRUSMode
$LN6@FifeButton:

; 166  : 	}
; 167  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FifeButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::FifeButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?FourButton@ICPClass@@QAEXH@Z PROC			; ICPClass::FourButton
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 108  : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 109  : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 110  : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@FourButton

; 111  : 	{
; 112  : 		//Set our LastMode
; 113  : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 114  : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 115  : 		//NAV PAGE
; 116  : 		ExecNAVMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecNAVMode@ICPClass@@QAEXXZ		; ICPClass::ExecNAVMode

; 117  : 		//Once we got here, only modechange will get us back
; 118  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
	jmp	SHORT $LN5@FourButton
$LN4@FourButton:

; 119  : 	}
; 120  : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@FourButton

; 121  : 	{
; 122  : 		//Set our LastMode
; 123  : 		LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 124  : 		//INSM PAGE
; 125  : 		ExecINSMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecINSMMode@ICPClass@@QAEXXZ		; ICPClass::ExecINSMMode

; 126  : 		//Once we got here, only modechange will get us back
; 127  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 128  : 	}
; 129  : 	else

	jmp	SHORT $LN5@FourButton
$LN2@FourButton:

; 130  : 	{
; 131  : 		//STPT PAGE
; 132  : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 133  : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 134  : 		playerAC->FCC->SetStptMode(FireControlComputer::FCCWaypoint);

	push	0
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 135  : 		playerAC->FCC->waypointStepCmd = 127;

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+936]
	mov	BYTE PTR [eax+194], 127			; 0000007fH
$LN5@FourButton:

; 136  : 	}
; 137  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FourButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::FourButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?ThreeButton@ICPClass@@QAEXH@Z PROC			; ICPClass::ThreeButton
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 69   : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 70   : 
; 71   : 	if(IsICPSet(ICPClass::MODE_CNI))

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN5@ThreeButto

; 72   : 	{
; 73   : 		//DLINK page
; 74   : 		ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 75   : 		LeaveCNI();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNI@ICPClass@@QAEXXZ		; ICPClass::LeaveCNI

; 76   : 		ClearFlags();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlags@ICPClass@@QAEXXZ		; ICPClass::ClearFlags

; 77   : 		SetICPFlag(ICPClass::MODE_DLINK);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 78   : 		playerAC->FCC->SetStptMode(FireControlComputer::FCCDLinkpoint);

	push	1
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 79   : 		playerAC->FCC->waypointStepCmd = 127;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], 127			; 0000007fH

; 80   : 		ExecDLINKMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDLINKMode@ICPClass@@QAEXXZ		; ICPClass::ExecDLINKMode

; 81   : 		//Once we got here, only modechange will get us back
; 82   : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
	jmp	SHORT $LN6@ThreeButto
$LN5@ThreeButto:

; 83   : 	}	
; 84   : 	else if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN3@ThreeButto

; 85   : 	{
; 86   : 		ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 87   : 		mICPSecondaryMode = mode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [edx+12], eax

; 88   : 		//Set our LastMode
; 89   : 		LastMode = LIST_MODE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1380], 21		; 00000015H

; 90   : 		//VIP PAGE
; 91   : 		VIP_BRG = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+697], 1

; 92   : 		ExecVIPMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecVIPMode@ICPClass@@QAEXXZ		; ICPClass::ExecVIPMode
	jmp	SHORT $LN6@ThreeButto
$LN3@ThreeButto:

; 93   : 	}
; 94   : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN6@ThreeButto

; 95   : 	{
; 96   : 		ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 97   : 		//Set our LastMode
; 98   : 		LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 99   : 		//OFP PAGE
; 100  : 		ExecOFPMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecOFPMode@ICPClass@@QAEXXZ		; ICPClass::ExecOFPMode

; 101  : 		//Once we got here, only modechange will get us back
; 102  : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag
$LN6@ThreeButto:

; 103  : 	}
; 104  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ThreeButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::ThreeButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?TwoButton@ICPClass@@QAEXH@Z PROC			; ICPClass::TwoButton
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 41   : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 42   : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@TwoButton

; 43   : 	{
; 44   : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 45   : 		//BINGO PAGE
; 46   : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 47   : 		ExecBingo();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecBingo@ICPClass@@QAEXXZ		; ICPClass::ExecBingo
	jmp	SHORT $LN5@TwoButton
$LN4@TwoButton:

; 48   : 	}
; 49   : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@TwoButton

; 50   : 	{
; 51   : 		//Set our LastMode
; 52   : 		LastMode = LIST_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1380], 21		; 00000015H

; 53   : 		//MAGV PAGE
; 54   : 		ExecMAGVMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecMAGVMode@ICPClass@@QAEXXZ		; ICPClass::ExecMAGVMode

; 55   : 		//Once we got here, only modechange will get us back
; 56   : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 57   : 	}
; 58   : 	else

	jmp	SHORT $LN5@TwoButton
$LN2@TwoButton:

; 59   : 	{
; 60   : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 61   : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 62   : 		//ALOW PAGE
; 63   : 		ExecALOWMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecALOWMode@ICPClass@@QAEXXZ		; ICPClass::ExecALOWMode
$LN5@TwoButton:

; 64   : 	}
; 65   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?TwoButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::TwoButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpnumbers.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?OneButton@ICPClass@@QAEXH@Z PROC			; ICPClass::OneButton
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 9    : 	ClearStrings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearStrings@ICPClass@@QAEXXZ		; ICPClass::ClearStrings

; 10   : 	mICPSecondaryMode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 11   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 12   : 
; 13   : 	if(IsICPSet(ICPClass::MODE_LIST))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN4@OneButton

; 14   : 	{
; 15   : 		//Set our LastMode
; 16   : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 17   : 		//DEST PAGE
; 18   : 		SetICPFlag(ICPClass::EDIT_STPT);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 19   : 		SetICPFlag(ICPClass::EDIT_LAT);

	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 20   : 		playerAC->FCC->waypointStepCmd = 127;

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+194], 127			; 0000007fH

; 21   : 		ExecDESTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecDESTMode@ICPClass@@QAEXXZ		; ICPClass::ExecDESTMode
	jmp	SHORT $LN5@OneButton
$LN4@OneButton:

; 22   : 	}
; 23   : 	else if(IsICPSet(ICPClass::MISC_MODE))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsICPSet@ICPClass@@QAEHH@Z		; ICPClass::IsICPSet
	test	eax, eax
	je	SHORT $LN2@OneButton

; 24   : 	{
; 25   : 		//Set our LastMode
; 26   : 		LastMode = LIST_MODE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1380], 21		; 00000015H

; 27   : 		ExecCORRMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecCORRMode@ICPClass@@QAEXXZ		; ICPClass::ExecCORRMode

; 28   : 		//Once we got here, only modechange will get us back
; 29   : 		SetICPFlag(ICPClass::BLOCK_MODE);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetICPFlag@ICPClass@@QAEXH@Z		; ICPClass::SetICPFlag

; 30   : 	}
; 31   : 	else

	jmp	SHORT $LN5@OneButton
$LN2@OneButton:

; 32   : 	{
; 33   : 		//ILS PAGE
; 34   : 		LeaveCNIPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeaveCNIPage@ICPClass@@QAEXXZ		; ICPClass::LeaveCNIPage

; 35   : 		ExecILSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecILSMode@ICPClass@@QAEXXZ		; ICPClass::ExecILSMode
$LN5@OneButton:

; 36   : 	} 
; 37   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?OneButton@ICPClass@@QAEXH@Z ENDP			; ICPClass::OneButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
