; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\ICP\IcpIFF.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?ExecIFFMode@ICPClass@@QAEXXZ			; ICPClass::ExecIFFMode
PUBLIC	?IsIFFSet@ICPClass@@QAEHH@Z			; ICPClass::IsIFFSet
PUBLIC	??_C@_07CGBKHICO@IFF?5?5ON?$AA@			; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN?$AA@			; `string'
PUBLIC	??_C@_05LBHBMGJ@M1?522?$AA@			; `string'
PUBLIC	??_C@_02KDKICELI@MC?$AA@			; `string'
PUBLIC	??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@			; `string'
PUBLIC	??_C@_01IMBAIPIC@?$AC?$AA@			; `string'
PUBLIC	??_C@_07EBAEDAJB@M2?53412?$AA@			; `string'
PUBLIC	??_C@_02MDNGMLIJ@M4?$AA@			; `string'
PUBLIC	??_C@_04BKMIICND@B?$CI6?$CJ?$AA@		; `string'
PUBLIC	??_C@_07ONAGEEHB@M3?51234?$AA@			; `string'
PUBLIC	??_C@_03KJGMBMID@OUT?$AA@			; `string'
PUBLIC	??_C@_03NOFPMLMM@?$CI7?$CJ?$AA@			; `string'
PUBLIC	??_C@_06HCMMNHH@MS?5?$CI8?$CJ?$AA@		; `string'
PUBLIC	??_C@_08HEMAKOIM@IFF?5?5OFF?$AA@		; `string'
PUBLIC	??_C@_02LOKBDPMM@M1?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_02JFIMGMAP@M2?$AA@			; `string'
PUBLIC	??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@		; `string'
PUBLIC	??_C@_02IMJHFNEO@M3?$AA@			; `string'
PUBLIC	??_C@_03KOOFOJHJ@LIT?$AA@			; `string'
PUBLIC	??_C@_03DHBHJOB@AUD?$AA@			; `string'
EXTRN	_sprintf:PROC
EXTRN	?ScratchPad@ICPClass@@QAEXHHH@Z:PROC		; ICPClass::ScratchPad
EXTRN	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z:PROC	; ICPClass::FillDEDMatrix
EXTRN	?IFFBackup@ICPClass@@QAEXXZ:PROC		; ICPClass::IFFBackup
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ:PROC ; NavigationSystem::GetControlSrc
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?gNavigationSys@@3PAVNavigationSystem@@A:DWORD	; gNavigationSys
EXTRN	?g_bIFF@@3_NA:BYTE				; g_bIFF
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_03DHBHJOB@AUD?$AA@
CONST	SEGMENT
??_C@_03DHBHJOB@AUD?$AA@ DB 'AUD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KOOFOJHJ@LIT?$AA@
CONST	SEGMENT
??_C@_03KOOFOJHJ@LIT?$AA@ DB 'LIT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IMJHFNEO@M3?$AA@
CONST	SEGMENT
??_C@_02IMJHFNEO@M3?$AA@ DB 'M3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@
CONST	SEGMENT
??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@ DB 'A(6)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JFIMGMAP@M2?$AA@
CONST	SEGMENT
??_C@_02JFIMGMAP@M2?$AA@ DB 'M2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LOKBDPMM@M1?$AA@
CONST	SEGMENT
??_C@_02LOKBDPMM@M1?$AA@ DB 'M1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HEMAKOIM@IFF?5?5OFF?$AA@
CONST	SEGMENT
??_C@_08HEMAKOIM@IFF?5?5OFF?$AA@ DB 'IFF  OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCMMNHH@MS?5?$CI8?$CJ?$AA@
CONST	SEGMENT
??_C@_06HCMMNHH@MS?5?$CI8?$CJ?$AA@ DB 'MS (8)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NOFPMLMM@?$CI7?$CJ?$AA@
CONST	SEGMENT
??_C@_03NOFPMLMM@?$CI7?$CJ?$AA@ DB '(7)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KJGMBMID@OUT?$AA@
CONST	SEGMENT
??_C@_03KJGMBMID@OUT?$AA@ DB 'OUT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONAGEEHB@M3?51234?$AA@
CONST	SEGMENT
??_C@_07ONAGEEHB@M3?51234?$AA@ DB 'M3 1234', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKMIICND@B?$CI6?$CJ?$AA@
CONST	SEGMENT
??_C@_04BKMIICND@B?$CI6?$CJ?$AA@ DB 'B(6)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDNGMLIJ@M4?$AA@
CONST	SEGMENT
??_C@_02MDNGMLIJ@M4?$AA@ DB 'M4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBAEDAJB@M2?53412?$AA@
CONST	SEGMENT
??_C@_07EBAEDAJB@M2?53412?$AA@ DB 'M2 3412', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01IMBAIPIC@?$AC?$AA@
CONST	SEGMENT
??_C@_01IMBAIPIC@?$AC?$AA@ DB 02H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@
CONST	SEGMENT
??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@ DB '(5)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KDKICELI@MC?$AA@
CONST	SEGMENT
??_C@_02KDKICELI@MC?$AA@ DB 'MC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBHBMGJ@M1?522?$AA@
CONST	SEGMENT
??_C@_05LBHBMGJ@M1?522?$AA@ DB 'M1 22', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN?$AA@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN?$AA@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGBKHICO@IFF?5?5ON?$AA@
CONST	SEGMENT
??_C@_07CGBKHICO@IFF?5?5ON?$AA@ DB 'IFF  ON', 00H	; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\icp.h
;	COMDAT ?IsIFFSet@ICPClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_testFlag$ = 8						; size = 4
?IsIFFSet@ICPClass@@QAEHH@Z PROC			; ICPClass::IsIFFSet, COMDAT
; _this$ = ecx

; 516  : 	int IsIFFSet (int testFlag) {return IFFModes & testFlag ? 1 : 0;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1540]
	and	ecx, DWORD PTR _testFlag$[ebp]
	je	SHORT $LN3@IsIFFSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsIFFSet
$LN3@IsIFFSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsIFFSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsIFFSet@ICPClass@@QAEHH@Z ENDP			; ICPClass::IsIFFSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\icp\icpiff.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecIFFMode@ICPClass@@QAEXXZ PROC			; ICPClass::ExecIFFMode
; _this$ = ecx

; 10   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 11   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 12   : 	if(gNavigationSys->GetControlSrc() == NavigationSystem::AUXCOMM)

	mov	ecx, DWORD PTR ?gNavigationSys@@3PAVNavigationSystem@@A ; gNavigationSys
	call	?GetControlSrc@NavigationSystem@@QAE?AW4Tacan_Channel_Src@1@XZ ; NavigationSystem::GetControlSrc
	cmp	eax, 1
	jne	SHORT $LN21@ExecIFFMod

; 13   : 		IFFBackup();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IFFBackup@ICPClass@@QAEXXZ		; ICPClass::IFFBackup

; 14   : 	else

	jmp	$LN22@ExecIFFMod
$LN21@ExecIFFMod:

; 15   : 	{
; 16   : 		if(!g_bIFF)

	movzx	eax, BYTE PTR ?g_bIFF@@3_NA		; g_bIFF
	test	eax, eax
	jne	$LN19@ExecIFFMod

; 17   : 		{
; 18   : 			//Line1
; 19   : 			FillDEDMatrix(0,2,"IFF  ON");

	push	0
	push	OFFSET ??_C@_07CGBKHICO@IFF?5?5ON?$AA@
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 20   : 			FillDEDMatrix(0,12, "MAN",2);

	push	2
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	12					; 0000000cH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 21   : 			//Line3
; 22   : 			FillDEDMatrix(2,2,"M1 22");

	push	0
	push	OFFSET ??_C@_05LBHBMGJ@M1?522?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 23   : 			FillDEDMatrix(2,10,"MC",2);

	push	2
	push	OFFSET ??_C@_02KDKICELI@MC?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 24   : 			FillDEDMatrix(2,14,"(5)");

	push	0
	push	OFFSET ??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 25   : 			FillDEDMatrix(2,18,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	18					; 00000012H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 26   : 			FillDEDMatrix(2,24,"\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	24					; 00000018H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 27   : 			//Line4
; 28   : 			FillDEDMatrix(3,2,"M2 3412");

	push	0
	push	OFFSET ??_C@_07EBAEDAJB@M2?53412?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 29   : 			FillDEDMatrix(3,10,"M4");

	push	0
	push	OFFSET ??_C@_02MDNGMLIJ@M4?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 30   : 			FillDEDMatrix(3,13,"B(6)");

	push	0
	push	OFFSET ??_C@_04BKMIICND@B?$CI6?$CJ?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 31   : 			//Line5
; 32   : 			FillDEDMatrix(4,2,"M3 1234");

	push	0
	push	OFFSET ??_C@_07ONAGEEHB@M3?51234?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 33   : 			FillDEDMatrix(4,10,"OUT");

	push	0
	push	OFFSET ??_C@_03KJGMBMID@OUT?$AA@
	push	10					; 0000000aH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 34   : 			FillDEDMatrix(4,14,"(7)");

	push	0
	push	OFFSET ??_C@_03NOFPMLMM@?$CI7?$CJ?$AA@
	push	14					; 0000000eH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 35   : 			FillDEDMatrix(4,19,"MS (8)");

	push	0
	push	OFFSET ??_C@_06HCMMNHH@MS?5?$CI8?$CJ?$AA@
	push	19					; 00000013H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 36   : 			return;

	jmp	$LN22@ExecIFFMod
$LN19@ExecIFFMod:

; 37   : 		}
; 38   : 		//Line1
; 39   : 		if(playerAC && playerAC->HasPower(AircraftClass::IFFPower))

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN18@ExecIFFMod
	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	je	SHORT $LN18@ExecIFFMod

; 40   : 			FillDEDMatrix(0,2,"IFF  ON");

	push	0
	push	OFFSET ??_C@_07CGBKHICO@IFF?5?5ON?$AA@
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 41   : 		else

	jmp	SHORT $LN17@ExecIFFMod
$LN18@ExecIFFMod:

; 42   : 			FillDEDMatrix(0,2,"IFF  OFF");

	push	0
	push	OFFSET ??_C@_08HEMAKOIM@IFF?5?5OFF?$AA@
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN17@ExecIFFMod:

; 43   : 		FillDEDMatrix(0,12, "MAN",2);

	push	2
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	12					; 0000000cH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 44   : 		//Line3
; 45   : 		if(IsIFFSet(ICPClass::MODE_1))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN16@ExecIFFMod

; 46   : 			FillDEDMatrix(2,2,"M1",2);

	push	2
	push	OFFSET ??_C@_02LOKBDPMM@M1?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 47   : 		else

	jmp	SHORT $LN15@ExecIFFMod
$LN16@ExecIFFMod:

; 48   : 			FillDEDMatrix(2,2,"M1"); 

	push	0
	push	OFFSET ??_C@_02LOKBDPMM@M1?$AA@
	push	2
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN15@ExecIFFMod:

; 49   : 		sprintf(tempstr, "%d", Mode1Code);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1544]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 50   : 		FillDEDMatrix(2,5,tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	5
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 51   : 
; 52   : 		if(IsIFFSet(ICPClass::MODE_C))

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN14@ExecIFFMod

; 53   : 			FillDEDMatrix(2,10,"MC",2);

	push	2
	push	OFFSET ??_C@_02KDKICELI@MC?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 54   : 		else

	jmp	SHORT $LN13@ExecIFFMod
$LN14@ExecIFFMod:

; 55   : 			FillDEDMatrix(2,10,"MC");

	push	0
	push	OFFSET ??_C@_02KDKICELI@MC?$AA@
	push	10					; 0000000aH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN13@ExecIFFMod:

; 56   : 		FillDEDMatrix(2,14,"(5)");

	push	0
	push	OFFSET ??_C@_03NNNLBPKC@?$CI5?$CJ?$AA@
	push	14					; 0000000eH
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 57   : 
; 58   : 		ScratchPad(2,18,24);

	push	24					; 00000018H
	push	18					; 00000012H
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScratchPad@ICPClass@@QAEXHHH@Z		; ICPClass::ScratchPad

; 59   : 		PossibleInputs = 5;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+748], 5

; 60   : 
; 61   : 		//Line4
; 62   : 		if(IsIFFSet(ICPClass::MODE_2))

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN12@ExecIFFMod

; 63   : 			FillDEDMatrix(3,2,"M2", 2);

	push	2
	push	OFFSET ??_C@_02JFIMGMAP@M2?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 64   : 		else

	jmp	SHORT $LN11@ExecIFFMod
$LN12@ExecIFFMod:

; 65   : 			FillDEDMatrix(3,2,"M2");

	push	0
	push	OFFSET ??_C@_02JFIMGMAP@M2?$AA@
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN11@ExecIFFMod:

; 66   : 		sprintf(tempstr, "%d", Mode2Code);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1548]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1024				; 00000400H
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 67   : 		FillDEDMatrix(3,5, tempstr);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 68   : 
; 69   : 		if(IsIFFSet(ICPClass::MODE_4))

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN10@ExecIFFMod

; 70   : 			FillDEDMatrix(3,10,"M4", 2);

	push	2
	push	OFFSET ??_C@_02MDNGMLIJ@M4?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 71   : 		else

	jmp	SHORT $LN9@ExecIFFMod
$LN10@ExecIFFMod:

; 72   : 			FillDEDMatrix(3,10,"M4");

	push	0
	push	OFFSET ??_C@_02MDNGMLIJ@M4?$AA@
	push	10					; 0000000aH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN9@ExecIFFMod:

; 73   : 		if(IsIFFSet(ICPClass::MODE_4B))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN8@ExecIFFMod

; 74   : 			FillDEDMatrix(3,13,"B(6)");

	push	0
	push	OFFSET ??_C@_04BKMIICND@B?$CI6?$CJ?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 75   : 		else

	jmp	SHORT $LN7@ExecIFFMod
$LN8@ExecIFFMod:

; 76   : 			FillDEDMatrix(3,13,"A(6)");

	push	0
	push	OFFSET ??_C@_04FNGIPIAD@A?$CI6?$CJ?$AA@
	push	13					; 0000000dH
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN7@ExecIFFMod:

; 77   : 		//Line5
; 78   : 		if(IsIFFSet(ICPClass::MODE_3))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN6@ExecIFFMod

; 79   : 			FillDEDMatrix(4,2,"M3",2);

	push	2
	push	OFFSET ??_C@_02IMJHFNEO@M3?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 80   : 		else

	jmp	SHORT $LN5@ExecIFFMod
$LN6@ExecIFFMod:

; 81   : 			FillDEDMatrix(4,2,"M3");

	push	0
	push	OFFSET ??_C@_02IMJHFNEO@M3?$AA@
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN5@ExecIFFMod:

; 82   : 		sprintf(tempstr,"%d", Mode3Code);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1552]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1024				; 00000400H
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 83   : 		FillDEDMatrix(4,5, tempstr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	push	5
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 84   : 
; 85   : 		if(IsIFFSet(ICPClass::MODE_4OUT))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN4@ExecIFFMod

; 86   : 			FillDEDMatrix(4,10,"OUT");

	push	0
	push	OFFSET ??_C@_03KJGMBMID@OUT?$AA@
	push	10					; 0000000aH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
	jmp	SHORT $LN3@ExecIFFMod
$LN4@ExecIFFMod:

; 87   : 		else if(IsIFFSet(ICPClass::MODE_4LIT))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsIFFSet@ICPClass@@QAEHH@Z		; ICPClass::IsIFFSet
	test	eax, eax
	je	SHORT $LN2@ExecIFFMod

; 88   : 			FillDEDMatrix(4,10,"LIT");

	push	0
	push	OFFSET ??_C@_03KOOFOJHJ@LIT?$AA@
	push	10					; 0000000aH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 89   : 		else

	jmp	SHORT $LN3@ExecIFFMod
$LN2@ExecIFFMod:

; 90   : 			FillDEDMatrix(4,10,"AUD");

	push	0
	push	OFFSET ??_C@_03DHBHJOB@AUD?$AA@
	push	10					; 0000000aH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN3@ExecIFFMod:

; 91   : 		FillDEDMatrix(4,14,"(7)");

	push	0
	push	OFFSET ??_C@_03NOFPMLMM@?$CI7?$CJ?$AA@
	push	14					; 0000000eH
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix

; 92   : 		FillDEDMatrix(4,19,"MS (8)");

	push	0
	push	OFFSET ??_C@_06HCMMNHH@MS?5?$CI8?$CJ?$AA@
	push	19					; 00000013H
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillDEDMatrix@ICPClass@@QAEXHHPADH@Z	; ICPClass::FillDEDMatrix
$LN22@ExecIFFMod:

; 93   : 	}
; 94   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ExecIFFMode@ICPClass@@QAEXXZ ENDP			; ICPClass::ExecIFFMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
