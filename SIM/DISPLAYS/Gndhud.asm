; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DISPLAYS\Gndhud.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_PIPPER_SIZE DD	03d4ccccdr			; 0.05
_OUTER_RETICLE_SIZE DD 03e3851ecr		; 0.18
_INNER_RETICLE_SIZE DD 03dcccccdr		; 0.1
_TICK_LEN DD	03d23d70ar			; 0.04
_RET_MAX DD	0bf0ccccdr			; -0.55
_MAX_STEPS DD	041400000r			; 12
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?acos@@YAMM@Z					; acos
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DrawAirGroundGravity@HudClass@@AAEXXZ		; HudClass::DrawAirGroundGravity
PUBLIC	?DrawAirGroundRocket@HudClass@@AAEXXZ		; HudClass::DrawAirGroundRocket
PUBLIC	?DrawTargetingPod@HudClass@@AAEXXZ		; HudClass::DrawTargetingPod
PUBLIC	?DrawCCIP@HudClass@@AAEXXZ			; HudClass::DrawCCIP
PUBLIC	?DrawCCRP@HudClass@@AAEXXZ			; HudClass::DrawCCRP
PUBLIC	?DrawRCKT@HudClass@@AAEXXZ			; HudClass::DrawRCKT
PUBLIC	?DrawDTOSS@HudClass@@AAEXXZ			; HudClass::DrawDTOSS
PUBLIC	?DrawLADD@HudClass@@AAEXXZ			; HudClass::DrawLADD
PUBLIC	?DrawStrafe@HudClass@@AAEXXZ			; HudClass::DrawStrafe
PUBLIC	?DrawSteeringToRelease@HudClass@@AAEXXZ		; HudClass::DrawSteeringToRelease
PUBLIC	?DrawRPod@HudClass@@AAEXXZ			; HudClass::DrawRPod
PUBLIC	?RadToHudUnitsX@HudClass@@AAEMM@Z		; HudClass::RadToHudUnitsX
PUBLIC	?RadToHudUnitsY@HudClass@@AAEMM@Z		; HudClass::RadToHudUnitsY
PUBLIC	?DrawMANReticle@HudClass@@QAEXXZ		; HudClass::DrawMANReticle
PUBLIC	?DrawSteeringToReleaseLADD@HudClass@@QAEXXZ	; HudClass::DrawSteeringToReleaseLADD
PUBLIC	?MoveRetCenter@HudClass@@QAEXXZ			; HudClass::MoveRetCenter
PUBLIC	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
PUBLIC	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
PUBLIC	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z	; VirtualDisplay::viewportXtoPixel
PUBLIC	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z	; VirtualDisplay::viewportYtoPixel
PUBLIC	?CurHardpoint@SMSBaseClass@@QAEHXZ		; SMSBaseClass::CurHardpoint
PUBLIC	?GetAGBRippleCount@SMSClass@@QAEHXZ		; SMSClass::GetAGBRippleCount
PUBLIC	?GetAGBRippleInterval@SMSClass@@QAEHXZ		; SMSClass::GetAGBRippleInterval
PUBLIC	?GetAGBPair@SMSClass@@QAE_NXZ			; SMSClass::GetAGBPair
PUBLIC	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_03IBEFMGAI@LOW?$AA@			; `string'
PUBLIC	??_C@_0DK@IBHEKLO@?$CK?$CK?9?9?$CK?$CK?5Pip?5Az?5?$CFf?5Pip?5El?5?$CFf?5Gnd?5A@ ; `string'
PUBLIC	??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@		; `string'
PUBLIC	??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@		; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_06BAGLHBIK@F?$CF4?41f?$AA@		; `string'
PUBLIC	??_C@_07FNHAMJIA@F?$CF03?40f?$AA@		; `string'
PUBLIC	??_C@_09FJLEEAHK@?$CF02d?3?$CF02d?$AA@		; `string'
PUBLIC	??_C@_0M@CDJAKKME@?$CF02d?5?$CF04?41f?$AA@	; `string'
PUBLIC	??_C@_07CLHCCCLG@00?$CF1?40f?$AA@		; `string'
PUBLIC	??_C@_06BBFBALAM@0?$CF2?40f?$AA@		; `string'
PUBLIC	??_C@_05KIPMPJDD@?$CF3?40f?$AA@			; `string'
PUBLIC	??_C@_0M@HOCAENJF@?$CF04?41f?5?$CF02d?$AA@	; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@392c987a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c8efa34
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3ccccccd
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d99999a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e19999a
PUBLIC	__real@3ea8f5c3
PUBLIC	__real@3eb2b8c1
PUBLIC	__real@3ee66666
PUBLIC	__real@3f000000
PUBLIC	__real@3f060a91
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@40060a91
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40278d35
PUBLIC	__real@40400000
PUBLIC	__real@406a927d
PUBLIC	__real@40800000
PUBLIC	__real@40860a91
PUBLIC	__real@4096cbe3
PUBLIC	__real@40a78d35
PUBLIC	__real@40b84e87
PUBLIC	__real@41200000
PUBLIC	__real@41c80000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@430c0000
PUBLIC	__real@43870000
PUBLIC	__real@43877333
PUBLIC	__real@43b40000
PUBLIC	__real@45bde1b0
PUBLIC	__real@45fa0000
PUBLIC	__real@461c4000
PUBLIC	__real@466a6000
PUBLIC	__real@46908800
PUBLIC	__real@470e9400
PUBLIC	__real@8000000000000000
PUBLIC	__real@bca3d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bd56774e
PUBLIC	__real@bdf5c28f
PUBLIC	__real@beb33333
PUBLIC	__real@beb851ec
PUBLIC	__real@becccccd
PUBLIC	__real@bedc28f6
PUBLIC	__real@bf000000
PUBLIC	__real@bf333333
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0000000
PUBLIC	__real@c0400000
PUBLIC	__real@c1400000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fflush:PROC
EXTRN	_fprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	_acos:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?DrawTDBox@HudClass@@AAEXXZ:PROC		; HudClass::DrawTDBox
EXTRN	?DrawDTOSSBox@HudClass@@AAEXXZ:PROC		; HudClass::DrawDTOSSBox
EXTRN	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z:PROC ; HudClass::DrawDesignateMarker
EXTRN	?TimeToSteerpoint@HudClass@@AAEXXZ:PROC		; HudClass::TimeToSteerpoint
EXTRN	?RangeToSteerpoint@HudClass@@AAEXXZ:PROC	; HudClass::RangeToSteerpoint
EXTRN	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z:PROC	; HudClass::DrawDLZSymbol
EXTRN	?DrawWindowString@HudClass@@AAEXHPADH@Z:PROC	; HudClass::DrawWindowString
EXTRN	?MRToHudUnits@HudClass@@AAEMM@Z:PROC		; HudClass::MRToHudUnits
EXTRN	?RadToHudUnits@HudClass@@AAEMM@Z:PROC		; HudClass::RadToHudUnits
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z:PROC ; FindLaserPod
EXTRN	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z:PROC ; SIMLIB_IO_CLASS::GetAxisValue
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?hudWinY@@3PAMA:BYTE				; hudWinY
EXTRN	?hudWinHeight@@3PAMA:BYTE			; hudWinHeight
EXTRN	?flash@HudClass@@0HA:DWORD			; HudClass::flash
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?g_fReconCameraOffset@@3MA:DWORD		; g_fReconCameraOffset
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_RET_MIN DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ?fp@?1??DrawRCKT@HudClass@@AAEXXZ@4PAU_iobuf@@A
_BSS	SEGMENT
?fp@?1??DrawRCKT@HudClass@@AAEXXZ@4PAU_iobuf@@A DD 01H DUP (?) ; `HudClass::DrawRCKT'::`2'::fp
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bedc28f6
CONST	SEGMENT
__real@bedc28f6 DD 0bedc28f6r			; -0.43
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@beb851ec
CONST	SEGMENT
__real@beb851ec DD 0beb851ecr			; -0.36
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@bdf5c28f
CONST	SEGMENT
__real@bdf5c28f DD 0bdf5c28fr			; -0.12
CONST	ENDS
;	COMDAT __real@bd56774e
CONST	SEGMENT
__real@bd56774e DD 0bd56774er			; -0.0523599
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bca3d70a
CONST	SEGMENT
__real@bca3d70a DD 0bca3d70ar			; -0.02
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@470e9400
CONST	SEGMENT
__real@470e9400 DD 0470e9400r			; 36500
CONST	ENDS
;	COMDAT __real@46908800
CONST	SEGMENT
__real@46908800 DD 046908800r			; 18500
CONST	ENDS
;	COMDAT __real@466a6000
CONST	SEGMENT
__real@466a6000 DD 0466a6000r			; 15000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45fa0000
CONST	SEGMENT
__real@45fa0000 DD 045fa0000r			; 8000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43877333
CONST	SEGMENT
__real@43877333 DD 043877333r			; 270.9
CONST	ENDS
;	COMDAT __real@43870000
CONST	SEGMENT
__real@43870000 DD 043870000r			; 270
CONST	ENDS
;	COMDAT __real@430c0000
CONST	SEGMENT
__real@430c0000 DD 0430c0000r			; 140
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40b84e87
CONST	SEGMENT
__real@40b84e87 DD 040b84e87r			; 5.75959
CONST	ENDS
;	COMDAT __real@40a78d35
CONST	SEGMENT
__real@40a78d35 DD 040a78d35r			; 5.23599
CONST	ENDS
;	COMDAT __real@4096cbe3
CONST	SEGMENT
__real@4096cbe3 DD 04096cbe3r			; 4.71239
CONST	ENDS
;	COMDAT __real@40860a91
CONST	SEGMENT
__real@40860a91 DD 040860a91r			; 4.18879
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406a927d
CONST	SEGMENT
__real@406a927d DD 0406a927dr			; 3.66519
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40278d35
CONST	SEGMENT
__real@40278d35 DD 040278d35r			; 2.61799
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40060a91
CONST	SEGMENT
__real@40060a91 DD 040060a91r			; 2.09439
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f060a91
CONST	SEGMENT
__real@3f060a91 DD 03f060a91r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3eb2b8c1
CONST	SEGMENT
__real@3eb2b8c1 DD 03eb2b8c1r			; 0.349066
CONST	ENDS
;	COMDAT __real@3ea8f5c3
CONST	SEGMENT
__real@3ea8f5c3 DD 03ea8f5c3r			; 0.33
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d99999a
CONST	SEGMENT
__real@3d99999a DD 03d99999ar			; 0.075
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HOCAENJF@?$CF04?41f?5?$CF02d?$AA@
CONST	SEGMENT
??_C@_0M@HOCAENJF@?$CF04?41f?5?$CF02d?$AA@ DB '%04.1f %02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KIPMPJDD@?$CF3?40f?$AA@
CONST	SEGMENT
??_C@_05KIPMPJDD@?$CF3?40f?$AA@ DB '%3.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBFBALAM@0?$CF2?40f?$AA@
CONST	SEGMENT
??_C@_06BBFBALAM@0?$CF2?40f?$AA@ DB '0%2.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLHCCCLG@00?$CF1?40f?$AA@
CONST	SEGMENT
??_C@_07CLHCCCLG@00?$CF1?40f?$AA@ DB '00%1.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ?angles1@?O@??DrawMANReticle@HudClass@@QAEXXZ@4PAMA
_DATA	SEGMENT
?angles1@?O@??DrawMANReticle@HudClass@@QAEXXZ@4PAMA DD 0bf060a91r ; -0.523599 ; `HudClass::DrawMANReticle'::`14'::angles1
	DD	0bedf66f1r			; -0.436332
	DD	0beb2b8c1r			; -0.349066
	DD	0be860a91r			; -0.261799
	DD	0be32b8c1r			; -0.174533
	DD	0bdb2b8c1r			; -0.0872665
	DD	03c8efa34r			; 0.0174533
	DD	03db2b8c1r			; 0.0872665
	DD	03e32b8c1r			; 0.174533
	DD	03e860a91r			; 0.261799
	DD	03eb2b8c1r			; 0.349066
	DD	03edf66f1r			; 0.436332
	DD	03f060a91r			; 0.523599
_DATA	ENDS
;	COMDAT ?angles@?O@??DrawMANReticle@HudClass@@QAEXXZ@4PAMA
_DATA	SEGMENT
?angles@?O@??DrawMANReticle@HudClass@@QAEXXZ@4PAMA DD 03c8efa34r ; 0.0174533 ; `HudClass::DrawMANReticle'::`14'::angles
	DD	03db2b8c1r			; 0.0872665
	DD	03e32b8c1r			; 0.174533
	DD	03e860a91r			; 0.261799
	DD	03eb2b8c1r			; 0.349066
	DD	03edf66f1r			; 0.436332
	DD	03f060a91r			; 0.523599
	DD	03f1c61a9r			; 0.610865
	DD	03f32b8c1r			; 0.698132
	DD	03f490fd9r			; 0.785398
	DD	03f5f66f1r			; 0.872665
	DD	03f75be09r			; 0.959931
	DD	03f860a91r			; 1.0472
	DD	03f91361dr			; 1.13446
	DD	03f9c61a9r			; 1.22173
	DD	03fa78d35r			; 1.309
	DD	03fb2b8c1r			; 1.39626
	DD	03fbde44dr			; 1.48353
	DD	03fc90fd9r			; 1.5708
_DATA	ENDS
;	COMDAT ??_C@_0M@CDJAKKME@?$CF02d?5?$CF04?41f?$AA@
CONST	SEGMENT
??_C@_0M@CDJAKKME@?$CF02d?5?$CF04?41f?$AA@ DB '%02d %04.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FJLEEAHK@?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_09FJLEEAHK@?$CF02d?3?$CF02d?$AA@ DB '%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FNHAMJIA@F?$CF03?40f?$AA@
CONST	SEGMENT
??_C@_07FNHAMJIA@F?$CF03?40f?$AA@ DB 'F%03.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAGLHBIK@F?$CF4?41f?$AA@
CONST	SEGMENT
??_C@_06BAGLHBIK@F?$CF4?41f?$AA@ DB 'F%4.1f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@
CONST	SEGMENT
??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@ DB 'F %03.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
CONST	SEGMENT
??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@ DB 'F %4.1f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IBHEKLO@?$CK?$CK?9?9?$CK?$CK?5Pip?5Az?5?$CFf?5Pip?5El?5?$CFf?5Gnd?5A@
CONST	SEGMENT
??_C@_0DK@IBHEKLO@?$CK?$CK?9?9?$CK?$CK?5Pip?5Az?5?$CFf?5Pip?5El?5?$CFf?5Gnd?5A@ DB '*'
	DB	'*--** Pip Az %f Pip El %f Gnd Az %f Gnd El %f Range %f ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBEFMGAI@LOW?$AA@
CONST	SEGMENT
??_C@_03IBEFMGAI@LOW?$AA@ DB 'LOW', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_RET_MIN$initializer$ DD FLAT:??__ERET_MIN@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
;	COMDAT ??__ERET_MIN@@YAXXZ
text$yc	SEGMENT
??__ERET_MIN@@YAXXZ PROC				; `dynamic initializer for 'RET_MIN'', COMDAT

; 24   : static const float RET_MIN = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	push	ebp
	mov	ebp, esp
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	movss	DWORD PTR _RET_MIN, xmm0
	pop	ebp
	ret	0
??__ERET_MIN@@YAXXZ ENDP				; `dynamic initializer for 'RET_MIN''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\harmpod.h
;	COMDAT ?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ PROC	; HarmTargetingPod::GetSubMode, COMDAT
; _this$ = ecx

; 83   : 	Submode			GetSubMode ( void ) { return submode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ENDP	; HarmTargetingPod::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBPair@SMSClass@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBPair@SMSClass@@QAE_NXZ PROC			; SMSClass::GetAGBPair, COMDAT
; _this$ = ecx

; 314  : 	bool GetAGBPair(void)          { return agbProfile[curProfile].releasePair;     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+232]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBPair@SMSClass@@QAE_NXZ ENDP			; SMSClass::GetAGBPair
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBRippleInterval@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBRippleInterval@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBRippleInterval, COMDAT
; _this$ = ecx

; 307  : 	int GetAGBRippleInterval(void) { return agbProfile[curProfile].rippleInterval;  }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+204]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBRippleInterval@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBRippleInterval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBRippleCount@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBRippleCount@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBRippleCount, COMDAT
; _this$ = ecx

; 306  : 	int GetAGBRippleCount(void)    { return agbProfile[curProfile].rippleCount;     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+200]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBRippleCount@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBRippleCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?CurHardpoint@SMSBaseClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurHardpoint@SMSBaseClass@@QAEHXZ PROC			; SMSBaseClass::CurHardpoint, COMDAT
; _this$ = ecx

; 88   : 	int CurHardpoint (void) {return curHardpoint;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurHardpoint@SMSBaseClass@@QAEHXZ ENDP			; SMSBaseClass::CurHardpoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?viewportYtoPixel@VirtualDisplay@@QAEMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?viewportYtoPixel@VirtualDisplay@@QAEMM@Z PROC		; VirtualDisplay::viewportYtoPixel, COMDAT
; _this$ = ecx

; 169  :     float viewportYtoPixel( float y ) { return (y * scaleY) + shiftY; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ENDP		; VirtualDisplay::viewportYtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?viewportXtoPixel@VirtualDisplay@@QAEMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?viewportXtoPixel@VirtualDisplay@@QAEMM@Z PROC		; VirtualDisplay::viewportXtoPixel, COMDAT
; _this$ = ecx

; 168  :     float viewportXtoPixel( float x ) { return (x * scaleX) + shiftX; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+40]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ENDP		; VirtualDisplay::viewportXtoPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetSubMode, COMDAT
; _this$ = ecx

; 281  : 	FCCSubMode GetSubMode (void) {return (subMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ PROC ; VuBin<SimWeaponClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ENDP ; VuBin<SimWeaponClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
tv91 = -16						; size = 4
tv90 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
?MoveRetCenter@HudClass@@QAEXXZ PROC			; HudClass::MoveRetCenter
; _this$ = ecx

; 1079 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1080 : 	if (IO.AnalogIsUsed(AXIS_RET_DEPR) == true)	// Retro 3Jan2004, doing this in another place (DrawMANReticle()) an analogue

	push	19					; 00000013H
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN1@MoveRetCen

; 1081 : 		return;

	jmp	$LN2@MoveRetCen
$LN1@MoveRetCen:

; 1082 : 
; 1083 : 	RET_CENTER = RET_CENTER + (RetPos * 0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+5124]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+5120]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+5120], xmm0

; 1084 : 	RetPos = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+5124], 0

; 1085 : 	RET_CENTER = max(min(RET_CENTER, RET_MIN), RET_MAX);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RET_MIN
	comiss	xmm0, DWORD PTR [edx+5120]
	jbe	SHORT $LN4@MoveRetCen
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+5120]
	movss	DWORD PTR tv83[ebp], xmm0
	jmp	SHORT $LN5@MoveRetCen
$LN4@MoveRetCen:
	movss	xmm0, DWORD PTR _RET_MIN
	movss	DWORD PTR tv83[ebp], xmm0
$LN5@MoveRetCen:
	movss	xmm0, DWORD PTR tv83[ebp]
	comiss	xmm0, DWORD PTR _RET_MAX
	jbe	SHORT $LN8@MoveRetCen
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _RET_MIN
	comiss	xmm0, DWORD PTR [ecx+5120]
	jbe	SHORT $LN6@MoveRetCen
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+5120]
	movss	DWORD PTR tv90[ebp], xmm0
	jmp	SHORT $LN7@MoveRetCen
$LN6@MoveRetCen:
	movss	xmm0, DWORD PTR _RET_MIN
	movss	DWORD PTR tv90[ebp], xmm0
$LN7@MoveRetCen:
	movss	xmm0, DWORD PTR tv90[ebp]
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN9@MoveRetCen
$LN8@MoveRetCen:
	movss	xmm0, DWORD PTR _RET_MAX
	movss	DWORD PTR tv91[ebp], xmm0
$LN9@MoveRetCen:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR [eax+5120], xmm0
$LN2@MoveRetCen:

; 1086 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?MoveRetCenter@HudClass@@QAEXXZ ENDP			; HudClass::MoveRetCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
tv859 = -208						; size = 4
tv585 = -204						; size = 4
tv903 = -200						; size = 4
tv857 = -196						; size = 4
tv905 = -192						; size = 4
tv774 = -188						; size = 4
tv809 = -184						; size = 4
tv600 = -180						; size = 4
tv802 = -176						; size = 4
tv781 = -172						; size = 4
tv899 = -168						; size = 4
tv606 = -164						; size = 4
tv901 = -160						; size = 4
tv861 = -156						; size = 4
tv795 = -152						; size = 4
tv863 = -148						; size = 4
tv788 = -144						; size = 4
tv590 = -140						; size = 4
tv897 = -136						; size = 4
tv595 = -132						; size = 4
tv163 = -128						; size = 4
tv221 = -124						; size = 4
_min$ = -120						; size = 4
tv162 = -116						; size = 4
tv159 = -112						; size = 4
tv212 = -108						; size = 4
tv465 = -104						; size = 4
tv222 = -100						; size = 4
tv458 = -96						; size = 4
tv218 = -92						; size = 4
tv448 = -88						; size = 4
tv202 = -84						; size = 4
tv447 = -80						; size = 4
tv440 = -76						; size = 4
tv466 = -72						; size = 4
_TofExtra$ = -68					; size = 4
_fpmY$ = -64						; size = 4
_sec$ = -60						; size = 4
_slantRange$ = -56					; size = 4
_solutionCueY$ = -52					; size = 4
_puacY$ = -48						; size = 4
_steeringLineX$ = -44					; size = 4
_this$ = -40						; size = 4
_tmpStr$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
?DrawSteeringToReleaseLADD@HudClass@@QAEXXZ PROC	; HudClass::DrawSteeringToReleaseLADD
; _this$ = ecx

; 974  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 975  : char tmpStr[32];
; 976  : float steeringLineX, solutionCueY;
; 977  : float puacY, fpmY;
; 978  : int min, sec;
; 979  : float slantRange;
; 980  : 	//me123 tofextra is the extra tof for the last bomb(this is the bomb the puac symbolice) becourse it has to wait for the preciding bombs to drop
; 981  :     //float  TofExtra = ( (FCC->Sms->RippleInterval())* ((FCC->Sms->RippleCount()+1))/
; 982  :     float  TofExtra = ( (FCC->Sms->GetAGBRippleInterval())* ((FCC->Sms->GetAGBRippleCount()+1))/
; 983  : 
; 984  : 					  ( (float) sqrt(ownship->XDelta()*ownship->XDelta() + ownship->YDelta()*ownship->YDelta()) ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+408]
	call	?GetAGBRippleInterval@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleInterval
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	add	eax, 1
	imul	esi, eax
	cvtsi2ss xmm0, esi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv857[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv585[ebp]
	movss	xmm0, DWORD PTR tv585[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv859[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv590[ebp]
	movss	xmm0, DWORD PTR tv859[ebp]
	mulss	xmm0, DWORD PTR tv590[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv861[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv595[ebp]
	movss	xmm0, DWORD PTR tv595[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv863[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv600[ebp]
	movss	xmm0, DWORD PTR tv863[ebp]
	mulss	xmm0, DWORD PTR tv600[ebp]
	movss	xmm1, DWORD PTR tv861[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv606[ebp]
	movss	xmm0, DWORD PTR tv857[ebp]
	divss	xmm0, DWORD PTR tv606[ebp]
	movss	DWORD PTR _TofExtra$[ebp], xmm0

; 985  : 	//if (FCC->Sms->Pair() == TRUE) // MLR 4/3/2004 - 
; 986  : 	if (FCC->Sms->GetAGBPair() == TRUE)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBPair@SMSClass@@QAE_NXZ		; SMSClass::GetAGBPair
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN12@DrawSteeri

; 987  : 	{TofExtra *= 0.5f;}

	movss	xmm0, DWORD PTR _TofExtra$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _TofExtra$[ebp], xmm0
$LN12@DrawSteeri:

; 988  : 
; 989  :    // Steering Line
; 990  :    if (FCC->inRange)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+216], 0
	je	$LN11@DrawSteeri

; 991  :    {
; 992  :       steeringLineX = FCC->airGroundBearing / (20.0F * DTR);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+336]
	divss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 993  :       steeringLineX += betaHudUnits;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR [eax+4860]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 994  :       steeringLineX = min ( max (steeringLineX , -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN15@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv159[ebp], xmm0
	jmp	SHORT $LN16@DrawSteeri
$LN15@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv159[ebp], xmm0
$LN16@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv159[ebp]
	jbe	SHORT $LN19@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN17@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv162[ebp], xmm0
	jmp	SHORT $LN18@DrawSteeri
$LN17@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv162[ebp], xmm0
$LN18@DrawSteeri:
	movss	xmm0, DWORD PTR tv162[ebp]
	movss	DWORD PTR tv163[ebp], xmm0
	jmp	SHORT $LN20@DrawSteeri
$LN19@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv163[ebp], xmm0
$LN20@DrawSteeri:
	movss	xmm0, DWORD PTR tv163[ebp]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 995  :       display->Line (steeringLineX, 1.0F, steeringLineX, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 996  : 
; 997  :       // Flight path marker position
; 998  :       fpmY = (hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F -
; 999  :          alphaHudUnits);

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+4856]
	movss	DWORD PTR _fpmY$[ebp], xmm0

; 1000 : 
; 1001 :       // Solution Cue
; 1002 :       if (FCC->laddAnticipationCue != FireControlComputer::NoLADDCue)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+456], 0
	je	$LN10@DrawSteeri

; 1003 :       {
; 1004 :          if (FCC->laddAnticipationCue == FireControlComputer::LADDPullUp ||
; 1005 :              FCC->laddAnticipationCue == FireControlComputer::LADDAwaitingRelease)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+456], 3
	je	SHORT $LN8@DrawSteeri
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+456], 4
	jne	SHORT $LN9@DrawSteeri
$LN8@DrawSteeri:

; 1006 :             solutionCueY = min (FCC->airGroundDelayTime / 60.0F, 1.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+328]
	divss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN21@DrawSteeri
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+328]
	divss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR tv202[ebp], xmm0
	jmp	SHORT $LN22@DrawSteeri
$LN21@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv202[ebp], xmm0
$LN22@DrawSteeri:
	movss	xmm0, DWORD PTR tv202[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0

; 1007 :          else

	jmp	SHORT $LN7@DrawSteeri
$LN9@DrawSteeri:

; 1008 :             solutionCueY = min (FCC->airGroundDelayTime / 10.0F, 1.0F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+328]
	divss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN23@DrawSteeri
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+328]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv212[ebp], xmm0
	jmp	SHORT $LN24@DrawSteeri
$LN23@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv212[ebp], xmm0
$LN24@DrawSteeri:
	movss	xmm0, DWORD PTR tv212[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0
$LN7@DrawSteeri:

; 1009 : 		  
; 1010 : 		 solutionCueY = fpmY + (1.0F - fpmY) * solutionCueY;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fpmY$[ebp]
	mulss	xmm0, DWORD PTR _solutionCueY$[ebp]
	addss	xmm0, DWORD PTR _fpmY$[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0

; 1011 :          solutionCueY = min ( max (solutionCueY , -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN25@DrawSteeri
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	jmp	SHORT $LN26@DrawSteeri
$LN25@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv218[ebp], xmm0
$LN26@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv218[ebp]
	jbe	SHORT $LN29@DrawSteeri
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN27@DrawSteeri
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	jmp	SHORT $LN28@DrawSteeri
$LN27@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv221[ebp], xmm0
$LN28@DrawSteeri:
	movss	xmm0, DWORD PTR tv221[ebp]
	movss	DWORD PTR tv222[ebp], xmm0
	jmp	SHORT $LN30@DrawSteeri
$LN29@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv222[ebp], xmm0
$LN30@DrawSteeri:
	movss	xmm0, DWORD PTR tv222[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0

; 1012 :          display->Line (steeringLineX - 0.05F, solutionCueY,
; 1013 :             steeringLineX + 0.05F, solutionCueY);

	push	ecx
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN10@DrawSteeri:

; 1014 :       }
; 1015 : 
; 1016 : 
; 1017 :       // PUAC goes here
; 1018 : 	  // me123 status ok. lots of changes in this PUAC rutine.
; 1019 : 	if (FCC->groundImpactTime < 25)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [ecx+360]
	jbe	$LN4@DrawSteeri

; 1020 : 	{
; 1021 :       if ((FCC->groundImpactTime - TofExtra) > (FCC->Sms->armingdelay /100))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+360]
	subss	xmm0, DWORD PTR _TofExtra$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+408]
	movss	xmm1, DWORD PTR [eax+172]
	divss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm0, xmm1
	jbe	$LN5@DrawSteeri

; 1022 :       {
; 1023 :          puacY = (FCC->groundImpactTime - TofExtra)/ (FCC->Sms->armingdelay /100);// 1 at minimum release alt

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+360]
	subss	xmm0, DWORD PTR _TofExtra$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+408]
	movss	xmm1, DWORD PTR [edx+172]
	divss	xmm1, DWORD PTR __real@42c80000
	divss	xmm0, xmm1
	movss	DWORD PTR _puacY$[ebp], xmm0

; 1024 : 
; 1025 :          // Position between the FPM and the bottom of the HUD
; 1026 :          puacY = fpmY - puacY +1;//this is fpm pos when at minimum release alt.

	movss	xmm0, DWORD PTR _fpmY$[ebp]
	subss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _puacY$[ebp], xmm0

; 1027 :          display->Line (steeringLineX - 0.075F, puacY, steeringLineX + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1028 :          display->Line (steeringLineX - 0.075F, puacY, steeringLineX - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1029 :          display->Line (steeringLineX + 0.075F, puacY, steeringLineX + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1030 : 
; 1031 : 	  }	
; 1032 : 	   else 

	jmp	$LN4@DrawSteeri
$LN5@DrawSteeri:

; 1033 :       {	 // Now we are below arming time so we show the "low" and change the PUAC function
; 1034 : 		 // so it hit's the fmp when the ground is reached (when we crash)
; 1035 :          
; 1036 : 		// now we use the PUAC to "count down" to ground impact
; 1037 :          puacY =  FCC->groundImpactTime/3 ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+360]
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _puacY$[ebp], xmm0

; 1038 : 
; 1039 :           puacY = fpmY - puacY;

	movss	xmm0, DWORD PTR _fpmY$[ebp]
	subss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR _puacY$[ebp], xmm0

; 1040 :          display->Line (steeringLineX - 0.075F, puacY, steeringLineX + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1041 :          display->Line (steeringLineX - 0.075F, puacY, steeringLineX - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1042 :          display->Line (steeringLineX + 0.075F, puacY, steeringLineX + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1043 : 
; 1044 : 		 display->TextLeft (betaHudUnits + 0.1F, fpmY, "LOW");

	push	0
	push	OFFSET ??_C@_03IBEFMGAI@LOW?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _fpmY$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4860]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN4@DrawSteeri:

; 1045 :       }
; 1046 : 	} 
; 1047 :       // Slant range;
; 1048 : 	  slantRange = (float)sqrt(
; 1049 : 		  (FCC->groundDesignateX - ownship->XPos()) * (FCC->groundDesignateX - ownship->XPos()) +
; 1050 : 		  (FCC->groundDesignateY - ownship->YPos()) * (FCC->groundDesignateY - ownship->YPos()) +
; 1051 : 		  (FCC->groundDesignateZ - ownship->ZPos()) * (FCC->groundDesignateZ - ownship->ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv774[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv774[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv897[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv781[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv781[ebp]
	movss	xmm1, DWORD PTR tv897[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv899[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv788[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv788[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv901[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv795[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv795[ebp]
	movss	xmm1, DWORD PTR tv901[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv899[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv903[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv802[ebp]
	movss	xmm0, DWORD PTR [esi+384]
	subss	xmm0, DWORD PTR tv802[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv905[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv809[ebp]
	movss	xmm0, DWORD PTR [esi+384]
	subss	xmm0, DWORD PTR tv809[ebp]
	movss	xmm1, DWORD PTR tv905[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv903[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _slantRange$[ebp]

; 1052 :       if (slantRange > 1.0F * NM_TO_FT)

	movss	xmm0, DWORD PTR _slantRange$[ebp]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	$LN3@DrawSteeri

; 1053 :          sprintf (tmpStr, "F %4.1f", max ( min (100.0F, slantRange * FT_TO_NM), 0.0F));

	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN31@DrawSteeri
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv440[ebp], xmm0
	jmp	SHORT $LN32@DrawSteeri
$LN31@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv440[ebp], xmm0
$LN32@DrawSteeri:
	movss	xmm0, DWORD PTR tv440[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN35@DrawSteeri
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN33@DrawSteeri
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv447[ebp], xmm0
	jmp	SHORT $LN34@DrawSteeri
$LN33@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv447[ebp], xmm0
$LN34@DrawSteeri:
	movss	xmm0, DWORD PTR tv447[ebp]
	movss	DWORD PTR tv448[ebp], xmm0
	jmp	SHORT $LN36@DrawSteeri
$LN35@DrawSteeri:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv448[ebp], xmm0
$LN36@DrawSteeri:
	cvtss2sd xmm0, DWORD PTR tv448[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1054 :       else

	jmp	$LN2@DrawSteeri
$LN3@DrawSteeri:

; 1055 :          sprintf (tmpStr, "F %03.0f", max ( min (10000.0F, slantRange * 0.01F), 0.0F));

	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN37@DrawSteeri
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv458[ebp], xmm0
	jmp	SHORT $LN38@DrawSteeri
$LN37@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv458[ebp], xmm0
$LN38@DrawSteeri:
	movss	xmm0, DWORD PTR tv458[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN41@DrawSteeri
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN39@DrawSteeri
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv465[ebp], xmm0
	jmp	SHORT $LN40@DrawSteeri
$LN39@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv465[ebp], xmm0
$LN40@DrawSteeri:
	movss	xmm0, DWORD PTR tv465[ebp]
	movss	DWORD PTR tv466[ebp], xmm0
	jmp	SHORT $LN42@DrawSteeri
$LN41@DrawSteeri:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv466[ebp], xmm0
$LN42@DrawSteeri:
	cvtss2sd xmm0, DWORD PTR tv466[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN2@DrawSteeri:

; 1056 :       ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 1057 :       DrawWindowString (10, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 1058 : 
; 1059 :       // Text Data
; 1060 :       min = (int)(FCC->airGroundDelayTime / 60.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+328]
	divss	xmm0, DWORD PTR __real@42700000
	cvttss2si eax, xmm0
	mov	DWORD PTR _min$[ebp], eax

; 1061 :       sec = (int)(FCC->airGroundDelayTime - min * 60.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cvtsi2ss xmm0, DWORD PTR _min$[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR [edx+328]
	subss	xmm1, xmm0
	cvttss2si eax, xmm1
	mov	DWORD PTR _sec$[ebp], eax

; 1062 : 
; 1063 :       // Time to pull up
; 1064 :       sprintf (tmpStr, "%02d:%02d", min, sec);

	mov	ecx, DWORD PTR _sec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _min$[ebp]
	push	edx
	push	OFFSET ??_C@_09FJLEEAHK@?$CF02d?3?$CF02d?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1065 :       ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 1066 :       DrawWindowString (13, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 1067 : 
; 1068 :       // Range and bearing to tgt
; 1069 :       sec = (int)(FCC->airGroundBearing * RTD * 0.1F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+336]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvttss2si ecx, xmm0
	mov	DWORD PTR _sec$[ebp], ecx

; 1070 :       if (sec < 0)

	cmp	DWORD PTR _sec$[ebp], 0
	jge	SHORT $LN1@DrawSteeri

; 1071 : 		  sec = -sec;

	mov	edx, DWORD PTR _sec$[ebp]
	neg	edx
	mov	DWORD PTR _sec$[ebp], edx
$LN1@DrawSteeri:

; 1072 :          //sec += 36;
; 1073 :       sprintf (tmpStr, "%04.1f %02d", FCC->airGroundRange * FT_TO_NM, sec);

	mov	eax, DWORD PTR _sec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@HOCAENJF@?$CF04?41f?5?$CF02d?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 1074 :       ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 1075 :       DrawWindowString (14, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN11@DrawSteeri:

; 1076 :    }
; 1077 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSteeringToReleaseLADD@HudClass@@QAEXXZ ENDP	; HudClass::DrawSteeringToReleaseLADD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_axisVal$1 = -48					; size = 4
_Diff$ = -44						; size = 4
_i$2 = -40						; size = 4
_j$3 = -36						; size = 4
_trig$4 = -32						; size = 8
_CurPos$ = -24						; size = 4
_this$ = -20						; size = 4
_tempstr$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
?DrawMANReticle@HudClass@@QAEXXZ PROC			; HudClass::DrawMANReticle
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	//Draw our heading at the bottom of the HUD
; 888  : 	headingPos = High;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4964], 0

; 889  : 
; 890  : 	// Retro 3Jan2004 (moved up a bit)
; 891  : 	//How much increase per step?
; 892  : 	float Diff = 140 / MAX_STEPS;

	movss	xmm0, DWORD PTR __real@430c0000
	divss	xmm0, DWORD PTR _MAX_STEPS
	movss	DWORD PTR _Diff$[ebp], xmm0

; 893  : 	float CurPos;
; 894  : 
; 895  : 	if (IO.AnalogIsUsed(AXIS_RET_DEPR))		// Retro 3Jan2004

	push	19					; 00000013H
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@DrawMANRet

; 896  : 	{
; 897  : 		float axisVal = (float)IO.GetAxisValue(AXIS_RET_DEPR)/15000.F;

	push	19					; 00000013H
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::GetAxisValue
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@466a6000
	movss	DWORD PTR _axisVal$1[ebp], xmm0

; 898  : 		CurPos = axisVal * (-12.F) * Diff;

	movss	xmm0, DWORD PTR _axisVal$1[ebp]
	mulss	xmm0, DWORD PTR __real@c1400000
	mulss	xmm0, DWORD PTR _Diff$[ebp]
	movss	DWORD PTR _CurPos$[ebp], xmm0

; 899  : 		RET_CENTER = RET_MIN + axisVal * (RET_MAX-RET_MIN);

	movss	xmm0, DWORD PTR _RET_MAX
	subss	xmm0, DWORD PTR _RET_MIN
	mulss	xmm0, DWORD PTR _axisVal$1[ebp]
	addss	xmm0, DWORD PTR _RET_MIN
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+5120], xmm0

; 900  : 	}
; 901  : 	else // another part of that 'else' to this is in MoveRetCenter()

	jmp	SHORT $LN14@DrawMANRet
$LN15@DrawMANRet:

; 902  : 	{
; 903  : 		CurPos = ReticlePosition * Diff;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+5128]
	mulss	xmm0, DWORD PTR _Diff$[ebp]
	movss	DWORD PTR _CurPos$[ebp], xmm0
$LN14@DrawMANRet:

; 904  : 	}	// Retro 3Jan2004
; 905  : 
; 906  : 
; 907  : 	if(WhichMode == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+5016], 1
	jne	$LN13@DrawMANRet

; 908  : 	{
; 909  : 		//Normal mode
; 910  : 		//Draw the outer circle 
; 911  : 
; 912  : 		display->Circle(0.0F, RET_CENTER, 2.0F * OUTER_RETICLE_SIZE);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 913  : 		//Draw the inner circle
; 914  : 		display->Arc(0.0F, RET_CENTER, 2.0F * INNER_RETICLE_SIZE, 330*DTR, 30*DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f060a91
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40b84e87
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 915  : 		display->Arc(0.0F, RET_CENTER, 2.0F * INNER_RETICLE_SIZE, 60*DTR, 120*DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40060a91
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 916  : 		display->Arc(0.0F, RET_CENTER, 2.0F * INNER_RETICLE_SIZE, 150*DTR, 210*DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@406a927d
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40278d35
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 917  : 		display->Arc(0.0F, RET_CENTER, 2.0F * INNER_RETICLE_SIZE, 240*DTR, 300*DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40a78d35
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@40860a91
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 918  : 		//Draw the dot
; 919  : 		display->Point(0.0F, RET_CENTER);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	jmp	$LN11@DrawMANRet
$LN13@DrawMANRet:

; 920  : 	}
; 921  : 	else if(WhichMode == 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+5016], 2
	jne	$LN11@DrawMANRet

; 922  : 	{
; 923  : 		static float angles[] = {1*DTR,5*DTR,10*DTR,15*DTR,20*DTR,25*DTR,30*DTR,35*DTR,40*DTR,45*DTR,50*DTR,55*DTR,60*DTR,65*DTR,70*DTR,75*DTR,80*DTR,85*DTR,90*DTR};
; 924  : 		static float angles1[] = {-30*DTR,-25*DTR,-20*DTR,-15*DTR,-10*DTR,-5*DTR,1*DTR,5*DTR,10*DTR,15*DTR,20*DTR,25*DTR,30*DTR};
; 925  : 		static const int nangles = sizeof(angles)/sizeof(angles[0]);
; 926  : 		static const int mangles = sizeof(angles1)/sizeof(angles1[0]);
; 927  : 
; 928  : 		//for reference
; 929  : 		display->Point(0.0F, RET_CENTER + OUTER_RETICLE_SIZE*2);

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+5120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+24]
	call	edx

; 930  : 		display->Point(0.0F, RET_CENTER - OUTER_RETICLE_SIZE*2);

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+5120]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 931  : 		display->Point(OUTER_RETICLE_SIZE*2, RET_CENTER);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 932  : 		display->Point(-OUTER_RETICLE_SIZE*2, RET_CENTER);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 933  : 		mlTrig trig;
; 934  : 		//outer reticle
; 935  : 		for (int i = 0; i <= nangles; i++) 

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@DrawMANRet
$LN9@DrawMANRet:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN10@DrawMANRet:
	cmp	DWORD PTR _i$2[ebp], 19			; 00000013H
	jg	$LN8@DrawMANRet

; 936  : 		{
; 937  : 			mlSinCos( &trig, angles[i]);

	mov	edx, DWORD PTR _i$2[ebp]
	push	ecx
	movss	xmm0, DWORD PTR ?angles@?O@??DrawMANReticle@HudClass@@QAEXXZ@4PAMA[edx*4]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$4[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 938  : 			display->Point(0.0F + (OUTER_RETICLE_SIZE * 2 * trig.cos), RET_CENTER + (OUTER_RETICLE_SIZE * 2 * trig.sin));

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+5120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	addss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 939  : 			display->Point(0.0F - (OUTER_RETICLE_SIZE * 2 * trig.cos), RET_CENTER - (OUTER_RETICLE_SIZE * 2 * trig.sin));

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+5120]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	movss	xmm1, DWORD PTR __real@00000000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 940  : 			display->Point(0.0F + (OUTER_RETICLE_SIZE * 2 * trig.cos), RET_CENTER - (OUTER_RETICLE_SIZE * 2 * trig.sin));

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+5120]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	addss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 941  : 			display->Point(0.0F - (OUTER_RETICLE_SIZE * 2 * trig.cos), RET_CENTER + (OUTER_RETICLE_SIZE * 2 * trig.sin));

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+5120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	movss	xmm1, DWORD PTR __real@00000000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 942  : 		}

	jmp	$LN9@DrawMANRet
$LN8@DrawMANRet:

; 943  : 		//inner reticle
; 944  : 		for (int j = 0; j <= mangles; j++) 

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN7@DrawMANRet
$LN6@DrawMANRet:
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN7@DrawMANRet:
	cmp	DWORD PTR _j$3[ebp], 13			; 0000000dH
	jg	$LN5@DrawMANRet

; 945  : 		{
; 946  : 			mlSinCos( &trig, angles1[j]);

	mov	edx, DWORD PTR _j$3[ebp]
	push	ecx
	movss	xmm0, DWORD PTR ?angles1@?O@??DrawMANReticle@HudClass@@QAEXXZ@4PAMA[edx*4]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$4[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 947  : 			display->Point(0.0F + (INNER_RETICLE_SIZE * 2 * trig.cos), RET_CENTER + (INNER_RETICLE_SIZE * 2 * trig.sin));

	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+5120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	addss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 948  : 			display->Point(0.0F - (INNER_RETICLE_SIZE * 2 * trig.cos), RET_CENTER - (INNER_RETICLE_SIZE * 2 * trig.sin));

	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+5120]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	movss	xmm1, DWORD PTR __real@00000000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 949  : 			display->Point(0.0F + (INNER_RETICLE_SIZE * 2 * trig.sin), RET_CENTER - (INNER_RETICLE_SIZE * 2 * trig.cos));

	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+5120]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	addss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 950  : 			display->Point(0.0F - (INNER_RETICLE_SIZE * 2 * trig.sin), RET_CENTER + (INNER_RETICLE_SIZE * 2 * trig.cos));

	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+5120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _INNER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _trig$4[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 951  : 		}

	jmp	$LN6@DrawMANRet
$LN5@DrawMANRet:

; 952  : 		//Draw the cross
; 953  : 		//display->Point(0.0F, RETICLE_CENTER);
; 954  : 		display->Line(-0.02F, RET_CENTER, 0.02F, RET_CENTER);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+5120]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bca3d70a
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 955  : 		display->Line(0.0F, RET_CENTER + 0.02F, 0.0F, RET_CENTER - 0.02F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+5120]
	subss	xmm0, DWORD PTR __real@3ca3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+5120]
	addss	xmm0, DWORD PTR __real@3ca3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 956  : 		//draw the lines
; 957  : 		display->Line(0.0F,RET_CENTER + OUTER_RETICLE_SIZE * 2,0.0F, RET_CENTER + OUTER_RETICLE_SIZE * 2 + TICK_LEN);

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+5120]
	addss	xmm0, DWORD PTR _TICK_LEN
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+5120]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 958  : 		display->Line(0.0F,RET_CENTER - OUTER_RETICLE_SIZE * 2,0.0F, RET_CENTER - OUTER_RETICLE_SIZE * 2 - TICK_LEN);

	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+5120]
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR _TICK_LEN
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+5120]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 959  : 		display->Line(0.0F + OUTER_RETICLE_SIZE * 2,RET_CENTER ,0.0F + OUTER_RETICLE_SIZE * 2 + TICK_LEN, RET_CENTER );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@00000000
	addss	xmm0, DWORD PTR _TICK_LEN
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+5120]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@00000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 960  : 		display->Line(0.0F - OUTER_RETICLE_SIZE * 2,RET_CENTER ,0.0F - OUTER_RETICLE_SIZE * 2 - TICK_LEN, RET_CENTER );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+5120]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@00000000
	subss	xmm1, xmm0
	subss	xmm1, DWORD PTR _TICK_LEN
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+5120]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _OUTER_RETICLE_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@00000000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN11@DrawMANRet:

; 961  : 	}
; 962  : 
; 963  : 	CurPos *= -1;

	movss	xmm0, DWORD PTR _CurPos$[ebp]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _CurPos$[ebp], xmm0

; 964  : 	char tempstr[10];
; 965  : 	if(CurPos < 10)

	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR _CurPos$[ebp]
	jbe	SHORT $LN4@DrawMANRet

; 966  : 		sprintf(tempstr, "00%1.0f", CurPos);

	cvtss2sd xmm0, DWORD PTR _CurPos$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07CLHCCCLG@00?$CF1?40f?$AA@
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@DrawMANRet
$LN4@DrawMANRet:

; 967  : 	else if(CurPos < 100)

	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR _CurPos$[ebp]
	jbe	SHORT $LN2@DrawMANRet

; 968  : 		sprintf(tempstr, "0%2.0f", CurPos);

	cvtss2sd xmm0, DWORD PTR _CurPos$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06BBFBALAM@0?$CF2?40f?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 969  : 	else

	jmp	SHORT $LN1@DrawMANRet
$LN2@DrawMANRet:

; 970  : 		sprintf(tempstr, "%3.0f", CurPos);

	cvtss2sd xmm0, DWORD PTR _CurPos$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05KIPMPJDD@?$CF3?40f?$AA@
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN1@DrawMANRet:

; 971  : 	display->TextLeft(-0.7F, -0.05F, tempstr);

	push	0
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@bd4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf333333
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 972  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawMANReticle@HudClass@@QAEXXZ ENDP			; HudClass::DrawMANReticle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?RadToHudUnitsY@HudClass@@AAEMM@Z
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_mr$ = 8						; size = 4
?RadToHudUnitsY@HudClass@@AAEMM@Z PROC			; HudClass::RadToHudUnitsY, COMDAT
; _this$ = ecx

; 220  : 	float	RadToHudUnitsY (float mr)	{ return RadToHudUnits(mr) * mVScale; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _mr$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+5184]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?RadToHudUnitsY@HudClass@@AAEMM@Z ENDP			; HudClass::RadToHudUnitsY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?RadToHudUnitsX@HudClass@@AAEMM@Z
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_mr$ = 8						; size = 4
?RadToHudUnitsX@HudClass@@AAEMM@Z PROC			; HudClass::RadToHudUnitsX, COMDAT
; _this$ = ecx

; 219  : 	float	RadToHudUnitsX (float mr)	{ return RadToHudUnits(mr) * mHScale; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _mr$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+5188]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?RadToHudUnitsX@HudClass@@AAEMM@Z ENDP			; HudClass::RadToHudUnitsX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
tv324 = -12						; size = 4
_vOffset$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawRPod@HudClass@@AAEXXZ PROC				; HudClass::DrawRPod
; _this$ = ecx

; 842  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 843  : float vOffset;
; 844  : 	
; 845  : 	// Compute and set the viewport offset to get 0,0 at the boresight cross
; 846  : 	vOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	movss	DWORD PTR _vOffset$[ebp], xmm0

; 847  : 	//MI
; 848  : 	//display->AdjustOriginInViewport (0.0F, vOffset - 8.0F * degreesForScreen);
; 849  : 	display->AdjustOriginInViewport (0.0F, vOffset + g_fReconCameraOffset * degreesForScreen);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?g_fReconCameraOffset@@3MA
	mulss	xmm0, DWORD PTR [edx+4840]
	addss	xmm0, DWORD PTR _vOffset$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 850  : 
; 851  : 	
; 852  : 	// Draw the pipper
; 853  : 	display->Circle (0.0F, 0.0F, 2.0F * PIPPER_SIZE);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 854  : 	display->Point(0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 855  :    display->Line ( 0.0F,  2.0F * PIPPER_SIZE, 0.0F,  3.0F * PIPPER_SIZE);

	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 856  :    display->Line ( 0.0F, -2.0F * PIPPER_SIZE, 0.0F, -3.0F * PIPPER_SIZE);

	movss	xmm0, DWORD PTR __real@c0400000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 857  :    display->Line (  2.0F * PIPPER_SIZE, 0.0F,  3.0F * PIPPER_SIZE, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 858  :    display->Line ( -2.0F * PIPPER_SIZE, 0.0F, -3.0F * PIPPER_SIZE, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@c0400000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 859  : 
; 860  :    //MI
; 861  : 	//display->AdjustOriginInViewport (0.0F, -(vOffset - 8.0F * degreesForScreen));
; 862  :    display->AdjustOriginInViewport (0.0F, -(vOffset + g_fReconCameraOffset * degreesForScreen));

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?g_fReconCameraOffset@@3MA
	mulss	xmm0, DWORD PTR [ecx+4840]
	addss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 863  : 
; 864  :    // Save the current location of the boresight cross (in pixels)
; 865  :    pixelXCenter = display->viewportXtoPixel (0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportXtoPixel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4844]

; 866  :    //MI
; 867  :    //pixelYCenter = display->viewportYtoPixel (vOffset - 8.0F * degreesForScreen);
; 868  :    pixelYCenter = display->viewportYtoPixel (-(vOffset + g_fReconCameraOffset * degreesForScreen));

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?g_fReconCameraOffset@@3MA
	mulss	xmm0, DWORD PTR [edx+4840]
	addss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?viewportYtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportYtoPixel
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4848]

; 869  :    sightRadius  = display->viewportXtoPixel (2.0F * PIPPER_SIZE) - pixelXCenter;

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?viewportXtoPixel@VirtualDisplay@@QAEMM@Z ; VirtualDisplay::viewportXtoPixel
	fstp	DWORD PTR tv324[ebp]
	movss	xmm0, DWORD PTR tv324[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+4844]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4852], xmm0

; 870  : 
; 871  :    //MI
; 872  :    if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN1@DrawRPod

; 873  :    {
; 874  : 	   // Add waypoint info
; 875  : 	   if (waypointValid)

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+4952]
	test	ecx, ecx
	je	SHORT $LN1@DrawRPod

; 876  : 	   {
; 877  : 		   TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 878  : 		   RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawRPod:

; 879  : 	   }
; 880  :    }
; 881  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawRPod@HudClass@@AAEXXZ ENDP				; HudClass::DrawRPod
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_latRange$ = -360					; size = 4
tv1368 = -356						; size = 4
tv1627 = -352						; size = 4
tv1420 = -348						; size = 4
tv1603 = -344						; size = 4
tv1103 = -340						; size = 4
tv1721 = -336						; size = 4
tv1399 = -332						; size = 4
tv1723 = -328						; size = 4
tv1347 = -324						; size = 4
tv1597 = -320						; size = 4
tv1108 = -316						; size = 4
tv1590 = -312						; size = 4
tv1703 = -308						; size = 4
tv1719 = -304						; size = 4
tv1699 = -300						; size = 4
tv1583 = -296						; size = 4
tv1697 = -292						; size = 4
tv1576 = -288						; size = 4
tv1124 = -284						; size = 4
_latRange$1 = -280					; size = 4
tv1631 = -276						; size = 4
tv1715 = -272						; size = 4
tv1707 = -268						; size = 4
tv1717 = -264						; size = 4
tv1413 = -260						; size = 4
tv1467 = -256						; size = 4
tv1406 = -252						; size = 4
tv1460 = -248						; size = 4
tv1374 = -244						; size = 4
tv1711 = -240						; size = 4
tv1701 = -236						; size = 4
tv1713 = -232						; size = 4
tv1361 = -228						; size = 4
tv1453 = -224						; size = 4
tv1354 = -220						; size = 4
tv1446 = -216						; size = 4
tv1218 = -212						; size = 4
tv1709 = -208						; size = 4
tv1625 = -204						; size = 4
tv1439 = -200						; size = 4
tv1118 = -196						; size = 4
tv1432 = -192						; size = 4
tv1113 = -188						; size = 4
tv1426 = -184						; size = 4
tv1705 = -180						; size = 4
tv1629 = -176						; size = 4
tv207 = -172						; size = 4
_theBomb$2 = -168					; size = 4
_lateralRange$3 = -164					; size = 4
_vOffset$ = -160					; size = 4
tv848 = -156						; size = 4
tv210 = -152						; size = 4
tv847 = -148						; size = 4
tv269 = -144						; size = 4
tv844 = -140						; size = 4
tv250 = -136						; size = 4
_min$ = -132						; size = 4
_lateralRange$4 = -128					; size = 4
tv733 = -124						; size = 4
tv270 = -120						; size = 4
tv732 = -116						; size = 4
tv266 = -112						; size = 4
tv725 = -108						; size = 4
tv260 = -104						; size = 4
tv715 = -100						; size = 4
tv211 = -96						; size = 4
tv714 = -92						; size = 4
tv707 = -88						; size = 4
_fpmY$ = -84						; size = 4
_TofExtra$ = -80					; size = 4
_sec$ = -76						; size = 4
_harmPod$5 = -72					; size = 4
_slantRange$ = -68					; size = 4
_solutionCueY$ = -64					; size = 4
_isJSOW$ = -57						; size = 1
_x$ = -56						; size = 4
_puacY$ = -52						; size = 4
_displayRange$6 = -45					; size = 1
_steeringLineX$ = -44					; size = 4
_this$ = -40						; size = 4
_tmpStr$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
?DrawSteeringToRelease@HudClass@@AAEXXZ PROC		; HudClass::DrawSteeringToRelease
; _this$ = ecx

; 600  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 601  : //mlTrig drollTrig;
; 602  : float vOffset;
; 603  : float x;
; 604  : char tmpStr[32];
; 605  : float steeringLineX, solutionCueY;
; 606  : float puacY, fpmY;
; 607  : int min, sec;
; 608  : float slantRange;
; 609  : //TJL 12/04/03 Added latRange
; 610  : float latRange = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _latRange$[ebp], xmm0

; 611  : 	//me123 tofextra is the extra tof for the last bomb(this is the bomb the puac symbolice) becourse it has to wait for the preciding bombs to drop
; 612  :     //float  TofExtra = ( (FCC->Sms->RippleInterval())* ((FCC->Sms->RippleCount()+1))/ // MLR 4/3/2004 - 
; 613  :     float  TofExtra = ( (FCC->Sms->GetAGBRippleInterval())* ((FCC->Sms->GetAGBRippleCount()+1))/
; 614  : 					  ( (float) sqrt(ownship->XDelta()*ownship->XDelta() + ownship->YDelta()*ownship->YDelta()) ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+408]
	call	?GetAGBRippleInterval@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleInterval
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	add	eax, 1
	imul	esi, eax
	cvtsi2ss xmm0, esi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1625[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv1103[ebp]
	movss	xmm0, DWORD PTR tv1103[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1627[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv1108[ebp]
	movss	xmm0, DWORD PTR tv1627[ebp]
	mulss	xmm0, DWORD PTR tv1108[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1629[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv1113[ebp]
	movss	xmm0, DWORD PTR tv1113[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1631[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv1118[ebp]
	movss	xmm0, DWORD PTR tv1631[ebp]
	mulss	xmm0, DWORD PTR tv1118[ebp]
	movss	xmm1, DWORD PTR tv1629[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1124[ebp]
	movss	xmm0, DWORD PTR tv1625[ebp]
	divss	xmm0, DWORD PTR tv1124[ebp]
	movss	DWORD PTR _TofExtra$[ebp], xmm0

; 615  : 	//if (FCC->Sms->Pair() == TRUE)
; 616  : 	if (FCC->Sms->GetAGBPair() == TRUE) // MLR 4/3/2004 - 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBPair@SMSClass@@QAE_NXZ		; SMSClass::GetAGBPair
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN33@DrawSteeri

; 617  : 	{TofExtra *= 0.5f;}

	movss	xmm0, DWORD PTR _TofExtra$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _TofExtra$[ebp], xmm0
$LN33@DrawSteeri:

; 618  : 
; 619  : 	// RV - Biker - Check if we're a JSOW
; 620  : 	bool isJSOW = false;

	mov	BYTE PTR _isJSOW$[ebp], 0

; 621  : 	if (FCC->Sms->CurHardpoint() > 0) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	test	eax, eax
	jle	SHORT $LN31@DrawSteeri

; 622  : 		BombClass* theBomb = (BombClass *)FCC->Sms->hardPoint[FCC->Sms->CurHardpoint()]->weaponPointer.get();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	esi, DWORD PTR [edx+408]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+408]
	call	?CurHardpoint@SMSBaseClass@@QAEHXZ	; SMSBaseClass::CurHardpoint
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	add	ecx, 12					; 0000000cH
	call	?get@?$VuBin@VSimWeaponClass@@@@QBEPAVSimWeaponClass@@XZ ; VuBin<SimWeaponClass>::get
	mov	DWORD PTR _theBomb$2[ebp], eax

; 623  : 		if (theBomb && theBomb->EntityType()->classInfo_[VU_STYPE] == STYPE_BOMB_JSOW)

	cmp	DWORD PTR _theBomb$2[ebp], 0
	je	SHORT $LN31@DrawSteeri
	mov	ecx, DWORD PTR _theBomb$2[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	imul	ecx, 3
	movzx	edx, BYTE PTR [eax+ecx+8]
	cmp	edx, 5
	jne	SHORT $LN31@DrawSteeri

; 624  : 			isJSOW = true;

	mov	BYTE PTR _isJSOW$[ebp], 1
$LN31@DrawSteeri:

; 625  : 	}
; 626  : 
; 627  : 	// Steering Line
; 628  :    if (FCC->inRange && !isJSOW)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+216], 0
	je	$LN30@DrawSteeri
	movzx	edx, BYTE PTR _isJSOW$[ebp]
	test	edx, edx
	jne	$LN30@DrawSteeri

; 629  :    {
; 630  : 	   steeringLineX = FCC->airGroundBearing / (20.0F * DTR);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+336]
	divss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 631  : 	   steeringLineX += betaHudUnits;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 632  : 	   steeringLineX = min ( max (steeringLineX , -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN36@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv207[ebp], xmm0
	jmp	SHORT $LN37@DrawSteeri
$LN36@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv207[ebp], xmm0
$LN37@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv207[ebp]
	jbe	SHORT $LN40@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN38@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv210[ebp], xmm0
	jmp	SHORT $LN39@DrawSteeri
$LN38@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv210[ebp], xmm0
$LN39@DrawSteeri:
	movss	xmm0, DWORD PTR tv210[ebp]
	movss	DWORD PTR tv211[ebp], xmm0
	jmp	SHORT $LN41@DrawSteeri
$LN40@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv211[ebp], xmm0
$LN41@DrawSteeri:
	movss	xmm0, DWORD PTR tv211[ebp]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 633  : 	   display->Line (steeringLineX, 1.0F, steeringLineX, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 634  : 
; 635  : 	   // Flight path marker position
; 636  : 	   fpmY = (hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F -
; 637  : 		   alphaHudUnits);

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+4856]
	movss	DWORD PTR _fpmY$[ebp], xmm0

; 638  : 
; 639  : 	   // Solution Cue
; 640  : 	   if (FCC->tossAnticipationCue != FireControlComputer::NoCue)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+212], 0
	je	$LN29@DrawSteeri

; 641  : 	   {
; 642  : 		   if (FCC->tossAnticipationCue == FireControlComputer::PullUp ||
; 643  : 			   FCC->tossAnticipationCue == FireControlComputer::AwaitingRelease)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+212], 3
	je	SHORT $LN27@DrawSteeri
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+212], 4
	jne	SHORT $LN28@DrawSteeri
$LN27@DrawSteeri:

; 644  : 			   solutionCueY = min (FCC->airGroundDelayTime / 60.0F, 1.0F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+328]
	divss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN42@DrawSteeri
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+328]
	divss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR tv250[ebp], xmm0
	jmp	SHORT $LN43@DrawSteeri
$LN42@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv250[ebp], xmm0
$LN43@DrawSteeri:
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0

; 645  : 		   else

	jmp	SHORT $LN26@DrawSteeri
$LN28@DrawSteeri:

; 646  : 			   solutionCueY = min (FCC->airGroundDelayTime / 10.0F, 1.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+328]
	divss	xmm0, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN44@DrawSteeri
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+328]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv260[ebp], xmm0
	jmp	SHORT $LN45@DrawSteeri
$LN44@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv260[ebp], xmm0
$LN45@DrawSteeri:
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0
$LN26@DrawSteeri:

; 647  : 		   solutionCueY = fpmY + (1.0F - fpmY) * solutionCueY;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fpmY$[ebp]
	mulss	xmm0, DWORD PTR _solutionCueY$[ebp]
	addss	xmm0, DWORD PTR _fpmY$[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0

; 648  : 		   solutionCueY = min ( max (solutionCueY , -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN46@DrawSteeri
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR tv266[ebp], xmm0
	jmp	SHORT $LN47@DrawSteeri
$LN46@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv266[ebp], xmm0
$LN47@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv266[ebp]
	jbe	SHORT $LN50@DrawSteeri
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN48@DrawSteeri
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR tv269[ebp], xmm0
	jmp	SHORT $LN49@DrawSteeri
$LN48@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv269[ebp], xmm0
$LN49@DrawSteeri:
	movss	xmm0, DWORD PTR tv269[ebp]
	movss	DWORD PTR tv270[ebp], xmm0
	jmp	SHORT $LN51@DrawSteeri
$LN50@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv270[ebp], xmm0
$LN51@DrawSteeri:
	movss	xmm0, DWORD PTR tv270[ebp]
	movss	DWORD PTR _solutionCueY$[ebp], xmm0

; 649  : 		   display->Line (steeringLineX - 0.05F, solutionCueY,
; 650  : 			   steeringLineX + 0.05F, solutionCueY);

	push	ecx
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _solutionCueY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN29@DrawSteeri:

; 651  : 	   }
; 652  : 
; 653  : 	   // Toss Anticipation Cue
; 654  : 	   if (FCC->tossAnticipationCue == FireControlComputer::PreToss ||
; 655  : 		   (FCC->tossAnticipationCue == FireControlComputer::PullUp && flash))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+212], 2
	je	SHORT $LN24@DrawSteeri
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+212], 3
	jne	$LN25@DrawSteeri
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	$LN25@DrawSteeri
$LN24@DrawSteeri:

; 656  : 	   {
; 657  : 		   display->Circle (0.0F, RadToHudUnits (-3.0F * DTR) +
; 658  : 			   hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F,
; 659  : 			   MRToHudUnits (60.0F));

	push	ecx
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR __real@bd56774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv1218[ebp]
	movss	xmm0, DWORD PTR tv1218[ebp]
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN25@DrawSteeri:

; 660  : 	   }
; 661  : 
; 662  : 	   // PUAC goes here
; 663  : 	   // me123 status ok. lots of changes in this PUAC rutine.
; 664  : 	   vOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	movss	DWORD PTR _vOffset$[ebp], xmm0

; 665  : 		display->AdjustOriginInViewport (0.0F, vOffset);

	push	ecx
	movss	xmm0, DWORD PTR _vOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 666  : 	   
; 667  : 	   if (FCC->groundImpactTime < 25)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [edx+360]
	jbe	$LN21@DrawSteeri

; 668  : 	   {
; 669  : 		   if ((FCC->groundImpactTime - TofExtra) > (FCC->Sms->armingdelay /100))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+360]
	subss	xmm0, DWORD PTR _TofExtra$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	movss	xmm1, DWORD PTR [ecx+172]
	divss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm0, xmm1
	jbe	$LN22@DrawSteeri

; 670  : 		   {
; 671  : 			   puacY = (FCC->groundImpactTime - TofExtra)/ (FCC->Sms->armingdelay /100);// 1 at minimum release alt

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+360]
	subss	xmm0, DWORD PTR _TofExtra$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+408]
	movss	xmm1, DWORD PTR [eax+172]
	divss	xmm1, DWORD PTR __real@42c80000
	divss	xmm0, xmm1
	movss	DWORD PTR _puacY$[ebp], xmm0

; 672  : 
; 673  : 			    
; 674  : 				// draw the puac on the bomb fall line		 
; 675  : 				//MI vids show it stays below the FPM
; 676  : 				/*if(!g_bRealisticAvionics)
; 677  : 					x = ((puacY-1) * drollTrig.sin  + betaHudUnits);
; 678  : 				else*/ //Cobra removed (droll not initialized and why do this for non-realistic?)
; 679  : 					x = betaHudUnits;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4860]
	movss	DWORD PTR _x$[ebp], xmm0

; 680  : 		 		 
; 681  : 				//draw the puac
; 682  : 				puacY = - alphaHudUnits - ((puacY/3) - (0.33F)) ;//this is fpm pos when at minimum release alt.

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _puacY$[ebp]
	divss	xmm1, DWORD PTR __real@40400000
	subss	xmm1, DWORD PTR __real@3ea8f5c3
	subss	xmm0, xmm1
	movss	DWORD PTR _puacY$[ebp], xmm0

; 683  : 
; 684  : 				display->Line (x- 0.075F, puacY, x + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 685  : 				display->Line (x- 0.075F, puacY, x - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 686  : 				display->Line (x+ 0.075F, puacY, x + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 687  : 
; 688  : 				// Now we are below arming time so we show the "low" and change the PUAC function
; 689  : 				// so it hit's the fmp when the ground is reached (when we crash)
; 690  : 			}
; 691  : 			else 

	jmp	$LN21@DrawSteeri
$LN22@DrawSteeri:

; 692  : 			{
; 693  : 				// now we use the PUAC to "count down" to ground impact
; 694  : 				puacY =  FCC->groundImpactTime/4; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+360]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _puacY$[ebp], xmm0

; 695  : 
; 696  : 				// draw the puac on the bomb fall line		 
; 697  : 		//		 x = (x  + betaHudUnits) * -((puacY-1)/y ) ;//me123 this might crash when the bombline length (y) is zero. 
; 698  : 				//MI vids show it stays below the FPM
; 699  : 				/*if(!g_bRealisticAvionics)
; 700  : 					x = ((puacY-1) * drollTrig.sin  + betaHudUnits);
; 701  : 				else*/ //Cobra removed (droll not initialized and why do this for non-realistic?)
; 702  : 					x = betaHudUnits;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR _x$[ebp], xmm0

; 703  : 				// draw the Puac
; 704  : 				puacY =  - alphaHudUnits - puacY  ; // fpm pos at ground impact

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR _puacY$[ebp], xmm0

; 705  : 				display->Line (x- 0.075F, puacY, x + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 706  : 				display->Line (x- 0.075F, puacY, x - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 707  : 				display->Line (x+ 0.075F, puacY, x + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 708  :          
; 709  : 				display->TextLeft (betaHudUnits + 0.1F, -alphaHudUnits, "LOW");

	push	0
	push	OFFSET ??_C@_03IBEFMGAI@LOW?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4860]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+56]
	call	edx
$LN21@DrawSteeri:

; 710  : 			}
; 711  : 	   } 
; 712  : 
; 713  : 				// Clear the viewport offset
; 714  : 		display->AdjustOriginInViewport (0.0F, -vOffset);

	movss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 715  : 
; 716  : 	   // Add Release Angle Scale if we need one
; 717  : 	   if (FCC->airGroundMaxRange > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+344]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN20@DrawSteeri

; 718  : 	   {
; 719  : 		   float lateralRange = (float)sqrt(
; 720  : 			   (FCC->groundDesignateX - ownship->XPos()) * (FCC->groundDesignateX - ownship->XPos()) +
; 721  : 			   (FCC->groundDesignateY - ownship->YPos()) * (FCC->groundDesignateY - ownship->YPos()))
; 722  : 			   * FT_TO_NM;

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1347[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1347[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1697[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1354[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1354[ebp]
	movss	xmm1, DWORD PTR tv1697[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1699[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1361[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1361[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1701[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1368[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1368[ebp]
	movss	xmm1, DWORD PTR tv1701[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1699[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1374[ebp]
	movss	xmm0, DWORD PTR tv1374[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _lateralRange$4[ebp], xmm0

; 723  : 
; 724  : 		   sprintf (tmpStr, "%.0f", lateralRange);		 

	cvtss2sd xmm0, DWORD PTR _lateralRange$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 725  : 		   DrawDLZSymbol( lateralRange / (FCC->missileWEZDisplayRange * FT_TO_NM), tmpStr, 
; 726  : 				FCC->airGroundMinRange / (FCC->missileWEZDisplayRange), 
; 727  : 				FCC->airGroundMaxRange / (FCC->missileWEZDisplayRange),
; 728  : 				0.0f, 
; 729  : 				0.0f, FALSE,"" );

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+344]
	divss	xmm0, DWORD PTR [eax+312]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+340]
	divss	xmm0, DWORD PTR [ecx+312]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+312]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	xmm1, DWORD PTR _lateralRange$4[ebp]
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol
$LN20@DrawSteeri:

; 730  : 	   }
; 731  : 	   //TJL 12/04/03 We need lateral range here as well. //JAM 07Dec03 - Tom, sqrtf is better
; 732  : 	   float latRange = sqrtf(
; 733  : 			   (FCC->groundDesignateX - ownship->XPos()) * (FCC->groundDesignateX - ownship->XPos()) +
; 734  : 			   (FCC->groundDesignateY - ownship->YPos()) * (FCC->groundDesignateY - ownship->YPos()))
; 735  : 			   * FT_TO_NM;

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1399[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1399[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1703[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1406[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1406[ebp]
	movss	xmm1, DWORD PTR tv1703[ebp]
	mulss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1705[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1413[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1413[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1707[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1420[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1420[ebp]
	movss	xmm1, DWORD PTR tv1707[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1705[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1426[ebp]
	movss	xmm0, DWORD PTR tv1426[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _latRange$1[ebp], xmm0

; 736  : 
; 737  : 	   // Slant range;
; 738  : 	   slantRange = sqrtf(
; 739  : 		   (FCC->groundDesignateX - ownship->XPos()) * (FCC->groundDesignateX - ownship->XPos()) +
; 740  : 		   (FCC->groundDesignateY - ownship->YPos()) * (FCC->groundDesignateY - ownship->YPos()) +
; 741  : 		   (FCC->groundDesignateZ - ownship->ZPos()) * (FCC->groundDesignateZ - ownship->ZPos()));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1432[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1432[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1709[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1439[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1439[ebp]
	movss	xmm1, DWORD PTR tv1709[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1711[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1446[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1446[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1713[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1453[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1453[ebp]
	movss	xmm1, DWORD PTR tv1713[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1711[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1715[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1460[ebp]
	movss	xmm0, DWORD PTR [esi+384]
	subss	xmm0, DWORD PTR tv1460[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1717[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv1467[ebp]
	movss	xmm0, DWORD PTR [esi+384]
	subss	xmm0, DWORD PTR tv1467[ebp]
	movss	xmm1, DWORD PTR tv1717[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1715[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _slantRange$[ebp]

; 742  : 
; 743  : 	   // RV - I-Hawk - Do not display target range if in HARM HAS mode
; 744  : 	   bool displayRange = true;

	mov	BYTE PTR _displayRange$6[ebp], 1

; 745  : 	   if ( FCC->GetSubMode() == FireControlComputer::HARM )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 23					; 00000017H
	jne	SHORT $LN18@DrawSteeri

; 746  : 	   {
; 747  : 		   HarmTargetingPod* harmPod = (HarmTargetingPod*)FindSensor(ownship, SensorClass::HTS);

	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _harmPod$5[ebp], eax

; 748  : 		   if ( harmPod && harmPod->GetSubMode() == HarmTargetingPod::HAS ||
; 749  : 			    harmPod && harmPod->GetSubMode() == HarmTargetingPod::Handoff ||
; 750  : 				harmPod && harmPod->GetSubMode() == HarmTargetingPod::FilterMode )

	cmp	DWORD PTR _harmPod$5[ebp], 0
	je	SHORT $LN16@DrawSteeri
	mov	ecx, DWORD PTR _harmPod$5[ebp]
	call	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
	cmp	eax, 1
	je	SHORT $LN17@DrawSteeri
$LN16@DrawSteeri:
	cmp	DWORD PTR _harmPod$5[ebp], 0
	je	SHORT $LN15@DrawSteeri
	mov	ecx, DWORD PTR _harmPod$5[ebp]
	call	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
	cmp	eax, 2
	je	SHORT $LN17@DrawSteeri
$LN15@DrawSteeri:
	cmp	DWORD PTR _harmPod$5[ebp], 0
	je	SHORT $LN18@DrawSteeri
	mov	ecx, DWORD PTR _harmPod$5[ebp]
	call	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
	cmp	eax, 4
	jne	SHORT $LN18@DrawSteeri
$LN17@DrawSteeri:

; 751  : 		   {
; 752  : 			   displayRange = false;

	mov	BYTE PTR _displayRange$6[ebp], 0
$LN18@DrawSteeri:

; 753  : 		   }
; 754  : 	   }
; 755  : 
; 756  : 	   if ( displayRange )

	movzx	ecx, BYTE PTR _displayRange$6[ebp]
	test	ecx, ecx
	je	$LN12@DrawSteeri

; 757  : 	   {
; 758  :             if (slantRange > 1.0F * NM_TO_FT)

	movss	xmm0, DWORD PTR _slantRange$[ebp]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	$LN13@DrawSteeri

; 759  : 		    {
; 760  : 				sprintf (tmpStr, "F%4.1f", max ( min (100.0F, slantRange * FT_TO_NM), 0.0F));

	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN52@DrawSteeri
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv707[ebp], xmm0
	jmp	SHORT $LN53@DrawSteeri
$LN52@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv707[ebp], xmm0
$LN53@DrawSteeri:
	movss	xmm0, DWORD PTR tv707[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN56@DrawSteeri
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN54@DrawSteeri
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv714[ebp], xmm0
	jmp	SHORT $LN55@DrawSteeri
$LN54@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv714[ebp], xmm0
$LN55@DrawSteeri:
	movss	xmm0, DWORD PTR tv714[ebp]
	movss	DWORD PTR tv715[ebp], xmm0
	jmp	SHORT $LN57@DrawSteeri
$LN56@DrawSteeri:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv715[ebp], xmm0
$LN57@DrawSteeri:
	cvtss2sd xmm0, DWORD PTR tv715[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06BAGLHBIK@F?$CF4?41f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 761  : 		    }
; 762  : 
; 763  : 		    else

	jmp	$LN12@DrawSteeri
$LN13@DrawSteeri:

; 764  : 			{
; 765  : 				sprintf (tmpStr, "F%03.0f", max ( min (10000.0F, slantRange * 0.01F), 0.0F));

	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN58@DrawSteeri
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv725[ebp], xmm0
	jmp	SHORT $LN59@DrawSteeri
$LN58@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv725[ebp], xmm0
$LN59@DrawSteeri:
	movss	xmm0, DWORD PTR tv725[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN62@DrawSteeri
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN60@DrawSteeri
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv732[ebp], xmm0
	jmp	SHORT $LN61@DrawSteeri
$LN60@DrawSteeri:
	movss	xmm0, DWORD PTR _slantRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv732[ebp], xmm0
$LN61@DrawSteeri:
	movss	xmm0, DWORD PTR tv732[ebp]
	movss	DWORD PTR tv733[ebp], xmm0
	jmp	SHORT $LN63@DrawSteeri
$LN62@DrawSteeri:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv733[ebp], xmm0
$LN63@DrawSteeri:
	cvtss2sd xmm0, DWORD PTR tv733[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07FNHAMJIA@F?$CF03?40f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN12@DrawSteeri:

; 766  : 			}
; 767  : 	   }
; 768  : 
; 769  : 	   ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 770  : 	   //MI
; 771  : 	   if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN11@DrawSteeri

; 772  : 	   {
; 773  : 		   DrawWindowString (10, tmpStr);

	push	0
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 774  : 	   }
; 775  : 
; 776  : 	   else

	jmp	SHORT $LN9@DrawSteeri
$LN11@DrawSteeri:

; 777  : 	   {
; 778  : 		   if ( displayRange )

	movzx	eax, BYTE PTR _displayRange$6[ebp]
	test	eax, eax
	je	SHORT $LN9@DrawSteeri

; 779  : 		   {
; 780  :                display->TextLeft(0.45F, -0.36F, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@beb851ec
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN9@DrawSteeri:

; 781  : 		   }
; 782  : 	   }
; 783  : 
; 784  : 	   // Text Data
; 785  : 	   min = (int)(FCC->airGroundDelayTime / 60.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+328]
	divss	xmm0, DWORD PTR __real@42700000
	cvttss2si eax, xmm0
	mov	DWORD PTR _min$[ebp], eax

; 786  : 	   sec = (int)(FCC->airGroundDelayTime - min * 60.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cvtsi2ss xmm0, DWORD PTR _min$[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR [edx+328]
	subss	xmm1, xmm0
	cvttss2si eax, xmm1
	mov	DWORD PTR _sec$[ebp], eax

; 787  : 
; 788  : 	   // Time to release
; 789  : 	   sprintf (tmpStr, "%02d:%02d", min, sec);

	mov	ecx, DWORD PTR _sec$[ebp]
	push	ecx
	mov	edx, DWORD PTR _min$[ebp]
	push	edx
	push	OFFSET ??_C@_09FJLEEAHK@?$CF02d?3?$CF02d?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 790  : 	   ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 791  : 	   //MI
; 792  : 	   if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN8@DrawSteeri

; 793  : 	   {
; 794  : 		   DrawWindowString (13, tmpStr);

	push	0
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 795  : 	   }
; 796  : 
; 797  : 	   else

	jmp	SHORT $LN6@DrawSteeri
$LN8@DrawSteeri:

; 798  : 	   {
; 799  : 		   if ( displayRange )

	movzx	eax, BYTE PTR _displayRange$6[ebp]
	test	eax, eax
	je	SHORT $LN6@DrawSteeri

; 800  : 		   {
; 801  :                display->TextLeft(0.45F, -0.43F, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@bedc28f6
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN6@DrawSteeri:

; 802  : 		   }
; 803  : 	   }
; 804  : 
; 805  : 	   // Range and bearing to tgt
; 806  : 	   sec = (int)(FCC->airGroundBearing * RTD * 0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+336]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvttss2si eax, xmm0
	mov	DWORD PTR _sec$[ebp], eax

; 807  : 	   if (sec < 0)

	cmp	DWORD PTR _sec$[ebp], 0
	jge	SHORT $LN5@DrawSteeri

; 808  : 		   sec = -sec;

	mov	ecx, DWORD PTR _sec$[ebp]
	neg	ecx
	mov	DWORD PTR _sec$[ebp], ecx
$LN5@DrawSteeri:

; 809  : 	   	   //TJL 12/04/03 Not sure why it's GroundRange here...? Changing to lateralRange defined above
; 810  : 		   //sprintf(tmpStr, "%02d %04.1f", sec, FCC->airGroundRange * FT_TO_NM);
; 811  : 		   sprintf(tmpStr, "%02d %04.1f", sec, latRange);

	cvtss2sd xmm0, DWORD PTR _latRange$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _sec$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@CDJAKKME@?$CF02d?5?$CF04?41f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 20					; 00000014H

; 812  : 
; 813  : 	   ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 814  : 	   //MI
; 815  : 	   if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN4@DrawSteeri

; 816  : 		   DrawWindowString (14, tmpStr);

	push	0
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 817  : 	   else

	jmp	SHORT $LN3@DrawSteeri
$LN4@DrawSteeri:

; 818  : 		   display->TextLeft(0.45F, -0.50F, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN3@DrawSteeri:
	jmp	$LN1@DrawSteeri
$LN30@DrawSteeri:

; 819  :    }
; 820  :    // RV - Biker - Some diff HUD symboligy for JSOWs
; 821  :    else if (FCC->Sms->JDAMPowered && FCC->Sms->JDAMInitTimer <= 4.0f) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+408]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	$LN1@DrawSteeri
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	movss	xmm0, DWORD PTR __real@40800000
	comiss	xmm0, DWORD PTR [ecx+32]
	jb	$LN1@DrawSteeri

; 822  : 		steeringLineX = FCC->airGroundBearing / (20.0F * DTR);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+336]
	divss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 823  : 		steeringLineX += betaHudUnits;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR [ecx+4860]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 824  : 		steeringLineX = min ( max (steeringLineX , -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN64@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv844[ebp], xmm0
	jmp	SHORT $LN65@DrawSteeri
$LN64@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv844[ebp], xmm0
$LN65@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv844[ebp]
	jbe	SHORT $LN68@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN66@DrawSteeri
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv847[ebp], xmm0
	jmp	SHORT $LN67@DrawSteeri
$LN66@DrawSteeri:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv847[ebp], xmm0
$LN67@DrawSteeri:
	movss	xmm0, DWORD PTR tv847[ebp]
	movss	DWORD PTR tv848[ebp], xmm0
	jmp	SHORT $LN69@DrawSteeri
$LN68@DrawSteeri:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv848[ebp], xmm0
$LN69@DrawSteeri:
	movss	xmm0, DWORD PTR tv848[ebp]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 825  : 		display->Line (steeringLineX, 1.0F, steeringLineX, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 826  : 
; 827  : 		float lateralRange = (float)sqrt(
; 828  : 			(FCC->groundDesignateX - ownship->XPos()) * (FCC->groundDesignateX - ownship->XPos()) +
; 829  : 			(FCC->groundDesignateY - ownship->YPos()) * (FCC->groundDesignateY - ownship->YPos()))
; 830  : 			* FT_TO_NM;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1576[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1576[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1719[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv1583[ebp]
	movss	xmm0, DWORD PTR [esi+376]
	subss	xmm0, DWORD PTR tv1583[ebp]
	movss	xmm1, DWORD PTR tv1719[ebp]
	mulss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1721[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1590[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1590[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1723[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv1597[ebp]
	movss	xmm0, DWORD PTR [esi+380]
	subss	xmm0, DWORD PTR tv1597[ebp]
	movss	xmm1, DWORD PTR tv1723[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv1721[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv1603[ebp]
	movss	xmm0, DWORD PTR tv1603[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR _lateralRange$3[ebp], xmm0

; 831  : 
; 832  : 			sprintf (tmpStr, "%.0f", lateralRange);		 

	cvtss2sd xmm0, DWORD PTR _lateralRange$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 833  : 			DrawDLZSymbol( lateralRange / (FCC->missileWEZDisplayRange * FT_TO_NM), tmpStr, 
; 834  : 				FCC->airGroundMinRange / (FCC->missileWEZDisplayRange), 
; 835  : 				FCC->airGroundMaxRange / (FCC->missileWEZDisplayRange),
; 836  : 				0.0f, 
; 837  : 				0.0f, FALSE,"" );

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+344]
	divss	xmm0, DWORD PTR [ecx+312]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [eax+340]
	divss	xmm0, DWORD PTR [edx+312]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+312]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	xmm1, DWORD PTR _lateralRange$3[ebp]
	divss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol
$LN1@DrawSteeri:

; 838  : 	}
; 839  : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawSteeringToRelease@HudClass@@AAEXXZ ENDP		; HudClass::DrawSteeringToRelease
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_drollTrig$ = -88					; size = 8
_azTrig$ = -80						; size = 8
_elTrig$ = -72						; size = 8
tv425 = -64						; size = 4
tv415 = -60						; size = 4
_droll$ = -56						; size = 4
tv331 = -52						; size = 4
tv330 = -48						; size = 4
tv319 = -44						; size = 4
tv304 = -40						; size = 4
tv303 = -36						; size = 4
tv292 = -32						; size = 4
_vOffset$ = -28						; size = 4
_y$ = -24						; size = 4
_pipperEl$ = -20					; size = 4
_pipperAz$ = -16					; size = 4
_puacY$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawStrafe@HudClass@@AAEXXZ PROC			; HudClass::DrawStrafe
; _this$ = ecx

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 392  : float vOffset;
; 393  : float droll;
; 394  : mlTrig azTrig, elTrig, drollTrig;
; 395  : float puacY;
; 396  : float pipperAz, pipperEl;
; 397  : //TJL 11/20/03
; 398  : float x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$[ebp], xmm0

; 399  : float y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$[ebp], xmm0

; 400  : //char tmpStr[32];
; 401  : 
; 402  : 	// Draw a TD box if we have a locked target
; 403  : 	DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 404  : 
; 405  : 	// FRB - Try not compensating for screen aspect.
; 406  : 	//pipperAz = RadToHudUnitsX(FCC->groundPipperAz);
; 407  : 	//pipperEl = RadToHudUnitsY(FCC->groundPipperEl);
; 408  : 	pipperAz = RadToHudUnits(FCC->groundPipperAz);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+388]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _pipperAz$[ebp]

; 409  : 	pipperEl = RadToHudUnits(FCC->groundPipperEl);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+392]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _pipperEl$[ebp]

; 410  : 	mlSinCos (&azTrig, pipperAz);

	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _azTrig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 411  : 	mlSinCos (&elTrig, pipperEl);

	add	esp, 4
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _elTrig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 412  : 	droll = (float)atan2 (azTrig.sin, elTrig.sin);

	cvtss2sd xmm0, DWORD PTR _elTrig$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _azTrig$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _droll$[ebp]

; 413  : 	mlSinCos (&drollTrig, droll);

	push	ecx
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _drollTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 414  : 	
; 415  : 
; 416  : 	display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 417  : 									 hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F);

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 418  : 
; 419  : 	if (fabs (pipperEl) < 0.90F && fabs(pipperAz + hudWinY[BORESIGHT_CROSS_WINDOW] +
; 420  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F) < 0.90F && !FCC->noSolution)

	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv415[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv415[ebp]
	jbe	$LN10@DrawStrafe
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv425[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv425[ebp]
	jbe	$LN10@DrawStrafe
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movsx	edx, BYTE PTR [ecx+193]
	test	edx, edx
	jne	$LN10@DrawStrafe

; 421  : 	{
; 422  : 		if (FCC->airGroundRange < 8000.0F)// me123 status ok. changed from 8000. TJL 11/20/03 Back to 8000 per MIRV

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR __real@45fa0000
	comiss	xmm0, DWORD PTR [ecx+332]
	jbe	SHORT $LN9@DrawStrafe

; 423  : 		{
; 424  : 			display->Line (pipperAz - 0.05F, pipperEl + 0.05F,//me123 status test. changed the last number from 0.05 to 0.15 to make strafcircle bigger
; 425  : 				pipperAz + 0.05F, pipperEl + 0.05F);//me123 status test. changed the last number from 0.05 to 0.15 to make strafcircle bigger

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN9@DrawStrafe:

; 426  : 		}
; 427  : 		display->Circle (pipperAz, pipperEl, 0.05F);//me123 status test. changed the last number from 0.05 to 0.15 to make strafcircle bigger

	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 428  : 		//TJL 11/20/03
; 429  : 		x = pipperAz;

	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 430  : 		y = pipperEl;

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 431  : 		display->Point(x, y);//TJL 11/20/03 Hopefully this puts a point in the middle.

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 432  : 	}
; 433  : 	else

	jmp	SHORT $LN8@DrawStrafe
$LN10@DrawStrafe:

; 434  : 	{
; 435  : 		display->Circle (0.0F, 0.0F, 0.05F);//me123 status test, changed the last number from 0.05 to 0.15 to make strafcircle bigger

	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN8@DrawStrafe:

; 436  : 	}
; 437  : 
; 438  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 439  : 	
; 440  : 								 hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 441  : 	
; 442  : 	// Compute and set the viewport offset to get 0,0 at the boresight cross
; 443  : 	vOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	movss	DWORD PTR _vOffset$[ebp], xmm0

; 444  : 	display->AdjustOriginInViewport (0.0F, vOffset);

	push	ecx
	movss	xmm0, DWORD PTR _vOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 445  : 	//PUAC for strafe
; 446  : 	if (FCC->groundImpactTime < 25)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [edx+360]
	jbe	$LN7@DrawStrafe

; 447  : 	{
; 448  : 		// now we use the PUAC to "count down" to ground impact
; 449  :          puacY =  FCC->groundImpactTime/4; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+360]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _puacY$[ebp], xmm0

; 450  : 
; 451  : 		 // draw the puac on the bomb fall line		 
; 452  : //		 x = (x  + betaHudUnits) * -((puacY-1)/y ) ;//me123 this might crash when the bombline length (y) is zero. 
; 453  : 		 //MI vids show it stays below the FPM
; 454  : 		 if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN6@DrawStrafe

; 455  : 			 x = ((puacY-1) * drollTrig.sin  + betaHudUnits);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _drollTrig$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+4860]
	movss	DWORD PTR _x$[ebp], xmm0

; 456  : 		 else

	jmp	SHORT $LN5@DrawStrafe
$LN6@DrawStrafe:

; 457  : 			 x = betaHudUnits;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4860]
	movss	DWORD PTR _x$[ebp], xmm0
$LN5@DrawStrafe:

; 458  :          // draw the Puac
; 459  :          puacY =  - alphaHudUnits - puacY  ; // fpm pos at ground impact

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR _puacY$[ebp], xmm0

; 460  :          display->Line (x- 0.075F, puacY, x + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 461  :          display->Line (x- 0.075F, puacY, x - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 462  :          display->Line (x+ 0.075F, puacY, x + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN7@DrawStrafe:

; 463  : 		 
; 464  : 	}
; 465  : 	display->AdjustOriginInViewport (0.0F, -vOffset);

	movss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 466  :    // Add slant range
; 467  :    if (FCC->airGroundRange > 1.0F * NM_TO_FT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	$LN4@DrawStrafe

; 468  :       sprintf (tmpStr, "F %4.1f", max ( min (100.0F, FCC->airGroundRange * FT_TO_NM), 0.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN13@DrawStrafe
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv292[ebp], xmm0
	jmp	SHORT $LN14@DrawStrafe
$LN13@DrawStrafe:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv292[ebp], xmm0
$LN14@DrawStrafe:
	movss	xmm0, DWORD PTR tv292[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN17@DrawStrafe
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN15@DrawStrafe
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv303[ebp], xmm0
	jmp	SHORT $LN16@DrawStrafe
$LN15@DrawStrafe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv303[ebp], xmm0
$LN16@DrawStrafe:
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR tv304[ebp], xmm0
	jmp	SHORT $LN18@DrawStrafe
$LN17@DrawStrafe:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv304[ebp], xmm0
$LN18@DrawStrafe:
	cvtss2sd xmm0, DWORD PTR tv304[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 5065				; 000013c9H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 469  :    else

	jmp	$LN3@DrawStrafe
$LN4@DrawStrafe:

; 470  :       sprintf (tmpStr, "F %03.0f", max ( min (10000.0F, FCC->airGroundRange * 0.01F), 0.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN19@DrawStrafe
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv319[ebp], xmm0
	jmp	SHORT $LN20@DrawStrafe
$LN19@DrawStrafe:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv319[ebp], xmm0
$LN20@DrawStrafe:
	movss	xmm0, DWORD PTR tv319[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN23@DrawStrafe
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN21@DrawStrafe
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv330[ebp], xmm0
	jmp	SHORT $LN22@DrawStrafe
$LN21@DrawStrafe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv330[ebp], xmm0
$LN22@DrawStrafe:
	movss	xmm0, DWORD PTR tv330[ebp]
	movss	DWORD PTR tv331[ebp], xmm0
	jmp	SHORT $LN24@DrawStrafe
$LN23@DrawStrafe:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv331[ebp], xmm0
$LN24@DrawStrafe:
	cvtss2sd xmm0, DWORD PTR tv331[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 5065				; 000013c9H
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN3@DrawStrafe:

; 471  :    ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 472  :    //MI
; 473  :    if(!g_bRealisticAvionics)	//done in the routines below

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN2@DrawStrafe

; 474  : 	   DrawWindowString (10, tmpStr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 5065				; 000013c9H
	push	ecx
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN2@DrawStrafe:

; 475  :    //else
; 476  : 	 //   display->TextLeft(0.40F, -0.36F, tmpStr);
; 477  : 
; 478  :    //MI
; 479  :    if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN1@DrawStrafe

; 480  :    { 
; 481  : 	   TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 482  : 	   RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawStrafe:

; 483  :    }
; 484  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawStrafe@HudClass@@AAEXXZ ENDP			; HudClass::DrawStrafe
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawLADD@HudClass@@AAEXXZ PROC				; HudClass::DrawLADD
; _this$ = ecx

; 542  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 543  : 
; 544  : 	//Draw our heading at the bottom of the HUD
; 545  : 	headingPos = High;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4964], 0

; 546  : 
; 547  : 	// Draw a TD box if we have a locked target
; 548  : 	// NOTE:  In reality there would never be a locked target since the radar would be in AGR, but
; 549  : 	// if we allow a radar lock, we might as well allow a TD box...
; 550  : 	DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 551  : 	
; 552  : 	// Draw the impact point marker
; 553  : 	display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 554  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 555  : 	DrawDesignateMarker(Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+372]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+368]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+364]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker

; 556  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 557  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 558  : 
; 559  : 	// If we have designated and are waiting for release, provide steering to the release point
; 560  : 	if (FCC->airGroundDelayTime > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+328]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@DrawLADD

; 561  : 		DrawSteeringToReleaseLADD();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSteeringToReleaseLADD@HudClass@@QAEXXZ ; HudClass::DrawSteeringToReleaseLADD
$LN1@DrawLADD:

; 562  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawLADD@HudClass@@AAEXXZ ENDP				; HudClass::DrawLADD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawDTOSS@HudClass@@AAEXXZ PROC			; HudClass::DrawDTOSS
; _this$ = ecx

; 502  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 503  : 	// Draw a TD box if we have a locked target
; 504  : 	// NOTE:  In reality there would never be a locked target since the radar would be in AGR, but
; 505  : 	// if we allow a radar lock, we might as well allow a TD box...
; 506  : 
; 507  : 	//MI changed
; 508  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN7@DrawDTOSS

; 509  : 		DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 510  : 	else

	jmp	SHORT $LN6@DrawDTOSS
$LN7@DrawDTOSS:

; 511  : 		DrawDTOSSBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDTOSSBox@HudClass@@AAEXXZ		; HudClass::DrawDTOSSBox
$LN6@DrawDTOSS:

; 512  : 	
; 513  : 	// Draw the impact point marker
; 514  : 	display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 515  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 516  : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN5@DrawDTOSS

; 517  : 		DrawDesignateMarker(Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+372]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+368]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+364]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker

; 518  : 	else //JPG 13 Aug 04 - the "other" DTOS/TDMarker box doesn't yield the proper TLL (since it's method is really for AA, so let's use the DrawDesignateMarker

	jmp	SHORT $LN4@DrawDTOSS
$LN5@DrawDTOSS:

; 519  : 		/*DrawTDMarker*/DrawDesignateMarker(Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll /*0.03F*/);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+372]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+368]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+364]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker
$LN4@DrawDTOSS:

; 520  : 
; 521  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 522  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	edx, 4
	imul	edx, 44					; 0000002cH
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 523  : 	
; 524  : 	// If we have designated and are waiting for release, provide steering to the release point
; 525  : 	if (FCC->airGroundDelayTime > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+328]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@DrawDTOSS

; 526  : 	{
; 527  : 		// If we've designated a target, provide steering
; 528  : 		DrawSteeringToRelease();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSteeringToRelease@HudClass@@AAEXXZ	; HudClass::DrawSteeringToRelease

; 529  : 	}
; 530  : 	else

	jmp	SHORT $LN1@DrawDTOSS
$LN3@DrawDTOSS:

; 531  : 	{ 
; 532  : 		if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN1@DrawDTOSS

; 533  : 		{
; 534  : 			TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 535  : 			RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawDTOSS:

; 536  : 		}
; 537  : 	}
; 538  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawDTOSS@HudClass@@AAEXXZ ENDP			; HudClass::DrawDTOSS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_drollTrig$ = -228					; size = 8
_elTrig$ = -220						; size = 8
_dx$ = -212						; size = 4
_azTrig$ = -208						; size = 8
_puacY$ = -200						; size = 4
tv910 = -196						; size = 4
_rng$1 = -192						; size = 4
tv903 = -188						; size = 4
tv1078 = -184						; size = 4
tv891 = -180						; size = 4
tv797 = -176						; size = 4
_droll$ = -172						; size = 4
tv1097 = -168						; size = 4
tv804 = -164						; size = 4
tv1090 = -160						; size = 4
tv1084 = -156						; size = 4
tv897 = -152						; size = 4
_dy$ = -148						; size = 4
tv638 = -144						; size = 4
tv665 = -140						; size = 4
_x$ = -136						; size = 4
tv664 = -132						; size = 4
_y$ = -128						; size = 4
tv653 = -124						; size = 4
tv639 = -120						; size = 4
tv627 = -116						; size = 4
_maxRng$ = -112						; size = 4
_sy$2 = -108						; size = 4
_sticy$3 = -104						; size = 4
_minRng$ = -100						; size = 4
_sx$4 = -96						; size = 4
_stic$ = -92						; size = 4
_sy$5 = -88						; size = 4
_sx$6 = -84						; size = 4
_sticx$7 = -80						; size = 4
_sticy$8 = -76						; size = 4
_sticx$9 = -72						; size = 4
_vOffset$ = -68						; size = 4
_RngToGo$ = -64						; size = 4
_tic$ = -60						; size = 4
_yOffset$ = -56						; size = 4
_pipperAz$ = -52					; size = 4
_pipperEl$ = -48					; size = 4
_diam$ = -44						; size = 4
_this$ = -40						; size = 4
_tmpStr$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
?DrawRCKT@HudClass@@AAEXXZ PROC				; HudClass::DrawRCKT
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 229  : float vOffset, diam, tic, stic;
; 230  : float RngToGo, yOffset;
; 231  : float x, y, puacY;
; 232  : 
; 233  : puacY = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _puacY$[ebp], xmm0

; 234  : 
; 235  : float droll;
; 236  : mlTrig azTrig, elTrig, drollTrig;
; 237  : float pipperAz, pipperEl;
; 238  : char tmpStr[32];
; 239  : 
; 240  : 	// Cobra test
; 241  : 	static FILE *fp = NULL;
; 242  : 	//if (fp == NULL)
; 243  : 		//fp = fopen("G:\\RocketTest.txt", "w");
; 244  : 
; 245  : 	// Draw a TD box if we have a locked target
; 246  : 	// NOTE:  In reality there would never be a locked target since the radar would be in AGR, but
; 247  : 	// if we allow a radar lock, we might as well allow a TD box...
; 248  : 	//MI
; 249  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN12@DrawRCKT

; 250  : 		DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox
$LN12@DrawRCKT:

; 251  : 	
; 252  : 	// FRB - Try not compensating for screen aspect.
; 253  : 	//pipperAz = RadToHudUnitsX(FCC->groundPipperAz);
; 254  : 	//pipperEl = RadToHudUnitsY(FCC->groundPipperEl);
; 255  : 	pipperAz = RadToHudUnits(FCC->groundPipperAz);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+388]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _pipperAz$[ebp]

; 256  : 	pipperEl = RadToHudUnits(FCC->groundPipperEl);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+392]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _pipperEl$[ebp]

; 257  : 	mlSinCos(&azTrig, pipperAz);

	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _azTrig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 258  : 	mlSinCos(&elTrig, pipperEl);

	add	esp, 4
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _elTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 259  : 	droll = (float)atan2(azTrig.sin, elTrig.sin);

	cvtss2sd xmm0, DWORD PTR _elTrig$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _azTrig$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _droll$[ebp]

; 260  : 	mlSinCos(&drollTrig, droll);

	push	ecx
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _drollTrig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 261  : 
; 262  : 	// draw the pipper
; 263  : 	//display->AdjustOriginInViewport(
; 264  : 	//	0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F
; 265  : 	//);
; 266  : 
; 267  : 	vOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	edx, 4
	imul	edx, 44					; 0000002cH
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	movss	DWORD PTR _vOffset$[ebp], xmm0

; 268  : 
; 269  : 			if (fp)

	cmp	DWORD PTR ?fp@?1??DrawRCKT@HudClass@@AAEXXZ@4PAU_iobuf@@A, 0
	je	$LN11@DrawRCKT

; 270  : 			{
; 271  : 				float rng = FCC->airGroundRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	movss	DWORD PTR _rng$1[ebp], xmm0

; 272  : 				fprintf(fp,"**--** Pip Az %f Pip El %f Gnd Az %f Gnd El %f Range %f \n",
; 273  : 							pipperAz, pipperEl, FCC->groundPipperAz*RTD, FCC->groundPipperEl*RTD, rng);

	cvtss2sd xmm0, DWORD PTR _rng$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+392]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+388]
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _pipperEl$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _pipperAz$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0DK@IBHEKLO@?$CK?$CK?9?9?$CK?$CK?5Pip?5Az?5?$CFf?5Pip?5El?5?$CFf?5Gnd?5A@
	mov	ecx, DWORD PTR ?fp@?1??DrawRCKT@HudClass@@AAEXXZ@4PAU_iobuf@@A
	push	ecx
	call	_fprintf
	add	esp, 48					; 00000030H

; 274  : 				fflush(fp);

	mov	edx, DWORD PTR ?fp@?1??DrawRCKT@HudClass@@AAEXXZ@4PAU_iobuf@@A
	push	edx
	call	_fflush
	add	esp, 4
$LN11@DrawRCKT:

; 275  : 			}
; 276  : 
; 277  : 	// FPM position
; 278  :    float dx = betaHudUnits;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4860]
	movss	DWORD PTR _dx$[ebp], xmm0

; 279  :    float dy = vOffset - alphaHudUnits;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vOffset$[ebp]
	subss	xmm0, DWORD PTR [ecx+4856]
	movss	DWORD PTR _dy$[ebp], xmm0

; 280  : 
; 281  : 	 yOffset = -0.40f;

	movss	xmm0, DWORD PTR __real@becccccd
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 282  : 	 pipperEl += yOffset;

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR _pipperEl$[ebp], xmm0

; 283  : 
; 284  : 	// draw the pipper
; 285  :   // Well, really it is centered on the flight path marker*/	
; 286  :   display->AdjustOriginInViewport (betaHudUnits, dy);

	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 287  : 
; 288  : 	diam = 0.15f;

	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR _diam$[ebp], xmm0

; 289  : 	tic = 0.04f;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _tic$[ebp], xmm0

; 290  : 	stic = 0.02f;

	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _stic$[ebp], xmm0

; 291  : 	float maxRng = 36500.0f;

	movss	xmm0, DWORD PTR __real@470e9400
	movss	DWORD PTR _maxRng$[ebp], xmm0

; 292  : 	float minRng = 18500.0F;

	movss	xmm0, DWORD PTR __real@46908800
	movss	DWORD PTR _minRng$[ebp], xmm0

; 293  : 
; 294  : 	if (fabs (pipperEl) < 0.90F && fabs(pipperAz + vOffset) < 0.90F && FCC->airGroundRange < maxRng && !FCC->noSolution)

	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv797[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv797[ebp]
	jbe	$LN10@DrawRCKT
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _vOffset$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv804[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv804[ebp]
	jbe	$LN10@DrawRCKT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR _maxRng$[ebp]
	comiss	xmm0, DWORD PTR [edx+332]
	jbe	$LN10@DrawRCKT
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movsx	edx, BYTE PTR [ecx+193]
	test	edx, edx
	jne	$LN10@DrawRCKT

; 295  : 	{
; 296  : 		if (FCC->airGroundRange < minRng)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR _minRng$[ebp]
	comiss	xmm0, DWORD PTR [ecx+332]
	jbe	$LN9@DrawRCKT

; 297  : 		{
; 298  : 			display->Line (pipperAz - diam, pipperEl + diam - 0.01F, pipperAz, pipperEl + diam + 0.02F);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR __real@3ca3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 299  : 			display->Line (pipperAz, pipperEl + diam + 0.02F, pipperAz + diam, pipperEl + diam - 0.01F);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR __real@3ca3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN9@DrawRCKT:

; 300  : 		}
; 301  : 		display->Circle (pipperAz, pipperEl, diam);

	push	ecx
	movss	xmm0, DWORD PTR _diam$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 302  :     display->Line (pipperAz, pipperEl + diam, pipperAz, pipperEl + diam + tic);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 303  :     display->Line (pipperAz, pipperEl - diam, pipperAz, pipperEl - diam - tic);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 304  :     display->Line (pipperAz + diam, pipperEl, pipperAz + diam + tic, pipperEl);

	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 305  :     display->Line (pipperAz - diam, pipperEl, pipperAz - diam - tic, pipperEl);

	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 306  : 
; 307  : 		float sx = sin(45*DTR)*diam;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv891[ebp]
	movss	xmm0, DWORD PTR tv891[ebp]
	mulss	xmm0, DWORD PTR _diam$[ebp]
	movss	DWORD PTR _sx$6[ebp], xmm0

; 308  : 		float sy = cos(45*DTR)*diam;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv897[ebp]
	movss	xmm0, DWORD PTR tv897[ebp]
	mulss	xmm0, DWORD PTR _diam$[ebp]
	movss	DWORD PTR _sy$2[ebp], xmm0

; 309  : 		float sticx = sin(45*DTR)*(diam+stic);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv903[ebp]
	movss	xmm0, DWORD PTR tv903[ebp]
	movss	xmm1, DWORD PTR _diam$[ebp]
	addss	xmm1, DWORD PTR _stic$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _sticx$9[ebp], xmm0

; 310  : 		float sticy = cos(45*DTR)*(diam+stic);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv910[ebp]
	movss	xmm0, DWORD PTR tv910[ebp]
	movss	xmm1, DWORD PTR _diam$[ebp]
	addss	xmm1, DWORD PTR _stic$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _sticy$3[ebp], xmm0

; 311  :     display->Line (pipperAz + sx, pipperEl + sy, pipperAz + sticx, pipperEl + sticy);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _sticy$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _sticx$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _sy$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _sx$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 312  :     display->Line (pipperAz + sx, pipperEl - sy, pipperAz + sticx, pipperEl - sticy);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	subss	xmm0, DWORD PTR _sticy$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _sticx$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	subss	xmm0, DWORD PTR _sy$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	addss	xmm0, DWORD PTR _sx$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 313  :     display->Line (pipperAz - sx, pipperEl + sy, pipperAz - sticx, pipperEl + sticy);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _sticy$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _sticx$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	addss	xmm0, DWORD PTR _sy$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _sx$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 314  :     display->Line (pipperAz - sx, pipperEl - sy, pipperAz - sticx, pipperEl - sticy);

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	subss	xmm0, DWORD PTR _sticy$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _sticx$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	subss	xmm0, DWORD PTR _sy$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	subss	xmm0, DWORD PTR _sx$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 315  : 
; 316  : 		if (FCC->airGroundRange <= minRng)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR _minRng$[ebp]
	comiss	xmm0, DWORD PTR [edx+332]
	jb	SHORT $LN8@DrawRCKT

; 317  : 			RngToGo = 270.0f;

	movss	xmm0, DWORD PTR __real@43870000
	movss	DWORD PTR _RngToGo$[ebp], xmm0

; 318  : 		else

	jmp	SHORT $LN5@DrawRCKT
$LN8@DrawRCKT:

; 319  : 		if (FCC->airGroundRange >= maxRng)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	comiss	xmm0, DWORD PTR _maxRng$[ebp]
	jb	SHORT $LN6@DrawRCKT

; 320  : 			RngToGo = 270.9f;

	movss	xmm0, DWORD PTR __real@43877333
	movss	DWORD PTR _RngToGo$[ebp], xmm0

; 321  : 		else

	jmp	SHORT $LN5@DrawRCKT
$LN6@DrawRCKT:

; 322  : 			RngToGo = (((FCC->airGroundRange - minRng)/(maxRng - minRng)) * 360.0f)-90.0f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+332]
	subss	xmm0, DWORD PTR _minRng$[ebp]
	movss	xmm1, DWORD PTR _maxRng$[ebp]
	subss	xmm1, DWORD PTR _minRng$[ebp]
	divss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@43b40000
	subss	xmm0, DWORD PTR __real@42b40000
	movss	DWORD PTR _RngToGo$[ebp], xmm0
$LN5@DrawRCKT:

; 323  : 		if (RngToGo < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _RngToGo$[ebp]
	jbe	SHORT $LN4@DrawRCKT

; 324  : 			RngToGo += 360.0f;

	movss	xmm0, DWORD PTR _RngToGo$[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _RngToGo$[ebp], xmm0
$LN4@DrawRCKT:

; 325  : 
; 326  : 		display->Arc(pipperAz, pipperEl, diam-0.02f, 270.0f*DTR, (RngToGo)*DTR);

	movss	xmm0, DWORD PTR _RngToGo$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR __real@3ca3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 327  : 
; 328  : 		//TJL 11/20/03
; 329  : 		x = pipperAz;

	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 330  : 		y = pipperEl;

	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 331  : 		display->Point(x, y);//TJL 11/20/03 Hopefully this puts a point in the middle.

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 332  : 		display->Line (x, y+diam, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 333  : 		//display->Line (x, y, 0.0f, -0.25f);
; 334  : 	}
; 335  : 	else

	jmp	$LN3@DrawRCKT
$LN10@DrawRCKT:

; 336  : 	{
; 337  : 		display->Circle (0.0f, yOffset, diam);

	push	ecx
	movss	xmm0, DWORD PTR _diam$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 338  :     display->Line (0.0f, yOffset+diam, 0.0f, yOffset+diam + tic);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 339  :     display->Line (0.0f, yOffset-diam, 0.0f, yOffset-diam - tic);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	subss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 340  :     display->Line (diam, yOffset, diam + tic, yOffset);

	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _diam$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 341  :     display->Line (-diam, yOffset, -diam - tic, yOffset);

	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diam$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _tic$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _diam$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 342  : 		display->Circle (0.0f, yOffset, diam-0.02f);

	movss	xmm0, DWORD PTR _diam$[ebp]
	subss	xmm0, DWORD PTR __real@3ca3d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 343  : 		display->Line (0.0f, yOffset+diam, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR _diam$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 344  : 		float sx = sin(45*DTR)*diam;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv1078[ebp]
	movss	xmm0, DWORD PTR tv1078[ebp]
	mulss	xmm0, DWORD PTR _diam$[ebp]
	movss	DWORD PTR _sx$4[ebp], xmm0

; 345  : 		float sy = cos(45*DTR)*diam+yOffset;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv1084[ebp]
	movss	xmm0, DWORD PTR tv1084[ebp]
	mulss	xmm0, DWORD PTR _diam$[ebp]
	addss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR _sy$5[ebp], xmm0

; 346  : 		float sticx = sin(45*DTR)*(diam+stic);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv1090[ebp]
	movss	xmm0, DWORD PTR tv1090[ebp]
	movss	xmm1, DWORD PTR _diam$[ebp]
	addss	xmm1, DWORD PTR _stic$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _sticx$7[ebp], xmm0

; 347  : 		float sticy = cos(45*DTR)*(diam+stic)+yOffset;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv1097[ebp]
	movss	xmm0, DWORD PTR tv1097[ebp]
	movss	xmm1, DWORD PTR _diam$[ebp]
	addss	xmm1, DWORD PTR _stic$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR _sticy$8[ebp], xmm0

; 348  :     display->Line (sx, sy, sticx, sticy);

	push	ecx
	movss	xmm0, DWORD PTR _sticy$8[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sticx$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sy$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sx$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 349  :     display->Line ( sx, -sy,   sticx, -sticy);

	movss	xmm0, DWORD PTR _sticy$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sticx$7[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sy$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sx$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 350  :     display->Line (-sx,  sy, - sticx,  sticy);

	push	ecx
	movss	xmm0, DWORD PTR _sticy$8[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sticx$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sy$5[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sx$4[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 351  :     display->Line (-sx, -sy, - sticx, -sticy);

	movss	xmm0, DWORD PTR _sticy$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sticx$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sy$5[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _sx$4[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN3@DrawRCKT:

; 352  : 	}
; 353  :   display->AdjustOriginInViewport (-betaHudUnits, -dy);

	movss	xmm0, DWORD PTR _dy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4860]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 354  : 	vOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	movss	DWORD PTR _vOffset$[ebp], xmm0

; 355  : 	display->AdjustOriginInViewport (0.0F, vOffset);

	push	ecx
	movss	xmm0, DWORD PTR _vOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 356  : 
; 357  : #if 0 // FRB - Removed PUAC for rockets.
; 358  : 	//PUAC for max Range
; 359  : 	if (FCC->airGroundRange < maxRng && FCC->airGroundRange >= minRng)
; 360  : 	{
; 361  : 		// now we use the PUAC to "count down" to in-range
; 362  :       puacY = ((FCC->airGroundRange - minRng)/(maxRng - minRng)); 
; 363  : 
; 364  : 		 // draw the puac on the bomb fall line		 
; 365  : 		 //MI vids show it stays below the FPM
; 366  : 		 if(!g_bRealisticAvionics)
; 367  : 			 x = ((puacY-1) * drollTrig.sin  + betaHudUnits);
; 368  : 		 else
; 369  : 			 x = betaHudUnits;
; 370  :       // draw the Puac
; 371  :       puacY =  - alphaHudUnits - puacY  ; // fpm pos at ground impact
; 372  :       display->Line (x- 0.075F, puacY, x + 0.075F, puacY);
; 373  :       display->Line (x- 0.075F, puacY, x - 0.075F, puacY + 0.025F);
; 374  :       display->Line (x+ 0.075F, puacY, x + 0.075F, puacY + 0.025F);
; 375  : 		 
; 376  : 	}
; 377  : #endif
; 378  : 
; 379  : 	 display->AdjustOriginInViewport (0.0F, -vOffset);

	movss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 380  :    // Add slant range
; 381  :    if (FCC->airGroundRange > 1.0F * NM_TO_FT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	$LN2@DrawRCKT

; 382  :       sprintf (tmpStr, "F %4.1f", max ( min (100.0F, FCC->airGroundRange * FT_TO_NM), 0.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN15@DrawRCKT
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv627[ebp], xmm0
	jmp	SHORT $LN16@DrawRCKT
$LN15@DrawRCKT:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv627[ebp], xmm0
$LN16@DrawRCKT:
	movss	xmm0, DWORD PTR tv627[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@DrawRCKT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN17@DrawRCKT
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv638[ebp], xmm0
	jmp	SHORT $LN18@DrawRCKT
$LN17@DrawRCKT:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv638[ebp], xmm0
$LN18@DrawRCKT:
	movss	xmm0, DWORD PTR tv638[ebp]
	movss	DWORD PTR tv639[ebp], xmm0
	jmp	SHORT $LN20@DrawRCKT
$LN19@DrawRCKT:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv639[ebp], xmm0
$LN20@DrawRCKT:
	cvtss2sd xmm0, DWORD PTR tv639[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 383  :    else

	jmp	$LN1@DrawRCKT
$LN2@DrawRCKT:

; 384  :       sprintf (tmpStr, "F %03.0f", max ( min (10000.0F, FCC->airGroundRange * 0.01F), 0.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN21@DrawRCKT
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv653[ebp], xmm0
	jmp	SHORT $LN22@DrawRCKT
$LN21@DrawRCKT:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv653[ebp], xmm0
$LN22@DrawRCKT:
	movss	xmm0, DWORD PTR tv653[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN25@DrawRCKT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN23@DrawRCKT
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv664[ebp], xmm0
	jmp	SHORT $LN24@DrawRCKT
$LN23@DrawRCKT:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+332]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv664[ebp], xmm0
$LN24@DrawRCKT:
	movss	xmm0, DWORD PTR tv664[ebp]
	movss	DWORD PTR tv665[ebp], xmm0
	jmp	SHORT $LN26@DrawRCKT
$LN25@DrawRCKT:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv665[ebp], xmm0
$LN26@DrawRCKT:
	cvtss2sd xmm0, DWORD PTR tv665[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN1@DrawRCKT:

; 385  :    ShiAssert(strlen(tmpStr) < sizeof(tmpStr));
; 386  :    DrawWindowString (10, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 387  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawRCKT@HudClass@@AAEXXZ ENDP				; HudClass::DrawRCKT
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawCCRP@HudClass@@AAEXXZ PROC				; HudClass::DrawCCRP
; _this$ = ecx

; 488  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 489  : 	// Draw the TD box
; 490  : 	display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 491  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 492  : 	DrawDesignateMarker(Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+372]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+368]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+364]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker

; 493  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 494  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 495  : 	
; 496  : 	// Provide steering to the release point
; 497  : 	DrawSteeringToRelease();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSteeringToRelease@HudClass@@AAEXXZ	; HudClass::DrawSteeringToRelease

; 498  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCCRP@HudClass@@AAEXXZ ENDP				; HudClass::DrawCCRP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_elTrig$ = -104						; size = 8
_azTrig$ = -96						; size = 8
_drollTrig$ = -88					; size = 8
tv618 = -80						; size = 4
_droll$ = -76						; size = 4
tv538 = -72						; size = 4
tv757 = -68						; size = 4
tv761 = -64						; size = 4
tv532 = -60						; size = 4
tv763 = -56						; size = 4
tv527 = -52						; size = 4
tv522 = -48						; size = 4
tv759 = -44						; size = 4
tv517 = -40						; size = 4
_len$ = -36						; size = 4
_pipperEl$ = -32					; size = 4
_pipperAz$ = -28					; size = 4
_vOffset$ = -24						; size = 4
_TofExtra$ = -20					; size = 4
_y$ = -16						; size = 4
_puacY$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawCCIP@HudClass@@AAEXXZ PROC				; HudClass::DrawCCIP
; _this$ = ecx

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 	float vOffset;
; 86   : 	float pipperAz, pipperEl;
; 87   : 	float x, y;
; 88   : 	float len, droll;
; 89   : 	float puacY;//me123 status ok. insert.
; 90   : 	mlTrig azTrig, elTrig, drollTrig;
; 91   : 	//me123 tofextra is the extra tof for the last bomb(this is the bomb the puac symbolice) becourse it has to wait for the preciding bombs to drop
; 92   :     //float  TofExtra = ( (FCC->Sms->RippleInterval())* ((FCC->Sms->RippleCount()+1))/ // MLR 4/3/2004 - 
; 93   :     float  TofExtra = ( (FCC->Sms->GetAGBRippleInterval())* ((FCC->Sms->GetAGBRippleCount()+1))/
; 94   : 					  ( (float) sqrt(ownship->XDelta()*ownship->XDelta() + ownship->YDelta()*ownship->YDelta()) ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+408]
	call	?GetAGBRippleInterval@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleInterval
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	add	eax, 1
	imul	esi, eax
	cvtsi2ss xmm0, esi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv757[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv517[ebp]
	movss	xmm0, DWORD PTR tv517[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv759[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv522[ebp]
	movss	xmm0, DWORD PTR tv759[ebp]
	mulss	xmm0, DWORD PTR tv522[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv761[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv527[ebp]
	movss	xmm0, DWORD PTR tv527[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv763[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv532[ebp]
	movss	xmm0, DWORD PTR tv763[ebp]
	mulss	xmm0, DWORD PTR tv532[ebp]
	movss	xmm1, DWORD PTR tv761[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv538[ebp]
	movss	xmm0, DWORD PTR tv757[ebp]
	divss	xmm0, DWORD PTR tv538[ebp]
	movss	DWORD PTR _TofExtra$[ebp], xmm0

; 95   : 	//if (FCC->Sms->Pair() == TRUE) // MLR 4/3/2004 - 
; 96   : 	if (FCC->Sms->GetAGBPair() == TRUE)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	call	?GetAGBPair@SMSClass@@QAE_NXZ		; SMSClass::GetAGBPair
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN12@DrawCCIP

; 97   : 	{TofExtra *= 0.5f;}

	movss	xmm0, DWORD PTR _TofExtra$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _TofExtra$[ebp], xmm0
$LN12@DrawCCIP:

; 98   : 
; 99   : 	// Draw a TD box if we have a locked target
; 100  : 	// NOTE:  In reality there would never be a locked target since the radar would be in AGR, but
; 101  : 	// if we allow a radar lock, we might as well allow a TD box...
; 102  : 	//MI
; 103  : 	if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN11@DrawCCIP

; 104  : 		DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox
$LN11@DrawCCIP:

; 105  : 	
; 106  : 	// Compute and set the viewport offset to get 0,0 at the boresight cross
; 107  : 	vOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	movss	DWORD PTR _vOffset$[ebp], xmm0

; 108  : 	display->AdjustOriginInViewport (0.0F, vOffset);

	push	ecx
	movss	xmm0, DWORD PTR _vOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 109  : 
; 110  : 
; 111  : 	// If we've got a designated target, provide steering
; 112  : 	if (FCC->airGroundDelayTime > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+328]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@DrawCCIP

; 113  : 	{
; 114  : 		// Draw the impact point marker	
; 115  : 		DrawDesignateMarker(Circle, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+372]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+368]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+364]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker

; 116  : 
; 117  : 		// Clear the viewport offset
; 118  : 		display->AdjustOriginInViewport (0.0F, -vOffset);

	movss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 119  : 
; 120  : 		// provide the steering to the release point
; 121  :         DrawSteeringToRelease();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSteeringToRelease@HudClass@@AAEXXZ	; HudClass::DrawSteeringToRelease

; 122  : 		return;

	jmp	$LN13@DrawCCIP
$LN10@DrawCCIP:

; 123  : 	}
; 124  : 
; 125  : 
; 126  : 	// Get on with the job of getting a designated target (or just dropping)
; 127  : 	pipperAz = FCC->groundPipperAz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+388]
	movss	DWORD PTR _pipperAz$[ebp], xmm0

; 128  : 	pipperEl = FCC->groundPipperEl;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+392]
	movss	DWORD PTR _pipperEl$[ebp], xmm0

; 129  : 	
; 130  : 	// Draw the pipper
; 131  : 
; 132  : 	// FRB - Try not compensating for screen aspect.
; 133  : 	//x = RadToHudUnits(pipperAz);
; 134  : 	//y = RadToHudUnits(pipperEl);
; 135  : 	x = RadToHudUnitsX(pipperAz);

	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _x$[ebp]

; 136  : 	y = RadToHudUnitsY(pipperEl);

	push	ecx
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR _y$[ebp]

; 137  : 
; 138  : 	display->Circle (x, y, PIPPER_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR _PIPPER_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 139  : 	display->Point(x, y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+24]
	call	eax

; 140  : 	
; 141  : 	// Draw the bomb fall line connecting the FPM with the exterior of the pipper
; 142  : 	mlSinCos (&azTrig, pipperAz);

	push	ecx
	movss	xmm0, DWORD PTR _pipperAz$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _azTrig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 143  : 	mlSinCos (&elTrig, pipperEl);

	add	esp, 4
	movss	xmm0, DWORD PTR _pipperEl$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _elTrig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 144  : 	droll = (float)atan2 (azTrig.sin, elTrig.sin);

	cvtss2sd xmm0, DWORD PTR _elTrig$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _azTrig$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _droll$[ebp]

; 145  : 	mlSinCos (&drollTrig, droll);

	push	ecx
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _drollTrig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 146  : 	
; 147  : 	len = RadToHudUnits( (float)acos(azTrig.cos * elTrig.cos) ) - PIPPER_SIZE;

	movss	xmm0, DWORD PTR _azTrig$[ebp+4]
	mulss	xmm0, DWORD PTR _elTrig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?acos@@YAMM@Z				; acos
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv618[ebp]
	movss	xmm0, DWORD PTR tv618[ebp]
	subss	xmm0, DWORD PTR _PIPPER_SIZE
	movss	DWORD PTR _len$[ebp], xmm0

; 148  : 	x = len * drollTrig.sin;

	movss	xmm0, DWORD PTR _len$[ebp]
	mulss	xmm0, DWORD PTR _drollTrig$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 149  : 	y = len * drollTrig.cos;

	movss	xmm0, DWORD PTR _len$[ebp]
	mulss	xmm0, DWORD PTR _drollTrig$[ebp+4]
	movss	DWORD PTR _y$[ebp], xmm0

; 150  : 	
; 151  : 	display->Line(x, y, betaHudUnits, -alphaHudUnits);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 152  : 
; 153  : 
; 154  : 	// See if the computed impact point is visible on the HUD
; 155  : 	if (!FCC->groundPipperOnHud)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movsx	edx, BYTE PTR [ecx+186]
	test	edx, edx
	jne	$LN9@DrawCCIP

; 156  : 	{
; 157  : 		// Draw the Delay Cue Tick half way along the fall line
; 158  : 		// me123 status ok. x and y definitions are inset in the formula below instead so the original x/y's can be used below
; 159  : 		display->Line ( ((x + betaHudUnits)  / 2.0f - PIPPER_SIZE), (y - alphaHudUnits) / 2.0f, ((x + betaHudUnits)  / 2.0f) + PIPPER_SIZE, (y - alphaHudUnits) / 2.0f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR [eax+4856]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR [ecx+4860]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR [edx+4856]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR [eax+4860]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR _PIPPER_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN9@DrawCCIP:

; 160  : 	}
; 161  : 
; 162  : ///me123 status ok. insert PUAC in ccip
; 163  : 
; 164  : 	//if we are above the hight where the bombs will have time to arm before impact
; 165  : 	//then draw the puac so it hit's the fpm when min release higt is reached.
; 166  : 	
; 167  : 	// no need to go though this if we are way above mra
; 168  : 	if (FCC->groundImpactTime < 25)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR __real@41c80000
	comiss	xmm0, DWORD PTR [edx+360]
	jbe	$LN4@DrawCCIP

; 169  : 	{
; 170  : 	if ((FCC->groundImpactTime - TofExtra) > (FCC->Sms->armingdelay /100))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+360]
	subss	xmm0, DWORD PTR _TofExtra$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+408]
	movss	xmm1, DWORD PTR [ecx+172]
	divss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm0, xmm1
	jbe	$LN7@DrawCCIP

; 171  :     {	
; 172  :          puacY = ((FCC->groundImpactTime - TofExtra)/ (FCC->Sms->armingdelay /100));// 1 at minimum release alt

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+360]
	subss	xmm0, DWORD PTR _TofExtra$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+408]
	movss	xmm1, DWORD PTR [eax+172]
	divss	xmm1, DWORD PTR __real@42c80000
	divss	xmm0, xmm1
	movss	DWORD PTR _puacY$[ebp], xmm0

; 173  : 
; 174  : 		 
; 175  : 		 // draw the puac on the bomb fall line		 
; 176  : 		 //MI vids show it stays below the FPM
; 177  : 		 if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN6@DrawCCIP

; 178  : 			 x = ((puacY-1) * drollTrig.sin  + betaHudUnits);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _drollTrig$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR _x$[ebp], xmm0

; 179  : 		 else

	jmp	SHORT $LN5@DrawCCIP
$LN6@DrawCCIP:

; 180  : 			 x = betaHudUnits;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4860]
	movss	DWORD PTR _x$[ebp], xmm0
$LN5@DrawCCIP:

; 181  : 		 		 
; 182  : 		 //draw the puac
; 183  :          puacY = - alphaHudUnits - ((puacY/3) - (0.33F)) ;//this is fpm pos when at minimum release alt.

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _puacY$[ebp]
	divss	xmm1, DWORD PTR __real@40400000
	subss	xmm1, DWORD PTR __real@3ea8f5c3
	subss	xmm0, xmm1
	movss	DWORD PTR _puacY$[ebp], xmm0

; 184  : 
; 185  :          display->Line (x- 0.075F, puacY, x + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 186  :          display->Line (x- 0.075F, puacY, x - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 187  :          display->Line (x+ 0.075F, puacY, x + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 188  : 
; 189  : 		 // Now we are below arming time so we show the "low" and change the PUAC function
; 190  : 		 // so it hit's the fmp when the ground is reached (when we crash)
; 191  : 	}
; 192  :     else 

	jmp	$LN4@DrawCCIP
$LN7@DrawCCIP:

; 193  :     {
; 194  : 		// now we use the PUAC to "count down" to ground impact
; 195  :          puacY =  FCC->groundImpactTime/4; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+360]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _puacY$[ebp], xmm0

; 196  : 
; 197  : 		 // draw the puac on the bomb fall line		 
; 198  : //		 x = (x  + betaHudUnits) * -((puacY-1)/y ) ;//me123 this might crash when the bombline length (y) is zero. 
; 199  : 		 //MI vids show it stays below the FPM
; 200  : 		 if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN3@DrawCCIP

; 201  : 			 x = ((puacY-1) * drollTrig.sin  + betaHudUnits);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _drollTrig$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+4860]
	movss	DWORD PTR _x$[ebp], xmm0

; 202  : 		 else

	jmp	SHORT $LN2@DrawCCIP
$LN3@DrawCCIP:

; 203  : 			 x = betaHudUnits;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR _x$[ebp], xmm0
$LN2@DrawCCIP:

; 204  :          // draw the Puac
; 205  :          puacY =  - alphaHudUnits - puacY  ; // fpm pos at ground impact

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR _puacY$[ebp], xmm0

; 206  :          display->Line (x- 0.075F, puacY, x + 0.075F, puacY);

	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 207  :          display->Line (x- 0.075F, puacY, x - 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 208  :          display->Line (x+ 0.075F, puacY, x + 0.075F, puacY + 0.025F);

	movss	xmm0, DWORD PTR _puacY$[ebp]
	addss	xmm0, DWORD PTR __real@3ccccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _puacY$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3d99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 209  : 		 
; 210  : 		 display->TextLeft (betaHudUnits + 0.1F, -alphaHudUnits, "LOW");

	push	0
	push	OFFSET ??_C@_03IBEFMGAI@LOW?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4856]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4860]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+56]
	call	edx
$LN4@DrawCCIP:

; 211  :     }
; 212  : 	}
; 213  : ////insert end me123
; 214  : 
; 215  : 		// Clear the viewport offset
; 216  : 	display->AdjustOriginInViewport (0.0F, -vOffset);

	movss	xmm0, DWORD PTR _vOffset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 217  : 	
; 218  : 	//MI
; 219  : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN1@DrawCCIP

; 220  : 	{
; 221  : 		TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 222  : 		RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawCCIP:
$LN13@DrawCCIP:

; 223  : 	}
; 224  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCCIP@HudClass@@AAEXXZ ENDP				; HudClass::DrawCCIP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_laserPod$1 = -12					; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawTargetingPod@HudClass@@AAEXXZ PROC			; HudClass::DrawTargetingPod
; _this$ = ecx

; 566  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 567  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 568  : 
; 569  :    // Draw the TD box
; 570  :    display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 571  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 572  :    DrawDesignateMarker(Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+372]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+368]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+364]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker

; 573  :    display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 574  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 575  : 
; 576  :    // Provide steering to the release point
; 577  :    DrawSteeringToRelease();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSteeringToRelease@HudClass@@AAEXXZ	; HudClass::DrawSteeringToRelease

; 578  : 
; 579  :    //MI Laser Indicator
; 580  :    if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN1@DrawTarget

; 581  :    {
; 582  : 	   LaserPodClass* laserPod = (LaserPodClass* )FindLaserPod (playerAC);

	mov	ecx, DWORD PTR _playerAC$[ebp]
	push	ecx
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _laserPod$1[ebp], eax

; 583  : 	   if(laserPod && FCC->LaserArm)

	cmp	DWORD PTR _laserPod$1[ebp], 0
	je	$LN1@DrawTarget
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movzx	ecx, BYTE PTR [eax+420]
	test	ecx, ecx
	je	$LN1@DrawTarget

; 584  : 	   {
; 585  : 		   //armed and fired
; 586  : 		   if(FCC->LaserFire)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movzx	ecx, BYTE PTR [eax+423]
	test	ecx, ecx
	je	SHORT $LN4@DrawTarget

; 587  : 		   {
; 588  : 			   if(flash)

	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN3@DrawTarget

; 589  : 				   display->TextLeft(-0.35F, -0.12F, "L");

	push	0
	push	OFFSET ??_C@_01OCOKONAJ@L?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@beb33333
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN3@DrawTarget:

; 590  : 		   }

	jmp	SHORT $LN1@DrawTarget
$LN4@DrawTarget:

; 591  : 		   //armed, put it there steady
; 592  : 		   else if(FCC->LaserArm)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movzx	eax, BYTE PTR [edx+420]
	test	eax, eax
	je	SHORT $LN1@DrawTarget

; 593  : 			   display->TextLeft(-0.35F, -0.12F, "L");

	push	0
	push	OFFSET ??_C@_01OCOKONAJ@L?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@beb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN1@DrawTarget:

; 594  : 	   }
; 595  :    }
; 596  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawTargetingPod@HudClass@@AAEXXZ ENDP			; HudClass::DrawTargetingPod
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawAirGroundRocket@HudClass@@AAEXXZ PROC		; HudClass::DrawAirGroundRocket
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	DrawRCKT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawRCKT@HudClass@@AAEXXZ		; HudClass::DrawRCKT

; 35   : 	/*
; 36   : 	if(g_bRealisticAvionics)
; 37   : 	{
; 38   : 		DrawMANReticle();
; 39   : 	}
; 40   : 	else
; 41   : 	{
; 42   : 		DrawRCKT();
; 43   : 	}
; 44   : 	*/
; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAirGroundRocket@HudClass@@AAEXXZ ENDP		; HudClass::DrawAirGroundRocket
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gndhud.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?DrawAirGroundGravity@HudClass@@AAEXXZ PROC		; HudClass::DrawAirGroundGravity
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 50   :    switch (FCC->GetSubMode())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 7
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 14			; 0000000eH
	ja	SHORT $LN10@DrawAirGro
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN12@DrawAirGro[edx]
	jmp	DWORD PTR $LN13@DrawAirGro[eax*4]
$LN7@DrawAirGro:

; 51   :    {
; 52   :        case FireControlComputer::CCIP:
; 53   :          DrawCCIP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCCIP@HudClass@@AAEXXZ		; HudClass::DrawCCIP

; 54   :       break;

	jmp	SHORT $LN10@DrawAirGro
$LN6@DrawAirGro:

; 55   : 
; 56   : 		// MLR 6/5/2004 - Shouldn't get in here...
; 57   :       case FireControlComputer::OBSOLETERCKT: // MLR 4/3/2004 - 
; 58   :         DrawRCKT();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawRCKT@HudClass@@AAEXXZ		; HudClass::DrawRCKT

; 59   :       break;

	jmp	SHORT $LN10@DrawAirGro
$LN5@DrawAirGro:

; 60   : 
; 61   :       case FireControlComputer::CCRP:
; 62   :          DrawCCRP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCCRP@HudClass@@AAEXXZ		; HudClass::DrawCCRP

; 63   :       break;

	jmp	SHORT $LN10@DrawAirGro
$LN4@DrawAirGro:

; 64   : 
; 65   :       case FireControlComputer::DTOSS:
; 66   :          DrawDTOSS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDTOSS@HudClass@@AAEXXZ		; HudClass::DrawDTOSS

; 67   :       break;

	jmp	SHORT $LN10@DrawAirGro
$LN3@DrawAirGro:

; 68   : 
; 69   :       case FireControlComputer::LADD:
; 70   :          DrawLADD();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawLADD@HudClass@@AAEXXZ		; HudClass::DrawLADD

; 71   :       break;

	jmp	SHORT $LN10@DrawAirGro
$LN2@DrawAirGro:

; 72   : 
; 73   :       case FireControlComputer::STRAF:
; 74   :          DrawStrafe();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawStrafe@HudClass@@AAEXXZ		; HudClass::DrawStrafe

; 75   :       break;

	jmp	SHORT $LN10@DrawAirGro
$LN1@DrawAirGro:

; 76   : 	  case FireControlComputer::MAN:
; 77   : 		  DrawMANReticle();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMANReticle@HudClass@@QAEXXZ	; HudClass::DrawMANReticle
$LN10@DrawAirGro:

; 78   : 	  break;
; 79   :    }
; 80   : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@DrawAirGro:
	DD	$LN7@DrawAirGro
	DD	$LN5@DrawAirGro
	DD	$LN3@DrawAirGro
	DD	$LN4@DrawAirGro
	DD	$LN6@DrawAirGro
	DD	$LN2@DrawAirGro
	DD	$LN1@DrawAirGro
	DD	$LN10@DrawAirGro
$LN12@DrawAirGro:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	6
?DrawAirGroundGravity@HudClass@@AAEXXZ ENDP		; HudClass::DrawAirGroundGravity
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 501  :         {return (acosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	ebp
	ret	0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
