; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DISPLAYS\Gunhud.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	ORG $+4
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DrawTDCircle@HudClass@@AAEXXZ			; HudClass::DrawTDCircle
PUBLIC	?DrawGuns@HudClass@@AAEXXZ			; HudClass::DrawGuns
PUBLIC	?DrawEEGS@HudClass@@AAEXXZ			; HudClass::DrawEEGS
PUBLIC	?DrawSSLC@HudClass@@AAEXXZ			; HudClass::DrawSSLC
PUBLIC	?DrawFunnel@HudClass@@AAEXXZ			; HudClass::DrawFunnel
PUBLIC	?DrawMRGS@HudClass@@AAEXXZ			; HudClass::DrawMRGS
PUBLIC	?DrawLCOS@HudClass@@AAEXXZ			; HudClass::DrawLCOS
PUBLIC	?DrawLCOSForSSLC@HudClass@@AAEXXZ		; HudClass::DrawLCOSForSSLC
PUBLIC	?DrawSnapshot@HudClass@@AAEXXZ			; HudClass::DrawSnapshot
PUBLIC	?DrawTSymbol@HudClass@@AAEXXZ			; HudClass::DrawTSymbol
PUBLIC	?FlyBullets@HudClass@@AAEXXZ			; HudClass::FlyBullets
PUBLIC	?DrawBATR@HudClass@@AAEXXZ			; HudClass::DrawBATR
PUBLIC	?EEGShistory@HudClass@@AAEMJPAH0@Z		; HudClass::EEGShistory
PUBLIC	?EEGSvalueX@HudClass@@AAEMMHH@Z			; HudClass::EEGSvalueX
PUBLIC	?EEGSvalueY@HudClass@@AAEMMHH@Z			; HudClass::EEGSvalueY
PUBLIC	?EEGSvalueZ@HudClass@@AAEMMHH@Z			; HudClass::EEGSvalueZ
PUBLIC	?EEGSvalueVX@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueVX
PUBLIC	?EEGSvalueVY@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueVY
PUBLIC	?EEGSvalueVZ@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueVZ
PUBLIC	?RadToHudUnitsX@HudClass@@AAEMM@Z		; HudClass::RadToHudUnitsX
PUBLIC	?RadToHudUnitsY@HudClass@@AAEMM@Z		; HudClass::RadToHudUnitsY
PUBLIC	?Ownship@HudClass@@QAEPAVAircraftClass@@XZ	; HudClass::Ownship
PUBLIC	?SetEEGSData@HudClass@@QAEXMMMMMMMM@Z		; HudClass::SetEEGSData
PUBLIC	?FlyFEDSBullets@HudClass@@QAEX_N@Z		; HudClass::FlyFEDSBullets
PUBLIC	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
PUBLIC	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@		; `string'
PUBLIC	??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@		; `string'
PUBLIC	??_C@_06PGJBKLLK@M?5?5015?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@392c987a
PUBLIC	__real@3a83126f
PUBLIC	__real@3b03126f
PUBLIC	__real@3b449ba6
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c449ba6
PUBLIC	__real@3c8efa34
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3cb43958
PUBLIC	__real@3ccccccd
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3deb851f
PUBLIC	__real@3e19999a
PUBLIC	__real@3e333333
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3ee66666
PUBLIC	__real@3f000000
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f266666
PUBLIC	__real@3f400000
PUBLIC	__real@3f533333
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@4096cbe3
PUBLIC	__real@4097700000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fd9
PUBLIC	__real@41200000
PUBLIC	__real@41666229
PUBLIC	__real@4180b53f
PUBLIC	__real@420c0000
PUBLIC	__real@42340000
PUBLIC	__real@42c80000
PUBLIC	__real@43160000
PUBLIC	__real@43480000
PUBLIC	__real@43b40000
PUBLIC	__real@447a0000
PUBLIC	__real@44960000
PUBLIC	__real@44bb8000
PUBLIC	__real@44e10000
PUBLIC	__real@44ffe000
PUBLIC	__real@453b8000
PUBLIC	__real@45bde1b0
PUBLIC	__real@460ca000
PUBLIC	__real@461c4000
PUBLIC	__real@463b8000
PUBLIC	__real@463de1b0
PUBLIC	__real@8000000000000000
PUBLIC	__real@bccccccd
PUBLIC	__real@be4ccccd
PUBLIC	__real@beb851ec
PUBLIC	__real@becccccd
PUBLIC	__real@bedc28f6
PUBLIC	__real@bf266666
PUBLIC	__real@bf400000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0a00000
PUBLIC	__real@c61c4000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_sprintf:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?CalcRelAzEl@@YAXPAVSimBaseClass@@MMMPAM1@Z:PROC ; CalcRelAzEl
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?DrawWindowString@HudClass@@AAEXHPADH@Z:PROC	; HudClass::DrawWindowString
EXTRN	?MRToHudUnits@HudClass@@AAEMM@Z:PROC		; HudClass::MRToHudUnits
EXTRN	?RadToHudUnits@HudClass@@AAEMM@Z:PROC		; HudClass::RadToHudUnits
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?hudWinY@@3PAMA:BYTE				; hudWinY
EXTRN	?hudWinHeight@@3PAMA:BYTE			; hudWinHeight
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
_BSS	SEGMENT
?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB DD 01H DUP (?) ; `HudClass::DrawSSLC'::`4'::tickWidth
_BSS	ENDS
;	COMDAT ?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA
_BSS	SEGMENT
?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA DD 01H DUP (?)	; `HudClass::DrawSSLC'::`4'::$S1
_BSS	ENDS
;	COMDAT ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
_BSS	SEGMENT
?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB DD 01H DUP (?) ; `HudClass::DrawSnapshot'::`2'::tickWidth
_BSS	ENDS
;	COMDAT ?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA
_BSS	SEGMENT
?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA DD 01H DUP (?) ; `HudClass::DrawSnapshot'::`2'::$S2
_BSS	ENDS
;	COMDAT ?tickWidth@?1??DrawBATR@HudClass@@AAEXXZ@4MB
_BSS	SEGMENT
?tickWidth@?1??DrawBATR@HudClass@@AAEXXZ@4MB DD 01H DUP (?) ; `HudClass::DrawBATR'::`2'::tickWidth
_BSS	ENDS
;	COMDAT ?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA
_BSS	SEGMENT
?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA DD 01H DUP (?)	; `HudClass::DrawBATR'::`2'::$S3
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c61c4000
CONST	SEGMENT
__real@c61c4000 DD 0c61c4000r			; -10000
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bedc28f6
CONST	SEGMENT
__real@bedc28f6 DD 0bedc28f6r			; -0.43
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@beb851ec
CONST	SEGMENT
__real@beb851ec DD 0beb851ecr			; -0.36
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@463de1b0
CONST	SEGMENT
__real@463de1b0 DD 0463de1b0r			; 12152.4
CONST	ENDS
;	COMDAT __real@463b8000
CONST	SEGMENT
__real@463b8000 DD 0463b8000r			; 12000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@460ca000
CONST	SEGMENT
__real@460ca000 DD 0460ca000r			; 9000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@453b8000
CONST	SEGMENT
__real@453b8000 DD 0453b8000r			; 3000
CONST	ENDS
;	COMDAT __real@44ffe000
CONST	SEGMENT
__real@44ffe000 DD 044ffe000r			; 2047
CONST	ENDS
;	COMDAT __real@44e10000
CONST	SEGMENT
__real@44e10000 DD 044e10000r			; 1800
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@44960000
CONST	SEGMENT
__real@44960000 DD 044960000r			; 1200
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42340000
CONST	SEGMENT
__real@42340000 DD 042340000r			; 45
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@4180b53f
CONST	SEGMENT
__real@4180b53f DD 04180b53fr			; 16.0885
CONST	ENDS
;	COMDAT __real@41666229
CONST	SEGMENT
__real@41666229 DD 041666229r			; 14.399
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4097700000000000
CONST	SEGMENT
__real@4097700000000000 DQ 04097700000000000r	; 1500
CONST	ENDS
;	COMDAT __real@4096cbe3
CONST	SEGMENT
__real@4096cbe3 DD 04096cbe3r			; 4.71239
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f533333
CONST	SEGMENT
__real@3f533333 DD 03f533333r			; 0.825
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e333333
CONST	SEGMENT
__real@3e333333 DD 03e333333r			; 0.175
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3deb851f
CONST	SEGMENT
__real@3deb851f DD 03deb851fr			; 0.115
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@3cb43958
CONST	SEGMENT
__real@3cb43958 DD 03cb43958r			; 0.022
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c449ba6
CONST	SEGMENT
__real@3c449ba6 DD 03c449ba6r			; 0.012
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3b449ba6
CONST	SEGMENT
__real@3b449ba6 DD 03b449ba6r			; 0.003
CONST	ENDS
;	COMDAT __real@3b03126f
CONST	SEGMENT
__real@3b03126f DD 03b03126fr			; 0.002
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?TC@?3??DrawFunnel@HudClass@@AAEXXZ@4MB
CONST	SEGMENT
?TC@?3??DrawFunnel@HudClass@@AAEXXZ@4MB DD 03f000000r ; 0.5 ; `HudClass::DrawFunnel'::`4'::TC
CONST	ENDS
;	COMDAT ??_C@_06PGJBKLLK@M?5?5015?$AA@
CONST	SEGMENT
??_C@_06PGJBKLLK@M?5?5015?$AA@ DB 'M  015', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@
CONST	SEGMENT
??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@ DB 'F %03.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
CONST	SEGMENT
??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@ DB 'F %4.1f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?DrawBATR@HudClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawBATR@HudClass@@AAEXXZ$0
__unwindtable$?DrawSnapshot@HudClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawSnapshot@HudClass@@AAEXXZ$0
__unwindtable$?DrawSSLC@HudClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawSSLC@HudClass@@AAEXXZ$0
__ehfuncinfo$?DrawBATR@HudClass@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DrawBATR@HudClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DrawSnapshot@HudClass@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DrawSnapshot@HudClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DrawSSLC@HudClass@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DrawSSLC@HudClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ PROC ; SMSBaseClass::MasterArm, COMDAT
; _this$ = ecx

; 92   : 	MasterArmState MasterArm(void) {return masterArm;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ENDP ; SMSBaseClass::MasterArm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetSubMode, COMDAT
; _this$ = ecx

; 281  : 	FCCSubMode GetSubMode (void) {return (subMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_lastZ$ = -136						; size = 4
_lastY$ = -132						; size = 4
_lastX$ = -128						; size = 4
tv391 = -124						; size = 4
tv558 = -120						; size = 4
tv433 = -116						; size = 4
tv506 = -112						; size = 4
tv556 = -108						; size = 4
tv564 = -104						; size = 4
tv399 = -100						; size = 4
_rz$ = -96						; size = 4
tv425 = -92						; size = 4
tv493 = -88						; size = 4
tv420 = -84						; size = 4
tv446 = -80						; size = 4
tv412 = -76						; size = 4
tv562 = -72						; size = 4
tv554 = -68						; size = 4
tv441 = -64						; size = 4
tv552 = -60						; size = 4
tv560 = -56						; size = 4
tv404 = -52						; size = 4
_dt$ = -48						; size = 4
_ry$ = -44						; size = 4
_rx$ = -40						; size = 4
_dy$ = -36						; size = 4
_dx$ = -32						; size = 4
_tf$ = -28						; size = 4
_before$ = -24						; size = 4
_after$ = -20						; size = 4
_interp$ = -16						; size = 4
_dz$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_NewBullets$ = 8					; size = 1
?FlyFEDSBullets@HudClass@@QAEX_N@Z PROC			; HudClass::FlyFEDSBullets
; _this$ = ecx

; 1004 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1005 : int			i;
; 1006 : SIM_LONG	dt;
; 1007 : float		tf;
; 1008 : 
; 1009 : int			before, after;
; 1010 : float		interp;
; 1011 : 
; 1012 : float		dx, dy, dz;
; 1013 : float		lastX, lastY, lastZ;
; 1014 : float		rx, ry, rz;
; 1015 : 
; 1016 : 	// Fly out a bunch of bullets
; 1017 : 	for (i=0; i<NumEEGSSegments/4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@FlyFEDSBul
$LN5@FlyFEDSBul:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@FlyFEDSBul:
	cmp	DWORD PTR _i$[ebp], 6
	jge	$LN4@FlyFEDSBul

; 1018 : 	{
; 1019 : 		dt = EEGSTimePerSegment * (i+1);	// ms

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 200				; 000000c8H
	mov	DWORD PTR _dt$[ebp], ecx

; 1020 : 		tf = dt * 0.001F;					// seconds

	cvtsi2ss xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _tf$[ebp], xmm0

; 1021 : 
; 1022 : 		// Get the interpolation parameters for the required time
; 1023 : 		interp = EEGShistory( dt, &before, &after );

	lea	edx, DWORD PTR _after$[ebp]
	push	edx
	lea	eax, DWORD PTR _before$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGShistory@HudClass@@AAEMJPAH0@Z	; HudClass::EEGShistory
	fstp	DWORD PTR _interp$[ebp]

; 1024 : 
; 1025 : 		// find bullet's relative position
; 1026 : 		if(NewBullets)

	movzx	edx, BYTE PTR _NewBullets$[ebp]
	test	edx, edx
	je	$LN3@FlyFEDSBul

; 1027 : 		{
; 1028 : 			dx = EEGSvalueVX( interp, before, after )*tf + EEGSvalueX( interp, before, after ) - ownship->XPos();

	mov	eax, DWORD PTR _after$[ebp]
	push	eax
	mov	ecx, DWORD PTR _before$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGSvalueVX@HudClass@@AAEMMHH@Z	; HudClass::EEGSvalueVX
	fstp	DWORD PTR tv391[ebp]
	movss	xmm0, DWORD PTR tv391[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mov	edx, DWORD PTR _after$[ebp]
	push	edx
	mov	eax, DWORD PTR _before$[ebp]
	push	eax
	push	ecx
	movss	xmm1, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv552[ebp], xmm0
	call	?EEGSvalueX@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueX
	fstp	DWORD PTR tv399[ebp]
	movss	xmm0, DWORD PTR tv552[ebp]
	addss	xmm0, DWORD PTR tv399[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv554[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv554[ebp]
	subss	xmm0, DWORD PTR tv404[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1029 : 			dy = EEGSvalueVY( interp, before, after )*tf + EEGSvalueY( interp, before, after ) - ownship->YPos();

	mov	edx, DWORD PTR _after$[ebp]
	push	edx
	mov	eax, DWORD PTR _before$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGSvalueVY@HudClass@@AAEMMHH@Z	; HudClass::EEGSvalueVY
	fstp	DWORD PTR tv412[ebp]
	movss	xmm0, DWORD PTR tv412[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mov	ecx, DWORD PTR _after$[ebp]
	push	ecx
	mov	edx, DWORD PTR _before$[ebp]
	push	edx
	push	ecx
	movss	xmm1, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv556[ebp], xmm0
	call	?EEGSvalueY@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueY
	fstp	DWORD PTR tv420[ebp]
	movss	xmm0, DWORD PTR tv556[ebp]
	addss	xmm0, DWORD PTR tv420[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv558[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv425[ebp]
	movss	xmm0, DWORD PTR tv558[ebp]
	subss	xmm0, DWORD PTR tv425[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1030 : 			dz = EEGSvalueVZ( interp, before, after )*tf + EEGSvalueZ( interp, before, after ) - ownship->ZPos();

	mov	ecx, DWORD PTR _after$[ebp]
	push	ecx
	mov	edx, DWORD PTR _before$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGSvalueVZ@HudClass@@AAEMMHH@Z	; HudClass::EEGSvalueVZ
	fstp	DWORD PTR tv433[ebp]
	movss	xmm0, DWORD PTR tv433[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mov	eax, DWORD PTR _after$[ebp]
	push	eax
	mov	ecx, DWORD PTR _before$[ebp]
	push	ecx
	push	ecx
	movss	xmm1, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv560[ebp], xmm0
	call	?EEGSvalueZ@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueZ
	fstp	DWORD PTR tv441[ebp]
	movss	xmm0, DWORD PTR tv560[ebp]
	addss	xmm0, DWORD PTR tv441[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv562[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv446[ebp]
	movss	xmm0, DWORD PTR tv562[ebp]
	subss	xmm0, DWORD PTR tv446[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1031 : 			lastX = dx;

	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _lastX$[ebp], xmm0

; 1032 : 			lastY = dy;

	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _lastY$[ebp], xmm0

; 1033 : 			lastZ = dz;

	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _lastZ$[ebp], xmm0
$LN3@FlyFEDSBul:

; 1034 : 		}
; 1035 : 
; 1036 : 		// Gravity Drop
; 1037 : 		dz += GRAVITY * 0.5F * tf * tf;

	movss	xmm0, DWORD PTR __real@4180b53f
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1038 : 
; 1039 : 		if(NewBullets)

	movzx	eax, BYTE PTR _NewBullets$[ebp]
	test	eax, eax
	je	$LN2@FlyFEDSBul

; 1040 : 		{
; 1041 : 			// Rotate the bullet's relative position into body space
; 1042 : 			rx = ownship->dmx[0][0]*dx + ownship->dmx[0][1]*dy + ownship->dmx[0][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 1043 : 			ry = ownship->dmx[1][0]*dx + ownship->dmx[1][1]*dy + ownship->dmx[1][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 1044 : 			rz = ownship->dmx[2][0]*dx + ownship->dmx[2][1]*dy + ownship->dmx[2][2]*dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	imul	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 1
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0
$LN2@FlyFEDSBul:

; 1045 : 		}
; 1046 : 		/*else
; 1047 : 		{
; 1048 : 			//TODO
; 1049 : 			//Make this so the bullets fly based on their last position
; 1050 : 			rx = ownship->dmx[0][0]*lastX + ownship->dmx[0][1]*lastY + ownship->dmx[0][2]*dz;
; 1051 : 			ry = ownship->dmx[1][0]*lastX + ownship->dmx[1][1]*lastY + ownship->dmx[1][2]*dz;
; 1052 : 			rz = ownship->dmx[2][0]*lastX + ownship->dmx[2][1]*lastY + ownship->dmx[2][2]*dz;
; 1053 : 		}*/
; 1054 : 
; 1055 : 		// Store the HUD space projection of the bullet's position and it's range
; 1056 : 		bulletH[i] = RadToHudUnitsX((float)atan2 (ry,rx));

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv493[ebp]
	fld	DWORD PTR tv493[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+ecx*4+64]

; 1057 : 		bulletV[i] = RadToHudUnitsY((float)atan (-rz/(float)sqrt(rx*rx+ry*ry+ 0.1f)));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv564[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv506[ebp]
	movss	xmm0, DWORD PTR tv564[ebp]
	divss	xmm0, DWORD PTR tv506[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax*4+160]

; 1058 : 
; 1059 : 		if(NewBullets)

	movzx	edx, BYTE PTR _NewBullets$[ebp]
	test	edx, edx
	je	$LN1@FlyFEDSBul

; 1060 : 		{
; 1061 : 			display->Circle(bulletH[i] + funnel1X[i], bulletV[i] + funnel1Y[i], 0.003F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3b449ba6
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+160]
	addss	xmm0, DWORD PTR [esi+edx*4+448]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+64]
	addss	xmm0, DWORD PTR [esi+edx*4+352]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 1062 : 			display->Circle(bulletH[i] + funnel2X[i], bulletV[i] + funnel2Y[i], 0.003F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3b449ba6
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+160]
	addss	xmm0, DWORD PTR [esi+edx*4+640]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+64]
	addss	xmm0, DWORD PTR [esi+edx*4+544]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx
$LN1@FlyFEDSBul:

; 1063 : 		}
; 1064 : 			//display->Circle(funnel1X[i], funnel1Y[i], 0.005F);
; 1065 : 	}

	jmp	$LN5@FlyFEDSBul
$LN4@FlyFEDSBul:

; 1066 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?FlyFEDSBullets@HudClass@@QAEX_N@Z ENDP			; HudClass::FlyFEDSBullets
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_trigPsi$ = -52						; size = 8
_trigSigma$ = -44					; size = 8
_trigTheta$ = -36					; size = 8
_trigGamma$ = -28					; size = 8
_dz$ = -20						; size = 4
_dy$ = -16						; size = 4
_dx$ = -12						; size = 4
_initVel$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_gamma$ = 20						; size = 4
_sigma$ = 24						; size = 4
_theta$ = 28						; size = 4
_psi$ = 32						; size = 4
_vt$ = 36						; size = 4
?SetEEGSData@HudClass@@QAEXMMMMMMMM@Z PROC		; HudClass::SetEEGSData
; _this$ = ecx

; 891  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 892  : 	mlTrig	trigGamma, trigSigma, trigTheta, trigPsi;
; 893  : 	float	dx, dy, dz, initVel;
; 894  : 
; 895  : 	// If the HUD is drawing (ie: the player is here), we'd assume we have a gun on this airplane...
; 896  : 	ShiAssert( ownship );
; 897  : 	ShiAssert( ownship->Guns );
; 898  : 
; 899  : 
; 900  : 	// See if we should update the same record or advance to a new one
; 901  : 	if (SimLibElapsedTime - lastEEGSstepTime >= EEGSUpdateTime) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+4828]
	cmp	ecx, 33					; 00000021H
	jb	SHORT $LN5@SetEEGSDat

; 902  : 		// Advance to the next slot in our circular buffer
; 903  : 		if (eegsFrameNum < NumEEGSFrames-1)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4824], 145		; 00000091H
	jge	SHORT $LN4@SetEEGSDat

; 904  : 			eegsFrameNum++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4824]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4824], ecx

; 905  : 		else

	jmp	SHORT $LN3@SetEEGSDat
$LN4@SetEEGSDat:

; 906  : 			eegsFrameNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4824], 0
$LN3@SetEEGSDat:

; 907  : 
; 908  : 		lastEEGSstepTime = SimLibElapsedTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [ecx+4828], edx
$LN5@SetEEGSDat:

; 909  : 	}
; 910  : 	
; 911  : 	/*-------------*/
; 912  : 	/* Sample Time */
; 913  : 	/*-------------*/
; 914  : 	eegsFrameArray[eegsFrameNum].time = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4824]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+ecx+736], eax

; 915  : 
; 916  : 	/*-----------------*/
; 917  : 	/* Firing Position */
; 918  : 	/*-----------------*/
; 919  : 	eegsFrameArray[eegsFrameNum].x = x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+edx+740], xmm0

; 920  : 	eegsFrameArray[eegsFrameNum].y = y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+edx+744], xmm0

; 921  : 	eegsFrameArray[eegsFrameNum].z = z;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+edx+748], xmm0

; 922  : 
; 923  : 	/*-------------*/
; 924  : 	/* Initial Vel */
; 925  : 	/*-------------*/
; 926  : 	mlSinCos (&trigGamma, gamma);

	push	ecx
	movss	xmm0, DWORD PTR _gamma$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigGamma$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 927  : 	mlSinCos (&trigSigma, sigma);

	add	esp, 4
	movss	xmm0, DWORD PTR _sigma$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trigSigma$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 928  : 	mlSinCos (&trigTheta, theta);

	add	esp, 4
	movss	xmm0, DWORD PTR _theta$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trigTheta$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 929  : 	mlSinCos (&trigPsi,   psi);

	add	esp, 4
	movss	xmm0, DWORD PTR _psi$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trigPsi$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 930  : 
; 931  : 	// Aircraft Vel
; 932  : 	dx =  vt * trigGamma.cos * trigSigma.cos;

	movss	xmm0, DWORD PTR _vt$[ebp]
	mulss	xmm0, DWORD PTR _trigGamma$[ebp+4]
	mulss	xmm0, DWORD PTR _trigSigma$[ebp+4]
	movss	DWORD PTR _dx$[ebp], xmm0

; 933  : 	dy =  vt * trigGamma.cos * trigSigma.sin;

	movss	xmm0, DWORD PTR _vt$[ebp]
	mulss	xmm0, DWORD PTR _trigGamma$[ebp+4]
	mulss	xmm0, DWORD PTR _trigSigma$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 934  : 	dz = -vt * trigGamma.sin;

	movss	xmm0, DWORD PTR _vt$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _trigGamma$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 935  : 	
; 936  : 	// Muzzle Vel (cheaper to use the dmx matrix for this, but we'll leave it for now)
; 937  :    if (ownship->Guns)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	DWORD PTR [eax+944], 0
	je	SHORT $LN2@SetEEGSDat

; 938  :       initVel = ownship->Guns->initBulletVelocity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+944]
	movss	xmm0, DWORD PTR [eax+792]
	movss	DWORD PTR _initVel$[ebp], xmm0

; 939  :    else

	jmp	SHORT $LN1@SetEEGSDat
$LN2@SetEEGSDat:

; 940  :       initVel = 3000.0F;

	movss	xmm0, DWORD PTR __real@453b8000
	movss	DWORD PTR _initVel$[ebp], xmm0
$LN1@SetEEGSDat:

; 941  : 	dx += initVel * trigTheta.cos * trigPsi.cos;

	movss	xmm0, DWORD PTR _initVel$[ebp]
	mulss	xmm0, DWORD PTR _trigTheta$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPsi$[ebp+4]
	addss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 942  : 	dy += initVel * trigTheta.cos * trigPsi.sin;

	movss	xmm0, DWORD PTR _initVel$[ebp]
	mulss	xmm0, DWORD PTR _trigTheta$[ebp+4]
	mulss	xmm0, DWORD PTR _trigPsi$[ebp]
	addss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 943  : 	dz -= initVel * trigTheta.sin;

	movss	xmm0, DWORD PTR _initVel$[ebp]
	mulss	xmm0, DWORD PTR _trigTheta$[ebp]
	movss	xmm1, DWORD PTR _dz$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _dz$[ebp], xmm1

; 944  : 
; 945  : 	eegsFrameArray[eegsFrameNum].vx = dx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [eax+edx+752], xmm0

; 946  : 	eegsFrameArray[eegsFrameNum].vy = dy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [eax+edx+756], xmm0

; 947  : 	eegsFrameArray[eegsFrameNum].vz = dz;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR [eax+edx+760], xmm0

; 948  : }

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?SetEEGSData@HudClass@@QAEXMMMMMMMM@Z ENDP		; HudClass::SetEEGSData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?Ownship@HudClass@@QAEPAVAircraftClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Ownship@HudClass@@QAEPAVAircraftClass@@XZ PROC		; HudClass::Ownship, COMDAT
; _this$ = ecx

; 253  : 	AircraftClass*	Ownship(void) {return ownship;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	esp, ebp
	pop	ebp
	ret	0
?Ownship@HudClass@@QAEPAVAircraftClass@@XZ ENDP		; HudClass::Ownship
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?RadToHudUnitsY@HudClass@@AAEMM@Z
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_mr$ = 8						; size = 4
?RadToHudUnitsY@HudClass@@AAEMM@Z PROC			; HudClass::RadToHudUnitsY, COMDAT
; _this$ = ecx

; 220  : 	float	RadToHudUnitsY (float mr)	{ return RadToHudUnits(mr) * mVScale; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _mr$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+5184]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?RadToHudUnitsY@HudClass@@AAEMM@Z ENDP			; HudClass::RadToHudUnitsY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?RadToHudUnitsX@HudClass@@AAEMM@Z
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_mr$ = 8						; size = 4
?RadToHudUnitsX@HudClass@@AAEMM@Z PROC			; HudClass::RadToHudUnitsX, COMDAT
; _this$ = ecx

; 219  : 	float	RadToHudUnitsX (float mr)	{ return RadToHudUnits(mr) * mHScale; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _mr$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+5188]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?RadToHudUnitsX@HudClass@@AAEMM@Z ENDP			; HudClass::RadToHudUnitsX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?EEGSvalueVZ@HudClass@@AAEMMHH@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_before$ = 12						; size = 4
_after$ = 16						; size = 4
?EEGSvalueVZ@HudClass@@AAEMMHH@Z PROC			; HudClass::EEGSvalueVZ, COMDAT
; _this$ = ecx

; 213  : 		  { return eegsFrameArray[after].vz + t * (eegsFrameArray[before].vz-eegsFrameArray[after].vz); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _after$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _before$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+760]
	subss	xmm0, DWORD PTR [edi+edx+760]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+760]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGSvalueVZ@HudClass@@AAEMMHH@Z ENDP			; HudClass::EEGSvalueVZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?EEGSvalueVY@HudClass@@AAEMMHH@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_before$ = 12						; size = 4
_after$ = 16						; size = 4
?EEGSvalueVY@HudClass@@AAEMMHH@Z PROC			; HudClass::EEGSvalueVY, COMDAT
; _this$ = ecx

; 211  : 		  { return eegsFrameArray[after].vy + t * (eegsFrameArray[before].vy-eegsFrameArray[after].vy); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _after$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _before$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+756]
	subss	xmm0, DWORD PTR [edi+edx+756]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+756]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGSvalueVY@HudClass@@AAEMMHH@Z ENDP			; HudClass::EEGSvalueVY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?EEGSvalueVX@HudClass@@AAEMMHH@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_before$ = 12						; size = 4
_after$ = 16						; size = 4
?EEGSvalueVX@HudClass@@AAEMMHH@Z PROC			; HudClass::EEGSvalueVX, COMDAT
; _this$ = ecx

; 209  : 		  { return eegsFrameArray[after].vx + t * (eegsFrameArray[before].vx-eegsFrameArray[after].vx); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _after$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _before$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+752]
	subss	xmm0, DWORD PTR [edi+edx+752]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+752]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGSvalueVX@HudClass@@AAEMMHH@Z ENDP			; HudClass::EEGSvalueVX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?EEGSvalueZ@HudClass@@AAEMMHH@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_before$ = 12						; size = 4
_after$ = 16						; size = 4
?EEGSvalueZ@HudClass@@AAEMMHH@Z PROC			; HudClass::EEGSvalueZ, COMDAT
; _this$ = ecx

; 207  : 		  { return eegsFrameArray[after].z + t * (eegsFrameArray[before].z-eegsFrameArray[after].z); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _after$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _before$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+748]
	subss	xmm0, DWORD PTR [edi+edx+748]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+748]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGSvalueZ@HudClass@@AAEMMHH@Z ENDP			; HudClass::EEGSvalueZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?EEGSvalueY@HudClass@@AAEMMHH@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_before$ = 12						; size = 4
_after$ = 16						; size = 4
?EEGSvalueY@HudClass@@AAEMMHH@Z PROC			; HudClass::EEGSvalueY, COMDAT
; _this$ = ecx

; 205  : 		  { return eegsFrameArray[after].y + t * (eegsFrameArray[before].y-eegsFrameArray[after].y); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _after$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _before$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+744]
	subss	xmm0, DWORD PTR [edi+edx+744]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+744]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGSvalueY@HudClass@@AAEMMHH@Z ENDP			; HudClass::EEGSvalueY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?EEGSvalueX@HudClass@@AAEMMHH@Z
_TEXT	SEGMENT
tv90 = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_before$ = 12						; size = 4
_after$ = 16						; size = 4
?EEGSvalueX@HudClass@@AAEMMHH@Z PROC			; HudClass::EEGSvalueX, COMDAT
; _this$ = ecx

; 203  : 		  { return eegsFrameArray[after].x + t * (eegsFrameArray[before].x-eegsFrameArray[after].x); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _after$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _before$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+740]
	subss	xmm0, DWORD PTR [edi+edx+740]
	mulss	xmm0, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+740]
	movss	DWORD PTR tv90[ebp], xmm0
	fld	DWORD PTR tv90[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGSvalueX@HudClass@@AAEMMHH@Z ENDP			; HudClass::EEGSvalueX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_t$ = -24						; size = 4
_time$ = -20						; size = 4
_after$ = -16						; size = 4
_this$ = -12						; size = 4
_before$ = -8						; size = 4
_i$ = -4						; size = 4
_dt$ = 8						; size = 4
_beforeIndex$ = 12					; size = 4
_afterIndex$ = 16					; size = 4
?EEGShistory@HudClass@@AAEMJPAH0@Z PROC			; HudClass::EEGShistory
; _this$ = ecx

; 953  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 954  : 	SIM_LONG	time;
; 955  : 	float		t;
; 956  : 	int			i;
; 957  : 	int			before = -1;

	mov	DWORD PTR _before$[ebp], -1

; 958  : 	int			after;
; 959  : 
; 960  : 	// Convert from ms ago to a sim time
; 961  : 	time = SimLibElapsedTime - dt;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR _dt$[ebp]
	mov	DWORD PTR _time$[ebp], eax

; 962  : 
; 963  : 	// Search from newest back to oldest
; 964  : 	for (i = eegsFrameNum; i>=0; i--) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN14@EEGShistor
$LN13@EEGShistor:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@EEGShistor:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN12@EEGShistor

; 965  : 		if (eegsFrameArray[i].time < time) {

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+736]
	cmp	eax, DWORD PTR _time$[ebp]
	jge	SHORT $LN11@EEGShistor

; 966  : 			before = i;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _before$[ebp], ecx

; 967  : 			break;

	jmp	SHORT $LN12@EEGShistor
$LN11@EEGShistor:

; 968  : 		}
; 969  : 	}

	jmp	SHORT $LN13@EEGShistor
$LN12@EEGShistor:

; 970  : 	if (before == -1) {

	cmp	DWORD PTR _before$[ebp], -1
	jne	SHORT $LN7@EEGShistor

; 971  : 		for (i=NumEEGSFrames-1; i>eegsFrameNum; i--) {

	mov	DWORD PTR _i$[ebp], 145			; 00000091H
	jmp	SHORT $LN9@EEGShistor
$LN8@EEGShistor:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@EEGShistor:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4824]
	jle	SHORT $LN7@EEGShistor

; 972  : 			if (eegsFrameArray[i].time < time) {

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+736]
	cmp	ecx, DWORD PTR _time$[ebp]
	jge	SHORT $LN6@EEGShistor

; 973  : 				before = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _before$[ebp], edx

; 974  : 				break;

	jmp	SHORT $LN7@EEGShistor
$LN6@EEGShistor:

; 975  : 			}
; 976  : 		}

	jmp	SHORT $LN8@EEGShistor
$LN7@EEGShistor:

; 977  : 	}
; 978  : 
; 979  : 	// Handle no data case
; 980  : 	if (before == -1) {

	cmp	DWORD PTR _before$[ebp], -1
	jne	SHORT $LN3@EEGShistor

; 981  : 		if (eegsFrameNum < NumEEGSFrames-1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4824], 145		; 00000091H
	jge	SHORT $LN4@EEGShistor

; 982  : 			before = eegsFrameNum+1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4824]
	add	edx, 1
	mov	DWORD PTR _before$[ebp], edx

; 983  : 		else

	jmp	SHORT $LN3@EEGShistor
$LN4@EEGShistor:

; 984  : 			before = 0;

	mov	DWORD PTR _before$[ebp], 0
$LN3@EEGShistor:

; 985  : 	}
; 986  : 
; 987  : 	// Find the time just after the "before" case
; 988  : 	if (before < NumEEGSFrames-1)

	cmp	DWORD PTR _before$[ebp], 145		; 00000091H
	jge	SHORT $LN2@EEGShistor

; 989  : 		after = before+1;

	mov	eax, DWORD PTR _before$[ebp]
	add	eax, 1
	mov	DWORD PTR _after$[ebp], eax

; 990  : 	else

	jmp	SHORT $LN1@EEGShistor
$LN2@EEGShistor:

; 991  : 		after = 0;

	mov	DWORD PTR _after$[ebp], 0
$LN1@EEGShistor:

; 992  : 
; 993  : 	*beforeIndex = before;

	mov	ecx, DWORD PTR _beforeIndex$[ebp]
	mov	edx, DWORD PTR _before$[ebp]
	mov	DWORD PTR [ecx], edx

; 994  : 	*afterIndex = after;

	mov	eax, DWORD PTR _afterIndex$[ebp]
	mov	ecx, DWORD PTR _after$[ebp]
	mov	DWORD PTR [eax], ecx

; 995  : 
; 996  : 	// Now compute the percentage from after toward before that "time" is
; 997  : 	t = (eegsFrameArray[after].time - time) / 
; 998  : 		(float)(eegsFrameArray[after].time - eegsFrameArray[before].time);

	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+736]
	sub	ecx, DWORD PTR _time$[ebp]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _after$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _before$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+736]
	sub	edx, DWORD PTR [esi+eax+736]
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	movss	DWORD PTR _t$[ebp], xmm0

; 999  : 
; 1000 : 	return t;

	fld	DWORD PTR _t$[ebp]

; 1001 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?EEGShistory@HudClass@@AAEMJPAH0@Z ENDP			; HudClass::EEGShistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_tf$ = -48						; size = 4
_range$ = -44						; size = 4
_xPos$ = -40						; size = 4
_yPos$ = -36						; size = 4
_interp$ = -32						; size = 4
_tfms$ = -28						; size = 4
tv80 = -24						; size = 4
_idx$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DrawBATR@HudClass@@AAEXXZ PROC				; HudClass::DrawBATR
; _this$ = ecx

; 1069 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DrawBATR@HudClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1070 : 	float	tf, range, interp;
; 1071 : 	float	xPos, yPos;		// The HUD space location of the hypothetical bullet in flight
; 1072 : 	int		tfms, idx;
; 1073 : 	//float	radius;
; 1074 : 
; 1075 : 	//display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1076 : 	//	hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));
; 1077 : 
; 1078 : 	// Continuously Computed Impact Line
; 1079 : 	static const float tickWidth = MRToHudUnits(5.0F);

	mov	eax, DWORD PTR ?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA
	and	eax, 1
	jne	SHORT $LN4@DrawBATR
	mov	ecx, DWORD PTR ?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR ?tickWidth@?1??DrawBATR@HudClass@@AAEXXZ@4MB
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN4@DrawBATR:

; 1080 : 
; 1081 : 	static const int	idx1 =  500 / EEGSTimePerSegment;
; 1082 : 	static const int	idx2 = 1000 / EEGSTimePerSegment;
; 1083 : 	static const int	idx3 = 1500 / EEGSTimePerSegment;
; 1084 : //	ShiAssert( idx3 < NumEEGSSegments );
; 1085 : /*
; 1086 : 	display->Line(	0.0F, 0.0F, bulletH[idx1], bulletV[idx1]);
; 1087 : 	display->Line(	bulletH[idx1] - tickWidth, bulletV[idx1], bulletH[idx1] + tickWidth, bulletV[idx1]);
; 1088 : 
; 1089 : 	display->Line(	bulletH[idx1], bulletV[idx1], bulletH[idx2], bulletV[idx2]);
; 1090 : 	display->Line(	bulletH[idx2] - tickWidth, bulletV[idx2], bulletH[idx2] + tickWidth, bulletV[idx2]);
; 1091 : 
; 1092 : 	display->Line(	bulletH[idx2], bulletV[idx2], bulletH[idx3], bulletV[idx3]);
; 1093 : 	display->Line(	bulletH[idx3] - tickWidth, bulletV[idx3], bulletH[idx3] + tickWidth, bulletV[idx3]);
; 1094 : */
; 1095 : 	// Pipper, 1 TOF in the future
; 1096 : 	if (targetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN3@DrawBATR

; 1097 : 		range = min(targetData->range, 9000.0f);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR __real@460ca000
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	SHORT $LN7@DrawBATR
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN8@DrawBATR
$LN7@DrawBATR:
	movss	xmm0, DWORD PTR __real@460ca000
	movss	DWORD PTR tv80[ebp], xmm0
$LN8@DrawBATR:
	movss	xmm0, DWORD PTR tv80[ebp]
	movss	DWORD PTR _range$[ebp], xmm0
$LN3@DrawBATR:

; 1098 : 	/*else
; 1099 : 		range = 1500.0F; */
; 1100 : 
; 1101 : 	// How long to fly to the chosen range (neglecting gravity)?
; 1102 : 	ShiAssert(FALSE == F4IsBadReadPtr(ownship->Guns, sizeof *ownship->Guns)); // JPO
; 1103 : 	tf = range / ownship->Guns->initBulletVelocity;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+944]
	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR [eax+792]
	movss	DWORD PTR _tf$[ebp], xmm0

; 1104 : 	tfms = FloatToInt32(tf*1000.0f);

	movss	xmm0, DWORD PTR _tf$[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _tfms$[ebp], eax

; 1105 : 
; 1106 : 	// Which bullet index to use
; 1107 : 	idx		= tfms / EEGSTimePerSegment - 1;

	mov	eax, DWORD PTR _tfms$[ebp]
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx
	sub	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 1108 : 	if (idx > NumEEGSSegments-2) 

	cmp	DWORD PTR _idx$[ebp], 22		; 00000016H
	jle	SHORT $LN2@DrawBATR

; 1109 : 		idx = NumEEGSSegments-2;

	mov	DWORD PTR _idx$[ebp], 22		; 00000016H
$LN2@DrawBATR:

; 1110 : 	if (idx < 0)

	cmp	DWORD PTR _idx$[ebp], 0
	jge	SHORT $LN1@DrawBATR

; 1111 : 		idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN1@DrawBATR:

; 1112 : 
; 1113 : 	// How to interpolate/extrapolate between the two bullet records
; 1114 : 	interp	= (float)((tfms - (idx+1) * EEGSTimePerSegment)) / EEGSTimePerSegment;

	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	imul	edx, 200				; 000000c8H
	mov	eax, DWORD PTR _tfms$[ebp]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR _interp$[ebp], xmm0

; 1115 : 
; 1116 : 	// Draw the range pipper
; 1117 : 	xPos = bulletH[idx] + (bulletH[idx + 1] - bulletH[idx]) * interp;

	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+68]
	subss	xmm0, DWORD PTR [esi+eax*4+64]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4+64]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 1118 : 	yPos = bulletV[idx] + (bulletV[idx + 1] - bulletV[idx]) * interp;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+164]
	subss	xmm0, DWORD PTR [esi+edx*4+160]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4+160]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 1119 : 	display->Circle (xPos, yPos, 0.002F);  // Inner dot

	push	ecx
	movss	xmm0, DWORD PTR __real@3b03126f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 1120 : 	display->Circle (xPos, yPos, 0.022F);  //0.012F

	push	ecx
	movss	xmm0, DWORD PTR __real@3cb43958
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 1121 : 
; 1122 : 	// If we DON'T have a locked target, draw a cirle showing default wing span at default range (1500.0f)
; 1123 :  /*	if( targetPtr == NULL )
; 1124 : 	{
; 1125 : 		// Decide how big the default target would be at the default range
; 1126 : 		// First in radians, then in HUD viewport space units.
; 1127 : 		radius = (float)atan2( DefaultTargetSpan*0.5f, 1500.0f );
; 1128 : 		radius = RadToHudUnits(radius);
; 1129 : 		display->Circle (xPos, yPos, radius);
; 1130 : 	} */
; 1131 : 
; 1132 : 	
; 1133 : 	// Put the viewport origin back where it was
; 1134 : 	//display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1135 : 	//	hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));
; 1136 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DrawBATR@HudClass@@AAEXXZ$0:
	mov	eax, DWORD PTR ?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S3@?1??DrawBATR@HudClass@@AAEXXZ@4IA, eax
	ret	0
__ehhandler$?DrawBATR@HudClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DrawBATR@HudClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DrawBATR@HudClass@@AAEXXZ ENDP				; HudClass::DrawBATR
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
tv457 = -124						; size = 4
tv489 = -120						; size = 4
tv444 = -116						; size = 4
tv400 = -112						; size = 4
tv487 = -108						; size = 4
tv395 = -104						; size = 4
tv485 = -100						; size = 4
tv387 = -96						; size = 4
tv379 = -92						; size = 4
tv483 = -88						; size = 4
tv374 = -84						; size = 4
tv481 = -80						; size = 4
tv366 = -76						; size = 4
tv358 = -72						; size = 4
tv479 = -68						; size = 4
tv353 = -64						; size = 4
tv477 = -60						; size = 4
tv345 = -56						; size = 4
_dt$ = -52						; size = 4
_rz$ = -48						; size = 4
_dy$ = -44						; size = 4
_dx$ = -40						; size = 4
_ry$ = -36						; size = 4
_rx$ = -32						; size = 4
_dz$ = -28						; size = 4
_tf$ = -24						; size = 4
_interp$ = -20						; size = 4
_before$ = -16						; size = 4
_after$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?FlyBullets@HudClass@@AAEXXZ PROC			; HudClass::FlyBullets
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	DWORD PTR _this$[ebp], ecx

; 159  : int			i;
; 160  : SIM_LONG	dt;
; 161  : float		tf;
; 162  : 
; 163  : int			before, after;
; 164  : float		interp;
; 165  : 
; 166  : float		dx, dy, dz;
; 167  : float		rx, ry, rz;
; 168  : 
; 169  : 	// Fly out a bunch of bullets
; 170  : 	for (i=0; i<NumEEGSSegments; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@FlyBullets
$LN2@FlyBullets:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@FlyBullets:
	cmp	DWORD PTR _i$[ebp], 24			; 00000018H
	jge	$LN1@FlyBullets

; 171  : 	{
; 172  : 		dt = EEGSTimePerSegment * (i+1);	// ms

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 200				; 000000c8H
	mov	DWORD PTR _dt$[ebp], ecx

; 173  : 		tf = dt * 0.001F;					// seconds

	cvtsi2ss xmm0, DWORD PTR _dt$[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _tf$[ebp], xmm0

; 174  : 
; 175  : 		// Get the interpolation parameters for the required time
; 176  : 		interp = EEGShistory( dt, &before, &after );

	lea	edx, DWORD PTR _after$[ebp]
	push	edx
	lea	eax, DWORD PTR _before$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGShistory@HudClass@@AAEMJPAH0@Z	; HudClass::EEGShistory
	fstp	DWORD PTR _interp$[ebp]

; 177  : 
; 178  : 		// find bullet's relative position
; 179  : 		dx = EEGSvalueVX( interp, before, after )*tf + EEGSvalueX( interp, before, after ) - ownship->XPos();

	mov	edx, DWORD PTR _after$[ebp]
	push	edx
	mov	eax, DWORD PTR _before$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGSvalueVX@HudClass@@AAEMMHH@Z	; HudClass::EEGSvalueVX
	fstp	DWORD PTR tv345[ebp]
	movss	xmm0, DWORD PTR tv345[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mov	ecx, DWORD PTR _after$[ebp]
	push	ecx
	mov	edx, DWORD PTR _before$[ebp]
	push	edx
	push	ecx
	movss	xmm1, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv477[ebp], xmm0
	call	?EEGSvalueX@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueX
	fstp	DWORD PTR tv353[ebp]
	movss	xmm0, DWORD PTR tv477[ebp]
	addss	xmm0, DWORD PTR tv353[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv479[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv358[ebp]
	movss	xmm0, DWORD PTR tv479[ebp]
	subss	xmm0, DWORD PTR tv358[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 180  : 		dy = EEGSvalueVY( interp, before, after )*tf + EEGSvalueY( interp, before, after ) - ownship->YPos();

	mov	ecx, DWORD PTR _after$[ebp]
	push	ecx
	mov	edx, DWORD PTR _before$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGSvalueVY@HudClass@@AAEMMHH@Z	; HudClass::EEGSvalueVY
	fstp	DWORD PTR tv366[ebp]
	movss	xmm0, DWORD PTR tv366[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mov	eax, DWORD PTR _after$[ebp]
	push	eax
	mov	ecx, DWORD PTR _before$[ebp]
	push	ecx
	push	ecx
	movss	xmm1, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv481[ebp], xmm0
	call	?EEGSvalueY@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueY
	fstp	DWORD PTR tv374[ebp]
	movss	xmm0, DWORD PTR tv481[ebp]
	addss	xmm0, DWORD PTR tv374[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv483[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv379[ebp]
	movss	xmm0, DWORD PTR tv483[ebp]
	subss	xmm0, DWORD PTR tv379[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 181  : 		dz = EEGSvalueVZ( interp, before, after )*tf + EEGSvalueZ( interp, before, after ) - ownship->ZPos();

	mov	eax, DWORD PTR _after$[ebp]
	push	eax
	mov	ecx, DWORD PTR _before$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EEGSvalueVZ@HudClass@@AAEMMHH@Z	; HudClass::EEGSvalueVZ
	fstp	DWORD PTR tv387[ebp]
	movss	xmm0, DWORD PTR tv387[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mov	edx, DWORD PTR _after$[ebp]
	push	edx
	mov	eax, DWORD PTR _before$[ebp]
	push	eax
	push	ecx
	movss	xmm1, DWORD PTR _interp$[ebp]
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv485[ebp], xmm0
	call	?EEGSvalueZ@HudClass@@AAEMMHH@Z		; HudClass::EEGSvalueZ
	fstp	DWORD PTR tv395[ebp]
	movss	xmm0, DWORD PTR tv485[ebp]
	addss	xmm0, DWORD PTR tv395[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv487[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv400[ebp]
	movss	xmm0, DWORD PTR tv487[ebp]
	subss	xmm0, DWORD PTR tv400[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 182  : 
; 183  : 		// Gravity Drop
; 184  : 		dz += GRAVITY * 0.5F * tf * tf;

	movss	xmm0, DWORD PTR __real@4180b53f
	mulss	xmm0, DWORD PTR _tf$[ebp]
	mulss	xmm0, DWORD PTR _tf$[ebp]
	addss	xmm0, DWORD PTR _dz$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 185  : 
; 186  : 		// Rotate the bullet's relative position into body space
; 187  : 		rx = ownship->dmx[0][0]*dx + ownship->dmx[0][1]*dy + ownship->dmx[0][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 188  : 		ry = ownship->dmx[1][0]*dx + ownship->dmx[1][1]*dy + ownship->dmx[1][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 189  : 		rz = ownship->dmx[2][0]*dx + ownship->dmx[2][1]*dy + ownship->dmx[2][2]*dz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	imul	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 0
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm1, DWORD PTR [eax+ecx]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 190  : 
; 191  : 		// Store the HUD space projection of the bullet's position and it's range
; 192  : 		bulletH[i] = RadToHudUnitsX((float)atan2 (ry,rx));

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv444[ebp]
	fld	DWORD PTR tv444[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+edx*4+64]

; 193  : 		bulletV[i] = RadToHudUnitsY((float)atan (-rz/(float)sqrt(rx*rx+ry*ry+.1f)));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv489[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv457[ebp]
	movss	xmm0, DWORD PTR tv489[ebp]
	divss	xmm0, DWORD PTR tv457[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+ecx*4+160]

; 194  : 		bulletRange[i] = (float)sqrt(rx*rx + ry*ry + rz*rz);

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _rz$[ebp]
	mulss	xmm1, DWORD PTR _rz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax*4+256]

; 195  : 	}

	jmp	$LN2@FlyBullets
$LN1@FlyBullets:

; 196  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlyBullets@HudClass@@AAEXXZ ENDP			; HudClass::FlyBullets
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_temp$1 = -184						; size = 4
tv875 = -180						; size = 4
_el$2 = -176						; size = 4
tv611 = -172						; size = 4
_az$3 = -168						; size = 4
tv645 = -164						; size = 4
_dx$4 = -160						; size = 4
tv636 = -156						; size = 4
_dy$5 = -152						; size = 4
tv873 = -148						; size = 4
_dz$6 = -144						; size = 4
tv879 = -140						; size = 4
tv658 = -136						; size = 4
tv877 = -132						; size = 4
tv883 = -128						; size = 4
tv632 = -124						; size = 4
tv653 = -120						; size = 4
tv627 = -116						; size = 4
tv881 = -112						; size = 4
tv623 = -108						; size = 4
tv649 = -104						; size = 4
tv640 = -100						; size = 4
_offsetX$ = -96						; size = 4
_tfms$ = -92						; size = 4
_tf$ = -88						; size = 4
_scale$ = -84						; size = 4
_offset$ = -80						; size = 4
_offsetY$ = -76						; size = 4
_d$7 = -72						; size = 4
_interp$ = -68						; size = 4
_outsize$8 = -64					; size = 4
_cy$9 = -60						; size = 4
_insize$10 = -56					; size = 4
_cx$11 = -52						; size = 4
_extent$12 = -48					; size = 4
_tgt$13 = -44						; size = 4
_rx$ = -40						; size = 4
_xPosR$ = -36						; size = 4
_yPosL$ = -32						; size = 4
_ry$ = -28						; size = 4
_yPosR$ = -24						; size = 4
_xPosL$ = -20						; size = 4
_xx$14 = -16						; size = 4
_yy$15 = -12						; size = 4
_idx$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawTSymbol@HudClass@@AAEXXZ PROC			; HudClass::DrawTSymbol
; _this$ = ecx

; 427  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 428  : float	rx, ry, offset, offsetX, offsetY;
; 429  : float	tf, interp, xPosL, yPosL, xPosR, yPosR;
; 430  : float	scale;
; 431  : int		idx;
; 432  : int		tfms;
; 433  : 
; 434  : 	ShiAssert( targetPtr );
; 435  : 	ShiAssert( targetData );
; 436  : 
; 437  : 	display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 438  : 											hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F);

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 439  : 
; 440  : 
; 441  : 	// 1G lines outside funnel (assume target pulls 1G directly into us, where should he be to get hit?)
; 442  : 	// What we need to know to do this correctly is:
; 443  : 	// IF ownship continues in steady state, and target continues in steady state PULLING 1G,
; 444  : 	// THEN how long will it take for bullets fired now to reach the targets range.
; 445  : 	//
; 446  : 	// FOW NOW:  Approximate the 1G line position by putting it near targets _current_ range along the funnel
; 447  : 
; 448  : 	// How long to fly to the target's range (neglecting gravity)?
; 449  : 	// JMB 010220 CTD
; 450  : 	// tf = targetData->range / ownship->Guns->initBulletVelocity; //-
; 451  :   if (ownship->Guns) //+

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+944], 0
	je	SHORT $LN10@DrawTSymbo

; 452  : 		tf = targetData->range / ownship->Guns->initBulletVelocity; //+

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx+944]
	movss	xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR [ecx+792]
	movss	DWORD PTR _tf$[ebp], xmm0

; 453  : 	else//+

	jmp	SHORT $LN9@DrawTSymbo
$LN10@DrawTSymbo:

; 454  : 		tf = targetData->range / 3000.0F;//+

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR __real@453b8000
	movss	DWORD PTR _tf$[ebp], xmm0
$LN9@DrawTSymbo:

; 455  : 	// JMB 010220 CTD
; 456  : 	tfms = FloatToInt32(tf*1000.0f);

	movss	xmm0, DWORD PTR _tf$[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _tfms$[ebp], eax

; 457  : 
; 458  : 	// Which bullet index to use
; 459  : 	idx		= tfms / EEGSTimePerSegment - 1;

	mov	eax, DWORD PTR _tfms$[ebp]
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx
	sub	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 460  : 	if (idx > NumEEGSSegments-2) 

	cmp	DWORD PTR _idx$[ebp], 22		; 00000016H
	jle	SHORT $LN8@DrawTSymbo

; 461  : 		idx = NumEEGSSegments-2;

	mov	DWORD PTR _idx$[ebp], 22		; 00000016H
$LN8@DrawTSymbo:

; 462  : 	if (idx < 0)

	cmp	DWORD PTR _idx$[ebp], 0
	jge	SHORT $LN7@DrawTSymbo

; 463  : 		idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN7@DrawTSymbo:

; 464  : 
; 465  : 	//me123 status test. multible changes in the draw eegs rutine.
; 466  : //	interp	= (float)((tfms - (idx+1) * EEGSTimePerSegment)) / EEGSTimePerSegment; 
; 467  : 
; 468  : 	xPosL = funnel1X[1];// + (funnel1X[idx + 1] - funnel1X[idx]) * interp;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+352]
	movss	DWORD PTR _xPosL$[ebp], xmm0

; 469  : 	yPosL = funnel1Y[1];// + (funnel1Y[idx + 1] - funnel1Y[idx]) * interp;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+448]
	movss	DWORD PTR _yPosL$[ebp], xmm0

; 470  : 	xPosR = funnel2X[1];// + (funnel2X[idx + 1] - funnel2X[idx]) * interp;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+544]
	movss	DWORD PTR _xPosR$[ebp], xmm0

; 471  : 	yPosR = funnel2Y[1];// + (funnel2Y[idx + 1] - funnel2Y[idx]) * interp;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+640]
	movss	DWORD PTR _yPosR$[ebp], xmm0

; 472  : 	//me123 status test. insert stop
; 473  : 
; 474  : 	// Vector across funnel
; 475  : 	//Cobra TJL 10/30/04
; 476  : 	rx = xPosR - xPosL;

	movss	xmm0, DWORD PTR _xPosR$[ebp]
	subss	xmm0, DWORD PTR _xPosL$[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 477  : 	ry = yPosR - yPosL;

	movss	xmm0, DWORD PTR _yPosR$[ebp]
	subss	xmm0, DWORD PTR _yPosL$[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 478  : 	scale = 1.0f / (float)sqrt( rx*rx + ry*ry );

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	xmm1, DWORD PTR _ry$[ebp]
	mulss	xmm1, DWORD PTR _ry$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv611[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv611[ebp]
	movss	DWORD PTR _scale$[ebp], xmm0

; 479  : 	rx *= scale;

	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 480  : 	ry *= scale;

	movss	xmm0, DWORD PTR _ry$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	movss	DWORD PTR _ry$[ebp], xmm0

; 481  : 
; 482  : 	// 1G lines outside funnel
; 483  : 	if(targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN6@DrawTSymbo

; 484  : 	{
; 485  : 		FalconEntity *tgt = targetPtr->BaseData();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _tgt$13[ebp], eax

; 486  : 		float d, xx,yy;
; 487  : 
; 488  : 
; 489  : 		float cx = (xPosL + xPosR) * 0.5F;

	movss	xmm0, DWORD PTR _xPosL$[ebp]
	addss	xmm0, DWORD PTR _xPosR$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cx$11[ebp], xmm0

; 490  : 		float cy = (yPosL + yPosR) * 0.5F;

	movss	xmm0, DWORD PTR _yPosL$[ebp]
	addss	xmm0, DWORD PTR _yPosR$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cy$9[ebp], xmm0

; 491  : 		
; 492  : 		float dx =  tgt->XPos() + tgt->XDelta() - Ownship()->XDelta();

	mov	ecx, DWORD PTR _tgt$13[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv623[ebp]
	movss	xmm0, DWORD PTR tv623[ebp]
	mov	ecx, DWORD PTR _tgt$13[ebp]
	movss	DWORD PTR tv873[ebp], xmm0
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv627[ebp]
	movss	xmm0, DWORD PTR tv873[ebp]
	addss	xmm0, DWORD PTR tv627[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv875[ebp], xmm0
	call	?Ownship@HudClass@@QAEPAVAircraftClass@@XZ ; HudClass::Ownship
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv632[ebp]
	movss	xmm0, DWORD PTR tv875[ebp]
	subss	xmm0, DWORD PTR tv632[ebp]
	movss	DWORD PTR _dx$4[ebp], xmm0

; 493  : 		float dy =  tgt->YPos() + tgt->YDelta() - Ownship()->YDelta();

	mov	ecx, DWORD PTR _tgt$13[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv636[ebp]
	movss	xmm0, DWORD PTR tv636[ebp]
	mov	ecx, DWORD PTR _tgt$13[ebp]
	movss	DWORD PTR tv877[ebp], xmm0
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv640[ebp]
	movss	xmm0, DWORD PTR tv877[ebp]
	addss	xmm0, DWORD PTR tv640[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv879[ebp], xmm0
	call	?Ownship@HudClass@@QAEPAVAircraftClass@@XZ ; HudClass::Ownship
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv645[ebp]
	movss	xmm0, DWORD PTR tv879[ebp]
	subss	xmm0, DWORD PTR tv645[ebp]
	movss	DWORD PTR _dy$5[ebp], xmm0

; 494  : 		float dz =  tgt->ZPos() + tgt->ZDelta() - Ownship()->ZDelta();

	mov	ecx, DWORD PTR _tgt$13[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv649[ebp]
	movss	xmm0, DWORD PTR tv649[ebp]
	mov	ecx, DWORD PTR _tgt$13[ebp]
	movss	DWORD PTR tv881[ebp], xmm0
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv653[ebp]
	movss	xmm0, DWORD PTR tv881[ebp]
	addss	xmm0, DWORD PTR tv653[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv883[ebp], xmm0
	call	?Ownship@HudClass@@QAEPAVAircraftClass@@XZ ; HudClass::Ownship
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv658[ebp]
	movss	xmm0, DWORD PTR tv883[ebp]
	subss	xmm0, DWORD PTR tv658[ebp]
	movss	DWORD PTR _dz$6[ebp], xmm0

; 495  : 
; 496  : 		float az, el;
; 497  : 
; 498  : 		CalcRelAzEl(Ownship(), dx, dy, dz, &az, &el);

	lea	eax, DWORD PTR _el$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _az$3[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _dz$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dy$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _dx$4[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Ownship@HudClass@@QAEPAVAircraftClass@@XZ ; HudClass::Ownship
	push	eax
	call	?CalcRelAzEl@@YAXPAVSimBaseClass@@MMMPAM1@Z ; CalcRelAzEl

; 499  : 
; 500  : 		xx = RadToHudUnitsX( az );

	add	esp, 20					; 00000014H
	movss	xmm0, DWORD PTR _az$3[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _xx$14[ebp]

; 501  : 		yy = RadToHudUnitsY( el ); 

	push	ecx
	movss	xmm0, DWORD PTR _el$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR _yy$15[ebp]

; 502  : 
; 503  : 		xx -= cx;

	movss	xmm0, DWORD PTR _xx$14[ebp]
	subss	xmm0, DWORD PTR _cx$11[ebp]
	movss	DWORD PTR _xx$14[ebp], xmm0

; 504  : 		yy -= cy;

	movss	xmm0, DWORD PTR _yy$15[ebp]
	subss	xmm0, DWORD PTR _cy$9[ebp]
	movss	DWORD PTR _yy$15[ebp], xmm0

; 505  : 
; 506  : 		float temp = xx;

	movss	xmm0, DWORD PTR _xx$14[ebp]
	movss	DWORD PTR _temp$1[ebp], xmm0

; 507  : 		xx = -yy;

	movss	xmm0, DWORD PTR _yy$15[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _xx$14[ebp], xmm0

; 508  : 		yy = temp;

	movss	xmm0, DWORD PTR _temp$1[ebp]
	movss	DWORD PTR _yy$15[ebp], xmm0

; 509  : 
; 510  : 		d = sqrt(xx * xx + yy * yy);

	movss	xmm0, DWORD PTR _xx$14[ebp]
	mulss	xmm0, DWORD PTR _xx$14[ebp]
	movss	xmm1, DWORD PTR _yy$15[ebp]
	mulss	xmm1, DWORD PTR _yy$15[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _d$7[ebp]

; 511  : 
; 512  : 		if(d)

	movss	xmm0, DWORD PTR _d$7[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@DrawTSymbo

; 513  : 		{
; 514  : 			xx/=d;

	movss	xmm0, DWORD PTR _xx$14[ebp]
	divss	xmm0, DWORD PTR _d$7[ebp]
	movss	DWORD PTR _xx$14[ebp], xmm0

; 515  : 			yy/=d;

	movss	xmm0, DWORD PTR _yy$15[ebp]
	divss	xmm0, DWORD PTR _d$7[ebp]
	movss	DWORD PTR _yy$15[ebp], xmm0

; 516  : 		}
; 517  : 		else

	jmp	SHORT $LN4@DrawTSymbo
$LN5@DrawTSymbo:

; 518  : 		{
; 519  : 			xx = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _xx$14[ebp], xmm0

; 520  : 			yy = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yy$15[ebp], xmm0
$LN4@DrawTSymbo:

; 521  : 		}
; 522  : 
; 523  : #define RESCALE(in,inmin,inmax,outmin,outmax) ( ((float)(in) - (inmin)) * ((outmax) - (outmin)) / ((inmax) - (inmin)) + (outmin))
; 524  : 
; 525  : 		float extent = RESCALE ( targetData->range , 1200, 3000, 0, 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	subss	xmm0, DWORD PTR __real@44960000
	mulss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@44e10000
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _extent$12[ebp], xmm0

; 526  : 		if(extent>1) extent = 1;

	movss	xmm0, DWORD PTR _extent$12[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@DrawTSymbo
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _extent$12[ebp], xmm0
$LN3@DrawTSymbo:

; 527  : 		if(extent<0) extent = 0;

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _extent$12[ebp]
	jbe	SHORT $LN2@DrawTSymbo
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _extent$12[ebp], xmm0
$LN2@DrawTSymbo:

; 528  : 
; 529  : 		float insize = .05f;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _insize$10[ebp], xmm0

; 530  : 		float outsize = insize + .2f * extent;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _extent$12[ebp]
	addss	xmm0, DWORD PTR _insize$10[ebp]
	movss	DWORD PTR _outsize$8[ebp], xmm0

; 531  : 
; 532  : 		display->Line(cx + xx * insize, cy + yy * insize, cx + xx * outsize, cy + yy * outsize);

	movss	xmm0, DWORD PTR _yy$15[ebp]
	mulss	xmm0, DWORD PTR _outsize$8[ebp]
	addss	xmm0, DWORD PTR _cy$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xx$14[ebp]
	mulss	xmm0, DWORD PTR _outsize$8[ebp]
	addss	xmm0, DWORD PTR _cx$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yy$15[ebp]
	mulss	xmm0, DWORD PTR _insize$10[ebp]
	addss	xmm0, DWORD PTR _cy$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xx$14[ebp]
	mulss	xmm0, DWORD PTR _insize$10[ebp]
	addss	xmm0, DWORD PTR _cx$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 533  : 		xx = -xx;

	movss	xmm0, DWORD PTR _xx$14[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _xx$14[ebp], xmm0

; 534  : 		yy = -yy;

	movss	xmm0, DWORD PTR _yy$15[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _yy$15[ebp], xmm0

; 535  : 		display->Line(cx + xx * insize, cy + yy * insize, cx + xx  * outsize, cy + yy * outsize );

	movss	xmm0, DWORD PTR _yy$15[ebp]
	mulss	xmm0, DWORD PTR _outsize$8[ebp]
	addss	xmm0, DWORD PTR _cy$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xx$14[ebp]
	mulss	xmm0, DWORD PTR _outsize$8[ebp]
	addss	xmm0, DWORD PTR _cx$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yy$15[ebp]
	mulss	xmm0, DWORD PTR _insize$10[ebp]
	addss	xmm0, DWORD PTR _cy$9[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xx$14[ebp]
	mulss	xmm0, DWORD PTR _insize$10[ebp]
	addss	xmm0, DWORD PTR _cx$11[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 536  : 
; 537  : 	}
; 538  : 	else

	jmp	$LN1@DrawTSymbo
$LN6@DrawTSymbo:

; 539  : 	{
; 540  : 	//Cobra 10/30/04 TJL
; 541  : 		/*rx = xPosR - xPosL;
; 542  : 		ry = yPosR - yPosL;
; 543  : 		scale = 1.0f / (float)sqrt( rx*rx + ry*ry );
; 544  : 		rx *= scale;
; 545  : 		ry *= scale;*/
; 546  : 
; 547  : 		display->Line(xPosR	,yPosR	, xPosR+rx*0.15f, yPosR+ry*0.15f); 

	movss	xmm0, DWORD PTR _ry$[ebp]
	mulss	xmm0, DWORD PTR __real@3e19999a
	addss	xmm0, DWORD PTR _yPosR$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR __real@3e19999a
	addss	xmm0, DWORD PTR _xPosR$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPosR$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPosR$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 548  : 		display->Line(xPosL	,yPosL	, xPosL-rx*0.15f, yPosL-ry*0.15f);

	movss	xmm0, DWORD PTR _ry$[ebp]
	mulss	xmm0, DWORD PTR __real@3e19999a
	movss	xmm1, DWORD PTR _yPosL$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR __real@3e19999a
	movss	xmm1, DWORD PTR _xPosL$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR _yPosL$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPosL$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN1@DrawTSymbo:

; 549  : 	}
; 550  : 
; 551  : 	display->AdjustOriginInViewport ((xPosL + xPosR) * 0.5F, (yPosL + yPosR) * 0.5F);

	movss	xmm0, DWORD PTR _yPosL$[ebp]
	addss	xmm0, DWORD PTR _yPosR$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPosL$[ebp]
	addss	xmm0, DWORD PTR _xPosR$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 552  : 
; 553  : 	// 1G plus sign inside funnel
; 554  : 	display->Line( 0.0F, -0.025F, 0.0F, 0.025F );

	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 555  : 	display->Line(-0.025F, 0.0F,  0.025F, 0.0F );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 556  : 
; 557  : 	display->AdjustOriginInViewport (-(xPosL + xPosR) * 0.5F, -(yPosL + yPosR) * 0.5F);

	movss	xmm0, DWORD PTR _yPosL$[ebp]
	addss	xmm0, DWORD PTR _yPosR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPosL$[ebp]
	addss	xmm0, DWORD PTR _xPosR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 558  : 
; 559  : 	// How to interpolate/extrapolate between the two bullet records
; 560  : 	interp	= (float)((tfms - (idx+1) * EEGSTimePerSegment)) / EEGSTimePerSegment;

	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	imul	edx, 200				; 000000c8H
	mov	eax, DWORD PTR _tfms$[ebp]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR _interp$[ebp], xmm0

; 561  : 
; 562  : 	xPosL = funnel1X[idx] + (funnel1X[idx + 1] - funnel1X[idx]) * interp;

	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+356]
	subss	xmm0, DWORD PTR [esi+eax*4+352]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4+352]
	movss	DWORD PTR _xPosL$[ebp], xmm0

; 563  : 	yPosL = funnel1Y[idx] + (funnel1Y[idx + 1] - funnel1Y[idx]) * interp;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+452]
	subss	xmm0, DWORD PTR [esi+edx*4+448]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4+448]
	movss	DWORD PTR _yPosL$[ebp], xmm0

; 564  : 	xPosR = funnel2X[idx] + (funnel2X[idx + 1] - funnel2X[idx]) * interp;

	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+548]
	subss	xmm0, DWORD PTR [esi+ecx*4+544]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+edx*4+544]
	movss	DWORD PTR _xPosR$[ebp], xmm0

; 565  : 	yPosR = funnel2Y[idx] + (funnel2Y[idx + 1] - funnel2Y[idx]) * interp;

	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+644]
	subss	xmm0, DWORD PTR [esi+eax*4+640]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4+640]
	movss	DWORD PTR _yPosR$[ebp], xmm0

; 566  : 	display->AdjustOriginInViewport ((xPosL + xPosR) * 0.5F, (yPosL + yPosR) * 0.5F);

	movss	xmm0, DWORD PTR _yPosL$[ebp]
	addss	xmm0, DWORD PTR _yPosR$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPosL$[ebp]
	addss	xmm0, DWORD PTR _xPosR$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 567  : 
; 568  :     display->Circle (0.0F, 0.0F, 0.012F); //me123 status test. draw batr

	push	ecx
	movss	xmm0, DWORD PTR __real@3c449ba6
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 569  : 
; 570  : 
; 571  : 	// Positioning for 9G minus sign (assume target pulls 9G directly into us, where should he be to get hit?)
; 572  : 	//
; 573  : 	// FOR NOW: This is a rough approximation of how aspect affects the relative position of the 9G line.
; 574  : 	offset = -(targetData->ataFrom - (90.0F * DTR)) / (90.0F * DTR);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR __real@3fc90fd9
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@3fc90fd9
	movss	DWORD PTR _offset$[ebp], xmm0

; 575  : 	offsetX = -offset * ry;

	movss	xmm0, DWORD PTR _offset$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR _offsetX$[ebp], xmm0

; 576  : 	offsetY = offset * rx;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR _offsetY$[ebp], xmm0

; 577  : 
; 578  : 	// 9G minus sign inside funnel
; 579  : 	display->Line(  offsetX - rx * 0.025F, offsetY - ry * 0.025F,
; 580  : 					offsetX + rx * 0.025F, offsetY + ry * 0.025F );

	movss	xmm0, DWORD PTR _ry$[ebp]
	mulss	xmm0, DWORD PTR __real@3ccccccd
	addss	xmm0, DWORD PTR _offsetY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR __real@3ccccccd
	addss	xmm0, DWORD PTR _offsetX$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _ry$[ebp]
	mulss	xmm0, DWORD PTR __real@3ccccccd
	movss	xmm1, DWORD PTR _offsetY$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	xmm0, DWORD PTR _rx$[ebp]
	mulss	xmm0, DWORD PTR __real@3ccccccd
	movss	xmm1, DWORD PTR _offsetX$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 581  : 
; 582  : 	// Restore the original viewport origin
; 583  : 	display->AdjustOriginInViewport (-(xPosL + xPosR) * 0.5F, -(yPosL + yPosR) * 0.5F);

	movss	xmm0, DWORD PTR _yPosL$[ebp]
	addss	xmm0, DWORD PTR _yPosR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPosL$[ebp]
	addss	xmm0, DWORD PTR _xPosR$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 584  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 585  : 											hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 586  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawTSymbol@HudClass@@AAEXXZ ENDP			; HudClass::DrawTSymbol
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_tf$ = -52						; size = 4
_xPos$ = -48						; size = 4
_yPos$ = -44						; size = 4
_interp$ = -40						; size = 4
_tfms$ = -36						; size = 4
_range$ = -32						; size = 4
tv261 = -28						; size = 4
_radius$ = -24						; size = 4
_idx$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DrawSnapshot@HudClass@@AAEXXZ PROC			; HudClass::DrawSnapshot
; _this$ = ecx

; 817  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DrawSnapshot@HudClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 818  : float	tf, range, interp;
; 819  : float	xPos, yPos;		// The HUD space location of the hypothetical bullet in flight
; 820  : int		tfms, idx;
; 821  : float	radius;
; 822  : 
; 823  : 	display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 824  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 825  : 
; 826  : 	// Continuously Computed Impact Line
; 827  : 	static const float tickWidth = MRToHudUnits(5.0F);

	mov	eax, DWORD PTR ?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA
	and	eax, 1
	jne	SHORT $LN6@DrawSnapsh
	mov	ecx, DWORD PTR ?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN6@DrawSnapsh:

; 828  : 
; 829  : 	static const int	idx1 =  500 / EEGSTimePerSegment;
; 830  : 	static const int	idx2 = 1000 / EEGSTimePerSegment;
; 831  : 	static const int	idx3 = 1500 / EEGSTimePerSegment;
; 832  : //	ShiAssert( idx3 < NumEEGSSegments );
; 833  : 
; 834  : 	display->Line(	0.0F, 0.0F, bulletH[idx1], bulletV[idx1]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+64]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 835  : 	display->Line(	bulletH[idx1] - tickWidth, bulletV[idx1], bulletH[idx1] + tickWidth, bulletV[idx1]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+160]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+64]
	addss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	subss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 836  : 
; 837  : 	display->Line(	bulletH[idx1], bulletV[idx1], bulletH[idx2], bulletV[idx2]);

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 838  : 	display->Line(	bulletH[idx2] - tickWidth, bulletV[idx2], bulletH[idx2] + tickWidth, bulletV[idx2]);

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+160]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+64]
	addss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	subss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 839  : 
; 840  : 	display->Line(	bulletH[idx2], bulletV[idx2], bulletH[idx3], bulletV[idx3]);

	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 841  : 	display->Line(	bulletH[idx3] - tickWidth, bulletV[idx3], bulletH[idx3] + tickWidth, bulletV[idx3]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+160]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+64]
	addss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	subss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 842  : 
; 843  : 	// Pipper, 1 TOF in the future
; 844  : 	if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN5@DrawSnapsh

; 845  : 		range = min(targetData->range, 9000.0f);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR __real@460ca000
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN9@DrawSnapsh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	movss	DWORD PTR tv261[ebp], xmm0
	jmp	SHORT $LN10@DrawSnapsh
$LN9@DrawSnapsh:
	movss	xmm0, DWORD PTR __real@460ca000
	movss	DWORD PTR tv261[ebp], xmm0
$LN10@DrawSnapsh:
	movss	xmm0, DWORD PTR tv261[ebp]
	movss	DWORD PTR _range$[ebp], xmm0

; 846  : 	else

	jmp	SHORT $LN4@DrawSnapsh
$LN5@DrawSnapsh:

; 847  : 		range = 1500.0F;

	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR _range$[ebp], xmm0
$LN4@DrawSnapsh:

; 848  : 
; 849  : 	// How long to fly to the chosen range (neglecting gravity)?
; 850  : 	ShiAssert(FALSE == F4IsBadReadPtr(ownship->Guns, sizeof *ownship->Guns)); // JPO
; 851  : 	tf = range / ownship->Guns->initBulletVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+944]
	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR [edx+792]
	movss	DWORD PTR _tf$[ebp], xmm0

; 852  : 	tfms = FloatToInt32(tf*1000.0f);

	movss	xmm0, DWORD PTR _tf$[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _tfms$[ebp], eax

; 853  : 
; 854  : 	// Which bullet index to use
; 855  : 	idx		= tfms / EEGSTimePerSegment - 1;

	mov	eax, DWORD PTR _tfms$[ebp]
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx
	sub	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 856  : 	if (idx > NumEEGSSegments-2) 

	cmp	DWORD PTR _idx$[ebp], 22		; 00000016H
	jle	SHORT $LN3@DrawSnapsh

; 857  : 		idx = NumEEGSSegments-2;

	mov	DWORD PTR _idx$[ebp], 22		; 00000016H
$LN3@DrawSnapsh:

; 858  : 	if (idx < 0)

	cmp	DWORD PTR _idx$[ebp], 0
	jge	SHORT $LN2@DrawSnapsh

; 859  : 		idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN2@DrawSnapsh:

; 860  : 
; 861  : 	// How to interpolate/extrapolate between the two bullet records
; 862  : 	interp	= (float)((tfms - (idx+1) * EEGSTimePerSegment)) / EEGSTimePerSegment;

	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	imul	edx, 200				; 000000c8H
	mov	eax, DWORD PTR _tfms$[ebp]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR _interp$[ebp], xmm0

; 863  : 
; 864  : 	// Draw the range pipper
; 865  : 	xPos = bulletH[idx] + (bulletH[idx + 1] - bulletH[idx]) * interp;

	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+68]
	subss	xmm0, DWORD PTR [esi+eax*4+64]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4+64]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 866  : 	yPos = bulletV[idx] + (bulletV[idx + 1] - bulletV[idx]) * interp;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+164]
	subss	xmm0, DWORD PTR [esi+edx*4+160]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4+160]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 867  : 	display->Circle (xPos, yPos, tickWidth);

	push	ecx
	movss	xmm0, DWORD PTR ?tickWidth@?1??DrawSnapshot@HudClass@@AAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 868  : 
; 869  : 	// If we DON'T have a locked target, draw a cirle showing default wing span at default range (1500.0f)
; 870  : 	if( targetPtr == NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	$LN1@DrawSnapsh

; 871  : 	{
; 872  : 		// Decide how big the default target would be at the default range
; 873  : 		// First in radians, then in HUD viewport space units.
; 874  : 		radius = (float)atan2( DefaultTargetSpan*0.5f, 1500.0f );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4097700000000000
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+5020]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _radius$[ebp]

; 875  : 		radius = RadToHudUnits(radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _radius$[ebp]

; 876  : 		display->Circle (xPos, yPos, radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx
$LN1@DrawSnapsh:

; 877  : 	}
; 878  : 
; 879  : 	
; 880  : 	// Put the viewport origin back where it was
; 881  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 882  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 883  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DrawSnapshot@HudClass@@AAEXXZ$0:
	mov	eax, DWORD PTR ?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S2@?1??DrawSnapshot@HudClass@@AAEXXZ@4IA, eax
	ret	0
__ehhandler$?DrawSnapshot@HudClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DrawSnapshot@HudClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DrawSnapshot@HudClass@@AAEXXZ ENDP			; HudClass::DrawSnapshot
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_trig$ = -76						; size = 8
tv509 = -68						; size = 4
tv539 = -64						; size = 4
tv503 = -60						; size = 4
tv496 = -56						; size = 4
tv537 = -52						; size = 4
tv490 = -48						; size = 4
tv200 = -44						; size = 4
tv199 = -40						; size = 4
tv186 = -36						; size = 4
_rangeTic1X$ = -32					; size = 4
_rangeTic1Y$ = -28					; size = 4
_rangeTic2X$ = -24					; size = 4
_rangeTic2Y$ = -20					; size = 4
_hPos$ = -16						; size = 4
_vPos$ = -12						; size = 4
_angle$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawLCOSForSSLC@HudClass@@AAEXXZ PROC			; HudClass::DrawLCOSForSSLC
; _this$ = ecx

; 663  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 664  : float angle, rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y;
; 665  : mlTrig trig;
; 666  : float	hPos, vPos;		// The HUD space location of the hypothetical bullet after a 1 second flight
; 667  : 
; 668  : 
; 669  : 	static const SIM_LONG	dt = 1000;
; 670  : 	hPos = bulletH[dt / EEGSTimePerSegment];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR _hPos$[ebp], xmm0

; 671  : 	vPos = bulletV[dt / EEGSTimePerSegment];

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR _vPos$[ebp], xmm0

; 672  : 
; 673  :    // Should be smoothed to account for granularity of eegs data storage...
; 674  :    display->AdjustOriginInViewport (hPos, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 675  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + vPos));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	addss	xmm0, DWORD PTR _vPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _hPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 676  : 
; 677  :    
; 678  : 
; 679  :    if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN5@DrawLCOSFo

; 680  :    {
; 681  : 	  // Data Circle
; 682  : 	  display->Circle (0.0F, 0.0F, 0.2F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 683  : 	  angle = (float)atan2(-vPos, -hPos);

	movss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _angle$[ebp]

; 684  : 	  mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 685  : 	  //display->Line (0.2F * trig.cos, 0.2F * trig.sin, -hPos, -vPos);
; 686  : 	  //display->Line (-0.2F * trig.cos, -0.2F * trig.sin, -0.4F * trig.cos, -0.4F * trig.sin);
; 687  : 	  if (targetData->range < 12000.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR __real@463b8000
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	$LN4@DrawLCOSFo

; 688  :       {
; 689  :          // Range
; 690  :          angle = 90.0F * DTR - targetData->range/12000.0F * 360.0F * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR __real@463b8000
	mulss	xmm0, DWORD PTR __real@43b40000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR __real@3fc90fd9
	subss	xmm1, xmm0
	movss	DWORD PTR _angle$[ebp], xmm1

; 691  : 		 //MI
; 692  : 		 display->Arc(0.0F, 0.0F, 0.2F, 0.0F, 360.0F * DTR - angle);

	movss	xmm0, DWORD PTR __real@40c90fd9
	subss	xmm0, DWORD PTR _angle$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+52]
	call	edx

; 693  :          mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 694  :          rangeTic1X = 0.2F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic1X$[ebp], xmm0

; 695  :          rangeTic1Y = 0.2F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic1Y$[ebp], xmm0

; 696  :          rangeTic2X = 0.175F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 697  :          rangeTic2Y = 0.175F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 698  :          display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN4@DrawLCOSFo:

; 699  :       }
; 700  : 
; 701  :       // Closure
; 702  :       angle = 90.0F * DTR - (max ( min (-targetData->rangedot * 0.01F, 
; 703  :          5.0F), -5.0F) * 0.2F) * 150.0F * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR __real@40a00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@DrawLCOSFo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv186[ebp], xmm0
	jmp	SHORT $LN9@DrawLCOSFo
$LN8@DrawLCOSFo:
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv186[ebp], xmm0
$LN9@DrawLCOSFo:
	movss	xmm0, DWORD PTR tv186[ebp]
	comiss	xmm0, DWORD PTR __real@c0a00000
	jbe	SHORT $LN12@DrawLCOSFo
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR __real@40a00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@DrawLCOSFo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv199[ebp], xmm0
	jmp	SHORT $LN11@DrawLCOSFo
$LN10@DrawLCOSFo:
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv199[ebp], xmm0
$LN11@DrawLCOSFo:
	movss	xmm0, DWORD PTR tv199[ebp]
	movss	DWORD PTR tv200[ebp], xmm0
	jmp	SHORT $LN13@DrawLCOSFo
$LN12@DrawLCOSFo:
	movss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR tv200[ebp], xmm0
$LN13@DrawLCOSFo:
	movss	xmm0, DWORD PTR tv200[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR __real@43160000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR __real@3fc90fd9
	subss	xmm1, xmm0
	movss	DWORD PTR _angle$[ebp], xmm1

; 704  :       mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 705  :       rangeTic1X = 0.2F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic1X$[ebp], xmm0

; 706  :       rangeTic1Y = 0.2F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic1Y$[ebp], xmm0

; 707  :       mlSinCos (&trig, angle + 5.0F * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	addss	xmm0, DWORD PTR __real@3db2b8c1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 708  : 	  rangeTic2X = 0.175F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 709  : 	  rangeTic2Y = 0.175F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 710  :       display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 711  :       mlSinCos (&trig, angle - 5.0F * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@3db2b8c1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 712  :       rangeTic2X = 0.175F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 713  :       rangeTic2Y = 0.175F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 714  :       display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 715  :    }
; 716  :    else

	jmp	SHORT $LN3@DrawLCOSFo
$LN5@DrawLCOSFo:

; 717  : 	   display->Circle (0.0F, 0.0F, 0.2F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN3@DrawLCOSFo:

; 718  : 
; 719  :    // Gun Pipper
; 720  :    display->Circle (0.0F, 0.0F, MRToHudUnits(10.0F));

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 721  : 
; 722  :    // Settling Cue
; 723  :    if (fabs(lastPipperX - hPos) > MRToHudUnits(10.0F) ||
; 724  :        fabs(lastPipperY - vPos) > MRToHudUnits(10.0F))

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	subss	xmm0, DWORD PTR _hPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv490[ebp]
	movss	xmm0, DWORD PTR tv490[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv537[ebp], xmm0
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR tv496[ebp]
	movss	xmm0, DWORD PTR tv537[ebp]
	comiss	xmm0, DWORD PTR tv496[ebp]
	ja	SHORT $LN1@DrawLCOSFo
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	subss	xmm0, DWORD PTR _vPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv503[ebp]
	movss	xmm0, DWORD PTR tv503[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv539[ebp], xmm0
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR tv509[ebp]
	movss	xmm0, DWORD PTR tv539[ebp]
	comiss	xmm0, DWORD PTR tv509[ebp]
	jbe	SHORT $LN2@DrawLCOSFo
$LN1@DrawLCOSFo:

; 725  :    {
; 726  :       display->Line (-(lastPipperX - hPos) * 2.0F,
; 727  :                      -(lastPipperY - vPos) * 2.0F, 
; 728  : 					 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	subss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	subss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN2@DrawLCOSFo:

; 729  :    }
; 730  :    lastPipperX = hPos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hPos$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 731  :    lastPipperY = vPos;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vPos$[ebp]
	movss	DWORD PTR [edx+60], xmm0

; 732  : 
; 733  :    display->AdjustOriginInViewport (-hPos, 
; 734  : 	   -(hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + vPos)
; 735  :    );

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	addss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 736  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawLCOSForSSLC@HudClass@@AAEXXZ ENDP			; HudClass::DrawLCOSForSSLC
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_trig$ = -76						; size = 8
tv563 = -68						; size = 4
tv593 = -64						; size = 4
tv557 = -60						; size = 4
tv550 = -56						; size = 4
tv591 = -52						; size = 4
tv544 = -48						; size = 4
tv230 = -44						; size = 4
tv229 = -40						; size = 4
tv216 = -36						; size = 4
_rangeTic1X$ = -32					; size = 4
_rangeTic1Y$ = -28					; size = 4
_rangeTic2X$ = -24					; size = 4
_rangeTic2Y$ = -20					; size = 4
_hPos$ = -16						; size = 4
_vPos$ = -12						; size = 4
_angle$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawLCOS@HudClass@@AAEXXZ PROC				; HudClass::DrawLCOS
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 741  : float angle, rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y;
; 742  : mlTrig trig;
; 743  : float	hPos, vPos;		// The HUD space location of the hypothetical bullet after a 1 second flight
; 744  : 
; 745  : 
; 746  : 	static const SIM_LONG	dt = 1000;
; 747  : 	hPos = bulletH[dt / EEGSTimePerSegment];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR _hPos$[ebp], xmm0

; 748  : 	vPos = bulletV[dt / EEGSTimePerSegment];

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR _vPos$[ebp], xmm0

; 749  : 
; 750  :    // Should be smoothed to account for granularity of eegs data storage...
; 751  :    display->AdjustOriginInViewport (hPos, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 752  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + vPos));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	addss	xmm0, DWORD PTR _vPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _hPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 753  : 
; 754  :    // Data Circle
; 755  :    //MI fix for LCOS... why would we want a full circle here?
; 756  :    //ASSOCIATOR because the real F-16 has a full circle
; 757  :    display->Circle (0.0F, 0.0F, 0.2F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 758  :    angle = (float)atan2(-vPos, -hPos);

	movss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _angle$[ebp]

; 759  :    mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 760  :    display->Line (0.2F * trig.cos, 0.2F * trig.sin, -hPos, -vPos);

	movss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 761  :    display->Line (-0.2F * trig.cos, -0.2F * trig.sin, -0.4F * trig.cos, -0.4F * trig.sin);

	movss	xmm0, DWORD PTR __real@becccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@becccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@be4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@be4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 762  : 
; 763  :    if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN5@DrawLCOS

; 764  :    {
; 765  :       if (targetData->range < 12000.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR __real@463b8000
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	$LN4@DrawLCOS

; 766  :       {
; 767  :          // Range
; 768  :          angle = 90.0F * DTR - targetData->range/12000.0F * 360.0F * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR __real@463b8000
	mulss	xmm0, DWORD PTR __real@43b40000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR __real@3fc90fd9
	subss	xmm1, xmm0
	movss	DWORD PTR _angle$[ebp], xmm1

; 769  : 		 //MI
; 770  : 		 display->Arc(0.0F, 0.0F, 0.2F, 0.0F, 360.0F * DTR - angle);

	movss	xmm0, DWORD PTR __real@40c90fd9
	subss	xmm0, DWORD PTR _angle$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+52]
	call	edx

; 771  :          mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 772  :          rangeTic1X = 0.2F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic1X$[ebp], xmm0

; 773  :          rangeTic1Y = 0.2F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic1Y$[ebp], xmm0

; 774  :          rangeTic2X = 0.175F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 775  :          rangeTic2Y = 0.175F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 776  :          display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN4@DrawLCOS:

; 777  :       }
; 778  : 
; 779  :       // Closure
; 780  :       angle = 90.0F * DTR - (max ( min (-targetData->rangedot * 0.01F, 
; 781  :          5.0F), -5.0F) * 0.2F) * 150.0F * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR __real@40a00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@DrawLCOS
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv216[ebp], xmm0
	jmp	SHORT $LN9@DrawLCOS
$LN8@DrawLCOS:
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv216[ebp], xmm0
$LN9@DrawLCOS:
	movss	xmm0, DWORD PTR tv216[ebp]
	comiss	xmm0, DWORD PTR __real@c0a00000
	jbe	SHORT $LN12@DrawLCOS
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR __real@40a00000
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@DrawLCOS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv229[ebp], xmm0
	jmp	SHORT $LN11@DrawLCOS
$LN10@DrawLCOS:
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv229[ebp], xmm0
$LN11@DrawLCOS:
	movss	xmm0, DWORD PTR tv229[ebp]
	movss	DWORD PTR tv230[ebp], xmm0
	jmp	SHORT $LN13@DrawLCOS
$LN12@DrawLCOS:
	movss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR tv230[ebp], xmm0
$LN13@DrawLCOS:
	movss	xmm0, DWORD PTR tv230[ebp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR __real@43160000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	xmm1, DWORD PTR __real@3fc90fd9
	subss	xmm1, xmm0
	movss	DWORD PTR _angle$[ebp], xmm1

; 782  :       mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 783  :       rangeTic1X = 0.2F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic1X$[ebp], xmm0

; 784  :       rangeTic1Y = 0.2F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic1Y$[ebp], xmm0

; 785  :       mlSinCos (&trig, angle + 5.0F * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	addss	xmm0, DWORD PTR __real@3db2b8c1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 786  : 	  rangeTic2X = 0.175F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 787  : 	  rangeTic2Y = 0.175F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 788  :       display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 789  :       mlSinCos (&trig, angle - 5.0F * DTR);

	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@3db2b8c1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 790  :       rangeTic2X = 0.175F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 791  :       rangeTic2Y = 0.175F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e333333
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 792  :       display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 793  :    }
; 794  :    else

	jmp	SHORT $LN3@DrawLCOS
$LN5@DrawLCOS:

; 795  : 	   display->Circle (0.0F, 0.0F, 0.2F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN3@DrawLCOS:

; 796  : 
; 797  :    // Gun Pipper
; 798  :    display->Circle (0.0F, 0.0F, MRToHudUnits(10.0F));

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 799  : 
; 800  :    // Settling Cue
; 801  :    if (fabs(lastPipperX - hPos) > MRToHudUnits(10.0F) ||
; 802  :        fabs(lastPipperY - vPos) > MRToHudUnits(10.0F))

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	subss	xmm0, DWORD PTR _hPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv544[ebp]
	movss	xmm0, DWORD PTR tv544[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv591[ebp], xmm0
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR tv550[ebp]
	movss	xmm0, DWORD PTR tv591[ebp]
	comiss	xmm0, DWORD PTR tv550[ebp]
	ja	SHORT $LN1@DrawLCOS
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+60]
	subss	xmm0, DWORD PTR _vPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv557[ebp]
	movss	xmm0, DWORD PTR tv557[ebp]
	push	ecx
	movss	xmm1, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv593[ebp], xmm0
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR tv563[ebp]
	movss	xmm0, DWORD PTR tv593[ebp]
	comiss	xmm0, DWORD PTR tv563[ebp]
	jbe	SHORT $LN2@DrawLCOS
$LN1@DrawLCOS:

; 803  :    {
; 804  :       display->Line (-(lastPipperX - hPos) * 2.0F,
; 805  :                      -(lastPipperY - vPos) * 2.0F, 
; 806  : 					 0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	subss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	subss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN2@DrawLCOS:

; 807  :    }
; 808  :    lastPipperX = hPos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _hPos$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 809  :    lastPipperY = vPos;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _vPos$[ebp]
	movss	DWORD PTR [edx+60], xmm0

; 810  : 
; 811  :    display->AdjustOriginInViewport (-hPos, 
; 812  : 	   -(hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + vPos)
; 813  :    );

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	addss	xmm0, DWORD PTR _vPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _hPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 814  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawLCOS@HudClass@@AAEXXZ ENDP				; HudClass::DrawLCOS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
tv159 = -36						; size = 8
_trig$ = -28						; size = 8
_lineSpace$ = -20					; size = 4
tv156 = -16						; size = 4
_angle$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawMRGS@HudClass@@AAEXXZ PROC				; HudClass::DrawMRGS
; _this$ = ecx

; 315  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 	int i;
; 317  : 	float angle, lineSpace;
; 318  : 	mlTrig trig;
; 319  : 
; 320  : 	// Each line is supposed to represent a target which is flying in a
; 321  : 	// direction that, if it continued on path, would be hit by rounds fired now.
; 322  : 	// In other words, each line represents a lead angle of the same magnitude but for a
; 323  : 	// target moving in a different plane with respect to ours.  Since range is unknown
; 324  : 	// in level III (no locked target),  I _presume_ the lines "breath" to represent
; 325  : 	// the same information for different ranges.  SCR 9-16-98
; 326  : 
; 327  : 	// Decide what percent of full spread to draw the angled lines
; 328  : 	// (For now we're just drawing arbitrary lines)
; 329  : 	// NOTE:  0xFFF = 4095 or 4.095 seconds since sim time is in milliseconds.
; 330  : 	lineSpace = (float)fabs( 1.0f - (float)(SimLibElapsedTime & 0xFFF) / 0x7FF );

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	and	eax, 4095				; 00000fffH
	mov	DWORD PTR tv156[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv156[ebp]
	mov	ecx, DWORD PTR tv156[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv159[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv159[ebp]
	divss	xmm0, DWORD PTR __real@44ffe000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR _lineSpace$[ebp]

; 331  : 	angle = (2.0f - lineSpace) * DTR * 3.0F;

	movss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR _lineSpace$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa34
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _angle$[ebp], xmm0

; 332  : 
; 333  : 	for (i=0; i<4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@DrawMRGS
$LN2@DrawMRGS:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@DrawMRGS:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN1@DrawMRGS

; 334  : 	{
; 335  : 		mlSinCos( &trig, angle );

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 336  : 		display->Line ( 0.75F*trig.sin, -0.75F*trig.cos,  0.65F*trig.sin, -0.65F*trig.cos);

	movss	xmm0, DWORD PTR __real@bf266666
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@3f266666
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf400000
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 337  : 		display->Line (-0.75F*trig.sin, -0.75F*trig.cos, -0.65F*trig.sin, -0.65F*trig.cos);

	movss	xmm0, DWORD PTR __real@bf266666
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf266666
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf400000
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf400000
	mulss	xmm0, DWORD PTR _trig$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 338  : 		angle *= 2.0f;

	movss	xmm0, DWORD PTR _angle$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _angle$[ebp], xmm0

; 339  : 	}

	jmp	$LN2@DrawMRGS
$LN1@DrawMRGS:

; 340  : 
; 341  : 	// Draw in the center line in the series
; 342  : 	display->Line ( 0.0f, -0.75f,  0.0f, -0.65f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf266666
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 343  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawMRGS@HudClass@@AAEXXZ ENDP				; HudClass::DrawMRGS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_iprev$ = -32						; size = 4
_radius$ = -28						; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_im$1 = -16						; size = 4
_m$2 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawFunnel@HudClass@@AAEXXZ PROC			; HudClass::DrawFunnel
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 201  : int		i, iprev;
; 202  : float	radius;
; 203  : float	dx, dy;
; 204  : 
; 205  : 	// Calculate funnel shape
; 206  : 	iprev = 1;

	mov	DWORD PTR _iprev$[ebp], 1

; 207  : //	ShiAssert( NumEEGSSegments > 1 );
; 208  : 
; 209  : 	for (i=0; i<NumEEGSSegments; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@DrawFunnel
$LN17@DrawFunnel:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@DrawFunnel:
	cmp	DWORD PTR _i$[ebp], 24			; 00000018H
	jge	$LN16@DrawFunnel

; 210  : 	{
; 211  : 		// Decide how wide the funnel should be at this range
; 212  : 		// First in radians, then in HUD viewport space units.
; 213  : 		radius = (float)atan2( DefaultTargetSpan*0.5f, bulletRange[i] );

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+ecx*4+256]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+5020]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _radius$[ebp]

; 214  : 		radius = RadToHudUnits(radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _radius$[ebp]

; 215  : 
; 216  : #if 1	// It turns out that the F16 doesn't really rotate the width vector, so we won't either
; 217  : 		dx = -radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _dx$[ebp], xmm0

; 218  : 		dy =  0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0

; 219  : #else
; 220  : 		// Get a vector perpendicular to line connecting this bullet and its neighbor
; 221  : 		dx =  bulletV[i] - bulletV[iprev];
; 222  : 		dy = -bulletH[i] + bulletH[iprev];
; 223  : 		float scale = dx*dx + dy*dy;
; 224  : 		if (scale < 0.0001f) {
; 225  : 			dx = -radius;
; 226  : 			dy =  0.0f;
; 227  : 		} else {
; 228  : 			if (i!=0) {
; 229  : 				scale = radius / sqrt(scale);
; 230  : 			} else {
; 231  : 				scale = -radius / sqrt(scale);
; 232  : 			}
; 233  : 			dx *= scale;
; 234  : 			dy *= scale;
; 235  : 		}
; 236  : #endif
; 237  : 
; 238  : 		iprev = i;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _iprev$[ebp], ecx

; 239  : 
; 240  : #if 0
; 241  : 		// Instantanious
; 242  : 		funnel1X[i] = bulletH[i] + dx;
; 243  : 		funnel1Y[i] = bulletV[i] + dy;
; 244  : 		funnel2X[i] = bulletH[i] - dx;
; 245  : 		funnel2Y[i] = bulletV[i] - dy;
; 246  : #else
; 247  : 		// IIR filtered
; 248  : 		static const float TC = 0.5f;	// Seconds...
; 249  : 		float m, im;
; 250  : 
; 251  : 		if (SimLibMajorFrameTime < TC) {

	movss	xmm0, DWORD PTR ?TC@?3??DrawFunnel@HudClass@@AAEXXZ@4MB
	comiss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	jbe	$LN15@DrawFunnel

; 252  : 			m  = SimLibMajorFrameTime/TC;

	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	divss	xmm0, DWORD PTR ?TC@?3??DrawFunnel@HudClass@@AAEXXZ@4MB
	movss	DWORD PTR _m$2[ebp], xmm0

; 253  : 			im = 1.0f - m;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _m$2[ebp]
	movss	DWORD PTR _im$1[ebp], xmm0

; 254  : 			funnel1X[i] = (bulletH[i] + dx)*m + funnel1X[i]*im;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+64]
	addss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _m$2[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4+352]
	mulss	xmm1, DWORD PTR _im$1[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+352], xmm0

; 255  : 			funnel1Y[i] = (bulletV[i] + dy)*m + funnel1Y[i]*im;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+160]
	addss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _m$2[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4+448]
	mulss	xmm1, DWORD PTR _im$1[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+448], xmm0

; 256  : 			funnel2X[i] = (bulletH[i] - dx)*m + funnel2X[i]*im;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+64]
	subss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _m$2[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4+544]
	mulss	xmm1, DWORD PTR _im$1[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+544], xmm0

; 257  : 			funnel2Y[i] = (bulletV[i] - dy)*m + funnel2Y[i]*im;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+160]
	subss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _m$2[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4+640]
	mulss	xmm1, DWORD PTR _im$1[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+640], xmm0

; 258  : 		} else {

	jmp	$LN14@DrawFunnel
$LN15@DrawFunnel:

; 259  : 			funnel1X[i] = bulletH[i] + dx;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+64]
	addss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx*4+352], xmm0

; 260  : 			funnel1Y[i] = bulletV[i] + dy;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+160]
	addss	xmm0, DWORD PTR _dy$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx*4+448], xmm0

; 261  : 			funnel2X[i] = bulletH[i] - dx;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+64]
	subss	xmm0, DWORD PTR _dx$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax*4+544], xmm0

; 262  : 			funnel2Y[i] = bulletV[i] - dy;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+160]
	subss	xmm0, DWORD PTR _dy$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx*4+640], xmm0
$LN14@DrawFunnel:

; 263  : 		}
; 264  : #endif
; 265  : 	}

	jmp	$LN17@DrawFunnel
$LN16@DrawFunnel:

; 266  : 
; 267  : 	display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 268  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F);

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 269  : 
; 270  : 	// Draw the funnel (limited at 2 sec time of flight)
; 271  : 	static const int	stopIdx = 2000 / EEGSTimePerSegment;
; 272  : //	ShiAssert( stopIdx < NumEEGSSegments );
; 273  : 	for (i=stopIdx; i>0; i--)

	mov	DWORD PTR _i$[ebp], 10			; 0000000aH
	jmp	SHORT $LN13@DrawFunnel
$LN12@DrawFunnel:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@DrawFunnel:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN11@DrawFunnel

; 274  : 	{
; 275  : 		//MI make it dissapearn
; 276  : 		if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN10@DrawFunnel

; 277  : 		{
; 278  : 			if(!HideFunnel)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+5104]
	test	eax, eax
	jne	$LN9@DrawFunnel

; 279  : 			{
; 280  : 				display->Line(funnel1X[i], funnel1Y[i], funnel1X[i-1], funnel1Y[i-1]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*4+444]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+348]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+448]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*4+352]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 281  : 				display->Line(funnel2X[i], funnel2Y[i], funnel2X[i-1], funnel2Y[i-1]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+636]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+540]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*4+640]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+544]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN9@DrawFunnel:

; 282  : 			}
; 283  : 		}
; 284  : 		else

	jmp	$LN8@DrawFunnel
$LN10@DrawFunnel:

; 285  : 		{
; 286  : 			display->Line(funnel1X[i], funnel1Y[i], funnel1X[i-1], funnel1Y[i-1]);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*4+444]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+348]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+448]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*4+352]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 287  : 			display->Line(funnel2X[i], funnel2Y[i], funnel2X[i-1], funnel2Y[i-1]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+636]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*4+540]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*4+640]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*4+544]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN8@DrawFunnel:

; 288  : 		}
; 289  : 		if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN6@DrawFunnel

; 290  : 		{
; 291  : 			if(HideFunnel && targetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+5104]
	test	eax, eax
	je	SHORT $LN6@DrawFunnel
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN6@DrawFunnel

; 292  : 			{
; 293  : 				DrawBATR();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBATR@HudClass@@AAEXXZ		; HudClass::DrawBATR
$LN6@DrawFunnel:

; 294  : 			}
; 295  : 		}
; 296  : 		//MI in SIM we want FEDS, but only if no locked target
; 297  : 	   if(g_bRealisticAvionics && !targetPtr)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN1@DrawFunnel
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN1@DrawFunnel

; 298  : 	   {
; 299  : 		   //document shows that we get this even when the gun is fired for real.
; 300  : 		   if(!ownship->OnGround() /*&& (ownship->Sms->MasterArm() == SMSBaseClass::Sim)*/)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN1@DrawFunnel

; 301  : 		   {
; 302  : 			   if(ownship->fireGun && ownship->Sms->FEDS)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	DWORD PTR [edx+916], 0
	je	SHORT $LN3@DrawFunnel
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+940]
	movzx	eax, BYTE PTR [edx+14]
	test	eax, eax
	je	SHORT $LN3@DrawFunnel

; 303  : 				   FlyFEDSBullets(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlyFEDSBullets@HudClass@@QAEX_N@Z	; HudClass::FlyFEDSBullets
	jmp	SHORT $LN1@DrawFunnel
$LN3@DrawFunnel:

; 304  : 			   else if(ownship->Sms->FEDS)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+940]
	movzx	ecx, BYTE PTR [eax+14]
	test	ecx, ecx
	je	SHORT $LN1@DrawFunnel

; 305  : 				   FlyFEDSBullets(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlyFEDSBullets@HudClass@@QAEX_N@Z	; HudClass::FlyFEDSBullets
$LN1@DrawFunnel:

; 306  : 		   }
; 307  : 	   }
; 308  : 	}

	jmp	$LN12@DrawFunnel
$LN11@DrawFunnel:

; 309  : 
; 310  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 311  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	edx, 4
	imul	edx, 44					; 0000002cH
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 312  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawFunnel@HudClass@@AAEXXZ ENDP			; HudClass::DrawFunnel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_tf$ = -52						; size = 4
_xPos$ = -48						; size = 4
_yPos$ = -44						; size = 4
_interp$ = -40						; size = 4
_tfms$ = -36						; size = 4
_range$ = -32						; size = 4
tv264 = -28						; size = 4
_radius$ = -24						; size = 4
_idx$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DrawSSLC@HudClass@@AAEXXZ PROC				; HudClass::DrawSSLC
; _this$ = ecx

; 591  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DrawSSLC@HudClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  : float	tf, range, interp;
; 593  : float	xPos, yPos;		// The HUD space location of the hypothetical bullet in flight
; 594  : int		tfms, idx;
; 595  : float	radius;
; 596  : 	if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN7@DrawSSLC

; 597  : 		DrawLCOSForSSLC();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawLCOSForSSLC@HudClass@@AAEXXZ	; HudClass::DrawLCOSForSSLC
$LN7@DrawSSLC:

; 598  : 
; 599  : 	display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 600  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 601  : 
; 602  : 	// Continuously Computed Impact Line
; 603  : 	static const float tickWidth = MRToHudUnits(5.0F);

	mov	ecx, DWORD PTR ?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA
	and	ecx, 1
	jne	SHORT $LN6@DrawSSLC
	mov	edx, DWORD PTR ?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA
	or	edx, 1
	mov	DWORD PTR ?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA, edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN6@DrawSSLC:

; 604  : 
; 605  : 	static const int	idx1 =  500 / EEGSTimePerSegment;
; 606  : 	static const int	idx2 = 1000 / EEGSTimePerSegment;
; 607  : 	static const int	idx3 = 1500 / EEGSTimePerSegment;
; 608  : //	ShiAssert( idx3 < NumEEGSSegments );
; 609  : 
; 610  : 	display->Line(	0.0F, 0.0F, bulletH[idx1], bulletV[idx1]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+160]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 611  : 	display->Line(	bulletH[idx1] - tickWidth, bulletV[idx1], bulletH[idx1] + tickWidth, bulletV[idx1]);

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	addss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+64]
	subss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 612  : 
; 613  : 	display->Line(	bulletH[idx1], bulletV[idx1], bulletH[idx2], bulletV[idx2]);

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+160]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 614  : 	display->Line(	bulletH[idx2] - tickWidth, bulletV[idx2], bulletH[idx2] + tickWidth, bulletV[idx2]);

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	addss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+64]
	subss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 615  : 
; 616  : 	display->Line(	bulletH[idx2], bulletV[idx2], bulletH[idx3], bulletV[idx3]);

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+160]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 617  : 	display->Line(	bulletH[idx3] - tickWidth, bulletV[idx3], bulletH[idx3] + tickWidth, bulletV[idx3]);

	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+160]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax+64]
	addss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+160]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx+64]
	subss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 618  : 
; 619  : 	// Pipper, 1 TOF in the future
; 620  : 	if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN5@DrawSSLC

; 621  : 		range = min(targetData->range, 9000.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR __real@460ca000
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN10@DrawSSLC
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR tv264[ebp], xmm0
	jmp	SHORT $LN11@DrawSSLC
$LN10@DrawSSLC:
	movss	xmm0, DWORD PTR __real@460ca000
	movss	DWORD PTR tv264[ebp], xmm0
$LN11@DrawSSLC:
	movss	xmm0, DWORD PTR tv264[ebp]
	movss	DWORD PTR _range$[ebp], xmm0

; 622  : 	else

	jmp	SHORT $LN4@DrawSSLC
$LN5@DrawSSLC:

; 623  : 		range = 1500.0F;

	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR _range$[ebp], xmm0
$LN4@DrawSSLC:

; 624  : 
; 625  : 	// How long to fly to the chosen range (neglecting gravity)?
; 626  : 	ShiAssert(FALSE == F4IsBadReadPtr(ownship->Guns, sizeof *ownship->Guns)); // JPO
; 627  : 	tf = range / ownship->Guns->initBulletVelocity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+944]
	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR [ecx+792]
	movss	DWORD PTR _tf$[ebp], xmm0

; 628  : 	tfms = FloatToInt32(tf*1000.0f);

	movss	xmm0, DWORD PTR _tf$[ebp]
	mulss	xmm0, DWORD PTR __real@447a0000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _tfms$[ebp], eax

; 629  : 
; 630  : 	// Which bullet index to use
; 631  : 	idx		= tfms / EEGSTimePerSegment - 1;

	mov	eax, DWORD PTR _tfms$[ebp]
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx
	sub	eax, 1
	mov	DWORD PTR _idx$[ebp], eax

; 632  : 	if (idx > NumEEGSSegments-2) 

	cmp	DWORD PTR _idx$[ebp], 22		; 00000016H
	jle	SHORT $LN3@DrawSSLC

; 633  : 		idx = NumEEGSSegments-2;

	mov	DWORD PTR _idx$[ebp], 22		; 00000016H
$LN3@DrawSSLC:

; 634  : 	if (idx < 0)

	cmp	DWORD PTR _idx$[ebp], 0
	jge	SHORT $LN2@DrawSSLC

; 635  : 		idx = 0;

	mov	DWORD PTR _idx$[ebp], 0
$LN2@DrawSSLC:

; 636  : 
; 637  : 	// How to interpolate/extrapolate between the two bullet records
; 638  : 	interp	= (float)((tfms - (idx+1) * EEGSTimePerSegment)) / EEGSTimePerSegment;

	mov	edx, DWORD PTR _idx$[ebp]
	add	edx, 1
	imul	edx, 200				; 000000c8H
	mov	eax, DWORD PTR _tfms$[ebp]
	sub	eax, edx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43480000
	movss	DWORD PTR _interp$[ebp], xmm0

; 639  : 
; 640  : 	// Draw the range pipper
; 641  : 	xPos = bulletH[idx] + (bulletH[idx + 1] - bulletH[idx]) * interp;

	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+68]
	subss	xmm0, DWORD PTR [esi+eax*4+64]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	ecx, DWORD PTR _idx$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+ecx*4+64]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 642  : 	yPos = bulletV[idx] + (bulletV[idx + 1] - bulletV[idx]) * interp;

	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _idx$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+164]
	subss	xmm0, DWORD PTR [esi+edx*4+160]
	mulss	xmm0, DWORD PTR _interp$[ebp]
	mov	eax, DWORD PTR _idx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4+160]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 643  : 	display->Circle (xPos, yPos, tickWidth);

	push	ecx
	movss	xmm0, DWORD PTR ?tickWidth@?3??DrawSSLC@HudClass@@AAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 644  : 
; 645  : 	// If we DON'T have a locked target, draw a cirle showing default wing span at default range (1500.0f)
; 646  : 	if( targetPtr == NULL )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	$LN1@DrawSSLC

; 647  : 	{
; 648  : 		// Decide how big the default target would be at the default range
; 649  : 		// First in radians, then in HUD viewport space units.
; 650  : 		radius = (float)atan2( DefaultTargetSpan*0.5f, 1500.0f );

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4097700000000000
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+5020]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _radius$[ebp]

; 651  : 		radius = RadToHudUnits(radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _radius$[ebp]

; 652  : 		display->Circle (xPos, yPos, radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx
$LN1@DrawSSLC:

; 653  : 	}
; 654  : 
; 655  : 	
; 656  : 	// Put the viewport origin back where it was
; 657  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 658  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 659  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DrawSSLC@HudClass@@AAEXXZ$0:
	mov	eax, DWORD PTR ?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?3??DrawSSLC@HudClass@@AAEXXZ@4IA, eax
	ret	0
__ehhandler$?DrawSSLC@HudClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DrawSSLC@HudClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DrawSSLC@HudClass@@AAEXXZ ENDP				; HudClass::DrawSSLC
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawEEGS@HudClass@@AAEXXZ PROC				; HudClass::DrawEEGS
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 	// RV - Biker - Only draw funnel if we have guns
; 135  : 	if (ownship->Guns) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+944], 0
	je	SHORT $LN4@DrawEEGS

; 136  : 		DrawFunnel();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawFunnel@HudClass@@AAEXXZ		; HudClass::DrawFunnel
$LN4@DrawEEGS:

; 137  : 	}
; 138  : 
; 139  : 	if (targetPtr == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN3@DrawEEGS

; 140  : 	{
; 141  : 		//MI this IS there in reality...
; 142  : 	    //if (!g_bRealisticAvionics) // JPO not real I don't think.
; 143  : 		DrawMRGS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMRGS@HudClass@@AAEXXZ		; HudClass::DrawMRGS

; 144  : 	}
; 145  : 	else

	jmp	SHORT $LN2@DrawEEGS
$LN3@DrawEEGS:

; 146  : 	{
; 147  : 		if (targetData->range < 2.0F * NM_TO_FT)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR __real@463de1b0
	comiss	xmm0, DWORD PTR [ecx+44]
	jbe	SHORT $LN1@DrawEEGS

; 148  : 		{
; 149  : 			DrawTSymbol();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTSymbol@HudClass@@AAEXXZ		; HudClass::DrawTSymbol
$LN1@DrawEEGS:

; 150  : 		}
; 151  : 		DrawTDCircle();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDCircle@HudClass@@AAEXXZ		; HudClass::DrawTDCircle
$LN2@DrawEEGS:

; 152  : 	}
; 153  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawEEGS@HudClass@@AAEXXZ ENDP				; HudClass::DrawEEGS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
tv131 = -76						; size = 4
tv132 = -72						; size = 4
tv233 = -68						; size = 4
tv177 = -64						; size = 4
_tmpMode$ = -60						; size = 4
tv86 = -56						; size = 4
tv204 = -52						; size = 4
tv166 = -48						; size = 4
tv203 = -44						; size = 4
tv192 = -40						; size = 4
tv178 = -36						; size = 4
_this$ = -32						; size = 4
_tmpStr$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
?DrawGuns@HudClass@@AAEXXZ PROC				; HudClass::DrawGuns
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	char tmpStr[24];
; 26   : 	int tmpMode;
; 27   : 
; 28   : 	// If the HUD is drawing (ie: the player is here), we'd assume we have a gun on this airplane...
; 29   : 	ShiAssert( ownship );
; 30   : 	ShiAssert( ownship->Guns );
; 31   : 
; 32   : 	// Don't do anything until we have some history
; 33   : 	//if (SimLibFrameCount < 2 * SimLibMajorFrameRate)
; 34   : 	//	return;
; 35   : 
; 36   : 	// 2001-04-09 ADDED  BY S.G. IF WE HAVE NO GUNS ONBOARD, DON'T DO GUNS DISPLAY STUFF
; 37   : 	// RV - Biker - AC without guns should also have a reticle and target location line
; 38   : 	if (!ownship->Guns) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+944], 0
	jne	SHORT $LN30@DrawGuns

; 39   : 		//return;
; 40   : 		tmpMode = FireControlComputer::EEGS;

	mov	DWORD PTR _tmpMode$[ebp], 0

; 41   : 	}
; 42   : 	else {

	jmp	SHORT $LN29@DrawGuns
$LN30@DrawGuns:

; 43   :         FlyBullets();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlyBullets@HudClass@@AAEXXZ		; HudClass::FlyBullets

; 44   : 		tmpMode = ownship->FCC->GetSubMode();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+936]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	mov	DWORD PTR _tmpMode$[ebp], eax
$LN29@DrawGuns:

; 45   : 	}
; 46   : 
; 47   : 	// Slant Range and closure
; 48   : 	if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN28@DrawGuns

; 49   : 	{
; 50   : 		sprintf (tmpStr, "%.0f", max ( min (10000.0F, -targetData->rangedot * FTPSEC_TO_KNOTS), -10000.0F));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN33@DrawGuns
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN34@DrawGuns
$LN33@DrawGuns:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv86[ebp], xmm0
$LN34@DrawGuns:
	movss	xmm0, DWORD PTR tv86[ebp]
	comiss	xmm0, DWORD PTR __real@c61c4000
	jbe	SHORT $LN37@DrawGuns
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN35@DrawGuns
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv131[ebp], xmm0
	jmp	SHORT $LN36@DrawGuns
$LN35@DrawGuns:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv131[ebp], xmm0
$LN36@DrawGuns:
	movss	xmm0, DWORD PTR tv131[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN38@DrawGuns
$LN37@DrawGuns:
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR tv132[ebp], xmm0
$LN38@DrawGuns:
	cvtss2sd xmm0, DWORD PTR tv132[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 51   : 		//ShiAssert (strlen(tmpStr) < 24);
; 52   : 		if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN27@DrawGuns

; 53   : 			DrawWindowString(13, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 54   : 		else

	jmp	SHORT $LN26@DrawGuns
$LN27@DrawGuns:

; 55   : 			display->TextLeft(0.45F, -0.43F, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@bedc28f6
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN26@DrawGuns:

; 56   : 
; 57   : 		if (targetData->range > 1.0F * NM_TO_FT)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	$LN25@DrawGuns

; 58   : 			sprintf (tmpStr, "F %4.1f", max ( min (100.0F, targetData->range * FT_TO_NM), 0.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN39@DrawGuns
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv166[ebp], xmm0
	jmp	SHORT $LN40@DrawGuns
$LN39@DrawGuns:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv166[ebp], xmm0
$LN40@DrawGuns:
	movss	xmm0, DWORD PTR tv166[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN43@DrawGuns
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	mulss	xmm0, DWORD PTR __real@392c987a
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN41@DrawGuns
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv177[ebp], xmm0
	jmp	SHORT $LN42@DrawGuns
$LN41@DrawGuns:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv177[ebp], xmm0
$LN42@DrawGuns:
	movss	xmm0, DWORD PTR tv177[ebp]
	movss	DWORD PTR tv178[ebp], xmm0
	jmp	SHORT $LN44@DrawGuns
$LN43@DrawGuns:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv178[ebp], xmm0
$LN44@DrawGuns:
	cvtss2sd xmm0, DWORD PTR tv178[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 59   : 		else

	jmp	$LN24@DrawGuns
$LN25@DrawGuns:

; 60   : 			sprintf (tmpStr, "F %03.0f", max ( min (10000.0F, targetData->range * 0.01F), 0.0F));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN45@DrawGuns
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv192[ebp], xmm0
	jmp	SHORT $LN46@DrawGuns
$LN45@DrawGuns:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv192[ebp], xmm0
$LN46@DrawGuns:
	movss	xmm0, DWORD PTR tv192[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN49@DrawGuns
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN47@DrawGuns
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv203[ebp], xmm0
	jmp	SHORT $LN48@DrawGuns
$LN47@DrawGuns:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv203[ebp], xmm0
$LN48@DrawGuns:
	movss	xmm0, DWORD PTR tv203[ebp]
	movss	DWORD PTR tv204[ebp], xmm0
	jmp	SHORT $LN50@DrawGuns
$LN49@DrawGuns:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv204[ebp], xmm0
$LN50@DrawGuns:
	cvtss2sd xmm0, DWORD PTR tv204[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08GFFHNBPG@F?5?$CF03?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN24@DrawGuns:

; 61   : 	}
; 62   : 	else

	jmp	SHORT $LN23@DrawGuns
$LN28@DrawGuns:

; 63   : 		sprintf (tmpStr, "M  015");

	push	OFFSET ??_C@_06PGJBKLLK@M?5?5015?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8
$LN23@DrawGuns:

; 64   : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN22@DrawGuns

; 65   : 		DrawWindowString(10, tmpStr);

	push	0
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 66   : 	else

	jmp	SHORT $LN21@DrawGuns
$LN22@DrawGuns:

; 67   : 		display->TextLeft(0.45F, -0.36F, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@beb851ec
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN21@DrawGuns:

; 68   : 
; 69   : 	ShiAssert (strlen(tmpStr) < 24);
; 70   : 
; 71   : 	//MI
; 72   : 	if(g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN20@DrawGuns

; 73   : 		DefaultTargetSpan = OTWDriver.pCockpitManager->mpIcp->ManWSpan;

	mov	edx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33684
	mov	eax, DWORD PTR [edx+688]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+1504]
	mov	DWORD PTR [ecx+5020], edx

; 74   : 	else

	jmp	SHORT $LN19@DrawGuns
$LN20@DrawGuns:

; 75   : 		DefaultTargetSpan = 35.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@420c0000
	movss	DWORD PTR [eax+5020], xmm0
$LN19@DrawGuns:

; 76   : 	// ASSOCIATOR 03/12/03: Added the combined SnapShot LCOS Gunmode SSLC
; 77   : 	// RV - Biker - switch for tmpMode now
; 78   : 	switch (tmpMode)

	mov	ecx, DWORD PTR _tmpMode$[ebp]
	mov	DWORD PTR tv233[ebp], ecx
	cmp	DWORD PTR tv233[ebp], 3
	ja	SHORT $LN17@DrawGuns
	mov	edx, DWORD PTR tv233[ebp]
	jmp	DWORD PTR $LN51@DrawGuns[edx*4]
$LN16@DrawGuns:

; 79   : 	{
; 80   : 		case FireControlComputer::EEGS:
; 81   : 			DrawEEGS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawEEGS@HudClass@@AAEXXZ		; HudClass::DrawEEGS

; 82   : 			break;

	jmp	SHORT $LN17@DrawGuns
$LN15@DrawGuns:

; 83   : 	  
; 84   : 		case FireControlComputer::SSLC:
; 85   : 			DrawSSLC();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSSLC@HudClass@@AAEXXZ		; HudClass::DrawSSLC

; 86   : 			break;

	jmp	SHORT $LN17@DrawGuns
$LN14@DrawGuns:

; 87   :       
; 88   : 		case FireControlComputer::LCOS:
; 89   : 			DrawLCOS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawLCOS@HudClass@@AAEXXZ		; HudClass::DrawLCOS

; 90   : 			break;

	jmp	SHORT $LN17@DrawGuns
$LN13@DrawGuns:

; 91   : 
; 92   : 		case FireControlComputer::Snapshot:
; 93   : 			DrawSnapshot();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSnapshot@HudClass@@AAEXXZ		; HudClass::DrawSnapshot
$LN17@DrawGuns:

; 94   : 			break;
; 95   : 	}
; 96   : 	//MI make the funnel dissapear after we pull the trigger
; 97   : 	if(g_bRealisticAvionics) {

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN1@DrawGuns

; 98   : 		if(targetPtr) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN1@DrawGuns

; 99   : 			if((ownship->fireGun || ownship->GunFire) && ownship->Sms->MasterArm() != SMSBaseClass::Safe)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	DWORD PTR [eax+916], 0
	jne	SHORT $LN9@DrawGuns
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	movzx	eax, BYTE PTR [edx+884]
	test	eax, eax
	je	$LN10@DrawGuns
$LN9@DrawGuns:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	test	eax, eax
	je	$LN10@DrawGuns

; 100  : 			{
; 101  : 				if(!HideFunnel && !SetHideTimer) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5104]
	test	ecx, ecx
	jne	SHORT $LN8@DrawGuns
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+5105]
	test	eax, eax
	jne	SHORT $LN8@DrawGuns

; 102  : 					HideFunnelTimer = SimLibElapsedTime + 150;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 150				; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5096], ecx

; 103  : 					SetHideTimer = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5105], 1
$LN8@DrawGuns:

; 104  : 				}
; 105  : 				if(!ownship->OnGround()) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN5@DrawGuns

; 106  : 					if(!HideFunnel) {

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+5104]
	test	edx, edx
	jne	SHORT $LN5@DrawGuns

; 107  : 						if(SimLibElapsedTime >= HideFunnelTimer) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	ecx, DWORD PTR [eax+5096]
	jb	SHORT $LN5@DrawGuns

; 108  : 							HideFunnel = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+5104], 1

; 109  : 							SetShowTimer = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5106], 0
$LN5@DrawGuns:

; 110  : 						}
; 111  : 					}
; 112  : 				}
; 113  : 			}
; 114  : 			else { 

	jmp	SHORT $LN1@DrawGuns
$LN10@DrawGuns:

; 115  : 				//Make it appear again 1 second after we released the trigger
; 116  : 				if(SetHideTimer && !SetShowTimer) {

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+5105]
	test	edx, edx
	je	SHORT $LN3@DrawGuns
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5106]
	test	ecx, ecx
	jne	SHORT $LN3@DrawGuns

; 117  : 					SetHideTimer = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+5105], 0

; 118  : 					SetShowTimer = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5106], 1

; 119  : 					ShowFunnelTimer = SimLibElapsedTime + 1000;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	add	ecx, 1000				; 000003e8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+5100], ecx
$LN3@DrawGuns:

; 120  : 				}
; 121  : 				if(HideFunnel) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5104]
	test	ecx, ecx
	je	SHORT $LN1@DrawGuns

; 122  : 					if(SimLibElapsedTime >= ShowFunnelTimer) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	cmp	eax, DWORD PTR [edx+5100]
	jb	SHORT $LN1@DrawGuns

; 123  : 						HideFunnel = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+5104], 0

; 124  : 						SetShowTimer = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+5106], 0
$LN1@DrawGuns:

; 125  : 					}
; 126  : 				}
; 127  : 			}
; 128  : 		}
; 129  : 	}
; 130  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN51@DrawGuns:
	DD	$LN16@DrawGuns
	DD	$LN15@DrawGuns
	DD	$LN14@DrawGuns
	DD	$LN13@DrawGuns
?DrawGuns@HudClass@@AAEXXZ ENDP				; HudClass::DrawGuns
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\gunhud.cpp
_TEXT	SEGMENT
_trig$ = -80						; size = 8
_rangeTic1X$ = -72					; size = 4
_rangeTic1Y$ = -68					; size = 4
_rangeTic2X$ = -64					; size = 4
_rangeTic2Y$ = -60					; size = 4
tv439 = -56						; size = 4
tv429 = -52						; size = 4
tv410 = -48						; size = 4
tv404 = -44						; size = 4
tv394 = -40						; size = 4
tv385 = -36						; size = 4
tv379 = -32						; size = 4
tv372 = -28						; size = 4
tv232 = -24						; size = 4
_extent$ = -20						; size = 4
_offset$ = -16						; size = 4
_xPos$ = -12						; size = 4
_yPos$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawTDCircle@HudClass@@AAEXXZ PROC			; HudClass::DrawTDCircle
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 347  : float xPos, yPos;
; 348  : float extent;
; 349  : float rangeTic1X, rangeTic1Y;
; 350  : float rangeTic2X, rangeTic2Y;
; 351  : mlTrig trig;
; 352  : float offset = 0.04F;

	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _offset$[ebp], xmm0

; 353  : 
; 354  : 	ShiAssert( targetPtr );
; 355  : 
; 356  : 	xPos = RadToHudUnitsX(targetData->az);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _xPos$[ebp]

; 357  : 	yPos = RadToHudUnitsY(targetData->el);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR _yPos$[ebp]

; 358  : 
; 359  : 	display->AdjustOriginInViewport(0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 360  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 361  : 
; 362  :    if (fabs (targetData->az) > 825.0F * DTR ||
; 363  :        fabs (targetData->el) > 825.0F * DTR ||
; 364  :        fabs (xPos) > 0.90F || fabs(yPos + hudWinY[BORESIGHT_CROSS_WINDOW] +
; 365  :        hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F) > 0.825F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv372[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	comiss	xmm0, DWORD PTR __real@41666229
	ja	$LN7@DrawTDCirc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv379[ebp]
	movss	xmm0, DWORD PTR tv379[ebp]
	comiss	xmm0, DWORD PTR __real@41666229
	ja	SHORT $LN7@DrawTDCirc
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv385[ebp]
	movss	xmm0, DWORD PTR tv385[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	ja	SHORT $LN7@DrawTDCirc
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	comiss	xmm0, DWORD PTR __real@3f533333
	jbe	$LN8@DrawTDCirc
$LN7@DrawTDCirc:

; 366  :    {
; 367  :       mlSinCos (&trig, 90.0F*DTR - targetData->droll);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR __real@3fc90fd9
	subss	xmm0, DWORD PTR [edx+40]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos

; 368  :       xPos = MRToHudUnits(45.0F) * trig.cos;

	add	esp, 4
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR tv404[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 369  :       yPos = MRToHudUnits(45.0F) * trig.sin;

	push	ecx
	movss	xmm0, DWORD PTR __real@42340000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MRToHudUnits@HudClass@@AAEMM@Z		; HudClass::MRToHudUnits
	fstp	DWORD PTR tv410[ebp]
	movss	xmm0, DWORD PTR tv410[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 370  :       display->Line (0.0F, 0.0F, xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 371  : 
; 372  :       xPos = offset * trig.cos;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 373  :       yPos = offset * trig.sin;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0
$LN6@DrawTDCirc:

; 374  :       while ( fabs (xPos) < 0.825F && fabs(yPos + hudWinY[BORESIGHT_CROSS_WINDOW] +
; 375  :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F) < 0.825F)

	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv429[ebp]
	movss	xmm0, DWORD PTR __real@3f533333
	comiss	xmm0, DWORD PTR tv429[ebp]
	jbe	$LN5@DrawTDCirc
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv439[ebp]
	movss	xmm0, DWORD PTR __real@3f533333
	comiss	xmm0, DWORD PTR tv439[ebp]
	jbe	SHORT $LN5@DrawTDCirc

; 376  :       {
; 377  :          offset += 0.02F;

	movss	xmm0, DWORD PTR _offset$[ebp]
	addss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _offset$[ebp], xmm0

; 378  :          xPos = offset * trig.cos;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 379  :          yPos = offset * trig.sin;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 380  :       }

	jmp	$LN6@DrawTDCirc
$LN5@DrawTDCirc:

; 381  :       offset -= 0.02F;

	movss	xmm0, DWORD PTR _offset$[ebp]
	subss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _offset$[ebp], xmm0

; 382  :       xPos = offset * trig.cos;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 383  :       yPos = offset * trig.sin;

	movss	xmm0, DWORD PTR _offset$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 384  :       display->Circle (xPos, yPos, 0.15F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 385  :       display->Line (xPos + 0.05F, yPos + 0.05F, xPos - 0.05F, yPos - 0.05F);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 386  :       display->Line (xPos + 0.05F, yPos - 0.05F, xPos - 0.05F, yPos + 0.05F);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yPos$[ebp]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 387  : 
; 388  : //      sprintf (tmpStr, "%.0f", targetData->ata * RTD);
; 389  : //      ShiAssert (strlen(tmpStr) < 12);
; 390  : //      display->TextRight(-MRToHudUnits(60.0F), 0.0F, tmpStr);
; 391  :    }
; 392  :    else

	jmp	$LN1@DrawTDCirc
$LN8@DrawTDCirc:

; 393  :    {
; 394  :       extent = min (12000.0F, targetData->range)/12000.0F * 360.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR __real@463b8000
	jbe	SHORT $LN11@DrawTDCirc
	movss	xmm0, DWORD PTR __real@463b8000
	movss	DWORD PTR tv232[ebp], xmm0
	jmp	SHORT $LN12@DrawTDCirc
$LN11@DrawTDCirc:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR tv232[ebp], xmm0
$LN12@DrawTDCirc:
	movss	xmm0, DWORD PTR tv232[ebp]
	divss	xmm0, DWORD PTR __real@463b8000
	mulss	xmm0, DWORD PTR __real@43b40000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _extent$[ebp], xmm0

; 395  :       if (extent > 90.0F * DTR)

	movss	xmm0, DWORD PTR _extent$[ebp]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	$LN3@DrawTDCirc

; 396  :       {
; 397  :          display->Arc (xPos, yPos, 0.15F, 0.0F, extent - 90.0F * DTR);

	movss	xmm0, DWORD PTR _extent$[ebp]
	subss	xmm0, DWORD PTR __real@3fc90fd9
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 398  :          display->Arc (xPos, yPos, 0.15F, 270.0F * DTR, 360.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 399  :       }
; 400  :       else

	jmp	SHORT $LN2@DrawTDCirc
$LN3@DrawTDCirc:

; 401  :       {
; 402  :          display->Arc (xPos, yPos, 0.15F, 270.0F * DTR, 270.0F * DTR + extent);

	movss	xmm0, DWORD PTR __real@4096cbe3
	addss	xmm0, DWORD PTR _extent$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax
$LN2@DrawTDCirc:

; 403  :       }
; 404  : 
; 405  :       display->Circle (xPos + 0.175F, yPos, 0.01F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR __real@3e333333
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 406  : 
; 407  :       if (targetData->range < 12000.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR __real@463b8000
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	$LN1@DrawTDCirc

; 408  :       {
; 409  :          mlSinCos (&trig, extent);

	push	ecx
	movss	xmm0, DWORD PTR _extent$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 410  :          rangeTic1X = 0.15F * trig.sin;

	movss	xmm0, DWORD PTR __real@3e19999a
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic1X$[ebp], xmm0

; 411  :          rangeTic1Y = 0.15F * trig.cos;

	movss	xmm0, DWORD PTR __real@3e19999a
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic1Y$[ebp], xmm0

; 412  :          rangeTic2X = 0.115F * trig.sin;

	movss	xmm0, DWORD PTR __real@3deb851f
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 413  :          rangeTic2Y = 0.115F * trig.cos;

	movss	xmm0, DWORD PTR __real@3deb851f
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 414  :          display->Line (xPos + rangeTic1X, yPos + rangeTic1Y,
; 415  :             xPos + rangeTic2X, yPos + rangeTic2Y);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	addss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN1@DrawTDCirc:

; 416  :       }
; 417  :    }
; 418  : 
; 419  :    display->AdjustOriginInViewport(0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 420  :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 421  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawTDCircle@HudClass@@AAEXXZ ENDP			; HudClass::DrawTDCircle
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
