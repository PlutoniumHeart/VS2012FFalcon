; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DISPLAYS\DataInput.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
_DATA	SEGMENT
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?OnMFD@DrawableClass@@QAEHXZ			; DrawableClass::OnMFD
PUBLIC	?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ	; MFDClass::GetOwnShip
PUBLIC	?IsAGMasterMode@FireControlComputer@@QAEHXZ	; FireControlComputer::IsAGMasterMode
PUBLIC	?GetAGBRippleCount@SMSClass@@QAEHXZ		; SMSClass::GetAGBRippleCount
PUBLIC	?GetAGBRippleInterval@SMSClass@@QAEHXZ		; SMSClass::GetAGBRippleInterval
PUBLIC	?GetAGBFuze@SMSClass@@QAEHXZ			; SMSClass::GetAGBFuze
PUBLIC	?GetAGBBurstAlt@SMSClass@@QAEHXZ		; SMSClass::GetAGBBurstAlt
PUBLIC	?GetAGBReleaseAngle@SMSClass@@QAEHXZ		; SMSClass::GetAGBReleaseAngle
PUBLIC	?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ		; SMSClass::GetAGBC1ArmDelay1
PUBLIC	?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ		; SMSClass::GetAGBC1ArmDelay2
PUBLIC	?GetAGBC2ArmDelay@SMSClass@@QAEMXZ		; SMSClass::GetAGBC2ArmDelay
PUBLIC	?SetAGBRippleCount@SMSClass@@QAEXH@Z		; SMSClass::SetAGBRippleCount
PUBLIC	?SetAGBRippleInterval@SMSClass@@QAEXH@Z		; SMSClass::SetAGBRippleInterval
PUBLIC	?SetAGBBurstAlt@SMSClass@@QAEXH@Z		; SMSClass::SetAGBBurstAlt
PUBLIC	?SetAGBReleaseAngle@SMSClass@@QAEXH@Z		; SMSClass::SetAGBReleaseAngle
PUBLIC	?SetAGBC1ArmDelay1@SMSClass@@QAEXM@Z		; SMSClass::SetAGBC1ArmDelay1
PUBLIC	?SetAGBC1ArmDelay2@SMSClass@@QAEXM@Z		; SMSClass::SetAGBC1ArmDelay2
PUBLIC	?SetAGBC2ArmDelay@SMSClass@@QAEXM@Z		; SMSClass::SetAGBC2ArmDelay
PUBLIC	?InputDisplay@SmsDrawable@@QAEXXZ		; SmsDrawable::InputDisplay
PUBLIC	?InputRP@SmsDrawable@@QAEXXZ			; SmsDrawable::InputRP
PUBLIC	?InputRS@SmsDrawable@@QAEXXZ			; SmsDrawable::InputRS
PUBLIC	?InputPushButton@SmsDrawable@@QAEXHH@Z		; SmsDrawable::InputPushButton
PUBLIC	?FillInputString@SmsDrawable@@QAEXXZ		; SmsDrawable::FillInputString
PUBLIC	?CheckInput@SmsDrawable@@QAEXXZ			; SmsDrawable::CheckInput
PUBLIC	?CheckDigits@SmsDrawable@@QAEXXZ		; SmsDrawable::CheckDigits
PUBLIC	?CorrectInput@SmsDrawable@@QAEXXZ		; SmsDrawable::CorrectInput
PUBLIC	?WrongInput@SmsDrawable@@QAEXXZ			; SmsDrawable::WrongInput
PUBLIC	?CDisplay@SmsDrawable@@QAEXXZ			; SmsDrawable::CDisplay
PUBLIC	?ClearDigits@SmsDrawable@@QAEXXZ		; SmsDrawable::ClearDigits
PUBLIC	?RelAngDisplay@SmsDrawable@@QAEXXZ		; SmsDrawable::RelAngDisplay
PUBLIC	?CNTLPage@SmsDrawable@@QAEXXZ			; SmsDrawable::CNTLPage
PUBLIC	?LabelOSB@SmsDrawable@@QAEXXZ			; SmsDrawable::LabelOSB
PUBLIC	?ADPage@SmsDrawable@@QAEXXZ			; SmsDrawable::ADPage
PUBLIC	?AddInput@SmsDrawable@@QAEXH@Z			; SmsDrawable::AddInput
PUBLIC	?InputBA@SmsDrawable@@QAEXXZ			; SmsDrawable::InputBA
PUBLIC	?LADDDisplay@SmsDrawable@@QAEXXZ		; SmsDrawable::LADDDisplay
PUBLIC	?AddUp@SmsDrawable@@QAEHXZ			; SmsDrawable::AddUp
PUBLIC	?CheckButton@SmsDrawable@@QAEHH@Z		; SmsDrawable::CheckButton
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_05EMNIMLKD@ENTER?$AA@			; `string'
PUBLIC	??_C@_0P@LAKCCDKG@RELEASE?5PULSES?$AA@		; `string'
PUBLIC	??_C@_01IMBAIPIC@?$AC?$AA@			; `string'
PUBLIC	??_C@_0P@LNAFIIEM@IMPACT?5SPACING?$AA@		; `string'
PUBLIC	??_C@_04COHIKBOA@?$CFdFT?$AA@			; `string'
PUBLIC	??_C@_03HCLOBDMK@A?9G?$AA@			; `string'
PUBLIC	??_C@_03KOECGNEM@INV?$AA@			; `string'
PUBLIC	??_C@_04GKDMIDBA@CNTL?$AA@			; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_0L@BBNFLHLM@PR?525000FT?$AA@		; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_0N@BCGELCLA@TOF?528?400SEC?$AA@		; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_0L@JPMJKEF@MRA?51105FT?$AA@		; `string'
PUBLIC	??_C@_07KBPKHDFI@Rel?5Ang?$AA@			; `string'
PUBLIC	??_C@_0M@MFDBJJIM@AD1?52?400SEC?$AA@		; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_0M@HOMLLDDM@AD2?52?450SEC?$AA@		; `string'
PUBLIC	??_C@_07GKIBJLNK@BA?575FT?$AA@			; `string'
PUBLIC	??_C@_0M@DDMOALBD@AD?512?425SEC?$AA@		; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_08PHPEMGDC@BA?5100FT?$AA@			; `string'
PUBLIC	??_C@_02OHOGDBNG@C?5?$AA@			; `string'
PUBLIC	??_C@_07JPLENJIP@?$CF?42fSEC?$AA@		; `string'
PUBLIC	??_C@_02OFPDELBL@AD?$AA@			; `string'
PUBLIC	??_C@_02LCNFDDLB@2?5?$AA@			; `string'
PUBLIC	??_C@_02JKMCABAH@BA?$AA@			; `string'
PUBLIC	??_C@_03EMNNDNBF@AD1?$AA@			; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_03GHPAGONG@AD2?$AA@			; `string'
PUBLIC	??_C@_0N@KCPBOJD@ARMING?5DELAY?$AA@		; `string'
PUBLIC	??_C@_0N@PGLECFFG@BURST?5HEIGHT?$AA@		; `string'
PUBLIC	??_C@_07EKLFMPDF@BA?5?$CF?40f?$AA@		; `string'
PUBLIC	??_C@_0O@KPCJCIMM@CAT?51?5AD1?1AD2?$AA@		; `string'
PUBLIC	??_C@_0M@OFBAOMHA@CAT?52?5AD?1BA?$AA@		; `string'
PUBLIC	??_C@_0M@CJLKOMOO@CAT?53?5AD?1BA?$AA@		; `string'
PUBLIC	??_C@_08CMBIELPA@12?425SEC?$AA@			; `string'
PUBLIC	??_C@_05HKNBKDFB@100FT?$AA@			; `string'
PUBLIC	??_C@_0BB@PIFIHCNM@CAT?54?5AD1?1AD2?1BA?$AA@	; `string'
PUBLIC	??_C@_07BDFBHKNN@2?400SEC?$AA@			; `string'
PUBLIC	??_C@_07EDJMOLGO@2?450SEC?$AA@			; `string'
PUBLIC	??_C@_04EHOJANMF@75FT?$AA@			; `string'
PUBLIC	??_C@_0O@JPBIJANF@RELEASE?5ANGLE?$AA@		; `string'
PUBLIC	??_C@_0BA@FKIEACHD@LADD?5PR?1TOF?1MRA?$AA@	; `string'
PUBLIC	??_C@_07FINONAML@25000FT?$AA@			; `string'
PUBLIC	??_C@_08BHNEFIG@28?400SEC?$AA@			; `string'
PUBLIC	??_C@_06GPLFIDFI@1105FT?$AA@			; `string'
PUBLIC	??_C@_04DBDNEJGP@ENTR?$AA@			; `string'
PUBLIC	??_C@_03LKPAADCN@RTN?$AA@			; `string'
PUBLIC	??_C@_03JBKPNEFK@RCL?$AA@			; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3d23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f000000
PUBLIC	__real@3f400000
PUBLIC	__real@3fc00000
PUBLIC	__real@40000000
PUBLIC	__real@42c80000
PUBLIC	__real@bdcccccd
PUBLIC	__real@be4ccccd
PUBLIC	__real@be99999a
PUBLIC	__real@bf000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?LabelButton@DrawableClass@@QAEXHPAD0H@Z:PROC	; DrawableClass::LabelButton
EXTRN	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z:PROC	; DrawableClass::GetButtonPos
EXTRN	?PushButton@MfdDrawable@@UAEXHH@Z:PROC		; MfdDrawable::PushButton
EXTRN	?DrawReference@MfdDrawable@@QAEXPAVAircraftClass@@@Z:PROC ; MfdDrawable::DrawReference
EXTRN	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ:PROC ; FireControlComputer::GetMainMasterMode
EXTRN	?SetDisplayMode@SmsDrawable@@QAEXW4SmsDisplayMode@1@@Z:PROC ; SmsDrawable::SetDisplayMode
EXTRN	?BottomRow@SmsDrawable@@AAEXXZ:PROC		; SmsDrawable::BottomRow
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?MfdDisplay@@3PAPAVMFDClass@@A:BYTE		; MfdDisplay
EXTRN	?InputFlash@SmsDrawable@@2HA:DWORD		; SmsDrawable::InputFlash
EXTRN	?g_bMLU@@3_NA:BYTE				; g_bMLU
EXTRN	?maxripple@@3HA:DWORD				; maxripple
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBKPNEFK@RCL?$AA@
CONST	SEGMENT
??_C@_03JBKPNEFK@RCL?$AA@ DB 'RCL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LKPAADCN@RTN?$AA@
CONST	SEGMENT
??_C@_03LKPAADCN@RTN?$AA@ DB 'RTN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBDNEJGP@ENTR?$AA@
CONST	SEGMENT
??_C@_04DBDNEJGP@ENTR?$AA@ DB 'ENTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GPLFIDFI@1105FT?$AA@
CONST	SEGMENT
??_C@_06GPLFIDFI@1105FT?$AA@ DB '1105FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHNEFIG@28?400SEC?$AA@
CONST	SEGMENT
??_C@_08BHNEFIG@28?400SEC?$AA@ DB '28.00SEC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FINONAML@25000FT?$AA@
CONST	SEGMENT
??_C@_07FINONAML@25000FT?$AA@ DB '25000FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FKIEACHD@LADD?5PR?1TOF?1MRA?$AA@
CONST	SEGMENT
??_C@_0BA@FKIEACHD@LADD?5PR?1TOF?1MRA?$AA@ DB 'LADD PR/TOF/MRA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JPBIJANF@RELEASE?5ANGLE?$AA@
CONST	SEGMENT
??_C@_0O@JPBIJANF@RELEASE?5ANGLE?$AA@ DB 'RELEASE ANGLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EHOJANMF@75FT?$AA@
CONST	SEGMENT
??_C@_04EHOJANMF@75FT?$AA@ DB '75FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDJMOLGO@2?450SEC?$AA@
CONST	SEGMENT
??_C@_07EDJMOLGO@2?450SEC?$AA@ DB '2.50SEC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDFBHKNN@2?400SEC?$AA@
CONST	SEGMENT
??_C@_07BDFBHKNN@2?400SEC?$AA@ DB '2.00SEC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PIFIHCNM@CAT?54?5AD1?1AD2?1BA?$AA@
CONST	SEGMENT
??_C@_0BB@PIFIHCNM@CAT?54?5AD1?1AD2?1BA?$AA@ DB 'CAT 4 AD1/AD2/BA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKNBKDFB@100FT?$AA@
CONST	SEGMENT
??_C@_05HKNBKDFB@100FT?$AA@ DB '100FT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMBIELPA@12?425SEC?$AA@
CONST	SEGMENT
??_C@_08CMBIELPA@12?425SEC?$AA@ DB '12.25SEC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CJLKOMOO@CAT?53?5AD?1BA?$AA@
CONST	SEGMENT
??_C@_0M@CJLKOMOO@CAT?53?5AD?1BA?$AA@ DB 'CAT 3 AD/BA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFBAOMHA@CAT?52?5AD?1BA?$AA@
CONST	SEGMENT
??_C@_0M@OFBAOMHA@CAT?52?5AD?1BA?$AA@ DB 'CAT 2 AD/BA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KPCJCIMM@CAT?51?5AD1?1AD2?$AA@
CONST	SEGMENT
??_C@_0O@KPCJCIMM@CAT?51?5AD1?1AD2?$AA@ DB 'CAT 1 AD1/AD2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EKLFMPDF@BA?5?$CF?40f?$AA@
CONST	SEGMENT
??_C@_07EKLFMPDF@BA?5?$CF?40f?$AA@ DB 'BA %.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGLECFFG@BURST?5HEIGHT?$AA@
CONST	SEGMENT
??_C@_0N@PGLECFFG@BURST?5HEIGHT?$AA@ DB 'BURST HEIGHT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCPBOJD@ARMING?5DELAY?$AA@
CONST	SEGMENT
??_C@_0N@KCPBOJD@ARMING?5DELAY?$AA@ DB 'ARMING DELAY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHPAGONG@AD2?$AA@
CONST	SEGMENT
??_C@_03GHPAGONG@AD2?$AA@ DB 'AD2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMNNDNBF@AD1?$AA@
CONST	SEGMENT
??_C@_03EMNNDNBF@AD1?$AA@ DB 'AD1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JKMCABAH@BA?$AA@
CONST	SEGMENT
??_C@_02JKMCABAH@BA?$AA@ DB 'BA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCNFDDLB@2?5?$AA@
CONST	SEGMENT
??_C@_02LCNFDDLB@2?5?$AA@ DB '2 ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OFPDELBL@AD?$AA@
CONST	SEGMENT
??_C@_02OFPDELBL@AD?$AA@ DB 'AD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
CONST	SEGMENT
??_C@_07JPLENJIP@?$CF?42fSEC?$AA@ DB '%.2fSEC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02OHOGDBNG@C?5?$AA@
CONST	SEGMENT
??_C@_02OHOGDBNG@C?5?$AA@ DB 'C ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHPEMGDC@BA?5100FT?$AA@
CONST	SEGMENT
??_C@_08PHPEMGDC@BA?5100FT?$AA@ DB 'BA 100FT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DDMOALBD@AD?512?425SEC?$AA@
CONST	SEGMENT
??_C@_0M@DDMOALBD@AD?512?425SEC?$AA@ DB 'AD 12.25SEC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKIBJLNK@BA?575FT?$AA@
CONST	SEGMENT
??_C@_07GKIBJLNK@BA?575FT?$AA@ DB 'BA 75FT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HOMLLDDM@AD2?52?450SEC?$AA@
CONST	SEGMENT
??_C@_0M@HOMLLDDM@AD2?52?450SEC?$AA@ DB 'AD2 2.50SEC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MFDBJJIM@AD1?52?400SEC?$AA@
CONST	SEGMENT
??_C@_0M@MFDBJJIM@AD1?52?400SEC?$AA@ DB 'AD1 2.00SEC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBPKHDFI@Rel?5Ang?$AA@
CONST	SEGMENT
??_C@_07KBPKHDFI@Rel?5Ang?$AA@ DB 'Rel Ang', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JPMJKEF@MRA?51105FT?$AA@
CONST	SEGMENT
??_C@_0L@JPMJKEF@MRA?51105FT?$AA@ DB 'MRA 1105FT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCGELCLA@TOF?528?400SEC?$AA@
CONST	SEGMENT
??_C@_0N@BCGELCLA@TOF?528?400SEC?$AA@ DB 'TOF 28.00SEC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBNFLHLM@PR?525000FT?$AA@
CONST	SEGMENT
??_C@_0L@BBNFLHLM@PR?525000FT?$AA@ DB 'PR 25000FT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKDMIDBA@CNTL?$AA@
CONST	SEGMENT
??_C@_04GKDMIDBA@CNTL?$AA@ DB 'CNTL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KOECGNEM@INV?$AA@
CONST	SEGMENT
??_C@_03KOECGNEM@INV?$AA@ DB 'INV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HCLOBDMK@A?9G?$AA@
CONST	SEGMENT
??_C@_03HCLOBDMK@A?9G?$AA@ DB 'A-G', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COHIKBOA@?$CFdFT?$AA@
CONST	SEGMENT
??_C@_04COHIKBOA@?$CFdFT?$AA@ DB '%dFT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LNAFIIEM@IMPACT?5SPACING?$AA@
CONST	SEGMENT
??_C@_0P@LNAFIIEM@IMPACT?5SPACING?$AA@ DB 'IMPACT SPACING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01IMBAIPIC@?$AC?$AA@
CONST	SEGMENT
??_C@_01IMBAIPIC@?$AC?$AA@ DB 02H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LAKCCDKG@RELEASE?5PULSES?$AA@
CONST	SEGMENT
??_C@_0P@LAKCCDKG@RELEASE?5PULSES?$AA@ DB 'RELEASE PULSES', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNIMLKD@ENTER?$AA@
CONST	SEGMENT
??_C@_05EMNIMLKD@ENTER?$AA@ DB 'ENTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_whichButton$ = 8					; size = 4
?CheckButton@SmsDrawable@@QAEHH@Z PROC			; SmsDrawable::CheckButton
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  : 	if(whichButton == 1 ||
; 872  : 		whichButton == 2 ||
; 873  : 		whichButton == 3 ||
; 874  : 		whichButton == 10 ||
; 875  : 		whichButton == 11 ||
; 876  : 		whichButton == 12 ||
; 877  : 		whichButton == 13 ||
; 878  : 		whichButton == 14)

	cmp	DWORD PTR _whichButton$[ebp], 1
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 2
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 3
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 10	; 0000000aH
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 11	; 0000000bH
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 12	; 0000000cH
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 13	; 0000000dH
	je	SHORT $LN2@CheckButto
	cmp	DWORD PTR _whichButton$[ebp], 14	; 0000000eH
	jne	SHORT $LN3@CheckButto
$LN2@CheckButto:

; 879  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@CheckButto

; 880  : 	else

	jmp	SHORT $LN1@CheckButto
$LN3@CheckButto:

; 881  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@CheckButto
$LN1@CheckButto:

; 882  : 
; 883  : 	return FALSE;

	xor	eax, eax
$LN4@CheckButto:

; 884  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CheckButton@SmsDrawable@@QAEHH@Z ENDP			; SmsDrawable::CheckButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_var$ = -8						; size = 4
_this$ = -4						; size = 4
?AddUp@SmsDrawable@@QAEHXZ PROC				; SmsDrawable::AddUp
; _this$ = ecx

; 812  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 813  : 	int var = 0;

	mov	DWORD PTR _var$[ebp], 0

; 814  : 	CheckDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::CheckDigits

; 815  : 	if(Input_Digits[6] >= 0)

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+224], 0
	jl	SHORT $LN7@AddUp

; 816  : 		var += Input_Digits[6];

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _var$[ebp]
	add	ecx, DWORD PTR [eax+edx+224]
	mov	DWORD PTR _var$[ebp], ecx
$LN7@AddUp:

; 817  : 	if(Input_Digits[5] >= 0)

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 0
	jl	SHORT $LN6@AddUp

; 818  : 		var += Input_Digits[5]*10;

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	imul	eax, 10					; 0000000aH
	add	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR _var$[ebp], eax
$LN6@AddUp:

; 819  : 	if(Input_Digits[4] >= 0)

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+224], 0
	jl	SHORT $LN5@AddUp

; 820  : 		var += Input_Digits[4]*100;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+224]
	imul	edx, 100				; 00000064H
	add	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR _var$[ebp], edx
$LN5@AddUp:

; 821  : 	if(Input_Digits[3] >= 0)

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+224], 0
	jl	SHORT $LN4@AddUp

; 822  : 		var += Input_Digits[3]*1000;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+224]
	imul	ecx, 1000				; 000003e8H
	add	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR _var$[ebp], ecx
$LN4@AddUp:

; 823  : 	if(Input_Digits[2] >= 0)

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 0
	jl	SHORT $LN3@AddUp

; 824  : 		var += Input_Digits[2]*10000;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	imul	eax, 10000				; 00002710H
	add	eax, DWORD PTR _var$[ebp]
	mov	DWORD PTR _var$[ebp], eax
$LN3@AddUp:

; 825  : 	if(Input_Digits[1] >= 0)

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+224], 0
	jl	SHORT $LN2@AddUp

; 826  : 		var += Input_Digits[1]*100000;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+224]
	imul	edx, 100000				; 000186a0H
	add	edx, DWORD PTR _var$[ebp]
	mov	DWORD PTR _var$[ebp], edx
$LN2@AddUp:

; 827  : 	if(Input_Digits[0] >= 0)

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+224], 0
	jl	SHORT $LN1@AddUp

; 828  : 		var += Input_Digits[0]*1000000;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+224]
	imul	ecx, 1000000				; 000f4240H
	add	ecx, DWORD PTR _var$[ebp]
	mov	DWORD PTR _var$[ebp], ecx
$LN1@AddUp:

; 829  : 
; 830  : 	return var;

	mov	eax, DWORD PTR _var$[ebp]

; 831  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AddUp@SmsDrawable@@QAEHXZ ENDP				; SmsDrawable::AddUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LADDDisplay@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::LADDDisplay
; _this$ = ecx

; 441  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 442  : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 443  : 
; 444  : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 445  : 	display->TextCenter(SecondLineX, SecondLineY, "LADD PR/TOF/MRA");

	push	0
	push	OFFSET ??_C@_0BA@FKIEACHD@LADD?5PR?1TOF?1MRA?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 446  : 	//Line1
; 447  : 	display->TextCenter(InputLineX3, InputLineY, "25000FT");

	push	0
	push	OFFSET ??_C@_07FINONAML@25000FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 448  : 	//Line2
; 449  : 	display->TextCenter(InputLineX3, InputLineY - 0.1F, "28.00SEC");

	push	0
	push	OFFSET ??_C@_08BHNEFIG@28?400SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 450  : 	//Line3
; 451  : 	display->TextCenter(InputLineX3, InputLineY - 0.2F, "1105FT");

	push	0
	push	OFFSET ??_C@_06GPLFIDFI@1105FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 452  : 	if(InputLine <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+252], 0
	jg	SHORT $LN5@LADDDispla

; 453  : 	{
; 454  : 		display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 455  : 		display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	$LN1@LADDDispla
$LN5@LADDDispla:

; 456  : 	}
; 457  : 	else if(InputLine == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 1
	jne	SHORT $LN3@LADDDispla

; 458  : 	{
; 459  : 		display->TextCenter(InputLineX1, InputLineY - 0.1F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 460  : 		display->TextCenter(InputLineX2, InputLineY - 0.1F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	SHORT $LN1@LADDDispla
$LN3@LADDDispla:

; 461  : 	}
; 462  : 	else if(InputLine >= 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 2
	jl	SHORT $LN1@LADDDispla

; 463  : 	{
; 464  : 		display->TextCenter(InputLineX1, InputLineY - 0.2F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 465  : 		display->TextCenter(InputLineX2, InputLineY - 0.2F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN1@LADDDispla:

; 466  : 	}
; 467  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LADDDisplay@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::LADDDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv182 = -8						; size = 4
_this$ = -4						; size = 4
?InputBA@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::InputBA
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 296  : 
; 297  : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 298  : 	display->TextCenter(SecondLineX, SecondLineY, "BURST HEIGHT");

	push	0
	push	OFFSET ??_C@_0N@PGLECFFG@BURST?5HEIGHT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 299  : 	display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 300  : 	display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 301  : 
; 302  : 	if(!Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	jne	SHORT $LN2@InputBA

; 303  : 		sprintf(inputstr, "BA %.0f", Sms->burstHeight);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+296]
	cvtss2sd xmm0, DWORD PTR [eax+76]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07EKLFMPDF@BA?5?$CF?40f?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 266				; 0000010aH
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 304  : 	else

	jmp	SHORT $LN1@InputBA
$LN2@InputBA:

; 305  : 		FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN1@InputBA:

; 306  : 
; 307  : 	display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	je	SHORT $LN5@InputBA
	mov	DWORD PTR tv182[ebp], 2
	jmp	SHORT $LN6@InputBA
$LN5@InputBA:
	mov	DWORD PTR tv182[ebp], 0
$LN6@InputBA:
	mov	ecx, DWORD PTR tv182[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 308  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InputBA@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::InputBA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_whichButton$ = 8					; size = 4
?AddInput@SmsDrawable@@QAEXH@Z PROC			; SmsDrawable::AddInput
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 609  : 	if(Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	$LN1@AddInput

; 610  : 	{
; 611  : 		Input_Digits[0] = Input_Digits[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx+224]
	mov	DWORD PTR [ecx+eax+224], edx

; 612  : 		Input_Digits[1] = Input_Digits[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax+224]
	mov	DWORD PTR [edx+ecx+224], eax

; 613  : 		Input_Digits[2] = Input_Digits[3];

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+224]
	mov	DWORD PTR [eax+edx+224], ecx

; 614  : 		Input_Digits[3] = Input_Digits[4];

	mov	edx, 4
	shl	edx, 2
	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx+224]
	mov	DWORD PTR [ecx+eax+224], edx

; 615  : 		Input_Digits[4] = Input_Digits[5];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax+224]
	mov	DWORD PTR [edx+ecx+224], eax

; 616  : 		Input_Digits[5] = Input_Digits[6];

	mov	ecx, 4
	imul	ecx, 6
	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+224]
	mov	DWORD PTR [eax+edx+224], ecx
$LN1@AddInput:

; 617  : 	}
; 618  : 	Input_Digits[6] = whichButton+1;

	mov	edx, DWORD PTR _whichButton$[ebp]
	add	edx, 1
	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+224], edx

; 619  : 	Manual_Input = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+264], 1

; 620  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInput@SmsDrawable@@QAEXH@Z ENDP			; SmsDrawable::AddInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv183 = -8						; size = 4
_this$ = -4						; size = 4
?ADPage@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::ADPage
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 280  : 
; 281  : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 282  : 	display->TextCenter(SecondLineX, SecondLineY, "ARMING DELAY");

	push	0
	push	OFFSET ??_C@_0N@KCPBOJD@ARMING?5DELAY?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 283  : 	display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 284  : 	display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 285  : 
; 286  : 	if(!Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	jne	SHORT $LN2@ADPage

; 287  : 		sprintf(inputstr, "%.2fSEC", Sms->armingdelay / 100);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+296]
	movss	xmm0, DWORD PTR [eax+172]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 266				; 0000010aH
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 288  : 	else

	jmp	SHORT $LN1@ADPage
$LN2@ADPage:

; 289  : 		FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN1@ADPage:

; 290  : 
; 291  : 	display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	je	SHORT $LN5@ADPage
	mov	DWORD PTR tv183[ebp], 2
	jmp	SHORT $LN6@ADPage
$LN5@ADPage:
	mov	DWORD PTR tv183[ebp], 0
$LN6@ADPage:
	mov	ecx, DWORD PTR tv183[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 292  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ADPage@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::ADPage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LabelOSB@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::LabelOSB
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	LabelButton(1, "ENTR");

	push	0
	push	0
	push	OFFSET ??_C@_04DBDNEJGP@ENTR?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 888  : 	LabelButton(2, "RTN");

	push	0
	push	0
	push	OFFSET ??_C@_03LKPAADCN@RTN?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 889  : 	LabelButton(3, "RCL");

	push	0
	push	0
	push	OFFSET ??_C@_03JBKPNEFK@RCL?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 890  : 	LabelButton(5, "6");

	push	0
	push	0
	push	OFFSET ??_C@_01DHDKHMHF@6?$AA@
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 891  : 	LabelButton(6, "7");

	push	0
	push	0
	push	OFFSET ??_C@_01COCBENDE@7?$AA@
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 892  : 	LabelButton(7, "8");

	push	0
	push	0
	push	OFFSET ??_C@_01KJLJFBPL@8?$AA@
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 893  : 	LabelButton(8, "9");

	push	0
	push	0
	push	OFFSET ??_C@_01LAKCGALK@9?$AA@
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 894  : 	LabelButton(9, "0");

	push	0
	push	0
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 895  : 	LabelButton(19, "1");

	push	0
	push	0
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 896  : 	LabelButton(18, "2");

	push	0
	push	0
	push	OFFSET ??_C@_01FDFGLJHB@2?$AA@
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 897  : 	LabelButton(17, "3");

	push	0
	push	0
	push	OFFSET ??_C@_01EKENIIDA@3?$AA@
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 898  : 	LabelButton(16, "4");

	push	0
	push	0
	push	OFFSET ??_C@_01FAMBOPH@4?$AA@
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 899  : 	LabelButton(15, "5");

	push	0
	push	0
	push	OFFSET ??_C@_01BMBHCPLG@5?$AA@
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 900  : 	DrawReference (MfdDisplay[OnMFD()]->GetOwnShip());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMFD@DrawableClass@@QAEHXZ		; DrawableClass::OnMFD
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	call	?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ ; MFDClass::GetOwnShip
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawReference@MfdDrawable@@QAEXPAVAircraftClass@@@Z ; MfdDrawable::DrawReference

; 901  : 	BottomRow();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BottomRow@SmsDrawable@@AAEXXZ		; SmsDrawable::BottomRow

; 902  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LabelOSB@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::LabelOSB
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv1102 = -124						; size = 4
tv1194 = -120						; size = 4
tv1271 = -116						; size = 4
tv1169 = -112						; size = 4
tv1238 = -108						; size = 4
tv946 = -104						; size = 4
tv636 = -100						; size = 4
tv667 = -96						; size = 4
tv325 = -92						; size = 4
tv715 = -88						; size = 4
tv529 = -84						; size = 4
tv361 = -80						; size = 4
tv458 = -76						; size = 4
tv566 = -72						; size = 4
tv863 = -68						; size = 4
tv502 = -64						; size = 4
tv802 = -60						; size = 4
tv422 = -56						; size = 4
tv768 = -52						; size = 4
tv591 = -48						; size = 4
_FCC$ = -44						; size = 4
_step$ = -40						; size = 4
_x$ = -36						; size = 4
_y$ = -32						; size = 4
_this$ = -28						; size = 4
_tempstr$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
?CNTLPage@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::CNTLPage
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	float x = 0, y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$[ebp], xmm0

; 130  : 	char tempstr[20];
; 131  : 	FireControlComputer *FCC = Sms->ownship->GetFCC();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 132  : 	if(!FCC)

	cmp	DWORD PTR _FCC$[ebp], 0
	jne	SHORT $LN11@CNTLPage

; 133  : 		return;

	jmp	$LN12@CNTLPage
$LN11@CNTLPage:

; 134  : 	//OSB1
; 135  : 	if(FCC->IsAGMasterMode()) 

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?IsAGMasterMode@FireControlComputer@@QAEHXZ ; FireControlComputer::IsAGMasterMode
	test	eax, eax
	je	SHORT $LN10@CNTLPage

; 136  : 		LabelButton(0, "A-G");

	push	0
	push	0
	push	OFFSET ??_C@_03HCLOBDMK@A?9G?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN10@CNTLPage:

; 137  : 	else
; 138  : 		ShiWarning("Should not be here when not in AG mode!!!");
; 139  : 	//OSB2
; 140  : 	LabelButton(1, FCC->subModeString);

	push	0
	push	0
	mov	ecx, DWORD PTR _FCC$[ebp]
	add	ecx, 400				; 00000190H
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 141  : 	//OSB4
; 142  : 	LabelButton(3, "INV");

	push	0
	push	0
	push	OFFSET ??_C@_03KOECGNEM@INV?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 143  : 	//OSB5
; 144  : 	LabelButton(4, "CNTL", NULL, 2);

	push	2
	push	0
	push	OFFSET ??_C@_04GKDMIDBA@CNTL?$AA@
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 145  : 	//OSB6
; 146  : 	GetButtonPos(5, &x, &y);

	lea	edx, DWORD PTR _y$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 147  : 	float step = display->TextHeight() / 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	fstp	DWORD PTR tv946[ebp]
	movss	xmm0, DWORD PTR tv946[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _step$[ebp], xmm0

; 148  : 	step += 0.04F;

	movss	xmm0, DWORD PTR _step$[ebp]
	addss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _step$[ebp], xmm0

; 149  : 	y += 1.5F * step;

	movss	xmm0, DWORD PTR __real@3fc00000
	mulss	xmm0, DWORD PTR _step$[ebp]
	addss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 150  : 	display->TextLeft(x, y, "L");

	push	0
	push	OFFSET ??_C@_01OCOKONAJ@L?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 151  : 	display->TextLeft(x - 0.75F, y, "PR 25000FT");

	push	0
	push	OFFSET ??_C@_0L@BBNFLHLM@PR?525000FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3f400000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 152  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 153  : 	display->TextLeft(x, y, "A");

	push	0
	push	OFFSET ??_C@_01FHEEJDEE@A?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 154  : 	display->TextLeft(x - 0.75F, y, "TOF 28.00SEC");

	push	0
	push	OFFSET ??_C@_0N@BCGELCLA@TOF?528?400SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3f400000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 155  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 156  : 	display->TextLeft(x, y, "D");

	push	0
	push	OFFSET ??_C@_01CKDDGHAB@D?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 157  : 	display->TextLeft(x - 0.75F, y, "MRA 1105FT");

	push	0
	push	OFFSET ??_C@_0L@JPMJKEF@MRA?51105FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR __real@3f400000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 158  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 159  : 	display->TextLeft(x, y, "D");

	push	0
	push	OFFSET ??_C@_01CKDDGHAB@D?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 160  : 	//OSB10
; 161  : 	//sprintf(tempstr, "%d", Sms->angle);
; 162  : 	sprintf(tempstr, "%d", Sms->GetAGBReleaseAngle());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBReleaseAngle@SMSClass@@QAEHXZ	; SMSClass::GetAGBReleaseAngle
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 163  : 	LabelButton(9, "Rel Ang", tempstr);

	push	0
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	push	OFFSET ??_C@_07KBPKHDFI@Rel?5Ang?$AA@
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 164  : 
; 165  : 	BottomRow();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BottomRow@SmsDrawable@@AAEXXZ		; SmsDrawable::BottomRow

; 166  : 
; 167  : 	//OSB17
; 168  : 	GetButtonPos(16, &x, &y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 169  : 	y += step;

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 170  : 	display->TextLeft(x, y, "C", C4Weap ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+263]
	test	ecx, ecx
	je	SHORT $LN14@CNTLPage
	mov	DWORD PTR tv325[ebp], 2
	jmp	SHORT $LN15@CNTLPage
$LN14@CNTLPage:
	mov	DWORD PTR tv325[ebp], 0
$LN15@CNTLPage:
	mov	edx, DWORD PTR tv325[ebp]
	push	edx
	push	OFFSET ??_C@_01GFHCPBMG@C?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 171  : 	display->TextLeft(x + 0.1f, y, "AD1 2.00SEC");

	push	0
	push	OFFSET ??_C@_0M@MFDBJJIM@AD1?52?400SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 172  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 173  : 	display->TextLeft(x, y, "4", C4Weap ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+263]
	test	ecx, ecx
	je	SHORT $LN16@CNTLPage
	mov	DWORD PTR tv361[ebp], 2
	jmp	SHORT $LN17@CNTLPage
$LN16@CNTLPage:
	mov	DWORD PTR tv361[ebp], 0
$LN17@CNTLPage:
	mov	edx, DWORD PTR tv361[ebp]
	push	edx
	push	OFFSET ??_C@_01FAMBOPH@4?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 174  : 	display->TextLeft(x + 0.1f, y, "AD2 2.50SEC");

	push	0
	push	OFFSET ??_C@_0M@HOMLLDDM@AD2?52?450SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 175  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 176  : 	display->TextLeft(x + 0.1f, y, "BA 75FT");

	push	0
	push	OFFSET ??_C@_07GKIBJLNK@BA?575FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 177  : 
; 178  : 	//OSB18
; 179  : 	GetButtonPos(17, &x, &y);

	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 180  : 	y += step;

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 181  : 	display->TextLeft(x, y, "C", C3Weap ? 2 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+262]
	test	eax, eax
	je	SHORT $LN18@CNTLPage
	mov	DWORD PTR tv422[ebp], 2
	jmp	SHORT $LN19@CNTLPage
$LN18@CNTLPage:
	mov	DWORD PTR tv422[ebp], 0
$LN19@CNTLPage:
	mov	ecx, DWORD PTR tv422[ebp]
	push	ecx
	push	OFFSET ??_C@_01GFHCPBMG@C?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 182  : 	display->TextLeft(x + 0.1f, y, "AD 12.25SEC");

	push	0
	push	OFFSET ??_C@_0M@DDMOALBD@AD?512?425SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 183  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 184  : 	display->TextLeft(x, y, "3", C3Weap ? 2 : 0);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+262]
	test	edx, edx
	je	SHORT $LN20@CNTLPage
	mov	DWORD PTR tv458[ebp], 2
	jmp	SHORT $LN21@CNTLPage
$LN20@CNTLPage:
	mov	DWORD PTR tv458[ebp], 0
$LN21@CNTLPage:
	mov	eax, DWORD PTR tv458[ebp]
	push	eax
	push	OFFSET ??_C@_01EKENIIDA@3?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 185  : 	display->TextLeft(x + 0.1f, y, "BA 100FT");

	push	0
	push	OFFSET ??_C@_08PHPEMGDC@BA?5100FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 186  : 
; 187  : 	//OSB19
; 188  : 	GetButtonPos(18, &x, &y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 189  : 	y += step;

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 190  : 	display->TextLeft(x, y, "C ", C2Weap ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+261]
	test	ecx, ecx
	je	SHORT $LN22@CNTLPage
	mov	DWORD PTR tv502[ebp], 2
	jmp	SHORT $LN23@CNTLPage
$LN22@CNTLPage:
	mov	DWORD PTR tv502[ebp], 0
$LN23@CNTLPage:
	mov	edx, DWORD PTR tv502[ebp]
	push	edx
	push	OFFSET ??_C@_02OHOGDBNG@C?5?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 191  : 	//sprintf(tempstr, "%.2fSEC", Sms->C2AD / 100);
; 192  : 	sprintf(tempstr, "%.2fSEC", Sms->GetAGBC2ArmDelay() / 100);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?GetAGBC2ArmDelay@SMSClass@@QAEMXZ	; SMSClass::GetAGBC2ArmDelay
	fstp	DWORD PTR tv1102[ebp]
	movss	xmm0, DWORD PTR tv1102[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 193  : 	display->TextLeft(x + 0.1F, y, "AD", C2Weap ? 2 : 0); 

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+261]
	test	eax, eax
	je	SHORT $LN24@CNTLPage
	mov	DWORD PTR tv529[ebp], 2
	jmp	SHORT $LN25@CNTLPage
$LN24@CNTLPage:
	mov	DWORD PTR tv529[ebp], 0
$LN25@CNTLPage:
	mov	ecx, DWORD PTR tv529[ebp]
	push	ecx
	push	OFFSET ??_C@_02OFPDELBL@AD?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 194  : 	display->TextLeft(x + 0.3F, y, tempstr);

	push	0
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 195  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 196  : 	display->TextLeft(x, y, "2 ", C2Weap ? 2 : 0);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+261]
	test	edx, edx
	je	SHORT $LN26@CNTLPage
	mov	DWORD PTR tv566[ebp], 2
	jmp	SHORT $LN27@CNTLPage
$LN26@CNTLPage:
	mov	DWORD PTR tv566[ebp], 0
$LN27@CNTLPage:
	mov	eax, DWORD PTR tv566[ebp]
	push	eax
	push	OFFSET ??_C@_02LCNFDDLB@2?5?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 197  : 	//sprintf(tempstr, "%dFT", Sms->C2BA);
; 198  : 	sprintf(tempstr, "%dFT", Sms->GetAGBBurstAlt());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBBurstAlt@SMSClass@@QAEHXZ	; SMSClass::GetAGBBurstAlt
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 199  : 	display->TextLeft(x + 0.1F, y, "BA", C2Weap ? 2 : 0); 

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+261]
	test	ecx, ecx
	je	SHORT $LN28@CNTLPage
	mov	DWORD PTR tv591[ebp], 2
	jmp	SHORT $LN29@CNTLPage
$LN28@CNTLPage:
	mov	DWORD PTR tv591[ebp], 0
$LN29@CNTLPage:
	mov	edx, DWORD PTR tv591[ebp]
	push	edx
	push	OFFSET ??_C@_02JKMCABAH@BA?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 200  : 	display->TextLeft(x + 0.3F, y, tempstr);

	push	0
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 201  : 	
; 202  : 	//OSB20
; 203  : 	GetButtonPos(19, &x, &y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 204  : 	y += step;

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 205  : 	display->TextLeft(x, y, "C", C1Weap ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+260]
	test	ecx, ecx
	je	SHORT $LN30@CNTLPage
	mov	DWORD PTR tv636[ebp], 2
	jmp	SHORT $LN31@CNTLPage
$LN30@CNTLPage:
	mov	DWORD PTR tv636[ebp], 0
$LN31@CNTLPage:
	mov	edx, DWORD PTR tv636[ebp]
	push	edx
	push	OFFSET ??_C@_01GFHCPBMG@C?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 206  : 
; 207  : 	if(Sms->curProfile==0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	cmp	DWORD PTR [ecx+196], 0
	jne	$LN8@CNTLPage

; 208  : 	{
; 209  : 		sprintf(tempstr, "%.2fSEC", Sms->GetAGBC1ArmDelay1() / 100);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+296]
	call	?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay1
	fstp	DWORD PTR tv1169[ebp]
	movss	xmm0, DWORD PTR tv1169[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 210  : 		display->TextLeft(x + 0.1F, y, "AD1", Sms->GetAGBFuze() == 1 ? 2 : 0); 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBFuze@SMSClass@@QAEHXZ		; SMSClass::GetAGBFuze
	cmp	eax, 1
	jne	SHORT $LN32@CNTLPage
	mov	DWORD PTR tv667[ebp], 2
	jmp	SHORT $LN33@CNTLPage
$LN32@CNTLPage:
	mov	DWORD PTR tv667[ebp], 0
$LN33@CNTLPage:
	mov	edx, DWORD PTR tv667[ebp]
	push	edx
	push	OFFSET ??_C@_03EMNNDNBF@AD1?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 211  : 		display->TextLeft(x + 0.3F, y, tempstr);

	push	0
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 212  : 	}
; 213  : 	else

	jmp	$LN7@CNTLPage
$LN8@CNTLPage:

; 214  : 	{
; 215  : 		sprintf(tempstr, "%.2fSEC", Sms->GetAGBC1ArmDelay1() / 100);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay1
	fstp	DWORD PTR tv1194[ebp]
	movss	xmm0, DWORD PTR tv1194[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 216  : 		if(C1Weap)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+260]
	test	ecx, ecx
	je	SHORT $LN6@CNTLPage

; 217  : 			display->TextLeft(x + 0.1F, y, "AD1", Sms->GetAGBFuze() == 1 ? 2 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+296]
	call	?GetAGBFuze@SMSClass@@QAEHXZ		; SMSClass::GetAGBFuze
	cmp	eax, 1
	jne	SHORT $LN34@CNTLPage
	mov	DWORD PTR tv715[ebp], 2
	jmp	SHORT $LN35@CNTLPage
$LN34@CNTLPage:
	mov	DWORD PTR tv715[ebp], 0
$LN35@CNTLPage:
	mov	eax, DWORD PTR tv715[ebp]
	push	eax
	push	OFFSET ??_C@_03EMNNDNBF@AD1?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 218  : 		else

	jmp	SHORT $LN5@CNTLPage
$LN6@CNTLPage:

; 219  : 			display->TextLeft(x + 0.1F, y, "AD1");

	push	0
	push	OFFSET ??_C@_03EMNNDNBF@AD1?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN5@CNTLPage:

; 220  : 		display->TextLeft(x + 0.3F, y, tempstr);

	push	0
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN7@CNTLPage:

; 221  : 	}
; 222  : 
; 223  : 
; 224  : /*
; 225  : 	if(Sms->Prof1)
; 226  : 	{
; 227  : 		sprintf(tempstr, "%.2fSEC", Sms->C1AD1 / 100);
; 228  : 		display->TextLeft(x + 0.1F, y, "AD1", Sms->Prof1NSTL == 1 ? 2 : 0); 
; 229  : 		display->TextLeft(x + 0.3F, y, tempstr);
; 230  : 	}
; 231  : 	else
; 232  : 	{
; 233  : 		sprintf(tempstr, "%.2fSEC", Sms->C1AD1 / 100);
; 234  : 		if(C1Weap)
; 235  : 			display->TextLeft(x + 0.1F, y, "AD1", Sms->Prof2NSTL == 1 ? 2 : 0);
; 236  : 		else
; 237  : 			display->TextLeft(x + 0.1F, y, "AD1");
; 238  : 		display->TextLeft(x + 0.3F, y, tempstr);
; 239  : 	}
; 240  : */
; 241  : 
; 242  : 	y -= step;

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _step$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 243  : 	display->TextLeft(x, y, "1", C1Weap ? 2 : 0);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+260]
	test	edx, edx
	je	SHORT $LN36@CNTLPage
	mov	DWORD PTR tv768[ebp], 2
	jmp	SHORT $LN37@CNTLPage
$LN36@CNTLPage:
	mov	DWORD PTR tv768[ebp], 0
$LN37@CNTLPage:
	mov	eax, DWORD PTR tv768[ebp]
	push	eax
	push	OFFSET ??_C@_01HIHLOKLC@1?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 244  : 
; 245  : 	if(Sms->curProfile == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	cmp	DWORD PTR [edx+196], 0
	jne	$LN4@CNTLPage

; 246  : 	{
; 247  : 		sprintf(tempstr, "%.2fSEC", Sms->GetAGBC1ArmDelay2() / 100);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay2
	fstp	DWORD PTR tv1238[ebp]
	movss	xmm0, DWORD PTR tv1238[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 248  : 		if(C1Weap)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+260]
	test	eax, eax
	je	SHORT $LN3@CNTLPage

; 249  : 			display->TextLeft(x + 0.1F, y, "AD2", Sms->GetAGBFuze() != 1 ? 2 : 0);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBFuze@SMSClass@@QAEHXZ		; SMSClass::GetAGBFuze
	cmp	eax, 1
	je	SHORT $LN38@CNTLPage
	mov	DWORD PTR tv802[ebp], 2
	jmp	SHORT $LN39@CNTLPage
$LN38@CNTLPage:
	mov	DWORD PTR tv802[ebp], 0
$LN39@CNTLPage:
	mov	edx, DWORD PTR tv802[ebp]
	push	edx
	push	OFFSET ??_C@_03GHPAGONG@AD2?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 250  : 		else

	jmp	SHORT $LN2@CNTLPage
$LN3@CNTLPage:

; 251  : 			display->TextLeft(x + 0.1F, y, "AD2");

	push	0
	push	OFFSET ??_C@_03GHPAGONG@AD2?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx
$LN2@CNTLPage:

; 252  : 		display->TextLeft(x + 0.3F, y, tempstr);

	push	0
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 253  : 	}
; 254  : 	else

	jmp	$LN1@CNTLPage
$LN4@CNTLPage:

; 255  : 	{
; 256  : 		sprintf(tempstr, "%.2fSEC", Sms->GetAGBC1ArmDelay2() / 100);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay2
	fstp	DWORD PTR tv1271[ebp]
	movss	xmm0, DWORD PTR tv1271[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 257  : 		display->TextLeft(x + 0.1F, y, "AD2", Sms->GetAGBFuze() != 1 ? 2 : 0); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?GetAGBFuze@SMSClass@@QAEHXZ		; SMSClass::GetAGBFuze
	cmp	eax, 1
	je	SHORT $LN40@CNTLPage
	mov	DWORD PTR tv863[ebp], 2
	jmp	SHORT $LN41@CNTLPage
$LN40@CNTLPage:
	mov	DWORD PTR tv863[ebp], 0
$LN41@CNTLPage:
	mov	ecx, DWORD PTR tv863[ebp]
	push	ecx
	push	OFFSET ??_C@_03GHPAGONG@AD2?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 258  : 		display->TextLeft(x + 0.3F, y, tempstr);

	push	0
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR __real@3e99999a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax
$LN1@CNTLPage:
$LN12@CNTLPage:

; 259  : 	}
; 260  : 	/*
; 261  : 	if(Sms->Prof1)
; 262  : 	{
; 263  : 		sprintf(tempstr, "%.2fSEC", Sms->C1AD2 / 100);
; 264  : 		if(C1Weap)
; 265  : 			display->TextLeft(x + 0.1F, y, "AD2", Sms->Prof1NSTL != 1 ? 2 : 0);
; 266  : 		else
; 267  : 			display->TextLeft(x + 0.1F, y, "AD2");
; 268  : 		display->TextLeft(x + 0.3F, y, tempstr);
; 269  : 	}
; 270  : 	else
; 271  : 	{
; 272  : 		sprintf(tempstr, "%.2fSEC", Sms->C1AD2 / 100);
; 273  : 		display->TextLeft(x + 0.1F, y, "AD2", Sms->Prof2NSTL != 1 ? 2 : 0); 
; 274  : 		display->TextLeft(x + 0.3F, y, tempstr);
; 275  : 	}*/
; 276  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CNTLPage@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::CNTLPage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv186 = -8						; size = 4
_this$ = -4						; size = 4
?RelAngDisplay@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::RelAngDisplay
; _this$ = ecx

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 422  : 
; 423  : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 424  : 	display->TextCenter(SecondLineX, SecondLineY, "RELEASE ANGLE");

	push	0
	push	OFFSET ??_C@_0O@JPBIJANF@RELEASE?5ANGLE?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 425  : 	display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 426  : 	display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 427  : 	if(wrong)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+265]
	test	ecx, ecx
	je	SHORT $LN3@RelAngDisp

; 428  : 	{
; 429  : 		WrongInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongInput@SmsDrawable@@QAEXXZ		; SmsDrawable::WrongInput

; 430  : 		return;

	jmp	$LN4@RelAngDisp
$LN3@RelAngDisp:

; 431  : 	}
; 432  : 	if(!Manual_Input)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	jne	SHORT $LN2@RelAngDisp

; 433  : 		//sprintf(inputstr, "%d", Sms->angle);
; 434  : 		sprintf(inputstr, "%d", Sms->GetAGBReleaseAngle());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBReleaseAngle@SMSClass@@QAEHXZ	; SMSClass::GetAGBReleaseAngle
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 435  : 	else

	jmp	SHORT $LN1@RelAngDisp
$LN2@RelAngDisp:

; 436  : 		FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN1@RelAngDisp:

; 437  : 
; 438  : 	display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	SHORT $LN6@RelAngDisp
	mov	DWORD PTR tv186[ebp], 2
	jmp	SHORT $LN7@RelAngDisp
$LN6@RelAngDisp:
	mov	DWORD PTR tv186[ebp], 0
$LN7@RelAngDisp:
	mov	edx, DWORD PTR tv186[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 266				; 0000010aH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN4@RelAngDisp:

; 439  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RelAngDisplay@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::RelAngDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?ClearDigits@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::ClearDigits
; _this$ = ecx

; 854  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 855  :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 856  : 	for(i = 0; i < STR_LEN; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ClearDigit
$LN5@ClearDigit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ClearDigit:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jge	SHORT $LN4@ClearDigit

; 857  : 		inputstr[i] = ' ';

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+266], 32			; 00000020H
	jmp	SHORT $LN5@ClearDigit
$LN4@ClearDigit:

; 858  : 	inputstr[STR_LEN - 1] = '\0';

	mov	edx, 1
	imul	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+266], 0

; 859  : 
; 860  : 	for(i = 0; i < MAX_DIGITS; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ClearDigit
$LN2@ClearDigit:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@ClearDigit:
	cmp	DWORD PTR _i$[ebp], 7
	jge	SHORT $LN1@ClearDigit

; 861  : 	{
; 862  : 		Input_Digits[i] = 25;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+224], 25		; 00000019H

; 863  : 	}

	jmp	SHORT $LN2@ClearDigit
$LN1@ClearDigit:

; 864  : 
; 865  : 	wrong = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+265], 0

; 866  : 	InputsMade = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+220], 0

; 867  : 	Manual_Input = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+264], 0

; 868  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDigits@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::ClearDigits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv639 = -60						; size = 4
tv671 = -56						; size = 4
tv727 = -52						; size = 4
tv655 = -48						; size = 4
tv698 = -44						; size = 4
tv622 = -40						; size = 4
tv143 = -36						; size = 4
tv276 = -32						; size = 4
tv353 = -28						; size = 4
tv224 = -24						; size = 4
_this$ = -20						; size = 4
_tempstr$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
?CDisplay@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::CDisplay
; _this$ = ecx

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 312  : 	char tempstr[10];
; 313  : 	if(InputModus == C1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 7
	jne	$LN26@CDisplay

; 314  : 	{
; 315  : 		display->TextCenter(SecondLineX, SecondLineY, "CAT 1 AD1/AD2");

	push	0
	push	OFFSET ??_C@_0O@KPCJCIMM@CAT?51?5AD1?1AD2?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 316  : 		if(InputLine <= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jg	$LN25@CDisplay

; 317  : 		{
; 318  : 			//Line1
; 319  : 			if(!Manual_Input)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	jne	SHORT $LN24@CDisplay

; 320  : 				//sprintf(inputstr, "%.2fSEC", Sms->C1AD1 / 100); // MLR 4/3/2004 - 
; 321  : 				sprintf(inputstr, "%.2fSEC", Sms->GetAGBC1ArmDelay1() / 100);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay1
	fstp	DWORD PTR tv622[ebp]
	movss	xmm0, DWORD PTR tv622[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 322  : 			else

	jmp	SHORT $LN23@CDisplay
$LN24@CDisplay:

; 323  : 				FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN23@CDisplay:

; 324  : 
; 325  : 			display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	SHORT $LN29@CDisplay
	mov	DWORD PTR tv143[ebp], 2
	jmp	SHORT $LN30@CDisplay
$LN29@CDisplay:
	mov	DWORD PTR tv143[ebp], 0
$LN30@CDisplay:
	mov	edx, DWORD PTR tv143[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 266				; 0000010aH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 326  : 
; 327  : 			//Line2
; 328  : 			//sprintf(tempstr, "%.2fSEC", Sms->C1AD2 / 100);
; 329  : 			sprintf(tempstr, "%.2fSEC", Sms->GetAGBC1ArmDelay2() / 100);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay2
	fstp	DWORD PTR tv639[ebp]
	movss	xmm0, DWORD PTR tv639[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 330  : 			display->TextCenter(InputLineX3, InputLineY - 0.1F, tempstr);

	push	0
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	$LN21@CDisplay
$LN25@CDisplay:

; 331  : 		}
; 332  : 		else if(InputLine > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jle	$LN21@CDisplay

; 333  : 		{
; 334  : 			//Line1
; 335  : 			//sprintf(tempstr, "%.2fSEC", Sms->C1AD1 / 100); // MLR 4/3/2004 - 
; 336  : 			sprintf(tempstr, "%.2fSEC", Sms->GetAGBC1ArmDelay1() / 100);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+296]
	call	?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay1
	fstp	DWORD PTR tv655[ebp]
	movss	xmm0, DWORD PTR tv655[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 337  : 			display->TextCenter(InputLineX3, InputLineY, tempstr);

	push	0
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 338  : 
; 339  : 			//Line2
; 340  : 			if(!Manual_Input)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+264]
	test	edx, edx
	jne	SHORT $LN20@CDisplay

; 341  : 				//sprintf(inputstr, "%.2fSEC", Sms->C1AD2 / 100);
; 342  : 				sprintf(inputstr, "%.2fSEC", Sms->GetAGBC1ArmDelay2() / 100);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ	; SMSClass::GetAGBC1ArmDelay2
	fstp	DWORD PTR tv671[ebp]
	movss	xmm0, DWORD PTR tv671[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 266				; 0000010aH
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 343  : 			else

	jmp	SHORT $LN19@CDisplay
$LN20@CDisplay:

; 344  : 				FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN19@CDisplay:

; 345  : 			display->TextCenter(InputLineX3, InputLineY - 0.1F, inputstr, Manual_Input ? 2 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	je	SHORT $LN31@CDisplay
	mov	DWORD PTR tv224[ebp], 2
	jmp	SHORT $LN32@CDisplay
$LN31@CDisplay:
	mov	DWORD PTR tv224[ebp], 0
$LN32@CDisplay:
	mov	ecx, DWORD PTR tv224[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN21@CDisplay:

; 346  : 		}
; 347  : 	}

	jmp	$LN6@CDisplay
$LN26@CDisplay:

; 348  : 	else if(InputModus == C2)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 8
	jne	$LN17@CDisplay

; 349  : 	{
; 350  : 		display->TextCenter(SecondLineX, SecondLineY, "CAT 2 AD/BA");

	push	0
	push	OFFSET ??_C@_0M@OFBAOMHA@CAT?52?5AD?1BA?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 351  : 		if(InputLine <= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jg	$LN16@CDisplay

; 352  : 		{
; 353  : 			//Line1
; 354  : 			if(!Manual_Input)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	jne	SHORT $LN15@CDisplay

; 355  : 				//sprintf(inputstr, "%.2fSEC", Sms->C2AD / 100);
; 356  : 				sprintf(inputstr, "%.2fSEC", Sms->GetAGBC2ArmDelay() / 100);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBC2ArmDelay@SMSClass@@QAEMXZ	; SMSClass::GetAGBC2ArmDelay
	fstp	DWORD PTR tv698[ebp]
	movss	xmm0, DWORD PTR tv698[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 357  : 			else

	jmp	SHORT $LN14@CDisplay
$LN15@CDisplay:

; 358  : 				FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN14@CDisplay:

; 359  : 
; 360  : 			display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	SHORT $LN33@CDisplay
	mov	DWORD PTR tv276[ebp], 2
	jmp	SHORT $LN34@CDisplay
$LN33@CDisplay:
	mov	DWORD PTR tv276[ebp], 0
$LN34@CDisplay:
	mov	edx, DWORD PTR tv276[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 266				; 0000010aH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 361  : 
; 362  : 			//Line2
; 363  : 			//sprintf(tempstr, "%dFT", Sms->C2BA);
; 364  : 			sprintf(tempstr, "%dFT", Sms->GetAGBBurstAlt());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBBurstAlt@SMSClass@@QAEHXZ	; SMSClass::GetAGBBurstAlt
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	lea	edx, DWORD PTR _tempstr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 365  : 			display->TextCenter(InputLineX3, InputLineY - 0.1F, tempstr);

	push	0
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	$LN12@CDisplay
$LN16@CDisplay:

; 366  : 		}
; 367  : 		else if(InputLine > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jle	$LN12@CDisplay

; 368  : 		{
; 369  : 			//Line1
; 370  : 			//sprintf(tempstr, "%.2fSEC", Sms->C2AD / 100);
; 371  : 			sprintf(tempstr, "%.2fSEC", Sms->GetAGBC2ArmDelay() / 100);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+296]
	call	?GetAGBC2ArmDelay@SMSClass@@QAEMXZ	; SMSClass::GetAGBC2ArmDelay
	fstp	DWORD PTR tv727[ebp]
	movss	xmm0, DWORD PTR tv727[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07JPLENJIP@?$CF?42fSEC?$AA@
	lea	eax, DWORD PTR _tempstr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 372  : 			display->TextCenter(InputLineX3, InputLineY, tempstr);

	push	0
	lea	ecx, DWORD PTR _tempstr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 373  : 
; 374  : 			//Line2
; 375  : 			if(!Manual_Input)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+264]
	test	edx, edx
	jne	SHORT $LN11@CDisplay

; 376  : 				//sprintf(inputstr, "%dFT", Sms->C2BA);
; 377  : 				sprintf(inputstr, "%dFT", Sms->GetAGBBurstAlt());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?GetAGBBurstAlt@SMSClass@@QAEHXZ	; SMSClass::GetAGBBurstAlt
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 266				; 0000010aH
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 378  : 			else

	jmp	SHORT $LN10@CDisplay
$LN11@CDisplay:

; 379  : 				FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN10@CDisplay:

; 380  : 			display->TextCenter(InputLineX3, InputLineY - 0.1F, inputstr, Manual_Input ? 2 : 0);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	je	SHORT $LN35@CDisplay
	mov	DWORD PTR tv353[ebp], 2
	jmp	SHORT $LN36@CDisplay
$LN35@CDisplay:
	mov	DWORD PTR tv353[ebp], 0
$LN36@CDisplay:
	mov	ecx, DWORD PTR tv353[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN12@CDisplay:

; 381  : 		}
; 382  : 	}

	jmp	$LN6@CDisplay
$LN17@CDisplay:

; 383  : 	else if(InputModus == C3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 9
	jne	$LN8@CDisplay

; 384  : 	{
; 385  : 		display->TextCenter(SecondLineX, SecondLineY, "CAT 3 AD/BA");

	push	0
	push	OFFSET ??_C@_0M@CJLKOMOO@CAT?53?5AD?1BA?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 386  : 		//Line1
; 387  : 		display->TextCenter(InputLineX3, InputLineY, "12.25SEC");

	push	0
	push	OFFSET ??_C@_08CMBIELPA@12?425SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 388  : 		//Line2
; 389  : 		display->TextCenter(InputLineX3, InputLineY - 0.1F, "100FT");

	push	0
	push	OFFSET ??_C@_05HKNBKDFB@100FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	$LN6@CDisplay
$LN8@CDisplay:

; 390  : 	}
; 391  : 	else if(InputModus == C4)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 10			; 0000000aH
	jne	$LN6@CDisplay

; 392  : 	{
; 393  : 		display->TextCenter(SecondLineX, SecondLineY, "CAT 4 AD1/AD2/BA");

	push	0
	push	OFFSET ??_C@_0BB@PIFIHCNM@CAT?54?5AD1?1AD2?1BA?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 394  : 		//Line1
; 395  : 		display->TextCenter(InputLineX3, InputLineY, "2.00SEC");

	push	0
	push	OFFSET ??_C@_07BDFBHKNN@2?400SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 396  : 		//Line2
; 397  : 		display->TextCenter(InputLineX3, InputLineY - 0.1F, "2.50SEC");

	push	0
	push	OFFSET ??_C@_07EDJMOLGO@2?450SEC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 398  : 		//Line3
; 399  : 		display->TextCenter(InputLineX3, InputLineY - 0.2F, "75FT");

	push	0
	push	OFFSET ??_C@_04EHOJANMF@75FT?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN6@CDisplay:

; 400  : 	}
; 401  : 
; 402  : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 403  : 	if(InputLine <= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jg	SHORT $LN5@CDisplay

; 404  : 	{
; 405  : 		display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 406  : 		display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	$LN1@CDisplay
$LN5@CDisplay:

; 407  : 	}
; 408  : 	else if(InputLine == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 1
	jne	SHORT $LN3@CDisplay

; 409  : 	{
; 410  : 		display->TextCenter(InputLineX1, InputLineY -0.1F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 411  : 		display->TextCenter(InputLineX2, InputLineY -0.1F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	SHORT $LN1@CDisplay
$LN3@CDisplay:

; 412  : 	}
; 413  : 	else if(InputLine >= 2)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 2
	jl	SHORT $LN1@CDisplay

; 414  : 	{
; 415  : 		display->TextCenter(InputLineX1, InputLineY -0.2F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 416  : 		display->TextCenter(InputLineX2, InputLineY -0.2F, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN1@CDisplay:

; 417  : 	}
; 418  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CDisplay@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::CDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WrongInput@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::WrongInput
; _this$ = ecx

; 849  : {	

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 850  : 	if(InputFlash)

	cmp	DWORD PTR ?InputFlash@SmsDrawable@@2HA, 0 ; SmsDrawable::InputFlash
	je	SHORT $LN1@WrongInput

; 851  : 		display->TextCenter(InputLineX3, InputLineY, inputstr,2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 266				; 0000010aH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN1@WrongInput:

; 852  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?WrongInput@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::WrongInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CorrectInput@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::CorrectInput
; _this$ = ecx

; 841  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 842  : 	ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 843  : 	Manual_Input = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+264], 0

; 844  : 	InputLine++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], edx

; 845  : 	if(InputLine >= MaxInputLines)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+252]
	cmp	eax, DWORD PTR [edx+256]
	jl	SHORT $LN2@CorrectInp

; 846  : 		SetDisplayMode(lastInputMode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDisplayMode@SmsDrawable@@QAEXW4SmsDisplayMode@1@@Z ; SmsDrawable::SetDisplayMode
$LN2@CorrectInp:

; 847  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CorrectInput@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::CorrectInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?CheckDigits@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::CheckDigits
; _this$ = ecx

; 833  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 834  : 	for(int i = 0; i < MAX_DIGITS; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@CheckDigit
$LN3@CheckDigit:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@CheckDigit:
	cmp	DWORD PTR _i$1[ebp], 7
	jge	SHORT $LN5@CheckDigit

; 835  : 	{
; 836  : 		if(Input_Digits[i] > 10)

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4+224], 10		; 0000000aH
	jle	SHORT $LN1@CheckDigit

; 837  : 			Input_Digits[i] = -1;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+224], -1
$LN1@CheckDigit:

; 838  : 	}

	jmp	SHORT $LN3@CheckDigit
$LN5@CheckDigit:

; 839  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckDigits@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::CheckDigits
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv65 = -12						; size = 4
_var$ = -8						; size = 4
_this$ = -4						; size = 4
?CheckInput@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::CheckInput
; _this$ = ecx

; 706  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 707  : 	int var = 0;

	mov	DWORD PTR _var$[ebp], 0

; 708  : 	switch(InputModus)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+212]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 1
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 10			; 0000000aH
	ja	$LN1@CheckInput
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN26@CheckInput[eax*4]
$LN21@CheckInput:

; 709  : 	{
; 710  : 	case RELEASE_PULSE:
; 711  : 		var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 712  : 		if(var <= maxripple)

	mov	ecx, DWORD PTR _var$[ebp]
	cmp	ecx, DWORD PTR ?maxripple@@3HA		; maxripple
	jg	SHORT $LN20@CheckInput

; 713  : 		{
; 714  : 			//Sms->rippleCount = Sms->agbProfile[Sms->curProfile].rippleCount = var - 1; // MLR 4/3/2004 - 
; 715  : 			//Sms->rippleCount = Sms->agbProfile[Sms->curProfile].rippleCount = var - 1; // MLR 4/3/2004 - 
; 716  : 			Sms->SetAGBRippleCount(var - 1);

	mov	edx, DWORD PTR _var$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?SetAGBRippleCount@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleCount

; 717  : 
; 718  : 			/*
; 719  : 			if(Sms->Prof1)
; 720  : 				Sms->rippleCount = Sms->Prof1RP = var - 1;
; 721  : 			else
; 722  : 				Sms->rippleCount = Sms->Prof2RP = var - 1;
; 723  : 				*/
; 724  : 			CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput

; 725  : 		}
; 726  : 		else

	jmp	SHORT $LN19@CheckInput
$LN20@CheckInput:

; 727  : 		{
; 728  : 			wrong = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+265], 1

; 729  : 			WrongInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongInput@SmsDrawable@@QAEXXZ		; SmsDrawable::WrongInput
$LN19@CheckInput:

; 730  : 		}
; 731  : 	break;

	jmp	$LN22@CheckInput
$LN18@CheckInput:

; 732  : 	case RELEASE_SPACE:
; 733  : 		var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 734  : 		Sms->SetAGBRippleInterval(var);

	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?SetAGBRippleInterval@SMSClass@@QAEXH@Z	; SMSClass::SetAGBRippleInterval

; 735  : 		//Sms->rippleInterval = Sms->GetAGBRippleInterval();
; 736  : 		/*
; 737  : 		if(Sms->Prof1)
; 738  : 			Sms->rippleInterval = Sms->Prof1RS = var;
; 739  : 		else
; 740  : 			Sms->rippleInterval = Sms->Prof2RS = var;
; 741  : 		*/
; 742  : 
; 743  : 		CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput

; 744  : 	break;

	jmp	$LN22@CheckInput
$LN17@CheckInput:

; 745  : 	case ARMING_DELAY:
; 746  : 		if(g_bMLU)

	movzx	ecx, BYTE PTR ?g_bMLU@@3_NA		; g_bMLU
	test	ecx, ecx
	je	SHORT $LN16@CheckInput

; 747  : 		{
; 748  : 			var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 749  : 			Sms->armingdelay = (float)var;

	cvtsi2ss xmm0, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+296]
	movss	DWORD PTR [eax+172], xmm0

; 750  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 751  : 			Manual_Input = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+264], 0

; 752  : 			SetDisplayMode(lastInputMode);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDisplayMode@SmsDrawable@@QAEXW4SmsDisplayMode@1@@Z ; SmsDrawable::SetDisplayMode

; 753  : 		}
; 754  : 		else

	jmp	SHORT $LN15@CheckInput
$LN16@CheckInput:

; 755  : 		{
; 756  : 			var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 757  : 			Sms->armingdelay = (float)var;

	cvtsi2ss xmm0, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	movss	DWORD PTR [edx+172], xmm0

; 758  : 			CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput
$LN15@CheckInput:

; 759  : 		}
; 760  : 	break;

	jmp	$LN22@CheckInput
$LN14@CheckInput:

; 761  : 	case BURST_ALT:
; 762  : 		var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 763  : 		//Sms->C2BA = var;
; 764  : 		Sms->SetAGBBurstAlt(var);

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?SetAGBBurstAlt@SMSClass@@QAEXH@Z	; SMSClass::SetAGBBurstAlt

; 765  : 		CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput

; 766  : 	break;

	jmp	$LN22@CheckInput
$LN13@CheckInput:

; 767  : 	case C1:
; 768  : 		var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 769  : 		if(Manual_Input && InputLine <= 0)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	je	SHORT $LN12@CheckInput
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jg	SHORT $LN12@CheckInput

; 770  : 			//Sms->C1AD1 = var; // MLR 4/3/2004 - 
; 771  : 			Sms->SetAGBC1ArmDelay1((float)var);

	cvtsi2ss xmm0, DWORD PTR _var$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+296]
	call	?SetAGBC1ArmDelay1@SMSClass@@QAEXM@Z	; SMSClass::SetAGBC1ArmDelay1
	jmp	SHORT $LN10@CheckInput
$LN12@CheckInput:

; 772  : 		else if(Manual_Input && InputLine > 0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	SHORT $LN10@CheckInput
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+252], 0
	jle	SHORT $LN10@CheckInput

; 773  : 			//Sms->C1AD2 = var; // MLR 4/3/2004 - 
; 774  : 			Sms->SetAGBC1ArmDelay2((float)var);

	cvtsi2ss xmm0, DWORD PTR _var$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?SetAGBC1ArmDelay2@SMSClass@@QAEXM@Z	; SMSClass::SetAGBC1ArmDelay2
$LN10@CheckInput:

; 775  : 		CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput

; 776  : 	break;

	jmp	$LN22@CheckInput
$LN9@CheckInput:

; 777  : 	case C2:
; 778  : 		var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 779  : 		if(Manual_Input && InputLine <= 0)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+264]
	test	edx, edx
	je	SHORT $LN8@CheckInput
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+252], 0
	jg	SHORT $LN8@CheckInput

; 780  : 			//Sms->C2AD = var;
; 781  : 			Sms->SetAGBC2ArmDelay((float)var);

	cvtsi2ss xmm0, DWORD PTR _var$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?SetAGBC2ArmDelay@SMSClass@@QAEXM@Z	; SMSClass::SetAGBC2ArmDelay
	jmp	SHORT $LN6@CheckInput
$LN8@CheckInput:

; 782  : 		else if(Manual_Input && InputLine > 0)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	je	SHORT $LN6@CheckInput
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jle	SHORT $LN6@CheckInput

; 783  : 			//Sms->C2BA = var;
; 784  : 			Sms->SetAGBBurstAlt(var);

	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	?SetAGBBurstAlt@SMSClass@@QAEXH@Z	; SMSClass::SetAGBBurstAlt
$LN6@CheckInput:

; 785  : 		CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput

; 786  : 	break;

	jmp	SHORT $LN22@CheckInput
$LN5@CheckInput:

; 787  : 	case REL_ANG:
; 788  : 		var = AddUp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUp@SmsDrawable@@QAEHXZ		; SmsDrawable::AddUp
	mov	DWORD PTR _var$[ebp], eax

; 789  : 		if(var < 46)

	cmp	DWORD PTR _var$[ebp], 46		; 0000002eH
	jge	SHORT $LN4@CheckInput

; 790  : 		{
; 791  : 			//Sms->angle = var;
; 792  : 			Sms->SetAGBReleaseAngle(var);

	mov	ecx, DWORD PTR _var$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+296]
	call	?SetAGBReleaseAngle@SMSClass@@QAEXH@Z	; SMSClass::SetAGBReleaseAngle

; 793  : 			CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput

; 794  : 		}
; 795  : 		else

	jmp	SHORT $LN3@CheckInput
$LN4@CheckInput:

; 796  : 		{
; 797  : 			wrong = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+265], 1

; 798  : 			WrongInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongInput@SmsDrawable@@QAEXXZ		; SmsDrawable::WrongInput
$LN3@CheckInput:

; 799  : 		}
; 800  : 	break;

	jmp	SHORT $LN22@CheckInput
$LN2@CheckInput:

; 801  : 	case LADD_MODE:
; 802  : 	case C3:
; 803  : 	case C4:
; 804  : 		//just step thru these
; 805  : 		CorrectInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CorrectInput@SmsDrawable@@QAEXXZ	; SmsDrawable::CorrectInput
$LN1@CheckInput:
$LN22@CheckInput:

; 806  : 	break;
; 807  : 	default:
; 808  : 	break;
; 809  : 	}
; 810  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@CheckInput:
	DD	$LN21@CheckInput
	DD	$LN18@CheckInput
	DD	$LN1@CheckInput
	DD	$LN17@CheckInput
	DD	$LN14@CheckInput
	DD	$LN5@CheckInput
	DD	$LN13@CheckInput
	DD	$LN9@CheckInput
	DD	$LN2@CheckInput
	DD	$LN2@CheckInput
	DD	$LN2@CheckInput
?CheckInput@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::CheckInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
_i$1 = -16						; size = 4
_i$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
?FillInputString@SmsDrawable@@QAEXXZ PROC		; SmsDrawable::FillInputString
; _this$ = ecx

; 622  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 623  : 	if(InputModus == RELEASE_PULSE || InputModus == REL_ANG)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 1
	je	SHORT $LN38@FillInputS
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 6
	jne	SHORT $LN39@FillInputS
$LN38@FillInputS:

; 624  : 	{
; 625  : 		for(int i = 0; i < MAX_DIGITS; i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN37@FillInputS
$LN36@FillInputS:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN37@FillInputS:
	cmp	DWORD PTR _i$3[ebp], 7
	jge	SHORT $LN35@FillInputS

; 626  : 		{
; 627  : 			if(Input_Digits[i] < 10)

	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+224], 10		; 0000000aH
	jge	SHORT $LN34@FillInputS

; 628  : 				inputstr[i] = '0' + Input_Digits[i];

	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+224]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$3[ebp]
	mov	BYTE PTR [edx+266], cl

; 629  : 			else

	jmp	SHORT $LN33@FillInputS
$LN34@FillInputS:

; 630  : 				inputstr[i] = ' ';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$3[ebp]
	mov	BYTE PTR [eax+266], 32			; 00000020H
$LN33@FillInputS:

; 631  : 		}

	jmp	SHORT $LN36@FillInputS
$LN35@FillInputS:

; 632  : 	}
; 633  : 	else if(InputModus == RELEASE_SPACE)

	jmp	$LN32@FillInputS
$LN39@FillInputS:
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 2
	jne	$LN31@FillInputS

; 634  : 	{
; 635  : 		for(int i = 0; i < MAX_DIGITS; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN30@FillInputS
$LN29@FillInputS:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN30@FillInputS:
	cmp	DWORD PTR _i$2[ebp], 7
	jge	SHORT $LN28@FillInputS

; 636  : 		{
; 637  : 			if(Input_Digits[i] < 10)

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+224], 10		; 0000000aH
	jge	SHORT $LN27@FillInputS

; 638  : 				inputstr[i] = '0' + Input_Digits[i];

	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+224]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [edx+266], cl

; 639  : 			else

	jmp	SHORT $LN26@FillInputS
$LN27@FillInputS:

; 640  : 				inputstr[i] = ' ';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	mov	BYTE PTR [eax+266], 32			; 00000020H
$LN26@FillInputS:

; 641  : 
; 642  : 			inputstr[MAX_DIGITS] = 'F';

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], 70		; 00000046H

; 643  : 			inputstr[MAX_DIGITS + 1] = 'T';

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 84		; 00000054H

; 644  : 		}

	jmp	SHORT $LN29@FillInputS
$LN28@FillInputS:

; 645  : 	}
; 646  : 	else if(InputModus == ARMING_DELAY || InputModus == C1 || (InputModus == C2 && InputLine <= 0))

	jmp	$LN32@FillInputS
$LN31@FillInputS:
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 4
	je	SHORT $LN23@FillInputS
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 7
	je	SHORT $LN23@FillInputS
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 8
	jne	$LN24@FillInputS
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+252], 0
	jg	$LN24@FillInputS
$LN23@FillInputS:

; 647  : 	{
; 648  : 		inputstr[8] = 'S';

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 83		; 00000053H

; 649  : 		inputstr[9] = 'E';

	mov	edx, 1
	imul	edx, 9
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+266], 69		; 00000045H

; 650  : 		inputstr[10] = 'C';

	mov	ecx, 1
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], 67		; 00000043H

; 651  : 
; 652  : 		if(Input_Digits[6] < 10)

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+224], 10		; 0000000aH
	jge	SHORT $LN22@FillInputS

; 653  : 			inputstr[7] = '0' + Input_Digits[6];

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+224]
	add	ecx, 48					; 00000030H
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+266], cl

; 654  : 		else 

	jmp	SHORT $LN21@FillInputS
$LN22@FillInputS:

; 655  : 			inputstr[7] = ' ';

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], 32		; 00000020H
$LN21@FillInputS:

; 656  : 
; 657  : 		if(Input_Digits[5] < 10)

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+224], 10		; 0000000aH
	jge	SHORT $LN20@FillInputS

; 658  : 			inputstr[6] = '0' + Input_Digits[5];

	mov	edx, 4
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+224]
	add	ecx, 48					; 00000030H
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+266], cl

; 659  : 		else

	jmp	SHORT $LN19@FillInputS
$LN20@FillInputS:

; 660  : 			inputstr[6] = ' ';

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], 32		; 00000020H
$LN19@FillInputS:

; 661  : 
; 662  : 		inputstr[5] = '.';

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 46		; 0000002eH

; 663  : 
; 664  : 		if(Input_Digits[4] < 10)

	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 10		; 0000000aH
	jge	SHORT $LN18@FillInputS

; 665  : 			inputstr[4] = '0' + Input_Digits[4];

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	add	eax, 48					; 00000030H
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], al

; 666  : 		else

	jmp	SHORT $LN17@FillInputS
$LN18@FillInputS:

; 667  : 			inputstr[4] = ' ';

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 32		; 00000020H
$LN17@FillInputS:

; 668  : 
; 669  : 		if(Input_Digits[3] < 10)

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 10		; 0000000aH
	jge	SHORT $LN16@FillInputS

; 670  : 			inputstr[3] = '0' + Input_Digits[3];

	mov	ecx, 4
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	add	eax, 48					; 00000030H
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], al

; 671  : 		else

	jmp	SHORT $LN15@FillInputS
$LN16@FillInputS:

; 672  : 			inputstr[3] = ' ';

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 32		; 00000020H
$LN15@FillInputS:

; 673  : 
; 674  : 		if(Input_Digits[2] < 10)

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 10		; 0000000aH
	jge	SHORT $LN14@FillInputS

; 675  : 			inputstr[2] = '0' + Input_Digits[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	add	eax, 48					; 00000030H
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], al

; 676  : 		else

	jmp	SHORT $LN13@FillInputS
$LN14@FillInputS:

; 677  : 			inputstr[2] = ' ';

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 32		; 00000020H
$LN13@FillInputS:

; 678  : 
; 679  : 		if(Input_Digits[1] < 10)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 10		; 0000000aH
	jge	SHORT $LN12@FillInputS

; 680  : 			inputstr[1] = '0' + Input_Digits[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	add	eax, 48					; 00000030H
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], al

; 681  : 		else

	jmp	SHORT $LN11@FillInputS
$LN12@FillInputS:

; 682  : 			inputstr[1] = ' ';

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 32		; 00000020H
$LN11@FillInputS:

; 683  : 
; 684  : 		if(Input_Digits[0] < 10)

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx+224], 10		; 0000000aH
	jge	SHORT $LN10@FillInputS

; 685  : 			inputstr[0] = '0' + Input_Digits[0];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+224]
	add	eax, 48					; 00000030H
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], al

; 686  : 		else

	jmp	SHORT $LN9@FillInputS
$LN10@FillInputS:

; 687  : 			inputstr[0] = ' ';

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 32		; 00000020H
$LN9@FillInputS:
	jmp	$LN32@FillInputS
$LN24@FillInputS:

; 688  : 	}
; 689  : 	else if(InputModus == BURST_ALT || (InputModus == C2 && InputLine > 0))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 5
	je	SHORT $LN6@FillInputS
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 8
	jne	$LN32@FillInputS
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+252], 0
	jle	SHORT $LN32@FillInputS
$LN6@FillInputS:

; 690  : 	{
; 691  : 		for(int i = 0; i < MAX_DIGITS; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@FillInputS
$LN4@FillInputS:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN5@FillInputS:
	cmp	DWORD PTR _i$1[ebp], 7
	jge	SHORT $LN32@FillInputS

; 692  : 		{
; 693  : 			if(Input_Digits[i] < 10)

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+224], 10		; 0000000aH
	jge	SHORT $LN2@FillInputS

; 694  : 				inputstr[i] = '0' + Input_Digits[i];

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+224]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [edx+266], cl

; 695  : 			else

	jmp	SHORT $LN1@FillInputS
$LN2@FillInputS:

; 696  : 				inputstr[i] = ' ';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [eax+266], 32			; 00000020H
$LN1@FillInputS:

; 697  : 
; 698  : 			inputstr[MAX_DIGITS] = 'F';

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], 70		; 00000046H

; 699  : 			inputstr[MAX_DIGITS + 1] = 'T';

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+266], 84		; 00000054H

; 700  : 		}

	jmp	SHORT $LN4@FillInputS
$LN32@FillInputS:

; 701  : 	}
; 702  : 	ShiAssert(strlen(inputstr) < sizeof(inputstr));
; 703  : 	inputstr[STR_LEN - 1] = '\0';

	mov	edx, 1
	imul	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+266], 0

; 704  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FillInputString@SmsDrawable@@QAEXXZ ENDP		; SmsDrawable::FillInputString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv90 = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_whichButton$ = 8					; size = 4
_whichMFD$ = 12						; size = 4
?InputPushButton@SmsDrawable@@QAEXHH@Z PROC		; SmsDrawable::InputPushButton
; _this$ = ecx

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 470  : 	if(!Manual_Input)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	jne	SHORT $LN46@InputPushB

; 471  : 	{
; 472  : 		for(int i = 0; i < STR_LEN; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN45@InputPushB
$LN44@InputPushB:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN45@InputPushB:
	cmp	DWORD PTR _i$1[ebp], 12			; 0000000cH
	jge	SHORT $LN43@InputPushB

; 473  : 			inputstr[i] = ' ';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [eax+266], 32			; 00000020H
	jmp	SHORT $LN44@InputPushB
$LN43@InputPushB:

; 474  : 		inputstr[STR_LEN - 1] = '\0';

	mov	ecx, 1
	imul	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+266], 0
$LN46@InputPushB:

; 475  : 	}
; 476  : 	
; 477  : 	if(InputsMade == PossibleInputs && CheckButton(whichButton))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+220]
	cmp	edx, DWORD PTR [ecx+216]
	jne	SHORT $LN42@InputPushB
	mov	eax, DWORD PTR _whichButton$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckButton@SmsDrawable@@QAEHH@Z	; SmsDrawable::CheckButton
	test	eax, eax
	je	SHORT $LN42@InputPushB

; 478  : 		return;

	jmp	$LN47@InputPushB
	jmp	SHORT $LN41@InputPushB
$LN42@InputPushB:

; 479  : 	else if(CheckButton(whichButton))

	mov	ecx, DWORD PTR _whichButton$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckButton@SmsDrawable@@QAEHH@Z	; SmsDrawable::CheckButton
	test	eax, eax
	je	SHORT $LN41@InputPushB

; 480  : 		InputsMade++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], eax
$LN41@InputPushB:

; 481  : 
; 482  : 	switch(whichButton)

	mov	edx, DWORD PTR _whichButton$[ebp]
	mov	DWORD PTR tv90[ebp], edx
	mov	eax, DWORD PTR tv90[ebp]
	sub	eax, 1
	mov	DWORD PTR tv90[ebp], eax
	cmp	DWORD PTR tv90[ebp], 18			; 00000012H
	ja	$LN47@InputPushB
	mov	ecx, DWORD PTR tv90[ebp]
	jmp	DWORD PTR $LN49@InputPushB[ecx*4]
$LN37@InputPushB:

; 483  :     {
; 484  : 	case 1:
; 485  : 		CheckInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckInput@SmsDrawable@@QAEXXZ		; SmsDrawable::CheckInput

; 486  : 	break;

	jmp	$LN47@InputPushB
$LN36@InputPushB:

; 487  :     case 2:
; 488  : 		ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 489  : 		if(InputModus == C1 || InputModus == C2 || InputModus == C3 ||
; 490  : 			InputModus == C4 || InputModus == REL_ANG || InputModus == LADD_MODE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 7
	je	SHORT $LN34@InputPushB
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 8
	je	SHORT $LN34@InputPushB
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 9
	je	SHORT $LN34@InputPushB
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 10			; 0000000aH
	je	SHORT $LN34@InputPushB
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 6
	je	SHORT $LN34@InputPushB
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 11			; 0000000bH
	jne	SHORT $LN35@InputPushB
$LN34@InputPushB:

; 491  : 		{
; 492  : 			InputModus = CONTROL_PAGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+212], 3

; 493  : 		}
; 494  : 		else

	jmp	SHORT $LN33@InputPushB
$LN35@InputPushB:

; 495  : 		{
; 496  : 			if(InputModus != CONTROL_PAGE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 3
	je	SHORT $LN33@InputPushB

; 497  : 				SetDisplayMode(lastInputMode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDisplayMode@SmsDrawable@@QAEXW4SmsDisplayMode@1@@Z ; SmsDrawable::SetDisplayMode
$LN33@InputPushB:

; 498  : 		}
; 499  : 	break;

	jmp	$LN47@InputPushB
$LN31@InputPushB:

; 500  : 	case 3:
; 501  : 		if(InputModus == CONTROL_PAGE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 3
	jne	SHORT $LN30@InputPushB

; 502  : 		{
; 503  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 504  : 			displayMode = Inv;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], 1

; 505  : 		}
; 506  : 		else

	jmp	SHORT $LN29@InputPushB
$LN30@InputPushB:

; 507  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits
$LN29@InputPushB:

; 508  : 	break;

	jmp	$LN47@InputPushB
$LN28@InputPushB:

; 509  : 	case 4:
; 510  : 		if(InputModus == CONTROL_PAGE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 3
	jne	SHORT $LN27@InputPushB

; 511  : 		{
; 512  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 513  : 			SetDisplayMode(lastInputMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+208]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDisplayMode@SmsDrawable@@QAEXW4SmsDisplayMode@1@@Z ; SmsDrawable::SetDisplayMode
$LN27@InputPushB:

; 514  : 		}
; 515  : 	break;

	jmp	$LN47@InputPushB
$LN26@InputPushB:

; 516  : 	case 5:
; 517  : 		if(InputModus == CONTROL_PAGE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 3
	jne	SHORT $LN25@InputPushB

; 518  : 		{
; 519  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 520  : 			InputModus = LADD_MODE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 11			; 0000000bH

; 521  : 		}
; 522  : 		else

	jmp	SHORT $LN24@InputPushB
$LN25@InputPushB:

; 523  : 			AddInput(whichButton);

	mov	ecx, DWORD PTR _whichButton$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput
$LN24@InputPushB:

; 524  : 	break;

	jmp	$LN47@InputPushB
$LN23@InputPushB:

; 525  : 	case 6:
; 526  : 	case 7:
; 527  : 	case 8:
; 528  : 		AddInput(whichButton);

	mov	edx, DWORD PTR _whichButton$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput

; 529  : 	break;

	jmp	$LN47@InputPushB
$LN22@InputPushB:

; 530  : 	case 9:
; 531  : 		if(InputModus == CONTROL_PAGE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 3
	jne	SHORT $LN21@InputPushB

; 532  : 		{
; 533  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 534  : 			InputModus = REL_ANG;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 6

; 535  : 			PossibleInputs = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 2

; 536  : 		}
; 537  : 		else

	jmp	SHORT $LN20@InputPushB
$LN21@InputPushB:

; 538  : 			AddInput(-1);

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput
$LN20@InputPushB:

; 539  : 	break;

	jmp	$LN47@InputPushB
$LN19@InputPushB:

; 540  :     case 10:
; 541  :     case 11:	
; 542  :     case 12:	
; 543  :     case 13:
; 544  : 	case 14:
; 545  : 		MfdDrawable::PushButton(whichButton, whichMFD);

	mov	eax, DWORD PTR _whichMFD$[ebp]
	push	eax
	mov	ecx, DWORD PTR _whichButton$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushButton@MfdDrawable@@UAEXHH@Z	; MfdDrawable::PushButton

; 546  : 	break;

	jmp	$LN47@InputPushB
$LN18@InputPushB:

; 547  :     case 15:
; 548  : 		AddInput(19 - whichButton);

	mov	edx, 19					; 00000013H
	sub	edx, DWORD PTR _whichButton$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput

; 549  : 	break;

	jmp	$LN47@InputPushB
$LN17@InputPushB:

; 550  : 	case 16:
; 551  : 		if(InputModus == CONTROL_PAGE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 3
	jne	SHORT $LN16@InputPushB

; 552  : 		{
; 553  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 554  : 			InputModus = C4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 10			; 0000000aH

; 555  : 			MaxInputLines = 3;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], 3
	jmp	SHORT $LN15@InputPushB
$LN16@InputPushB:

; 556  : 		}
; 557  : 		else if(InputModus != CONTROL_PAGE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 3
	je	SHORT $LN15@InputPushB

; 558  : 		{
; 559  : 			AddInput(19 - whichButton);

	mov	ecx, 19					; 00000013H
	sub	ecx, DWORD PTR _whichButton$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput
$LN15@InputPushB:

; 560  : 		}
; 561  : 	break;

	jmp	$LN47@InputPushB
$LN13@InputPushB:

; 562  : 	case 17:
; 563  : 		if(InputModus == CONTROL_PAGE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 3
	jne	SHORT $LN12@InputPushB

; 564  : 		{
; 565  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 566  : 			InputModus = C3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 9

; 567  : 			MaxInputLines = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+256], 2
	jmp	SHORT $LN11@InputPushB
$LN12@InputPushB:

; 568  : 		}
; 569  : 		else if(InputModus != CONTROL_PAGE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 3
	je	SHORT $LN11@InputPushB

; 570  : 		{
; 571  : 			AddInput(19 - whichButton);

	mov	eax, 19					; 00000013H
	sub	eax, DWORD PTR _whichButton$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput

; 572  : 			Manual_Input = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+264], 1
$LN11@InputPushB:

; 573  : 		}
; 574  : 	break;

	jmp	$LN47@InputPushB
$LN9@InputPushB:

; 575  : 	case 18:
; 576  : 		if(InputModus == CONTROL_PAGE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 3
	jne	SHORT $LN8@InputPushB

; 577  : 		{
; 578  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 579  : 			InputModus = C2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 8

; 580  : 			PossibleInputs = 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+216], 4

; 581  : 			InputLine = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+252], 0

; 582  : 			MaxInputLines = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 2
	jmp	SHORT $LN7@InputPushB
$LN8@InputPushB:

; 583  : 		}
; 584  : 		else if(InputModus != CONTROL_PAGE)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+212], 3
	je	SHORT $LN7@InputPushB

; 585  : 		{
; 586  : 			AddInput(19 - whichButton);

	mov	edx, 19					; 00000013H
	sub	edx, DWORD PTR _whichButton$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput
$LN7@InputPushB:

; 587  : 		}
; 588  : 	break;

	jmp	SHORT $LN47@InputPushB
$LN5@InputPushB:

; 589  : 	case 19:
; 590  : 		if(InputModus == CONTROL_PAGE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+212], 3
	jne	SHORT $LN4@InputPushB

; 591  : 		{
; 592  : 			ClearDigits();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearDigits@SmsDrawable@@QAEXXZ	; SmsDrawable::ClearDigits

; 593  : 			InputModus = C1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+212], 7

; 594  : 			PossibleInputs = 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 4

; 595  : 			InputLine = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+252], 0

; 596  : 			MaxInputLines = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+256], 2
	jmp	SHORT $LN47@InputPushB
$LN4@InputPushB:

; 597  : 		}
; 598  : 		else if(InputModus != CONTROL_PAGE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+212], 3
	je	SHORT $LN47@InputPushB

; 599  : 		{
; 600  : 			AddInput(19 - whichButton);

	mov	eax, 19					; 00000013H
	sub	eax, DWORD PTR _whichButton$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInput@SmsDrawable@@QAEXH@Z		; SmsDrawable::AddInput
$LN47@InputPushB:

; 601  : 		}
; 602  : 	break;
; 603  : 	default:
; 604  : 	break;
; 605  : 	}
; 606  : }

	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN49@InputPushB:
	DD	$LN37@InputPushB
	DD	$LN36@InputPushB
	DD	$LN31@InputPushB
	DD	$LN28@InputPushB
	DD	$LN26@InputPushB
	DD	$LN23@InputPushB
	DD	$LN23@InputPushB
	DD	$LN23@InputPushB
	DD	$LN22@InputPushB
	DD	$LN19@InputPushB
	DD	$LN19@InputPushB
	DD	$LN19@InputPushB
	DD	$LN19@InputPushB
	DD	$LN19@InputPushB
	DD	$LN18@InputPushB
	DD	$LN17@InputPushB
	DD	$LN13@InputPushB
	DD	$LN9@InputPushB
	DD	$LN5@InputPushB
?InputPushButton@SmsDrawable@@QAEXHH@Z ENDP		; SmsDrawable::InputPushButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv186 = -8						; size = 4
_this$ = -4						; size = 4
?InputRS@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::InputRS
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 109  : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 110  : 	display->TextCenter(SecondLineX, SecondLineY, "IMPACT SPACING");

	push	0
	push	OFFSET ??_C@_0P@LNAFIIEM@IMPACT?5SPACING?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 111  : 	display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 112  : 	display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 113  : 
; 114  : 	if(wrong)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+265]
	test	ecx, ecx
	je	SHORT $LN3@InputRS

; 115  : 	{
; 116  : 		WrongInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongInput@SmsDrawable@@QAEXXZ		; SmsDrawable::WrongInput

; 117  : 		return;

	jmp	$LN4@InputRS
$LN3@InputRS:

; 118  : 	}
; 119  : 	if(!Manual_Input)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	jne	SHORT $LN2@InputRS

; 120  : //		sprintf(inputstr, "%dFT", Sms->rippleInterval);
; 121  : 		sprintf(inputstr, "%dFT", Sms->GetAGBRippleInterval());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBRippleInterval@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleInterval
	push	eax
	push	OFFSET ??_C@_04COHIKBOA@?$CFdFT?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 122  : 	else

	jmp	SHORT $LN1@InputRS
$LN2@InputRS:

; 123  : 		FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN1@InputRS:

; 124  : 	
; 125  : 	display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	SHORT $LN6@InputRS
	mov	DWORD PTR tv186[ebp], 2
	jmp	SHORT $LN7@InputRS
$LN6@InputRS:
	mov	DWORD PTR tv186[ebp], 0
$LN7@InputRS:
	mov	edx, DWORD PTR tv186[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 266				; 0000010aH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN4@InputRS:

; 126  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InputRS@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::InputRS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv187 = -8						; size = 4
_this$ = -4						; size = 4
?InputRP@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::InputRP
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	LabelOSB();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelOSB@SmsDrawable@@QAEXXZ		; SmsDrawable::LabelOSB

; 87   : 
; 88   : 	display->TextCenter(FirstLineX ,FirstLineY, "ENTER");

	push	0
	push	OFFSET ??_C@_05EMNIMLKD@ENTER?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 89   : 	display->TextCenter(SecondLineX, SecondLineY, "RELEASE PULSES");

	push	0
	push	OFFSET ??_C@_0P@LAKCCDKG@RELEASE?5PULSES?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 90   : 	display->TextCenter(InputLineX1, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 91   : 	display->TextCenter(InputLineX2, InputLineY, "\x02",2);

	push	2
	push	OFFSET ??_C@_01IMBAIPIC@?$AC?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx

; 92   : 	
; 93   : 	if(wrong)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+265]
	test	ecx, ecx
	je	SHORT $LN3@InputRP

; 94   : 	{
; 95   : 		WrongInput();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WrongInput@SmsDrawable@@QAEXXZ		; SmsDrawable::WrongInput

; 96   : 		return;

	jmp	$LN4@InputRP
$LN3@InputRP:

; 97   : 	}
; 98   : 	if(!Manual_Input)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+264]
	test	eax, eax
	jne	SHORT $LN2@InputRP

; 99   : 		//sprintf(inputstr, "%d", Sms->rippleCount + 1);
; 100  : 		sprintf(inputstr, "%d", Sms->GetAGBRippleCount() + 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+296]
	call	?GetAGBRippleCount@SMSClass@@QAEHXZ	; SMSClass::GetAGBRippleCount
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 266				; 0000010aH
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 101  : 	else

	jmp	SHORT $LN1@InputRP
$LN2@InputRP:

; 102  : 		FillInputString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillInputString@SmsDrawable@@QAEXXZ	; SmsDrawable::FillInputString
$LN1@InputRP:

; 103  : 
; 104  : 	display->TextCenter(InputLineX3, InputLineY, inputstr, Manual_Input ? 2 : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+264]
	test	ecx, ecx
	je	SHORT $LN6@InputRP
	mov	DWORD PTR tv187[ebp], 2
	jmp	SHORT $LN7@InputRP
$LN6@InputRP:
	mov	DWORD PTR tv187[ebp], 0
$LN7@InputRP:
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 266				; 0000010aH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN4@InputRP:

; 105  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InputRP@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::InputRP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\datainput.cpp
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?InputDisplay@SmsDrawable@@QAEXXZ PROC			; SmsDrawable::InputDisplay
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	InputFlash = (vuxRealTime & 0x180);

	mov	eax, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	eax, 384				; 00000180H
	mov	DWORD PTR ?InputFlash@SmsDrawable@@2HA, eax ; SmsDrawable::InputFlash

; 49   : 	switch(InputModus)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	mov	DWORD PTR tv66[ebp], edx
	mov	eax, DWORD PTR tv66[ebp]
	sub	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 10			; 0000000aH
	ja	SHORT $LN12@InputDispl
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN14@InputDispl[ecx*4]
$LN9@InputDispl:

; 50   : 	{
; 51   : 	case RELEASE_PULSE:
; 52   : 		InputRP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputRP@SmsDrawable@@QAEXXZ		; SmsDrawable::InputRP

; 53   : 		break;

	jmp	SHORT $LN12@InputDispl
$LN8@InputDispl:

; 54   : 	case RELEASE_SPACE:
; 55   : 		InputRS();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputRS@SmsDrawable@@QAEXXZ		; SmsDrawable::InputRS

; 56   : 		break;

	jmp	SHORT $LN12@InputDispl
$LN7@InputDispl:

; 57   : 	case CONTROL_PAGE:
; 58   : 		CNTLPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CNTLPage@SmsDrawable@@QAEXXZ		; SmsDrawable::CNTLPage

; 59   : 		break;

	jmp	SHORT $LN12@InputDispl
$LN6@InputDispl:

; 60   : 	case ARMING_DELAY:
; 61   : 		ADPage();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ADPage@SmsDrawable@@QAEXXZ		; SmsDrawable::ADPage

; 62   : 		break;

	jmp	SHORT $LN12@InputDispl
$LN5@InputDispl:

; 63   : 	case BURST_ALT:
; 64   : 		InputBA();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputBA@SmsDrawable@@QAEXXZ		; SmsDrawable::InputBA

; 65   : 	break;

	jmp	SHORT $LN12@InputDispl
$LN4@InputDispl:

; 66   : 	case C1:
; 67   : 	case C2:
; 68   : 	case C3:
; 69   : 	case C4:
; 70   : 		CDisplay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CDisplay@SmsDrawable@@QAEXXZ		; SmsDrawable::CDisplay

; 71   : 	break;

	jmp	SHORT $LN12@InputDispl
$LN3@InputDispl:

; 72   : 	case REL_ANG:
; 73   : 		RelAngDisplay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RelAngDisplay@SmsDrawable@@QAEXXZ	; SmsDrawable::RelAngDisplay

; 74   : 		MaxInputLines = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+256], 1

; 75   : 	break;

	jmp	SHORT $LN12@InputDispl
$LN2@InputDispl:

; 76   : 	case LADD_MODE:
; 77   : 		LADDDisplay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LADDDisplay@SmsDrawable@@QAEXXZ	; SmsDrawable::LADDDisplay

; 78   : 		MaxInputLines = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 3
$LN12@InputDispl:

; 79   : 	break;
; 80   : 	default:
; 81   : 		break;
; 82   : 	}
; 83   : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@InputDispl:
	DD	$LN9@InputDispl
	DD	$LN8@InputDispl
	DD	$LN7@InputDispl
	DD	$LN6@InputDispl
	DD	$LN5@InputDispl
	DD	$LN3@InputDispl
	DD	$LN4@InputDispl
	DD	$LN4@InputDispl
	DD	$LN4@InputDispl
	DD	$LN4@InputDispl
	DD	$LN2@InputDispl
?InputDisplay@SmsDrawable@@QAEXXZ ENDP			; SmsDrawable::InputDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBC2ArmDelay@SMSClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBC2ArmDelay@SMSClass@@QAEXM@Z PROC		; SMSClass::SetAGBC2ArmDelay, COMDAT
; _this$ = ecx

; 324  : 	void SetAGBC2ArmDelay(float x)    { agbProfile[curProfile].C2ArmDelay     = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx+ecx+228], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBC2ArmDelay@SMSClass@@QAEXM@Z ENDP		; SMSClass::SetAGBC2ArmDelay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBC1ArmDelay2@SMSClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBC1ArmDelay2@SMSClass@@QAEXM@Z PROC		; SMSClass::SetAGBC1ArmDelay2, COMDAT
; _this$ = ecx

; 323  : 	void SetAGBC1ArmDelay2(float x)   { agbProfile[curProfile].C1ArmDelay2    = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx+ecx+224], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBC1ArmDelay2@SMSClass@@QAEXM@Z ENDP		; SMSClass::SetAGBC1ArmDelay2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBC1ArmDelay1@SMSClass@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBC1ArmDelay1@SMSClass@@QAEXM@Z PROC		; SMSClass::SetAGBC1ArmDelay1, COMDAT
; _this$ = ecx

; 322  : 	void SetAGBC1ArmDelay1(float x)   { agbProfile[curProfile].C1ArmDelay1    = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx+ecx+220], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBC1ArmDelay1@SMSClass@@QAEXM@Z ENDP		; SMSClass::SetAGBC1ArmDelay1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBReleaseAngle@SMSClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBReleaseAngle@SMSClass@@QAEXH@Z PROC		; SMSClass::SetAGBReleaseAngle, COMDAT
; _this$ = ecx

; 321  : 	void SetAGBReleaseAngle(int x)    { agbProfile[curProfile].releaseAngle   = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx+216], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBReleaseAngle@SMSClass@@QAEXH@Z ENDP		; SMSClass::SetAGBReleaseAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBBurstAlt@SMSClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBBurstAlt@SMSClass@@QAEXH@Z PROC			; SMSClass::SetAGBBurstAlt, COMDAT
; _this$ = ecx

; 320  : 	void SetAGBBurstAlt(int x)        { agbProfile[curProfile].burstAltitude  = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx+212], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBBurstAlt@SMSClass@@QAEXH@Z ENDP			; SMSClass::SetAGBBurstAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBRippleInterval@SMSClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBRippleInterval@SMSClass@@QAEXH@Z PROC		; SMSClass::SetAGBRippleInterval, COMDAT
; _this$ = ecx

; 318  : 	void SetAGBRippleInterval(int x) { agbProfile[curProfile].rippleInterval = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx+204], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBRippleInterval@SMSClass@@QAEXH@Z ENDP		; SMSClass::SetAGBRippleInterval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?SetAGBRippleCount@SMSClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
?SetAGBRippleCount@SMSClass@@QAEXH@Z PROC		; SMSClass::SetAGBRippleCount, COMDAT
; _this$ = ecx

; 317  : 	void SetAGBRippleCount(int x)     { agbProfile[curProfile].rippleCount    = x; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+ecx+200], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGBRippleCount@SMSClass@@QAEXH@Z ENDP		; SMSClass::SetAGBRippleCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBC2ArmDelay@SMSClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBC2ArmDelay@SMSClass@@QAEMXZ PROC			; SMSClass::GetAGBC2ArmDelay, COMDAT
; _this$ = ecx

; 313  : 	float GetAGBC2ArmDelay(void)   { return agbProfile[curProfile].C2ArmDelay;      }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+ecx+228]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBC2ArmDelay@SMSClass@@QAEMXZ ENDP			; SMSClass::GetAGBC2ArmDelay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ PROC		; SMSClass::GetAGBC1ArmDelay2, COMDAT
; _this$ = ecx

; 312  : 	float GetAGBC1ArmDelay2(void)  { return agbProfile[curProfile].C1ArmDelay2;     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+ecx+224]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBC1ArmDelay2@SMSClass@@QAEMXZ ENDP		; SMSClass::GetAGBC1ArmDelay2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ PROC		; SMSClass::GetAGBC1ArmDelay1, COMDAT
; _this$ = ecx

; 311  : 	float GetAGBC1ArmDelay1(void)  { return agbProfile[curProfile].C1ArmDelay1;     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+ecx+220]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBC1ArmDelay1@SMSClass@@QAEMXZ ENDP		; SMSClass::GetAGBC1ArmDelay1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBReleaseAngle@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBReleaseAngle@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBReleaseAngle, COMDAT
; _this$ = ecx

; 310  : 	int GetAGBReleaseAngle(void)   { return agbProfile[curProfile].releaseAngle;    }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+216]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBReleaseAngle@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBReleaseAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBBurstAlt@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBBurstAlt@SMSClass@@QAEHXZ PROC			; SMSClass::GetAGBBurstAlt, COMDAT
; _this$ = ecx

; 309  : 	int GetAGBBurstAlt(void)       { return agbProfile[curProfile].burstAltitude;   }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+212]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBBurstAlt@SMSClass@@QAEHXZ ENDP			; SMSClass::GetAGBBurstAlt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBFuze@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBFuze@SMSClass@@QAEHXZ PROC			; SMSClass::GetAGBFuze, COMDAT
; _this$ = ecx

; 308  : 	int GetAGBFuze(void)           { return agbProfile[curProfile].fuzeNoseTail;    }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+208]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBFuze@SMSClass@@QAEHXZ ENDP			; SMSClass::GetAGBFuze
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBRippleInterval@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBRippleInterval@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBRippleInterval, COMDAT
; _this$ = ecx

; 307  : 	int GetAGBRippleInterval(void) { return agbProfile[curProfile].rippleInterval;  }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+204]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBRippleInterval@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBRippleInterval
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?GetAGBRippleCount@SMSClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAGBRippleCount@SMSClass@@QAEHXZ PROC		; SMSClass::GetAGBRippleCount, COMDAT
; _this$ = ecx

; 306  : 	int GetAGBRippleCount(void)    { return agbProfile[curProfile].rippleCount;     }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+200]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAGBRippleCount@SMSClass@@QAEHXZ ENDP		; SMSClass::GetAGBRippleCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsAGMasterMode@FireControlComputer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsAGMasterMode@FireControlComputer@@QAEHXZ PROC	; FireControlComputer::IsAGMasterMode, COMDAT
; _this$ = ecx

; 278  : 	int IsAGMasterMode() { return GetMainMasterMode() == MM_AG; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ ; FireControlComputer::GetMainMasterMode
	test	eax, eax
	jne	SHORT $LN3@IsAGMaster
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAGMaster
$LN3@IsAGMaster:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAGMaster:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAGMasterMode@FireControlComputer@@QAEHXZ ENDP	; FireControlComputer::IsAGMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ PROC	; MFDClass::GetOwnShip, COMDAT
; _this$ = ecx

; 82   : 	AircraftClass *GetOwnShip() { return ownship; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+132]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ ENDP	; MFDClass::GetOwnShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?OnMFD@DrawableClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnMFD@DrawableClass@@QAEHXZ PROC			; DrawableClass::OnMFD, COMDAT
; _this$ = ecx

; 145  :       int	OnMFD (void)			{return MFDOn;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnMFD@DrawableClass@@QAEHXZ ENDP			; DrawableClass::OnMFD
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
