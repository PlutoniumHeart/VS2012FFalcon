; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DISPLAYS\Mislhud.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
_Small	DD	03cf5c28fr			; 0.03
_Large	DD	03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?DrawAirMissile@HudClass@@AAEXXZ		; HudClass::DrawAirMissile
PUBLIC	?DrawDogfight@HudClass@@AAEXXZ			; HudClass::DrawDogfight
PUBLIC	?DrawMissileOverride@HudClass@@AAEXXZ		; HudClass::DrawMissileOverride
PUBLIC	?DrawMissileReticle@HudClass@@AAEXMHH@Z		; HudClass::DrawMissileReticle
PUBLIC	?DrawAim9Diamond@HudClass@@AAEXXZ		; HudClass::DrawAim9Diamond
PUBLIC	?DrawAim120Diamond@HudClass@@AAEXXZ		; HudClass::DrawAim120Diamond
PUBLIC	?DrawAim9DLZ@HudClass@@AAEXXZ			; HudClass::DrawAim9DLZ
PUBLIC	?DrawAim120DLZ@HudClass@@AAEX_N@Z		; HudClass::DrawAim120DLZ
PUBLIC	?DrawAim120ASE@HudClass@@AAEXXZ			; HudClass::DrawAim120ASE
PUBLIC	?CheckBreakX@HudClass@@AAEXXZ			; HudClass::CheckBreakX
PUBLIC	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z	; HudClass::DrawDLZSymbol
PUBLIC	?DrawAim9Reticle@HudClass@@AAEXMHH@Z		; HudClass::DrawAim9Reticle
PUBLIC	?DrawGroundMissile@HudClass@@AAEXXZ		; HudClass::DrawGroundMissile
PUBLIC	?DrawHarm@HudClass@@AAEXXZ			; HudClass::DrawHarm
PUBLIC	?DrawHarmFovBox@HudClass@@AAEXXZ		; HudClass::DrawHarmFovBox
PUBLIC	?DrawHTSDLZ@HudClass@@AAEXXZ			; HudClass::DrawHTSDLZ
PUBLIC	?DrawAGMDLZ@HudClass@@AAEXXZ			; HudClass::DrawAGMDLZ
PUBLIC	?RadToHudUnitsX@HudClass@@AAEMM@Z		; HudClass::RadToHudUnitsX
PUBLIC	?RadToHudUnitsY@HudClass@@AAEMM@Z		; HudClass::RadToHudUnitsY
PUBLIC	?DrawBearing@HudClass@@QAEXXZ			; HudClass::DrawBearing
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
PUBLIC	?GetDgftSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetDgftSubMode
PUBLIC	?GetMrmSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetMrmSubMode
PUBLIC	?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ ; FireControlComputer::TargetPtr
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetAvionicsType
PUBLIC	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ	; VirtualDisplay::ZeroRotationAboutOrigin
PUBLIC	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
PUBLIC	?GetSPType@CampBaseClass@@QBEEXZ		; CampBaseClass::GetSPType
PUBLIC	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0M@PHLMOPGK@AA?5?$CF02?40f?$CFc?$AA@	; `string'
PUBLIC	??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@		; `string'
PUBLIC	??_C@_09NMAJCCOH@F?5?5?$CF03?40f?$AA@		; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_05JOALCFMH@?$CF?40fM?$AA@			; `string'
PUBLIC	??_C@_05HNPPPMAM@?$CF?40fF?$AA@			; `string'
PUBLIC	??_C@_04IEFNNOGI@LOSE?$AA@			; `string'
PUBLIC	??_C@_03PBELDNED@HOJ?$AA@			; `string'
PUBLIC	??_C@_05NEDJNGFN@A?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_05IHCCEFHF@T?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_05GIKHMFID@L?$CF?40f?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@38d1b717
PUBLIC	__real@392c987a
PUBLIC	__real@3c03126f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3c75c28f
PUBLIC	__real@3c8efa34
PUBLIC	__real@3c9374bd
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3ccccccd
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d0f5c29
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e051eb8
PUBLIC	__real@3e19999a
PUBLIC	__real@3e800000
PUBLIC	__real@3eb2b8c1
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3edeb852
PUBLIC	__real@3f000000
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f19999a
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f59999a
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f866666
PUBLIC	__real@3f99999a
PUBLIC	__real@3fa00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@4096cbe3
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fd9
PUBLIC	__real@41900000
PUBLIC	__real@42200000
PUBLIC	__real@42652ee1
PUBLIC	__real@43b40000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@44bb8000
PUBLIC	__real@451c4000
PUBLIC	__real@45bde000
PUBLIC	__real@45bde1b0
PUBLIC	__real@461c4000
PUBLIC	__real@463b8000
PUBLIC	__real@46fffe00
PUBLIC	__real@47435000
PUBLIC	__real@8000000000000000
PUBLIC	__real@bccccccd
PUBLIC	__real@bcf5c28f
PUBLIC	__real@bd23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bdd6774e
PUBLIC	__real@be99999a
PUBLIC	__real@beb851ec
PUBLIC	__real@becccccd
PUBLIC	__real@bedeb852
PUBLIC	__real@bf666666
PUBLIC	__real@bf6ccccd
PUBLIC	__real@bf800000
PUBLIC	__real@bf89999a
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0a00000
PUBLIC	__real@c1900000
PUBLIC	__real@c4bb8000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?DrawTDBox@HudClass@@AAEXXZ:PROC		; HudClass::DrawTDBox
EXTRN	?DrawTDMarker@HudClass@@AAEXMMMM@Z:PROC		; HudClass::DrawTDMarker
EXTRN	?DrawAATDBox@HudClass@@AAEXXZ:PROC		; HudClass::DrawAATDBox
EXTRN	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z:PROC ; HudClass::DrawDesignateMarker
EXTRN	?TimeToSteerpoint@HudClass@@AAEXXZ:PROC		; HudClass::TimeToSteerpoint
EXTRN	?RangeToSteerpoint@HudClass@@AAEXXZ:PROC	; HudClass::RangeToSteerpoint
EXTRN	?DrawGuns@HudClass@@AAEXXZ:PROC			; HudClass::DrawGuns
EXTRN	?DrawWindowString@HudClass@@AAEXHPADH@Z:PROC	; HudClass::DrawWindowString
EXTRN	?RadToHudUnits@HudClass@@AAEMM@Z:PROC		; HudClass::RadToHudUnits
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z:PROC ; FindCollisionPoint
EXTRN	?LastMissileWillMiss@FireControlComputer@@QAEHM@Z:PROC ; FireControlComputer::LastMissileWillMiss
EXTRN	?Aim120ASECRadius@FireControlComputer@@QAEMM@Z:PROC ; FireControlComputer::Aim120ASECRadius
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z:PROC ; VirtualDisplay::AdjustRotationAboutOrigin
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?FindMinDistance@@YAMPAUvector@@000@Z:PROC	; FindMinDistance
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?hudWinX@@3PAMA:BYTE				; hudWinX
EXTRN	?hudWinY@@3PAMA:BYTE				; hudWinY
EXTRN	?hudWinWidth@@3PAMA:BYTE			; hudWinWidth
EXTRN	?hudWinHeight@@3PAMA:BYTE			; hudWinHeight
EXTRN	?flash@HudClass@@0HA:DWORD			; HudClass::flash
EXTRN	?Warnflash@HudClass@@0HA:DWORD			; HudClass::Warnflash
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?shootCue@@3_NA:BYTE				; shootCue
EXTRN	?g_bnewAMRAAMdlz@@3_NA:BYTE			; g_bnewAMRAAMdlz
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 06H DUP (?) ; `DrawShootCue'::`2'::S
_BSS	ENDS
;	COMDAT ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
_BSS	SEGMENT
?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA DD 01H DUP (?) ; `DrawShootCue'::`2'::$S1
_BSS	ENDS
;	COMDAT ?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 02H DUP (?) ; `DrawShootCue'::`2'::H1
_BSS	ENDS
;	COMDAT ?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 02H DUP (?) ; `DrawShootCue'::`2'::H2
_BSS	ENDS
;	COMDAT ?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 02H DUP (?) ; `DrawShootCue'::`2'::H3
_BSS	ENDS
;	COMDAT ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 05H DUP (?) ; `DrawShootCue'::`2'::O
_BSS	ENDS
;	COMDAT ?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 02H DUP (?) ; `DrawShootCue'::`2'::T1
_BSS	ENDS
;	COMDAT ?T2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B
_BSS	SEGMENT
?T2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B DQ 02H DUP (?) ; `DrawShootCue'::`2'::T2
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c4bb8000
CONST	SEGMENT
__real@c4bb8000 DD 0c4bb8000r			; -1500
CONST	ENDS
;	COMDAT __real@c1900000
CONST	SEGMENT
__real@c1900000 DD 0c1900000r			; -18
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf89999a
CONST	SEGMENT
__real@bf89999a DD 0bf89999ar			; -1.075
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf6ccccd
CONST	SEGMENT
__real@bf6ccccd DD 0bf6ccccdr			; -0.925
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bedeb852
CONST	SEGMENT
__real@bedeb852 DD 0bedeb852r			; -0.435
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@beb851ec
CONST	SEGMENT
__real@beb851ec DD 0beb851ecr			; -0.36
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@bdd6774e
CONST	SEGMENT
__real@bdd6774e DD 0bdd6774er			; -0.10472
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bd23d70a
CONST	SEGMENT
__real@bd23d70a DD 0bd23d70ar			; -0.04
CONST	ENDS
;	COMDAT __real@bcf5c28f
CONST	SEGMENT
__real@bcf5c28f DD 0bcf5c28fr			; -0.03
CONST	ENDS
;	COMDAT __real@bccccccd
CONST	SEGMENT
__real@bccccccd DD 0bccccccdr			; -0.025
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@47435000
CONST	SEGMENT
__real@47435000 DD 047435000r			; 50000
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@463b8000
CONST	SEGMENT
__real@463b8000 DD 0463b8000r			; 12000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@45bde000
CONST	SEGMENT
__real@45bde000 DD 045bde000r			; 6076
CONST	ENDS
;	COMDAT __real@451c4000
CONST	SEGMENT
__real@451c4000 DD 0451c4000r			; 2500
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4096cbe3
CONST	SEGMENT
__real@4096cbe3 DD 04096cbe3r			; 4.71239
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f866666
CONST	SEGMENT
__real@3f866666 DD 03f866666r			; 1.05
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3edeb852
CONST	SEGMENT
__real@3edeb852 DD 03edeb852r			; 0.435
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eb2b8c1
CONST	SEGMENT
__real@3eb2b8c1 DD 03eb2b8c1r			; 0.349066
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e051eb8
CONST	SEGMENT
__real@3e051eb8 DD 03e051eb8r			; 0.13
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3d0f5c29
CONST	SEGMENT
__real@3d0f5c29 DD 03d0f5c29r			; 0.035
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ccccccd
CONST	SEGMENT
__real@3ccccccd DD 03ccccccdr			; 0.025
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c9374bd
CONST	SEGMENT
__real@3c9374bd DD 03c9374bdr			; 0.018
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3c75c28f
CONST	SEGMENT
__real@3c75c28f DD 03c75c28fr			; 0.015
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c03126f
CONST	SEGMENT
__real@3c03126f DD 03c03126fr			; 0.008
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB DD 03d4ccccdr ; 0.05 ; `DrawShootCue'::`2'::hSize
CONST	ENDS
;	COMDAT ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB DD 03dcccccdr ; 0.1 ; `DrawShootCue'::`2'::vSize
CONST	ENDS
;	COMDAT ??_C@_05GIKHMFID@L?$CF?40f?$AA@
CONST	SEGMENT
??_C@_05GIKHMFID@L?$CF?40f?$AA@ DB 'L%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHCCEFHF@T?$CF?40f?$AA@
CONST	SEGMENT
??_C@_05IHCCEFHF@T?$CF?40f?$AA@ DB 'T%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NEDJNGFN@A?$CF?40f?$AA@
CONST	SEGMENT
??_C@_05NEDJNGFN@A?$CF?40f?$AA@ DB 'A%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PBELDNED@HOJ?$AA@
CONST	SEGMENT
??_C@_03PBELDNED@HOJ?$AA@ DB 'HOJ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEFNNOGI@LOSE?$AA@
CONST	SEGMENT
??_C@_04IEFNNOGI@LOSE?$AA@ DB 'LOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNPPPMAM@?$CF?40fF?$AA@
CONST	SEGMENT
??_C@_05HNPPPMAM@?$CF?40fF?$AA@ DB '%.0fF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JOALCFMH@?$CF?40fM?$AA@
CONST	SEGMENT
??_C@_05JOALCFMH@?$CF?40fM?$AA@ DB '%.0fM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NMAJCCOH@F?5?5?$CF03?40f?$AA@
CONST	SEGMENT
??_C@_09NMAJCCOH@F?5?5?$CF03?40f?$AA@ DB 'F  %03.0f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
CONST	SEGMENT
??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@ DB 'F %4.1f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PHLMOPGK@AA?5?$CF02?40f?$CFc?$AA@
CONST	SEGMENT
??_C@_0M@PHLMOPGK@AA?5?$CF02?40f?$CFc?$AA@ DB 'AA %02.0f%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_letter$ = -8						; size = 4
_i$ = -4						; size = 4
_display$ = 8						; size = 4
?DrawShootCue@@YAXPAVVirtualDisplay@@@Z PROC		; DrawShootCue

; 1304 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1305 : 	static const float vSize = 0.10f;
; 1306 : 	static const float hSize = 0.05f;
; 1307 : 
; 1308 : 	struct Corner {
; 1309 : 		float	x, y;
; 1310 : 	};
; 1311 : 
; 1312 : 	static const struct Corner S[] = {
; 1313 : 		{ hSize,	 vSize},

	mov	eax, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	eax, 1
	jne	$LN31@DrawShootC
	mov	ecx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, ecx
	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1314 : 		{-hSize,	 vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0

; 1315 : 		{-hSize,	 0.0f},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+16, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+20, xmm0

; 1316 : 		{ hSize,	 0.0f},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+24, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+28, xmm0

; 1317 : 		{ hSize,	-vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+32, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+36, xmm0

; 1318 : 		{-hSize,	-vSize}

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+40, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+44, xmm0
$LN31@DrawShootC:

; 1319 : 	};
; 1320 : 
; 1321 : 	static const struct Corner H1[] = {
; 1322 : 		{hSize,		 vSize},

	mov	edx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	edx, 2
	jne	SHORT $LN30@DrawShootC
	mov	eax, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	eax, 2
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, eax
	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1323 : 		{hSize,		-vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0
$LN30@DrawShootC:

; 1324 : 	};
; 1325 : 	static const struct Corner H2[] = {
; 1326 : 		{-hSize,	 0.0f},

	mov	ecx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	ecx, 4
	jne	SHORT $LN29@DrawShootC
	mov	edx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	edx, 4
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, edx
	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1327 : 		{ hSize,	 0.0f},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0
$LN29@DrawShootC:

; 1328 : 	};
; 1329 : 	static const struct Corner H3[] = {
; 1330 : 		{-hSize,	 vSize},

	mov	eax, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	eax, 8
	jne	SHORT $LN28@DrawShootC
	mov	ecx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 8
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, ecx
	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1331 : 		{-hSize,	-vSize}

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0
$LN28@DrawShootC:

; 1332 : 	};
; 1333 : 
; 1334 : 	static const struct Corner O[] = {
; 1335 : 		{ hSize,	 vSize},

	mov	edx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	edx, 16					; 00000010H
	jne	$LN27@DrawShootC
	mov	eax, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	eax, 16					; 00000010H
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, eax
	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1336 : 		{-hSize,	 vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0

; 1337 : 		{-hSize,	-vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+16, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+20, xmm0

; 1338 : 		{ hSize,	-vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+24, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+28, xmm0

; 1339 : 		{ hSize,	 vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+32, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+36, xmm0
$LN27@DrawShootC:

; 1340 : 	};
; 1341 : 
; 1342 : 	static const struct Corner T1[] = {
; 1343 : 		{ hSize,	 vSize},

	mov	ecx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	ecx, 32					; 00000020H
	jne	SHORT $LN26@DrawShootC
	mov	edx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	edx, 32					; 00000020H
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, edx
	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1344 : 		{-hSize,	 vSize},

	movss	xmm0, DWORD PTR ?hSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0
$LN26@DrawShootC:

; 1345 : 	};
; 1346 : 	static const struct Corner T2[] = {
; 1347 : 		{0.0f,		 vSize},

	mov	eax, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	and	eax, 64					; 00000040H
	jne	SHORT $LN25@DrawShootC
	mov	ecx, DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA
	or	ecx, 64					; 00000040H
	mov	DWORD PTR ?$S1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4IA, ecx
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR ?T2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+4, xmm0

; 1348 : 		{0.0f,		-vSize},

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR ?T2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+8, xmm0
	movss	xmm0, DWORD PTR ?vSize@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR ?T2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B+12, xmm0
$LN25@DrawShootC:

; 1349 : 	};
; 1350 : 
; 1351 : 
; 1352 : 	const struct Corner	*letter;
; 1353 : 	int					i;
; 1354 : 
; 1355 : 	display->AdjustOriginInViewport( -0.3f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1356 : 	letter = S;

	mov	DWORD PTR _letter$[ebp], OFFSET ?S@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1357 : 	for (i=1; i<sizeof(S)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN24@DrawShootC
$LN23@DrawShootC:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN24@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 6
	jae	SHORT $LN22@DrawShootC

; 1358 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1359 : 	}

	jmp	SHORT $LN23@DrawShootC
$LN22@DrawShootC:

; 1360 : 
; 1361 : 	display->AdjustOriginInViewport( 0.15f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1362 : 	letter = H1;

	mov	DWORD PTR _letter$[ebp], OFFSET ?H1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1363 : 	for (i=1; i<sizeof(H1)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN21@DrawShootC
$LN20@DrawShootC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN19@DrawShootC

; 1364 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1365 : 	}

	jmp	SHORT $LN20@DrawShootC
$LN19@DrawShootC:

; 1366 : 	letter = H2;

	mov	DWORD PTR _letter$[ebp], OFFSET ?H2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1367 : 	for (i=1; i<sizeof(H2)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN18@DrawShootC
$LN17@DrawShootC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN18@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN16@DrawShootC

; 1368 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1369 : 	}

	jmp	SHORT $LN17@DrawShootC
$LN16@DrawShootC:

; 1370 : 	letter = H3;

	mov	DWORD PTR _letter$[ebp], OFFSET ?H3@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1371 : 	for (i=1; i<sizeof(H3)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN15@DrawShootC
$LN14@DrawShootC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN13@DrawShootC

; 1372 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1373 : 	}

	jmp	SHORT $LN14@DrawShootC
$LN13@DrawShootC:

; 1374 : 
; 1375 : 	display->AdjustOriginInViewport( 0.15f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1376 : 	letter = O;

	mov	DWORD PTR _letter$[ebp], OFFSET ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1377 : 	for (i=1; i<sizeof(O)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN12@DrawShootC
$LN11@DrawShootC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 5
	jae	SHORT $LN10@DrawShootC

; 1378 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1379 : 	}

	jmp	SHORT $LN11@DrawShootC
$LN10@DrawShootC:

; 1380 : 
; 1381 : 	display->AdjustOriginInViewport( 0.15f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1382 : 	letter = O;

	mov	DWORD PTR _letter$[ebp], OFFSET ?O@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1383 : 	for (i=1; i<sizeof(O)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN9@DrawShootC
$LN8@DrawShootC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 5
	jae	SHORT $LN7@DrawShootC

; 1384 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1385 : 	}

	jmp	SHORT $LN8@DrawShootC
$LN7@DrawShootC:

; 1386 : 
; 1387 : 	display->AdjustOriginInViewport( 0.15f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1388 : 	letter = T1;

	mov	DWORD PTR _letter$[ebp], OFFSET ?T1@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1389 : 	for (i=1; i<sizeof(T1)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN6@DrawShootC
$LN5@DrawShootC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN4@DrawShootC

; 1390 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1391 : 	}

	jmp	SHORT $LN5@DrawShootC
$LN4@DrawShootC:

; 1392 : 	letter = T2;

	mov	DWORD PTR _letter$[ebp], OFFSET ?T2@?1??DrawShootCue@@YAXPAVVirtualDisplay@@@Z@4QBUCorner@?1??1@YAX0@Z@B

; 1393 : 	for (i=1; i<sizeof(T2)/sizeof(Corner); i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@DrawShootC
$LN2@DrawShootC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@DrawShootC:
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN1@DrawShootC

; 1394 : 		display->Line( letter[i].x, letter[i].y, letter[i-1].x, letter[i-1].y );

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8-4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx*8-8]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax*8+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _letter$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx*8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1395 : 	}

	jmp	SHORT $LN2@DrawShootC
$LN1@DrawShootC:

; 1396 : 
; 1397 : 	display->AdjustOriginInViewport( -0.3f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1398 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawShootCue@@YAXPAVVirtualDisplay@@@Z ENDP		; DrawShootCue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\harmpod.h
;	COMDAT ?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ PROC	; HarmTargetingPod::GetSubMode, COMDAT
; _this$ = ecx

; 83   : 	Submode			GetSubMode ( void ) { return submode; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+168]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ENDP	; HarmTargetingPod::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campbase.h
;	COMDAT ?GetSPType@CampBaseClass@@QBEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSPType@CampBaseClass@@QBEEXZ PROC			; CampBaseClass::GetSPType, COMDAT
; _this$ = ecx

; 291  : 	uchar GetSPType (void) const						{	return (EntityType())->classInfo_[VU_SPTYPE]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	ecx, 1
	shl	ecx, 2
	mov	al, BYTE PTR [eax+ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSPType@CampBaseClass@@QBEEXZ ENDP			; CampBaseClass::GetSPType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sms.h
;	COMDAT ?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ PROC ; SMSBaseClass::MasterArm, COMDAT
; _this$ = ecx

; 92   : 	MasterArmState MasterArm(void) {return masterArm;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ENDP ; SMSBaseClass::MasterArm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::ZeroRotationAboutOrigin, COMDAT
; _this$ = ecx

; 144  :     void ZeroRotationAboutOrigin( void ) { dmatrix.rotation01 = dmatrix.rotation10 = 0.0f, dmatrix.rotation00 = dmatrix.rotation11 = 1.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+80], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+76], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::ZeroRotationAboutOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetAvionicsType@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvionicsType@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetAvionicsType, COMDAT
; _this$ = ecx

; 142  : 	int GetAvionicsType (void)								{ return SimAvionicsType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetAvionicsType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ PROC ; FireControlComputer::TargetPtr, COMDAT
; _this$ = ecx

; 288  : 	SimObjectType* TargetPtr(void) {return targetPtr; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+132]
	mov	esp, ebp
	pop	ebp
	ret	0
?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ ENDP ; FireControlComputer::TargetPtr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetMrmSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMrmSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetMrmSubMode, COMDAT
; _this$ = ecx

; 283  : 	FCCSubMode GetMrmSubMode (void) {return (mrmSubMode);};  // ASSOCIATOR 04/12/03: for remembering MRM mode missiles

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+156]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMrmSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetMrmSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetDgftSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDgftSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetDgftSubMode, COMDAT
; _this$ = ecx

; 282  : 	FCCSubMode GetDgftSubMode (void) {return (dgftSubMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+152]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDgftSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetDgftSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetSubMode, COMDAT
; _this$ = ecx

; 281  : 	FCCSubMode GetSubMode (void) {return (subMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv86 = -24						; size = 4
tv85 = -20						; size = 4
tv82 = -16						; size = 4
_playerAC$ = -12					; size = 4
_this$ = -8						; size = 4
_steeringLineX$ = -4					; size = 4
?DrawBearing@HudClass@@QAEXXZ PROC			; HudClass::DrawBearing
; _this$ = ecx

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 476  : 	float steeringLineX = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 477  : 	// Steering Line
; 478  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 479  : 	if(playerAC && playerAC->Sms)

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN1@DrawBearin
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+940], 0
	je	$LN1@DrawBearin

; 480  : 	{
; 481  : 		if(playerAC->Sms->MavSubMode == SMSBaseClass::PRE)

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+940]
	cmp	DWORD PTR [edx+24], 0
	jne	$LN1@DrawBearin

; 482  : 		{
; 483  : 			steeringLineX = FCC->groundDesignateAz / (20.0F * DTR);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+364]
	divss	xmm0, DWORD PTR __real@3eb2b8c1
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 484  : 			steeringLineX += betaHudUnits;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	addss	xmm0, DWORD PTR [edx+4860]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 485  : 			steeringLineX = min ( max (steeringLineX , -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN5@DrawBearin
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN6@DrawBearin
$LN5@DrawBearin:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv82[ebp], xmm0
$LN6@DrawBearin:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv82[ebp]
	jbe	SHORT $LN9@DrawBearin
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN7@DrawBearin
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN8@DrawBearin
$LN7@DrawBearin:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv85[ebp], xmm0
$LN8@DrawBearin:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR tv86[ebp], xmm0
	jmp	SHORT $LN10@DrawBearin
$LN9@DrawBearin:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv86[ebp], xmm0
$LN10@DrawBearin:
	movss	xmm0, DWORD PTR tv86[ebp]
	movss	DWORD PTR _steeringLineX$[ebp], xmm0

; 486  : 			display->Line(steeringLineX, 1.0F, steeringLineX, -1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _steeringLineX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN1@DrawBearin:

; 487  : 		}
; 488  : 	}					
; 489  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawBearing@HudClass@@QAEXXZ ENDP			; HudClass::DrawBearing
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?RadToHudUnitsY@HudClass@@AAEMM@Z
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_mr$ = 8						; size = 4
?RadToHudUnitsY@HudClass@@AAEMM@Z PROC			; HudClass::RadToHudUnitsY, COMDAT
; _this$ = ecx

; 220  : 	float	RadToHudUnitsY (float mr)	{ return RadToHudUnits(mr) * mVScale; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _mr$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+5184]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?RadToHudUnitsY@HudClass@@AAEMM@Z ENDP			; HudClass::RadToHudUnitsY
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?RadToHudUnitsX@HudClass@@AAEMM@Z
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
_mr$ = 8						; size = 4
?RadToHudUnitsX@HudClass@@AAEMM@Z PROC			; HudClass::RadToHudUnitsX, COMDAT
; _this$ = ecx

; 219  : 	float	RadToHudUnitsX (float mr)	{ return RadToHudUnits(mr) * mHScale; };

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _mr$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv75[ebp]
	movss	xmm0, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+5188]
	movss	DWORD PTR tv78[ebp], xmm0
	fld	DWORD PTR tv78[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?RadToHudUnitsX@HudClass@@AAEMM@Z ENDP			; HudClass::RadToHudUnitsX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv228 = -68						; size = 4
tv222 = -64						; size = 4
_percentRange$ = -60					; size = 4
tv234 = -56						; size = 4
_rNeMin$ = -52						; size = 4
_rNeMax$ = -48						; size = 4
_rMax$ = -44						; size = 4
_rMin$ = -40						; size = 4
_dx$ = -36						; size = 4
_dz$ = -32						; size = 4
_range$ = -28						; size = 4
_dy$ = -24						; size = 4
_this$ = -20						; size = 4
_tmpStr$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawAGMDLZ@HudClass@@AAEXXZ PROC			; HudClass::DrawAGMDLZ
; _this$ = ecx

; 1195 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1196 : 	char tmpStr[12];
; 1197 : 	float percentRange;
; 1198 : 	float rMax, rMin;
; 1199 : 	float rNeMax, rNeMin;
; 1200 : 	float range;
; 1201 : 	float dx, dy, dz;
; 1202 : 
; 1203 :    if (FCC->missileTarget)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movsx	edx, BYTE PTR [ecx+192]
	test	edx, edx
	je	$LN2@DrawAGMDLZ

; 1204 :    {
; 1205 :      // Range Carat / Closure
; 1206 :      rMax   = FCC->missileRMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+288]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1207 :      rMin   = FCC->missileRMin;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+292]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 1208 : 
; 1209 : 	  // get range to ground designaate point
; 1210 : 	  dx = ownship->XPos() - FCC->groundDesignateX;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv222[ebp]
	movss	xmm0, DWORD PTR tv222[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	subss	xmm0, DWORD PTR [eax+376]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1211 : 	  dy = ownship->YPos() - FCC->groundDesignateY;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv228[ebp]
	movss	xmm0, DWORD PTR tv228[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	subss	xmm0, DWORD PTR [eax+380]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1212 : 	  dz = ownship->ZPos() - FCC->groundDesignateZ;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv234[ebp]
	movss	xmm0, DWORD PTR tv234[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	subss	xmm0, DWORD PTR [eax+384]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1213 : 	  range = (float)sqrt( dx*dx + dy*dy + dz*dz );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 1214 : 
; 1215 : 	  // normalize vector to ground designate
; 1216 : 	  dx /= range;

	movss	xmm0, DWORD PTR _dx$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1217 : 	  dy /= range;

	movss	xmm0, DWORD PTR _dy$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1218 : 	  dz /= range;

	movss	xmm0, DWORD PTR _dz$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 1219 : 
; 1220 : 
; 1221 :       // Normailze the ranges for DLZ display
; 1222 :       percentRange = range / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR _range$[ebp]
	divss	xmm0, DWORD PTR [edx+312]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 1223 :       rMin = rMin / FCC->missileWEZDisplayRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 1224 :       rMax = rMax / FCC->missileWEZDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR _rMax$[ebp]
	divss	xmm0, DWORD PTR [eax+312]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1225 :       rNeMax = FCC->missileRneMax / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+296]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _rNeMax$[ebp], xmm0

; 1226 :       rNeMin = FCC->missileRneMin / FCC->missileWEZDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [eax+300]
	divss	xmm0, DWORD PTR [edx+312]
	movss	DWORD PTR _rNeMin$[ebp], xmm0

; 1227 : 
; 1228 :       DrawDLZSymbol(percentRange, "", rMin , rMax, rNeMin, rNeMax, FALSE, ""); //0

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol

; 1229 : 
; 1230 :       sprintf (tmpStr, "%.0f", FCC->missileTOF);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cvtss2sd xmm0, DWORD PTR [ecx+232]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1231 :       ShiAssert (strlen(tmpStr) < sizeof (tmpStr));
; 1232 :       DrawWindowString (32, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN2@DrawAGMDLZ:

; 1233 :    }
; 1234 : 
; 1235 :    // Draw Time to die strings
; 1236 :    if (FCC->nextMissileImpactTime > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+272]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@DrawAGMDLZ

; 1237 :    {
; 1238 :       sprintf (tmpStr, "%.0f", FCC->nextMissileImpactTime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cvtss2sd xmm0, DWORD PTR [ecx+272]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1239 :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 1240 :       DrawWindowString (37, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	37					; 00000025H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN1@DrawAGMDLZ:

; 1241 :    }
; 1242 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAGMDLZ@HudClass@@AAEXXZ ENDP			; HudClass::DrawAGMDLZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv239 = -64						; size = 4
tv245 = -60						; size = 4
_percentRange$ = -56					; size = 4
tv252 = -52						; size = 4
_rNeMin$ = -48						; size = 4
_rNeMax$ = -44						; size = 4
_boresightOffset$ = -40					; size = 4
_yPos$ = -36						; size = 4
_xPos$ = -32						; size = 4
_rMax$ = -28						; size = 4
_rMin$ = -24						; size = 4
_this$ = -20						; size = 4
_tmpStr$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawHTSDLZ@HudClass@@AAEXXZ PROC			; HudClass::DrawHTSDLZ
; _this$ = ecx

; 1245 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1246 : 	char tmpStr[12];
; 1247 : 	float rMax, rMin;
; 1248 : 	float rNeMax, rNeMin;
; 1249 : 	float percentRange, xPos, yPos;
; 1250 : 	float boresightOffset;
; 1251 : 
; 1252 :    ShiAssert( targetData );
; 1253 : 
; 1254 :    // Range values
; 1255 :    rMax   = FCC->missileRMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+288]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1256 :    rMin   = FCC->missileRMin;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+292]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 1257 : 
; 1258 :    if (targetData->range < rMin || targetData->range > rMax || flash)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	comiss	xmm0, DWORD PTR [edx+44]
	ja	SHORT $LN5@DrawHTSDLZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	ja	SHORT $LN5@DrawHTSDLZ
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	$LN6@DrawHTSDLZ
$LN5@DrawHTSDLZ:

; 1259 :    {
; 1260 :       boresightOffset = hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F;

	mov	edx, 4
	imul	edx, 44					; 0000002cH
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	movss	DWORD PTR _boresightOffset$[ebp], xmm0

; 1261 : 	   xPos = RadToHudUnitsX(FCC->missileSeekerAz);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+304]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _xPos$[ebp]

; 1262 : 	   yPos = RadToHudUnitsY(FCC->missileSeekerEl) + boresightOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+308]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR tv239[ebp]
	movss	xmm0, DWORD PTR tv239[ebp]
	addss	xmm0, DWORD PTR _boresightOffset$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 1263 : 
; 1264 :       if (fabs (xPos) < 1.0F && fabs(yPos) < 1.0F)

	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv245[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv245[ebp]
	jbe	SHORT $LN4@DrawHTSDLZ
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv252[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv252[ebp]
	jbe	SHORT $LN4@DrawHTSDLZ

; 1265 :       {
; 1266 :         display->Circle(xPos, yPos, 0.05F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN4@DrawHTSDLZ:

; 1267 :       }
; 1268 :       DrawAim9Reticle(SRM_RETICLE_SIZE, FALSE, FALSE);

	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle
$LN6@DrawHTSDLZ:

; 1269 :    }
; 1270 : 
; 1271 : 
; 1272 :    // Normailze the ranges for DLZ display
; 1273 : 	// JB 010710 The DLZ should not be dependant on the HTS range
; 1274 :    /*
; 1275 : 	 percentRange = targetData->range / FCC->missileWEZDisplayRange;
; 1276 :    rMin = rMin / FCC->missileWEZDisplayRange;
; 1277 :    rMax = rMax / FCC->missileWEZDisplayRange;
; 1278 :    rNeMax = FCC->missileRneMax / FCC->missileWEZDisplayRange;
; 1279 :    rNeMin = FCC->missileRneMin / FCC->missileWEZDisplayRange;
; 1280 : 	*/
; 1281 : 	 percentRange = targetData->range / FCC->missileRMax;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR [ecx+288]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 1282 :    rMin = rMin / FCC->missileRMax;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	divss	xmm0, DWORD PTR [eax+288]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 1283 :    rMax = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1284 :    rNeMax = FCC->missileRneMax / FCC->missileRMax;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+296]
	divss	xmm0, DWORD PTR [ecx+288]
	movss	DWORD PTR _rNeMax$[ebp], xmm0

; 1285 :    rNeMin = FCC->missileRneMin / FCC->missileRMax;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [eax+300]
	divss	xmm0, DWORD PTR [edx+288]
	movss	DWORD PTR _rNeMin$[ebp], xmm0

; 1286 : 
; 1287 :    DrawDLZSymbol(percentRange, "", rMin, rMax, rNeMin, rNeMax, FALSE, "");  //0

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	ecx
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol

; 1288 : 
; 1289 : 
; 1290 :    // Draw Time to die strings
; 1291 :    if (FCC->nextMissileImpactTime > 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+272]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@DrawHTSDLZ

; 1292 :    {
; 1293 :       sprintf (tmpStr, "%.0f", FCC->nextMissileImpactTime);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cvtss2sd xmm0, DWORD PTR [eax+272]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1294 :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 1295 : 	  //MI
; 1296 : 	  if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN2@DrawHTSDLZ

; 1297 : 		  display->TextLeft(0.40F, -0.36F, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@beb851ec
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 1298 : 	  else

	jmp	SHORT $LN1@DrawHTSDLZ
$LN2@DrawHTSDLZ:

; 1299 : 		  DrawWindowString (37, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	37					; 00000025H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN1@DrawHTSDLZ:

; 1300 :    }
; 1301 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawHTSDLZ@HudClass@@AAEXXZ ENDP			; HudClass::DrawHTSDLZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawHarmFovBox@HudClass@@AAEXXZ PROC			; HudClass::DrawHarmFovBox
; _this$ = ecx

; 1618 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1619 : 	display->AdjustOriginInViewport (0.0f, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1620 : 			hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1621 : 		
; 1622 : 	display->Line ( -HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_TOP, HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_TOP );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf6ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3edeb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf6ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bedeb852
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1623 : 	display->Line ( -HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_BOTTOM, HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_BOTTOM );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf89999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3edeb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf89999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bedeb852
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1624 : 	display->Line ( -HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_TOP, -HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_BOTTOM );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf89999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bedeb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf6ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bedeb852
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1625 : 	display->Line ( HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_TOP, HARM_FOV_BOX_WIDTH, HARM_FOV_BOX_BOTTOM );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf89999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3edeb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf6ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3edeb852
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1626 : 		
; 1627 : 		display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1628 : 			hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1629 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawHarmFovBox@HudClass@@AAEXXZ ENDP			; HudClass::DrawHarmFovBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DrawHarm@HudClass@@AAEXXZ PROC				; HudClass::DrawHarm
; _this$ = ecx

; 491  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 492  : 	if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN5@DrawHarm

; 493  : 	{
; 494  : 		DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 495  : 		DrawHTSDLZ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawHTSDLZ@HudClass@@AAEXXZ		; HudClass::DrawHTSDLZ
$LN5@DrawHarm:

; 496  : 	}
; 497  : 
; 498  : 	// RV - I-Hawk - No reticle is needed, but FOV "box"
; 499  : 	//DrawMissileReticle(HARM_RETICLE_SIZE, FALSE, FALSE); 
; 500  : 
; 501  : 	DrawHarmFovBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawHarmFovBox@HudClass@@AAEXXZ	; HudClass::DrawHarmFovBox

; 502  : 
; 503  : 	// Add waypoint info
; 504  : 	if (waypointValid)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+4952]
	test	edx, edx
	je	SHORT $LN1@DrawHarm

; 505  : 	{
; 506  : 		TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 507  : 		//MI
; 508  : 		if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN3@DrawHarm

; 509  : 		{
; 510  : 			if(FCC->nextMissileImpactTime <= 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+272]
	jb	SHORT $LN2@DrawHarm

; 511  : 			{
; 512  : 				RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN2@DrawHarm:

; 513  : 			}
; 514  : 		}
; 515  : 
; 516  : 		else

	jmp	SHORT $LN1@DrawHarm
$LN3@DrawHarm:

; 517  : 		{
; 518  : 			RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawHarm:

; 519  : 		}
; 520  : 	}
; 521  : 	
; 522  : 	CheckBreakX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBreakX@HudClass@@AAEXXZ		; HudClass::CheckBreakX

; 523  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawHarm@HudClass@@AAEXXZ ENDP				; HudClass::DrawHarm
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawGroundMissile@HudClass@@AAEXXZ PROC		; HudClass::DrawGroundMissile
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 435  : 	// If we have a target, draw the DLZ
; 436  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 437  : 	if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN6@DrawGround

; 438  : 	{
; 439  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN5@DrawGround
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN6@DrawGround
$LN5@DrawGround:

; 440  : 		{
; 441  : 			DrawAGMDLZ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAGMDLZ@HudClass@@AAEXXZ		; HudClass::DrawAGMDLZ
$LN6@DrawGround:

; 442  : 		}
; 443  : 	}
; 444  : 
; 445  : 	// Draw the TD box
; 446  : 	
; 447  : 	display->AdjustOriginInViewport (0.0F, (hudWinY[BORESIGHT_CROSS_WINDOW] +
; 448  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 449  : 	
; 450  : 	// Marco edit - change size of Mav TD to approx DTOS size. (copied from DTOS code) - 6 Apr 2001 by Mirv's Suggestion
; 451  : 	// DrawDesignateMarker (Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);
; 452  : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN4@DrawGround

; 453  : 		DrawDesignateMarker(Square, FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+372]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+368]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+364]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDesignateMarker@HudClass@@AAEXW4DesignateShape@1@MMM@Z ; HudClass::DrawDesignateMarker

; 454  : 	else

	jmp	SHORT $LN3@DrawGround
$LN4@DrawGround:

; 455  : 		DrawTDMarker(FCC->groundDesignateAz, FCC->groundDesignateEl, FCC->groundDesignateDroll,0.03F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+372]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+368]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+364]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDMarker@HudClass@@AAEXMMMM@Z	; HudClass::DrawTDMarker
$LN3@DrawGround:

; 456  : 	// End Marco Edit
; 457  : 	
; 458  : 	display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 459  : 		hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 460  : 	
; 461  : 	// Add waypoint info
; 462  : 	if (waypointValid)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+4952]
	test	edx, edx
	je	SHORT $LN2@DrawGround

; 463  : 	{
; 464  : 		TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 465  : 		RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN2@DrawGround:

; 466  : 	}
; 467  : 	
; 468  : 	CheckBreakX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBreakX@HudClass@@AAEXXZ		; HudClass::CheckBreakX

; 469  : 	//MI
; 470  : 	if(g_bRealisticAvionics && !FCC->preDesignate)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN1@DrawGround
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movsx	eax, BYTE PTR [edx+182]
	test	eax, eax
	jne	SHORT $LN1@DrawGround

; 471  : 		DrawBearing();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBearing@HudClass@@QAEXXZ		; HudClass::DrawBearing
$LN1@DrawGround:

; 472  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawGroundMissile@HudClass@@AAEXXZ ENDP		; HudClass::DrawGroundMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_radius$ = 8						; size = 4
_showRange$ = 12					; size = 4
_showAspect$ = 16					; size = 4
?DrawAim9Reticle@HudClass@@AAEXMHH@Z PROC		; HudClass::DrawAim9Reticle
; _this$ = ecx

; 1606 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1607 : 		
; 1608 : 	if (targetPtr && targetData && (targetData->range < FCC->missileRneMax) && (targetData->range > FCC->missileRneMin))		//should only the MAX range be tested? Now it stops flashing if below RNE

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN3@DrawAim9Re
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN3@DrawAim9Re
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+296]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN3@DrawAim9Re
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [eax+300]
	jbe	SHORT $LN3@DrawAim9Re

; 1609 : 	{
; 1610 : 		if (vuxRealTime & 0x100)

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	ecx, 256				; 00000100H
	je	SHORT $LN2@DrawAim9Re

; 1611 : 			DrawMissileReticle(radius, showRange, showAspect);

	mov	edx, DWORD PTR _showAspect$[ebp]
	push	edx
	mov	eax, DWORD PTR _showRange$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle
$LN2@DrawAim9Re:

; 1612 : 	}
; 1613 : 	else

	jmp	SHORT $LN1@DrawAim9Re
$LN3@DrawAim9Re:

; 1614 : 		DrawMissileReticle(radius, showRange, showAspect);

	mov	ecx, DWORD PTR _showAspect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _showRange$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle
$LN1@DrawAim9Re:

; 1615 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawAim9Reticle@HudClass@@AAEXMHH@Z ENDP		; HudClass::DrawAim9Reticle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv892 = -72						; size = 4
tv1328 = -68						; size = 4
tv1330 = -64						; size = 4
tv913 = -60						; size = 4
tv934 = -56						; size = 4
tv1326 = -52						; size = 4
tv73 = -48						; size = 4
tv69 = -44						; size = 4
tv67 = -40						; size = 4
tv75 = -36						; size = 4
tv77 = -32						; size = 4
_playerAC$ = -28					; size = 4
_yOffset$ = -24						; size = 4
_this$ = -20						; size = 4
_wezStr$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_percentRange$ = 8					; size = 4
_tmpStr$ = 12						; size = 4
_rMin$ = 16						; size = 4
_rMax$ = 20						; size = 4
_rNeMin$ = 24						; size = 4
_rNeMax$ = 28						; size = 4
_aaMode$ = 32						; size = 4
_tmpStrpole$ = 36					; size = 4
?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z PROC		; HudClass::DrawDLZSymbol
; _this$ = ecx

; 1401 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1402 : 	float yOffset;
; 1403 : 	char wezStr[12];
; 1404 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1405 : 
; 1406 : 
; 1407 :    // Clamp in place
; 1408 :    rMin = min (rMin, 1.0F);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _rMin$[ebp]
	jbe	SHORT $LN27@DrawDLZSym
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR tv67[ebp], xmm0
	jmp	SHORT $LN28@DrawDLZSym
$LN27@DrawDLZSym:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv67[ebp], xmm0
$LN28@DrawDLZSym:
	movss	xmm0, DWORD PTR tv67[ebp]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 1409 :    rMax = min (rMax, 1.0F);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	jbe	SHORT $LN29@DrawDLZSym
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN30@DrawDLZSym
$LN29@DrawDLZSym:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv69[ebp], xmm0
$LN30@DrawDLZSym:
	movss	xmm0, DWORD PTR tv69[ebp]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1410 :    if(g_bnewAMRAAMdlz)

	movzx	eax, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	eax, eax
	je	SHORT $LN24@DrawDLZSym

; 1411 :    {
; 1412 : 		rNeMin = min (rMin, 1.0F);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _rMin$[ebp]
	jbe	SHORT $LN31@DrawDLZSym
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN32@DrawDLZSym
$LN31@DrawDLZSym:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv73[ebp], xmm0
$LN32@DrawDLZSym:
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR _rNeMin$[ebp], xmm0

; 1413 :    }
; 1414 :    else

	jmp	SHORT $LN23@DrawDLZSym
$LN24@DrawDLZSym:

; 1415 :    {
; 1416 : 	   rNeMin = min (rNeMin, 1.0F);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _rNeMin$[ebp]
	jbe	SHORT $LN33@DrawDLZSym
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN34@DrawDLZSym
$LN33@DrawDLZSym:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv75[ebp], xmm0
$LN34@DrawDLZSym:
	movss	xmm0, DWORD PTR tv75[ebp]
	movss	DWORD PTR _rNeMin$[ebp], xmm0
$LN23@DrawDLZSym:

; 1417 :    }
; 1418 :    rNeMax = min (rNeMax, 1.0F);

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _rNeMax$[ebp]
	jbe	SHORT $LN35@DrawDLZSym
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	movss	DWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN36@DrawDLZSym
$LN35@DrawDLZSym:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv77[ebp], xmm0
$LN36@DrawDLZSym:
	movss	xmm0, DWORD PTR tv77[ebp]
	movss	DWORD PTR _rNeMax$[ebp], xmm0

; 1419 : 
; 1420 :    sprintf (wezStr, "%.0f", FCC->missileWEZDisplayRange * FT_TO_NM);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+312]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	eax, DWORD PTR _wezStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1421 :    ShiAssert (strlen(wezStr) < sizeof(wezStr));
; 1422 :    yOffset = hudWinY[DLZ_WINDOW] + percentRange * hudWinHeight[DLZ_WINDOW];

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 1423 :    if(g_bnewAMRAAMdlz)

	movzx	eax, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	eax, eax
	je	$LN22@DrawDLZSym

; 1424 :    {
; 1425 : 	   if (playerAC->Sms->curWeaponType == wtAim120)  //JPG 26 Jun 04 - ONLY for AIM120, or it screws the aim9 up

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [ecx+940]
	cmp	DWORD PTR [edx+148], 2
	jne	$LN21@DrawDLZSym

; 1426 : 		{
; 1427 : 			if(yOffset > (1.25F * (rMax * hudWinHeight[DLZ_WINDOW])))

	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3fa00000
	movss	xmm1, DWORD PTR _yOffset$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN20@DrawDLZSym

; 1428 : 			{	
; 1429 : 				display->TextCenter (hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW]*0.5F,
; 1430 : 				hudWinY[DLZ_WINDOW] + hudWinHeight[DLZ_WINDOW] + 1.2F * display->TextHeight(),
; 1431 : 				wezStr);

	push	0
	lea	ecx, DWORD PTR _wezStr$[ebp]
	push	ecx
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+88]
	movss	DWORD PTR tv1326[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv892[ebp]
	movss	xmm0, DWORD PTR tv892[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR tv1326[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN20@DrawDLZSym:

; 1432 : 			}
; 1433 : 		}
; 1434 : 	   else

	jmp	$LN19@DrawDLZSym
$LN21@DrawDLZSym:

; 1435 : 	   {
; 1436 : 		   display->TextCenter (hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW]*0.5F,
; 1437 : 			hudWinY[DLZ_WINDOW] + hudWinHeight[DLZ_WINDOW] + 1.2F * display->TextHeight(),
; 1438 : 			wezStr);

	push	0
	lea	eax, DWORD PTR _wezStr$[ebp]
	push	eax
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+88]
	movss	DWORD PTR tv1328[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv913[ebp]
	movss	xmm0, DWORD PTR tv913[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR tv1328[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN19@DrawDLZSym:

; 1439 : 	   }
; 1440 :    }
; 1441 :    else

	jmp	$LN18@DrawDLZSym
$LN22@DrawDLZSym:

; 1442 :    {
; 1443 : 	   display->TextCenter (hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW]*0.5F,
; 1444 : 		hudWinY[DLZ_WINDOW] + hudWinHeight[DLZ_WINDOW] + 1.2F * display->TextHeight(),
; 1445 : 		wezStr);

	push	0
	lea	ecx, DWORD PTR _wezStr$[ebp]
	push	ecx
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+88]
	movss	DWORD PTR tv1330[ebp], xmm0
	call	eax
	fstp	DWORD PTR tv934[ebp]
	movss	xmm0, DWORD PTR tv934[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR tv1330[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN18@DrawDLZSym:

; 1446 :    }
; 1447 :    display->Line ( hudWinX[DLZ_WINDOW],   //JPG 26 Jun 04 - Zero range tick mark in DLZ for all missiles
; 1448 : 				hudWinY[DLZ_WINDOW] + 0.0F * hudWinHeight[DLZ_WINDOW],
; 1449 : 				hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1450 : 				hudWinY[DLZ_WINDOW] + 0.0F * hudWinHeight[DLZ_WINDOW]);

	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@00000000
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1451 :    if(g_bnewAMRAAMdlz)

	movzx	ecx, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	ecx, ecx
	je	$LN17@DrawDLZSym

; 1452 :    {
; 1453 : 	   if (playerAC->Sms->curWeaponType == wtAim120) //JPG Only for AIM120 type

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+940]
	cmp	DWORD PTR [eax+148], 2
	jne	$LN16@DrawDLZSym

; 1454 : 	   {
; 1455 : 			if(yOffset > (1.25F * (rMax * hudWinHeight[DLZ_WINDOW])))

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3fa00000
	movss	xmm1, DWORD PTR _yOffset$[ebp]
	comiss	xmm1, xmm0
	jbe	$LN15@DrawDLZSym

; 1456 : 			{
; 1457 : 				display->Line ( hudWinX[DLZ_WINDOW],   //JPG 26 Jun 04 - Upper range tick mark for new AMRAAM DLZ only if tgt is 125% of Raero
; 1458 : 					hudWinY[DLZ_WINDOW] + 1.05F * hudWinHeight[DLZ_WINDOW],  // or else it is not drawn
; 1459 : 					hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1460 : 					hudWinY[DLZ_WINDOW] + 1.05F * hudWinHeight[DLZ_WINDOW]);

	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN15@DrawDLZSym:

; 1461 : 			}
; 1462 : 	   }
; 1463 : 	   else

	jmp	$LN14@DrawDLZSym
$LN16@DrawDLZSym:

; 1464 : 		   display->Line ( hudWinX[DLZ_WINDOW],   //JPG 26 Jun 04 - Upper range tick mark for DLZ for all other AA missiles
; 1465 : 					hudWinY[DLZ_WINDOW] + 1.05F * hudWinHeight[DLZ_WINDOW],
; 1466 : 					hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1467 : 					hudWinY[DLZ_WINDOW] + 1.05F * hudWinHeight[DLZ_WINDOW]);

	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN14@DrawDLZSym:

; 1468 :    }
; 1469 :    else

	jmp	$LN13@DrawDLZSym
$LN17@DrawDLZSym:

; 1470 :    {
; 1471 : 	   display->Line ( hudWinX[DLZ_WINDOW],   //JPG 26 Jun 04 - Upper range tick mark for DLZ for when newAMRAAM is false
; 1472 : 					hudWinY[DLZ_WINDOW] + 1.05F * hudWinHeight[DLZ_WINDOW],
; 1473 : 					hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1474 : 					hudWinY[DLZ_WINDOW] + 1.05F * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR __real@3f866666
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN13@DrawDLZSym:

; 1475 :    }
; 1476 : 
; 1477 : 
; 1478 :    // Draw the symbol
; 1479 : 
; 1480 :    // Rmin/RPI
; 1481 :    
; 1482 :    if(g_bnewAMRAAMdlz) //Note: "rMax" is now RPI in the new DLZ, which is 75% of rMax

	movzx	ecx, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	ecx, ecx
	je	$LN12@DrawDLZSym

; 1483 :    {
; 1484 : 	   if (playerAC->Sms->curWeaponType == wtAim120)

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+940]
	cmp	DWORD PTR [eax+148], 2
	jne	$LN11@DrawDLZSym

; 1485 : 		{
; 1486 : 			display->Line (
; 1487 : 				hudWinX[DLZ_WINDOW],
; 1488 : 				hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW],
; 1489 : 				hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1490 : 				hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW]);	

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1491 : 			display->Line (
; 1492 : 				hudWinX[DLZ_WINDOW],
; 1493 : 				hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW],
; 1494 : 				hudWinX[DLZ_WINDOW],
; 1495 : 				hudWinY[DLZ_WINDOW] + (rMax * .75F) * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1496 : 			display->Line (
; 1497 : 				hudWinX[DLZ_WINDOW],
; 1498 : 				hudWinY[DLZ_WINDOW] + (rMax * .75F) * hudWinHeight[DLZ_WINDOW],
; 1499 : 				hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1500 : 				hudWinY[DLZ_WINDOW] + (rMax * .75F) * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3f400000
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1501 : 		}
; 1502 : 	   else

	jmp	$LN10@DrawDLZSym
$LN11@DrawDLZSym:

; 1503 : 		{
; 1504 : 		   display->Line (
; 1505 : 				hudWinX[DLZ_WINDOW],
; 1506 : 				hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW],
; 1507 : 				hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1508 : 				hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1509 : 		   display->Line (
; 1510 : 				hudWinX[DLZ_WINDOW],
; 1511 : 				hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW],
; 1512 : 				hudWinX[DLZ_WINDOW],
; 1513 : 				hudWinY[DLZ_WINDOW] + rMax * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1514 : 		   display->Line (
; 1515 : 				hudWinX[DLZ_WINDOW],
; 1516 : 				hudWinY[DLZ_WINDOW] + rMax * hudWinHeight[DLZ_WINDOW],
; 1517 : 				hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1518 : 				hudWinY[DLZ_WINDOW] + rMax * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN10@DrawDLZSym:

; 1519 : 		}
; 1520 :    }
; 1521 :    else  // Rmin/Rmax - The older DLZ

	jmp	$LN9@DrawDLZSym
$LN12@DrawDLZSym:

; 1522 :    {
; 1523 : 	   display->Line (
; 1524 : 			hudWinX[DLZ_WINDOW],
; 1525 : 			hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW],
; 1526 : 			hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1527 : 			hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1528 : 	   display->Line (
; 1529 : 			hudWinX[DLZ_WINDOW],
; 1530 : 			hudWinY[DLZ_WINDOW] + rMin * hudWinHeight[DLZ_WINDOW],
; 1531 : 			hudWinX[DLZ_WINDOW],
; 1532 : 			hudWinY[DLZ_WINDOW] + rMax * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1533 : 	   display->Line (
; 1534 : 			hudWinX[DLZ_WINDOW],
; 1535 : 			hudWinY[DLZ_WINDOW] + rMax * hudWinHeight[DLZ_WINDOW],
; 1536 : 			hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1537 : 			hudWinY[DLZ_WINDOW] + rMax * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN9@DrawDLZSym:

; 1538 :    }
; 1539 : 
; 1540 :    // Range Caret
; 1541 :  //  yOffset = hudWinY[DLZ_WINDOW] + percentRange * hudWinHeight[DLZ_WINDOW];
; 1542 : 
; 1543 :    display->Line (hudWinX[DLZ_WINDOW], yOffset,
; 1544 :       hudWinX[DLZ_WINDOW] - 0.03F, yOffset + 0.03F);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	subss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1545 :    display->Line (hudWinX[DLZ_WINDOW], yOffset,
; 1546 :       hudWinX[DLZ_WINDOW] - 0.03F, yOffset - 0.03F);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	subss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	subss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1547 : 
; 1548 :    display->TextRight (hudWinX[DLZ_WINDOW] - 0.035F, yOffset + 0.03F, tmpStr);

	push	0
	mov	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	subss	xmm0, DWORD PTR __real@3d0f5c29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+60]
	call	edx

; 1549 :    //if (tmpStrpole)
; 1550 :    if(g_bnewAMRAAMdlz)

	movzx	eax, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	eax, eax
	je	SHORT $LN7@DrawDLZSym

; 1551 :    {
; 1552 : 		if(yOffset < (1.25F * (rMax * hudWinHeight[DLZ_WINDOW])))

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3fa00000
	comiss	xmm0, DWORD PTR _yOffset$[ebp]
	jbe	SHORT $LN7@DrawDLZSym

; 1553 : 		{
; 1554 : 			display->TextRight (hudWinX[DLZ_WINDOW] - 0.035F, yOffset - 0.03F, tmpStrpole);//me123

	push	0
	mov	edx, DWORD PTR _tmpStrpole$[ebp]
	push	edx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	subss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	subss	xmm0, DWORD PTR __real@3d0f5c29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+60]
	call	eax
$LN7@DrawDLZSym:

; 1555 : 	   //   display->TextRight (hudWinX[DLZ_WINDOW] - 0.035F, yOffset- display->TextHeight(), tmpStrpole);//me123
; 1556 : 		}
; 1557 : 
; 1558 : 	}
; 1559 :       // No Escape Zone
; 1560 :    if ( aaMode )

	cmp	DWORD PTR _aaMode$[ebp], 0
	je	$LN6@DrawDLZSym

; 1561 :    {
; 1562 : 	   display->Line (
; 1563 : 		  hudWinX[DLZ_WINDOW],
; 1564 : 		  hudWinY[DLZ_WINDOW] + rNeMin * hudWinHeight[DLZ_WINDOW],
; 1565 : 		  hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1566 : 		  hudWinY[DLZ_WINDOW] + rNeMin * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1567 : 	   display->Line (
; 1568 : 		  hudWinX[DLZ_WINDOW],
; 1569 : 		  hudWinY[DLZ_WINDOW] + rNeMax * hudWinHeight[DLZ_WINDOW],
; 1570 : 		  hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1571 : 		  hudWinY[DLZ_WINDOW] + rNeMax * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1572 : 	   display->Line (
; 1573 : 		  hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1574 : 		  hudWinY[DLZ_WINDOW] + rNeMin * hudWinHeight[DLZ_WINDOW],
; 1575 : 		  hudWinX[DLZ_WINDOW] + hudWinWidth[DLZ_WINDOW],
; 1576 : 		  hudWinY[DLZ_WINDOW] + rNeMax * hudWinHeight[DLZ_WINDOW]);

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN6@DrawDLZSym:

; 1577 :    }
; 1578 : 
; 1579 :    //TJL 01/26/04 ShootCue
; 1580 : 		if ((percentRange < rNeMax) && (percentRange > rNeMin))

	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	comiss	xmm0, DWORD PTR _percentRange$[ebp]
	jbe	SHORT $LN5@DrawDLZSym
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	comiss	xmm0, DWORD PTR _rNeMin$[ebp]
	jbe	SHORT $LN5@DrawDLZSym

; 1581 : 		{
; 1582 : 			shootCue = 1;

	mov	BYTE PTR ?shootCue@@3_NA, 1		; shootCue

; 1583 : 		}
; 1584 : 		else

	jmp	SHORT $LN4@DrawDLZSym
$LN5@DrawDLZSym:

; 1585 : 		{
; 1586 : 			shootCue = 0;

	mov	BYTE PTR ?shootCue@@3_NA, 0		; shootCue
$LN4@DrawDLZSym:

; 1587 : 		}
; 1588 : 
; 1589 : 	//end
; 1590 : 
; 1591 : 
; 1592 :    // In easy mode we generate a SHOOT prompt when the target is in the no escape zone
; 1593 :    if (PlayerOptions.GetAvionicsType() == ATEasy)

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	test	eax, eax
	jne	SHORT $LN1@DrawDLZSym

; 1594 :    {
; 1595 : 	   if (flash) {

	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN1@DrawDLZSym

; 1596 : 		   if ((percentRange < rNeMax) && (percentRange > rNeMin)) {

	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	comiss	xmm0, DWORD PTR _percentRange$[ebp]
	jbe	SHORT $LN1@DrawDLZSym
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	comiss	xmm0, DWORD PTR _rNeMin$[ebp]
	jbe	SHORT $LN1@DrawDLZSym

; 1597 : 			   DrawShootCue(display);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?DrawShootCue@@YAXPAVVirtualDisplay@@@Z	; DrawShootCue
	add	esp, 4
$LN1@DrawDLZSym:

; 1598 : 		   }
; 1599 : 	   }
; 1600 :    }
; 1601 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ENDP		; HudClass::DrawDLZSymbol
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv366 = -92						; size = 4
tv396 = -88						; size = 4
tv360 = -84						; size = 4
tv332 = -80						; size = 4
tv342 = -76						; size = 4
tv380 = -72						; size = 4
tv337 = -68						; size = 4
tv429 = -64						; size = 4
tv372 = -60						; size = 4
_this$ = -56						; size = 4
_b$ = -52						; size = 12
_c$ = -40						; size = 12
_a$ = -28						; size = 12
_d$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?CheckBreakX@HudClass@@AAEXXZ PROC			; HudClass::CheckBreakX
; _this$ = ecx

; 1159 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1160 : 	vector a, b, c, d;
; 1161 : 
; 1162 : 	// Quit now if nothing to do
; 1163 : 	if (!targetPtr || Warnflash)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN2@CheckBreak
	cmp	DWORD PTR ?Warnflash@HudClass@@0HA, 0	; HudClass::Warnflash
	je	SHORT $LN3@CheckBreak
$LN2@CheckBreak:

; 1164 : 		return;

	jmp	$LN4@CheckBreak
$LN3@CheckBreak:

; 1165 : 
; 1166 :    // Check the next 5 seconds.
; 1167 :    // Note, change sign on rates to project into the future
; 1168 :    a.x = ownship->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _a$[ebp]

; 1169 :    a.y = ownship->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _a$[ebp+4]

; 1170 :    a.z = ownship->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _a$[ebp+8]

; 1171 :    b.x = ownship->XDelta() * SimLibMajorFrameTime * -5.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv332[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR _b$[ebp], xmm0

; 1172 :    b.y = ownship->YDelta() * SimLibMajorFrameTime * -5.0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv337[ebp]
	movss	xmm0, DWORD PTR tv337[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR _b$[ebp+4], xmm0

; 1173 :    b.z = ownship->ZDelta() * SimLibMajorFrameTime * -5.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv342[ebp]
	movss	xmm0, DWORD PTR tv342[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR _b$[ebp+8], xmm0

; 1174 :    c.x = targetPtr->BaseData()->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _c$[ebp]

; 1175 :    c.y = targetPtr->BaseData()->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _c$[ebp+4]

; 1176 :    c.z = targetPtr->BaseData()->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _c$[ebp+8]

; 1177 :    d.x = (targetPtr->BaseData()->XDelta() + 0.5F) * SimLibMajorFrameTime * -5.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	fstp	DWORD PTR tv360[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR _d$[ebp], xmm0

; 1178 :    d.y = targetPtr->BaseData()->YDelta() * SimLibMajorFrameTime * -5.0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	fstp	DWORD PTR tv366[ebp]
	movss	xmm0, DWORD PTR tv366[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR _d$[ebp+4], xmm0

; 1179 :    d.z = targetPtr->BaseData()->ZDelta() * SimLibMajorFrameTime * -5.0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	fstp	DWORD PTR tv372[ebp]
	movss	xmm0, DWORD PTR tv372[ebp]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mulss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR _d$[ebp+8], xmm0

; 1180 : 
; 1181 :    if (FindMinDistance(&a, &b, &c, &d) < 500.0F)

	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	?FindMinDistance@@YAMPAUvector@@000@Z	; FindMinDistance
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv380[ebp]
	movss	xmm0, DWORD PTR __real@43fa0000
	comiss	xmm0, DWORD PTR tv380[ebp]
	jbe	$LN1@CheckBreak

; 1182 :    {
; 1183 :       display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1184 :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F);

	mov	edx, 4
	imul	edx, 44					; 0000002cH
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1185 :       display->AdjustOriginInViewport (0.0F, MISSILE_RETICLE_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv396[ebp]
	movss	xmm0, DWORD PTR tv396[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1186 :       display->Line (0.4F,  0.4F, -0.4F, -0.4F);

	push	ecx
	movss	xmm0, DWORD PTR __real@becccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@becccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1187 :       display->Line (0.4F, -0.4F, -0.4F,  0.4F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@becccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@becccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1188 :       display->AdjustOriginInViewport (0.0F, -MISSILE_RETICLE_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv429[ebp]
	movss	xmm0, DWORD PTR tv429[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1189 :       display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1190 :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN1@CheckBreak:
$LN4@CheckBreak:

; 1191 :    }
; 1192 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckBreakX@HudClass@@AAEXXZ ENDP			; HudClass::CheckBreakX
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv627 = -152						; size = 8
tv811 = -144						; size = 4
tv525 = -140						; size = 4
tv582 = -136						; size = 4
tv799 = -132						; size = 4
tv639 = -128						; size = 4
tv784 = -124						; size = 4
tv565 = -120						; size = 4
tv753 = -116						; size = 4
tv645 = -112						; size = 4
tv747 = -108						; size = 4
tv813 = -104						; size = 4
tv686 = -100						; size = 4
tv572 = -96						; size = 4
tv680 = -92						; size = 4
tv558 = -88						; size = 4
tv662 = -84						; size = 4
tv655 = -80						; size = 4
tv538 = -76						; size = 4
_rz$ = -72						; size = 4
tv384 = -68						; size = 4
_yCenter$ = -64						; size = 4
tv386 = -60						; size = 4
tv390 = -56						; size = 4
tv383 = -52						; size = 4
tv389 = -48						; size = 4
tv380 = -44						; size = 4
_rMax$ = -40						; size = 4
_ry$ = -36						; size = 4
_rx$ = -32						; size = 4
_az$ = -28						; size = 4
_el$ = -24						; size = 4
_this$ = -20						; size = 4
_collPoint$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawAim120ASE@HudClass@@AAEXXZ PROC			; HudClass::DrawAim120ASE
; _this$ = ecx

; 1066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1067 : 	float rx, ry, rz;
; 1068 : 	float az, el;
; 1069 : 	vector collPoint;
; 1070 : 	float yCenter;
; 1071 : 	float rMax;
; 1072 : 
; 1073 :    yCenter = hudWinY[BORESIGHT_CROSS_WINDOW] +
; 1074 : 			 hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F+ MISSILE_RETICLE_OFFSET;

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	xmm1, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv811[ebp], xmm0
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv525[ebp]
	movss	xmm0, DWORD PTR tv811[ebp]
	addss	xmm0, DWORD PTR tv525[ebp]
	movss	DWORD PTR _yCenter$[ebp], xmm0

; 1075 : 
; 1076 :    //MI possible CTD
; 1077 :    if(!FCC)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN11@DrawAim120

; 1078 : 	   return;

	jmp	$LN12@DrawAim120
$LN11@DrawAim120:

; 1079 :    display->AdjustOriginInViewport (0.0F, yCenter );

	push	ecx
	movss	xmm0, DWORD PTR _yCenter$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1080 :    display->AdjustOriginInViewport (0.0F, MISSILE_RETICLE_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv538[ebp]
	movss	xmm0, DWORD PTR tv538[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1081 :    // Add missile avg speed to collision calc
; 1082 :    if (targetPtr->BaseData()->IsSim() && FindCollisionPoint ((SimBaseClass*)targetPtr->BaseData(), ownship, &collPoint, 2500.0F))//me123 from speed 1500

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN10@DrawAim120
	push	ecx
	movss	xmm0, DWORD PTR __real@451c4000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _collPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	call	?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z ; FindCollisionPoint
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN10@DrawAim120

; 1083 :    {
; 1084 : 	   // edg: fix ASE.  Looks like collision point is returned in World Coords.  We need to
; 1085 : 	   // make it relative to ownship so subtract out ownship pos 1st....
; 1086 : 		rx =    collPoint.x -= ownship->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv558[ebp]
	movss	xmm0, DWORD PTR _collPoint$[ebp]
	subss	xmm0, DWORD PTR tv558[ebp]
	movss	DWORD PTR _collPoint$[ebp], xmm0
	movss	xmm0, DWORD PTR _collPoint$[ebp]
	movss	DWORD PTR _rx$[ebp], xmm0

; 1087 : 		ry =    collPoint.y -= ownship->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv565[ebp]
	movss	xmm0, DWORD PTR _collPoint$[ebp+4]
	subss	xmm0, DWORD PTR tv565[ebp]
	movss	DWORD PTR _collPoint$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _collPoint$[ebp+4]
	movss	DWORD PTR _ry$[ebp], xmm0

; 1088 : 		rz =    collPoint.z -= ownship->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv572[ebp]
	movss	xmm0, DWORD PTR _collPoint$[ebp+8]
	subss	xmm0, DWORD PTR tv572[ebp]
	movss	DWORD PTR _collPoint$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _collPoint$[ebp+8]
	movss	DWORD PTR _rz$[ebp], xmm0

; 1089 : 
; 1090 : 		collPoint.z -= targetData->range/5.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR _collPoint$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _collPoint$[ebp+8], xmm1

; 1091 : 		collPoint.z -= (ownship->ZPos()+ 50000)*(targetData->range*FT_TO_NM /40.0f);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv582[ebp]
	movss	xmm0, DWORD PTR tv582[ebp]
	addss	xmm0, DWORD PTR __real@47435000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm1, DWORD PTR [edx+44]
	mulss	xmm1, DWORD PTR __real@392c987a
	divss	xmm1, DWORD PTR __real@42200000
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _collPoint$[ebp+8]
	subss	xmm1, xmm0
	movss	DWORD PTR _collPoint$[ebp+8], xmm1

; 1092 : 
; 1093 : 		rx =	ownship->dmx[0][0]*collPoint.x +
; 1094 : 				ownship->dmx[0][1]*collPoint.y +
; 1095 : 				ownship->dmx[0][2]*collPoint.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _collPoint$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _collPoint$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _collPoint$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 1096 : 		ry =	ownship->dmx[1][0]*collPoint.x +
; 1097 : 				ownship->dmx[1][1]*collPoint.y +
; 1098 : 				ownship->dmx[1][2]*collPoint.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	shl	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _collPoint$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _collPoint$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	shl	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _collPoint$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 1099 : 		rz =	ownship->dmx[2][0]*collPoint.x +
; 1100 : 				ownship->dmx[2][1]*collPoint.y +
; 1101 : 				ownship->dmx[2][2]*collPoint.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	shl	edx, 1
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	mulss	xmm0, DWORD PTR _collPoint$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	shl	ecx, 1
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR _collPoint$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	shl	eax, 1
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm1, DWORD PTR [ecx+edx]
	mulss	xmm1, DWORD PTR _collPoint$[ebp+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _rz$[ebp], xmm0

; 1102 : 
; 1103 : 	  
; 1104 :       az = RadToHudUnitsX(((float)atan2 (ry,rx)));

	cvtss2sd xmm0, DWORD PTR _rx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _ry$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv627[ebp]
	movsd	xmm0, QWORD PTR tv627[ebp]
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _az$[ebp]

; 1105 : 	  az = az /6.0f;

	movss	xmm0, DWORD PTR _az$[ebp]
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _az$[ebp], xmm0

; 1106 :       el = RadToHudUnitsY(((float)atan ((-rz)/(float)sqrt(rx*rx+ry*ry+.0001f))));

	movss	xmm0, DWORD PTR _rz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _rx$[ebp]
	mulss	xmm1, DWORD PTR _rx$[ebp]
	movss	xmm2, DWORD PTR _ry$[ebp]
	mulss	xmm2, DWORD PTR _ry$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@38d1b717
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv813[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv639[ebp]
	movss	xmm0, DWORD PTR tv813[ebp]
	divss	xmm0, DWORD PTR tv639[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv645[ebp]
	movss	xmm0, DWORD PTR tv645[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR _el$[ebp]

; 1107 : 	  el = el /6.0f;

	movss	xmm0, DWORD PTR _el$[ebp]
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR _el$[ebp], xmm0

; 1108 : //	  el -= MISSILE_RETICLE_OFFSET;
; 1109 :       if (fabs (az) < 0.9F && fabs (el  /*+ yCenter*/) < 0.9F)

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv655[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv655[ebp]
	jbe	$LN9@DrawAim120
	push	ecx
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv662[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv662[ebp]
	jbe	$LN9@DrawAim120

; 1110 :       {
; 1111 :          display->Circle (az, el , MISSILE_ASE_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 1112 : 		 rMax   = FCC->missileRMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+288]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1113 : //		 if ((float)fabs(FCC->missileSeekerAz) > AIM120ASECX || (float)fabs(FCC->missileSeekerEl) > AIM120ASECX || targetData->range > rMax)
; 1114 : 		 if ((float)fabs(az) >= 0.9f || (float)fabs(el) >= 0.9f || targetData->range > rMax)

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv680[ebp]
	movss	xmm0, DWORD PTR tv680[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jae	SHORT $LN7@DrawAim120
	push	ecx
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv686[ebp]
	movss	xmm0, DWORD PTR tv686[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jae	SHORT $LN7@DrawAim120
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	jbe	$LN8@DrawAim120
$LN7@DrawAim120:

; 1115 : 		 {
; 1116 : 			// Display ASEC X
; 1117 : 			display->Line(az - 0.6f*MISSILE_ASE_SIZE, el - 0.6f*MISSILE_ASE_SIZE,
; 1118 : 				          az + 0.6f*MISSILE_ASE_SIZE, el + 0.6f*MISSILE_ASE_SIZE);

	movss	xmm0, DWORD PTR _el$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _el$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1119 : 			display->Line(az - 0.6f*MISSILE_ASE_SIZE, el + 0.6f*MISSILE_ASE_SIZE,
; 1120 : 				          az + 0.6f*MISSILE_ASE_SIZE, el - 0.6f*MISSILE_ASE_SIZE);

	movss	xmm0, DWORD PTR _el$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _el$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN8@DrawAim120:

; 1121 : 		 }
; 1122 :       }

	jmp	$LN4@DrawAim120
$LN9@DrawAim120:

; 1123 :       else if (flash)

	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	$LN4@DrawAim120

; 1124 :       {
; 1125 : 		 az = max( min( az, 0.9f ), -0.9f );

	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR _az$[ebp]
	jbe	SHORT $LN14@DrawAim120
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR tv380[ebp], xmm0
	jmp	SHORT $LN15@DrawAim120
$LN14@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR tv380[ebp], xmm0
$LN15@DrawAim120:
	movss	xmm0, DWORD PTR tv380[ebp]
	comiss	xmm0, DWORD PTR __real@bf666666
	jbe	SHORT $LN18@DrawAim120
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR _az$[ebp]
	jbe	SHORT $LN16@DrawAim120
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR tv383[ebp], xmm0
	jmp	SHORT $LN17@DrawAim120
$LN16@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR tv383[ebp], xmm0
$LN17@DrawAim120:
	movss	xmm0, DWORD PTR tv383[ebp]
	movss	DWORD PTR tv384[ebp], xmm0
	jmp	SHORT $LN19@DrawAim120
$LN18@DrawAim120:
	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR tv384[ebp], xmm0
$LN19@DrawAim120:
	movss	xmm0, DWORD PTR tv384[ebp]
	movss	DWORD PTR _az$[ebp], xmm0

; 1126 : 		 el = max( min( el, 0.9f ), -0.9f );

	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR _el$[ebp]
	jbe	SHORT $LN20@DrawAim120
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR tv386[ebp], xmm0
	jmp	SHORT $LN21@DrawAim120
$LN20@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR tv386[ebp], xmm0
$LN21@DrawAim120:
	movss	xmm0, DWORD PTR tv386[ebp]
	comiss	xmm0, DWORD PTR __real@bf666666
	jbe	SHORT $LN24@DrawAim120
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR _el$[ebp]
	jbe	SHORT $LN22@DrawAim120
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR tv389[ebp], xmm0
	jmp	SHORT $LN23@DrawAim120
$LN22@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR tv389[ebp], xmm0
$LN23@DrawAim120:
	movss	xmm0, DWORD PTR tv389[ebp]
	movss	DWORD PTR tv390[ebp], xmm0
	jmp	SHORT $LN25@DrawAim120
$LN24@DrawAim120:
	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR tv390[ebp], xmm0
$LN25@DrawAim120:
	movss	xmm0, DWORD PTR tv390[ebp]
	movss	DWORD PTR _el$[ebp], xmm0

; 1127 : /*		 el +=  yCenter; 
; 1128 : 		 if ( el < -0.9f )
; 1129 : 			 el = -0.9f - yCenter;
; 1130 : 		 else if ( el > 0.9f )
; 1131 : 			 el = 0.9f - yCenter;
; 1132 : 		 else
; 1133 : 			 el -= yCenter;
; 1134 : */
; 1135 :          display->Circle (az, el, MISSILE_ASE_SIZE);

	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 1136 : 		 rMax   = FCC->missileRMax;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+288]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 1137 : //		 if ((float)fabs(FCC->missileSeekerAz) > AIM120ASECX || (float)fabs(FCC->missileSeekerEl) > AIM120ASECX || targetData->range > rMax)
; 1138 : 		 if ((float)fabs(az) >= 0.9f || (float)fabs(el) >= 0.9f || targetData->range > rMax)

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv747[ebp]
	movss	xmm0, DWORD PTR tv747[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jae	SHORT $LN3@DrawAim120
	push	ecx
	movss	xmm0, DWORD PTR _el$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv753[ebp]
	movss	xmm0, DWORD PTR tv753[ebp]
	comiss	xmm0, DWORD PTR __real@3f666666
	jae	SHORT $LN3@DrawAim120
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	jbe	$LN4@DrawAim120
$LN3@DrawAim120:

; 1139 : 
; 1140 : 		 {
; 1141 : 			// Display ASEC X
; 1142 : 			display->Line(az - 0.6f*MISSILE_ASE_SIZE, el - 0.6f*MISSILE_ASE_SIZE,
; 1143 : 				          az + 0.6f*MISSILE_ASE_SIZE, el + 0.6f*MISSILE_ASE_SIZE);

	movss	xmm0, DWORD PTR _el$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _el$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1144 : 			display->Line(az - 0.6f*MISSILE_ASE_SIZE, el + 0.6f*MISSILE_ASE_SIZE,
; 1145 : 				          az + 0.6f*MISSILE_ASE_SIZE, el - 0.6f*MISSILE_ASE_SIZE);

	movss	xmm0, DWORD PTR _el$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _el$[ebp]
	addss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _az$[ebp]
	subss	xmm0, DWORD PTR __real@3c9374bd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN4@DrawAim120:

; 1146 : 		 }
; 1147 :       }
; 1148 :    }

	jmp	SHORT $LN1@DrawAim120
$LN10@DrawAim120:

; 1149 :    else if (flash)

	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN1@DrawAim120

; 1150 :    {
; 1151 :       display->Circle (0.0F, MISSILE_RETICLE_OFFSET, MISSILE_ASE_SIZE); 

	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv784[ebp]
	movss	xmm0, DWORD PTR tv784[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN1@DrawAim120:

; 1152 :    }
; 1153 :    display->AdjustOriginInViewport (0.0F, -MISSILE_RETICLE_OFFSET);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv799[ebp]
	movss	xmm0, DWORD PTR tv799[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1154 :    display->AdjustOriginInViewport (0.0F, -yCenter );

	movss	xmm0, DWORD PTR _yCenter$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN12@DrawAim120:

; 1155 :  
; 1156 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAim120ASE@HudClass@@AAEXXZ ENDP			; HudClass::DrawAim120ASE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_rDot$ = -164						; size = 4
_playerAC$ = -160					; size = 4
tv182 = -156						; size = 4
tv326 = -152						; size = 4
tv275 = -148						; size = 4
tv183 = -144						; size = 4
tv217 = -140						; size = 4
tv392 = -136						; size = 4
tv572 = -132						; size = 4
tv322 = -128						; size = 4
tv571 = -124						; size = 4
tv231 = -120						; size = 4
tv558 = -116						; size = 4
tv393 = -112						; size = 4
tv531 = -108						; size = 4
tv389 = -104						; size = 4
tv530 = -100						; size = 4
tv169 = -96						; size = 4
tv517 = -92						; size = 4
tv276 = -88						; size = 4
tv479 = -84						; size = 4
tv262 = -80						; size = 4
tv427 = -76						; size = 4
tv230 = -72						; size = 4
tv426 = -68						; size = 4
tv423 = -64						; size = 4
tv325 = -60						; size = 4
_rNeMax$ = -56						; size = 4
_rNeMin$ = -52						; size = 4
_rMax$ = -48						; size = 4
_rMin$ = -44						; size = 4
_yOffset$ = -40						; size = 4
_percentRange$ = -36					; size = 4
_theRadar$ = -32					; size = 4
_this$ = -28						; size = 4
_tmpStrpole$ = -24					; size = 8
_tmpStr$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_dfgt$ = 8						; size = 1
?DrawAim120DLZ@HudClass@@AAEX_N@Z PROC			; HudClass::DrawAim120DLZ
; _this$ = ecx

; 893  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 	char tmpStr[12];
; 895  : 	char tmpStrpole[8];
; 896  : 	float percentRange;
; 897  : 	float yOffset, rDot;
; 898  : 	float rMax, rMin;
; 899  : 	float rNeMin, rNeMax;
; 900  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 901  : 	RadarDopplerClass* theRadar = (RadarDopplerClass*)FindSensor(playerAC, SensorClass::Radar);

	push	1
	mov	eax, DWORD PTR _playerAC$[ebp]
	push	eax
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$[ebp], eax

; 902  : 
; 903  :    if (FCC->missileTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movsx	eax, BYTE PTR [edx+192]
	test	eax, eax
	je	$LN18@DrawAim120

; 904  :    {
; 905  :       // Range Carat / Closure
; 906  :       rMax   = FCC->missileRMax;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+288]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 907  :       rMin   = FCC->missileRMin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+292]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 908  :       rNeMax = (FCC->missileRneMax); // Marco Edit -  * 0.70f);//me123 addet *0.70 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+296]
	movss	DWORD PTR _rNeMax$[ebp], xmm0

; 909  :       rNeMin = FCC->missileRneMin;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+300]
	movss	DWORD PTR _rNeMin$[ebp], xmm0

; 910  :       // JPO compare raw data first for ranging
; 911  :       if (targetData->range < rNeMin || targetData->range > rNeMax || flash)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	comiss	xmm0, DWORD PTR [ecx+44]
	ja	SHORT $LN30@DrawAim120
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _rNeMax$[ebp]
	ja	SHORT $LN30@DrawAim120
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN29@DrawAim120
$LN30@DrawAim120:

; 912  :       {
; 913  :          if (FCC->GetSubMode() == FireControlComputer::Aim120)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 6
	jne	SHORT $LN29@DrawAim120

; 914  :             DrawMissileReticle(FCC->Aim120ASECRadius(targetData->range), FALSE, TRUE);

	push	1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?Aim120ASECRadius@FireControlComputer@@QAEMM@Z ; FireControlComputer::Aim120ASECRadius
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle
$LN29@DrawAim120:

; 915  :       }
; 916  : 
; 917  :       if (targetData->range < rMin || targetData->range > rMax || flash && !dfgt)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	comiss	xmm0, DWORD PTR [eax+44]
	ja	SHORT $LN27@DrawAim120
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	ja	SHORT $LN27@DrawAim120
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN28@DrawAim120
	movzx	eax, BYTE PTR _dfgt$[ebp]
	test	eax, eax
	jne	SHORT $LN28@DrawAim120
$LN27@DrawAim120:

; 918  :       {
; 919  :          DrawAim120Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim120Diamond
$LN28@DrawAim120:

; 920  :       }
; 921  : 
; 922  :       percentRange = targetData->range / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 923  :       rDot = max ( min (-targetData->rangedot * FTPSEC_TO_KNOTS, 1500.0F), -1500.0F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN35@DrawAim120
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv169[ebp], xmm0
	jmp	SHORT $LN36@DrawAim120
$LN35@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv169[ebp], xmm0
$LN36@DrawAim120:
	movss	xmm0, DWORD PTR tv169[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	SHORT $LN39@DrawAim120
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN37@DrawAim120
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv182[ebp], xmm0
	jmp	SHORT $LN38@DrawAim120
$LN37@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv182[ebp], xmm0
$LN38@DrawAim120:
	movss	xmm0, DWORD PTR tv182[ebp]
	movss	DWORD PTR tv183[ebp], xmm0
	jmp	SHORT $LN40@DrawAim120
$LN39@DrawAim120:
	movss	xmm0, DWORD PTR __real@c4bb8000
	movss	DWORD PTR tv183[ebp], xmm0
$LN40@DrawAim120:
	movss	xmm0, DWORD PTR tv183[ebp]
	movss	DWORD PTR _rDot$[ebp], xmm0

; 924  :       sprintf (tmpStr, "%.0f", rDot);

	cvtss2sd xmm0, DWORD PTR _rDot$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 925  :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 926  : 	  
; 927  : 	  if (g_bnewAMRAAMdlz)

	movzx	edx, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	edx, edx
	je	$LN22@DrawAim120

; 928  : 	  {
; 929  : 			// Draw "A"/"F"-pole range for missile on the rail below closure (which is done above on line 2339)
; 930  : 			// "A" is not used to avoid confusion w/ AMRAAM active indications
; 931  : 			if(theRadar != NULL)

	cmp	DWORD PTR _theRadar$[ebp], 0
	je	$LN22@DrawAim120

; 932  : 			if (FCC->nextMissileImpactTime > 0.0F && theRadar->lockedTargetData != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+272]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN22@DrawAim120
	mov	edx, DWORD PTR _theRadar$[ebp]
	cmp	DWORD PTR [edx+176], 0
	je	$LN22@DrawAim120

; 933  : 	  		// assert(lockedTargetData != NULL);
; 934  : 			// assert(FCC != NULL);	  
; 935  : 			{
; 936  : 				if (FCC->nextMissileImpactTime > FCC->lastmissileActiveTime)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+272]
	comiss	xmm0, DWORD PTR [eax+276]
	jbe	$LN23@DrawAim120

; 937  : 				{
; 938  : 					sprintf (tmpStrpole, "%.0fM", (theRadar->lockedTargetData->range / 6076) - (( max ( min (-theRadar->lockedTargetData->rangedot * FTPSEC_TO_KNOTS, 1500.0F), -1500.0F)/6076 * (FCC->nextMissileImpactTime - FCC->lastmissileActiveTime) )));

	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN41@DrawAim120
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv217[ebp], xmm0
	jmp	SHORT $LN42@DrawAim120
$LN41@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv217[ebp], xmm0
$LN42@DrawAim120:
	movss	xmm0, DWORD PTR tv217[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	SHORT $LN45@DrawAim120
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@DrawAim120
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv230[ebp], xmm0
	jmp	SHORT $LN44@DrawAim120
$LN43@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv230[ebp], xmm0
$LN44@DrawAim120:
	movss	xmm0, DWORD PTR tv230[ebp]
	movss	DWORD PTR tv231[ebp], xmm0
	jmp	SHORT $LN46@DrawAim120
$LN45@DrawAim120:
	movss	xmm0, DWORD PTR __real@c4bb8000
	movss	DWORD PTR tv231[ebp], xmm0
$LN46@DrawAim120:
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+44]
	divss	xmm0, DWORD PTR __real@45bde000
	movss	xmm1, DWORD PTR tv231[ebp]
	divss	xmm1, DWORD PTR __real@45bde000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm2, DWORD PTR [eax+272]
	subss	xmm2, DWORD PTR [edx+276]
	mulss	xmm1, xmm2
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05JOALCFMH@?$CF?40fM?$AA@
	lea	eax, DWORD PTR _tmpStrpole$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 939  : 				}
; 940  : 				else

	jmp	$LN22@DrawAim120
$LN23@DrawAim120:

; 941  : 				{
; 942  : 				sprintf (tmpStrpole, "%.0fF", (theRadar->lockedTargetData->range / 6076) - (( max ( min (-theRadar->lockedTargetData->rangedot * FTPSEC_TO_KNOTS, 1500.0F), -1500.0F)/6076 * FCC->nextMissileImpactTime )));

	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN47@DrawAim120
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv262[ebp], xmm0
	jmp	SHORT $LN48@DrawAim120
$LN47@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv262[ebp], xmm0
$LN48@DrawAim120:
	movss	xmm0, DWORD PTR tv262[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	SHORT $LN51@DrawAim120
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN49@DrawAim120
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv275[ebp], xmm0
	jmp	SHORT $LN50@DrawAim120
$LN49@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv275[ebp], xmm0
$LN50@DrawAim120:
	movss	xmm0, DWORD PTR tv275[ebp]
	movss	DWORD PTR tv276[ebp], xmm0
	jmp	SHORT $LN52@DrawAim120
$LN51@DrawAim120:
	movss	xmm0, DWORD PTR __real@c4bb8000
	movss	DWORD PTR tv276[ebp], xmm0
$LN52@DrawAim120:
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+44]
	divss	xmm0, DWORD PTR __real@45bde000
	movss	xmm1, DWORD PTR tv276[ebp]
	divss	xmm1, DWORD PTR __real@45bde000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [eax+272]
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05HNPPPMAM@?$CF?40fF?$AA@
	lea	ecx, DWORD PTR _tmpStrpole$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN22@DrawAim120:

; 943  : 				}
; 944  : 				ShiAssert (strlen(tmpStrpole) < sizeof(tmpStrpole));
; 945  : 				//	display->TextRightVertical (leftEdge - 0.06F, yOffset - 0.09F, tmpStrpole);
; 946  : 			}
; 947  : 	  }
; 948  : 	  
; 949  :       // RNeMin/RNeMax scale
; 950  :       rNeMax /= FCC->missileWEZDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	divss	xmm0, DWORD PTR [eax+312]
	movss	DWORD PTR _rNeMax$[ebp], xmm0

; 951  :       rNeMin /= FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	divss	xmm0, DWORD PTR [edx+312]
	movss	DWORD PTR _rNeMin$[ebp], xmm0

; 952  :       rMin /= FCC->missileWEZDisplayRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 953  :       rMax /= FCC->missileWEZDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR _rMax$[ebp]
	divss	xmm0, DWORD PTR [eax+312]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 954  : 	  
; 955  : 	  if(g_bnewAMRAAMdlz)

	movzx	ecx, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	ecx, ecx
	je	SHORT $LN21@DrawAim120

; 956  : 	  {
; 957  : 			DrawDLZSymbol(percentRange, tmpStr, rMin, rMax, rNeMin, rNeMax, TRUE, tmpStrpole);  // JPG last one was NULL

	lea	edx, DWORD PTR _tmpStrpole$[ebp]
	push	edx
	push	1
	push	ecx
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol

; 958  : 	  }
; 959  : 	  else

	jmp	SHORT $LN20@DrawAim120
$LN21@DrawAim120:

; 960  : 	  {
; 961  : 		  DrawDLZSymbol(percentRange, tmpStr, rMin, rMax, rNeMin, rNeMax, TRUE,NULL);

	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol
$LN20@DrawAim120:

; 962  : 	  }
; 963  : 	  
; 964  : 	  if(g_bnewAMRAAMdlz)

	movzx	edx, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	edx, edx
	je	$LN19@DrawAim120

; 965  : 	  {
; 966  : 		  // Raero - Max Missile Kinematic Range
; 967  :      
; 968  : 			yOffset = rMax;

	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 969  : 			yOffset = min ( max ( 0.0F, yOffset), 1.0F);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _yOffset$[ebp]
	jbe	SHORT $LN53@DrawAim120
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv322[ebp], xmm0
	jmp	SHORT $LN54@DrawAim120
$LN53@DrawAim120:
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR tv322[ebp], xmm0
$LN54@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv322[ebp]
	jbe	SHORT $LN57@DrawAim120
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _yOffset$[ebp]
	jbe	SHORT $LN55@DrawAim120
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv325[ebp], xmm0
	jmp	SHORT $LN56@DrawAim120
$LN55@DrawAim120:
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR tv325[ebp], xmm0
$LN56@DrawAim120:
	movss	xmm0, DWORD PTR tv325[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	jmp	SHORT $LN58@DrawAim120
$LN57@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv326[ebp], xmm0
$LN58@DrawAim120:
	movss	xmm0, DWORD PTR tv326[ebp]
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 970  : 			yOffset = hudWinY[DLZ_WINDOW] + yOffset * hudWinHeight[DLZ_WINDOW];

	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 971  : 			display->Line (hudWinX[DLZ_WINDOW] + 0.03F, yOffset - 0.03F,
; 972  : 			hudWinX[DLZ_WINDOW] + 0.03F, yOffset + 0.035F);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR __real@3d0f5c29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	subss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 973  : 		//    yOffset = hudWinY[DLZ_WINDOW] + yOffset * hudWinHeight[DLZ_WINDOW] +
; 974  : 		//    hudWinHeight[DLZ_WINDOW];
; 975  : 	
; 976  : 			display->Line (hudWinX[DLZ_WINDOW], yOffset, hudWinX[DLZ_WINDOW] + 0.03F, yOffset + 0.03F);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 977  : 			display->Line (hudWinX[DLZ_WINDOW], yOffset, hudWinX[DLZ_WINDOW] + 0.03F, yOffset - 0.03F);

	movss	xmm0, DWORD PTR _yOffset$[ebp]
	subss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	addss	xmm0, DWORD PTR __real@3cf5c28f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 978  : 	  	  
; 979  : 		// Old AMRAAM active seeker range - kludge never worked right to begin with
; 980  : 		// Now Ropt - Max Launch Range. NOTE: KLUDGE :( Assumes optimum a/c steering and high quality termination criteria
; 981  : 			percentRange = (rMax * .85F);

	movss	xmm0, DWORD PTR _rMax$[ebp]
	mulss	xmm0, DWORD PTR __real@3f59999a
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 982  : 			percentRange = min ( max ( 0.0F, percentRange), 1.0F);

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _percentRange$[ebp]
	jbe	SHORT $LN59@DrawAim120
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv389[ebp], xmm0
	jmp	SHORT $LN60@DrawAim120
$LN59@DrawAim120:
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR tv389[ebp], xmm0
$LN60@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv389[ebp]
	jbe	SHORT $LN63@DrawAim120
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _percentRange$[ebp]
	jbe	SHORT $LN61@DrawAim120
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv392[ebp], xmm0
	jmp	SHORT $LN62@DrawAim120
$LN61@DrawAim120:
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR tv392[ebp], xmm0
$LN62@DrawAim120:
	movss	xmm0, DWORD PTR tv392[ebp]
	movss	DWORD PTR tv393[ebp], xmm0
	jmp	SHORT $LN64@DrawAim120
$LN63@DrawAim120:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv393[ebp], xmm0
$LN64@DrawAim120:
	movss	xmm0, DWORD PTR tv393[ebp]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 983  : 			percentRange = hudWinY[DLZ_WINDOW] + percentRange * 0.8F * hudWinHeight[DLZ_WINDOW] +
; 984  : 			0.1F * hudWinHeight[DLZ_WINDOW];

	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	movss	xmm1, DWORD PTR __real@3dcccccd
	mulss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, xmm1
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 985  : 			display->Circle (hudWinX[DLZ_WINDOW], percentRange, 0.03F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 986  : 	  }
; 987  : 	  else

	jmp	$LN18@DrawAim120
$LN19@DrawAim120:

; 988  : 	  {
; 989  : 		  // Range for immediate Active
; 990  : 			percentRange = FCC->missileActiveRange / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+284]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 991  : 			percentRange = min ( max ( rMin, percentRange), rMax);

	movss	xmm0, DWORD PTR _rMin$[ebp]
	comiss	xmm0, DWORD PTR _percentRange$[ebp]
	jbe	SHORT $LN65@DrawAim120
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR tv423[ebp], xmm0
	jmp	SHORT $LN66@DrawAim120
$LN65@DrawAim120:
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR tv423[ebp], xmm0
$LN66@DrawAim120:
	movss	xmm0, DWORD PTR _rMax$[ebp]
	comiss	xmm0, DWORD PTR tv423[ebp]
	jbe	SHORT $LN69@DrawAim120
	movss	xmm0, DWORD PTR _rMin$[ebp]
	comiss	xmm0, DWORD PTR _percentRange$[ebp]
	jbe	SHORT $LN67@DrawAim120
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
	jmp	SHORT $LN68@DrawAim120
$LN67@DrawAim120:
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
$LN68@DrawAim120:
	movss	xmm0, DWORD PTR tv426[ebp]
	movss	DWORD PTR tv427[ebp], xmm0
	jmp	SHORT $LN70@DrawAim120
$LN69@DrawAim120:
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR tv427[ebp], xmm0
$LN70@DrawAim120:
	movss	xmm0, DWORD PTR tv427[ebp]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 992  : 			yOffset = hudWinY[DLZ_WINDOW] + percentRange * 0.8F * hudWinHeight[DLZ_WINDOW] +
; 993  : 				0.1F * hudWinHeight[DLZ_WINDOW];

	mov	edx, 4
	imul	edx, 42					; 0000002aH
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mulss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	mov	ecx, 4
	imul	ecx, 42					; 0000002aH
	movss	xmm1, DWORD PTR __real@3dcccccd
	mulss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 994  : 			display->Circle (hudWinX[DLZ_WINDOW], yOffset, 0.02F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 42					; 0000002aH
	push	ecx
	movss	xmm0, DWORD PTR ?hudWinX@@3PAMA[edx]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx
$LN18@DrawAim120:

; 995  : 	  }
; 996  :    }
; 997  : // Draw "LOOSE" string
; 998  :    if (FCC->LastMissileWillMiss(targetData->range) && flash)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	call	?LastMissileWillMiss@FireControlComputer@@QAEHM@Z ; FireControlComputer::LastMissileWillMiss
	test	eax, eax
	je	SHORT $LN17@DrawAim120
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN17@DrawAim120

; 999  :    {
; 1000 :        DrawWindowString (12, "LOSE");

	push	0
	push	OFFSET ??_C@_04IEFNNOGI@LOSE?$AA@
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString

; 1001 :    }
; 1002 : 
; 1003 : 
; 1004 :    //MI Draw "HOJ" string, feature of RP4, Home on Jamming
; 1005 :    else if (FCC->TargetPtr() && FCC->TargetPtr()->BaseData() &&  // JB 010708 CTD

	jmp	SHORT $LN14@DrawAim120
$LN17@DrawAim120:

; 1006 : 		FCC->TargetPtr()->BaseData()->IsSPJamming())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ ; FireControlComputer::TargetPtr
	test	eax, eax
	je	SHORT $LN14@DrawAim120
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ ; FireControlComputer::TargetPtr
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	SHORT $LN14@DrawAim120
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	call	?TargetPtr@FireControlComputer@@QAEPAVSimObjectType@@XZ ; FireControlComputer::TargetPtr
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv479[ebp], eax
	mov	eax, DWORD PTR tv479[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv479[ebp]
	mov	eax, DWORD PTR [edx+268]
	call	eax
	test	eax, eax
	je	SHORT $LN14@DrawAim120

; 1007 :    {
; 1008 : 	   //only draw it when there is a missile in the air
; 1009 : 	   if (FCC->lastMissileImpactTime > 0) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+268]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@DrawAim120

; 1010 : 		   DrawWindowString (12, "HOJ");

	push	0
	push	OFFSET ??_C@_03PBELDNED@HOJ?$AA@
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN14@DrawAim120:

; 1011 :    }
; 1012 : 
; 1013 : 	if(g_bnewAMRAAMdlz)

	movzx	eax, BYTE PTR ?g_bnewAMRAAMdlz@@3_NA	; g_bnewAMRAAMdlz
	test	eax, eax
	je	$LN13@DrawAim120

; 1014 : 	{
; 1015 : 		if (FCC->lastMissileImpactTime > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+268]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN12@DrawAim120

; 1016 : 		{
; 1017 : 			if (FCC->lastMissileImpactTime > FCC->lastmissileActiveTime)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+268]
	comiss	xmm0, DWORD PTR [eax+276]
	jbe	$LN11@DrawAim120

; 1018 : 			{
; 1019 : 				sprintf (tmpStr, "%.0fM", (theRadar->lockedTargetData->range / 6076) - (( max ( min (-theRadar->lockedTargetData->rangedot * FTPSEC_TO_KNOTS, 1500.0F), -1500.0F)/6076 * FCC->lastmissileActiveTime )));

	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN71@DrawAim120
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv517[ebp], xmm0
	jmp	SHORT $LN72@DrawAim120
$LN71@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv517[ebp], xmm0
$LN72@DrawAim120:
	movss	xmm0, DWORD PTR tv517[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	SHORT $LN75@DrawAim120
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN73@DrawAim120
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv530[ebp], xmm0
	jmp	SHORT $LN74@DrawAim120
$LN73@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv530[ebp], xmm0
$LN74@DrawAim120:
	movss	xmm0, DWORD PTR tv530[ebp]
	movss	DWORD PTR tv531[ebp], xmm0
	jmp	SHORT $LN76@DrawAim120
$LN75@DrawAim120:
	movss	xmm0, DWORD PTR __real@c4bb8000
	movss	DWORD PTR tv531[ebp], xmm0
$LN76@DrawAim120:
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+44]
	divss	xmm0, DWORD PTR __real@45bde000
	movss	xmm1, DWORD PTR tv531[ebp]
	divss	xmm1, DWORD PTR __real@45bde000
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mulss	xmm1, DWORD PTR [eax+276]
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05JOALCFMH@?$CF?40fM?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1020 : 			}
; 1021 : 			else

	jmp	$LN10@DrawAim120
$LN11@DrawAim120:

; 1022 : 			{
; 1023 : 				sprintf (tmpStr, "%.0fF", (theRadar->lockedTargetData->range / 6076) - (( max ( min (-theRadar->lockedTargetData->rangedot * FTPSEC_TO_KNOTS, 1500.0F), -1500.0F)/6076 * FCC->lastMissileImpactTime )));

	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN77@DrawAim120
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv558[ebp], xmm0
	jmp	SHORT $LN78@DrawAim120
$LN77@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv558[ebp], xmm0
$LN78@DrawAim120:
	movss	xmm0, DWORD PTR tv558[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	SHORT $LN81@DrawAim120
	mov	eax, DWORD PTR _theRadar$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN79@DrawAim120
	mov	edx, DWORD PTR _theRadar$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv571[ebp], xmm0
	jmp	SHORT $LN80@DrawAim120
$LN79@DrawAim120:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv571[ebp], xmm0
$LN80@DrawAim120:
	movss	xmm0, DWORD PTR tv571[ebp]
	movss	DWORD PTR tv572[ebp], xmm0
	jmp	SHORT $LN82@DrawAim120
$LN81@DrawAim120:
	movss	xmm0, DWORD PTR __real@c4bb8000
	movss	DWORD PTR tv572[ebp], xmm0
$LN82@DrawAim120:
	mov	ecx, DWORD PTR _theRadar$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR __real@45bde000
	movss	xmm1, DWORD PTR tv572[ebp]
	divss	xmm1, DWORD PTR __real@45bde000
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mulss	xmm1, DWORD PTR [ecx+268]
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05HNPPPMAM@?$CF?40fF?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN10@DrawAim120:

; 1024 : 			}
; 1025 : 			ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 1026 : 			DrawWindowString (32, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN12@DrawAim120:

; 1027 : 		}
; 1028 : 	}
; 1029 : 	else

	jmp	$LN8@DrawAim120
$LN13@DrawAim120:

; 1030 : 	{
; 1031 : 		// Draw Time to die strings
; 1032 : 		if (FCC->nextMissileImpactTime > 0.0F) 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+272]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN8@DrawAim120

; 1033 : 		{
; 1034 : 			if (FCC->nextMissileImpactTime > FCC->lastmissileActiveTime)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+272]
	comiss	xmm0, DWORD PTR [eax+276]
	jbe	SHORT $LN7@DrawAim120

; 1035 : 			{
; 1036 : 				sprintf (tmpStr, "A%.0f", FCC->nextMissileImpactTime - FCC->lastmissileActiveTime);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+272]
	subss	xmm0, DWORD PTR [ecx+276]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NEDJNGFN@A?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1037 : 			}
; 1038 : 			else

	jmp	SHORT $LN6@DrawAim120
$LN7@DrawAim120:

; 1039 : 			{
; 1040 : 				sprintf (tmpStr, "T%.0f", FCC->nextMissileImpactTime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cvtss2sd xmm0, DWORD PTR [ecx+272]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05IHCCEFHF@T?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN6@DrawAim120:

; 1041 : 			}
; 1042 : 			ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 1043 : 			DrawWindowString (32, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN8@DrawAim120:

; 1044 : 		}
; 1045 : 	}
; 1046 : 
; 1047 :    if (FCC->lastMissileImpactTime > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+268]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@DrawAim120

; 1048 :    {
; 1049 :        if (FCC->LastMissileWillMiss(targetData->range)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	call	?LastMissileWillMiss@FireControlComputer@@QAEHM@Z ; FireControlComputer::LastMissileWillMiss
	test	eax, eax
	je	SHORT $LN4@DrawAim120

; 1050 : 	   sprintf (tmpStr, "L%.0f", FCC->lastMissileImpactTime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cvtss2sd xmm0, DWORD PTR [ecx+268]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05GIKHMFID@L?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@DrawAim120
$LN4@DrawAim120:

; 1051 :        }
; 1052 :        else if (FCC->lastMissileImpactTime > FCC->lastmissileActiveTime)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+268]
	comiss	xmm0, DWORD PTR [eax+276]
	jbe	SHORT $LN2@DrawAim120

; 1053 :        {
; 1054 : 	   sprintf (tmpStr, "A%.0f", FCC->lastMissileImpactTime - FCC->lastmissileActiveTime);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+268]
	subss	xmm0, DWORD PTR [ecx+276]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05NEDJNGFN@A?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1055 :        }
; 1056 :        else

	jmp	SHORT $LN1@DrawAim120
$LN2@DrawAim120:

; 1057 :        {
; 1058 : 	   sprintf (tmpStr, "T%.0f", FCC->lastMissileImpactTime);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cvtss2sd xmm0, DWORD PTR [ecx+268]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05IHCCEFHF@T?$CF?40f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN1@DrawAim120:

; 1059 :        }
; 1060 :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 1061 :       DrawWindowString (37, tmpStr);

	push	0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	37					; 00000025H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN5@DrawAim120:

; 1062 :    }
; 1063 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DrawAim120DLZ@HudClass@@AAEX_N@Z ENDP			; HudClass::DrawAim120DLZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_rNeMin$ = -64						; size = 4
_percentRange$ = -60					; size = 4
_rDot$ = -56						; size = 4
tv225 = -52						; size = 4
tv211 = -48						; size = 4
_rNeMax$ = -44						; size = 4
tv224 = -40						; size = 4
_rMax$ = -36						; size = 4
_rMin$ = -32						; size = 4
_playerAC$ = -28					; size = 4
_wpn$ = -24						; size = 4
_this$ = -20						; size = 4
_tmpStr$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawAim9DLZ@HudClass@@AAEXXZ PROC			; HudClass::DrawAim9DLZ
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 774  : 	char tmpStr[12];
; 775  : 	float percentRange;
; 776  : 	float rMax, rMin;
; 777  : 	float rNeMin, rNeMax;
; 778  : 	float rDot;
; 779  : 
; 780  : 	SimWeaponClass* wpn; 
; 781  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 782  : 	wpn = playerAC->Sms->GetCurrentWeapon(); // Marco Edit - for Aim9 Reticle Size

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _wpn$[ebp], eax

; 783  : 
; 784  : 	//MI prevent some strange things writte on the HUD
; 785  :    if (FCC->missileTarget && playerAC && playerAC->Sms && 
; 786  : 	   playerAC->Sms->curWeapon)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movsx	edx, BYTE PTR [ecx+192]
	test	edx, edx
	je	$LN13@DrawAim9DL
	cmp	DWORD PTR _playerAC$[ebp], 0
	je	$LN13@DrawAim9DL
	mov	eax, DWORD PTR _playerAC$[ebp]
	cmp	DWORD PTR [eax+940], 0
	je	$LN13@DrawAim9DL
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	$LN13@DrawAim9DL

; 787  :    {
; 788  :       // Range Carat / Closure
; 789  :       rMax   = FCC->missileRMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+288]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 790  :       rMin   = FCC->missileRMin;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+292]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 791  :       rNeMax = FCC->missileRneMax / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+296]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _rNeMax$[ebp], xmm0

; 792  :       rNeMin = FCC->missileRneMin / FCC->missileWEZDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [eax+300]
	divss	xmm0, DWORD PTR [edx+312]
	movss	DWORD PTR _rNeMin$[ebp], xmm0

; 793  : 
; 794  :       if (targetData->range < rMin || targetData->range > rNeMax || flash)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	comiss	xmm0, DWORD PTR [ecx+44]
	ja	SHORT $LN11@DrawAim9DL
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _rNeMax$[ebp]
	ja	SHORT $LN11@DrawAim9DL
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	$LN4@DrawAim9DL
$LN11@DrawAim9DL:

; 795  :       {
; 796  :          if (FCC->GetSubMode() == FireControlComputer::Aim9)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 5
	jne	$LN4@DrawAim9DL

; 797  : 		 {
; 798  : 			 // Marco Edit - check for our missile type (ie. REAR ASPECT)
; 799  : 			 // if (wc && wc->Flags & WEAP_REAR_ASPECT)
; 800  : 			 // Marco Edit - hack - check for 9P specifically)
; 801  : 			 if (wpn)

	cmp	DWORD PTR _wpn$[ebp], 0
	je	$LN4@DrawAim9DL

; 802  : 			 {
; 803  : 				 if (((CampBaseClass*)wpn)->GetSPType() == SPTYPE_AIM9P)

	mov	ecx, DWORD PTR _wpn$[ebp]
	call	?GetSPType@CampBaseClass@@QBEEXZ	; CampBaseClass::GetSPType
	movzx	edx, al
	cmp	edx, 17					; 00000011H
	jne	SHORT $LN8@DrawAim9DL

; 804  : 				{
; 805  : 					DrawAim9Reticle(SRM_REARAA_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e051eb8
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 806  : 				}
; 807  : 				else

	jmp	SHORT $LN4@DrawAim9DL
$LN8@DrawAim9DL:

; 808  : 				{
; 809  : 					// if (((MissileClass*)wpn)->isCaged && !((MissileClass*)wpn)->isSpot)
; 810  : 					if ( ((MissileClass*)wpn)->isSpot || ( !((MissileClass*)wpn)->isCaged && ((MissileClass*)wpn)->targetPtr ))

	mov	eax, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [eax+732], 0
	jne	SHORT $LN5@DrawAim9DL
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	jne	SHORT $LN6@DrawAim9DL
	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	SHORT $LN6@DrawAim9DL
$LN5@DrawAim9DL:

; 811  : 					{
; 812  : 						DrawAim9Reticle(SRM_UNCAGE_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 813  : 					}
; 814  : 					else

	jmp	SHORT $LN4@DrawAim9DL
$LN6@DrawAim9DL:

; 815  : 					{
; 816  : 						DrawAim9Reticle(SRM_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle
$LN4@DrawAim9DL:

; 817  : 					}
; 818  : 				}
; 819  : 			}
; 820  : 		 }
; 821  : 	  }
; 822  : 
; 823  :       if (targetData->range < rMin || targetData->range > rMax || flash)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	comiss	xmm0, DWORD PTR [ecx+44]
	ja	SHORT $LN2@DrawAim9DL
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _rMax$[ebp]
	ja	SHORT $LN2@DrawAim9DL
	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	je	SHORT $LN3@DrawAim9DL
$LN2@DrawAim9DL:

; 824  :       {
; 825  :          DrawAim9Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond
$LN3@DrawAim9DL:

; 826  :       }
; 827  : 
; 828  :       percentRange = targetData->range / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+44]
	divss	xmm0, DWORD PTR [ecx+312]
	movss	DWORD PTR _percentRange$[ebp], xmm0

; 829  : 
; 830  :       rDot = max ( min (-targetData->rangedot * FTPSEC_TO_KNOTS, 1500.0F), -1500.0F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN16@DrawAim9DL
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv211[ebp], xmm0
	jmp	SHORT $LN17@DrawAim9DL
$LN16@DrawAim9DL:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv211[ebp], xmm0
$LN17@DrawAim9DL:
	movss	xmm0, DWORD PTR tv211[ebp]
	comiss	xmm0, DWORD PTR __real@c4bb8000
	jbe	SHORT $LN20@DrawAim9DL
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	xmm1, DWORD PTR __real@44bb8000
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@DrawAim9DL
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR tv224[ebp], xmm0
	jmp	SHORT $LN19@DrawAim9DL
$LN18@DrawAim9DL:
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR tv224[ebp], xmm0
$LN19@DrawAim9DL:
	movss	xmm0, DWORD PTR tv224[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	jmp	SHORT $LN21@DrawAim9DL
$LN20@DrawAim9DL:
	movss	xmm0, DWORD PTR __real@c4bb8000
	movss	DWORD PTR tv225[ebp], xmm0
$LN21@DrawAim9DL:
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR _rDot$[ebp], xmm0

; 831  :       sprintf (tmpStr, "%.0f", rDot);

	cvtss2sd xmm0, DWORD PTR _rDot$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 832  :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 833  : 
; 834  :       // RNeMin/RNeMax scale
; 835  :       rMin = rMin / FCC->missileWEZDisplayRange;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR _rMin$[ebp]
	divss	xmm0, DWORD PTR [eax+312]
	movss	DWORD PTR _rMin$[ebp], xmm0

; 836  :       rMax = rMax / FCC->missileWEZDisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR _rMax$[ebp]
	divss	xmm0, DWORD PTR [edx+312]
	movss	DWORD PTR _rMax$[ebp], xmm0

; 837  : 
; 838  :       DrawDLZSymbol(percentRange, tmpStr, rMin, rMax, rNeMin, rNeMax, TRUE, "");  //0

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	1
	push	ecx
	movss	xmm0, DWORD PTR _rNeMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rNeMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMax$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rMin$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _percentRange$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawDLZSymbol@HudClass@@AAEXMPADMMMMH0@Z ; HudClass::DrawDLZSymbol

; 839  : 
; 840  :       sprintf (tmpStr, "%.0f", FCC->missileTOF);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cvtss2sd xmm0, DWORD PTR [edx+232]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 841  :       ShiAssert (strlen(tmpStr) < sizeof (tmpStr));
; 842  :       DrawWindowString (32, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN13@DrawAim9DL:

; 843  :    }
; 844  : 
; 845  :    // Draw Time to die strings
; 846  :    if (FCC->lastMissileImpactTime > 0.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [eax+268]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@DrawAim9DL

; 847  :    {
; 848  :       sprintf (tmpStr, "%.0f", FCC->lastMissileImpactTime);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cvtss2sd xmm0, DWORD PTR [edx+268]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 849  :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 850  :       DrawWindowString (37, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	push	37					; 00000025H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWindowString@HudClass@@AAEXHPADH@Z	; HudClass::DrawWindowString
$LN1@DrawAim9DL:

; 851  :    }
; 852  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAim9DLZ@HudClass@@AAEXXZ ENDP			; HudClass::DrawAim9DLZ
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv299 = -20						; size = 4
tv289 = -16						; size = 4
_xPos$ = -12						; size = 4
_yPos$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawAim120Diamond@HudClass@@AAEXXZ PROC		; HudClass::DrawAim120Diamond
; _this$ = ecx

; 855  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 856  : 	float xPos, yPos;
; 857  : 
; 858  :    display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 859  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F);

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 860  : 
; 861  :    if (FCC->missileTarget)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movsx	edx, BYTE PTR [ecx+192]
	test	edx, edx
	je	SHORT $LN3@DrawAim120

; 862  :    {
; 863  : 	   xPos = RadToHudUnitsX(FCC->missileSeekerAz);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+304]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _xPos$[ebp]

; 864  : 	   yPos = RadToHudUnitsY(FCC->missileSeekerEl);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	movss	xmm0, DWORD PTR [eax+308]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR _yPos$[ebp]

; 865  :    }
; 866  :    else

	jmp	SHORT $LN2@DrawAim120
$LN3@DrawAim120:

; 867  :    {
; 868  :       xPos = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xPos$[ebp], xmm0

; 869  :       yPos = MISSILE_RETICLE_OFFSET;

	push	ecx
	movss	xmm0, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR _yPos$[ebp]
$LN2@DrawAim120:

; 870  :    }
; 871  : 
; 872  :    if (fabs (xPos) < 0.90F && fabs(yPos + hudWinY[BORESIGHT_CROSS_WINDOW] +
; 873  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F) < 0.90F)

	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv289[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv289[ebp]
	jbe	$LN1@DrawAim120
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv299[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv299[ebp]
	jbe	$LN1@DrawAim120

; 874  :    {
; 875  :       display->AdjustOriginInViewport(xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 876  :       display->Line (0.0F,  0.025F,  0.025F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 877  :       display->Line (0.0F,  0.025F, -0.025F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 878  :       display->Line (0.0F, -0.025F,  0.025F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 879  :       display->Line (0.0F, -0.025F, -0.025F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 880  : 
; 881  :       display->Line ( 0.05F,  0.00F,  0.025F,  0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 882  :       display->Line (-0.05F,  0.00F, -0.025F,  0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bd4ccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 883  :       display->Line ( 0.0F, -0.025F,  0.00F, -0.05F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bd4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 884  :       display->Line ( 0.0F,  0.025F,  0.00F,  0.05F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ccccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 885  :       display->AdjustOriginInViewport(-xPos, -yPos);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN1@DrawAim120:

; 886  :    }
; 887  : 
; 888  :    display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 889  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	edx, 4
	imul	edx, 44					; 0000002cH
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 890  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAim120Diamond@HudClass@@AAEXXZ ENDP		; HudClass::DrawAim120Diamond
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv721 = -28						; size = 4
tv711 = -24						; size = 4
_playerAC$ = -20					; size = 4
_wpn$ = -16						; size = 4
_xPos$ = -12						; size = 4
_yPos$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawAim9Diamond@HudClass@@AAEXXZ PROC			; HudClass::DrawAim9Diamond
; _this$ = ecx

; 633  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 634  : 
; 635  : 	float xPos, yPos;
; 636  : 	SimWeaponClass *wpn; // JPO fix up
; 637  : 
; 638  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 639  : 	wpn = playerAC->Sms->GetCurrentWeapon();

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _wpn$[ebp], eax

; 640  : 	// Marco - this shouldn't happen
; 641  : 	if (!wpn)

	cmp	DWORD PTR _wpn$[ebp], 0
	jne	SHORT $LN21@DrawAim9Di

; 642  : 	   return ;

	jmp	$LN22@DrawAim9Di
$LN21@DrawAim9Di:

; 643  :     ShiAssert(wpn->IsMissile());
; 644  : 	display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 645  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F);

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 646  : 
; 647  :    if (1)//me123 (FCC->missileTarget)

	mov	eax, 1
	test	eax, eax
	je	$LN20@DrawAim9Di

; 648  :    {
; 649  : 	   xPos = RadToHudUnitsX(FCC->missileSeekerAz);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	ecx
	movss	xmm0, DWORD PTR [edx+304]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsX@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsX
	fstp	DWORD PTR _xPos$[ebp]

; 650  : 	   yPos = RadToHudUnitsY(FCC->missileSeekerEl);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+308]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RadToHudUnitsY@HudClass@@AAEMM@Z	; HudClass::RadToHudUnitsY
	fstp	DWORD PTR _yPos$[ebp]

; 651  : 
; 652  : 	   // Marco Edit - if seeker is Slave and/or SPOT and no target, then vibrate
; 653  : 	   if (g_bRealisticAvionics && playerAC->Sms->curWeaponType == wtAim9)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN14@DrawAim9Di
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	cmp	DWORD PTR [ecx+148], 1
	jne	$LN14@DrawAim9Di

; 654  : 	   {
; 655  :  			if (!((MissileClass*)wpn)->targetPtr && (((MissileClass*)wpn)->isCaged || ((MissileClass*)wpn)->isSpot))

	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	jne	$LN15@DrawAim9Di
	mov	eax, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [eax+728], 0
	jne	SHORT $LN17@DrawAim9Di
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+732], 0
	je	$LN15@DrawAim9Di
$LN17@DrawAim9Di:

; 656  : 			{
; 657  : 				if (FCC->Aim9AtGround)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movzx	ecx, BYTE PTR [eax+324]
	test	ecx, ecx
	je	SHORT $LN16@DrawAim9Di

; 658  : 				{
; 659  : 					xPos = xPos + (( (float)rand()/(float)RAND_MAX) - 0.5f) * 0.015f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c75c28f
	addss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 660  : 					yPos = yPos + (( (float)rand()/(float)RAND_MAX) - 0.5f) * 0.015f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c75c28f
	addss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0

; 661  : 				}
; 662  : 				else

	jmp	SHORT $LN15@DrawAim9Di
$LN16@DrawAim9Di:

; 663  : 				{
; 664  : 					xPos = xPos + (( (float)rand()/(float)RAND_MAX) - 0.5f) * 0.008f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c03126f
	addss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 665  : 					yPos = yPos + (( (float)rand()/(float)RAND_MAX) - 0.5f) * 0.008f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c03126f
	addss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0
$LN15@DrawAim9Di:

; 666  : 				}
; 667  : 			}
; 668  : 			if (((MissileClass*)wpn)->targetPtr)// && !((MissileClass*)wpn)->isCaged )

	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	SHORT $LN14@DrawAim9Di

; 669  : 			{
; 670  : 				// Marco - here we have an uncaged seeker with a target locked
; 671  : 		   		xPos = xPos + (( (float)rand()/(float)RAND_MAX)  - 0.5f) * 0.01f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	addss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR _xPos$[ebp], xmm0

; 672  : 				yPos = yPos + (( (float)rand()/(float)RAND_MAX)  - 0.5f) * 0.01f;

	call	_rand
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46fffe00
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c23d70a
	addss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR _yPos$[ebp], xmm0
$LN14@DrawAim9Di:

; 673  : 			}
; 674  : 	   }
; 675  : 
; 676  :    }
; 677  : 
; 678  :    else

	jmp	SHORT $LN13@DrawAim9Di
$LN20@DrawAim9Di:

; 679  :    {
; 680  :       xPos = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xPos$[ebp], xmm0

; 681  :       yPos =  -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 682  :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F) -1.0F;

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _yPos$[ebp], xmm0
$LN13@DrawAim9Di:

; 683  :    }
; 684  : 
; 685  :    // Marco Edit - AIM9P diamond stays in the centre of the HUD
; 686  :    /*wpn = playerAC->Sms->curWeapon;
; 687  :    if (g_bRealisticAvionics && ((CampBaseClass*)wpn)->GetSPType() == SPTYPE_AIM9P)
; 688  :    {
; 689  :       xPos = RadToHudUnitsX( 0.0F );
; 690  :       yPos =  RadToHudUnitsY( -6.0F * DTR );
; 691  :    }*/
; 692  : 
; 693  : 
; 694  :    if (fabs (xPos) < 0.90F && fabs(yPos + hudWinY[BORESIGHT_CROSS_WINDOW] +
; 695  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F) < 0.90F)

	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv711[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv711[ebp]
	jbe	$LN1@DrawAim9Di
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR _yPos$[ebp]
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[edx]
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	movss	xmm1, DWORD PTR ?hudWinHeight@@3PAMA[eax]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv721[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv721[ebp]
	jbe	$LN1@DrawAim9Di

; 696  :    {
; 697  : 	   //MI draw our diammond depending on seeker state (cage or not)
; 698  : 	   if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	$LN11@DrawAim9Di

; 699  : 	   {
; 700  : 		   display->AdjustOriginInViewport(xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 701  : 		   display->Line (0.0F,  0.03F,  0.03F, 0.0F);//me123 from 0.05 to 0.03

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 702  : 		   display->Line (0.0F,  0.03F, -0.03F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bcf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 703  : 		   display->Line (0.0F, -0.03F,  0.03F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3cf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bcf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 704  : 		   display->Line (0.0F, -0.03F, -0.03F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bcf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bcf5c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 705  : 		   display->AdjustOriginInViewport(-xPos, -yPos);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 706  : 	   }
; 707  : 	   else

	jmp	$LN1@DrawAim9Di
$LN11@DrawAim9Di:

; 708  : 	   {
; 709  : 		   //MI
; 710  : 		   if(wpn && wpn->IsMissile() && ((MissileClass*)wpn)->isCaged)

	cmp	DWORD PTR _wpn$[ebp], 0
	je	$LN9@DrawAim9Di
	mov	ecx, DWORD PTR _wpn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _wpn$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	$LN9@DrawAim9Di
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	je	$LN9@DrawAim9Di

; 711  : 		   {
; 712  : 			   if ((((MissileClass*)wpn)->targetPtr) && (targetData) &&			//JPG 24 Jun 04 - It flashes here too (only flash diamond when FCC has targeted and in range)
; 713  : 				   (targetData->range > FCC->missileRMin) && (targetData->range < FCC->missileRMax))

	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	$LN8@DrawAim9Di
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN8@DrawAim9Di
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR [ecx+292]
	jbe	$LN8@DrawAim9Di
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+288]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	$LN8@DrawAim9Di

; 714  : 			   {
; 715  : 				  if (vuxRealTime & 0x100)

	mov	eax, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	eax, 256				; 00000100H
	je	$LN7@DrawAim9Di

; 716  : 				  {
; 717  : 			   //Small
; 718  : 					display->AdjustOriginInViewport(xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 719  : 					display->Line (0.0F,  Small,  Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 720  : 					display->Line (0.0F,  Small, -Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 721  : 					display->Line (0.0F, -Small,  Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 722  : 					display->Line (0.0F, -Small, -Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 723  : 					display->AdjustOriginInViewport(-xPos, -yPos);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN7@DrawAim9Di:

; 724  : 				  }
; 725  : 			   }
; 726  : 			   else

	jmp	$LN6@DrawAim9Di
$LN8@DrawAim9Di:

; 727  : 			   {
; 728  : 				   display->AdjustOriginInViewport(xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 729  : 					display->Line (0.0F,  Small,  Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 730  : 					display->Line (0.0F,  Small, -Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 731  : 					display->Line (0.0F, -Small,  Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Small
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 732  : 					display->Line (0.0F, -Small, -Small, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Small
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 733  : 					display->AdjustOriginInViewport(-xPos, -yPos);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN6@DrawAim9Di:

; 734  : 			   }

	jmp	$LN1@DrawAim9Di
$LN9@DrawAim9Di:

; 735  : 		   }
; 736  : 		   // Marco Edit - flashing uncaged and locked diamond
; 737  : 		   else if(wpn && wpn->IsMissile() && !((MissileClass*)wpn)->isCaged)

	cmp	DWORD PTR _wpn$[ebp], 0
	je	$LN1@DrawAim9Di
	mov	ecx, DWORD PTR _wpn$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _wpn$[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	je	$LN1@DrawAim9Di
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	jne	$LN1@DrawAim9Di

; 738  : 		   {
; 739  : 			  
; 740  : 			   if ((((MissileClass*)wpn)->targetPtr) && (targetData) &&			//Wombat778 10-16-2003 Added this mess as per MIRV (only flash diamond when FCC has targeted and in range)
; 741  : 				   (targetData->range > FCC->missileRMin) && (targetData->range < FCC->missileRMax)) {

	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	$LN3@DrawAim9Di
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN3@DrawAim9Di
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR [ecx+292]
	jbe	$LN3@DrawAim9Di
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	movss	xmm0, DWORD PTR [edx+288]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	$LN3@DrawAim9Di

; 742  : 				  if (vuxRealTime & 0x100)

	mov	eax, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	eax, 256				; 00000100H
	je	$LN2@DrawAim9Di

; 743  : 				  {
; 744  : 					  display->AdjustOriginInViewport(xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 745  : 					  display->Line (0.0F,  Large,  Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 746  : 					  display->Line (0.0F,  Large, -Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 747  : 					  display->Line (0.0F, -Large,  Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 748  : 					  display->Line (0.0F, -Large, -Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 749  : 					  display->AdjustOriginInViewport(-xPos, -yPos);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN2@DrawAim9Di:

; 750  : 				  }
; 751  : 			   }
; 752  : 				  else

	jmp	$LN1@DrawAim9Di
$LN3@DrawAim9Di:

; 753  : 				  {
; 754  : 		   		  
; 755  : 				    //Large
; 756  : 					display->AdjustOriginInViewport(xPos, yPos);

	push	ecx
	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 757  : 					display->Line (0.0F,  Large,  Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 758  : 					display->Line (0.0F,  Large, -Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 759  : 					display->Line (0.0F, -Large,  Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _Large
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 760  : 					display->Line (0.0F, -Large, -Large, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _Large
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 761  : 					display->AdjustOriginInViewport(-xPos, -yPos);

	movss	xmm0, DWORD PTR _yPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _xPos$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN1@DrawAim9Di:

; 762  : 				  }
; 763  : 				  
; 764  : 		   }
; 765  : 	   }
; 766  :    }
; 767  : 
; 768  :    display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 769  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN22@DrawAim9Di:

; 770  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAim9Diamond@HudClass@@AAEXXZ ENDP			; HudClass::DrawAim9Diamond
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_trig$ = -92						; size = 8
_rangeTic2Y$ = -84					; size = 4
tv441 = -80						; size = 4
tv707 = -76						; size = 4
tv666 = -72						; size = 4
tv460 = -68						; size = 4
tv709 = -64						; size = 4
_rangeTic2X$ = -60					; size = 4
tv705 = -56						; size = 4
_rangeTic1X$ = -52					; size = 4
tv362 = -48						; size = 4
_tmpRange$ = -44					; size = 4
tv376 = -40						; size = 4
_rangeTic1Y$ = -36					; size = 4
_angle$ = -32						; size = 4
_harmPod$1 = -28					; size = 4
_displayRange$2 = -21					; size = 1
_this$ = -20						; size = 4
_tmpStr$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_radius$ = 8						; size = 4
_showRange$ = 12					; size = 4
_showAspect$ = 16					; size = 4
?DrawMissileReticle@HudClass@@AAEXMHH@Z PROC		; HudClass::DrawMissileReticle
; _this$ = ecx

; 527  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 528  : float rangeTic1X, rangeTic1Y;
; 529  : float rangeTic2X, rangeTic2Y;
; 530  : float angle, tmpRange;
; 531  : char tmpStr[12];
; 532  : mlTrig trig;
; 533  : 
; 534  : 	if (targetPtr == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	$LN20@DrawMissil

; 535  :    {
; 536  :       display->Circle (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 537  :       hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + MISSILE_RETICLE_OFFSET, radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	xmm1, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv705[ebp], xmm0
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv441[ebp]
	movss	xmm0, DWORD PTR tv705[ebp]
	addss	xmm0, DWORD PTR tv441[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 538  :    }
; 539  :    else

	jmp	$LN19@DrawMissil
$LN20@DrawMissil:

; 540  :    {
; 541  :       display->AdjustOriginInViewport (0.0F, hudWinY[BORESIGHT_CROSS_WINDOW] +
; 542  :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + MISSILE_RETICLE_OFFSET);

	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[eax]
	push	ecx
	movss	xmm1, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv707[ebp], xmm0
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv460[ebp]
	movss	xmm0, DWORD PTR tv707[ebp]
	addss	xmm0, DWORD PTR tv460[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 543  : 
; 544  :       // Range Tick
; 545  :       angle = (targetData->range/12000.0F) * 360.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	divss	xmm0, DWORD PTR __real@463b8000
	mulss	xmm0, DWORD PTR __real@43b40000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _angle$[ebp], xmm0

; 546  : 
; 547  :       if (targetData->range < 12000.0F)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR __real@463b8000
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	$LN18@DrawMissil

; 548  :       {
; 549  :          if (showRange)

	cmp	DWORD PTR _showRange$[ebp], 0
	je	$LN17@DrawMissil

; 550  :          {
; 551  :             if (angle >= (90.0F * DTR))

	movss	xmm0, DWORD PTR _angle$[ebp]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jb	$LN16@DrawMissil

; 552  :             {
; 553  :                display->Arc (0.0F, 0.0F, radius, 0.0F, angle - (90.0F * DTR));

	movss	xmm0, DWORD PTR _angle$[ebp]
	subss	xmm0, DWORD PTR __real@3fc90fd9
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 554  :                display->Arc (0.0F, 0.0F, radius, 270.0F * DTR, 360.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 555  :             }
; 556  :             else

	jmp	SHORT $LN15@DrawMissil
$LN16@DrawMissil:

; 557  :             {
; 558  :                display->Arc (0.0F, 0.0F, radius, 270.0F * DTR, 270.0F * DTR + angle);

	movss	xmm0, DWORD PTR __real@4096cbe3
	addss	xmm0, DWORD PTR _angle$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@4096cbe3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+52]
	call	eax
$LN15@DrawMissil:

; 559  :             }
; 560  :          }
; 561  :          else

	jmp	SHORT $LN14@DrawMissil
$LN17@DrawMissil:

; 562  :          {
; 563  :             display->Circle (0.0F, 0.0F, radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN14@DrawMissil:

; 564  :          }
; 565  : 
; 566  :          mlSinCos (&trig, angle);

	push	ecx
	movss	xmm0, DWORD PTR _angle$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 567  :          rangeTic1X = radius * trig.sin;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _rangeTic1X$[ebp], xmm0

; 568  :          rangeTic1Y = radius * trig.cos;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _rangeTic1Y$[ebp], xmm0

; 569  :          rangeTic2X = 0.9F * rangeTic1X;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR _rangeTic2X$[ebp], xmm0

; 570  :          rangeTic2Y = 0.9F * rangeTic1Y;

	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR _rangeTic2Y$[ebp], xmm0

; 571  :          display->Line (rangeTic1X, rangeTic1Y, rangeTic2X, rangeTic2Y);

	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic2X$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rangeTic1X$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 572  :       }
; 573  :       else

	jmp	SHORT $LN13@DrawMissil
$LN18@DrawMissil:

; 574  :       {
; 575  :          display->Circle (0.0F, 0.0F, radius);

	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN13@DrawMissil:

; 576  :       }
; 577  : 
; 578  :       // Reference Ticks
; 579  : 	  // M.N. added full realism mode
; 580  :       if (targetData->range < 12000.0F || (PlayerOptions.GetAvionicsType() != ATRealistic && PlayerOptions.GetAvionicsType() != ATRealisticAV))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR __real@463b8000
	comiss	xmm0, DWORD PTR [edx+44]
	ja	SHORT $LN11@DrawMissil
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	cmp	eax, 2
	je	$LN12@DrawMissil
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	cmp	eax, 3
	je	$LN12@DrawMissil
$LN11@DrawMissil:

; 581  :       {
; 582  :          display->Line (0.0F,  radius, 0.0F,  radius + 0.04F);

	movss	xmm0, DWORD PTR _radius$[ebp]
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 583  :          display->Line (0.0F, -radius, 0.0F, -radius - 0.04F);

	movss	xmm0, DWORD PTR _radius$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _radius$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 584  :          display->Line ( radius, 0.0F,  radius + 0.04F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _radius$[ebp]
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 585  :          display->Line (-radius, 0.0F, -radius - 0.04F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _radius$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _radius$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN12@DrawMissil:

; 586  :       }
; 587  : 
; 588  : 	  // Aspect caret
; 589  : 	  if (showAspect)

	cmp	DWORD PTR _showAspect$[ebp], 0
	je	$LN10@DrawMissil

; 590  :      {
; 591  :         // If you are on his right, draw it on the left
; 592  :         if (targetData->azFrom < 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+20]
	jbe	SHORT $LN9@DrawMissil

; 593  : 		     display->AdjustRotationAboutOrigin (targetData->ataFrom);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 594  :         else

	jmp	SHORT $LN8@DrawMissil
$LN9@DrawMissil:

; 595  : 		     display->AdjustRotationAboutOrigin (-targetData->ataFrom);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin
$LN8@DrawMissil:

; 596  : 		  display->Line ( 0.0F, radius,  -0.04F, radius + 0.04F);

	movss	xmm0, DWORD PTR _radius$[ebp]
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bd23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 597  : 		  display->Line ( 0.0F, radius,   0.04F, radius + 0.04F);

	movss	xmm0, DWORD PTR _radius$[ebp]
	addss	xmm0, DWORD PTR __real@3d23d70a
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 598  : 		  display->ZeroRotationAboutOrigin ();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin
$LN10@DrawMissil:

; 599  : 	  }
; 600  : 
; 601  : 	 // RV - I-Hawk - Do not display target range if in HARM HAS mode
; 602  : 	 bool displayRange = true;

	mov	BYTE PTR _displayRange$2[ebp], 1

; 603  : 	 if ( FCC->GetSubMode() == FireControlComputer::HARM )

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 23					; 00000017H
	jne	SHORT $LN6@DrawMissil

; 604  : 	 {
; 605  : 		 HarmTargetingPod* harmPod = (HarmTargetingPod*)FindSensor(ownship, SensorClass::HTS);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _harmPod$1[ebp], eax

; 606  : 		 if ( harmPod && harmPod->GetSubMode() == HarmTargetingPod::HAS ||
; 607  : 			  harmPod && harmPod->GetSubMode() == HarmTargetingPod::Handoff ||
; 608  : 			  harmPod && harmPod->GetSubMode() == HarmTargetingPod::FilterMode )

	cmp	DWORD PTR _harmPod$1[ebp], 0
	je	SHORT $LN4@DrawMissil
	mov	ecx, DWORD PTR _harmPod$1[ebp]
	call	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
	cmp	eax, 1
	je	SHORT $LN5@DrawMissil
$LN4@DrawMissil:
	cmp	DWORD PTR _harmPod$1[ebp], 0
	je	SHORT $LN3@DrawMissil
	mov	ecx, DWORD PTR _harmPod$1[ebp]
	call	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
	cmp	eax, 2
	je	SHORT $LN5@DrawMissil
$LN3@DrawMissil:
	cmp	DWORD PTR _harmPod$1[ebp], 0
	je	SHORT $LN6@DrawMissil
	mov	ecx, DWORD PTR _harmPod$1[ebp]
	call	?GetSubMode@HarmTargetingPod@@QAE?AW4Submode@1@XZ ; HarmTargetingPod::GetSubMode
	cmp	eax, 4
	jne	SHORT $LN6@DrawMissil
$LN5@DrawMissil:

; 609  : 		 {
; 610  : 			 displayRange = false;

	mov	BYTE PTR _displayRange$2[ebp], 0
$LN6@DrawMissil:

; 611  : 		 }
; 612  : 	 }
; 613  : 
; 614  :       if (targetData->range > 1.0F * NM_TO_FT)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR __real@45bde1b0
	jbe	SHORT $LN2@DrawMissil

; 615  :       {
; 616  :          tmpRange = min (targetData->range * FT_TO_NM, 1000.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	xmm1, DWORD PTR __real@447a0000
	comiss	xmm1, xmm0
	jbe	SHORT $LN23@DrawMissil
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@392c987a
	movss	DWORD PTR tv362[ebp], xmm0
	jmp	SHORT $LN24@DrawMissil
$LN23@DrawMissil:
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR tv362[ebp], xmm0
$LN24@DrawMissil:
	movss	xmm0, DWORD PTR tv362[ebp]
	movss	DWORD PTR _tmpRange$[ebp], xmm0

; 617  :          sprintf (tmpStr, "F %4.1f", tmpRange);

	cvtss2sd xmm0, DWORD PTR _tmpRange$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_07OPLBMDCI@F?5?$CF4?41f?$AA@
	lea	edx, DWORD PTR _tmpStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 618  :       }
; 619  :       else

	jmp	$LN1@DrawMissil
$LN2@DrawMissil:

; 620  :       {
; 621  :          tmpRange = min (targetData->range * 0.01F, 10000.0F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR __real@461c4000
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@DrawMissil
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv376[ebp], xmm0
	jmp	SHORT $LN26@DrawMissil
$LN25@DrawMissil:
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR tv376[ebp], xmm0
$LN26@DrawMissil:
	movss	xmm0, DWORD PTR tv376[ebp]
	movss	DWORD PTR _tmpRange$[ebp], xmm0

; 622  :          sprintf (tmpStr, "F  %03.0f", targetData->range * 0.01F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+44]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09NMAJCCOH@F?5?5?$CF03?40f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN1@DrawMissil:

; 623  :       }
; 624  :       ShiAssert (strlen(tmpStr) < sizeof(tmpStr));
; 625  :       display->AdjustOriginInViewport (0.0F, -(hudWinY[BORESIGHT_CROSS_WINDOW] +
; 626  :          hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + MISSILE_RETICLE_OFFSET));

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	push	ecx
	movss	xmm1, DWORD PTR __real@bdd6774e
	movss	DWORD PTR [esp], xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv709[ebp], xmm0
	call	?RadToHudUnits@HudClass@@AAEMM@Z	; HudClass::RadToHudUnits
	fstp	DWORD PTR tv666[ebp]
	movss	xmm0, DWORD PTR tv709[ebp]
	addss	xmm0, DWORD PTR tv666[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN19@DrawMissil:

; 627  : //      DrawWindowString(10, tmpStr);
; 628  :    }
; 629  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawMissileReticle@HudClass@@AAEXMHH@Z ENDP		; HudClass::DrawMissileReticle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv81 = -16						; size = 4
_wpn$ = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawMissileOverride@HudClass@@AAEXXZ PROC		; HudClass::DrawMissileOverride
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	SimWeaponClass* wpn; 
; 166  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 167  : 	wpn = playerAC->Sms->GetCurrentWeapon(); // Marco Edit - for Aim9 Reticle Size

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _wpn$[ebp], eax

; 168  : 	
; 169  : #ifdef DEBUG
; 170  : 	if(wpn)
; 171  : 		ShiAssert(wpn->IsMissile());
; 172  : #endif
; 173  : 
; 174  :     switch( FCC->GetMrmSubMode() )	// ASSOCIATOR: Added MissileOverride here to get remembered mode

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	?GetMrmSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetMrmSubMode
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 6
	ja	$LN40@DrawMissil
	mov	ecx, DWORD PTR tv81[ebp]
	jmp	DWORD PTR $LN44@DrawMissil[ecx*4]
$LN39@DrawMissil:

; 175  :     {
; 176  :     case FireControlComputer::Aim9:
; 177  : 	if (targetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	$LN38@DrawMissil

; 178  : 	{
; 179  : 		//MI changed
; 180  : 		if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN37@DrawMissil

; 181  : 			DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 182  : 		else

	jmp	SHORT $LN36@DrawMissil
$LN37@DrawMissil:

; 183  : 			DrawAATDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAATDBox@HudClass@@AAEXXZ		; HudClass::DrawAATDBox
$LN36@DrawMissil:

; 184  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN34@DrawMissil
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN35@DrawMissil
$LN34@DrawMissil:

; 185  : 			{
; 186  : 				DrawAim9DLZ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9DLZ@HudClass@@AAEXXZ		; HudClass::DrawAim9DLZ

; 187  : 				DrawAim9Diamond();//me123 addet

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond
$LN35@DrawMissil:

; 188  : 			}
; 189  : 			
; 190  : 		if (wpn)

	cmp	DWORD PTR _wpn$[ebp], 0
	je	$LN25@DrawMissil

; 191  : 		{
; 192  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN31@DrawMissil
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	$LN25@DrawMissil
$LN31@DrawMissil:

; 193  : 			{
; 194  : 				// Marco Edit - check for our missile type (ie. REAR ASPECT)
; 195  : 				// if (wc && wc->Flags & WEAP_REAR_ASPECT)
; 196  : 				// Marco Edit - hack - check for 9P specifically)
; 197  : 				wpn = playerAC->Sms->GetCurrentWeapon(); // Marco Edit - for Aim9 Reticle Size

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _wpn$[ebp], eax

; 198  : 				if (g_bRealisticAvionics && ((CampBaseClass*)wpn)->GetSPType() == SPTYPE_AIM9P)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN30@DrawMissil
	mov	ecx, DWORD PTR _wpn$[ebp]
	call	?GetSPType@CampBaseClass@@QBEEXZ	; CampBaseClass::GetSPType
	movzx	edx, al
	cmp	edx, 17					; 00000011H
	jne	SHORT $LN30@DrawMissil

; 199  : 						{
; 200  : 							DrawAim9Reticle(SRM_REARAA_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e051eb8
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 201  : 						}
; 202  : 				else

	jmp	SHORT $LN25@DrawMissil
$LN30@DrawMissil:

; 203  : 					{
; 204  : 					// if (((MissileClass*)wpn)->isCaged && !((MissileClass*)wpn)->isSpot)
; 205  : 						if ( g_bRealisticAvionics && ((MissileClass*)wpn)->isSpot || ( !((MissileClass*)wpn)->isCaged && ((MissileClass*)wpn)->targetPtr ) )

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN26@DrawMissil
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+732], 0
	jne	SHORT $LN27@DrawMissil
$LN26@DrawMissil:
	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+728], 0
	jne	SHORT $LN28@DrawMissil
	mov	eax, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN28@DrawMissil
$LN27@DrawMissil:

; 206  : 						{
; 207  : 							DrawAim9Reticle(SRM_UNCAGE_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 208  : 						}
; 209  : 						else

	jmp	SHORT $LN25@DrawMissil
$LN28@DrawMissil:

; 210  : 						{
; 211  : 							DrawAim9Reticle(SRM_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle
$LN25@DrawMissil:

; 212  : 						}
; 213  : 					}
; 214  : 			}
; 215  : 		}
; 216  : 	}
; 217  : 	else

	jmp	$LN23@DrawMissil
$LN38@DrawMissil:

; 218  : 	{
; 219  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN22@DrawMissil
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	$LN23@DrawMissil
$LN22@DrawMissil:

; 220  : 			{
; 221  : 			    
; 222  : 				// Marco Edit - check for our missile type (ie. REAR ASPECT)
; 223  : 				// if (wc && wc->Flags & WEAP_REAR_ASPECT)
; 224  : 				// Marco Edit - hack - check for 9P specifically)
; 225  : 				if (g_bRealisticAvionics && wpn && ((CampBaseClass*)wpn)->GetSPType() == SPTYPE_AIM9P)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN21@DrawMissil
	cmp	DWORD PTR _wpn$[ebp], 0
	je	SHORT $LN21@DrawMissil
	mov	ecx, DWORD PTR _wpn$[ebp]
	call	?GetSPType@CampBaseClass@@QBEEXZ	; CampBaseClass::GetSPType
	movzx	ecx, al
	cmp	ecx, 17					; 00000011H
	jne	SHORT $LN21@DrawMissil

; 226  : 				{
; 227  : 					DrawAim9Reticle(SRM_REARAA_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e051eb8
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 228  : 				}
; 229  : 				else

	jmp	SHORT $LN17@DrawMissil
$LN21@DrawMissil:

; 230  : 				{
; 231  : 					// if (((MissileClass*)wpn)->isCaged && !((MissileClass*)wpn)->isSpot)
; 232  : 					if (g_bRealisticAvionics && wpn && (((MissileClass*)wpn)->isSpot || ( !((MissileClass*)wpn)->isCaged && ((MissileClass*)wpn)->targetPtr )))

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN19@DrawMissil
	cmp	DWORD PTR _wpn$[ebp], 0
	je	SHORT $LN19@DrawMissil
	mov	eax, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [eax+732], 0
	jne	SHORT $LN18@DrawMissil
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	jne	SHORT $LN19@DrawMissil
	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	SHORT $LN19@DrawMissil
$LN18@DrawMissil:

; 233  : 					{
; 234  : 					DrawAim9Reticle(SRM_UNCAGE_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 235  : 					}
; 236  : 					else

	jmp	SHORT $LN17@DrawMissil
$LN19@DrawMissil:

; 237  : 					{
; 238  : 						DrawAim9Reticle(SRM_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle
$LN17@DrawMissil:

; 239  : 					}
; 240  : 				}
; 241  : 				DrawAim9Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond
$LN23@DrawMissil:

; 242  : 			}
; 243  : 	}
; 244  : 	break;

	jmp	$LN40@DrawMissil
$LN16@DrawMissil:

; 245  : 	
; 246  :     case FireControlComputer::Aim120:
; 247  : 	if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN15@DrawMissil

; 248  : 	{
; 249  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN13@DrawMissil
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN14@DrawMissil
$LN13@DrawMissil:

; 250  : 			{
; 251  : 			// JPO flashing resizing reticle
; 252  : 				if ( flash ||
; 253  : 				targetData->range > FCC->missileRneMax ||
; 254  : 				targetData->range < FCC->missileRneMin)

	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	jne	SHORT $LN11@DrawMissil
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [eax+296]
	ja	SHORT $LN11@DrawMissil
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+300]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN12@DrawMissil
$LN11@DrawMissil:

; 255  : 				DrawMissileReticle(FCC->Aim120ASECRadius(targetData->range), FALSE, TRUE);

	push	1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?Aim120ASECRadius@FireControlComputer@@QAEMM@Z ; FireControlComputer::Aim120ASECRadius
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle
$LN12@DrawMissil:

; 256  : 				
; 257  : 				DrawAim120DLZ(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120DLZ@HudClass@@AAEX_N@Z	; HudClass::DrawAim120DLZ

; 258  : 				DrawAim120ASE();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120ASE@HudClass@@AAEXXZ		; HudClass::DrawAim120ASE
$LN14@DrawMissil:

; 259  : 			}
; 260  : 			//MI changed
; 261  : 			if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN10@DrawMissil

; 262  : 				DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 263  : 			else

	jmp	SHORT $LN9@DrawMissil
$LN10@DrawMissil:

; 264  : 				DrawAATDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAATDBox@HudClass@@AAEXXZ		; HudClass::DrawAATDBox
$LN9@DrawMissil:

; 265  : 	}
; 266  : 	else {

	jmp	SHORT $LN7@DrawMissil
$LN15@DrawMissil:

; 267  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN6@DrawMissil
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN7@DrawMissil
$LN6@DrawMissil:

; 268  : 			{
; 269  : 			// JPG 17 Jan 04 - No again MI, see above
; 270  : 			//MI make it dependant on missil bore/slave
; 271  : 			//if(playerAC && playerAC->Sms && playerAC->Sms->curWeapon && 
; 272  : 			//	((MissileClass*)playerAC->Sms->curWeapon)->isSlave)
; 273  : 			//	DrawMissileReticle(0.3F, FALSE, TRUE);
; 274  : 			//else
; 275  : 				DrawMissileReticle(MRM_RETICLE_SIZE, FALSE, TRUE);

	push	1
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle

; 276  : 				DrawAim120Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim120Diamond
$LN7@DrawMissil:

; 277  : 			}
; 278  : 	}
; 279  : 	break;

	jmp	SHORT $LN40@DrawMissil
$LN5@DrawMissil:

; 280  : 	// ASSOCIATOR 03/12/03: Added the combined SnapShot LCOS Gunmode SSLC 
; 281  : 	case FireControlComputer::EEGS:
; 282  : 	case FireControlComputer::SSLC:
; 283  : 	case FireControlComputer::LCOS:
; 284  : 	case FireControlComputer::Snapshot:
; 285  : 		if(g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN4@DrawMissil

; 286  : 		{
; 287  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN2@DrawMissil
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN3@DrawMissil
$LN2@DrawMissil:

; 288  : 			{
; 289  : 				DrawGuns();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawGuns@HudClass@@AAEXXZ		; HudClass::DrawGuns
$LN3@DrawMissil:

; 290  : 			}
; 291  : 				DrawAATDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAATDBox@HudClass@@AAEXXZ		; HudClass::DrawAATDBox
$LN4@DrawMissil:
$LN40@DrawMissil:

; 292  : 		}
; 293  : 	break;
; 294  :     }
; 295  :     
; 296  :     // Add waypoint info
; 297  :     if (waypointValid)

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+4952]
	test	eax, eax
	je	SHORT $LN1@DrawMissil

; 298  :     {
; 299  : 	TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 300  : 	RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawMissil:

; 301  :     }
; 302  :     
; 303  :     CheckBreakX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBreakX@HudClass@@AAEXXZ		; HudClass::CheckBreakX

; 304  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN44@DrawMissil:
	DD	$LN5@DrawMissil
	DD	$LN5@DrawMissil
	DD	$LN5@DrawMissil
	DD	$LN5@DrawMissil
	DD	$LN40@DrawMissil
	DD	$LN39@DrawMissil
	DD	$LN16@DrawMissil
?DrawMissileOverride@HudClass@@AAEXXZ ENDP		; HudClass::DrawMissileOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
_ang$ = -52						; size = 4
tv381 = -48						; size = 4
tv367 = -44						; size = 4
tv250 = -40						; size = 4
tv236 = -36						; size = 4
tv249 = -32						; size = 4
tv255 = -25						; size = 1
_playerAC$ = -24					; size = 4
_this$ = -20						; size = 4
_str$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawDogfight@HudClass@@AAEXXZ PROC			; HudClass::DrawDogfight
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 47   :     float ang;
; 48   :     char str[12];
; 49   :     // JPO dogfight can use aim120.
; 50   :     if (FCC->GetDgftSubMode() == FireControlComputer::Aim120) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	?GetDgftSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetDgftSubMode
	cmp	eax, 6
	jne	$LN22@DrawDogfig

; 51   : 	{
; 52   : 		if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN21@DrawDogfig

; 53   : 		{
; 54   : 			/*if ( flash || targetData->range > FCC->missileRneMax || targetData->range < FCC->missileRneMin)
; 55   : 			{
; 56   : 				DrawMissileReticle(FCC->Aim120ASECRadius(targetData->range), FALSE, TRUE);
; 57   : 			}*/
; 58   : 			//MI changed
; 59   : 			if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN20@DrawDogfig

; 60   : 				DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox
$LN20@DrawDogfig:

; 61   : 			//else
; 62   : 			//	DrawAATDBox();
; 63   : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN18@DrawDogfig
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN19@DrawDogfig
$LN18@DrawDogfig:

; 64   : 			{
; 65   : 				DrawAim120DLZ(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120DLZ@HudClass@@AAEX_N@Z	; HudClass::DrawAim120DLZ

; 66   : 				DrawAim120ASE();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120ASE@HudClass@@AAEXXZ		; HudClass::DrawAim120ASE

; 67   : 				// with a target locked
; 68   : 				DrawAim120Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim120Diamond
$LN19@DrawDogfig:

; 69   : 			}
; 70   : 		}
; 71   : 		else 

	jmp	SHORT $LN16@DrawDogfig
$LN21@DrawDogfig:

; 72   : 		{	/*JPG 17 Jan 04 - NO NO NO - Reticle size is FIXED for the AIM-120 regardless of
; 73   : 			BORE/SLAVE selection.  To put this to rest, AIM-9L/Ms work like this:
; 74   : 			
; 75   : 			SLAVE/SPOT:
; 76   : 				1)Search (65-mil reticle), small diamond in center
; 77   : 				2)Radar lock-on, TD box and diamond track
; 78   : 				3)Uncage commanded, uncage diamond appears and TD box continues tracking
; 79   : 				4)Uncaged diamond self-track (break radar lock if desired)
; 80   : 
; 81   : 			SLAVE/SCAN: 
; 82   : 				1)Search (100-mil reticle) & seeker nutates
; 83   : 				2)Radar Lock-on (still 100 mils), TD box & diamond tracking target
; 84   : 				3)Uncage commanded, reticle shrinks to 65-mil, uncaged diamond appears and TD box
; 85   : 				  continues tracking
; 86   : 				4)Self-track (break radar lock if desired)
; 87   : 			BORE/SPOT:
; 88   : 				1)Search (65-mil reticle), small diamond in center
; 89   : 				2)Radar lock-on (optional :), fly missile diamond to TGT
; 90   : 				3)Uncage commanded, uncaged diamond appears/tracks target (radar TD box could
; 91   : 				  potentially be tracking another target or the same one, while the diamond is tracking
; 92   : 				  the other.
; 93   : 				4)Self-track
; 94   : 			BORE/SCAN:
; 95   : 				1)Search (100-mil reticle) & seeker nutates
; 96   : 				2)Radar lock-on (optional), fly diamond to TGT
; 97   : 				3)Uncage commanded, reticle shrinks to 65-mil, uncaged diamond appears and TD box
; 98   : 				  continues tracking (if radar lock)
; 99   : 				4)Self-track
; 100  : 			*/
; 101  : 		    //MI make it dependant on missil bore/slave
; 102  : 			//if(playerAC && playerAC->Sms && playerAC->Sms->curWeapon && 
; 103  : 			//	((MissileClass*)playerAC->Sms->curWeapon)->isSlave)
; 104  : 			//	DrawMissileReticle(0.3F, FALSE, TRUE);
; 105  : 			//else
; 106  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN15@DrawDogfig
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN16@DrawDogfig
$LN15@DrawDogfig:

; 107  : 			{
; 108  : 				DrawMissileReticle(MRM_RETICLE_SIZE, FALSE, TRUE);

	push	1
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle

; 109  : 				DrawAim120Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim120Diamond
$LN16@DrawDogfig:

; 110  : 			}
; 111  : 		}
; 112  :     }
; 113  :     else 

	jmp	$LN7@DrawDogfig
$LN22@DrawDogfig:

; 114  : 	{
; 115  : 	
; 116  : 		if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN13@DrawDogfig

; 117  : 		{
; 118  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN11@DrawDogfig
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN12@DrawDogfig
$LN11@DrawDogfig:

; 119  : 			{
; 120  : 				//MI changed
; 121  : 				if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN10@DrawDogfig

; 122  : 				DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox
$LN10@DrawDogfig:

; 123  : // Marco Edit - not TD Box in Dogfight mode
; 124  : //			else
; 125  : //				DrawAATDBox();
; 126  : 				DrawAim9DLZ();  

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9DLZ@HudClass@@AAEXXZ		; HudClass::DrawAim9DLZ

; 127  : 				DrawAim9Diamond();//me123 addet

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond

; 128  : 			}
; 129  : 			else

	jmp	SHORT $LN9@DrawDogfig
$LN12@DrawDogfig:

; 130  : 			{
; 131  : 				DrawAATDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAATDBox@HudClass@@AAEXXZ		; HudClass::DrawAATDBox
$LN9@DrawDogfig:

; 132  : 			}
; 133  : 		}
; 134  : 		else

	jmp	SHORT $LN7@DrawDogfig
$LN13@DrawDogfig:

; 135  : 		{
; 136  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN6@DrawDogfig
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN7@DrawDogfig
$LN6@DrawDogfig:

; 137  : 			{
; 138  : 		    DrawAim9Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond
$LN7@DrawDogfig:

; 139  : 			}
; 140  : 		}
; 141  :     }
; 142  : 	if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN4@DrawDogfig
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN5@DrawDogfig
$LN4@DrawDogfig:

; 143  : 		{
; 144  : 		DrawGuns();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawGuns@HudClass@@AAEXXZ		; HudClass::DrawGuns
$LN5@DrawDogfig:

; 145  : 		}
; 146  :     CheckBreakX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBreakX@HudClass@@AAEXXZ		; HudClass::CheckBreakX

; 147  :     
; 148  :     // Add target aspect angle
; 149  :     if (targetPtr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN2@DrawDogfig

; 150  :     {
; 151  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN1@DrawDogfig
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	$LN2@DrawDogfig
$LN1@DrawDogfig:

; 152  : 			{
; 153  : 				ang = max ( min (targetData->aspect * RTD * 0.1F, 18.0F), -18.0F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+68]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@41900000
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@DrawDogfig
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+68]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR tv236[ebp], xmm0
	jmp	SHORT $LN26@DrawDogfig
$LN25@DrawDogfig:
	movss	xmm0, DWORD PTR __real@41900000
	movss	DWORD PTR tv236[ebp], xmm0
$LN26@DrawDogfig:
	movss	xmm0, DWORD PTR tv236[ebp]
	comiss	xmm0, DWORD PTR __real@c1900000
	jbe	SHORT $LN29@DrawDogfig
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	movss	xmm0, DWORD PTR [edx+68]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@41900000
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@DrawDogfig
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	movss	xmm0, DWORD PTR [ecx+68]
	mulss	xmm0, DWORD PTR __real@42652ee1
	mulss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR tv249[ebp], xmm0
	jmp	SHORT $LN28@DrawDogfig
$LN27@DrawDogfig:
	movss	xmm0, DWORD PTR __real@41900000
	movss	DWORD PTR tv249[ebp], xmm0
$LN28@DrawDogfig:
	movss	xmm0, DWORD PTR tv249[ebp]
	movss	DWORD PTR tv250[ebp], xmm0
	jmp	SHORT $LN30@DrawDogfig
$LN29@DrawDogfig:
	movss	xmm0, DWORD PTR __real@c1900000
	movss	DWORD PTR tv250[ebp], xmm0
$LN30@DrawDogfig:
	movss	xmm0, DWORD PTR tv250[ebp]
	movss	DWORD PTR _ang$[ebp], xmm0

; 154  : 				sprintf (str, "AA %02.0f%c", ang, (targetData->azFrom > 0.0F ? 'R' : 'L'));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN31@DrawDogfig
	mov	BYTE PTR tv255[ebp], 82			; 00000052H
	jmp	SHORT $LN32@DrawDogfig
$LN31@DrawDogfig:
	mov	BYTE PTR tv255[ebp], 76			; 0000004cH
$LN32@DrawDogfig:
	movsx	ecx, BYTE PTR tv255[ebp]
	push	ecx
	cvtss2sd xmm0, DWORD PTR _ang$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0M@PHLMOPGK@AA?5?$CF02?40f?$CFc?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 155  : 				display->TextCenter (
; 156  : 				hudWinX[BORESIGHT_CROSS_WINDOW] + hudWinWidth[BORESIGHT_CROSS_WINDOW] * 0.5F,
; 157  : 				hudWinY[BORESIGHT_CROSS_WINDOW] + hudWinHeight[BORESIGHT_CROSS_WINDOW] * 0.5F + 0.05F +
; 158  : 				1.2F * display->TextHeight(), str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, 4
	imul	edx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinHeight@@3PAMA[edx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinY@@3PAMA[ecx]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+88]
	movss	DWORD PTR tv381[ebp], xmm0
	call	edx
	fstp	DWORD PTR tv367[ebp]
	movss	xmm0, DWORD PTR tv367[ebp]
	mulss	xmm0, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR tv381[ebp]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	mov	eax, 4
	imul	eax, 44					; 0000002cH
	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	movss	xmm0, DWORD PTR ?hudWinWidth@@3PAMA[ecx]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR ?hudWinX@@3PAMA[eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN2@DrawDogfig:

; 159  : 			}
; 160  :     }
; 161  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawDogfight@HudClass@@AAEXXZ ENDP			; HudClass::DrawDogfight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mislhud.cpp
_TEXT	SEGMENT
tv81 = -16						; size = 4
_wpn$ = -12						; size = 4
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawAirMissile@HudClass@@AAEXXZ PROC			; HudClass::DrawAirMissile
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	SimWeaponClass* wpn; 
; 310  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 311  : 	wpn = playerAC->Sms->GetCurrentWeapon(); // Marco Edit - for Aim9 Reticle Size

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _wpn$[ebp], eax

; 312  : 	ShiAssert(wpn == NULL || wpn->IsMissile());
; 313  : 	switch (FCC->GetSubMode())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	mov	DWORD PTR tv81[ebp], eax
	cmp	DWORD PTR tv81[ebp], 5
	je	SHORT $LN37@DrawAirMis
	cmp	DWORD PTR tv81[ebp], 6
	je	$LN12@DrawAirMis
	jmp	$LN38@DrawAirMis
$LN37@DrawAirMis:

; 314  : 	{
; 315  : 	case FireControlComputer::Aim9:
; 316  : 		if (targetPtr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN36@DrawAirMis

; 317  : 		{
; 318  : 			//MI changed
; 319  : 			if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN35@DrawAirMis

; 320  : 				DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 321  : 			else

	jmp	SHORT $LN34@DrawAirMis
$LN35@DrawAirMis:

; 322  : 				DrawAATDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAATDBox@HudClass@@AAEXXZ		; HudClass::DrawAATDBox
$LN34@DrawAirMis:

; 323  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN32@DrawAirMis
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	$LN25@DrawAirMis
$LN32@DrawAirMis:

; 324  : 			{
; 325  : 				
; 326  : 				DrawAim9DLZ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9DLZ@HudClass@@AAEXXZ		; HudClass::DrawAim9DLZ

; 327  : 				DrawAim9Diamond();//me123 addet

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond

; 328  : 				if (wpn)

	cmp	DWORD PTR _wpn$[ebp], 0
	je	$LN25@DrawAirMis

; 329  : 				{
; 330  : 					// Marco Edit - check for our missile type (ie. REAR ASPECT)
; 331  : 					// if (wc && wc->Flags & WEAP_REAR_ASPECT)
; 332  : 					// Marco Edit - hack - check for 9P specifically)
; 333  : 					wpn = playerAC->Sms->GetCurrentWeapon(); // Marco Edit - for Aim9 Reticle Size

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+940]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _wpn$[ebp], eax

; 334  : 					if (g_bRealisticAvionics && ((CampBaseClass*)wpn)->GetSPType() == SPTYPE_AIM9P)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN30@DrawAirMis
	mov	ecx, DWORD PTR _wpn$[ebp]
	call	?GetSPType@CampBaseClass@@QBEEXZ	; CampBaseClass::GetSPType
	movzx	edx, al
	cmp	edx, 17					; 00000011H
	jne	SHORT $LN30@DrawAirMis

; 335  : 					{
; 336  : 						DrawAim9Reticle(SRM_REARAA_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e051eb8
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 337  : 		
; 338  : 					}
; 339  : 					else

	jmp	SHORT $LN25@DrawAirMis
$LN30@DrawAirMis:

; 340  : 					{
; 341  : 						// if (((MissileClass*)wpn)->isCaged && !((MissileClass*)wpn)->isSpot)
; 342  : 						if ( g_bRealisticAvionics && ((MissileClass*)wpn)->isSpot || ( !((MissileClass*)wpn)->isCaged && ((MissileClass*)wpn)->targetPtr ) )

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN26@DrawAirMis
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+732], 0
	jne	SHORT $LN27@DrawAirMis
$LN26@DrawAirMis:
	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+728], 0
	jne	SHORT $LN28@DrawAirMis
	mov	eax, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [eax+656], 0
	je	SHORT $LN28@DrawAirMis
$LN27@DrawAirMis:

; 343  : 						{
; 344  : 							DrawAim9Reticle(SRM_UNCAGE_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 345  : 						}
; 346  : 						else

	jmp	SHORT $LN25@DrawAirMis
$LN28@DrawAirMis:

; 347  : 						{
; 348  : 							DrawAim9Reticle(SRM_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle
$LN25@DrawAirMis:

; 349  : 						}
; 350  : 					}
; 351  : 				}
; 352  : 			}
; 353  : 		}
; 354  : 		else

	jmp	$LN15@DrawAirMis
$LN36@DrawAirMis:

; 355  : 		{
; 356  : 			if (wpn)

	cmp	DWORD PTR _wpn$[ebp], 0
	je	$LN15@DrawAirMis

; 357  : 			{
; 358  : 				if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN21@DrawAirMis
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	$LN15@DrawAirMis
$LN21@DrawAirMis:

; 359  : 				{
; 360  : 					// Marco Edit - check for our missile type (ie. REAR ASPECT)
; 361  : 					// if (wc && wc->Flags & WEAP_REAR_ASPECT)
; 362  : 					// Marco Edit - hack - check for 9P specifically)
; 363  : 					wpn = playerAC->Sms->GetCurrentWeapon(); // Marco Edit - for Aim9 Reticle Size

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _wpn$[ebp], eax

; 364  : 					if (g_bRealisticAvionics && ((CampBaseClass*)wpn)->GetSPType() == SPTYPE_AIM9P)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN20@DrawAirMis
	mov	ecx, DWORD PTR _wpn$[ebp]
	call	?GetSPType@CampBaseClass@@QBEEXZ	; CampBaseClass::GetSPType
	movzx	ecx, al
	cmp	ecx, 17					; 00000011H
	jne	SHORT $LN20@DrawAirMis

; 365  : 					{
; 366  : 						DrawAim9Reticle(SRM_REARAA_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e051eb8
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 367  : 					}
; 368  : 					else

	jmp	SHORT $LN15@DrawAirMis
$LN20@DrawAirMis:

; 369  : 					{
; 370  : 						// if (((MissileClass*)wpn)->isCaged && !((MissileClass*)wpn)->isSpot)
; 371  : 						if ( g_bRealisticAvionics && ((MissileClass*)wpn)->isSpot || ( !((MissileClass*)wpn)->isCaged && ((MissileClass*)wpn)->targetPtr ) )

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN16@DrawAirMis
	mov	eax, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [eax+732], 0
	jne	SHORT $LN17@DrawAirMis
$LN16@DrawAirMis:
	mov	ecx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [ecx+728], 0
	jne	SHORT $LN18@DrawAirMis
	mov	edx, DWORD PTR _wpn$[ebp]
	cmp	DWORD PTR [edx+656], 0
	je	SHORT $LN18@DrawAirMis
$LN17@DrawAirMis:

; 372  : 						{
; 373  : 							DrawAim9Reticle(SRM_UNCAGE_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle

; 374  : 						}
; 375  : 						else

	jmp	SHORT $LN15@DrawAirMis
$LN18@DrawAirMis:

; 376  : 						{
; 377  : 							DrawAim9Reticle(SRM_RETICLE_SIZE, TRUE, TRUE);

	push	1
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Reticle@HudClass@@AAEXMHH@Z	; HudClass::DrawAim9Reticle
$LN15@DrawAirMis:

; 378  : 						}
; 379  : 					}
; 380  : 				}
; 381  : 			}
; 382  : 		}
; 383  : 		if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN13@DrawAirMis
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN14@DrawAirMis
$LN13@DrawAirMis:

; 384  : 			{
; 385  : 				DrawAim9Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim9Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim9Diamond
$LN14@DrawAirMis:

; 386  : 			}
; 387  : 		break;

	jmp	$LN38@DrawAirMis
$LN12@DrawAirMis:

; 388  : 		
; 389  : 	case FireControlComputer::Aim120:
; 390  : 	    if (targetPtr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	$LN11@DrawAirMis

; 391  : 	    {
; 392  : 			//MI changed
; 393  : 			if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN10@DrawAirMis

; 394  : 			DrawTDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTDBox@HudClass@@AAEXXZ		; HudClass::DrawTDBox

; 395  : 			else

	jmp	SHORT $LN9@DrawAirMis
$LN10@DrawAirMis:

; 396  : 			DrawAATDBox();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAATDBox@HudClass@@AAEXXZ		; HudClass::DrawAATDBox
$LN9@DrawAirMis:

; 397  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN7@DrawAirMis
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN8@DrawAirMis
$LN7@DrawAirMis:

; 398  : 			{
; 399  : 				if ( flash ||
; 400  : 					targetData->range > FCC->missileRneMax ||
; 401  : 					targetData->range < FCC->missileRneMin)

	cmp	DWORD PTR ?flash@HudClass@@0HA, 0	; HudClass::flash
	jne	SHORT $LN5@DrawAirMis
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [eax+296]
	ja	SHORT $LN5@DrawAirMis
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	movss	xmm0, DWORD PTR [ecx+300]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN6@DrawAirMis
$LN5@DrawAirMis:

; 402  : 					DrawMissileReticle(FCC->Aim120ASECRadius(targetData->range), FALSE, TRUE);

	push	1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	ecx
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?Aim120ASECRadius@FireControlComputer@@QAEMM@Z ; FireControlComputer::Aim120ASECRadius
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle
$LN6@DrawAirMis:

; 403  : 				DrawAim120DLZ(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120DLZ@HudClass@@AAEX_N@Z	; HudClass::DrawAim120DLZ

; 404  : 				DrawAim120ASE();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120ASE@HudClass@@AAEXXZ		; HudClass::DrawAim120ASE
$LN8@DrawAirMis:

; 405  : 			}
; 406  : 		}
; 407  : 		else { // JPG 17 Jan 04 - No for the last time

	jmp	SHORT $LN3@DrawAirMis
$LN11@DrawAirMis:

; 408  : 			if ((playerAC->Sms->MasterArm() == SMSBaseClass::Arm) || (playerAC->Sms->MasterArm() == SMSBaseClass::Sim))

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [edx+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 2
	je	SHORT $LN2@DrawAirMis
	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	call	?MasterArm@SMSBaseClass@@QAE?AW4MasterArmState@1@XZ ; SMSBaseClass::MasterArm
	cmp	eax, 1
	jne	SHORT $LN3@DrawAirMis
$LN2@DrawAirMis:

; 409  : 			{
; 410  : 				//MI make it dependant on missil bore/slave
; 411  : 				//if(playerAC && playerAC->Sms && playerAC->Sms->curWeapon && 
; 412  : 				//	((MissileClass*)playerAC->Sms->curWeapon)->isSlave)
; 413  : 				//	DrawMissileReticle(0.3F, FALSE, TRUE);
; 414  : 				//else
; 415  : 			DrawMissileReticle(MRM_RETICLE_SIZE, FALSE, TRUE);

	push	1
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawMissileReticle@HudClass@@AAEXMHH@Z	; HudClass::DrawMissileReticle

; 416  : 			DrawAim120Diamond();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAim120Diamond@HudClass@@AAEXXZ	; HudClass::DrawAim120Diamond
$LN3@DrawAirMis:
$LN38@DrawAirMis:

; 417  : 			}
; 418  : 	    }
; 419  : 	    break;
; 420  : 	}
; 421  : 	
; 422  : 	// Add waypoint info
; 423  : 	if (waypointValid)

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+4952]
	test	edx, edx
	je	SHORT $LN1@DrawAirMis

; 424  : 	{
; 425  : 		TimeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TimeToSteerpoint@HudClass@@AAEXXZ	; HudClass::TimeToSteerpoint

; 426  : 		RangeToSteerpoint();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RangeToSteerpoint@HudClass@@AAEXXZ	; HudClass::RangeToSteerpoint
$LN1@DrawAirMis:

; 427  : 	}
; 428  : 	
; 429  : 	CheckBreakX();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckBreakX@HudClass@@AAEXXZ		; HudClass::CheckBreakX

; 430  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawAirMissile@HudClass@@AAEXXZ ENDP			; HudClass::DrawAirMissile
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
