; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\DISPLAYS\Mfd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?MfdDisplay@@3PAPAVMFDClass@@A			; MfdDisplay
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?mycolor@@3KA					; mycolor
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?lMFDul@@3UTpoint@@A				; lMFDul
PUBLIC	?lMFDur@@3UTpoint@@A				; lMFDur
PUBLIC	?lMFDll@@3UTpoint@@A				; lMFDll
PUBLIC	?ltMFDleft@@3HA					; ltMFDleft
PUBLIC	?ltMFDtop@@3HA					; ltMFDtop
PUBLIC	?ltMFDright@@3HA				; ltMFDright
PUBLIC	?ltMFDbottom@@3HA				; ltMFDbottom
PUBLIC	?lcMFDblend@@3DA				; lcMFDblend
PUBLIC	?lcMFDalpha@@3MA				; lcMFDalpha
PUBLIC	?rMFDul@@3UTpoint@@A				; rMFDul
PUBLIC	?rMFDur@@3UTpoint@@A				; rMFDur
PUBLIC	?rMFDll@@3UTpoint@@A				; rMFDll
PUBLIC	?rtMFDleft@@3HA					; rtMFDleft
PUBLIC	?rtMFDtop@@3HA					; rtMFDtop
PUBLIC	?rtMFDright@@3HA				; rtMFDright
PUBLIC	?rtMFDbottom@@3HA				; rtMFDbottom
PUBLIC	?rcMFDblend@@3DA				; rcMFDblend
PUBLIC	?rcMFDalpha@@3MA				; rcMFDalpha
PUBLIC	??_C@_02KNHHEEKP@?5?5?$AA@			; `string'
PUBLIC	??_C@_03GGEOHGLC@TFR?$AA@			; `string'
PUBLIC	??_C@_04MIGKMLBH@FLIR?$AA@			; `string'
PUBLIC	??_C@_04OIKJMBFP@TEST?$AA@			; `string'
PUBLIC	??_C@_03CMHGNCKF@DTE?$AA@			; `string'
PUBLIC	??_C@_04NMOGHPIA@FLCS?$AA@			; `string'
PUBLIC	??_C@_03IKCHFLMD@WPN?$AA@			; `string'
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	??_C@_03FFLKHOAH@TGP?$AA@			; `string'
PUBLIC	??_C@_03HKPEEKNJ@HSD?$AA@			; `string'
PUBLIC	??_C@_03JKJFCLEN@FCR?$AA@			; `string'
PUBLIC	??_C@_03OONHJAKL@SMS?$AA@			; `string'
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	??_C@_03FOMBOACJ@RWR?$AA@			; `string'
PUBLIC	??_C@_03GFFGDNMH@HAD?$AA@			; `string'
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?initialMfdL@MFDClass@@2PAY02W4MfdMode@1@A	; MFDClass::initialMfdL
PUBLIC	?initialMfdR@MFDClass@@2PAY02W4MfdMode@1@A	; MFDClass::initialMfdR
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A	; MFDClass::mfdDraw
PUBLIC	?HadDrawable@MFDClass@@2PAVDrawableClass@@A	; MFDClass::HadDrawable
PUBLIC	?ModeNames@MFDClass@@0PAPADA			; MFDClass::ModeNames
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
?MfdDisplay@@3PAPAVMFDClass@@A DD 04H DUP (?)		; MfdDisplay
?mycolor@@3KA DD 01H DUP (?)				; mycolor
?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A DD 09H DUP (?) ; MFDClass::mfdDraw
?HadDrawable@MFDClass@@2PAVDrawableClass@@A DD 01H DUP (?) ; MFDClass::HadDrawable
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ??_C@_03GFFGDNMH@HAD?$AA@
CONST	SEGMENT
??_C@_03GFFGDNMH@HAD?$AA@ DB 'HAD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FOMBOACJ@RWR?$AA@
CONST	SEGMENT
??_C@_03FOMBOACJ@RWR?$AA@ DB 'RWR', 00H			; `string'
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ??_C@_03OONHJAKL@SMS?$AA@
CONST	SEGMENT
??_C@_03OONHJAKL@SMS?$AA@ DB 'SMS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR?$AA@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR?$AA@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HKPEEKNJ@HSD?$AA@
CONST	SEGMENT
??_C@_03HKPEEKNJ@HSD?$AA@ DB 'HSD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFLKHOAH@TGP?$AA@
CONST	SEGMENT
??_C@_03FFLKHOAH@TGP?$AA@ DB 'TGP', 00H			; `string'
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ??_C@_03IKCHFLMD@WPN?$AA@
CONST	SEGMENT
??_C@_03IKCHFLMD@WPN?$AA@ DB 'WPN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NMOGHPIA@FLCS?$AA@
CONST	SEGMENT
??_C@_04NMOGHPIA@FLCS?$AA@ DB 'FLCS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMHGNCKF@DTE?$AA@
CONST	SEGMENT
??_C@_03CMHGNCKF@DTE?$AA@ DB 'DTE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST?$AA@
CONST	SEGMENT
??_C@_04OIKJMBFP@TEST?$AA@ DB 'TEST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIGKMLBH@FLIR?$AA@
CONST	SEGMENT
??_C@_04MIGKMLBH@FLIR?$AA@ DB 'FLIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GGEOHGLC@TFR?$AA@
CONST	SEGMENT
??_C@_03GGEOHGLC@TFR?$AA@ DB 'TFR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNHHEEKP@?5?5?$AA@
CONST	SEGMENT
??_C@_02KNHHEEKP@?5?5?$AA@ DB '  ', 00H			; `string'
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_NEAR_CLIP DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
_DATA	SEGMENT
_matrix44_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?lMFDul@@3UTpoint@@A DD 04191a3d7r		; 18.205 ; lMFDul
	DD	0c0e2d917r			; -7.089
	DD	040f96042r			; 7.793
?lMFDur@@3UTpoint@@A DD 04191a3d7r		; 18.205 ; lMFDur
	DD	0c03147aer			; -2.77
	DD	040f96042r			; 7.793
?lMFDll@@3UTpoint@@A DD 0418c020cr		; 17.501 ; lMFDll
	DD	0c0e2d917r			; -7.089
	DD	0413d0e56r			; 11.816
?ltMFDleft@@3HA DD 0109H				; ltMFDleft
?ltMFDtop@@3HA DD 05H					; ltMFDtop
?ltMFDright@@3HA DD 019fH				; ltMFDright
?ltMFDbottom@@3HA DD 09bH				; ltMFDbottom
?lcMFDblend@@3DA DB 067H				; lcMFDblend
?rcMFDblend@@3DA DB 067H				; rcMFDblend
	ORG $+2
?lcMFDalpha@@3MA DD 03f800000r			; 1	; lcMFDalpha
?rMFDul@@3UTpoint@@A DD 0419172b0r		; 18.181 ; rMFDul
	DD	040356042r			; 2.834
	DD	040fc4189r			; 7.883
?rMFDur@@3UTpoint@@A DD 0419172b0r		; 18.181 ; rMFDur
	DD	040dfced9r			; 6.994
	DD	040fc4189r			; 7.883
?rMFDll@@3UTpoint@@A DD 0418bcccdr		; 17.475 ; rMFDll
	DD	040356042r			; 2.834
	DD	0413fa5e3r			; 11.978
?rtMFDleft@@3HA DD 0109H				; rtMFDleft
?rtMFDtop@@3HA DD 0109H					; rtMFDtop
?rtMFDright@@3HA DD 019fH				; rtMFDright
?rtMFDbottom@@3HA DD 019fH				; rtMFDbottom
?rcMFDalpha@@3MA DD 03f800000r			; 1	; rcMFDalpha
_MFDMasks DD	0ffffffH
	DD	0b0b0b0H
	DD	07f7f7fH
	DD	03f3f3fH
	DD	01f1f1fH
?initialMfdL@MFDClass@@2PAY02W4MfdMode@1@A DD 0aH	; MFDClass::initialMfdL
	DD	00H
	DD	04H
	DD	0aH
	DD	00H
	DD	04H
	DD	0aH
	DD	00H
	DD	04H
	DD	0aH
	DD	00H
	DD	04H
	DD	0aH
	DD	00H
	DD	04H
?initialMfdR@MFDClass@@2PAY02W4MfdMode@1@A DD 0bH	; MFDClass::initialMfdR
	DD	09H
	DD	07H
	DD	0bH
	DD	09H
	DD	07H
	DD	09H
	DD	0bH
	DD	06H
	DD	0bH
	DD	09H
	DD	07H
	DD	0bH
	DD	09H
	DD	07H
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_matrix33_ident DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?ModeNames@MFDClass@@0PAPADA DD FLAT:??_C@_02KNHHEEKP@?5?5?$AA@ ; MFDClass::ModeNames
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DD	FLAT:??_C@_03GGEOHGLC@TFR?$AA@
	DD	FLAT:??_C@_04MIGKMLBH@FLIR?$AA@
	DD	FLAT:??_C@_04OIKJMBFP@TEST?$AA@
	DD	FLAT:??_C@_03CMHGNCKF@DTE?$AA@
	DD	FLAT:??_C@_04NMOGHPIA@FLCS?$AA@
	DD	FLAT:??_C@_03IKCHFLMD@WPN?$AA@
	DD	FLAT:??_C@_03FFLKHOAH@TGP?$AA@
	DD	FLAT:??_C@_03HKPEEKNJ@HSD?$AA@
	DD	FLAT:??_C@_03JKJFCLEN@FCR?$AA@
	DD	FLAT:??_C@_03OONHJAKL@SMS?$AA@
	DD	FLAT:??_C@_03FOMBOACJ@RWR?$AA@
	DD	FLAT:??_C@_03GFFGDNMH@HAD?$AA@
	ORG $+4
_DATA	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0DrawableClass@@IAE@XZ			; DrawableClass::DrawableClass
PUBLIC	??1DrawableClass@@UAE@XZ			; DrawableClass::~DrawableClass
PUBLIC	?Display@DrawableClass@@UAEXPAVVirtualDisplay@@@Z ; DrawableClass::Display
PUBLIC	?DisplayInit@DrawableClass@@UAEXPAVImageBuffer@@@Z ; DrawableClass::DisplayInit
PUBLIC	?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ ; DrawableClass::GetDisplay
PUBLIC	?SetMFD@DrawableClass@@QAEXH@Z			; DrawableClass::SetMFD
PUBLIC	?OnMFD@DrawableClass@@QAEHXZ			; DrawableClass::OnMFD
PUBLIC	?SetIntensity@DrawableClass@@QAEXI@Z		; DrawableClass::SetIntensity
PUBLIC	?PushButton@DrawableClass@@UAEXHH@Z		; DrawableClass::PushButton
PUBLIC	??_GDrawableClass@@UAEPAXI@Z			; DrawableClass::`scalar deleting destructor'
PUBLIC	??0MFDClass@@QAE@HPAVRender3D@@@Z		; MFDClass::MFDClass
PUBLIC	??1MFDClass@@QAE@XZ				; MFDClass::~MFDClass
PUBLIC	?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z		; MFDClass::GetSP
PUBLIC	?StealMode@MFDClass@@QAEXW4MfdMode@1@@Z		; MFDClass::StealMode
PUBLIC	?SetNewMasterMode@MFDClass@@QAEXH@Z		; MFDClass::SetNewMasterMode
PUBLIC	?SetNewModeAndPos@MFDClass@@QAEXHW4MfdMode@1@@Z	; MFDClass::SetNewModeAndPos
PUBLIC	?ModeName@MFDClass@@SAPADH@Z			; MFDClass::ModeName
PUBLIC	?CreateDrawables@MFDClass@@SAXXZ		; MFDClass::CreateDrawables
PUBLIC	?DestroyDrawables@MFDClass@@SAXXZ		; MFDClass::DestroyDrawables
PUBLIC	?ButtonPushed@MFDClass@@QAEXHH@Z		; MFDClass::ButtonPushed
PUBLIC	?NextMode@MFDClass@@QAEXXZ			; MFDClass::NextMode
PUBLIC	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z		; MFDClass::SetMode
PUBLIC	?SetOwnship@MFDClass@@QAEXPAVAircraftClass@@@Z	; MFDClass::SetOwnship
PUBLIC	?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ	; MFDClass::GetOwnShip
PUBLIC	?SetNewRenderer@MFDClass@@QAEXPAVRender3D@@@Z	; MFDClass::SetNewRenderer
PUBLIC	?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetNewMode
PUBLIC	?Exec@MFDClass@@QAEXHH@Z			; MFDClass::Exec
PUBLIC	?Exit@MFDClass@@QAEXXZ				; MFDClass::Exit
PUBLIC	?UpdateVirtualPosition@MFDClass@@QAEXPBUTpoint@@PBUTrotation@@@Z ; MFDClass::UpdateVirtualPosition
PUBLIC	?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z ; MFDClass::SetImageBuffer
PUBLIC	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ	; MFDClass::GetDrawable
PUBLIC	?SetDrawable@MFDClass@@QAEXPAVDrawableClass@@@Z	; MFDClass::SetDrawable
PUBLIC	?Color@MFDClass@@QAEHXZ				; MFDClass::Color
PUBLIC	?GetIntensity@MFDClass@@QAEIXZ			; MFDClass::GetIntensity
PUBLIC	?IncreaseBrightness@MFDClass@@QAEXXZ		; MFDClass::IncreaseBrightness
PUBLIC	?DecreaseBrightness@MFDClass@@QAEXXZ		; MFDClass::DecreaseBrightness
PUBLIC	?FreeDrawable@MFDClass@@AAEXXZ			; MFDClass::FreeDrawable
PUBLIC	??0MfdDrawable@@QAE@XZ				; MfdDrawable::MfdDrawable
PUBLIC	??1MfdDrawable@@UAE@XZ				; MfdDrawable::~MfdDrawable
PUBLIC	?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z ; MfdDrawable::DisplayInit
PUBLIC	?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z	; MfdDrawable::Display
PUBLIC	?PushButton@MfdDrawable@@UAEXHH@Z		; MfdDrawable::PushButton
PUBLIC	?BottomRow@MfdDrawable@@QAEXXZ			; MfdDrawable::BottomRow
PUBLIC	?DefaultLabel@MfdDrawable@@QAEXH@Z		; MfdDrawable::DefaultLabel
PUBLIC	?DrawReference@MfdDrawable@@QAEXPAVAircraftClass@@@Z ; MfdDrawable::DrawReference
PUBLIC	?DrawRedBreak@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z ; MfdDrawable::DrawRedBreak
PUBLIC	?TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z ; MfdDrawable::TGPAttitudeWarning
PUBLIC	??_GMfdDrawable@@UAEPAXI@Z			; MfdDrawable::`scalar deleting destructor'
PUBLIC	??0MfdMenuDrawable@@QAE@XZ			; MfdMenuDrawable::MfdMenuDrawable
PUBLIC	?SetCurMode@MfdMenuDrawable@@QAEXW4MfdMode@MFDClass@@@Z ; MfdMenuDrawable::SetCurMode
PUBLIC	??1MfdMenuDrawable@@UAE@XZ			; MfdMenuDrawable::~MfdMenuDrawable
PUBLIC	??_GMfdMenuDrawable@@UAEPAXI@Z			; MfdMenuDrawable::`scalar deleting destructor'
PUBLIC	??0LantirnDrawable@@QAE@XZ			; LantirnDrawable::LantirnDrawable
PUBLIC	??1LantirnDrawable@@UAE@XZ			; LantirnDrawable::~LantirnDrawable
PUBLIC	??_GLantirnDrawable@@UAEPAXI@Z			; LantirnDrawable::`scalar deleting destructor'
PUBLIC	??0BlankMfdDrawable@@QAE@XZ			; BlankMfdDrawable::BlankMfdDrawable
PUBLIC	??1BlankMfdDrawable@@UAE@XZ			; BlankMfdDrawable::~BlankMfdDrawable
PUBLIC	??_GBlankMfdDrawable@@UAEPAXI@Z			; BlankMfdDrawable::`scalar deleting destructor'
PUBLIC	??0DteMfdDrawable@@QAE@XZ			; DteMfdDrawable::DteMfdDrawable
PUBLIC	??1DteMfdDrawable@@UAE@XZ			; DteMfdDrawable::~DteMfdDrawable
PUBLIC	??_GDteMfdDrawable@@UAEPAXI@Z			; DteMfdDrawable::`scalar deleting destructor'
PUBLIC	??0FlcsMfdDrawable@@QAE@XZ			; FlcsMfdDrawable::FlcsMfdDrawable
PUBLIC	??1FlcsMfdDrawable@@UAE@XZ			; FlcsMfdDrawable::~FlcsMfdDrawable
PUBLIC	??_GFlcsMfdDrawable@@UAEPAXI@Z			; FlcsMfdDrawable::`scalar deleting destructor'
PUBLIC	??0FlirMfdDrawable@@QAE@XZ			; FlirMfdDrawable::FlirMfdDrawable
PUBLIC	??1FlirMfdDrawable@@UAE@XZ			; FlirMfdDrawable::~FlirMfdDrawable
PUBLIC	??_GFlirMfdDrawable@@UAEPAXI@Z			; FlirMfdDrawable::`scalar deleting destructor'
PUBLIC	?MFDSwapDisplays@@YAXXZ				; MFDSwapDisplays
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CurrentForegroundColor@ContextMPR@@QAEHXZ	; ContextMPR::CurrentForegroundColor
PUBLIC	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
PUBLIC	?IsSetFlag@SimBaseClass@@QBEHH@Z		; SimBaseClass::IsSetFlag
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
PUBLIC	?IsAGMasterMode@FireControlComputer@@QAEHXZ	; FireControlComputer::IsAGMasterMode
PUBLIC	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
PUBLIC	??0VirtualDisplay@@QAE@XZ			; VirtualDisplay::VirtualDisplay
PUBLIC	??1VirtualDisplay@@UAE@XZ			; VirtualDisplay::~VirtualDisplay
PUBLIC	?Circle@VirtualDisplay@@UAEXMMM@Z		; VirtualDisplay::Circle
PUBLIC	?Arc@VirtualDisplay@@UAEXMMMMM@Z		; VirtualDisplay::Arc
PUBLIC	?TextWidth@VirtualDisplay@@UAEMPAD@Z		; VirtualDisplay::TextWidth
PUBLIC	?TextHeight@VirtualDisplay@@UAEMXZ		; VirtualDisplay::TextHeight
PUBLIC	?CurFont@VirtualDisplay@@SAHXZ			; VirtualDisplay::CurFont
PUBLIC	?SetLineStyle@VirtualDisplay@@UAEXH@Z		; VirtualDisplay::SetLineStyle
PUBLIC	?Color@VirtualDisplay@@UAEKXZ			; VirtualDisplay::Color
PUBLIC	??_GVirtualDisplay@@UAEPAXI@Z			; VirtualDisplay::`scalar deleting destructor'
PUBLIC	??0Render2D@@QAE@XZ				; Render2D::Render2D
PUBLIC	??1Render2D@@UAE@XZ				; Render2D::~Render2D
PUBLIC	?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ	; Render2D::GetImageBuffer
PUBLIC	?ClearDraw@Render2D@@UAEXXZ			; Render2D::ClearDraw
PUBLIC	?ClearZBuffer@Render2D@@UAEXXZ			; Render2D::ClearZBuffer
PUBLIC	?Color@Render2D@@UAEKXZ				; Render2D::Color
PUBLIC	?SetColor@Render2D@@UAEXK@Z			; Render2D::SetColor
PUBLIC	?SetBackground@Render2D@@UAEXK@Z		; Render2D::SetBackground
PUBLIC	?SetLineStyle@Render2D@@UAEXH@Z			; Render2D::SetLineStyle
PUBLIC	??_GRender2D@@UAEPAXI@Z				; Render2D::`scalar deleting destructor'
PUBLIC	?SetGridVisible@PlayerRwrClass@@QAEXH@Z		; PlayerRwrClass::SetGridVisible
PUBLIC	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ	; PlayerOptionsClass::GetAvionicsType
PUBLIC	??0Canvas3D@@QAE@XZ				; Canvas3D::Canvas3D
PUBLIC	??1Canvas3D@@UAE@XZ				; Canvas3D::~Canvas3D
PUBLIC	?ResetTargetRenderer@Canvas3D@@QAEXPAVRender3D@@@Z ; Canvas3D::ResetTargetRenderer
PUBLIC	?StartDraw@Canvas3D@@UAEXXZ			; Canvas3D::StartDraw
PUBLIC	?ClearDraw@Canvas3D@@UAEXXZ			; Canvas3D::ClearDraw
PUBLIC	?EndDraw@Canvas3D@@UAEXXZ			; Canvas3D::EndDraw
PUBLIC	?Render2DTri@Canvas3D@@UAEXMMMMMM@Z		; Canvas3D::Render2DTri
PUBLIC	?SetLineStyle@Canvas3D@@UAEXH@Z			; Canvas3D::SetLineStyle
PUBLIC	?Color@Canvas3D@@UAEKXZ				; Canvas3D::Color
PUBLIC	?SetColor@Canvas3D@@UAEXK@Z			; Canvas3D::SetColor
PUBLIC	?SetBackground@Canvas3D@@UAEXK@Z		; Canvas3D::SetBackground
PUBLIC	?ScreenText@Canvas3D@@UAEXMMPBDH@Z		; Canvas3D::ScreenText
PUBLIC	??_GCanvas3D@@UAEPAXI@Z				; Canvas3D::`scalar deleting destructor'
PUBLIC	?IsEnabled@LantirnClass@@QAE_NXZ		; LantirnClass::IsEnabled
PUBLIC	?GetDisplayRange@RadarDopplerClass@@QAEMXZ	; RadarDopplerClass::GetDisplayRange
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?ClearFlightDataOsbLabels@@YAXXZ		; ClearFlightDataOsbLabels
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7DrawableClass@@6B@				; DrawableClass::`vftable'
PUBLIC	??_7MfdDrawable@@6B@				; MfdDrawable::`vftable'
PUBLIC	??_7MfdMenuDrawable@@6B@			; MfdMenuDrawable::`vftable'
PUBLIC	??_7LantirnDrawable@@6B@			; LantirnDrawable::`vftable'
PUBLIC	??_7BlankMfdDrawable@@6B@			; BlankMfdDrawable::`vftable'
PUBLIC	??_7DteMfdDrawable@@6B@				; DteMfdDrawable::`vftable'
PUBLIC	??_7FlcsMfdDrawable@@6B@			; FlcsMfdDrawable::`vftable'
PUBLIC	??_7FlirMfdDrawable@@6B@			; FlirMfdDrawable::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7VirtualDisplay@@6B@				; VirtualDisplay::`vftable'
PUBLIC	??_7Render2D@@6B@				; Render2D::`vftable'
PUBLIC	??_7Canvas3D@@6B@				; Canvas3D::`vftable'
PUBLIC	??_C@_03DNAAPCJD@S?9J?$AA@			; `string'
PUBLIC	??_C@_04LKFIONEM@DCLT?$AA@			; `string'
PUBLIC	??_C@_04NLFHDAEB@SWAP?$AA@			; `string'
PUBLIC	??_C@_05GCOJDIEO@CHECK?$AA@			; `string'
PUBLIC	??_C@_08DFGDJPOO@ATTITUDE?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4VirtualDisplay@@6B@			; VirtualDisplay::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVVirtualDisplay@@@8			; VirtualDisplay `RTTI Type Descriptor'
PUBLIC	??_R3VirtualDisplay@@8				; VirtualDisplay::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VirtualDisplay@@8				; VirtualDisplay::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VirtualDisplay@@8			; VirtualDisplay::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DrawableClass@@6B@				; DrawableClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDrawableClass@@@8			; DrawableClass `RTTI Type Descriptor'
PUBLIC	??_R3DrawableClass@@8				; DrawableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableClass@@8				; DrawableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableClass@@8			; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Render2D@@8			; Render2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRender2D@@@8				; Render2D `RTTI Type Descriptor'
PUBLIC	??_R3Render2D@@8				; Render2D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Render2D@@8				; Render2D::`RTTI Base Class Array'
PUBLIC	??_R4Canvas3D@@6B@				; Canvas3D::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCanvas3D@@@8				; Canvas3D `RTTI Type Descriptor'
PUBLIC	??_R3Canvas3D@@8				; Canvas3D::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Canvas3D@@8				; Canvas3D::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Canvas3D@@8			; Canvas3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MfdDrawable@@6B@				; MfdDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMfdDrawable@@@8				; MfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3MfdDrawable@@8				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MfdDrawable@@8				; MfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MfdDrawable@@8			; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MfdMenuDrawable@@6B@			; MfdMenuDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMfdMenuDrawable@@@8			; MfdMenuDrawable `RTTI Type Descriptor'
PUBLIC	??_R3MfdMenuDrawable@@8				; MfdMenuDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MfdMenuDrawable@@8				; MfdMenuDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MfdMenuDrawable@@8		; MfdMenuDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4LantirnDrawable@@6B@			; LantirnDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLantirnDrawable@@@8			; LantirnDrawable `RTTI Type Descriptor'
PUBLIC	??_R3LantirnDrawable@@8				; LantirnDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2LantirnDrawable@@8				; LantirnDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@LantirnDrawable@@8		; LantirnDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4BlankMfdDrawable@@6B@			; BlankMfdDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBlankMfdDrawable@@@8			; BlankMfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3BlankMfdDrawable@@8			; BlankMfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlankMfdDrawable@@8			; BlankMfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlankMfdDrawable@@8		; BlankMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DteMfdDrawable@@6B@			; DteMfdDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDteMfdDrawable@@@8			; DteMfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3DteMfdDrawable@@8				; DteMfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DteMfdDrawable@@8				; DteMfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DteMfdDrawable@@8			; DteMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FlcsMfdDrawable@@6B@			; FlcsMfdDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFlcsMfdDrawable@@@8			; FlcsMfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3FlcsMfdDrawable@@8				; FlcsMfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FlcsMfdDrawable@@8				; FlcsMfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FlcsMfdDrawable@@8		; FlcsMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FlirMfdDrawable@@6B@			; FlirMfdDrawable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFlirMfdDrawable@@@8			; FlirMfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3FlirMfdDrawable@@8				; FlirMfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FlirMfdDrawable@@8				; FlirMfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FlirMfdDrawable@@8		; FlirMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Render2D@@6B@				; Render2D::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3b23d70a
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d75c28f
PUBLIC	__real@3db020c5
PUBLIC	__real@3e051eb8
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e800000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3f000000
PUBLIC	__real@3f224dd3
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f7eb852
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40490fd9
PUBLIC	__real@40c90fd9
PUBLIC	__real@42c80000
PUBLIC	__real@437f0000
PUBLIC	__real@8000000000000000
PUBLIC	__real@bd4ccccd
PUBLIC	__real@be3851ec
PUBLIC	__real@beb33333
PUBLIC	__real@bebd70a4
PUBLIC	__real@bf224dd3
PUBLIC	__real@bf23d70a
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf666666
PUBLIC	__real@bf7eb852
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0490fd9
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_fabs:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?DisplayExit@DrawableClass@@UAEXXZ:PROC		; DrawableClass::DisplayExit
EXTRN	?LabelButton@DrawableClass@@QAEXHPAD0H@Z:PROC	; DrawableClass::LabelButton
EXTRN	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z:PROC ; DrawableClass::GetMfdColor
EXTRN	??_EDrawableClass@@UAEPAXI@Z:PROC		; DrawableClass::`vector deleting destructor'
EXTRN	??_EMfdDrawable@@UAEPAXI@Z:PROC			; MfdDrawable::`vector deleting destructor'
EXTRN	?Display@MfdMenuDrawable@@UAEXPAVVirtualDisplay@@@Z:PROC ; MfdMenuDrawable::Display
EXTRN	?PushButton@MfdMenuDrawable@@UAEXHH@Z:PROC	; MfdMenuDrawable::PushButton
EXTRN	??_EMfdMenuDrawable@@UAEPAXI@Z:PROC		; MfdMenuDrawable::`vector deleting destructor'
EXTRN	?DisplayInit@LantirnDrawable@@UAEXPAVImageBuffer@@@Z:PROC ; LantirnDrawable::DisplayInit
EXTRN	?Display@LantirnDrawable@@UAEXPAVVirtualDisplay@@@Z:PROC ; LantirnDrawable::Display
EXTRN	?PushButton@LantirnDrawable@@UAEXHH@Z:PROC	; LantirnDrawable::PushButton
EXTRN	??_ELantirnDrawable@@UAEPAXI@Z:PROC		; LantirnDrawable::`vector deleting destructor'
EXTRN	??0TestMfdDrawable@@QAE@XZ:PROC			; TestMfdDrawable::TestMfdDrawable
EXTRN	?Display@BlankMfdDrawable@@UAEXPAVVirtualDisplay@@@Z:PROC ; BlankMfdDrawable::Display
EXTRN	?PushButton@BlankMfdDrawable@@UAEXHH@Z:PROC	; BlankMfdDrawable::PushButton
EXTRN	??_EBlankMfdDrawable@@UAEPAXI@Z:PROC		; BlankMfdDrawable::`vector deleting destructor'
EXTRN	?Display@DteMfdDrawable@@UAEXPAVVirtualDisplay@@@Z:PROC ; DteMfdDrawable::Display
EXTRN	?PushButton@DteMfdDrawable@@UAEXHH@Z:PROC	; DteMfdDrawable::PushButton
EXTRN	??_EDteMfdDrawable@@UAEPAXI@Z:PROC		; DteMfdDrawable::`vector deleting destructor'
EXTRN	?Display@FlcsMfdDrawable@@UAEXPAVVirtualDisplay@@@Z:PROC ; FlcsMfdDrawable::Display
EXTRN	?PushButton@FlcsMfdDrawable@@UAEXHH@Z:PROC	; FlcsMfdDrawable::PushButton
EXTRN	??_EFlcsMfdDrawable@@UAEPAXI@Z:PROC		; FlcsMfdDrawable::`vector deleting destructor'
EXTRN	?Display@FlirMfdDrawable@@UAEXPAVVirtualDisplay@@@Z:PROC ; FlirMfdDrawable::Display
EXTRN	?PushButton@FlirMfdDrawable@@UAEXHH@Z:PROC	; FlirMfdDrawable::PushButton
EXTRN	??_EFlirMfdDrawable@@UAEPAXI@Z:PROC		; FlirMfdDrawable::`vector deleting destructor'
EXTRN	??0WpnMfdDrawable@@QAE@XZ:PROC			; WpnMfdDrawable::WpnMfdDrawable
EXTRN	??0TgpMfdDrawable@@QAE@XZ:PROC			; TgpMfdDrawable::TgpMfdDrawable
EXTRN	??0HadMfdDrawable@@QAE@XZ:PROC			; HadMfdDrawable::HadMfdDrawable
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0ContextMPR@@QAE@XZ:PROC			; ContextMPR::ContextMPR
EXTRN	??1ContextMPR@@UAE@XZ:PROC			; ContextMPR::~ContextMPR
EXTRN	?SetState@ContextMPR@@QAEXGK@Z:PROC		; ContextMPR::SetState
EXTRN	?ClearBuffers@ContextMPR@@QAEXG@Z:PROC		; ContextMPR::ClearBuffers
EXTRN	?SelectForegroundColor@ContextMPR@@QAEXH@Z:PROC	; ContextMPR::SelectForegroundColor
EXTRN	?RestoreState@ContextMPR@@QAEXH@Z:PROC		; ContextMPR::RestoreState
EXTRN	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z:PROC ; FindSensor
EXTRN	?TargetAz@@YAMPAVFalconEntity@@MM@Z:PROC	; TargetAz
EXTRN	?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z:PROC ; FindCollisionPoint
EXTRN	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ:PROC ; FireControlComputer::GetMainMasterMode
EXTRN	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z:PROC ; AircraftClass::HasPower
EXTRN	??0ImageBuffer@@QAE@XZ:PROC			; ImageBuffer::ImageBuffer
EXTRN	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z:PROC ; ImageBuffer::Setup
EXTRN	?Cleanup@ImageBuffer@@QAEXXZ:PROC		; ImageBuffer::Cleanup
EXTRN	?SetChromaKey@ImageBuffer@@QAEXK@Z:PROC		; ImageBuffer::SetChromaKey
EXTRN	?Setup@VirtualDisplay@@UAEXXZ:PROC		; VirtualDisplay::Setup
EXTRN	?Cleanup@VirtualDisplay@@UAEXXZ:PROC		; VirtualDisplay::Cleanup
EXTRN	?Point@VirtualDisplay@@UAEXMM@Z:PROC		; VirtualDisplay::Point
EXTRN	?Line@VirtualDisplay@@UAEXMMMM@Z:PROC		; VirtualDisplay::Line
EXTRN	?Line@VirtualDisplay@@UAEXMMMMM@Z:PROC		; VirtualDisplay::Line
EXTRN	?Tri@VirtualDisplay@@UAEXMMMMMM@Z:PROC		; VirtualDisplay::Tri
EXTRN	?Oval@VirtualDisplay@@UAEXMMMM@Z:PROC		; VirtualDisplay::Oval
EXTRN	?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z:PROC	; VirtualDisplay::OvalArc
EXTRN	?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z:PROC	; VirtualDisplay::TextLeft
EXTRN	?TextRight@VirtualDisplay@@UAEXMMPBDH@Z:PROC	; VirtualDisplay::TextRight
EXTRN	?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z:PROC ; VirtualDisplay::TextLeftVertical
EXTRN	?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z:PROC ; VirtualDisplay::TextRightVertical
EXTRN	?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z:PROC	; VirtualDisplay::TextCenter
EXTRN	?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z:PROC ; VirtualDisplay::TextCenterVertical
EXTRN	?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z:PROC	; VirtualDisplay::TextWrap
EXTRN	?ScreenTextHeight@VirtualDisplay@@SAHXZ:PROC	; VirtualDisplay::ScreenTextHeight
EXTRN	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z:PROC	; VirtualDisplay::ScreenTextWidth
EXTRN	?SetFont@VirtualDisplay@@SAXH@Z:PROC		; VirtualDisplay::SetFont
EXTRN	?SetViewport@VirtualDisplay@@UAEXMMMM@Z:PROC	; VirtualDisplay::SetViewport
EXTRN	?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z:PROC ; VirtualDisplay::SetViewportRelative
EXTRN	?GetViewport@VirtualDisplay@@QAEXPAM000@Z:PROC	; VirtualDisplay::GetViewport
EXTRN	?Render2DTri@VirtualDisplay@@MAEXMMMMMM@Z:PROC	; VirtualDisplay::Render2DTri
EXTRN	?StartRtt@VirtualDisplay@@QAEXPAVRender3D@@@Z:PROC ; VirtualDisplay::StartRtt
EXTRN	?FinishRtt@VirtualDisplay@@QAEXXZ:PROC		; VirtualDisplay::FinishRtt
EXTRN	?SetRttCanvas@VirtualDisplay@@QAEXPAUTpoint@@00DM@Z:PROC ; VirtualDisplay::SetRttCanvas
EXTRN	?SetRttRect@VirtualDisplay@@QAEXHHHH_N@Z:PROC	; VirtualDisplay::SetRttRect
EXTRN	?AdjustRttViewport@VirtualDisplay@@QAEXXZ:PROC	; VirtualDisplay::AdjustRttViewport
EXTRN	?ResetRttViewport@VirtualDisplay@@QAEXXZ:PROC	; VirtualDisplay::ResetRttViewport
EXTRN	??_EVirtualDisplay@@UAEPAXI@Z:PROC		; VirtualDisplay::`vector deleting destructor'
EXTRN	?Setup@Render2D@@UAEXPAVImageBuffer@@@Z:PROC	; Render2D::Setup
EXTRN	?Cleanup@Render2D@@UAEXXZ:PROC			; Render2D::Cleanup
EXTRN	?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z:PROC ; Render2D::SetImageBuffer
EXTRN	?StartDraw@Render2D@@UAEXXZ:PROC		; Render2D::StartDraw
EXTRN	?EndDraw@Render2D@@UAEXXZ:PROC			; Render2D::EndDraw
EXTRN	?SetViewport@Render2D@@UAEXMMMM@Z:PROC		; Render2D::SetViewport
EXTRN	?Render2DPoint@Render2D@@UAEXMM@Z:PROC		; Render2D::Render2DPoint
EXTRN	?Render2DLine@Render2D@@UAEXMMMM@Z:PROC		; Render2D::Render2DLine
EXTRN	?Render2DTri@Render2D@@UAEXMMMMMM@Z:PROC	; Render2D::Render2DTri
EXTRN	?ScreenText@Render2D@@UAEXMMPBDH@Z:PROC		; Render2D::ScreenText
EXTRN	??_ERender2D@@UAEPAXI@Z:PROC			; Render2D::`vector deleting destructor'
EXTRN	?GetViewpoint@OTWDriverClass@@QAEPAVRViewPoint@@XZ:PROC ; OTWDriverClass::GetViewpoint
EXTRN	?SetPopup@OTWDriverClass@@QAEXHH@Z:PROC		; OTWDriverClass::SetPopup
EXTRN	?Setup@Canvas3D@@UAEXPAVRender3D@@@Z:PROC	; Canvas3D::Setup
EXTRN	?Cleanup@Canvas3D@@UAEXXZ:PROC			; Canvas3D::Cleanup
EXTRN	?Render2DPoint@Canvas3D@@UAEXMM@Z:PROC		; Canvas3D::Render2DPoint
EXTRN	?Render2DLine@Canvas3D@@UAEXMMMM@Z:PROC		; Canvas3D::Render2DLine
EXTRN	?TextWidth@Canvas3D@@UAEMPAD@Z:PROC		; Canvas3D::TextWidth
EXTRN	?TextHeight@Canvas3D@@UAEMXZ:PROC		; Canvas3D::TextHeight
EXTRN	?Update@Canvas3D@@QAEXPBUTpoint@@PBUTrotation@@@Z:PROC ; Canvas3D::Update
EXTRN	?Point@Canvas3D@@UAEXMM@Z:PROC			; Canvas3D::Point
EXTRN	?Line@Canvas3D@@UAEXMMMM@Z:PROC			; Canvas3D::Line
EXTRN	?Tri@Canvas3D@@UAEXMMMMMM@Z:PROC		; Canvas3D::Tri
EXTRN	?TextLeft@Canvas3D@@UAEXMMPBDH@Z:PROC		; Canvas3D::TextLeft
EXTRN	?TextRight@Canvas3D@@UAEXMMPBDH@Z:PROC		; Canvas3D::TextRight
EXTRN	?TextCenter@Canvas3D@@UAEXMMPBDH@Z:PROC		; Canvas3D::TextCenter
EXTRN	?TextLeftVertical@Canvas3D@@UAEXMMPBDH@Z:PROC	; Canvas3D::TextLeftVertical
EXTRN	?TextRightVertical@Canvas3D@@UAEXMMPBDH@Z:PROC	; Canvas3D::TextRightVertical
EXTRN	?TextCenterVertical@Canvas3D@@UAEXMMPBDH@Z:PROC	; Canvas3D::TextCenterVertical
EXTRN	?Circle@Canvas3D@@UAEXMMM@Z:PROC		; Canvas3D::Circle
EXTRN	?Arc@Canvas3D@@UAEXMMMMM@Z:PROC			; Canvas3D::Arc
EXTRN	?NormalizedLineHeight@Canvas3D@@UAEMXZ:PROC	; Canvas3D::NormalizedLineHeight
EXTRN	??_ECanvas3D@@UAEPAXI@Z:PROC			; Canvas3D::`vector deleting destructor'
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?TargetToXY@RadarDopplerClass@@QAEXPAVSimObjectLocalData@@HMPAM1@Z:PROC ; RadarDopplerClass::TargetToXY
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxRealTime@@3KA:DWORD				; vuxRealTime
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?pFontSet@VirtualDisplay@@2PAUFontSet@@A:DWORD	; VirtualDisplay::pFontSet
EXTRN	?PlayerOptions@@3VPlayerOptionsClass@@A:BYTE	; PlayerOptions
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?FalconDisplay@@3VFalconDisplayConfiguration@@A:BYTE ; FalconDisplay
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?DisplayOptions@@3VDisplayOptionsClass@@A:BYTE	; DisplayOptions
EXTRN	?theLantirn@@3PAVLantirnClass@@A:DWORD		; theLantirn
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?g_bINS@@3_NA:BYTE				; g_bINS
EXTRN	?g_bEnableMfdColors@@3_NA:BYTE			; g_bEnableMfdColors
EXTRN	?g_fMfdTransparency@@3MA:DWORD			; g_fMfdTransparency
EXTRN	?g_fMfdRed@@3MA:DWORD				; g_fMfdRed
EXTRN	?g_fMfdGreen@@3MA:DWORD				; g_fMfdGreen
EXTRN	?g_fMfdBlue@@3MA:DWORD				; g_fMfdBlue
EXTRN	?g_b3DRTTCockpitDebug@@3_NA:BYTE		; g_b3DRTTCockpitDebug
EXTRN	?g_b3dMFDLeft@@3_NA:BYTE			; g_b3dMFDLeft
EXTRN	?g_b3dMFDRight@@3_NA:BYTE			; g_b3dMFDRight
EXTRN	?MfdSize@@3HA:DWORD				; MfdSize
EXTRN	?VirtualMFD@@3PAUtagRECT@@A:BYTE		; VirtualMFD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0490fd9
CONST	SEGMENT
__real@c0490fd9 DD 0c0490fd9r			; -3.14159
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf7eb852
CONST	SEGMENT
__real@bf7eb852 DD 0bf7eb852r			; -0.995
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf23d70a
CONST	SEGMENT
__real@bf23d70a DD 0bf23d70ar			; -0.64
CONST	ENDS
;	COMDAT __real@bf224dd3
CONST	SEGMENT
__real@bf224dd3 DD 0bf224dd3r			; -0.634
CONST	ENDS
;	COMDAT __real@bebd70a4
CONST	SEGMENT
__real@bebd70a4 DD 0bebd70a4r			; -0.37
CONST	ENDS
;	COMDAT __real@beb33333
CONST	SEGMENT
__real@beb33333 DD 0beb33333r			; -0.35
CONST	ENDS
;	COMDAT __real@be3851ec
CONST	SEGMENT
__real@be3851ec DD 0be3851ecr			; -0.18
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7eb852
CONST	SEGMENT
__real@3f7eb852 DD 03f7eb852r			; 0.995
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f224dd3
CONST	SEGMENT
__real@3f224dd3 DD 03f224dd3r			; 0.634
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e051eb8
CONST	SEGMENT
__real@3e051eb8 DD 03e051eb8r			; 0.13
CONST	ENDS
;	COMDAT __real@3db020c5
CONST	SEGMENT
__real@3db020c5 DD 03db020c5r			; 0.086
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3b23d70a
CONST	SEGMENT
__real@3b23d70a DD 03b23d70ar			; 0.0025
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4Render2D@@6B@
rdata$r	SEGMENT
??_R4Render2D@@6B@ DD 00H				; Render2D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRender2D@@@8
	DD	FLAT:??_R3Render2D@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FlirMfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FlirMfdDrawable@@8 DD FLAT:??_R0?AVFlirMfdDrawable@@@8 ; FlirMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FlirMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2FlirMfdDrawable@@8
rdata$r	SEGMENT
??_R2FlirMfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@FlirMfdDrawable@@8 ; FlirMfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3FlirMfdDrawable@@8
rdata$r	SEGMENT
??_R3FlirMfdDrawable@@8 DD 00H				; FlirMfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FlirMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFlirMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVFlirMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; FlirMfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFlirMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FlirMfdDrawable@@6B@
rdata$r	SEGMENT
??_R4FlirMfdDrawable@@6B@ DD 00H			; FlirMfdDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFlirMfdDrawable@@@8
	DD	FLAT:??_R3FlirMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FlcsMfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FlcsMfdDrawable@@8 DD FLAT:??_R0?AVFlcsMfdDrawable@@@8 ; FlcsMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FlcsMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2FlcsMfdDrawable@@8
rdata$r	SEGMENT
??_R2FlcsMfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@FlcsMfdDrawable@@8 ; FlcsMfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3FlcsMfdDrawable@@8
rdata$r	SEGMENT
??_R3FlcsMfdDrawable@@8 DD 00H				; FlcsMfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FlcsMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFlcsMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVFlcsMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; FlcsMfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFlcsMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4FlcsMfdDrawable@@6B@
rdata$r	SEGMENT
??_R4FlcsMfdDrawable@@6B@ DD 00H			; FlcsMfdDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFlcsMfdDrawable@@@8
	DD	FLAT:??_R3FlcsMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DteMfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DteMfdDrawable@@8 DD FLAT:??_R0?AVDteMfdDrawable@@@8 ; DteMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DteMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2DteMfdDrawable@@8
rdata$r	SEGMENT
??_R2DteMfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@DteMfdDrawable@@8 ; DteMfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3DteMfdDrawable@@8
rdata$r	SEGMENT
??_R3DteMfdDrawable@@8 DD 00H				; DteMfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DteMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDteMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVDteMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; DteMfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDteMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DteMfdDrawable@@6B@
rdata$r	SEGMENT
??_R4DteMfdDrawable@@6B@ DD 00H				; DteMfdDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDteMfdDrawable@@@8
	DD	FLAT:??_R3DteMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BlankMfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlankMfdDrawable@@8 DD FLAT:??_R0?AVBlankMfdDrawable@@@8 ; BlankMfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlankMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2BlankMfdDrawable@@8
rdata$r	SEGMENT
??_R2BlankMfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@BlankMfdDrawable@@8 ; BlankMfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3BlankMfdDrawable@@8
rdata$r	SEGMENT
??_R3BlankMfdDrawable@@8 DD 00H				; BlankMfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BlankMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlankMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVBlankMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; BlankMfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlankMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4BlankMfdDrawable@@6B@
rdata$r	SEGMENT
??_R4BlankMfdDrawable@@6B@ DD 00H			; BlankMfdDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBlankMfdDrawable@@@8
	DD	FLAT:??_R3BlankMfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@LantirnDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LantirnDrawable@@8 DD FLAT:??_R0?AVLantirnDrawable@@@8 ; LantirnDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3LantirnDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2LantirnDrawable@@8
rdata$r	SEGMENT
??_R2LantirnDrawable@@8 DD FLAT:??_R1A@?0A@EA@LantirnDrawable@@8 ; LantirnDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3LantirnDrawable@@8
rdata$r	SEGMENT
??_R3LantirnDrawable@@8 DD 00H				; LantirnDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2LantirnDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLantirnDrawable@@@8
_DATA	SEGMENT
??_R0?AVLantirnDrawable@@@8 DD FLAT:??_7type_info@@6B@	; LantirnDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVLantirnDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4LantirnDrawable@@6B@
rdata$r	SEGMENT
??_R4LantirnDrawable@@6B@ DD 00H			; LantirnDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVLantirnDrawable@@@8
	DD	FLAT:??_R3LantirnDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MfdMenuDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MfdMenuDrawable@@8 DD FLAT:??_R0?AVMfdMenuDrawable@@@8 ; MfdMenuDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MfdMenuDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2MfdMenuDrawable@@8
rdata$r	SEGMENT
??_R2MfdMenuDrawable@@8 DD FLAT:??_R1A@?0A@EA@MfdMenuDrawable@@8 ; MfdMenuDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MfdMenuDrawable@@8
rdata$r	SEGMENT
??_R3MfdMenuDrawable@@8 DD 00H				; MfdMenuDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2MfdMenuDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMfdMenuDrawable@@@8
_DATA	SEGMENT
??_R0?AVMfdMenuDrawable@@@8 DD FLAT:??_7type_info@@6B@	; MfdMenuDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMfdMenuDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MfdMenuDrawable@@6B@
rdata$r	SEGMENT
??_R4MfdMenuDrawable@@6B@ DD 00H			; MfdMenuDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMfdMenuDrawable@@@8
	DD	FLAT:??_R3MfdMenuDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MfdDrawable@@8 DD FLAT:??_R0?AVMfdDrawable@@@8 ; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2MfdDrawable@@8
rdata$r	SEGMENT
??_R2MfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@MfdDrawable@@8 ; MfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MfdDrawable@@8
rdata$r	SEGMENT
??_R3MfdDrawable@@8 DD 00H				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; MfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R4MfdDrawable@@6B@
rdata$r	SEGMENT
??_R4MfdDrawable@@6B@ DD 00H				; MfdDrawable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMfdDrawable@@@8
	DD	FLAT:??_R3MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Canvas3D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Canvas3D@@8 DD FLAT:??_R0?AVCanvas3D@@@8	; Canvas3D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Canvas3D@@8
rdata$r	ENDS
;	COMDAT ??_R2Canvas3D@@8
rdata$r	SEGMENT
??_R2Canvas3D@@8 DD FLAT:??_R1A@?0A@EA@Canvas3D@@8	; Canvas3D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R3Canvas3D@@8
rdata$r	SEGMENT
??_R3Canvas3D@@8 DD 00H					; Canvas3D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Canvas3D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCanvas3D@@@8
_DATA	SEGMENT
??_R0?AVCanvas3D@@@8 DD FLAT:??_7type_info@@6B@		; Canvas3D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCanvas3D@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Canvas3D@@6B@
rdata$r	SEGMENT
??_R4Canvas3D@@6B@ DD 00H				; Canvas3D::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCanvas3D@@@8
	DD	FLAT:??_R3Canvas3D@@8
rdata$r	ENDS
;	COMDAT ??_R2Render2D@@8
rdata$r	SEGMENT
??_R2Render2D@@8 DD FLAT:??_R1A@?0A@EA@Render2D@@8	; Render2D::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R3Render2D@@8
rdata$r	SEGMENT
??_R3Render2D@@8 DD 00H					; Render2D::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Render2D@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRender2D@@@8
_DATA	SEGMENT
??_R0?AVRender2D@@@8 DD FLAT:??_7type_info@@6B@		; Render2D `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRender2D@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Render2D@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Render2D@@8 DD FLAT:??_R0?AVRender2D@@@8	; Render2D::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Render2D@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableClass@@8 DD FLAT:??_R0?AVDrawableClass@@@8 ; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableClass@@8
rdata$r	SEGMENT
??_R2DrawableClass@@8 DD FLAT:??_R1A@?0A@EA@DrawableClass@@8 ; DrawableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableClass@@8
rdata$r	SEGMENT
??_R3DrawableClass@@8 DD 00H				; DrawableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableClass@@@8
_DATA	SEGMENT
??_R0?AVDrawableClass@@@8 DD FLAT:??_7type_info@@6B@	; DrawableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DrawableClass@@6B@
rdata$r	SEGMENT
??_R4DrawableClass@@6B@ DD 00H				; DrawableClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDrawableClass@@@8
	DD	FLAT:??_R3DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VirtualDisplay@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VirtualDisplay@@8 DD FLAT:??_R0?AVVirtualDisplay@@@8 ; VirtualDisplay::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R2VirtualDisplay@@8
rdata$r	SEGMENT
??_R2VirtualDisplay@@8 DD FLAT:??_R1A@?0A@EA@VirtualDisplay@@8 ; VirtualDisplay::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VirtualDisplay@@8
rdata$r	SEGMENT
??_R3VirtualDisplay@@8 DD 00H				; VirtualDisplay::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVirtualDisplay@@@8
_DATA	SEGMENT
??_R0?AVVirtualDisplay@@@8 DD FLAT:??_7type_info@@6B@	; VirtualDisplay `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVirtualDisplay@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VirtualDisplay@@6B@
rdata$r	SEGMENT
??_R4VirtualDisplay@@6B@ DD 00H				; VirtualDisplay::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVVirtualDisplay@@@8
	DD	FLAT:??_R3VirtualDisplay@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08DFGDJPOO@ATTITUDE?$AA@
CONST	SEGMENT
??_C@_08DFGDJPOO@ATTITUDE?$AA@ DB 'ATTITUDE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GCOJDIEO@CHECK?$AA@
CONST	SEGMENT
??_C@_05GCOJDIEO@CHECK?$AA@ DB 'CHECK', 00H		; `string'
CONST	ENDS
;	COMDAT ?warningSide@?4??TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z@4MB
CONST	SEGMENT
?warningSide@?4??TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z@4MB DD 03f333333r ; 0.7 ; `MfdDrawable::TGPAttitudeWarning'::`5'::warningSide
CONST	ENDS
;	COMDAT ??_C@_04NLFHDAEB@SWAP?$AA@
CONST	SEGMENT
??_C@_04NLFHDAEB@SWAP?$AA@ DB 'SWAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LKFIONEM@DCLT?$AA@
CONST	SEGMENT
??_C@_04LKFIONEM@DCLT?$AA@ DB 'DCLT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DNAAPCJD@S?9J?$AA@
CONST	SEGMENT
??_C@_03DNAAPCJD@S?9J?$AA@ DB 'S-J', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7Canvas3D@@6B@
CONST	SEGMENT
??_7Canvas3D@@6B@ DD FLAT:??_R4Canvas3D@@6B@		; Canvas3D::`vftable'
	DD	FLAT:??_ECanvas3D@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@Canvas3D@@UAEXXZ
	DD	FLAT:?StartDraw@Canvas3D@@UAEXXZ
	DD	FLAT:?ClearDraw@Canvas3D@@UAEXXZ
	DD	FLAT:?EndDraw@Canvas3D@@UAEXXZ
	DD	FLAT:?Point@Canvas3D@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@Canvas3D@@UAEXMMMM@Z
	DD	FLAT:?Tri@Canvas3D@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@Canvas3D@@UAEXMMM@Z
	DD	FLAT:?Arc@Canvas3D@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@Canvas3D@@UAEMPAD@Z
	DD	FLAT:?TextHeight@Canvas3D@@UAEMXZ
	DD	FLAT:?SetColor@Canvas3D@@UAEXK@Z
	DD	FLAT:?SetBackground@Canvas3D@@UAEXK@Z
	DD	FLAT:?ScreenText@Canvas3D@@UAEXMMPBDH@Z
	DD	FLAT:?SetLineStyle@Canvas3D@@UAEXH@Z
	DD	FLAT:?Color@Canvas3D@@UAEKXZ
	DD	FLAT:?SetViewport@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Render2DPoint@Canvas3D@@UAEXMM@Z
	DD	FLAT:?Render2DLine@Canvas3D@@UAEXMMMM@Z
	DD	FLAT:?Render2DTri@Canvas3D@@UAEXMMMMMM@Z
	DD	FLAT:?Setup@Canvas3D@@UAEXPAVRender3D@@@Z
	DD	FLAT:?NormalizedLineHeight@Canvas3D@@UAEMXZ
CONST	ENDS
;	COMDAT ??_7Render2D@@6B@
CONST	SEGMENT
??_7Render2D@@6B@ DD FLAT:??_R4Render2D@@6B@		; Render2D::`vftable'
	DD	FLAT:??_ERender2D@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@Render2D@@UAEXXZ
	DD	FLAT:?StartDraw@Render2D@@UAEXXZ
	DD	FLAT:?ClearDraw@Render2D@@UAEXXZ
	DD	FLAT:?EndDraw@Render2D@@UAEXXZ
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:?SetColor@Render2D@@UAEXK@Z
	DD	FLAT:?SetBackground@Render2D@@UAEXK@Z
	DD	FLAT:?ScreenText@Render2D@@UAEXMMPBDH@Z
	DD	FLAT:?SetLineStyle@Render2D@@UAEXH@Z
	DD	FLAT:?Color@Render2D@@UAEKXZ
	DD	FLAT:?SetViewport@Render2D@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Render2DPoint@Render2D@@UAEXMM@Z
	DD	FLAT:?Render2DLine@Render2D@@UAEXMMMM@Z
	DD	FLAT:?Render2DTri@Render2D@@UAEXMMMMMM@Z
	DD	FLAT:?Setup@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?SetImageBuffer@Render2D@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?ClearZBuffer@Render2D@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7VirtualDisplay@@6B@
CONST	SEGMENT
??_7VirtualDisplay@@6B@ DD FLAT:??_R4VirtualDisplay@@6B@ ; VirtualDisplay::`vftable'
	DD	FLAT:??_EVirtualDisplay@@UAEPAXI@Z
	DD	FLAT:?Setup@VirtualDisplay@@UAEXXZ
	DD	FLAT:?Cleanup@VirtualDisplay@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Point@VirtualDisplay@@UAEXMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?Line@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?Tri@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Oval@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?OvalArc@VirtualDisplay@@UAEXMMMMMM@Z
	DD	FLAT:?Circle@VirtualDisplay@@UAEXMMM@Z
	DD	FLAT:?Arc@VirtualDisplay@@UAEXMMMMM@Z
	DD	FLAT:?TextLeft@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRight@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextLeftVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextRightVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenter@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextCenterVertical@VirtualDisplay@@UAEXMMPBDH@Z
	DD	FLAT:?TextWrap@VirtualDisplay@@UAEHMMPBDMM@Z
	DD	FLAT:?TextWidth@VirtualDisplay@@UAEMPAD@Z
	DD	FLAT:?TextHeight@VirtualDisplay@@UAEMXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?SetLineStyle@VirtualDisplay@@UAEXH@Z
	DD	FLAT:?Color@VirtualDisplay@@UAEKXZ
	DD	FLAT:?SetViewport@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:?SetViewportRelative@VirtualDisplay@@UAEXMMMM@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?Render2DTri@VirtualDisplay@@MAEXMMMMMM@Z
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7FlirMfdDrawable@@6B@
CONST	SEGMENT
??_7FlirMfdDrawable@@6B@ DD FLAT:??_R4FlirMfdDrawable@@6B@ ; FlirMfdDrawable::`vftable'
	DD	FLAT:??_EFlirMfdDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@FlirMfdDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@FlirMfdDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7FlcsMfdDrawable@@6B@
CONST	SEGMENT
??_7FlcsMfdDrawable@@6B@ DD FLAT:??_R4FlcsMfdDrawable@@6B@ ; FlcsMfdDrawable::`vftable'
	DD	FLAT:??_EFlcsMfdDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@FlcsMfdDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@FlcsMfdDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7DteMfdDrawable@@6B@
CONST	SEGMENT
??_7DteMfdDrawable@@6B@ DD FLAT:??_R4DteMfdDrawable@@6B@ ; DteMfdDrawable::`vftable'
	DD	FLAT:??_EDteMfdDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@DteMfdDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@DteMfdDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7BlankMfdDrawable@@6B@
CONST	SEGMENT
??_7BlankMfdDrawable@@6B@ DD FLAT:??_R4BlankMfdDrawable@@6B@ ; BlankMfdDrawable::`vftable'
	DD	FLAT:??_EBlankMfdDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@BlankMfdDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@BlankMfdDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7LantirnDrawable@@6B@
CONST	SEGMENT
??_7LantirnDrawable@@6B@ DD FLAT:??_R4LantirnDrawable@@6B@ ; LantirnDrawable::`vftable'
	DD	FLAT:??_ELantirnDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@LantirnDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@LantirnDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@LantirnDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7MfdMenuDrawable@@6B@
CONST	SEGMENT
??_7MfdMenuDrawable@@6B@ DD FLAT:??_R4MfdMenuDrawable@@6B@ ; MfdMenuDrawable::`vftable'
	DD	FLAT:??_EMfdMenuDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@MfdMenuDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@MfdMenuDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7MfdDrawable@@6B@
CONST	SEGMENT
??_7MfdDrawable@@6B@ DD FLAT:??_R4MfdDrawable@@6B@	; MfdDrawable::`vftable'
	DD	FLAT:??_EMfdDrawable@@UAEPAXI@Z
	DD	FLAT:?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@MfdDrawable@@UAEXHH@Z
CONST	ENDS
;	COMDAT ??_7DrawableClass@@6B@
CONST	SEGMENT
??_7DrawableClass@@6B@ DD FLAT:??_R4DrawableClass@@6B@	; DrawableClass::`vftable'
	DD	FLAT:??_EDrawableClass@@UAEPAXI@Z
	DD	FLAT:?Display@DrawableClass@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@DrawableClass@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@DrawableClass@@UAEXHH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z$0
__unwindtable$??0MFDClass@@QAE@HPAVRender3D@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MFDClass@@QAE@HPAVRender3D@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MFDClass@@QAE@HPAVRender3D@@@Z$1
__ehfuncinfo$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateDrawables@MFDClass@@SAXXZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?CreateDrawables@MFDClass@@SAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0MFDClass@@QAE@HPAVRender3D@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0MFDClass@@QAE@HPAVRender3D@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateDrawables@MFDClass@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
?ClearFlightDataOsbLabels@@YAXXZ PROC			; ClearFlightDataOsbLabels

; 609  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 610  :     int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 611  : 	for (i = 0; i < 20; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ClearFligh
$LN5@ClearFligh:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@ClearFligh:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN4@ClearFligh

; 612  : 		*(cockpitFlightData.leftMFD[i].line1) = '\0';

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 17					; 00000011H
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR ?cockpitFlightData@@3VFlightData@@A[ecx+edx+1280], 0

; 613  : 		*(cockpitFlightData.leftMFD[i].line2) = '\0';

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 17					; 00000011H
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR ?cockpitFlightData@@3VFlightData@@A[eax+ecx+1288], 0

; 614  : 		cockpitFlightData.leftMFD[i].inverted = FALSE;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 17					; 00000011H
	mov	BYTE PTR ?cockpitFlightData@@3VFlightData@@A[edx+1296], 0

; 615  : 	}

	jmp	SHORT $LN5@ClearFligh
$LN4@ClearFligh:

; 616  : 	for (i = 0; i < 20; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ClearFligh
$LN2@ClearFligh:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ClearFligh:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jge	SHORT $LN7@ClearFligh

; 617  : 		*(cockpitFlightData.rightMFD[i].line1) = '\0';

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 17					; 00000011H
	mov	edx, 1
	imul	edx, 0
	mov	BYTE PTR ?cockpitFlightData@@3VFlightData@@A[ecx+edx+1620], 0

; 618  : 		*(cockpitFlightData.rightMFD[i].line2) = '\0';

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 17					; 00000011H
	mov	ecx, 1
	imul	ecx, 0
	mov	BYTE PTR ?cockpitFlightData@@3VFlightData@@A[eax+ecx+1628], 0

; 619  : 		cockpitFlightData.rightMFD[i].inverted = FALSE;

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 17					; 00000011H
	mov	BYTE PTR ?cockpitFlightData@@3VFlightData@@A[edx+1636], 0

; 620  : 	}

	jmp	SHORT $LN2@ClearFligh
$LN7@ClearFligh:

; 621  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearFlightDataOsbLabels@@YAXXZ ENDP			; ClearFlightDataOsbLabels
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?GetDisplayRange@RadarDopplerClass@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplayRange@RadarDopplerClass@@QAEMXZ PROC		; RadarDopplerClass::GetDisplayRange, COMDAT
; _this$ = ecx

; 245  : 	float GetDisplayRange(void)	{return tdisplayRange;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+264]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplayRange@RadarDopplerClass@@QAEMXZ ENDP		; RadarDopplerClass::GetDisplayRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\lantirn.h
;	COMDAT ?IsEnabled@LantirnClass@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsEnabled@LantirnClass@@QAE_NXZ PROC			; LantirnClass::IsEnabled, COMDAT
; _this$ = ecx

; 17   :     bool IsEnabled() { return (m_flags & AVAILABLE) ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	and	ecx, 2
	je	SHORT $LN3@IsEnabled
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsEnabled
$LN3@IsEnabled:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsEnabled:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEnabled@LantirnClass@@QAE_NXZ ENDP			; LantirnClass::IsEnabled
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCanvas3D@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCanvas3D@@UAEPAXI@Z PROC				; Canvas3D::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Canvas3D@@UAE@XZ			; Canvas3D::~Canvas3D
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCanvas3D@@UAEPAXI@Z ENDP				; Canvas3D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?ScreenText@Canvas3D@@UAEXMMPBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xLeft$ = 8						; size = 4
_yTop$ = 12						; size = 4
_string$ = 16						; size = 4
_boxed$ = 20						; size = 4
?ScreenText@Canvas3D@@UAEXMMPBDH@Z PROC			; Canvas3D::ScreenText, COMDAT
; _this$ = ecx

; 79   : 	virtual void ScreenText( float xLeft, float yTop, const char *string, int boxed ){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ScreenText@Canvas3D@@UAEXMMPBDH@Z ENDP			; Canvas3D::ScreenText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?SetBackground@Canvas3D@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packedRGBA$ = 8					; size = 4
?SetBackground@Canvas3D@@UAEXK@Z PROC			; Canvas3D::SetBackground, COMDAT
; _this$ = ecx

; 59   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 		r3d->SetBackground( packedRGBA );

	mov	eax, DWORD PTR _packedRGBA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262912]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+262912]
	mov	eax, DWORD PTR [edx+96]
	call	eax

; 61   : 	};	

	mov	esp, ebp
	pop	ebp
	ret	4
?SetBackground@Canvas3D@@UAEXK@Z ENDP			; Canvas3D::SetBackground
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?SetColor@Canvas3D@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packedRGBA$ = 8					; size = 4
?SetColor@Canvas3D@@UAEXK@Z PROC			; Canvas3D::SetColor, COMDAT
; _this$ = ecx

; 55   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		r3d->SetColor( packedRGBA );

	mov	eax, DWORD PTR _packedRGBA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262912]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+262912]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 57   : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?SetColor@Canvas3D@@UAEXK@Z ENDP			; Canvas3D::SetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?Color@Canvas3D@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Color@Canvas3D@@UAEKXZ PROC				; Canvas3D::Color, COMDAT
; _this$ = ecx

; 52   : 	virtual DWORD Color( void )	{return r3d->context.CurrentForegroundColor(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+262912]
	add	ecx, 100				; 00000064H
	call	?CurrentForegroundColor@ContextMPR@@QAEHXZ ; ContextMPR::CurrentForegroundColor
	mov	esp, ebp
	pop	ebp
	ret	0
?Color@Canvas3D@@UAEKXZ ENDP				; Canvas3D::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?SetLineStyle@Canvas3D@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_style$ = 8						; size = 4
?SetLineStyle@Canvas3D@@UAEXH@Z PROC			; Canvas3D::SetLineStyle, COMDAT
; _this$ = ecx

; 47   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 		r3d->SetLineStyle( style );

	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+262912]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+262912]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 49   : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineStyle@Canvas3D@@UAEXH@Z ENDP			; Canvas3D::SetLineStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?Render2DTri@Canvas3D@@UAEXMMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
?Render2DTri@Canvas3D@@UAEXMMMMMM@Z PROC		; Canvas3D::Render2DTri, COMDAT
; _this$ = ecx

; 43   :     virtual void Render2DTri( float, float, float, float, float, float) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Render2DTri@Canvas3D@@UAEXMMMMMM@Z ENDP		; Canvas3D::Render2DTri
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?EndDraw@Canvas3D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndDraw@Canvas3D@@UAEXXZ PROC				; Canvas3D::EndDraw, COMDAT
; _this$ = ecx

; 40   :     virtual void EndDraw( void )	{} ;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?EndDraw@Canvas3D@@UAEXXZ ENDP				; Canvas3D::EndDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?ClearDraw@Canvas3D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDraw@Canvas3D@@UAEXXZ PROC			; Canvas3D::ClearDraw, COMDAT
; _this$ = ecx

; 39   :     virtual void ClearDraw( void ) 	{} ;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDraw@Canvas3D@@UAEXXZ ENDP			; Canvas3D::ClearDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?StartDraw@Canvas3D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartDraw@Canvas3D@@UAEXXZ PROC			; Canvas3D::StartDraw, COMDAT
; _this$ = ecx

; 38   :     virtual void StartDraw ( void ) 	{} ;

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StartDraw@Canvas3D@@UAEXXZ ENDP			; Canvas3D::StartDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ?ResetTargetRenderer@Canvas3D@@QAEXPAVRender3D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_renderer$ = 8						; size = 4
?ResetTargetRenderer@Canvas3D@@QAEXPAVRender3D@@@Z PROC	; Canvas3D::ResetTargetRenderer, COMDAT
; _this$ = ecx

; 35   : 	void	ResetTargetRenderer( Render3D * renderer )	{ r3d = renderer; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _renderer$[ebp]
	mov	DWORD PTR [eax+262912], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?ResetTargetRenderer@Canvas3D@@QAEXPAVRender3D@@@Z ENDP	; Canvas3D::ResetTargetRenderer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ??1Canvas3D@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Canvas3D@@UAE@XZ PROC				; Canvas3D::~Canvas3D, COMDAT
; _this$ = ecx

; 28   : 	virtual ~Canvas3D()	{ ready = FALSE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Canvas3D@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VirtualDisplay@@UAE@XZ		; VirtualDisplay::~VirtualDisplay
	mov	esp, ebp
	pop	ebp
	ret	0
??1Canvas3D@@UAE@XZ ENDP				; Canvas3D::~Canvas3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\canvas3d.h
;	COMDAT ??0Canvas3D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Canvas3D@@QAE@XZ PROC				; Canvas3D::Canvas3D, COMDAT
; _this$ = ecx

; 27   : 	Canvas3D()	{ r3d = NULL; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VirtualDisplay@@QAE@XZ		; VirtualDisplay::VirtualDisplay
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Canvas3D@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262912], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Canvas3D@@QAE@XZ ENDP				; Canvas3D::Canvas3D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\playerop.h
;	COMDAT ?GetAvionicsType@PlayerOptionsClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvionicsType@PlayerOptionsClass@@QAEHXZ PROC	; PlayerOptionsClass::GetAvionicsType, COMDAT
; _this$ = ecx

; 142  : 	int GetAvionicsType (void)								{ return SimAvionicsType; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ENDP	; PlayerOptionsClass::GetAvionicsType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\playerrwr.h
;	COMDAT ?SetGridVisible@PlayerRwrClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetGridVisible@PlayerRwrClass@@QAEXH@Z PROC		; PlayerRwrClass::SetGridVisible, COMDAT
; _this$ = ecx

; 24   : 	void SetGridVisible(BOOL flag)				{mGridVisible = flag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	DWORD PTR [eax+616], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGridVisible@PlayerRwrClass@@QAEXH@Z ENDP		; PlayerRwrClass::SetGridVisible
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRender2D@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRender2D@@UAEPAXI@Z PROC				; Render2D::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Render2D@@UAE@XZ			; Render2D::~Render2D
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRender2D@@UAEPAXI@Z ENDP				; Render2D::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetLineStyle@Render2D@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLineStyle@Render2D@@UAEXH@Z PROC			; Render2D::SetLineStyle, COMDAT
; _this$ = ecx

; 60   : 	virtual void SetLineStyle (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineStyle@Render2D@@UAEXH@Z ENDP			; Render2D::SetLineStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetBackground@Render2D@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packedRGBA$ = 8					; size = 4
?SetBackground@Render2D@@UAEXK@Z PROC			; Render2D::SetBackground, COMDAT
; _this$ = ecx

; 50   : 	virtual void SetBackground(DWORD packedRGBA){ context.SetState(MPR_STA_BG_COLOR,packedRGBA); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _packedRGBA$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SetState@ContextMPR@@QAEXGK@Z		; ContextMPR::SetState
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBackground@Render2D@@UAEXK@Z ENDP			; Render2D::SetBackground
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?SetColor@Render2D@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packedRGBA$ = 8					; size = 4
?SetColor@Render2D@@UAEXK@Z PROC			; Render2D::SetColor, COMDAT
; _this$ = ecx

; 49   : 	virtual void SetColor(DWORD packedRGBA)	{ context.RestoreState(STATE_SOLID); context.SelectForegroundColor(packedRGBA); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState
	mov	eax, DWORD PTR _packedRGBA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?SelectForegroundColor@ContextMPR@@QAEXH@Z ; ContextMPR::SelectForegroundColor
	mov	esp, ebp
	pop	ebp
	ret	4
?SetColor@Render2D@@UAEXK@Z ENDP			; Render2D::SetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?Color@Render2D@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Color@Render2D@@UAEKXZ PROC				; Render2D::Color, COMDAT
; _this$ = ecx

; 48   : 	virtual DWORD Color(void) { return context.CurrentForegroundColor(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?CurrentForegroundColor@ContextMPR@@QAEHXZ ; ContextMPR::CurrentForegroundColor
	mov	esp, ebp
	pop	ebp
	ret	0
?Color@Render2D@@UAEKXZ ENDP				; Render2D::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?ClearZBuffer@Render2D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearZBuffer@Render2D@@UAEXXZ PROC			; Render2D::ClearZBuffer, COMDAT
; _this$ = ecx

; 42   : 	virtual void ClearZBuffer( void )	{ context.ClearBuffers( MPR_CI_ZBUFFER ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?ClearBuffers@ContextMPR@@QAEXG@Z	; ContextMPR::ClearBuffers
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearZBuffer@Render2D@@UAEXXZ ENDP			; Render2D::ClearZBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?ClearDraw@Render2D@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearDraw@Render2D@@UAEXXZ PROC			; Render2D::ClearDraw, COMDAT
; _this$ = ecx

; 41   : 	virtual void ClearDraw( void )		{ context.ClearBuffers( MPR_CI_DRAW_BUFFER ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?ClearBuffers@ContextMPR@@QAEXG@Z	; ContextMPR::ClearBuffers
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearDraw@Render2D@@UAEXXZ ENDP			; Render2D::ClearDraw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ PROC	; Render2D::GetImageBuffer, COMDAT
; _this$ = ecx

; 38   : 	ImageBuffer* GetImageBuffer(void) {return image;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ ENDP	; Render2D::GetImageBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ??1Render2D@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Render2D@@UAE@XZ PROC				; Render2D::~Render2D, COMDAT
; _this$ = ecx

; 32   : 	virtual ~Render2D()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Render2D@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VirtualDisplay@@UAE@XZ		; VirtualDisplay::~VirtualDisplay
	mov	esp, ebp
	pop	ebp
	ret	0
??1Render2D@@UAE@XZ ENDP				; Render2D::~Render2D
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\render2d.h
;	COMDAT ??0Render2D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Render2D@@QAE@XZ PROC				; Render2D::Render2D, COMDAT
; _this$ = ecx

; 31   : 	Render2D()			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VirtualDisplay@@QAE@XZ		; VirtualDisplay::VirtualDisplay
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Render2D@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Render2D@@QAE@XZ ENDP				; Render2D::Render2D
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GVirtualDisplay@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVirtualDisplay@@UAEPAXI@Z PROC			; VirtualDisplay::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VirtualDisplay@@UAE@XZ		; VirtualDisplay::~VirtualDisplay
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVirtualDisplay@@UAEPAXI@Z ENDP			; VirtualDisplay::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?Color@VirtualDisplay@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Color@VirtualDisplay@@UAEKXZ PROC			; VirtualDisplay::Color, COMDAT
; _this$ = ecx

; 136  : 	virtual DWORD Color( void )	{return 0x0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Color@VirtualDisplay@@UAEKXZ ENDP			; VirtualDisplay::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?SetLineStyle@VirtualDisplay@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLineStyle@VirtualDisplay@@UAEXH@Z PROC		; VirtualDisplay::SetLineStyle, COMDAT
; _this$ = ecx

; 135  : 	virtual void SetLineStyle (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineStyle@VirtualDisplay@@UAEXH@Z ENDP		; VirtualDisplay::SetLineStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CurFont@VirtualDisplay@@SAHXZ
_TEXT	SEGMENT
?CurFont@VirtualDisplay@@SAHXZ PROC			; VirtualDisplay::CurFont, COMDAT

; 132  : 	static int CurFont(void) { return pFontSet->fontNum; };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?pFontSet@VirtualDisplay@@2PAUFontSet@@A ; VirtualDisplay::pFontSet
	mov	eax, DWORD PTR [eax+24672]
	pop	ebp
	ret	0
?CurFont@VirtualDisplay@@SAHXZ ENDP			; VirtualDisplay::CurFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?TextHeight@VirtualDisplay@@UAEMXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?TextHeight@VirtualDisplay@@UAEMXZ PROC			; VirtualDisplay::TextHeight, COMDAT
; _this$ = ecx

; 121  : 	virtual float TextHeight(void)			{ return ScreenTextHeight()/scaleY; };		// normalized screen space

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	call	?ScreenTextHeight@VirtualDisplay@@SAHXZ	; VirtualDisplay::ScreenTextHeight
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?TextHeight@VirtualDisplay@@UAEMXZ ENDP			; VirtualDisplay::TextHeight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?TextWidth@VirtualDisplay@@UAEMPAD@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_string$ = 8						; size = 4
?TextWidth@VirtualDisplay@@UAEMPAD@Z PROC		; VirtualDisplay::TextWidth, COMDAT
; _this$ = ecx

; 120  : 	virtual float TextWidth(char *string)	{ return ScreenTextWidth(string)/scaleX; };	// normalized screen space

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	?ScreenTextWidth@VirtualDisplay@@SAHPBD@Z ; VirtualDisplay::ScreenTextWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR tv73[ebp], xmm0
	fld	DWORD PTR tv73[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?TextWidth@VirtualDisplay@@UAEMPAD@Z ENDP		; VirtualDisplay::TextWidth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?Arc@VirtualDisplay@@UAEXMMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_xRadius$ = 16						; size = 4
_start$ = 20						; size = 4
_stop$ = 24						; size = 4
?Arc@VirtualDisplay@@UAEXMMMMM@Z PROC			; VirtualDisplay::Arc, COMDAT
; _this$ = ecx

; 109  : 		{ OvalArc(x, y, xRadius, xRadius*scaleX/scaleY, start, stop); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _stop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _start$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+36]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Arc@VirtualDisplay@@UAEXMMMMM@Z ENDP			; VirtualDisplay::Arc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?Circle@VirtualDisplay@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_xRadius$ = 16						; size = 4
?Circle@VirtualDisplay@@UAEXMMM@Z PROC			; VirtualDisplay::Circle, COMDAT
; _this$ = ecx

; 107  : 		{ Oval(x, y, xRadius, xRadius*scaleX/scaleY); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	mulss	xmm0, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+36]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _xRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Circle@VirtualDisplay@@UAEXMMM@Z ENDP			; VirtualDisplay::Circle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ??1VirtualDisplay@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1VirtualDisplay@@UAE@XZ PROC				; VirtualDisplay::~VirtualDisplay, COMDAT
; _this$ = ecx

; 86   :     virtual ~VirtualDisplay()	{ ShiAssert( ready == FALSE ); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VirtualDisplay@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??1ContextMPR@@UAE@XZ			; ContextMPR::~ContextMPR
	mov	esp, ebp
	pop	ebp
	ret	0
??1VirtualDisplay@@UAE@XZ ENDP				; VirtualDisplay::~VirtualDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ??0VirtualDisplay@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VirtualDisplay@@QAE@XZ PROC				; VirtualDisplay::VirtualDisplay, COMDAT
; _this$ = ecx

; 85   :     VirtualDisplay()			{ ready = FALSE; tLeft = tTop = tRight = tBottom = txRes = tyRes = 0; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7VirtualDisplay@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0ContextMPR@@QAE@XZ			; ContextMPR::ContextMPR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+92], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262776], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262772], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262768], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+262764], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+262760], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+262756], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VirtualDisplay@@QAE@XZ ENDP				; VirtualDisplay::VirtualDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_fl$ = 8						; size = 4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z PROC	; AircraftClass::INSState, COMDAT
; _this$ = ecx

; 211  : 	int INSState(INSAlignFlags fl) { return (INSFlags & fl) == (unsigned int)fl ? 1 : 0; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	and	ecx, DWORD PTR _fl$[ebp]
	cmp	ecx, DWORD PTR _fl$[ebp]
	jne	SHORT $LN3@INSState
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@INSState
$LN3@INSState:
	mov	DWORD PTR tv67[ebp], 0
$LN4@INSState:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ENDP	; AircraftClass::INSState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?IsAGMasterMode@FireControlComputer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsAGMasterMode@FireControlComputer@@QAEHXZ PROC	; FireControlComputer::IsAGMasterMode, COMDAT
; _this$ = ecx

; 278  : 	int IsAGMasterMode() { return GetMainMasterMode() == MM_AG; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMainMasterMode@FireControlComputer@@QAE?AW4MASTERMODES@@XZ ; FireControlComputer::GetMainMasterMode
	test	eax, eax
	jne	SHORT $LN3@IsAGMaster
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAGMaster
$LN3@IsAGMaster:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAGMaster:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAGMasterMode@FireControlComputer@@QAEHXZ ENDP	; FireControlComputer::IsAGMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ PROC ; FireControlComputer::GetMasterMode, COMDAT
; _this$ = ecx

; 276  : 	FCCMasterMode GetMasterMode (void) {return (masterMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+144]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ENDP ; FireControlComputer::GetMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSetFlag@SimBaseClass@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFlag@SimBaseClass@@QBEHH@Z PROC			; SimBaseClass::IsSetFlag, COMDAT
; _this$ = ecx

; 178  : 	int  IsSetFlag(int flag) const { return ((specialData.flags & flag) ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, DWORD PTR _flag$[ebp]
	je	SHORT $LN3@IsSetFlag
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSetFlag
$LN3@IsSetFlag:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSetFlag:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFlag@SimBaseClass@@QBEHH@Z ENDP			; SimBaseClass::IsSetFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ PROC ; SensorClass::CurrentTarget, COMDAT
; _this$ = ecx

; 46   : 	SimObjectType* CurrentTarget(void)	{ return lockedTarget; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ENDP ; SensorClass::CurrentTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\context.h
;	COMDAT ?CurrentForegroundColor@ContextMPR@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CurrentForegroundColor@ContextMPR@@QAEHXZ PROC		; ContextMPR::CurrentForegroundColor, COMDAT
; _this$ = ecx

; 708  : 	int CurrentForegroundColor(void) {return m_colFG_Raw;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentForegroundColor@ContextMPR@@QAEHXZ ENDP		; ContextMPR::CurrentForegroundColor
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_t$ = -24						; size = 4
_tmp$1 = -20						; size = 4
_tmpDrawable$ = -16					; size = 4
_tmpMode$ = -12						; size = 4
_i$2 = -8						; size = 4
_mm$3 = -4						; size = 4
?MFDSwapDisplays@@YAXXZ PROC				; MFDSwapDisplays

; 875  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi

; 876  :     DrawableClass* tmpDrawable = MfdDisplay[0]->GetDrawable();

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	call	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ; MFDClass::GetDrawable
	mov	DWORD PTR _tmpDrawable$[ebp], eax

; 877  :     MFDClass::MfdMode tmpMode = MfdDisplay[0]->mode;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _tmpMode$[ebp], eax

; 878  :     
; 879  :     MfdDisplay[0]->SetDrawable(MfdDisplay[1]->GetDrawable());

	mov	ecx, 4
	shl	ecx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ; MFDClass::GetDrawable
	push	eax
	mov	edx, 4
	imul	edx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx]
	call	?SetDrawable@MFDClass@@QAEXPAVDrawableClass@@@Z ; MFDClass::SetDrawable

; 880  :     MfdDisplay[0]->mode = MfdDisplay[1]->mode;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx

; 881  :     
; 882  :     MfdDisplay[1]->SetDrawable(tmpDrawable);

	mov	edx, DWORD PTR _tmpDrawable$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	call	?SetDrawable@MFDClass@@QAEXPAVDrawableClass@@@Z ; MFDClass::SetDrawable

; 883  :     MfdDisplay[1]->mode = tmpMode;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR _tmpMode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 884  : 
; 885  :     tmpMode = MfdDisplay[0]->restoreMode;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _tmpMode$[ebp], eax

; 886  :     MfdDisplay[0]->restoreMode = MfdDisplay[1]->restoreMode;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], edx

; 887  :     MfdDisplay[1]->restoreMode = tmpMode;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR _tmpMode$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 888  : 
; 889  :     for (int mm = 0; mm < MFDClass::MAXMM; mm++) {

	mov	DWORD PTR _mm$3[ebp], 0
	jmp	SHORT $LN8@MFDSwapDis
$LN7@MFDSwapDis:
	mov	eax, DWORD PTR _mm$3[ebp]
	add	eax, 1
	mov	DWORD PTR _mm$3[ebp], eax
$LN8@MFDSwapDis:
	cmp	DWORD PTR _mm$3[ebp], 5
	jge	$LN6@MFDSwapDis

; 890  : 	int tmp = MfdDisplay[0]->cursel[mm];

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR _mm$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+80]
	mov	DWORD PTR _tmp$1[ebp], ecx

; 891  : 	MfdDisplay[0]->cursel[mm] = MfdDisplay[1]->cursel[mm];

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	ecx, DWORD PTR _mm$3[ebp]
	mov	esi, DWORD PTR _mm$3[ebp]
	mov	eax, DWORD PTR [eax+esi*4+80]
	mov	DWORD PTR [edx+ecx*4+80], eax

; 892  : 	MfdDisplay[1]->cursel[mm] = tmp;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR _mm$3[ebp]
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [edx+eax*4+80], ecx

; 893  : 	
; 894  : 	for (int i = 0; i < 3; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@MFDSwapDis
$LN4@MFDSwapDis:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN5@MFDSwapDis:
	cmp	DWORD PTR _i$2[ebp], 3
	jge	$LN3@MFDSwapDis

; 895  : 	    tmpMode = MfdDisplay[0]->primarySecondary[mm][i];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR _mm$3[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _tmpMode$[ebp], edx

; 896  : 	    MfdDisplay[0]->primarySecondary[mm][i] = MfdDisplay[1]->primarySecondary[mm][i];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR _mm$3[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	ecx, DWORD PTR _mm$3[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	esi, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [edx+ecx*4], eax

; 897  : 	    MfdDisplay[1]->primarySecondary[mm][i] = tmpMode;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR _mm$3[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR [edx+eax+20]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _tmpMode$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 898  : 	}

	jmp	$LN4@MFDSwapDis
$LN3@MFDSwapDis:

; 899  :     }

	jmp	$LN7@MFDSwapDis
$LN6@MFDSwapDis:

; 900  :     int t = MfdDisplay[0]->curmm;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _t$[ebp], eax

; 901  :     MfdDisplay[0]->curmm = MfdDisplay[1]->curmm;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+100], edx

; 902  :     MfdDisplay[1]->curmm = t;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+100], edx

; 903  : 	if (MfdDisplay[0]->GetDrawable()){

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	call	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ; MFDClass::GetDrawable
	test	eax, eax
	je	SHORT $LN2@MFDSwapDis

; 904  : 		MfdDisplay[0]->GetDrawable()->SetMFD(0);

	push	0
	mov	ecx, 4
	imul	ecx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ; MFDClass::GetDrawable
	mov	ecx, eax
	call	?SetMFD@DrawableClass@@QAEXH@Z		; DrawableClass::SetMFD
$LN2@MFDSwapDis:

; 905  : 	}
; 906  : 	if (MfdDisplay[1]->GetDrawable()){

	mov	edx, 4
	shl	edx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx]
	call	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ; MFDClass::GetDrawable
	test	eax, eax
	je	SHORT $LN9@MFDSwapDis

; 907  : 		MfdDisplay[1]->GetDrawable()->SetMFD(1);

	push	1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	call	?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ; MFDClass::GetDrawable
	mov	ecx, eax
	call	?SetMFD@DrawableClass@@QAEXH@Z		; DrawableClass::SetMFD
$LN9@MFDSwapDis:

; 908  : 	}
; 909  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?MFDSwapDisplays@@YAXXZ ENDP				; MFDSwapDisplays
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GFlirMfdDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFlirMfdDrawable@@UAEPAXI@Z PROC			; FlirMfdDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FlirMfdDrawable@@UAE@XZ		; FlirMfdDrawable::~FlirMfdDrawable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFlirMfdDrawable@@UAEPAXI@Z ENDP			; FlirMfdDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??1FlirMfdDrawable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FlirMfdDrawable@@UAE@XZ PROC				; FlirMfdDrawable::~FlirMfdDrawable, COMDAT
; _this$ = ecx

; 223  :       ~FlirMfdDrawable(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FlirMfdDrawable@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	esp, ebp
	pop	ebp
	ret	0
??1FlirMfdDrawable@@UAE@XZ ENDP				; FlirMfdDrawable::~FlirMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0FlirMfdDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FlirMfdDrawable@@QAE@XZ PROC				; FlirMfdDrawable::FlirMfdDrawable, COMDAT
; _this$ = ecx

; 222  :       FlirMfdDrawable () {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MfdDrawable@@QAE@XZ			; MfdDrawable::MfdDrawable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FlirMfdDrawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FlirMfdDrawable@@QAE@XZ ENDP				; FlirMfdDrawable::FlirMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GFlcsMfdDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFlcsMfdDrawable@@UAEPAXI@Z PROC			; FlcsMfdDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1FlcsMfdDrawable@@UAE@XZ		; FlcsMfdDrawable::~FlcsMfdDrawable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GFlcsMfdDrawable@@UAEPAXI@Z ENDP			; FlcsMfdDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??1FlcsMfdDrawable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FlcsMfdDrawable@@UAE@XZ PROC				; FlcsMfdDrawable::~FlcsMfdDrawable, COMDAT
; _this$ = ecx

; 213  :       ~FlcsMfdDrawable(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FlcsMfdDrawable@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	esp, ebp
	pop	ebp
	ret	0
??1FlcsMfdDrawable@@UAE@XZ ENDP				; FlcsMfdDrawable::~FlcsMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0FlcsMfdDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FlcsMfdDrawable@@QAE@XZ PROC				; FlcsMfdDrawable::FlcsMfdDrawable, COMDAT
; _this$ = ecx

; 212  :       FlcsMfdDrawable () {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MfdDrawable@@QAE@XZ			; MfdDrawable::MfdDrawable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7FlcsMfdDrawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FlcsMfdDrawable@@QAE@XZ ENDP				; FlcsMfdDrawable::FlcsMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDteMfdDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDteMfdDrawable@@UAEPAXI@Z PROC			; DteMfdDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DteMfdDrawable@@UAE@XZ		; DteMfdDrawable::~DteMfdDrawable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDteMfdDrawable@@UAEPAXI@Z ENDP			; DteMfdDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??1DteMfdDrawable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DteMfdDrawable@@UAE@XZ PROC				; DteMfdDrawable::~DteMfdDrawable, COMDAT
; _this$ = ecx

; 203  :       ~DteMfdDrawable(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DteMfdDrawable@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	esp, ebp
	pop	ebp
	ret	0
??1DteMfdDrawable@@UAE@XZ ENDP				; DteMfdDrawable::~DteMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0DteMfdDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DteMfdDrawable@@QAE@XZ PROC				; DteMfdDrawable::DteMfdDrawable, COMDAT
; _this$ = ecx

; 202  :       DteMfdDrawable () {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MfdDrawable@@QAE@XZ			; MfdDrawable::MfdDrawable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DteMfdDrawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DteMfdDrawable@@QAE@XZ ENDP				; DteMfdDrawable::DteMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBlankMfdDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBlankMfdDrawable@@UAEPAXI@Z PROC			; BlankMfdDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BlankMfdDrawable@@UAE@XZ		; BlankMfdDrawable::~BlankMfdDrawable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBlankMfdDrawable@@UAEPAXI@Z ENDP			; BlankMfdDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??1BlankMfdDrawable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BlankMfdDrawable@@UAE@XZ PROC			; BlankMfdDrawable::~BlankMfdDrawable, COMDAT
; _this$ = ecx

; 193  :       ~BlankMfdDrawable(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BlankMfdDrawable@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	esp, ebp
	pop	ebp
	ret	0
??1BlankMfdDrawable@@UAE@XZ ENDP			; BlankMfdDrawable::~BlankMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0BlankMfdDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BlankMfdDrawable@@QAE@XZ PROC			; BlankMfdDrawable::BlankMfdDrawable, COMDAT
; _this$ = ecx

; 192  :       BlankMfdDrawable () {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MfdDrawable@@QAE@XZ			; MfdDrawable::MfdDrawable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BlankMfdDrawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0BlankMfdDrawable@@QAE@XZ ENDP			; BlankMfdDrawable::BlankMfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GLantirnDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GLantirnDrawable@@UAEPAXI@Z PROC			; LantirnDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LantirnDrawable@@UAE@XZ		; LantirnDrawable::~LantirnDrawable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLantirnDrawable@@UAEPAXI@Z ENDP			; LantirnDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??1LantirnDrawable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LantirnDrawable@@UAE@XZ PROC				; LantirnDrawable::~LantirnDrawable, COMDAT
; _this$ = ecx

; 163  :       ~LantirnDrawable(void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LantirnDrawable@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	esp, ebp
	pop	ebp
	ret	0
??1LantirnDrawable@@UAE@XZ ENDP				; LantirnDrawable::~LantirnDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0LantirnDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LantirnDrawable@@QAE@XZ PROC				; LantirnDrawable::LantirnDrawable, COMDAT
; _this$ = ecx

; 162  :       LantirnDrawable () {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MfdDrawable@@QAE@XZ			; MfdDrawable::MfdDrawable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LantirnDrawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0LantirnDrawable@@QAE@XZ ENDP				; LantirnDrawable::LantirnDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMfdMenuDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMfdMenuDrawable@@UAEPAXI@Z PROC			; MfdMenuDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdMenuDrawable@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMfdMenuDrawable@@UAEPAXI@Z ENDP			; MfdMenuDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1MfdMenuDrawable@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MfdMenuDrawable@@UAE@XZ PROC				; MfdMenuDrawable::~MfdMenuDrawable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	esp, ebp
	pop	ebp
	ret	0
??1MfdMenuDrawable@@UAE@XZ ENDP				; MfdMenuDrawable::~MfdMenuDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?SetCurMode@MfdMenuDrawable@@QAEXW4MfdMode@MFDClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cm$ = 8						; size = 4
?SetCurMode@MfdMenuDrawable@@QAEXW4MfdMode@MFDClass@@@Z PROC ; MfdMenuDrawable::SetCurMode, COMDAT
; _this$ = ecx

; 153  :        void SetCurMode (MFDClass::MfdMode cm) { curmode = cm; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cm$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurMode@MfdMenuDrawable@@QAEXW4MfdMode@MFDClass@@@Z ENDP ; MfdMenuDrawable::SetCurMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0MfdMenuDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MfdMenuDrawable@@QAE@XZ PROC				; MfdMenuDrawable::MfdMenuDrawable, COMDAT
; _this$ = ecx

; 150  :        MfdMenuDrawable() { mfdpage = 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MfdDrawable@@QAE@XZ			; MfdDrawable::MfdDrawable
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MfdMenuDrawable@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MfdMenuDrawable@@QAE@XZ ENDP				; MfdMenuDrawable::MfdMenuDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMfdDrawable@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMfdDrawable@@UAEPAXI@Z PROC				; MfdDrawable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MfdDrawable@@UAE@XZ			; MfdDrawable::~MfdDrawable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMfdDrawable@@UAEPAXI@Z ENDP				; MfdDrawable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_tmpColor$ = -20					; size = 4
_tempFont$ = -16					; size = 4
_this$ = -12						; size = 4
_tmpWarnflash$ = -8					; size = 4
_warningBottom$1 = -4					; size = 4
_display$ = 8						; size = 4
?TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z PROC ; MfdDrawable::TGPAttitudeWarning
; _this$ = ecx

; 1122 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1123 : 	int tmpColor = display->Color();

	mov	eax, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tmpColor$[ebp], eax

; 1124 : 	int tempFont = display->CurFont();

	call	?CurFont@VirtualDisplay@@SAHXZ		; VirtualDisplay::CurFont
	mov	DWORD PTR _tempFont$[ebp], eax

; 1125 : 	int tmpWarnflash = (vuxRealTime & 0x100);

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	ecx, 256				; 00000100H
	mov	DWORD PTR _tmpWarnflash$[ebp], ecx

; 1126 : 	
; 1127 : 	if (tmpWarnflash)

	je	$LN4@TGPAttitud

; 1128 : 	{
; 1129 : 		display->SetFont(2);

	push	2
	call	?SetFont@VirtualDisplay@@SAXH@Z		; VirtualDisplay::SetFont
	add	esp, 4

; 1130 : 		display->SetColor(GetMfdColor(MFD_RED));

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	edx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 1131 : 
; 1132 : 		static const float	warningSide	= 0.7f;
; 1133 : 		// Many lines to create the painted box...
; 1134 : 		for ( float warningBottom = -0.18f; warningBottom < 0.25f; warningBottom += 0.0025f )

	movss	xmm0, DWORD PTR __real@be3851ec
	movss	DWORD PTR _warningBottom$1[ebp], xmm0
	jmp	SHORT $LN3@TGPAttitud
$LN2@TGPAttitud:
	movss	xmm0, DWORD PTR _warningBottom$1[ebp]
	addss	xmm0, DWORD PTR __real@3b23d70a
	movss	DWORD PTR _warningBottom$1[ebp], xmm0
$LN3@TGPAttitud:
	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR _warningBottom$1[ebp]
	jbe	SHORT $LN1@TGPAttitud

; 1135 : 		{
; 1136 :             display->Line( -warningSide,   warningBottom,  warningSide,  warningBottom ); 

	push	ecx
	movss	xmm0, DWORD PTR _warningBottom$1[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?warningSide@?4??TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _warningBottom$1[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?warningSide@?4??TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1137 : 		}

	jmp	SHORT $LN2@TGPAttitud
$LN1@TGPAttitud:

; 1138 : 
; 1139 : 		display->SetFont(1);

	push	1
	call	?SetFont@VirtualDisplay@@SAXH@Z		; VirtualDisplay::SetFont
	add	esp, 4

; 1140 : 		display->SetColor(0xFF000000); // Black text

	push	-16777216				; ff000000H
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1141 : 		display->TextCenter (0.4f, 0.16f, "CHECK");	

	push	0
	push	OFFSET ??_C@_05GCOJDIEO@CHECK?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 1142 : 		display->TextCenter (-0.35f, 0.16f, "CHECK");

	push	0
	push	OFFSET ??_C@_05GCOJDIEO@CHECK?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3e23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@beb33333
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 1143 : 		display->TextCenter (0.42f, 0.06f, "ATTITUDE");	

	push	0
	push	OFFSET ??_C@_08DFGDJPOO@ATTITUDE?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ed70a3d
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 1144 : 		display->TextCenter (-0.37f, 0.06f, "ATTITUDE");

	push	0
	push	OFFSET ??_C@_08DFGDJPOO@ATTITUDE?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bebd70a4
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN4@TGPAttitud:

; 1145 : 	}
; 1146 : 
; 1147 : 	display->SetFont(tempFont);

	mov	ecx, DWORD PTR _tempFont$[ebp]
	push	ecx
	call	?SetFont@VirtualDisplay@@SAXH@Z		; VirtualDisplay::SetFont
	add	esp, 4

; 1148 : 	display->SetColor(tmpColor);

	mov	edx, DWORD PTR _tmpColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1149 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?TGPAttitudeWarning@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z ENDP ; MfdDrawable::TGPAttitudeWarning
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_tmpColor$ = -12					; size = 4
_this$ = -8						; size = 4
_tmpWarnflash$ = -4					; size = 4
_display$ = 8						; size = 4
?DrawRedBreak@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z PROC ; MfdDrawable::DrawRedBreak
; _this$ = ecx

; 1105 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1106 : 	int tmpColor = display->Color();

	mov	eax, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tmpColor$[ebp], eax

; 1107 : 	int tmpWarnflash = (vuxRealTime & 0x080);

	mov	ecx, DWORD PTR ?vuxRealTime@@3KA	; vuxRealTime
	and	ecx, 128				; 00000080H
	mov	DWORD PTR _tmpWarnflash$[ebp], ecx

; 1108 : 
; 1109 : 	if (tmpWarnflash)

	je	$LN1@DrawRedBre

; 1110 : 	{
; 1111 : 		display->SetColor(GetMfdColor(MFD_RED));

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	edx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 1112 : 		display->Line (-0.634F, -0.64F, 0.64F, 0.634F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f224dd3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf224dd3
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1113 : 		display->Line (-0.64F, -0.634F, 0.634F, 0.64F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f224dd3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf224dd3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf23d70a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1114 : 		display->Line (0.64F, -0.634F, -0.634F, 0.64F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf224dd3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf224dd3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f23d70a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1115 : 		display->Line (0.634F, -0.64F, -0.64F, 0.634F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f224dd3
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f224dd3
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1116 : 		display->SetColor(tmpColor);	

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _display$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _display$[ebp]
	mov	edx, DWORD PTR [eax+92]
	call	edx
$LN1@DrawRedBre:

; 1117 : 	}
; 1118 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?DrawRedBreak@MfdDrawable@@QAEXPAVVirtualDisplay@@@Z ENDP ; MfdDrawable::DrawRedBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv485 = -192						; size = 8
tv471 = -184						; size = 4
tv476 = -180						; size = 4
tv466 = -176						; size = 4
_dy$1 = -172						; size = 4
tv499 = -168						; size = 4
tv489 = -164						; size = 4
_yPos$2 = -160						; size = 4
tv520 = -156						; size = 4
_dx$3 = -152						; size = 4
_tgtx$4 = -148						; size = 4
tv574 = -144						; size = 4
tv301 = -140						; size = 4
_xlen$ = -136						; size = 4
_RefAngle$ = -132					; size = 4
tv304 = -128						; size = 4
tv76 = -124						; size = 4
tv305 = -120						; size = 4
_xref$ = -116						; size = 4
_yref$ = -112						; size = 4
_playerAC$ = -108					; size = 4
_this$ = -104						; size = 4
_FCC$ = -100						; size = 4
_y$ = -96						; size = 4
_i$5 = -92						; size = 4
_x$ = -88						; size = 4
_theRadar$6 = -84					; size = 4
_offset$ = -80						; size = 4
_xPos$7 = -76						; size = 4
_collPoint$8 = -72					; size = 12
_deltax$ = -60						; size = 28
_deltay$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_self$ = 8						; size = 4
?DrawReference@MfdDrawable@@QAEXPAVAircraftClass@@@Z PROC ; MfdDrawable::DrawReference
; _this$ = ecx

; 1000 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1001 : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 1002 :     const float yref = -0.8f;

	movss	xmm0, DWORD PTR __real@bf4ccccd
	movss	DWORD PTR _yref$[ebp], xmm0

; 1003 :     const float xref = -0.9f;

	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR _xref$[ebp], xmm0

; 1004 :     //const float deltax[] = { 0.05f,  0.05f, 0.05f, 0.03f,  0.05f, 0.05f, 0.05f };
; 1005 : 	//MI tweaked values
; 1006 : 	const float deltax[] = { 0.05f,  0.02f, 0.02f, 0.005f,  0.02f, 0.02f, 0.05f };

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _deltax$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _deltax$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _deltax$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3ba3d70a
	movss	DWORD PTR _deltax$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _deltax$[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _deltax$[ebp+20], xmm0
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _deltax$[ebp+24], xmm0

; 1007 :     const float deltay[] = { 0.00f, -0.05f, 0.05f, 0.00f, -0.05f, 0.05f, 0.00f };

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltay$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@bd4ccccd
	movss	DWORD PTR _deltay$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _deltay$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltay$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@bd4ccccd
	movss	DWORD PTR _deltay$[ebp+16], xmm0
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _deltay$[ebp+20], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _deltay$[ebp+24], xmm0

; 1008 :     const float RefAngle = 45.0f * DTR;

	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _RefAngle$[ebp], xmm0

; 1009 :     float x = xref, y = yref;

	movss	xmm0, DWORD PTR _xref$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR _yref$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 1010 : 
; 1011 :     float offset = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _offset$[ebp], xmm0

; 1012 : 
; 1013 :     ShiAssert(self != NULL && TheHud != NULL);
; 1014 :     FireControlComputer *FCC = self->GetFCC();

	mov	eax, DWORD PTR _self$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _self$[ebp]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 1015 :     ShiAssert(FCC != NULL);
; 1016 :     switch (FCC->GetMasterMode() )

	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?GetMasterMode@FireControlComputer@@QAE?AW4FCCMasterMode@1@XZ ; FireControlComputer::GetMasterMode
	mov	DWORD PTR tv76[ebp], eax
	cmp	DWORD PTR tv76[ebp], 13			; 0000000dH
	ja	$LN7@DrawRefere
	mov	ecx, DWORD PTR tv76[ebp]
	movzx	edx, BYTE PTR $LN30@DrawRefere[ecx]
	jmp	DWORD PTR $LN31@DrawRefere[edx*4]
$LN19@DrawRefere:

; 1017 :     {
; 1018 : 		case FireControlComputer::AirGroundBomb:
; 1019 : 		case FireControlComputer::AirGroundRocket: // MLR 4/3/2004 - 
; 1020 : 		case FireControlComputer::AirGroundLaser:
; 1021 : 		case FireControlComputer::AirGroundCamera:
; 1022 : 			if (FCC->inRange) 

	mov	eax, DWORD PTR _FCC$[ebp]
	cmp	DWORD PTR [eax+216], 0
	je	SHORT $LN18@DrawRefere

; 1023 : 			{
; 1024 : 				offset = FCC->airGroundBearing / RefAngle;

	mov	ecx, DWORD PTR _FCC$[ebp]
	movss	xmm0, DWORD PTR [ecx+336]
	divss	xmm0, DWORD PTR _RefAngle$[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN18@DrawRefere:

; 1025 : 			}
; 1026 : 		break;

	jmp	$LN20@DrawRefere
$LN17@DrawRefere:

; 1027 : 		case FireControlComputer::Dogfight:
; 1028 : 		case FireControlComputer::MissileOverride:
; 1029 :  	    case FireControlComputer::AAGun:
; 1030 : 		//case (FireControlComputer::Gun && FCC->GetSubMode() != FireControlComputer::STRAF):
; 1031 : 		{
; 1032 : 			//MI target
; 1033 : 			RadarDopplerClass* theRadar = (RadarDopplerClass*)FindSensor(playerAC, SensorClass::Radar);

	push	1
	mov	edx, DWORD PTR _playerAC$[ebp]
	push	edx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	DWORD PTR _theRadar$6[ebp], eax

; 1034 : 			if(theRadar && theRadar->CurrentTarget() && theRadar->CurrentTarget()->BaseData() &&
; 1035 : 				!FCC->IsAGMasterMode())

	cmp	DWORD PTR _theRadar$6[ebp], 0
	je	$LN8@DrawRefere
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	test	eax, eax
	je	$LN8@DrawRefere
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	$LN8@DrawRefere
	mov	ecx, DWORD PTR _FCC$[ebp]
	call	?IsAGMasterMode@FireControlComputer@@QAEHXZ ; FireControlComputer::IsAGMasterMode
	test	eax, eax
	jne	$LN8@DrawRefere

; 1036 : 			{
; 1037 : 				float   dx, dy, xPos = 0.0F,tgtx, yPos = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xPos$7[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yPos$2[ebp], xmm0

; 1038 : 				vector  collPoint;//newTarget->localData
; 1039 : 				theRadar->TargetToXY(theRadar->CurrentTarget()->localData, 0, 
; 1040 : 					theRadar->GetDisplayRange(), &tgtx, &yPos);

	lea	eax, DWORD PTR _yPos$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _tgtx$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?GetDisplayRange@RadarDopplerClass@@QAEMXZ ; RadarDopplerClass::GetDisplayRange
	push	ecx
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?TargetToXY@RadarDopplerClass@@QAEXPAVSimObjectLocalData@@HMPAM1@Z ; RadarDopplerClass::TargetToXY

; 1041 : 				if (FindCollisionPoint ((SimBaseClass*)theRadar->CurrentTarget()->BaseData(), 
; 1042 : 					self, &collPoint))

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _collPoint$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _self$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	call	?FindCollisionPoint@@YAHPAVSimBaseClass@@0PAUvector@@M@Z ; FindCollisionPoint
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN12@DrawRefere

; 1043 : 				{
; 1044 : 					collPoint.x -= self->XPos();

	mov	ecx, DWORD PTR _self$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv466[ebp]
	movss	xmm0, DWORD PTR _collPoint$8[ebp]
	subss	xmm0, DWORD PTR tv466[ebp]
	movss	DWORD PTR _collPoint$8[ebp], xmm0

; 1045 : 					collPoint.y -= self->YPos();

	mov	ecx, DWORD PTR _self$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv471[ebp]
	movss	xmm0, DWORD PTR _collPoint$8[ebp+4]
	subss	xmm0, DWORD PTR tv471[ebp]
	movss	DWORD PTR _collPoint$8[ebp+4], xmm0

; 1046 : 					collPoint.z -= self->ZPos();

	mov	ecx, DWORD PTR _self$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv476[ebp]
	movss	xmm0, DWORD PTR _collPoint$8[ebp+8]
	subss	xmm0, DWORD PTR tv476[ebp]
	movss	DWORD PTR _collPoint$8[ebp+8], xmm0

; 1047 : 
; 1048 : 					dx = collPoint.x;

	movss	xmm0, DWORD PTR _collPoint$8[ebp]
	movss	DWORD PTR _dx$3[ebp], xmm0

; 1049 : 					dy = collPoint.y;

	movss	xmm0, DWORD PTR _collPoint$8[ebp+4]
	movss	DWORD PTR _dy$1[ebp], xmm0

; 1050 : 
; 1051 : 					xPos = (float)atan2 (dy,dx) - self->Yaw();

	cvtss2sd xmm0, DWORD PTR _dx$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv485[ebp]
	movsd	xmm0, QWORD PTR tv485[ebp]
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _self$[ebp]
	movss	DWORD PTR tv574[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv489[ebp]
	movss	xmm0, DWORD PTR tv574[ebp]
	subss	xmm0, DWORD PTR tv489[ebp]
	movss	DWORD PTR _xPos$7[ebp], xmm0

; 1052 : 
; 1053 : 					if (xPos > (180.0F * DTR))

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN14@DrawRefere

; 1054 : 						xPos -= 360.0F * DTR;

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	subss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _xPos$7[ebp], xmm0
	jmp	SHORT $LN12@DrawRefere
$LN14@DrawRefere:

; 1055 : 					else if (xPos < (-180.0F * DTR))

	movss	xmm0, DWORD PTR __real@c0490fd9
	comiss	xmm0, DWORD PTR _xPos$7[ebp]
	jbe	SHORT $LN12@DrawRefere

; 1056 : 						xPos += 360.0F * DTR;

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	addss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _xPos$7[ebp], xmm0
$LN12@DrawRefere:

; 1057 : 				}
; 1058 : 
; 1059 : 				/*---------------------------*/
; 1060 : 				/* steering point screen x,y */
; 1061 : 				/*---------------------------*/
; 1062 : 				if (fabs(xPos) < (60.0F * DTR))

	push	ecx
	movss	xmm0, DWORD PTR _xPos$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv499[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR tv499[ebp]
	jbe	$LN11@DrawRefere

; 1063 : 				{
; 1064 : 					xPos = xPos / (60.0F * DTR);

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	divss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR _xPos$7[ebp], xmm0

; 1065 : 					xPos += tgtx;

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	addss	xmm0, DWORD PTR _tgtx$4[ebp]
	movss	DWORD PTR _xPos$7[ebp], xmm0

; 1066 : 					
; 1067 : 					offset = xPos;

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0

; 1068 : 					offset -= TargetAz (self, theRadar->CurrentTarget()->BaseData()->XPos(),
; 1069 : 						theRadar->CurrentTarget()->BaseData()->YPos());

	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _theRadar$6[ebp]
	call	?CurrentTarget@SensorClass@@QAEPAVSimObjectType@@XZ ; SensorClass::CurrentTarget
	mov	ecx, eax
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _self$[ebp]
	push	edx
	call	?TargetAz@@YAMPAVFalconEntity@@MM@Z	; TargetAz
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR tv520[ebp]
	movss	xmm0, DWORD PTR _offset$[ebp]
	subss	xmm0, DWORD PTR tv520[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
	jmp	SHORT $LN8@DrawRefere
$LN11@DrawRefere:

; 1070 : 				}
; 1071 : 				else if(xPos > (60 * DTR))

	movss	xmm0, DWORD PTR _xPos$7[ebp]
	comiss	xmm0, DWORD PTR __real@3f860a91
	jbe	SHORT $LN9@DrawRefere

; 1072 : 					offset = 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _offset$[ebp], xmm0

; 1073 : 				else

	jmp	SHORT $LN8@DrawRefere
$LN9@DrawRefere:

; 1074 : 					offset = -1;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _offset$[ebp], xmm0
$LN8@DrawRefere:

; 1075 : 			}
; 1076 : 		}
; 1077 : 		break;

	jmp	SHORT $LN20@DrawRefere
$LN7@DrawRefere:

; 1078 : 		case FireControlComputer::Nav:
; 1079 : 		case FireControlComputer::ILS:
; 1080 : 		default:	//Catch all the other stuff
; 1081 : 			if (TheHud->waypointValid) 

	mov	eax, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movsx	ecx, BYTE PTR [eax+4952]
	test	ecx, ecx
	je	SHORT $LN6@DrawRefere

; 1082 : 			{ 
; 1083 : 				offset = TheHud->waypointBearing / RefAngle;

	mov	edx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	movss	xmm0, DWORD PTR [edx+4940]
	divss	xmm0, DWORD PTR _RefAngle$[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN6@DrawRefere:
$LN20@DrawRefere:

; 1084 : 			} 
; 1085 : 		break;
; 1086 : 	}
; 1087 :     offset = min ( max (offset, -1.0F), 1.0F);

	movss	xmm0, DWORD PTR _offset$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN24@DrawRefere
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	jmp	SHORT $LN25@DrawRefere
$LN24@DrawRefere:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv301[ebp], xmm0
$LN25@DrawRefere:
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv301[ebp]
	jbe	SHORT $LN28@DrawRefere
	movss	xmm0, DWORD PTR _offset$[ebp]
	comiss	xmm0, DWORD PTR __real@bf800000
	jbe	SHORT $LN26@DrawRefere
	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR tv304[ebp], xmm0
	jmp	SHORT $LN27@DrawRefere
$LN26@DrawRefere:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv304[ebp], xmm0
$LN27@DrawRefere:
	movss	xmm0, DWORD PTR tv304[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	jmp	SHORT $LN29@DrawRefere
$LN28@DrawRefere:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv305[ebp], xmm0
$LN29@DrawRefere:
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR _offset$[ebp], xmm0

; 1088 :     for (int i = 0; i < sizeof(deltax)/sizeof(deltax[0]); i++) 

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN5@DrawRefere
$LN4@DrawRefere:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN5@DrawRefere:
	cmp	DWORD PTR _i$5[ebp], 7
	jae	SHORT $LN3@DrawRefere

; 1089 : 	{
; 1090 : 		display->Line(x, y, x+deltax[i], y+deltay[i]);

	mov	ecx, DWORD PTR _i$5[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _deltay$[ebp+ecx*4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$5[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _deltax$[ebp+edx*4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1091 : 		x += deltax[i]; y += deltay[i];

	mov	eax, DWORD PTR _i$5[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _deltax$[ebp+eax*4]
	movss	DWORD PTR _x$[ebp], xmm0
	mov	ecx, DWORD PTR _i$5[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _deltay$[ebp+ecx*4]
	movss	DWORD PTR _y$[ebp], xmm0

; 1092 :     }

	jmp	$LN4@DrawRefere
$LN3@DrawRefere:

; 1093 :     float xlen = (x - xref);

	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _xref$[ebp]
	movss	DWORD PTR _xlen$[ebp], xmm0

; 1094 :     x = xref + xlen/2 + offset * xlen/2.0f;

	movss	xmm0, DWORD PTR _xlen$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR _xref$[ebp]
	movss	xmm1, DWORD PTR _offset$[ebp]
	mulss	xmm1, DWORD PTR _xlen$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 1095 : 	if(g_bINS)

	movzx	edx, BYTE PTR ?g_bINS@@3_NA		; g_bINS
	test	edx, edx
	je	SHORT $LN1@DrawRefere

; 1096 : 	{
; 1097 : 		if(playerAC && !playerAC->INSState(AircraftClass::INS_HSD_STUFF))

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN1@DrawRefere
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?INSState@AircraftClass@@QAEHW4INSAlignFlags@1@@Z ; AircraftClass::INSState
	test	eax, eax
	jne	SHORT $LN1@DrawRefere

; 1098 : 			return;

	jmp	SHORT $LN22@DrawRefere
$LN1@DrawRefere:

; 1099 : 	}
; 1100 : 	display->Line(x, yref + 0.086f, x, yref - 0.13f);

	movss	xmm0, DWORD PTR _yref$[ebp]
	subss	xmm0, DWORD PTR __real@3e051eb8
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _yref$[ebp]
	addss	xmm0, DWORD PTR __real@3db020c5
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN22@DrawRefere:

; 1101 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN31@DrawRefere:
	DD	$LN17@DrawRefere
	DD	$LN19@DrawRefere
	DD	$LN7@DrawRefere
$LN30@DrawRefere:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	2
	DB	2
	DB	1
	DB	0
	DB	0
	DB	1
	DB	2
	DB	1
?DrawReference@MfdDrawable@@QAEXPAVAircraftClass@@@Z ENDP ; MfdDrawable::DrawReference
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_FCC$ = -36						; size = 4
tv188 = -32						; size = 4
tv168 = -28						; size = 4
tv148 = -24						; size = 4
tv81 = -20						; size = 4
_id$ = -16						; size = 4
tv85 = -12						; size = 4
_this$ = -8						; size = 4
_mfd$ = -4						; size = 4
_button$ = 8						; size = 4
?DefaultLabel@MfdDrawable@@QAEXH@Z PROC			; MfdDrawable::DefaultLabel
; _this$ = ecx

; 956  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 957  :     int id = OnMFD();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMFD@DrawableClass@@QAEHXZ		; DrawableClass::OnMFD
	mov	DWORD PTR _id$[ebp], eax

; 958  :     MFDClass *mfd = MfdDisplay[id];

	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	mov	DWORD PTR _mfd$[ebp], ecx

; 959  : 
; 960  : 	//MI
; 961  : 	FireControlComputer *FCC = MfdDisplay[id]->GetOwnShip()->GetFCC();

	mov	edx, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx*4]
	call	?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ ; MFDClass::GetOwnShip
	mov	DWORD PTR tv81[ebp], eax
	mov	eax, DWORD PTR tv81[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 962  :     ShiAssert(FCC != NULL);
; 963  : 
; 964  :     switch (button) {

	mov	ecx, DWORD PTR _button$[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	mov	edx, DWORD PTR tv85[ebp]
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR tv85[ebp], edx
	cmp	DWORD PTR tv85[ebp], 4
	ja	$LN10@DefaultLab
	mov	eax, DWORD PTR tv85[ebp]
	jmp	DWORD PTR $LN18@DefaultLab[eax*4]
$LN7@DefaultLab:

; 965  :     case 10:
; 966  : 	if (mfd->mode == MFDClass::MfdMode::SMSMode) {

	mov	ecx, DWORD PTR _mfd$[ebp]
	cmp	DWORD PTR [ecx+8], 11			; 0000000bH
	jne	SHORT $LN6@DefaultLab

; 967  : 	    LabelButton(button, "S-J");

	push	0
	push	0
	push	OFFSET ??_C@_03DNAAPCJD@S?9J?$AA@
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 968  : 	}
; 969  : 	else

	jmp	SHORT $LN5@DefaultLab
$LN6@DefaultLab:

; 970  : 	    LabelButton(button, "DCLT");

	push	0
	push	0
	push	OFFSET ??_C@_04LKFIONEM@DCLT?$AA@
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN5@DefaultLab:

; 971  : 	break;

	jmp	$LN10@DefaultLab
$LN4@DefaultLab:

; 972  :     case 11:
; 973  : 			LabelButton(button, MFDClass::ModeName(mfd->GetSP(0)),
; 974  : 			NULL, mfd->cursel[mfd->curmm] == 0);

	mov	ecx, DWORD PTR _mfd$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR _mfd$[ebp]
	cmp	DWORD PTR [eax+edx*4+80], 0
	jne	SHORT $LN12@DefaultLab
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN13@DefaultLab
$LN12@DefaultLab:
	mov	DWORD PTR tv148[ebp], 0
$LN13@DefaultLab:
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _mfd$[ebp]
	call	?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z	; MFDClass::GetSP
	push	eax
	call	?ModeName@MFDClass@@SAPADH@Z		; MFDClass::ModeName
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _button$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 975  : 	break;

	jmp	$LN10@DefaultLab
$LN3@DefaultLab:

; 976  :     case 12:
; 977  : 			LabelButton(button, MFDClass::ModeName(mfd->GetSP(1)),
; 978  : 			NULL, mfd->cursel[mfd->curmm] == 1);

	mov	eax, DWORD PTR _mfd$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _mfd$[ebp]
	cmp	DWORD PTR [edx+ecx*4+80], 1
	jne	SHORT $LN14@DefaultLab
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN15@DefaultLab
$LN14@DefaultLab:
	mov	DWORD PTR tv168[ebp], 0
$LN15@DefaultLab:
	mov	eax, DWORD PTR tv168[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _mfd$[ebp]
	call	?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z	; MFDClass::GetSP
	push	eax
	call	?ModeName@MFDClass@@SAPADH@Z		; MFDClass::ModeName
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 979  : 	break;

	jmp	SHORT $LN10@DefaultLab
$LN2@DefaultLab:

; 980  :     case 13:
; 981  : 			LabelButton(button, MFDClass::ModeName(mfd->GetSP(2)),
; 982  : 			NULL, mfd->cursel[mfd->curmm] == 2);

	mov	edx, DWORD PTR _mfd$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _mfd$[ebp]
	cmp	DWORD PTR [ecx+eax*4+80], 2
	jne	SHORT $LN16@DefaultLab
	mov	DWORD PTR tv188[ebp], 1
	jmp	SHORT $LN17@DefaultLab
$LN16@DefaultLab:
	mov	DWORD PTR tv188[ebp], 0
$LN17@DefaultLab:
	mov	edx, DWORD PTR tv188[ebp]
	push	edx
	push	0
	push	2
	mov	ecx, DWORD PTR _mfd$[ebp]
	call	?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z	; MFDClass::GetSP
	push	eax
	call	?ModeName@MFDClass@@SAPADH@Z		; MFDClass::ModeName
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _button$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 983  : 	break;

	jmp	SHORT $LN10@DefaultLab
$LN1@DefaultLab:

; 984  :     case 14:
; 985  : 	LabelButton(button, "SWAP");

	push	0
	push	0
	push	OFFSET ??_C@_04NLFHDAEB@SWAP?$AA@
	mov	ecx, DWORD PTR _button$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN10@DefaultLab:

; 986  : 	break;
; 987  :     }
; 988  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN18@DefaultLab:
	DD	$LN7@DefaultLab
	DD	$LN4@DefaultLab
	DD	$LN3@DefaultLab
	DD	$LN2@DefaultLab
	DD	$LN1@DefaultLab
?DefaultLabel@MfdDrawable@@QAEXH@Z ENDP			; MfdDrawable::DefaultLabel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
?BottomRow@MfdDrawable@@QAEXXZ PROC			; MfdDrawable::BottomRow
; _this$ = ecx

; 991  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 992  :     for (int i = 10; i < 15; i++)

	mov	DWORD PTR _i$1[ebp], 10			; 0000000aH
	jmp	SHORT $LN3@BottomRow
$LN2@BottomRow:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@BottomRow:
	cmp	DWORD PTR _i$1[ebp], 15			; 0000000fH
	jge	SHORT $LN4@BottomRow

; 993  : 	DefaultLabel(i);

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DefaultLabel@MfdDrawable@@QAEXH@Z	; MfdDrawable::DefaultLabel
	jmp	SHORT $LN2@BottomRow
$LN4@BottomRow:

; 994  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?BottomRow@MfdDrawable@@QAEXXZ ENDP			; MfdDrawable::BottomRow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_FCC$ = -24						; size = 4
_this$ = -20						; size = 4
_otherMfd$ = -16					; size = 4
tv73 = -12						; size = 4
tv78 = -8						; size = 4
_mode$ = -4						; size = 4
_whichButton$ = 8					; size = 4
_whichMFD$ = 12						; size = 4
?PushButton@MfdDrawable@@UAEXHH@Z PROC			; MfdDrawable::PushButton
; _this$ = ecx

; 927  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 928  : 	//MI
; 929  : 	FireControlComputer *FCC = MfdDisplay[whichMFD]->GetOwnShip()->GetFCC();

	mov	eax, DWORD PTR _whichMFD$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	call	?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ ; MFDClass::GetOwnShip
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx+460]
	call	eax
	mov	DWORD PTR _FCC$[ebp], eax

; 930  :     ShiAssert(FCC != NULL);
; 931  : 
; 932  :     MFDClass::MfdMode mode;
; 933  :     int otherMfd = 1 - whichMFD;

	mov	ecx, 1
	sub	ecx, DWORD PTR _whichMFD$[ebp]
	mov	DWORD PTR _otherMfd$[ebp], ecx

; 934  : 
; 935  :     switch(whichButton) {

	mov	edx, DWORD PTR _whichButton$[ebp]
	mov	DWORD PTR tv78[ebp], edx
	cmp	DWORD PTR tv78[ebp], 11			; 0000000bH
	jl	$LN9@PushButton
	cmp	DWORD PTR tv78[ebp], 13			; 0000000dH
	jle	SHORT $LN5@PushButton
	cmp	DWORD PTR tv78[ebp], 14			; 0000000eH
	je	SHORT $LN1@PushButton
	jmp	SHORT $LN9@PushButton

; 936  :     case 10:
; 937  : 	break;

	jmp	SHORT $LN9@PushButton
$LN5@PushButton:

; 938  :     case 11:
; 939  :     case 12:
; 940  :     case 13:
; 941  : 	mode = MfdDisplay[whichMFD]->GetSP(whichButton-11);

	mov	eax, DWORD PTR _whichButton$[ebp]
	sub	eax, 11					; 0000000bH
	push	eax
	mov	ecx, DWORD PTR _whichMFD$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	call	?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z	; MFDClass::GetSP
	mov	DWORD PTR _mode$[ebp], eax

; 942  : 	if (mode == MfdDisplay[whichMFD]->mode) 

	mov	edx, DWORD PTR _whichMFD$[ebp]
	mov	eax, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx*4]
	mov	ecx, DWORD PTR _mode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN4@PushButton

; 943  : 	    mode = MFDClass::MfdMenu;

	mov	DWORD PTR _mode$[ebp], 1
$LN4@PushButton:

; 944  :         // Check other MFD if needed;
; 945  : 	if (mode == MFDClass::MfdOff || otherMfd < 0 || MfdDisplay[otherMfd]->mode != mode)

	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN2@PushButton
	cmp	DWORD PTR _otherMfd$[ebp], 0
	jl	SHORT $LN2@PushButton
	mov	edx, DWORD PTR _otherMfd$[ebp]
	mov	eax, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[edx*4]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _mode$[ebp]
	je	SHORT $LN3@PushButton
$LN2@PushButton:

; 946  : 	    MfdDisplay[whichMFD]->SetNewModeAndPos(whichButton-11, mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _whichButton$[ebp]
	sub	eax, 11					; 0000000bH
	push	eax
	mov	ecx, DWORD PTR _whichMFD$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	call	?SetNewModeAndPos@MFDClass@@QAEXHW4MfdMode@1@@Z ; MFDClass::SetNewModeAndPos
$LN3@PushButton:

; 947  : 	break;

	jmp	SHORT $LN9@PushButton
$LN1@PushButton:

; 948  : 	    
; 949  :     case 14:
; 950  : 	MFDSwapDisplays ();

	call	?MFDSwapDisplays@@YAXXZ			; MFDSwapDisplays
$LN9@PushButton:

; 951  : 	break;
; 952  :     }
; 953  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?PushButton@MfdDrawable@@UAEXHH@Z ENDP			; MfdDrawable::PushButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vd$ = 8						; size = 4
?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z PROC	; MfdDrawable::Display, COMDAT
; _this$ = ecx

; 138  :       virtual void Display (VirtualDisplay*vd) { display = vd; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vd$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z ENDP	; MfdDrawable::Display
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv86 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_image$ = 8						; size = 4
?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z PROC	; MfdDrawable::DisplayInit
; _this$ = ecx

; 917  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 918  :    DisplayExit();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 919  : 
; 920  :    privateDisplay = new Render2D;

	push	262840					; 000402b8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@DisplayIni
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0Render2D@@QAE@XZ			; Render2D::Render2D
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN4@DisplayIni
$LN3@DisplayIni:
	mov	DWORD PTR tv86[ebp], 0
$LN4@DisplayIni:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+24], eax

; 921  :    ((Render2D*)privateDisplay)->Setup (image);

	mov	ecx, DWORD PTR _image$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 922  : 
; 923  :   	privateDisplay->SetColor (0xff00ff00);

	push	-16711936				; ff00ff00H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 924  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DisplayInit@MfdDrawable@@UAEXPAVImageBuffer@@@Z ENDP	; MfdDrawable::DisplayInit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MfdDrawable@@UAE@XZ PROC				; MfdDrawable::~MfdDrawable
; _this$ = ecx

; 913  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MfdDrawable@@6B@

; 914  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableClass@@UAE@XZ		; DrawableClass::~DrawableClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1MfdDrawable@@UAE@XZ ENDP				; MfdDrawable::~MfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ??0MfdDrawable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MfdDrawable@@QAE@XZ PROC				; MfdDrawable::MfdDrawable, COMDAT
; _this$ = ecx

; 135  :       MfdDrawable () {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0DrawableClass@@IAE@XZ		; DrawableClass::DrawableClass
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MfdDrawable@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MfdDrawable@@QAE@XZ ENDP				; MfdDrawable::MfdDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_inUse$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?FreeDrawable@MFDClass@@AAEXXZ PROC			; MFDClass::FreeDrawable
; _this$ = ecx

; 545  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 546  : 	int i;
; 547  : 	int inUse = FALSE;

	mov	DWORD PTR _inUse$[ebp], 0

; 548  : 
; 549  : 	// Don't bother if we don't have a drawable and a private display
; 550  : 	if (drawable && drawable->GetDisplay()) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	$LN8@FreeDrawab
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	test	eax, eax
	je	$LN8@FreeDrawab

; 551  : 		if (mode != MfdOff){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN7@FreeDrawab

; 552  : 			for (i=0; i<NUM_MFDS; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@FreeDrawab
$LN5@FreeDrawab:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@FreeDrawab:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN7@FreeDrawab

; 553  : 				if (MfdDisplay[i] && (this != MfdDisplay[i])){

	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4], 0
	je	SHORT $LN3@FreeDrawab
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	je	SHORT $LN3@FreeDrawab

; 554  : 					if (MfdDisplay[i]->mode == mode){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@FreeDrawab

; 555  : 						inUse = TRUE;

	mov	DWORD PTR _inUse$[ebp], 1

; 556  : 						break;

	jmp	SHORT $LN7@FreeDrawab
$LN3@FreeDrawab:

; 557  : 					}
; 558  : 				}
; 559  : 			}

	jmp	SHORT $LN5@FreeDrawab
$LN7@FreeDrawab:

; 560  : 		}
; 561  : 
; 562  : 		if (!inUse) {

	cmp	DWORD PTR _inUse$[ebp], 0
	jne	SHORT $LN1@FreeDrawab

; 563  : 			drawable->DisplayExit();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+12]
	call	eax
$LN1@FreeDrawab:

; 564  : 		}
; 565  : 
; 566  : 		// Drop our reference, even if someone else is drawing
; 567  : 		// NOTE:: This may cause a leak if no-one calls display
; 568  : 		// exit.
; 569  : 		mode = MfdOff;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN8@FreeDrawab:

; 570  : 	}
; 571  : 	drawable = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], 0

; 572  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeDrawable@MFDClass@@AAEXXZ ENDP			; MFDClass::FreeDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?DecreaseBrightness@MFDClass@@QAEXXZ PROC		; MFDClass::DecreaseBrightness
; _this$ = ecx

; 858  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 859  :     intensity = min (intensity + 1, NUM_MFD_INTENSITIES - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	add	ecx, 1
	cmp	ecx, 4
	jge	SHORT $LN3@DecreaseBr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	add	eax, 1
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@DecreaseBr
$LN3@DecreaseBr:
	mov	DWORD PTR tv70[ebp], 4
$LN4@DecreaseBr:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR [ecx+220], edx

; 860  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecreaseBrightness@MFDClass@@QAEXXZ ENDP		; MFDClass::DecreaseBrightness
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?IncreaseBrightness@MFDClass@@QAEXXZ PROC		; MFDClass::IncreaseBrightness
; _this$ = ecx

; 853  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 854  :     intensity = max (intensity - 1, 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	sub	ecx, 1
	test	ecx, ecx
	jle	SHORT $LN3@IncreaseBr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	sub	eax, 1
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@IncreaseBr
$LN3@IncreaseBr:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IncreaseBr:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR [ecx+220], edx

; 855  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncreaseBrightness@MFDClass@@QAEXXZ ENDP		; MFDClass::IncreaseBrightness
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIntensity@MFDClass@@QAEIXZ PROC			; MFDClass::GetIntensity
; _this$ = ecx

; 870  : { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     return MFDMasks[intensity]; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	mov	eax, DWORD PTR _MFDMasks[ecx*4]

; 872  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetIntensity@MFDClass@@QAEIXZ ENDP			; MFDClass::GetIntensity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Color@MFDClass@@QAEHXZ PROC				; MFDClass::Color
; _this$ = ecx

; 864  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 865  :     return 0xff00 & MFDMasks[intensity];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	mov	eax, DWORD PTR _MFDMasks[ecx*4]
	and	eax, 65280				; 0000ff00H

; 866  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Color@MFDClass@@QAEHXZ ENDP				; MFDClass::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?SetDrawable@MFDClass@@QAEXPAVDrawableClass@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newDisplay$ = 8					; size = 4
?SetDrawable@MFDClass@@QAEXPAVDrawableClass@@@Z PROC	; MFDClass::SetDrawable, COMDAT
; _this$ = ecx

; 91   : 	void SetDrawable(DrawableClass *newDisplay) { drawable = newDisplay; } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newDisplay$[ebp]
	mov	DWORD PTR [eax+116], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDrawable@MFDClass@@QAEXPAVDrawableClass@@@Z ENDP	; MFDClass::SetDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ PROC	; MFDClass::GetDrawable, COMDAT
; _this$ = ecx

; 90   : 	DrawableClass *GetDrawable() const { return const_cast<DrawableClass*>(drawable); } 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+116]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDrawable@MFDClass@@QBEPAVDrawableClass@@XZ ENDP	; MFDClass::GetDrawable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_theDisplay$ = -8					; size = 4
_this$ = -4						; size = 4
_newImage$ = 8						; size = 4
_top$ = 12						; size = 4
_left$ = 16						; size = 4
_bottom$ = 20						; size = 4
_right$ = 24						; size = 4
?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z PROC ; MFDClass::SetImageBuffer
; _this$ = ecx

; 817  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 818  : Render2D* theDisplay;
; 819  : 
; 820  :    if (newImage == NULL)

	cmp	DWORD PTR _newImage$[ebp], 0
	jne	SHORT $LN7@SetImageBu

; 821  :       image = privateImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax+108], edx

; 822  :    else

	jmp	SHORT $LN6@SetImageBu
$LN7@SetImageBu:

; 823  :       image = newImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newImage$[ebp]
	mov	DWORD PTR [eax+108], ecx
$LN6@SetImageBu:

; 824  : 
; 825  :    if (top == bottom)

	movss	xmm0, DWORD PTR _top$[ebp]
	ucomiss	xmm0, DWORD PTR _bottom$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	$LN5@SetImageBu

; 826  :    {
; 827  :       vLeft = 1.0F - VirtualMFD[id].top/(DisplayOptions.DispHeight * 0.5F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[eax+4]
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+144], xmm1

; 828  :       vRight = 1.0F - VirtualMFD[id].bottom/(DisplayOptions.DispHeight * 0.5F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[ecx+12]
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm1

; 829  :       vTop = -1.0F + VirtualMFD[id].left/(DisplayOptions.DispWidth * 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[edx]
	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+140], xmm0

; 830  :       vBottom = -1.0F + VirtualMFD[id].right/(DisplayOptions.DispWidth * 0.5F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[eax+8]
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+148], xmm0

; 831  :    }
; 832  :    else

	jmp	SHORT $LN4@SetImageBu
$LN5@SetImageBu:

; 833  :    {
; 834  :       vTop = top;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _top$[ebp]
	movss	DWORD PTR [eax+140], xmm0

; 835  :       vBottom = bottom;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _bottom$[ebp]
	movss	DWORD PTR [ecx+148], xmm0

; 836  :       vLeft = left;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _left$[ebp]
	movss	DWORD PTR [edx+144], xmm0

; 837  :       vRight = right;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _right$[ebp]
	movss	DWORD PTR [eax+152], xmm0
$LN4@SetImageBu:

; 838  :    }
; 839  : 
; 840  :    if (drawable)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+116], 0
	je	SHORT $LN1@SetImageBu

; 841  :    {
; 842  :       theDisplay = (Render2D*)drawable->GetDisplay();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR _theDisplay$[ebp], eax

; 843  :       if (theDisplay)

	cmp	DWORD PTR _theDisplay$[ebp], 0
	je	SHORT $LN1@SetImageBu

; 844  :       {
; 845  :          if (theDisplay->GetImageBuffer() != image)

	mov	ecx, DWORD PTR _theDisplay$[ebp]
	call	?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ ; Render2D::GetImageBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+108]
	je	SHORT $LN1@SetImageBu

; 846  :             theDisplay->SetImageBuffer(image);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR _theDisplay$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _theDisplay$[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
$LN1@SetImageBu:

; 847  : //         theDisplay->SetViewport(vTop, vLeft, vBottom, vRight);
; 848  :       }
; 849  :    }
; 850  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SetImageBuffer@MFDClass@@QAEXPAVImageBuffer@@MMMM@Z ENDP ; MFDClass::SetImageBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loc$ = 8						; size = 4
_rot$ = 12						; size = 4
?UpdateVirtualPosition@MFDClass@@QAEXPBUTpoint@@PBUTrotation@@@Z PROC ; MFDClass::UpdateVirtualPosition
; _this$ = ecx

; 339  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 340  : 	virtMFD->Update( loc, (struct Trotation *) rot );

	mov	eax, DWORD PTR _rot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+124]
	call	?Update@Canvas3D@@QAEXPBUTpoint@@PBUTrotation@@@Z ; Canvas3D::Update

; 341  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateVirtualPosition@MFDClass@@QAEXPBUTpoint@@PBUTrotation@@@Z ENDP ; MFDClass::UpdateVirtualPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Exit@MFDClass@@QAEXXZ PROC				; MFDClass::Exit
; _this$ = ecx

; 812  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 813  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Exit@MFDClass@@QAEXXZ ENDP				; MFDClass::Exit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv1070 = -136						; size = 4
tv269 = -132						; size = 4
tv1050 = -128						; size = 4
tv355 = -124						; size = 4
tv1014 = -120						; size = 4
tv416 = -116						; size = 4
tv995 = -112						; size = 4
tv696 = -108						; size = 4
tv972 = -104						; size = 4
tv456 = -100						; size = 4
tv954 = -96						; size = 4
tv384 = -92						; size = 4
tv934 = -88						; size = 4
tv312 = -84						; size = 4
tv912 = -80						; size = 4
tv636 = -76						; size = 4
tv896 = -72						; size = 4
tv492 = -68						; size = 4
tv876 = -64						; size = 4
tv437 = -60						; size = 4
tv845 = -56						; size = 4
tv400 = -52						; size = 4
tv824 = -48						; size = 4
tv368 = -44						; size = 4
tv806 = -40						; size = 4
tv341 = -36						; size = 4
tv786 = -32						; size = 4
tv720 = -28						; size = 4
tv512 = -24						; size = 4
_vpLeft$ = -20						; size = 4
_vpBottom$ = -16					; size = 4
_vpTop$ = -12						; size = 4
_vpRight$ = -8						; size = 4
_this$ = -4						; size = 4
_clearFrame$ = 8					; size = 4
_virtualCockpit$ = 12					; size = 4
?Exec@MFDClass@@QAEXHH@Z PROC				; MFDClass::Exec
; _this$ = ecx

; 626  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	DWORD PTR _this$[ebp], ecx

; 627  : 	float vpLeft, vpTop, vpRight, vpBottom;
; 628  : 
; 629  : 	// MD -- 20040727: any time we change the content of the MFD display page
; 630  : 	// the shared memory copies of the OSB label text neds to be blanked so that
; 631  : 	// stale strings from the last mode aren't left by the drawing code for the
; 632  : 	// new mode which only writes the labels for the mode we are changing to now.
; 633  : 	if (changeMode != FALSE){

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN34@Exec

; 634  : 		ClearFlightDataOsbLabels();

	call	?ClearFlightDataOsbLabels@@YAXXZ	; ClearFlightDataOsbLabels
$LN34@Exec:

; 635  : 	}
; 636  : 
; 637  : 	if (changeMode == TRUE_NEXT){

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	cmp	eax, 1
	jne	SHORT $LN33@Exec

; 638  : 		NextMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextMode@MFDClass@@QAEXXZ		; MFDClass::NextMode

; 639  : 		changeMode = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
	jmp	SHORT $LN29@Exec
$LN33@Exec:

; 640  : 	}
; 641  : 	else if(changeMode == TRUE_ABSOLUTE){

	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+4]
	cmp	eax, 2
	jne	SHORT $LN31@Exec

; 642  : 		SetMode (newMode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 643  : 		changeMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	jmp	SHORT $LN29@Exec
$LN31@Exec:

; 644  : 	}
; 645  : 	else if (changeMode == TRUE_MODESWITCH){

	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+4]
	cmp	edx, 3
	jne	SHORT $LN29@Exec

; 646  : 		curmm = newmm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+100], edx

; 647  : 		SetMode(primarySecondary[curmm][cursel[curmm]]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+80]
	mov	eax, DWORD PTR [eax+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 648  : 		changeMode = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
$LN29@Exec:

; 649  : 	}
; 650  : 
; 651  : 	if( virtualCockpit ){

	cmp	DWORD PTR _virtualCockpit$[ebp], 0
	je	$LN26@Exec

; 652  : 		if( drawable ){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	$LN26@Exec

; 653  : 			if( drawable->GetDisplay() ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	test	eax, eax
	je	$LN26@Exec

; 654  : 				drawable->GetDisplay()->SetRttCanvas( &cUL, &cUR, &cLL, cBlend, cAlpha );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+212]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+208]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	ecx, eax
	call	?SetRttCanvas@VirtualDisplay@@QAEXPAUTpoint@@00DM@Z ; VirtualDisplay::SetRttCanvas

; 655  : 				drawable->GetDisplay()->SetRttRect( tLeft, tTop, tRight, tBottom  ); 

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+200]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, eax
	call	?SetRttRect@VirtualDisplay@@QAEXHHHH_N@Z ; VirtualDisplay::SetRttRect
$LN26@Exec:

; 656  : 			}
; 657  : 		}
; 658  : 	}
; 659  : 
; 660  : 	if (ownship && ownship->mFaults &&
; 661  : 		(
; 662  : 		(ownship->mFaults->GetFault(FaultClass::flcs_fault) & FaultClass::dmux) ||
; 663  : 		ownship->mFaults->GetFault(FaultClass::dmux_fault) ||
; 664  : 		((ownship->mFaults->GetFault(FaultClass::mfds_fault) & FaultClass::lfwd) && (id % 2 == 0)) ||
; 665  : 		((ownship->mFaults->GetFault(FaultClass::mfds_fault) & FaultClass::rfwd) && (id % 2 == 1))
; 666  : 		)
; 667  : 	){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	je	$LN25@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	cmp	DWORD PTR [eax+928], 0
	je	$LN25@Exec
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	ecx, DWORD PTR [edx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 16					; 00000010H
	jne	$LN24@Exec
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN24@Exec
	push	22					; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 524288				; 00080000H
	je	SHORT $LN23@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN37@Exec
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN37@Exec:
	test	edx, edx
	je	SHORT $LN24@Exec
$LN23@Exec:
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	ecx, DWORD PTR [ecx+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	and	eax, 1048576				; 00100000H
	je	SHORT $LN25@Exec
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN38@Exec
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN38@Exec:
	cmp	eax, 1
	jne	SHORT $LN25@Exec
$LN24@Exec:

; 668  : 		return;

	jmp	$LN35@Exec
$LN25@Exec:

; 669  : 	}
; 670  : 	
; 671  : 	if (!ownship->HasPower(AircraftClass::MFDPower))

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+132]
	call	?HasPower@AircraftClass@@QAEHW4AvionicsPowerFlags@1@@Z ; AircraftClass::HasPower
	test	eax, eax
	jne	SHORT $LN22@Exec

; 672  : 		return;

	jmp	$LN35@Exec
$LN22@Exec:

; 673  : 
; 674  : 	// ASSO: rewritten the virtual cockpit branch
; 675  : 	if(virtualCockpit){

	cmp	DWORD PTR _virtualCockpit$[ebp], 0
	je	$LN21@Exec

; 676  : 		if( drawable ){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	$LN14@Exec

; 677  : 			drawable->SetMFD( id );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	call	?SetMFD@DrawableClass@@QAEXH@Z		; DrawableClass::SetMFD

; 678  : 			if( drawable->GetDisplay() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	test	eax, eax
	je	$LN19@Exec

; 679  : 			{	
; 680  : 				if (((Render2D*)(drawable->GetDisplay()))->GetImageBuffer() != image)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	ecx, eax
	call	?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ ; Render2D::GetImageBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+108]
	je	SHORT $LN18@Exec

; 681  : 					((Render2D*)(drawable->GetDisplay()))->SetImageBuffer(image);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv269[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR tv269[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv269[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
$LN18@Exec:

; 682  : 				((Render2D*)(drawable->GetDisplay()))->GetViewport (&vpLeft, &vpTop, &vpRight, &vpBottom);

	lea	ecx, DWORD PTR _vpBottom$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vpRight$[ebp]
	push	edx
	lea	eax, DWORD PTR _vpTop$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vpLeft$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, eax
	call	?GetViewport@VirtualDisplay@@QAEXPAM000@Z ; VirtualDisplay::GetViewport

; 683  : 				((Render2D*)(drawable->GetDisplay()))->SetViewport(vTop, vLeft, vBottom, vRight);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv312[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+144]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+140]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv312[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv312[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx

; 684  : 				//OTWDriver.SetPopup(id, TRUE);
; 685  : 				
; 686  : 				drawable->GetDisplay()->AdjustRttViewport();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	ecx, eax
	call	?AdjustRttViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::AdjustRttViewport

; 687  : 				
; 688  : 				drawable->GetDisplay()->StartDraw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR tv341[ebp], eax
	mov	eax, DWORD PTR tv341[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv341[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 689  : 				
; 690  : 				if (g_b3DRTTCockpitDebug)

	movzx	ecx, BYTE PTR ?g_b3DRTTCockpitDebug@@3_NA ; g_b3DRTTCockpitDebug
	test	ecx, ecx
	je	$LN17@Exec

; 691  : 				{
; 692  : 					//ATARIBABY debug frame around surface
; 693  : 					drawable->GetDisplay()->SetColor (0x0000ffff);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv355[ebp], eax
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR tv355[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv355[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 694  : 					drawable->GetDisplay()->Line (-0.995F, -0.995F, 0.995F, -0.995F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv368[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv368[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv368[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 695  : 					drawable->GetDisplay()->Line (-0.995F, 0.995F, 0.995F, 0.995F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv384[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv384[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv384[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 696  : 					drawable->GetDisplay()->Line (-0.995F, 0.995F, -0.995F, -0.995F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv400[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv400[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv400[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 697  : 					drawable->GetDisplay()->Line (0.995F, 0.995F, 0.995F, -0.995F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv416[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bf7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f7eb852
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv416[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv416[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN17@Exec:

; 698  : 				}
; 699  : 				
; 700  : 				drawable->SetIntensity( GetIntensity() ); // JPO set intensity

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIntensity@MFDClass@@QAEIXZ		; MFDClass::GetIntensity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?SetIntensity@DrawableClass@@QAEXI@Z	; DrawableClass::SetIntensity

; 701  : 				drawable->GetDisplay()->SetColor( Color() );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv437[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Color@MFDClass@@QAEHXZ			; MFDClass::Color
	push	eax
	mov	ecx, DWORD PTR tv437[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv437[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 702  : 
; 703  : 				if( mode == RWRMode )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 12			; 0000000cH
	jne	SHORT $LN16@Exec

; 704  : 				{
; 705  : 					if( g_bEnableMfdColors ) // a.s. begin

	movzx	edx, BYTE PTR ?g_bEnableMfdColors@@3_NA	; g_bEnableMfdColors
	test	edx, edx
	je	SHORT $LN15@Exec

; 706  : 					{
; 707  : 						drawable->GetDisplay()->SetColor( 0xff00ff00 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR tv456[ebp], eax
	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR tv456[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv456[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
$LN15@Exec:

; 708  : 					} // a.s. end
; 709  : 
; 710  : 					((PlayerRwrClass*)drawable)->SetGridVisible(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?SetGridVisible@PlayerRwrClass@@QAEXH@Z	; PlayerRwrClass::SetGridVisible
$LN16@Exec:

; 711  : 				}
; 712  : 
; 713  : 				drawable->Display( drawable->GetDisplay() );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 714  : 				
; 715  : 				drawable->GetDisplay()->EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv492[ebp], eax
	mov	ecx, DWORD PTR tv492[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv492[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 716  : 
; 717  : 				((Render2D*)(drawable->GetDisplay()))->SetViewport (vpLeft, vpTop, vpRight, vpBottom);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv512[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR _vpBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpRight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpLeft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv512[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv512[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 718  : 			}
; 719  : 			else

	jmp	$LN14@Exec
$LN19@Exec:

; 720  : 			{
; 721  : 				OTWDriver.renderer->FinishRtt();

	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?FinishRtt@VirtualDisplay@@QAEXXZ	; VirtualDisplay::FinishRtt

; 722  : 				drawable->DisplayInit( image );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 723  : 
; 724  : 				OTWDriver.renderer->StartRtt( OTWDriver.renderer );

	mov	eax, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	push	eax
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	call	?StartRtt@VirtualDisplay@@QAEXPAVRender3D@@@Z ; VirtualDisplay::StartRtt

; 725  : 				drawable->GetDisplay()->SetRttCanvas( &cUL, &cUR, &cLL, cBlend, cAlpha );

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+212]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+208]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 180				; 000000b4H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 156				; 0000009cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, eax
	call	?SetRttCanvas@VirtualDisplay@@QAEXPAUTpoint@@00DM@Z ; VirtualDisplay::SetRttCanvas

; 726  : 				drawable->GetDisplay()->SetRttRect( tLeft, tTop, tRight, tBottom ); 

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	ecx, eax
	call	?SetRttRect@VirtualDisplay@@QAEXHHHH_N@Z ; VirtualDisplay::SetRttRect

; 727  : 				drawable->GetDisplay()->AdjustRttViewport();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	ecx, eax
	call	?AdjustRttViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::AdjustRttViewport
$LN14@Exec:

; 728  : 
; 729  : 
; 730  : 			}
; 731  : 		}
; 732  : 	}
; 733  : 	else {

	jmp	$LN1@Exec
$LN21@Exec:

; 734  : 		if (drawable && !(mode == MfdOff && clearFrame)){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	$LN12@Exec
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN11@Exec
	cmp	DWORD PTR _clearFrame$[ebp], 0
	jne	$LN12@Exec
$LN11@Exec:

; 735  : 			drawable->SetMFD(id);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?SetMFD@DrawableClass@@QAEXH@Z		; DrawableClass::SetMFD

; 736  : 			if (drawable->GetDisplay()){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	test	eax, eax
	je	$LN10@Exec

; 737  : 				if (((Render2D*)(drawable->GetDisplay()))->GetImageBuffer() != image) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, eax
	call	?GetImageBuffer@Render2D@@QAEPAVImageBuffer@@XZ ; Render2D::GetImageBuffer
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+108]
	je	SHORT $LN9@Exec

; 738  : 					((Render2D*)(drawable->GetDisplay()))->SetImageBuffer(image);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv636[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR tv636[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv636[ebp]
	mov	eax, DWORD PTR [edx+136]
	call	eax
$LN9@Exec:

; 739  : 				}
; 740  : 				// ASSO: reset the viewport to the main buffer size
; 741  : 				((Render2D*)(drawable->GetDisplay()))->ResetRttViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, eax
	call	?ResetRttViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ResetRttViewport

; 742  : 				
; 743  : 				((Render2D*)(drawable->GetDisplay()))->GetViewport (&vpLeft, &vpTop, &vpRight, &vpBottom);

	lea	ecx, DWORD PTR _vpBottom$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vpRight$[ebp]
	push	edx
	lea	eax, DWORD PTR _vpTop$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vpLeft$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, eax
	call	?GetViewport@VirtualDisplay@@QAEXPAM000@Z ; VirtualDisplay::GetViewport

; 744  : 				((Render2D*)(drawable->GetDisplay()))->SetViewport(vTop, vLeft, vBottom, vRight);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv696[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+148]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+144]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+140]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv696[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv696[ebp]
	mov	edx, DWORD PTR [eax+112]
	call	edx

; 745  : 				OTWDriver.SetPopup(id, TRUE);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetPopup@OTWDriverClass@@QAEXHH@Z	; OTWDriverClass::SetPopup

; 746  : 				drawable->GetDisplay()->StartDraw();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv720[ebp], eax
	mov	ecx, DWORD PTR tv720[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv720[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 747  : 				if(clearFrame){

	cmp	DWORD PTR _clearFrame$[ebp], 0
	je	$LN8@Exec

; 748  : 					if (g_bEnableMfdColors) // a.s. begin - makes Mfds transparent and colored

	movzx	ecx, BYTE PTR ?g_bEnableMfdColors@@3_NA	; g_bEnableMfdColors
	test	ecx, ecx
	je	$LN6@Exec

; 749  : 					{
; 750  : 						mycolor = (int)((g_fMfdRed/100.0F)*255.0F) + (int)((g_fMfdGreen/100.0F)*255.0F) * 0x100 + (int)((g_fMfdBlue/100.0F)*255.0F) * 0x10000 + (int)((g_fMfdTransparency/100.0F)*255.0F) * 0x1000000;

	movss	xmm0, DWORD PTR ?g_fMfdRed@@3MA
	divss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si edx, xmm0
	movss	xmm0, DWORD PTR ?g_fMfdGreen@@3MA
	divss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 8
	add	edx, eax
	movss	xmm0, DWORD PTR ?g_fMfdBlue@@3MA
	divss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si ecx, xmm0
	shl	ecx, 16					; 00000010H
	add	edx, ecx
	movss	xmm0, DWORD PTR ?g_fMfdTransparency@@3MA
	divss	xmm0, DWORD PTR __real@42c80000
	mulss	xmm0, DWORD PTR __real@437f0000
	cvttss2si eax, xmm0
	shl	eax, 24					; 00000018H
	add	edx, eax
	mov	DWORD PTR ?mycolor@@3KA, edx		; mycolor

; 751  : 						if (mode == FCCMode ) 

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 9
	jne	$LN6@Exec

; 752  : 						{	
; 753  : 							drawable->Display(drawable->GetDisplay());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 754  : 
; 755  : 							OTWDriver.renderer->context.RestoreState( STATE_SOLID ); 

	push	0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 756  : 							drawable->GetDisplay()->SetColor (mycolor);	

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv786[ebp], eax
	mov	ecx, DWORD PTR ?mycolor@@3KA		; mycolor
	push	ecx
	mov	edx, DWORD PTR tv786[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv786[ebp]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 757  : 							OTWDriver.renderer->context.RestoreState( STATE_ALPHA_SOLID );

	push	16					; 00000010H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 758  : 							drawable->GetDisplay()->Tri (-1.0F, -1.0F, -1.0F, 1.0F, 1.0F, 1.0F);  

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR tv806[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR tv806[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv806[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 759  : 							drawable->GetDisplay()->Tri (-1.0F, -1.0F, 1.0F, -1.0F, 1.0F, 1.0F);  		

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv824[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv824[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv824[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 760  : 
; 761  : 							drawable->SetIntensity(0xffffffff); 

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?SetIntensity@DrawableClass@@QAEXI@Z	; DrawableClass::SetIntensity

; 762  : 							drawable->GetDisplay()->SetColor (Color());	

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv845[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Color@MFDClass@@QAEHXZ			; MFDClass::Color
	push	eax
	mov	ecx, DWORD PTR tv845[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv845[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 763  : 
; 764  : 							drawable->Display(drawable->GetDisplay()); // second Display is necessary for FCC

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 765  : 							drawable->GetDisplay()->EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv876[ebp], eax
	mov	ecx, DWORD PTR tv876[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv876[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 766  : 							((Render2D*)(drawable->GetDisplay()))->SetViewport (vpLeft, vpTop, vpRight, vpBottom); // EFOV bugfix 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv896[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR _vpBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpRight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpLeft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv896[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv896[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 767  : 
; 768  : 							return;

	jmp	$LN35@Exec
$LN6@Exec:

; 769  : 						}
; 770  : 					} // a.s. end
; 771  : 
; 772  : 					drawable->GetDisplay()->SetColor (0xff000000);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv912[ebp], eax
	push	-16777216				; ff000000H
	mov	ecx, DWORD PTR tv912[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv912[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 773  : 
; 774  : 					if (g_bEnableMfdColors) // a.s. begin 

	movzx	ecx, BYTE PTR ?g_bEnableMfdColors@@3_NA	; g_bEnableMfdColors
	test	ecx, ecx
	je	SHORT $LN5@Exec

; 775  : 					{
; 776  : 						OTWDriver.renderer->context.RestoreState( STATE_SOLID );

	push	0
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState

; 777  : 						drawable->GetDisplay()->SetColor (mycolor);	

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv934[ebp], eax
	mov	ecx, DWORD PTR ?mycolor@@3KA		; mycolor
	push	ecx
	mov	edx, DWORD PTR tv934[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv934[ebp]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 778  : 						OTWDriver.renderer->context.RestoreState( STATE_ALPHA_SOLID );

	push	16					; 00000010H
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+33576
	add	ecx, 100				; 00000064H
	call	?RestoreState@ContextMPR@@QAEXH@Z	; ContextMPR::RestoreState
$LN5@Exec:

; 779  : 					} // a.s. end
; 780  : 
; 781  : 					drawable->GetDisplay()->Tri (-1.0F, -1.0F, -1.0F, 1.0F, 1.0F, 1.0F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR tv954[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR tv954[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv954[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 782  : 					drawable->GetDisplay()->Tri (-1.0F, -1.0F, 1.0F, -1.0F, 1.0F, 1.0F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv972[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv972[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv972[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
$LN8@Exec:

; 783  : 				}
; 784  : 
; 785  : 
; 786  : 				drawable->SetIntensity(GetIntensity()); // JPO set intensity

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIntensity@MFDClass@@QAEIXZ		; MFDClass::GetIntensity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?SetIntensity@DrawableClass@@QAEXI@Z	; DrawableClass::SetIntensity

; 787  : 				drawable->GetDisplay()->SetColor (Color());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv995[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Color@MFDClass@@QAEHXZ			; MFDClass::Color
	push	eax
	mov	ecx, DWORD PTR tv995[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv995[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 788  : 				if (mode == RWRMode){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 12			; 0000000cH
	jne	SHORT $LN4@Exec

; 789  : 					if (g_bEnableMfdColors){

	movzx	edx, BYTE PTR ?g_bEnableMfdColors@@3_NA	; g_bEnableMfdColors
	test	edx, edx
	je	SHORT $LN3@Exec

; 790  : 						drawable->GetDisplay()->SetColor (0xff00ff00);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR tv1014[ebp], eax
	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR tv1014[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1014[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
$LN3@Exec:

; 791  : 					}
; 792  : 					((PlayerRwrClass*)drawable)->SetGridVisible(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+116]
	call	?SetGridVisible@PlayerRwrClass@@QAEXH@Z	; PlayerRwrClass::SetGridVisible
$LN4@Exec:

; 793  : 				}
; 794  : 
; 795  : 				drawable->Display(drawable->GetDisplay());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 796  : 				drawable->GetDisplay()->EndDraw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv1050[ebp], eax
	mov	ecx, DWORD PTR tv1050[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1050[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax

; 797  : 				((Render2D*)(drawable->GetDisplay()))->SetViewport(vpLeft, vpTop, vpRight, vpBottom);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+116]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv1070[ebp], eax
	push	ecx
	movss	xmm0, DWORD PTR _vpBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpRight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpLeft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR tv1070[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1070[ebp]
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 798  : 			}
; 799  : 			else

	jmp	SHORT $LN2@Exec
$LN10@Exec:

; 800  : 			{
; 801  : 				drawable->DisplayInit (image);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+8]
	call	edx
$LN2@Exec:

; 802  : 			}
; 803  : 		}
; 804  : 		else

	jmp	SHORT $LN1@Exec
$LN12@Exec:

; 805  : 		{
; 806  : 			OTWDriver.SetPopup(id, FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetPopup@OTWDriverClass@@QAEXHH@Z	; OTWDriverClass::SetPopup
$LN1@Exec:
$LN35@Exec:

; 807  : 		}
; 808  : 	}
; 809  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Exec@MFDClass@@QAEXHH@Z ENDP				; MFDClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newMfdMode$ = 8					; size = 4
?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z PROC		; MFDClass::SetNewMode
; _this$ = ecx

; 591  : void MFDClass::SetNewMode(MfdMode newMfdMode) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 592  :     
; 593  :     newMode = newMfdMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMfdMode$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 594  :     changeMode = TRUE_ABSOLUTE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 2

; 595  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z ENDP		; MFDClass::SetNewMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r3d$ = 8						; size = 4
?SetNewRenderer@MFDClass@@QAEXPAVRender3D@@@Z PROC	; MFDClass::SetNewRenderer
; _this$ = ecx

; 334  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 	virtMFD->ResetTargetRenderer(r3d);

	mov	eax, DWORD PTR _r3d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+124]
	call	?ResetTargetRenderer@Canvas3D@@QAEXPAVRender3D@@@Z ; Canvas3D::ResetTargetRenderer

; 336  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNewRenderer@MFDClass@@QAEXPAVRender3D@@@Z ENDP	; MFDClass::SetNewRenderer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ PROC	; MFDClass::GetOwnShip, COMDAT
; _this$ = ecx

; 82   : 	AircraftClass *GetOwnShip() { return ownship; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+132]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOwnShip@MFDClass@@QAEPAVAircraftClass@@XZ ENDP	; MFDClass::GetOwnShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_newOwnship$ = 8					; size = 4
?SetOwnship@MFDClass@@QAEXPAVAircraftClass@@@Z PROC	; MFDClass::SetOwnship
; _this$ = ecx

; 344  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 345  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 346  : 	if (playerAC &&	playerAC->IsSetFlag(MOTION_OWNSHIP) && ownship == playerAC && newOwnship != playerAC) { 

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN3@SetOwnship
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@SetOwnship
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _playerAC$[ebp]
	jne	SHORT $LN3@SetOwnship
	mov	edx, DWORD PTR _newOwnship$[ebp]
	cmp	edx, DWORD PTR _playerAC$[ebp]
	je	SHORT $LN3@SetOwnship

; 347  : 		// If we are jumping to another vehicle view ...
; 348  : 		restoreMode = mode;						// ... save the current MFD state

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], edx
$LN3@SetOwnship:

; 349  :     }
; 350  :     
; 351  :     ownship = newOwnship;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newOwnship$[ebp]
	mov	DWORD PTR [eax+132], ecx

; 352  :     FreeDrawable();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeDrawable@MFDClass@@AAEXXZ		; MFDClass::FreeDrawable

; 353  :     drawable = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], 0

; 354  : 
; 355  :     // If we are jumping back into our F16
; 356  :     if (playerAC && playerAC->IsSetFlag(MOTION_OWNSHIP) && ownship == playerAC){

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN2@SetOwnship
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN2@SetOwnship
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, DWORD PTR _playerAC$[ebp]
	jne	SHORT $LN2@SetOwnship

; 357  : 		SetMode(restoreMode);									// restore the saved MFD state

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 358  :     }
; 359  :     else {

	jmp	SHORT $LN4@SetOwnship
$LN2@SetOwnship:

; 360  : 		SetMode (MfdOff);										// Otherwise turn the MFD off					

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode
$LN4@SetOwnship:

; 361  :     }
; 362  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetOwnship@MFDClass@@QAEXPAVAircraftClass@@@Z ENDP	; MFDClass::SetOwnship
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_lastMode$ = -12					; size = 4
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_newMode$ = 8						; size = 4
?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z PROC		; MFDClass::SetMode
; _this$ = ecx

; 459  : void MFDClass::SetMode(MfdMode newMode){

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 460  : 	if (ownship == NULL){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+132], 0
	jne	SHORT $LN19@SetMode

; 461  :         return;

	jmp	$LN20@SetMode
$LN19@SetMode:

; 462  : 	}
; 463  : 
; 464  : 	MfdMode lastMode = mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _lastMode$[ebp], edx

; 465  : 
; 466  : 	FreeDrawable();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeDrawable@MFDClass@@AAEXXZ		; MFDClass::FreeDrawable

; 467  : 	mode = newMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 468  : 
; 469  : 	switch (mode)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 13			; 0000000dH
	ja	$LN9@SetMode
	mov	ecx, DWORD PTR tv70[ebp]
	movzx	edx, BYTE PTR $LN22@SetMode[ecx]
	jmp	DWORD PTR $LN23@SetMode[edx*4]
$LN16@SetMode:

; 470  : 	{
; 471  : 		case FCRMode:
; 472  : 			drawable = FindSensor(ownship, SensorClass::Radar);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], eax

; 473  : 			break;

	jmp	$LN17@SetMode
$LN15@SetMode:

; 474  : 
; 475  : 		case RWRMode:
; 476  : 			drawable = FindSensor(ownship, SensorClass::RWR);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	?FindSensor@@YAPAVSensorClass@@PAVSimMoverClass@@H@Z ; FindSensor
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], eax

; 477  : 			break;

	jmp	$LN17@SetMode
$LN14@SetMode:

; 478  : 
; 479  : 		case SMSMode:
; 480  : 			drawable = ownship->FCC->Sms->drawable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [ecx+936]
	mov	eax, DWORD PTR [edx+408]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+160]
	mov	DWORD PTR [ecx+116], edx

; 481  : 			break;

	jmp	SHORT $LN17@SetMode
$LN13@SetMode:

; 482  : 
; 483  : 		// RV - I-Hawk - Replaced HUDMode with HADMode
; 484  : 		///*case HUDMode:
; 485  : 		//	drawable = TheHud;
; 486  : 		//break;*/
; 487  : 
; 488  : 		case HADMode: 
; 489  : 			drawable = HadDrawable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A ; MFDClass::HadDrawable
	mov	DWORD PTR [eax+116], ecx

; 490  : 			break;

	jmp	SHORT $LN17@SetMode
$LN12@SetMode:

; 491  : 
; 492  : 		case FCCMode:
; 493  : 			drawable = ownship->FCC;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+936]
	mov	DWORD PTR [ecx+116], edx

; 494  : 			break;

	jmp	SHORT $LN17@SetMode
$LN11@SetMode:

; 495  : 
; 496  : 		case MfdMenu: // special case cos its not really a mode
; 497  : 			drawable = mfdDraw[MfdMenu];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax]
	mov	DWORD PTR [ecx+116], edx

; 498  : 			restoreMode = lastMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lastMode$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 499  : 			((MfdMenuDrawable*)mfdDraw[MfdMenu])->SetCurMode(lastMode);

	mov	edx, DWORD PTR _lastMode$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax]
	call	?SetCurMode@MfdMenuDrawable@@QAEXW4MfdMode@MFDClass@@@Z ; MfdMenuDrawable::SetCurMode

; 500  : 			break;

	jmp	SHORT $LN17@SetMode
$LN10@SetMode:

; 501  : 
; 502  : 		case MfdOff:
; 503  : 		case TFRMode:
; 504  : 		case TestMode:
; 505  : 		case FLIRMode:
; 506  : 		case DTEMode:
; 507  : 		case FLCSMode:
; 508  : 		case WPNMode:
; 509  : 		case TGPMode:
; 510  : 			drawable = mfdDraw[mode];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx*4]
	mov	DWORD PTR [eax+116], ecx

; 511  : 			break;

	jmp	SHORT $LN17@SetMode
$LN9@SetMode:

; 512  : 	      
; 513  : 		default:
; 514  : 			ShiWarning( "Bad MFD mode" );
; 515  : 			drawable = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], 0
$LN17@SetMode:

; 516  : 			break;
; 517  : 	}
; 518  : 	if (mode != MfdMenu) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	je	SHORT $LN8@SetMode

; 519  : 		primarySecondary[curmm][cursel[curmm]] = mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+80]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax*4], edx

; 520  : 		if (id == 0){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@SetMode

; 521  : 			MfdDisplay[1]->StealMode(mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	call	?StealMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::StealMode
	jmp	SHORT $LN8@SetMode
$LN7@SetMode:

; 522  : 		}
; 523  : 		else if (id == 1){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN8@SetMode

; 524  : 			MfdDisplay[0]->StealMode(mode);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, 4
	imul	ecx, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	call	?StealMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::StealMode
$LN8@SetMode:

; 525  : 		}
; 526  : 	}
; 527  : 
; 528  : 	if (drawable){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	SHORT $LN4@SetMode

; 529  : 		drawable->SetMFD(id);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	call	?SetMFD@DrawableClass@@QAEXH@Z		; DrawableClass::SetMFD

; 530  : 		drawable->viewPoint = viewPoint;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	DWORD PTR [ecx+16], eax

; 531  : 
; 532  : 		if (mode != MfdOff){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@SetMode

; 533  : 			OTWDriver.SetPopup(id, TRUE);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetPopup@OTWDriverClass@@QAEXHH@Z	; OTWDriverClass::SetPopup

; 534  : 		}
; 535  : 		else {

	jmp	SHORT $LN2@SetMode
$LN3@SetMode:

; 536  : 			OTWDriver.SetPopup(id, FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetPopup@OTWDriverClass@@QAEXHH@Z	; OTWDriverClass::SetPopup
$LN2@SetMode:

; 537  : 		}
; 538  : 	}
; 539  : 	else{

	jmp	SHORT $LN20@SetMode
$LN4@SetMode:

; 540  : 		OTWDriver.SetPopup(id, FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?SetPopup@OTWDriverClass@@QAEXHH@Z	; OTWDriverClass::SetPopup
$LN20@SetMode:

; 541  : 	}
; 542  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN23@SetMode:
	DD	$LN10@SetMode
	DD	$LN11@SetMode
	DD	$LN12@SetMode
	DD	$LN16@SetMode
	DD	$LN14@SetMode
	DD	$LN15@SetMode
	DD	$LN13@SetMode
$LN22@SetMode:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z ENDP		; MFDClass::SetMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv148 = -8						; size = 4
_this$ = -4						; size = 4
?NextMode@MFDClass@@QAEXXZ PROC				; MFDClass::NextMode
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 366  :     if (g_bRealisticAvionics && id < 2)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN27@NextMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 2
	jge	$LN27@NextMode

; 367  :     {
; 368  : 	cursel[curmm] --;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+80]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+ecx*4+80], edx

; 369  : 	if (cursel[curmm] < 0){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+edx*4+80], 0
	jge	SHORT $LN26@NextMode

; 370  : 	    cursel[curmm] = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx*4+80], 2
$LN26@NextMode:

; 371  : 	}
; 372  : 	mode = primarySecondary[curmm][cursel[curmm]];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+80]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+8], eax

; 373  : 	//MI addition
; 374  : 	if(mode == MfdOff)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN25@NextMode

; 375  : 		NextMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextMode@MFDClass@@QAEXXZ		; MFDClass::NextMode
$LN25@NextMode:

; 376  : 		SetMode(mode);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 377  :     }
; 378  :     else {

	jmp	$LN24@NextMode
$LN27@NextMode:

; 379  : 	switch (mode)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv148[ebp], edx
	cmp	DWORD PTR tv148[ebp], 13		; 0000000dH
	ja	$LN7@NextMode
	mov	eax, DWORD PTR tv148[ebp]
	jmp	DWORD PTR $LN30@NextMode[eax*4]
$LN21@NextMode:

; 380  : 	{
; 381  : 	  case FCCMode:
; 382  : 		SetMode (FCRMode);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 383  : 		break;

	jmp	$LN24@NextMode
$LN20@NextMode:

; 384  : 
; 385  : 	  case FCRMode:
; 386  : 		SetMode (SMSMode);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 387  : 		break;

	jmp	$LN24@NextMode
$LN19@NextMode:

; 388  : 
; 389  : 	  case SMSMode:
; 390  : 		SetMode (RWRMode);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 391  : 		break;

	jmp	$LN24@NextMode
$LN18@NextMode:

; 392  : 
; 393  : 	  case RWRMode:
; 394  : 		  // M.N. added full realism mode
; 395  : 		if (PlayerOptions.GetAvionicsType() != ATRealistic && PlayerOptions.GetAvionicsType() != ATRealisticAV) {

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	cmp	eax, 2
	je	SHORT $LN17@NextMode
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	cmp	eax, 3
	je	SHORT $LN17@NextMode

; 396  : 			SetMode (MfdOff);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 397  : 		} else {

	jmp	SHORT $LN16@NextMode
$LN17@NextMode:

; 398  : 			// SetMode (HUDMode)
; 399  : 			SetMode ( HADMode ); // RV - I-Hawk 

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode
$LN16@NextMode:

; 400  : 		}
; 401  : 		break;

	jmp	$LN24@NextMode
$LN15@NextMode:

; 402  : 
; 403  : 	  //case HUDMode:
; 404  : 	  case HADMode: // RV - I-Hawk -
; 405  : 		SetMode (MfdOff);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 406  : 		break;

	jmp	SHORT $LN24@NextMode
$LN14@NextMode:

; 407  : 
; 408  : 	  case MfdOff:
; 409  : 		  // M.N. added full realism mode
; 410  : 		if (PlayerOptions.GetAvionicsType() != ATRealistic && PlayerOptions.GetAvionicsType() != ATRealisticAV) {

	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	cmp	eax, 2
	je	SHORT $LN13@NextMode
	mov	ecx, OFFSET ?PlayerOptions@@3VPlayerOptionsClass@@A ; PlayerOptions
	call	?GetAvionicsType@PlayerOptionsClass@@QAEHXZ ; PlayerOptionsClass::GetAvionicsType
	cmp	eax, 3
	je	SHORT $LN13@NextMode

; 411  : 			SetMode (FCCMode);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 412  : 		} else {

	jmp	SHORT $LN12@NextMode
$LN13@NextMode:

; 413  : 			SetMode (MfdMenu);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode
$LN12@NextMode:

; 414  : 		}
; 415  : 		break;

	jmp	SHORT $LN24@NextMode
$LN11@NextMode:

; 416  : 
; 417  : 	  case MfdMenu:
; 418  : 	      if (theLantirn && theLantirn->IsEnabled())

	cmp	DWORD PTR ?theLantirn@@3PAVLantirnClass@@A, 0 ; theLantirn
	je	SHORT $LN10@NextMode
	mov	ecx, DWORD PTR ?theLantirn@@3PAVLantirnClass@@A ; theLantirn
	call	?IsEnabled@LantirnClass@@QAE_NXZ	; LantirnClass::IsEnabled
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@NextMode

; 419  : 		  SetMode (TFRMode);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 420  : 	      else

	jmp	SHORT $LN9@NextMode
$LN10@NextMode:

; 421  : 		SetMode (FCCMode);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode
$LN9@NextMode:

; 422  : 		break;

	jmp	SHORT $LN24@NextMode
$LN8@NextMode:

; 423  : 	  case TFRMode:
; 424  : 	      SetMode (FCCMode);

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode

; 425  : 	      break;

	jmp	SHORT $LN24@NextMode
$LN7@NextMode:

; 426  : 	  default:
; 427  : 		SetMode (MfdMenu);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@MFDClass@@QAEXW4MfdMode@1@@Z	; MFDClass::SetMode
$LN24@NextMode:

; 428  : 		break;
; 429  : 	}
; 430  :     }
; 431  :    // For in cockpit, you can't have two of the same thing
; 432  :    if (mode != MfdOff){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN28@NextMode

; 433  :       if (id == 0){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@NextMode

; 434  : 		  if (MfdDisplay[1]->mode == mode){

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN4@NextMode

; 435  : 			NextMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextMode@MFDClass@@QAEXXZ		; MFDClass::NextMode
$LN4@NextMode:

; 436  : 		  }
; 437  :       }

	jmp	SHORT $LN28@NextMode
$LN5@NextMode:

; 438  :       else if (id == 1){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN28@NextMode

; 439  : 		  if (MfdDisplay[0]->mode == mode){

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN28@NextMode

; 440  : 				NextMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?NextMode@MFDClass@@QAEXXZ		; MFDClass::NextMode
$LN28@NextMode:

; 441  : 		  }
; 442  :       }
; 443  :    }
; 444  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@NextMode:
	DD	$LN14@NextMode
	DD	$LN11@NextMode
	DD	$LN8@NextMode
	DD	$LN7@NextMode
	DD	$LN7@NextMode
	DD	$LN7@NextMode
	DD	$LN7@NextMode
	DD	$LN7@NextMode
	DD	$LN7@NextMode
	DD	$LN21@NextMode
	DD	$LN20@NextMode
	DD	$LN19@NextMode
	DD	$LN18@NextMode
	DD	$LN15@NextMode
?NextMode@MFDClass@@QAEXXZ ENDP				; MFDClass::NextMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_whichButton$ = 8					; size = 4
_whichMFD$ = 12						; size = 4
?ButtonPushed@MFDClass@@QAEXHH@Z PROC			; MFDClass::ButtonPushed
; _this$ = ecx

; 575  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 577  : 	if(playerAC && playerAC->IsSetFlag(MOTION_OWNSHIP)) {

	cmp	DWORD PTR _playerAC$[ebp], 0
	je	SHORT $LN3@ButtonPush
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	call	?IsSetFlag@SimBaseClass@@QBEHH@Z	; SimBaseClass::IsSetFlag
	test	eax, eax
	je	SHORT $LN3@ButtonPush

; 578  : 		if (drawable){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN3@ButtonPush

; 579  : 		    drawable->PushButton(whichButton, whichMFD);

	mov	ecx, DWORD PTR _whichMFD$[ebp]
	push	ecx
	mov	edx, DWORD PTR _whichButton$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR [eax+20]
	call	edx
$LN3@ButtonPush:

; 580  : 		}
; 581  :     }
; 582  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ButtonPushed@MFDClass@@QAEXHH@Z ENDP			; MFDClass::ButtonPushed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv131 = -28						; size = 4
$T1 = -24						; size = 4
tv86 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_i$5 = -4						; size = 4
?DestroyDrawables@MFDClass@@SAXXZ PROC			; MFDClass::DestroyDrawables

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 309  : 	for (int i = 0; i < MaxPrivMode; i++) {

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN5@DestroyDra
$LN4@DestroyDra:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN5@DestroyDra:
	cmp	DWORD PTR _i$5[ebp], 9
	jge	SHORT $LN3@DestroyDra

; 310  : 		if (mfdDraw[i]) {

	mov	ecx, DWORD PTR _i$5[ebp]
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx*4], 0
	je	SHORT $LN2@DestroyDra

; 311  : 			mfdDraw[i]->DisplayExit();

	mov	edx, DWORD PTR _i$5[ebp]
	mov	eax, DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx*4]
	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx*4]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 312  : 			delete mfdDraw[i];

	mov	ecx, DWORD PTR _i$5[ebp]
	mov	edx, DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx*4]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@DestroyDra
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN9@DestroyDra
$LN8@DestroyDra:
	mov	DWORD PTR tv86[ebp], 0
$LN9@DestroyDra:

; 313  : 			mfdDraw[i] = NULL;

	mov	ecx, DWORD PTR _i$5[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx*4], 0
$LN2@DestroyDra:

; 314  : 		}
; 315  : 	}

	jmp	SHORT $LN4@DestroyDra
$LN3@DestroyDra:

; 316  : 
; 317  : 	// RV - I-Hawk - Handle the HadDrawable destruction along with the other mods
; 318  : 	if ( HadDrawable )

	cmp	DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A, 0 ; MFDClass::HadDrawable
	je	SHORT $LN6@DestroyDra

; 319  : 	{
; 320  : 		HadDrawable->DisplayExit();

	mov	edx, DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A ; MFDClass::HadDrawable
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A ; MFDClass::HadDrawable
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 321  : 		delete HadDrawable;

	mov	eax, DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A ; MFDClass::HadDrawable
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@DestroyDra
	push	1
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN11@DestroyDra
$LN10@DestroyDra:
	mov	DWORD PTR tv131[ebp], 0
$LN11@DestroyDra:

; 322  : 		HadDrawable = NULL;

	mov	DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A, 0 ; MFDClass::HadDrawable
$LN6@DestroyDra:

; 323  : 	}
; 324  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyDrawables@MFDClass@@SAXXZ ENDP			; MFDClass::DestroyDrawables
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
$T2 = -160						; size = 4
$T3 = -156						; size = 4
$T4 = -152						; size = 4
$T5 = -148						; size = 4
$T6 = -144						; size = 4
$T7 = -140						; size = 4
$T8 = -136						; size = 4
$T9 = -132						; size = 4
$T10 = -128						; size = 4
$T11 = -124						; size = 4
$T12 = -120						; size = 4
$T13 = -116						; size = 4
$T14 = -112						; size = 4
$T15 = -108						; size = 4
$T16 = -104						; size = 4
$T17 = -100						; size = 4
$T18 = -96						; size = 4
$T19 = -92						; size = 4
$T20 = -88						; size = 4
tv223 = -84						; size = 4
$T21 = -80						; size = 4
tv207 = -76						; size = 4
$T22 = -72						; size = 4
tv191 = -68						; size = 4
tv281 = -64						; size = 4
tv175 = -60						; size = 4
$T23 = -56						; size = 4
tv159 = -52						; size = 4
tv269 = -48						; size = 4
tv143 = -44						; size = 4
$T24 = -40						; size = 4
tv95 = -36						; size = 4
tv251 = -32						; size = 4
tv79 = -28						; size = 4
$T25 = -24						; size = 4
tv239 = -20						; size = 4
_i$26 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateDrawables@MFDClass@@SAXXZ PROC			; MFDClass::CreateDrawables

; 270  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateDrawables@MFDClass@@SAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 271  : 	// 1st of all, kill anything already allocated
; 272  : 	DestroyDrawables();

	call	?DestroyDrawables@MFDClass@@SAXXZ	; MFDClass::DestroyDrawables

; 273  : 
; 274  : 	// then allocate new drawables
; 275  : 	if (mfdDraw[MfdOff] == NULL) mfdDraw[MfdOff] = new BlankMfdDrawable;

	mov	eax, 4
	imul	eax, 0
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax], 0
	jne	SHORT $LN15@CreateDraw
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T19[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN18@CreateDraw
	mov	ecx, DWORD PTR $T19[ebp]
	call	??0BlankMfdDrawable@@QAE@XZ		; BlankMfdDrawable::BlankMfdDrawable
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN19@CreateDraw
$LN18@CreateDraw:
	mov	DWORD PTR tv79[ebp], 0
$LN19@CreateDraw:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T13[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx], eax
$LN15@CreateDraw:

; 276  : 	if (mfdDraw[MfdMenu] == NULL) mfdDraw[MfdMenu] = new MfdMenuDrawable;

	mov	ecx, 4
	shl	ecx, 0
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx], 0
	jne	SHORT $LN14@CreateDraw
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN20@CreateDraw
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0MfdMenuDrawable@@QAE@XZ		; MfdMenuDrawable::MfdMenuDrawable
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN21@CreateDraw
$LN20@CreateDraw:
	mov	DWORD PTR tv95[ebp], 0
$LN21@CreateDraw:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T11[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax], ecx
$LN14@CreateDraw:

; 277  : 	if (mfdDraw[TFRMode] == NULL) mfdDraw[TFRMode] = new LantirnDrawable;

	mov	edx, 4
	shl	edx, 1
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx], 0
	jne	SHORT $LN13@CreateDraw
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN22@CreateDraw
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0LantirnDrawable@@QAE@XZ		; LantirnDrawable::LantirnDrawable
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN23@CreateDraw
$LN22@CreateDraw:
	mov	DWORD PTR tv143[ebp], 0
$LN23@CreateDraw:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx], edx
$LN13@CreateDraw:

; 278  : 	if (mfdDraw[FLIRMode] == NULL) mfdDraw[FLIRMode] = new FlirMfdDrawable;

	mov	eax, 4
	imul	eax, 3
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax], 0
	jne	SHORT $LN12@CreateDraw
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T20[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN24@CreateDraw
	mov	ecx, DWORD PTR $T20[ebp]
	call	??0FlirMfdDrawable@@QAE@XZ		; FlirMfdDrawable::FlirMfdDrawable
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN25@CreateDraw
$LN24@CreateDraw:
	mov	DWORD PTR tv159[ebp], 0
$LN25@CreateDraw:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx], eax
$LN12@CreateDraw:

; 279  : 	if (mfdDraw[TestMode] == NULL) mfdDraw[TestMode] = new TestMfdDrawable;

	mov	ecx, 4
	shl	ecx, 2
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx], 0
	jne	SHORT $LN11@CreateDraw
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN26@CreateDraw
	mov	ecx, DWORD PTR $T18[ebp]
	call	??0TestMfdDrawable@@QAE@XZ		; TestMfdDrawable::TestMfdDrawable
	mov	DWORD PTR tv175[ebp], eax
	jmp	SHORT $LN27@CreateDraw
$LN26@CreateDraw:
	mov	DWORD PTR tv175[ebp], 0
$LN27@CreateDraw:
	mov	edx, DWORD PTR tv175[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax], ecx
$LN11@CreateDraw:

; 280  : 	if (mfdDraw[DTEMode] == NULL) mfdDraw[DTEMode] = new DteMfdDrawable;

	mov	edx, 4
	imul	edx, 5
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx], 0
	jne	SHORT $LN10@CreateDraw
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN28@CreateDraw
	mov	ecx, DWORD PTR $T16[ebp]
	call	??0DteMfdDrawable@@QAE@XZ		; DteMfdDrawable::DteMfdDrawable
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN29@CreateDraw
$LN28@CreateDraw:
	mov	DWORD PTR tv191[ebp], 0
$LN29@CreateDraw:
	mov	eax, DWORD PTR tv191[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx], edx
$LN10@CreateDraw:

; 281  : 	if (mfdDraw[FLCSMode] == NULL) mfdDraw[FLCSMode] = new FlcsMfdDrawable;

	mov	eax, 4
	imul	eax, 6
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax], 0
	jne	SHORT $LN9@CreateDraw
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN30@CreateDraw
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0FlcsMfdDrawable@@QAE@XZ		; FlcsMfdDrawable::FlcsMfdDrawable
	mov	DWORD PTR tv207[ebp], eax
	jmp	SHORT $LN31@CreateDraw
$LN30@CreateDraw:
	mov	DWORD PTR tv207[ebp], 0
$LN31@CreateDraw:
	mov	ecx, DWORD PTR tv207[ebp]
	mov	DWORD PTR $T12[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR $T12[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx], eax
$LN9@CreateDraw:

; 282  : 	if (mfdDraw[WPNMode] == NULL) mfdDraw[WPNMode] = new WpnMfdDrawable;

	mov	ecx, 4
	imul	ecx, 7
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx], 0
	jne	SHORT $LN8@CreateDraw
	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN32@CreateDraw
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0WpnMfdDrawable@@QAE@XZ		; WpnMfdDrawable::WpnMfdDrawable
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN33@CreateDraw
$LN32@CreateDraw:
	mov	DWORD PTR tv223[ebp], 0
$LN33@CreateDraw:
	mov	edx, DWORD PTR tv223[ebp]
	mov	DWORD PTR $T10[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax], ecx
$LN8@CreateDraw:

; 283  : 	if (mfdDraw[TGPMode] == NULL) mfdDraw[TGPMode] = new TgpMfdDrawable;

	mov	edx, 4
	shl	edx, 3
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx], 0
	jne	SHORT $LN7@CreateDraw
	push	104					; 00000068H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN34@CreateDraw
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0TgpMfdDrawable@@QAE@XZ		; TgpMfdDrawable::TgpMfdDrawable
	mov	DWORD PTR tv239[ebp], eax
	jmp	SHORT $LN35@CreateDraw
$LN34@CreateDraw:
	mov	DWORD PTR tv239[ebp], 0
$LN35@CreateDraw:
	mov	eax, DWORD PTR tv239[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[ecx], edx
$LN7@CreateDraw:

; 284  : 
; 285  : 	// RV - I-Hawk 
; 286  : 	//Allocating a new HadDrawable... can't do up there with rest of private mods as
; 287  : 	//  when I tried to add a new private mode, it messed up all MFD modes order etc... so 
; 288  : 	// managing HAD mode with it's own pointer
; 289  : 	if ( HadDrawable == NULL ) HadDrawable = new HadMfdDrawable; 

	cmp	DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A, 0 ; MFDClass::HadDrawable
	jne	SHORT $LN6@CreateDraw
	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T25[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN36@CreateDraw
	mov	ecx, DWORD PTR $T25[ebp]
	call	??0HadMfdDrawable@@QAE@XZ		; HadMfdDrawable::HadMfdDrawable
	mov	DWORD PTR tv251[ebp], eax
	jmp	SHORT $LN37@CreateDraw
$LN36@CreateDraw:
	mov	DWORD PTR tv251[ebp], 0
$LN37@CreateDraw:
	mov	eax, DWORD PTR tv251[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A, ecx ; MFDClass::HadDrawable
$LN6@CreateDraw:

; 290  : 
; 291  : 	for (DWORD i = 0; i < MaxPrivMode; i++) {

	mov	DWORD PTR _i$26[ebp], 0
	jmp	SHORT $LN5@CreateDraw
$LN4@CreateDraw:
	mov	edx, DWORD PTR _i$26[ebp]
	add	edx, 1
	mov	DWORD PTR _i$26[ebp], edx
$LN5@CreateDraw:
	cmp	DWORD PTR _i$26[ebp], 9
	jae	SHORT $LN3@CreateDraw

; 292  : 		if (mfdDraw[i] == NULL){

	mov	eax, DWORD PTR _i$26[ebp]
	cmp	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[eax*4], 0
	jne	SHORT $LN2@CreateDraw

; 293  : 			mfdDraw[i] = new BlankMfdDrawable;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T24[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN38@CreateDraw
	mov	ecx, DWORD PTR $T24[ebp]
	call	??0BlankMfdDrawable@@QAE@XZ		; BlankMfdDrawable::BlankMfdDrawable
	mov	DWORD PTR tv269[ebp], eax
	jmp	SHORT $LN39@CreateDraw
$LN38@CreateDraw:
	mov	DWORD PTR tv269[ebp], 0
$LN39@CreateDraw:
	mov	ecx, DWORD PTR tv269[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _i$26[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR ?mfdDraw@MFDClass@@2PAPAVDrawableClass@@A[edx*4], eax
$LN2@CreateDraw:

; 294  : 		}
; 295  : 	}

	jmp	SHORT $LN4@CreateDraw
$LN3@CreateDraw:

; 296  : 
; 297  : 	// RV - I-Hawk - Handle the HadDrawable same as the others
; 298  : 	if ( HadDrawable == NULL )

	cmp	DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A, 0 ; MFDClass::HadDrawable
	jne	SHORT $LN16@CreateDraw

; 299  : 	{
; 300  : 		HadDrawable = new BlankMfdDrawable;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T23[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN40@CreateDraw
	mov	ecx, DWORD PTR $T23[ebp]
	call	??0BlankMfdDrawable@@QAE@XZ		; BlankMfdDrawable::BlankMfdDrawable
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN41@CreateDraw
$LN40@CreateDraw:
	mov	DWORD PTR tv281[ebp], 0
$LN41@CreateDraw:
	mov	ecx, DWORD PTR tv281[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR ?HadDrawable@MFDClass@@2PAVDrawableClass@@A, edx ; MFDClass::HadDrawable
$LN16@CreateDraw:

; 301  : 	}
; 302  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$0:
	mov	eax, DWORD PTR $T19[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$1:
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$2:
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$3:
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$4:
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$5:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$6:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$7:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$8:
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$9:
	mov	eax, DWORD PTR $T25[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$10:
	mov	eax, DWORD PTR $T24[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateDrawables@MFDClass@@SAXXZ$11:
	mov	eax, DWORD PTR $T23[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateDrawables@MFDClass@@SAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateDrawables@MFDClass@@SAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateDrawables@MFDClass@@SAXXZ ENDP			; MFDClass::CreateDrawables
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_n$ = 8							; size = 4
?ModeName@MFDClass@@SAPADH@Z PROC			; MFDClass::ModeName

; 328  : {

	push	ebp
	mov	ebp, esp

; 329  :     ShiAssert(n >= 0 && n < MAXMODES);
; 330  :     return ModeNames[n];

	mov	eax, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR ?ModeNames@MFDClass@@0PAPADA[eax*4]

; 331  : }

	pop	ebp
	ret	0
?ModeName@MFDClass@@SAPADH@Z ENDP			; MFDClass::ModeName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_newMfdMode$ = 12					; size = 4
?SetNewModeAndPos@MFDClass@@QAEXHW4MfdMode@1@@Z PROC	; MFDClass::SetNewModeAndPos
; _this$ = ecx

; 598  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 599  :     ShiAssert(n >= 0 && n < 3);
; 600  :     cursel[curmm] = n;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [edx+ecx*4+80], eax

; 601  :     newMode = newMfdMode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newMfdMode$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 602  :     changeMode = TRUE_ABSOLUTE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 2

; 603  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetNewModeAndPos@MFDClass@@QAEXHW4MfdMode@1@@Z ENDP	; MFDClass::SetNewModeAndPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?SetNewMasterMode@MFDClass@@QAEXH@Z PROC		; MFDClass::SetNewMasterMode
; _this$ = ecx

; 585  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  :     ShiAssert(n >= 0 && n < MAXMM);
; 587  :     changeMode = TRUE_MODESWITCH;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 3

; 588  :     newmm = n;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+104], edx

; 589  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNewMasterMode@MFDClass@@QAEXH@Z ENDP		; MFDClass::SetNewMasterMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?StealMode@MFDClass@@QAEXW4MfdMode@1@@Z PROC		; MFDClass::StealMode
; _this$ = ecx

; 447  : void MFDClass::StealMode(MfdMode mode){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 448  :     if (mode == MfdOff) return;

	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN6@StealMode
	jmp	SHORT $LN7@StealMode
$LN6@StealMode:

; 449  :     for (int i = 0; i < 3; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@StealMode
$LN4@StealMode:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@StealMode:
	cmp	DWORD PTR _i$1[ebp], 3
	jge	SHORT $LN7@StealMode

; 450  : 		if (primarySecondary[curmm][i] == mode)  {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _mode$[ebp]
	jne	SHORT $LN2@StealMode

; 451  : 			if (i == cursel[curmm]){

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+edx*4+80]
	jne	SHORT $LN1@StealMode

; 452  : 				SetNewMode(MfdOff);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z ; MFDClass::SetNewMode
$LN1@StealMode:

; 453  : 			}
; 454  : 			primarySecondary[curmm][i] = MfdOff;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+20]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [edx+eax*4], 0
$LN2@StealMode:

; 455  : 		}
; 456  :     }

	jmp	SHORT $LN4@StealMode
$LN7@StealMode:

; 457  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StealMode@MFDClass@@QAEXW4MfdMode@1@@Z ENDP		; MFDClass::StealMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z PROC		; MFDClass::GetSP, COMDAT
; _this$ = ecx

; 70   : 	MfdMode GetSP(int n) { return primarySecondary[curmm][n]; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSP@MFDClass@@QAE?AW4MfdMode@1@H@Z ENDP		; MFDClass::GetSP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
tv90 = -28						; size = 4
$T1 = -24						; size = 4
tv76 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
??1MFDClass@@QAE@XZ PROC				; MFDClass::~MFDClass
; _this$ = ecx

; 240  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 	FreeDrawable();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeDrawable@MFDClass@@AAEXXZ		; MFDClass::FreeDrawable

; 242  : 
; 243  : 	if (privateImage){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+112], 0
	je	SHORT $LN1@MFDClass

; 244  : 		privateImage->Cleanup();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+112]
	call	?Cleanup@ImageBuffer@@QAEXXZ		; ImageBuffer::Cleanup

; 245  : 		delete privateImage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@MFDClass
	push	1
	mov	edx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN1@MFDClass
$LN4@MFDClass:
	mov	DWORD PTR tv76[ebp], 0
$LN1@MFDClass:

; 246  : 	}
; 247  : 	mode = MfdOff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 248  : 	drawable = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+116], 0

; 249  : 
; 250  : 	// RED - Passed into DestroyDrawables	
; 251  : /*	for (int i = 0; i < MaxPrivMode; i++) {
; 252  : 		if (mfdDraw[i]) {
; 253  : 			mfdDraw[i]->DisplayExit();
; 254  : 			delete mfdDraw[i];
; 255  : 			mfdDraw[i] = NULL;
; 256  : 		}
; 257  : 	}
; 258  : */
; 259  : 	delete virtMFD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@MFDClass
	push	1
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN7@MFDClass
$LN6@MFDClass:
	mov	DWORD PTR tv90[ebp], 0
$LN7@MFDClass:

; 260  : 	virtMFD = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 0

; 261  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1MFDClass@@QAE@XZ ENDP				; MFDClass::~MFDClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\displays\mfd.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv221 = -36						; size = 4
$T4 = -32						; size = 4
tv94 = -28						; size = 4
$T5 = -24						; size = 4
_i$6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_count$ = 8						; size = 4
_r3d$ = 12						; size = 4
??0MFDClass@@QAE@HPAVRender3D@@@Z PROC			; MFDClass::MFDClass
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MFDClass@@QAE@HPAVRender3D@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 	id = count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx

; 143  : 	drawable = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], 0

; 144  : 	viewPoint = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0

; 145  : 	ownship = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 146  : 	curmm = 2;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 2

; 147  : 	newmm = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 2

; 148  : 	if (count % 2 == 0){

	mov	ecx, DWORD PTR _count$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN19@MFDClass
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN19@MFDClass:
	test	ecx, ecx
	jne	SHORT $LN9@MFDClass

; 149  : 		memcpy (primarySecondary, initialMfdL, sizeof initialMfdL); 

	push	60					; 0000003cH
	push	OFFSET ?initialMfdL@MFDClass@@2PAY02W4MfdMode@1@A ; MFDClass::initialMfdL
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 150  : 	}
; 151  : 	else {

	jmp	SHORT $LN8@MFDClass
$LN9@MFDClass:

; 152  : 		memcpy (primarySecondary, initialMfdR, sizeof initialMfdR);

	push	60					; 0000003cH
	push	OFFSET ?initialMfdR@MFDClass@@2PAY02W4MfdMode@1@A ; MFDClass::initialMfdR
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@MFDClass:

; 153  : 	}
; 154  : 	changeMode = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0

; 155  : 	for (int i = 0; i < MAXMM; i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN7@MFDClass
$LN6@MFDClass:
	mov	edx, DWORD PTR _i$6[ebp]
	add	edx, 1
	mov	DWORD PTR _i$6[ebp], edx
$LN7@MFDClass:
	cmp	DWORD PTR _i$6[ebp], 5
	jge	SHORT $LN5@MFDClass

; 156  : 		cursel[i] = 0;

	mov	eax, DWORD PTR _i$6[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+80], 0
	jmp	SHORT $LN6@MFDClass
$LN5@MFDClass:

; 157  : 	privateImage = new ImageBuffer; 

	push	348					; 0000015cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN12@MFDClass
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0ImageBuffer@@QAE@XZ			; ImageBuffer::ImageBuffer
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN13@MFDClass
$LN12@MFDClass:
	mov	DWORD PTR tv94[ebp], 0
$LN13@MFDClass:
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+112], ecx

; 158  : 	// COBRA - RED - MFD 
; 159  : 	privateImage->Setup( &FalconDisplay.theDisplayDevice, MfdSize, MfdSize, /*VideoMem*/SystemMem, None );

	push	0
	push	0
	push	0
	push	0
	push	4
	push	0
	mov	edx, DWORD PTR ?MfdSize@@3HA		; MfdSize
	push	edx
	mov	eax, DWORD PTR ?MfdSize@@3HA		; MfdSize
	push	eax
	push	OFFSET ?FalconDisplay@@3VFalconDisplayConfiguration@@A+132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+112]
	call	?Setup@ImageBuffer@@QAEHPAVDisplayDevice@@HHW4MPRSurfaceType@@1PAUHWND__@@HHH@Z ; ImageBuffer::Setup

; 160  : 	privateImage->SetChromaKey (0x0);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+112]
	call	?SetChromaKey@ImageBuffer@@QAEXK@Z	; ImageBuffer::SetChromaKey

; 161  : 	image = OTWDriver.OTWImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32040
	mov	DWORD PTR [eax+108], ecx

; 162  : 	color = 0x00ff00;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+216], 65280		; 0000ff00H

; 163  : 	intensity = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+220], 0

; 164  : 	mode = primarySecondary[curmm][0];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+20]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+8], ecx

; 165  : 	restoreMode = mode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx

; 166  : 
; 167  : 	// Set bounds based on resolution
; 168  : 	vTop = vRight = -1.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+152], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [eax+140], xmm0

; 169  : 	vLeft = vBottom = 1.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+148], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+144], xmm0

; 170  : 	vLeft = 1.0F - VirtualMFD[id].top/(DisplayOptions.DispHeight * 0.5F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[ecx+4]
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+144], xmm1

; 171  : 	vRight = 1.0F - VirtualMFD[id].bottom/(DisplayOptions.DispHeight * 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[edx+12]
	movzx	eax, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A+2
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+152], xmm1

; 172  : 	vTop = -1.0F + VirtualMFD[id].left/(DisplayOptions.DispWidth * 0.5F);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[eax]
	movzx	ecx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm1, ecx
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+140], xmm0

; 173  : 	vBottom = -1.0F + VirtualMFD[id].right/(DisplayOptions.DispWidth * 0.5F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	cvtsi2ss xmm0, DWORD PTR ?VirtualMFD@@3PAUtagRECT@@A[ecx+8]
	movzx	edx, WORD PTR ?DisplayOptions@@3VDisplayOptionsClass@@A
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@bf800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+148], xmm0

; 174  : 
; 175  : 	viewPoint = OTWDriver.GetViewpoint();

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetViewpoint@OTWDriverClass@@QAEPAVRViewPoint@@XZ ; OTWDriverClass::GetViewpoint
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 176  : 
; 177  : 	TGPWarning = 0; // RV - I-Hawk

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 0

; 178  : 
; 179  : 	// RED - Passed into CreateDrawables
; 180  : /*	if (mfdDraw[MfdOff] == NULL) mfdDraw[MfdOff] = new BlankMfdDrawable;
; 181  : 	if (mfdDraw[MfdMenu] == NULL) mfdDraw[MfdMenu] = new MfdMenuDrawable;
; 182  : 	if (mfdDraw[TFRMode] == NULL) mfdDraw[TFRMode] = new LantirnDrawable;
; 183  : 	if (mfdDraw[FLIRMode] == NULL) mfdDraw[FLIRMode] = new FlirMfdDrawable;
; 184  : 	if (mfdDraw[TestMode] == NULL) mfdDraw[TestMode] = new TestMfdDrawable;
; 185  : 	if (mfdDraw[DTEMode] == NULL) mfdDraw[DTEMode] = new DteMfdDrawable;
; 186  : 	if (mfdDraw[FLCSMode] == NULL) mfdDraw[FLCSMode] = new FlcsMfdDrawable;
; 187  : 	if (mfdDraw[WPNMode] == NULL) mfdDraw[WPNMode] = new WpnMfdDrawable;
; 188  : 	if (mfdDraw[TGPMode]	== NULL) mfdDraw[TGPMode] = new TgpMfdDrawable;
; 189  : 
; 190  : 	for (i = 0; i < MaxPrivMode; i++) {
; 191  : 		if (mfdDraw[i] == NULL){
; 192  : 			mfdDraw[i] = new BlankMfdDrawable;
; 193  : 		}
; 194  : 	}*/
; 195  : 
; 196  : 	// ASSO: commented out old canvas setup
; 197  : 	// set up the virtual cockpit MFD
; 198  : 	virtMFD = new Canvas3D;

	push	262916					; 00040304H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN14@MFDClass
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0Canvas3D@@QAE@XZ			; Canvas3D::Canvas3D
	mov	DWORD PTR tv221[ebp], eax
	jmp	SHORT $LN15@MFDClass
$LN14@MFDClass:
	mov	DWORD PTR tv221[ebp], 0
$LN15@MFDClass:
	mov	eax, DWORD PTR tv221[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+124], edx

; 199  : 	ShiAssert( virtMFD );
; 200  : 	virtMFD->Setup( r3d );

	mov	eax, DWORD PTR _r3d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR [edx+132]
	call	eax

; 201  : 
; 202  : 	// left or right
; 203  : 	if ( id == 0 ){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	$LN4@MFDClass

; 204  : 		if (g_b3dMFDLeft){

	movzx	edx, BYTE PTR ?g_b3dMFDLeft@@3_NA	; g_b3dMFDLeft
	test	edx, edx
	je	$LN3@MFDClass

; 205  : 			// ASSO:
; 206  : 			tLeft = ltMFDleft; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?ltMFDleft@@3HA		; ltMFDleft
	mov	DWORD PTR [eax+192], ecx

; 207  : 			tTop = ltMFDtop; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?ltMFDtop@@3HA		; ltMFDtop
	mov	DWORD PTR [edx+196], eax

; 208  : 			tRight = ltMFDright;  

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?ltMFDright@@3HA		; ltMFDright
	mov	DWORD PTR [ecx+200], edx

; 209  : 			tBottom = ltMFDbottom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?ltMFDbottom@@3HA	; ltMFDbottom
	mov	DWORD PTR [eax+204], ecx

; 210  : 			cUL = lMFDul;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	mov	eax, DWORD PTR ?lMFDul@@3UTpoint@@A
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ?lMFDul@@3UTpoint@@A+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ?lMFDul@@3UTpoint@@A+8
	mov	DWORD PTR [edx+8], eax

; 211  : 			cUR = lMFDur;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR ?lMFDur@@3UTpoint@@A
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ?lMFDur@@3UTpoint@@A+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR ?lMFDur@@3UTpoint@@A+8
	mov	DWORD PTR [ecx+8], edx

; 212  : 			cLL = lMFDll;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR ?lMFDll@@3UTpoint@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?lMFDll@@3UTpoint@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ?lMFDll@@3UTpoint@@A+8
	mov	DWORD PTR [eax+8], ecx

; 213  : 			cBlend = lcMFDblend;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR ?lcMFDblend@@3DA		; lcMFDblend
	mov	BYTE PTR [edx+208], al

; 214  : 			cAlpha = lcMFDalpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?lcMFDalpha@@3MA
	movss	DWORD PTR [ecx+212], xmm0
$LN3@MFDClass:

; 215  : 			//virtMFD->SetCanvas( &lMFDul, &lMFDur, &lMFDll ); 
; 216  : 		}
; 217  : 	}
; 218  : 	else {

	jmp	$LN1@MFDClass
$LN4@MFDClass:

; 219  : 		if (g_b3dMFDRight){

	movzx	edx, BYTE PTR ?g_b3dMFDRight@@3_NA	; g_b3dMFDRight
	test	edx, edx
	je	$LN1@MFDClass

; 220  : 			// ASSO:
; 221  : 			tLeft = rtMFDleft; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?rtMFDleft@@3HA		; rtMFDleft
	mov	DWORD PTR [eax+192], ecx

; 222  : 			tTop = rtMFDtop; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?rtMFDtop@@3HA		; rtMFDtop
	mov	DWORD PTR [edx+196], eax

; 223  : 			tRight = rtMFDright;  

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?rtMFDright@@3HA		; rtMFDright
	mov	DWORD PTR [ecx+200], edx

; 224  : 			tBottom = rtMFDbottom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?rtMFDbottom@@3HA	; rtMFDbottom
	mov	DWORD PTR [eax+204], ecx

; 225  : 			cUL = rMFDul;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	mov	eax, DWORD PTR ?rMFDul@@3UTpoint@@A
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ?rMFDul@@3UTpoint@@A+4
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ?rMFDul@@3UTpoint@@A+8
	mov	DWORD PTR [edx+8], eax

; 226  : 			cUR = rMFDur;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR ?rMFDur@@3UTpoint@@A
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ?rMFDur@@3UTpoint@@A+4
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR ?rMFDur@@3UTpoint@@A+8
	mov	DWORD PTR [ecx+8], edx

; 227  : 			cLL = rMFDll;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR ?rMFDll@@3UTpoint@@A
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ?rMFDll@@3UTpoint@@A+4
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR ?rMFDll@@3UTpoint@@A+8
	mov	DWORD PTR [eax+8], ecx

; 228  : 			cBlend = rcMFDblend;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR ?rcMFDblend@@3DA		; rcMFDblend
	mov	BYTE PTR [edx+208], al

; 229  : 			cAlpha = rcMFDalpha;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?rcMFDalpha@@3MA
	movss	DWORD PTR [ecx+212], xmm0
$LN1@MFDClass:

; 230  : 			//virtMFD->SetCanvas( &rMFDul, &rMFDur, &rMFDll );
; 231  : 		}
; 232  : 	}
; 233  : 
; 234  : 	//MI init vars
; 235  : 	EmergStoreMode = FCCMode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], 9

; 236  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0MFDClass@@QAE@HPAVRender3D@@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0MFDClass@@QAE@HPAVRender3D@@@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0MFDClass@@QAE@HPAVRender3D@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0MFDClass@@QAE@HPAVRender3D@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MFDClass@@QAE@HPAVRender3D@@@Z ENDP			; MFDClass::MFDClass
; Function compile flags: /Odtp
;	COMDAT ??_GDrawableClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDrawableClass@@UAEPAXI@Z PROC			; DrawableClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DrawableClass@@UAE@XZ		; DrawableClass::~DrawableClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDrawableClass@@UAEPAXI@Z ENDP			; DrawableClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?PushButton@DrawableClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?PushButton@DrawableClass@@UAEXHH@Z PROC		; DrawableClass::PushButton, COMDAT
; _this$ = ecx

; 152  :       virtual void PushButton (int, int)	{};								// Override to get button messages in subclasses

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?PushButton@DrawableClass@@UAEXHH@Z ENDP		; DrawableClass::PushButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?SetIntensity@DrawableClass@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?SetIntensity@DrawableClass@@QAEXI@Z PROC		; DrawableClass::SetIntensity, COMDAT
; _this$ = ecx

; 147  :       void  SetIntensity (unsigned int val) { intensity = val; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetIntensity@DrawableClass@@QAEXI@Z ENDP		; DrawableClass::SetIntensity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?OnMFD@DrawableClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnMFD@DrawableClass@@QAEHXZ PROC			; DrawableClass::OnMFD, COMDAT
; _this$ = ecx

; 145  :       int	OnMFD (void)			{return MFDOn;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnMFD@DrawableClass@@QAEHXZ ENDP			; DrawableClass::OnMFD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?SetMFD@DrawableClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newMFD$ = 8						; size = 4
?SetMFD@DrawableClass@@QAEXH@Z PROC			; DrawableClass::SetMFD, COMDAT
; _this$ = ecx

; 144  :       void	SetMFD (int newMFD)		{MFDOn = newMFD;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMFD$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMFD@DrawableClass@@QAEXH@Z ENDP			; DrawableClass::SetMFD
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ PROC ; DrawableClass::GetDisplay, COMDAT
; _this$ = ecx

; 139  :       virtual VirtualDisplay* GetDisplay (void)	{return privateDisplay;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplay@DrawableClass@@UAEPAVVirtualDisplay@@XZ ENDP ; DrawableClass::GetDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?DisplayInit@DrawableClass@@UAEXPAVImageBuffer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?DisplayInit@DrawableClass@@UAEXPAVImageBuffer@@@Z PROC	; DrawableClass::DisplayInit, COMDAT
; _this$ = ecx

; 137  :       virtual void DisplayInit (ImageBuffer*)	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?DisplayInit@DrawableClass@@UAEXPAVImageBuffer@@@Z ENDP	; DrawableClass::DisplayInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?Display@DrawableClass@@UAEXPAVVirtualDisplay@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Display@DrawableClass@@UAEXPAVVirtualDisplay@@@Z PROC	; DrawableClass::Display, COMDAT
; _this$ = ecx

; 136  :       virtual void Display(VirtualDisplay*)		{ ShiWarning( "No Display!" ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Display@DrawableClass@@UAEXPAVVirtualDisplay@@@Z ENDP	; DrawableClass::Display
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ??1DrawableClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DrawableClass@@UAE@XZ PROC				; DrawableClass::~DrawableClass, COMDAT
; _this$ = ecx

; 132  :       virtual ~DrawableClass (void)				{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableClass@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1DrawableClass@@UAE@XZ ENDP				; DrawableClass::~DrawableClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ??0DrawableClass@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DrawableClass@@IAE@XZ PROC				; DrawableClass::DrawableClass, COMDAT
; _this$ = ecx

; 126  :       DrawableClass(void) {privateDisplay = display = NULL; viewPoint = NULL; drawFlags = 0;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DrawableClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DrawableClass@@IAE@XZ ENDP				; DrawableClass::DrawableClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
