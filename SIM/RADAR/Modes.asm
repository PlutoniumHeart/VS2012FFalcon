; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\RADAR\Modes.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
_didDesignate DD 01H DUP (?)
_didDroptargetCmd DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_APG68_BAR_WIDTH DD 03d1d466dr			; 0.0383972
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??BVU_SESSION_ID@@QBEKXZ			; VU_SESSION_ID::operator unsigned long
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	??BVU_ID@@QBEKXZ				; VU_ID::operator unsigned long
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSOI@DrawableClass@@QAEHXZ			; DrawableClass::IsSOI
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?IsEmitting@RadarClass@@QAEHXZ			; RadarClass::IsEmitting
PUBLIC	?ExecModes@RadarDopplerClass@@UAEXHH@Z		; RadarDopplerClass::ExecModes
PUBLIC	??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::TWSTrackList
PUBLIC	?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ; RadarDopplerClass::TWSTrackList::Insert
PUBLIC	?ForceInsert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ; RadarDopplerClass::TWSTrackList::ForceInsert
PUBLIC	?Remove@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::Remove
PUBLIC	?OnList@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::OnList
PUBLIC	?CountTracks@TWSTrackList@RadarDopplerClass@@QAEHXZ ; RadarDopplerClass::TWSTrackList::CountTracks
PUBLIC	?Release@TWSTrackList@RadarDopplerClass@@QAEXXZ	; RadarDopplerClass::TWSTrackList::Release
PUBLIC	?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Purge
PUBLIC	?Clip@TWSTrackList@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::TWSTrackList::Clip
PUBLIC	?TrackFile@TWSTrackList@RadarDopplerClass@@QAEPAVSimObjectType@@XZ ; RadarDopplerClass::TWSTrackList::TrackFile
PUBLIC	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
PUBLIC	?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z ; RadarDopplerClass::TWSTrackList::SetNext
PUBLIC	?IsSet@RadarDopplerClass@@QAEHH@Z		; RadarDopplerClass::IsSet
PUBLIC	?SetFlagBit@RadarDopplerClass@@QAEXH@Z		; RadarDopplerClass::SetFlagBit
PUBLIC	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::ClearFlagBit
PUBLIC	?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ; RadarDopplerClass::HitsOnTrack
PUBLIC	?TWSMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::TWSMode
PUBLIC	?RWSMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::RWSMode
PUBLIC	?SAMMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::SAMMode
PUBLIC	?VSMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::VSMode
PUBLIC	?STTMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::STTMode
PUBLIC	?ACMMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::ACMMode
PUBLIC	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory
PUBLIC	?SetHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::SetHistory
PUBLIC	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory
PUBLIC	?ClearAllHistory@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::ClearAllHistory
PUBLIC	?SlipHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ; RadarDopplerClass::SlipHistory
PUBLIC	?ExtrapolateHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ; RadarDopplerClass::ExtrapolateHistory
PUBLIC	?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z ; RadarDopplerClass::UpdateTWSDirectory
PUBLIC	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Set@HudDataType@@QAEXH@Z			; HudDataType::Set
PUBLIC	?Clear@HudDataType@@QAEXH@Z			; HudDataType::Clear
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	??_C@_0CC@OHJNACMG@Lock?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3e32b8c1
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@40000000
PUBLIC	__real@40490fd9
PUBLIC	__real@40c90fd9
PUBLIC	__real@41200000
PUBLIC	__real@41500000
PUBLIC	__real@45bde1b0
PUBLIC	__real@477fff00
PUBLIC	__real@bd56774e
PUBLIC	__real@bf860a91
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_fabs:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_MonoPrint:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Reference@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Reference
EXTRN	?Release@SimObjectType@@QAEXXZ:PROC		; SimObjectType::Release
EXTRN	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z:PROC ; TargetAz
EXTRN	?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z:PROC ; TargetEl
EXTRN	_F4SoundFXSetDist:PROC
EXTRN	?TargetToXY@RadarDopplerClass@@QAEXPAVSimObjectLocalData@@HMPAM1@Z:PROC ; RadarDopplerClass::TargetToXY
EXTRN	?ChangeMode@RadarDopplerClass@@IAEXH@Z:PROC	; RadarDopplerClass::ChangeMode
EXTRN	?SetScan@RadarDopplerClass@@IAEXXZ:PROC		; RadarDopplerClass::SetScan
EXTRN	?CalcSAMAzLimit@RadarDopplerClass@@IAEXXZ:PROC	; RadarDopplerClass::CalcSAMAzLimit
EXTRN	?GMMode@RadarDopplerClass@@IAEXXZ:PROC		; RadarDopplerClass::GMMode
EXTRN	?IsUnderVSCursor@RadarDopplerClass@@IAEHPAVSimObjectType@@M@Z:PROC ; RadarDopplerClass::IsUnderVSCursor
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?SimLibMajorFrameRate@@3MA:DWORD		; SimLibMajorFrameRate
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?TheHud@@3PAVHudClass@@A:DWORD			; TheHud
EXTRN	?g_bMLU@@3_NA:BYTE				; g_bMLU
EXTRN	?g_bAntElevKnobFix@@3_NA:BYTE			; g_bAntElevKnobFix
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
;	COMDAT ?justdidSTT@?1??SAMMode@RadarDopplerClass@@IAEXXZ@4_NA
_BSS	SEGMENT
?justdidSTT@?1??SAMMode@RadarDopplerClass@@IAEXXZ@4_NA DB 01H DUP (?) ; `RadarDopplerClass::SAMMode'::`2'::justdidSTT
_BSS	ENDS
;	COMDAT ?tgtenteredcursor@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA
_BSS	SEGMENT
?tgtenteredcursor@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA DB 01H DUP (?) ; `RadarDopplerClass::TWSMode'::`2'::tgtenteredcursor
_BSS	ENDS
;	COMDAT ?justdidSTT@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA
_BSS	SEGMENT
?justdidSTT@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA DB 01H DUP (?) ; `RadarDopplerClass::TWSMode'::`2'::justdidSTT
_BSS	ENDS
;	COMDAT ?diddroptrack@?1??STTMode@RadarDopplerClass@@IAEXXZ@4_NA
_BSS	SEGMENT
?diddroptrack@?1??STTMode@RadarDopplerClass@@IAEXXZ@4_NA DB 01H DUP (?) ; `RadarDopplerClass::STTMode'::`2'::diddroptrack
_BSS	ENDS
;	COMDAT ?islck@?1??ACMMode@RadarDopplerClass@@IAEXXZ@4HA
_BSS	SEGMENT
?islck@?1??ACMMode@RadarDopplerClass@@IAEXXZ@4HA DD 01H DUP (?) ; `RadarDopplerClass::ACMMode'::`2'::islck
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf860a91
CONST	SEGMENT
__real@bf860a91 DD 0bf860a91r			; -1.0472
CONST	ENDS
;	COMDAT __real@bd56774e
CONST	SEGMENT
__real@bd56774e DD 0bd56774er			; -0.0523599
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e32b8c1
CONST	SEGMENT
__real@3e32b8c1 DD 03e32b8c1r			; 0.174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OHJNACMG@Lock?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0CC@OHJNACMG@Lock?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB 'L'
	DB	'ock-----------------------------', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z$0
__unwindtable$?TWSMode@RadarDopplerClass@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TWSMode@RadarDopplerClass@@IAEXXZ$0
__unwindtable$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z$1
__ehfuncinfo$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TWSMode@RadarDopplerClass@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TWSMode@RadarDopplerClass@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?Clear@HudDataType@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_testFlag$ = 8						; size = 4
?Clear@HudDataType@@QAEXH@Z PROC			; HudDataType::Clear, COMDAT
; _this$ = ecx

; 72   : 	void	Clear (int testFlag)	{ flags &= ~testFlag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _testFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@HudDataType@@QAEXH@Z ENDP			; HudDataType::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\hud.h
;	COMDAT ?Set@HudDataType@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_testFlag$ = 8						; size = 4
?Set@HudDataType@@QAEXH@Z PROC				; HudDataType::Set, COMDAT
; _this$ = ecx

; 71   : 	void	Set (int testFlag)		{ flags |= testFlag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	or	ecx, DWORD PTR _testFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@HudDataType@@QAEXH@Z ENDP				; HudDataType::Set
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ PROC ; AircraftClass::AutopilotType, COMDAT
; _this$ = ecx

; 329  : 	AutoPilotType	AutopilotType (void) {return autopilotType;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+968]
	mov	esp, ebp
	pop	ebp
	ret	0
?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ENDP ; AircraftClass::AutopilotType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
tv171 = -40						; size = 4
tv162 = -36						; size = 4
tv143 = -32						; size = 4
$T3 = -28						; size = 4
_this$ = -24						; size = 4
_rdrData$4 = -20					; size = 4
_rdrObj$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tgtList$ = 8						; size = 4
_directory$ = 12					; size = 4
?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z PROC ; RadarDopplerClass::UpdateTWSDirectory
; _this$ = ecx

; 1704 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1705 : 	SimObjectType* rdrObj = tgtList;

	mov	eax, DWORD PTR _tgtList$[ebp]
	mov	DWORD PTR _rdrObj$[ebp], eax

; 1706 : 
; 1707 : 	if (tgtList)

	cmp	DWORD PTR _tgtList$[ebp], 0
	je	$LN5@UpdateTWSD

; 1708 : 	{
; 1709 : 		// Don't waste the time to check if the directory is already full
; 1710 : 		if (!directory || (directory && (directory->CountTracks() < MAX_TWS_TRACKS)))

	cmp	DWORD PTR _directory$[ebp], 0
	je	SHORT $LN7@UpdateTWSD
	cmp	DWORD PTR _directory$[ebp], 0
	je	$LN5@UpdateTWSD
	mov	ecx, DWORD PTR _directory$[ebp]
	call	?CountTracks@TWSTrackList@RadarDopplerClass@@QAEHXZ ; RadarDopplerClass::TWSTrackList::CountTracks
	cmp	eax, 10					; 0000000aH
	jge	$LN5@UpdateTWSD
$LN7@UpdateTWSD:

; 1711 : 		{
; 1712 : 			while (rdrObj)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	$LN5@UpdateTWSD

; 1713 : 			{
; 1714 : 				SimObjectLocalData* rdrData = rdrObj->localData;

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _rdrData$4[ebp], edx

; 1715 : 				// pick up directory entries for targets with multiple hits that are in the scan cone
; 1716 : 				if ((HitsOnTrack(rdrData) > HITS_FOR_LOCK) &&
; 1717 : 					((fabs(rdrData->az) < radarData->ScanHalfAngle) &&
; 1718 : 					(fabs(rdrData->el) < radarData->ScanHalfAngle)))

	mov	eax, DWORD PTR _rdrData$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ; RadarDopplerClass::HitsOnTrack
	cmp	eax, 2
	jle	$LN1@UpdateTWSD
	mov	ecx, DWORD PTR _rdrData$4[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv162[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR tv162[ebp]
	jbe	$LN1@UpdateTWSD
	mov	ecx, DWORD PTR _rdrData$4[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv171[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR tv171[ebp]
	jbe	SHORT $LN1@UpdateTWSD

; 1719 : 				{
; 1720 : 					if(!rdrData->TWSTrackFileOpen)  // insert new tracks only

	mov	ecx, DWORD PTR _rdrData$4[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	SHORT $LN1@UpdateTWSD

; 1721 : 						if (directory)

	cmp	DWORD PTR _directory$[ebp], 0
	je	SHORT $LN2@UpdateTWSD

; 1722 : 							directory = directory->Insert(rdrObj);

	push	0
	mov	edx, DWORD PTR _rdrObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _directory$[ebp]
	call	?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ; RadarDopplerClass::TWSTrackList::Insert
	mov	DWORD PTR _directory$[ebp], eax

; 1723 : 						else

	jmp	SHORT $LN1@UpdateTWSD
$LN2@UpdateTWSD:

; 1724 : 							directory = new TWSTrackList(rdrObj);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN12@UpdateTWSD
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::TWSTrackList
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN13@UpdateTWSD
$LN12@UpdateTWSD:
	mov	DWORD PTR tv143[ebp], 0
$LN13@UpdateTWSD:
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _directory$[ebp], edx
$LN1@UpdateTWSD:

; 1725 : 				}
; 1726 : 				rdrObj = rdrObj->next;

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _rdrObj$[ebp], ecx

; 1727 : 			}

	jmp	$LN7@UpdateTWSD
$LN5@UpdateTWSD:

; 1728 : 		}
; 1729 : 	}
; 1730 : 	
; 1731 : 	return directory;

	mov	eax, DWORD PTR _directory$[ebp]

; 1732 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z ENDP ; RadarDopplerClass::UpdateTWSDirectory
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_rdrData$ = -4						; size = 4
_ptr$ = 8						; size = 4
?ExtrapolateHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z PROC ; RadarDopplerClass::ExtrapolateHistory
; _this$ = ecx

; 1480 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1481 : int i;
; 1482 : SimObjectLocalData* rdrData = ptr->localData;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rdrData$[ebp], ecx

; 1483 : 
; 1484 :    for (i=NUM_RADAR_HISTORY-1; i>0; i--)

	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN7@Extrapolat
$LN6@Extrapolat:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@Extrapolat:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN5@Extrapolat

; 1485 :    {
; 1486 :       rdrData->rdrX[i]  = rdrData->rdrX[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+84]
	mov	DWORD PTR [ecx+eax*4+88], edx

; 1487 :       rdrData->rdrY[i]  = rdrData->rdrY[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+100]
	mov	DWORD PTR [ecx+eax*4+104], edx

; 1488 :       rdrData->rdrHd[i] = rdrData->rdrHd[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+116]
	mov	DWORD PTR [ecx+eax*4+120], edx

; 1489 :       rdrData->rdrSy[i] = rdrData->rdrSy[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+68]
	mov	DWORD PTR [ecx+eax*4+72], edx

; 1490 :    }

	jmp	SHORT $LN6@Extrapolat
$LN5@Extrapolat:

; 1491 : 
; 1492 :    // Change range
; 1493 :    rdrData->rdrY[0]  += (rdrData->rdrY[1] - rdrData->rdrY[2]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edi, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [esi+ecx+104]
	subss	xmm0, DWORD PTR [edi+edx+104]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax+104]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+edx+104], xmm0

; 1494 : 
; 1495 :    if (SimLibElapsedTime < (rdrData->extrapolateStart + TwsExtrapolateTime))  // MD -- 20040121: use extrapolation timer

	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	add	edx, 13000				; 000032c8H
	cmp	DWORD PTR ?SimLibElapsedTime@@3KA, edx	; SimLibElapsedTime
	jae	SHORT $LN1@Extrapolat

; 1496 :    {
; 1497 :       if (rdrData->rdrSy[0] == Bug)

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [ecx+eax+72], 7
	jne	SHORT $LN3@Extrapolat

; 1498 :          rdrData->rdrSy[0] = FlashBug;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [eax+edx+72], 8
	jmp	SHORT $LN1@Extrapolat
$LN3@Extrapolat:

; 1499 :       else if (rdrData->rdrSy[0] == Track)

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [edx+ecx+72], 3
	jne	SHORT $LN1@Extrapolat

; 1500 :          rdrData->rdrSy[0] = FlashTrack;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [ecx+eax+72], 4
$LN1@Extrapolat:

; 1501 :    }
; 1502 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?ExtrapolateHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ENDP ; RadarDopplerClass::ExtrapolateHistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_rdrData$ = -4						; size = 4
_ptr$ = 8						; size = 4
?SlipHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z PROC ; RadarDopplerClass::SlipHistory
; _this$ = ecx

; 1462 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1463 : int i;
; 1464 : SimObjectLocalData* rdrData = ptr->localData;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rdrData$[ebp], ecx

; 1465 : 
; 1466 :    for (i=NUM_RADAR_HISTORY-1; i>0; i--)

	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN3@SlipHistor
$LN2@SlipHistor:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@SlipHistor:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN1@SlipHistor

; 1467 :    {
; 1468 :       rdrData->rdrX[i]  = rdrData->rdrX[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+84]
	mov	DWORD PTR [ecx+eax*4+88], edx

; 1469 :       rdrData->rdrY[i]  = rdrData->rdrY[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+100]
	mov	DWORD PTR [ecx+eax*4+104], edx

; 1470 :       rdrData->rdrHd[i] = rdrData->rdrHd[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+116]
	mov	DWORD PTR [ecx+eax*4+120], edx

; 1471 :       rdrData->rdrSy[i] = rdrData->rdrSy[i-1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+68]
	mov	DWORD PTR [ecx+eax*4+72], edx

; 1472 :    }

	jmp	SHORT $LN2@SlipHistor
$LN1@SlipHistor:

; 1473 :    rdrData->rdrX[0]  = 0.0F;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax+88], xmm0

; 1474 :    rdrData->rdrY[0]  = 0.0F;

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx+104], xmm0

; 1475 :    rdrData->rdrHd[0] = 0.0F;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx+120], xmm0

; 1476 :    rdrData->rdrSy[0] = 0;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [ecx+eax+72], 0

; 1477 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?SlipHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ENDP ; RadarDopplerClass::SlipHistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rdrObj$ = -4						; size = 4
?ClearAllHistory@RadarDopplerClass@@IAEXXZ PROC		; RadarDopplerClass::ClearAllHistory
; _this$ = ecx

; 1505 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1506 : SimObjectType* rdrObj = platform->targetList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+660]
	mov	DWORD PTR _rdrObj$[ebp], edx
$LN2@ClearAllHi:

; 1507 : 
; 1508 :    while (rdrObj)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	SHORT $LN3@ClearAllHi

; 1509 :    {
; 1510 :       ClearHistory(rdrObj, TRUE);

	push	1
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory

; 1511 :       rdrObj = rdrObj->next;

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _rdrObj$[ebp], edx

; 1512 :    }

	jmp	SHORT $LN2@ClearAllHi
$LN3@ClearAllHi:

; 1513 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAllHistory@RadarDopplerClass@@IAEXXZ ENDP		; RadarDopplerClass::ClearAllHistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_rdrData$ = -8						; size = 4
_i$ = -4						; size = 4
_ptr$ = 8						; size = 4
_clrDetect$ = 12					; size = 4
?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z PROC ; RadarDopplerClass::ClearHistory
; _this$ = ecx

; 1443 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1444 : int i;
; 1445 : SimObjectLocalData* rdrData = ptr->localData;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rdrData$[ebp], ecx

; 1446 : 
; 1447 : 	rdrData->aspect = 0.0F;

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+68], xmm0

; 1448 : 
; 1449 : 	if (clrDetect)

	cmp	DWORD PTR _clrDetect$[ebp], 0
	je	SHORT $LN4@ClearHisto

; 1450 : 		rdrData->rdrDetect = 0;

	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [eax+140], 0
$LN4@ClearHisto:

; 1451 : 
; 1452 : 	for (i=0; i<NUM_RADAR_HISTORY; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ClearHisto
$LN2@ClearHisto:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@ClearHisto:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN1@ClearHisto

; 1453 : 	{
; 1454 : 		rdrData->rdrX[i]  = 0.0F;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx*4+88], xmm0

; 1455 : 		rdrData->rdrY[i]  = 0.0F;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx*4+104], xmm0

; 1456 : 		rdrData->rdrHd[i] = 0.0F;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax*4+120], xmm0

; 1457 : 		rdrData->rdrSy[i] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [eax+edx*4+72], 0

; 1458 : 	}

	jmp	SHORT $LN2@ClearHisto
$LN1@ClearHisto:

; 1459 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ENDP ; RadarDopplerClass::ClearHistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_rdrData$ = -4						; size = 4
_ptr$ = 8						; size = 4
_sy$ = 12						; size = 4
?SetHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z PROC ; RadarDopplerClass::SetHistory
; _this$ = ecx

; 1516 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1517 : int i;
; 1518 : SimObjectLocalData* rdrData = ptr->localData;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rdrData$[ebp], ecx

; 1519 : 
; 1520 :    rdrData->aspect = 180.0F * DTR - rdrData->ataFrom;      /* target aspect  */

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@40490fd9
	subss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+68], xmm0

; 1521 :    if (rdrData->aspect > 180.0F * DTR)

	mov	ecx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [ecx+68]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN5@SetHistory

; 1522 :       rdrData->aspect -= 360.0F * DTR;

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [edx+68]
	subss	xmm0, DWORD PTR __real@40c90fd9
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+68], xmm0
$LN5@SetHistory:

; 1523 : 
; 1524 :    for (i=NUM_RADAR_HISTORY-1; i>0; i--)

	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN4@SetHistory
$LN3@SetHistory:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@SetHistory:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN2@SetHistory

; 1525 :    {
; 1526 :       rdrData->rdrX[i]  = 0.0F;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx*4+88], xmm0

; 1527 :       rdrData->rdrY[i]  = 0.0F;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx*4+104], xmm0

; 1528 :       rdrData->rdrHd[i] = 0.0F;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax*4+120], xmm0

; 1529 :       rdrData->rdrSy[i] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [eax+edx*4+72], 0

; 1530 :    }

	jmp	SHORT $LN3@SetHistory
$LN2@SetHistory:

; 1531 : 
; 1532 :    rdrData->rdrX[0]  = TargetAz (platform, ptr);

	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	fstp	DWORD PTR [edx+ecx+88]

; 1533 :    rdrData->rdrY[0]  = rdrData->range;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+eax+104], edx

; 1534 :    rdrData->rdrHd[0] = platform->Yaw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	fstp	DWORD PTR [edx+ecx+120]

; 1535 :    rdrData->rdrSy[0] = sy;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	DWORD PTR [ecx+eax+72], edx

; 1536 : 
; 1537 :    if (sy != None)
; 1538 :    {
; 1539 : //	  UpdateObjectData(ptr);
; 1540 :    }
; 1541 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ENDP ; RadarDopplerClass::SetHistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_delta$1 = -28						; size = 4
tv268 = -24						; size = 4
tv260 = -20						; size = 4
tv157 = -16						; size = 4
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_rdrData$ = -4						; size = 4
_ptr$ = 8						; size = 4
_sy$ = 12						; size = 4
?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z PROC ; RadarDopplerClass::AddToHistory
; _this$ = ecx

; 1402 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1403 : 	int i;
; 1404 : 	SimObjectLocalData* rdrData;
; 1405 : 
; 1406 : 	F4Assert(ptr);
; 1407 : 	rdrData = ptr->localData;

	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rdrData$[ebp], ecx

; 1408 : 
; 1409 :    rdrData->aspect = 180.0F * DTR - rdrData->ataFrom;      /* target aspect  */

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@40490fd9
	subss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+68], xmm0

; 1410 :    if (rdrData->aspect > 180.0F * DTR)

	mov	ecx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [ecx+68]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN7@AddToHisto

; 1411 :       rdrData->aspect -= 360.0F * DTR;

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [edx+68]
	subss	xmm0, DWORD PTR __real@40c90fd9
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+68], xmm0
$LN7@AddToHisto:

; 1412 : 
; 1413 :    for (i=NUM_RADAR_HISTORY-1; i>0; i--)

	mov	DWORD PTR _i$[ebp], 3
	jmp	SHORT $LN6@AddToHisto
$LN5@AddToHisto:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@AddToHisto:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN4@AddToHisto

; 1414 :    {
; 1415 :       rdrData->rdrX[i]  = rdrData->rdrX[i-1];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+84]
	mov	DWORD PTR [eax+edx*4+88], ecx

; 1416 :       rdrData->rdrY[i]  = rdrData->rdrY[i-1];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+100]
	mov	DWORD PTR [eax+edx*4+104], ecx

; 1417 :       rdrData->rdrHd[i] = rdrData->rdrHd[i-1];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+116]
	mov	DWORD PTR [eax+edx*4+120], ecx

; 1418 :       rdrData->rdrSy[i] = rdrData->rdrSy[i-1];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+68]
	mov	DWORD PTR [eax+edx*4+72], ecx

; 1419 :    }

	jmp	SHORT $LN5@AddToHisto
$LN4@AddToHisto:

; 1420 : 
; 1421 :    rdrData->rdrX[0]  = TargetAz (platform, ptr);

	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _rdrData$[ebp]
	fstp	DWORD PTR [eax+edx+88]

; 1422 :    rdrData->rdrY[0]  = rdrData->range;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	eax, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+ecx+104], eax

; 1423 :    // if its jamming and we can't burn through - its a guess where it is.
; 1424 :    if (ptr->BaseData()->IsSPJamming() && ReturnStrength(ptr) < 1.0f) {

	mov	ecx, DWORD PTR _ptr$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR tv157[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv157[ebp]
	mov	eax, DWORD PTR [edx+268]
	call	eax
	test	eax, eax
	je	$LN3@AddToHisto
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	call	edx
	fstp	DWORD PTR tv260[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv260[ebp]
	jbe	SHORT $LN3@AddToHisto

; 1425 :        float delta = rdrData->range/10.0f; // range may be out by up to 1/10th

	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR _delta$1[ebp], xmm0

; 1426 :        rdrData->rdrY[0] += delta*PRANDFloat(); // +/- the delta

	mov	esi, 4
	imul	esi, 0
	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv268[ebp]
	movss	xmm0, DWORD PTR tv268[ebp]
	mulss	xmm0, DWORD PTR _delta$1[ebp]
	mov	ecx, DWORD PTR _rdrData$[ebp]
	addss	xmm0, DWORD PTR [ecx+esi+104]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+edx+104], xmm0

; 1427 : 	   rdrData->rdrSy[0] = 1;//Cobra let's make you only Detected no burn through

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [edx+ecx+72], 1

; 1428 :    }
; 1429 :    else //added else for sy

	jmp	SHORT $LN2@AddToHisto
$LN3@AddToHisto:

; 1430 : 	   rdrData->rdrSy[0] = sy;//Cobra added this here

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR _sy$[ebp]
	mov	DWORD PTR [ecx+eax+72], edx
$LN2@AddToHisto:

; 1431 : 
; 1432 :    rdrData->rdrHd[0] = platform->Yaw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _rdrData$[ebp]
	fstp	DWORD PTR [edx+ecx+120]

; 1433 :    //rdrData->rdrSy[0] = sy; Cobra removed from here and moved up
; 1434 : 
; 1435 :    if (sy != None)

	cmp	DWORD PTR _sy$[ebp], 0
	je	SHORT $LN1@AddToHisto

; 1436 :    {
; 1437 :       rdrData->rdrLastHit  = SimLibElapsedTime;  

	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+136], ecx
$LN1@AddToHisto:

; 1438 : //      UpdateObjectData(ptr);
; 1439 :    }
; 1440 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ENDP ; RadarDopplerClass::AddToHistory
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_totHits$ = -12						; size = 4
_rdrObj$ = -8						; size = 4
_this$ = -4						; size = 4
?ACMMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::ACMMode
; _this$ = ecx

; 1130 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1131 : 	int totHits;
; 1132 : 	SimObjectType* rdrObj = platform->targetList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+660]
	mov	DWORD PTR _rdrObj$[ebp], edx

; 1133 : 	
; 1134 : 	/*----------*/
; 1135 : 	/* Locked ? */
; 1136 : 	/*----------*/
; 1137 : 	//Cobra
; 1138 : 	static int islck = FALSE;
; 1139 : 	if (lockedTarget ){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN30@ACMMode

; 1140 : 		// RED - CTD Fix - Hud was already flushed on exit
; 1141 : 		if (TheHud){

	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN29@ACMMode

; 1142 : 			TheHud->HudData.Clear(HudDataType::RadarSlew);

	push	2
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	add	ecx, 4972				; 0000136cH
	call	?Clear@HudDataType@@QAEXH@Z		; HudDataType::Clear

; 1143 : 			TheHud->HudData.Clear(HudDataType::RadarBoresight);

	push	1
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	add	ecx, 4972				; 0000136cH
	call	?Clear@HudDataType@@QAEXH@Z		; HudDataType::Clear

; 1144 : 			TheHud->HudData.Clear(HudDataType::RadarVertical);

	push	4
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	add	ecx, 4972				; 0000136cH
	call	?Clear@HudDataType@@QAEXH@Z		; HudDataType::Clear
$LN29@ACMMode:

; 1145 : 		}
; 1146 : 		SetFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1147 : 		STTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?STTMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::STTMode

; 1148 : 		islck = TRUE;//Cobra

	mov	DWORD PTR ?islck@?1??ACMMode@RadarDopplerClass@@IAEXXZ@4HA, 1
	jmp	$LN14@ACMMode
$LN30@ACMMode:

; 1149 : 	} // ASSOCIATOR 03/12/03: Added IsEmitting() check so that OVRD to turn off radar doesn't relock in ACM
; 1150 : 	else if( IsEmitting() ){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmitting@RadarClass@@QAEHXZ		; RadarClass::IsEmitting
	test	eax, eax
	je	$LN14@ACMMode

; 1151 : 		if (IsSet(STTingTarget)){

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN26@ACMMode

; 1152 : 			ClearFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1153 : 			ChangeMode (mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode
$LN26@ACMMode:

; 1154 : 		}
; 1155 : 		
; 1156 : 		if (scanDir == ScanNone){

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@ACMMode

; 1157 : 			scanDir = ScanFwd;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+252], xmm0
$LN25@ACMMode:

; 1158 : 		}
; 1159 : 		
; 1160 : 		if (mode == ACM_BORE){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 8
	jne	SHORT $LN24@ACMMode

; 1161 : 			seekerAzCenter = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+56], xmm0

; 1162 : 			seekerElCenter = -3.0F * DTR;;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bd56774e
	movss	DWORD PTR [ecx+60], xmm0
$LN24@ACMMode:

; 1163 : 		}
; 1164 : 		
; 1165 : 		/*-------------------*/
; 1166 : 		/* check all objects */
; 1167 : 		/*-------------------*/
; 1168 : 		while (rdrObj){

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	$LN22@ACMMode

; 1169 : 			/*--------------------------*/
; 1170 : 			/* Hits to maintain a Track */
; 1171 : 			/*--------------------------*/
; 1172 : 			
; 1173 : 			// MD -- 20031222: use a helper function
; 1174 : 			totHits = HitsOnTrack(rdrObj->localData);

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ; RadarDopplerClass::HitsOnTrack
	mov	DWORD PTR _totHits$[ebp], eax

; 1175 : 			
; 1176 : 			if (totHits > HITS_FOR_LOCK / 2 &&
; 1177 : 				rdrObj->localData->range < tdisplayRange && IsEmitting() && 
; 1178 : 				rdrObj->localData->painted
; 1179 : 			){

	cmp	DWORD PTR _totHits$[ebp], 1
	jle	$LN21@ACMMode
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	$LN21@ACMMode
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmitting@RadarClass@@QAEHXZ		; RadarClass::IsEmitting
	test	eax, eax
	je	$LN21@ACMMode
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+52], 0
	je	$LN21@ACMMode

; 1180 : 				// Play the lock message
; 1181 : 				F4SoundFXSetDist(SFX_BB_LOCK, 0, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	67					; 00000043H
	call	_F4SoundFXSetDist
	add	esp, 16					; 00000010H

; 1182 : 				MonoPrint("Lock-----------------------------");

	push	OFFSET ??_C@_0CC@OHJNACMG@Lock?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
	call	_MonoPrint
	add	esp, 4

; 1183 : 				SetSensorTarget(rdrObj);

	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 1184 : 				ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1185 : 				seekerAzCenter = lockedTargetData->az;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+56], ecx

; 1186 : 				seekerElCenter = lockedTargetData->el;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+60], edx

; 1187 : 				beamAz   = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+196], xmm0

; 1188 : 				beamEl   = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+200], xmm0

; 1189 : 				ClearFlagBit (SpaceStabalized);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1190 : 				beamWidth = radarData->BeamHalfAngle;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+260], edx

; 1191 : 				azScan = 0.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+204], xmm0

; 1192 : 				bars = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 1

; 1193 : 				barWidth = APG68_BAR_WIDTH;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [edx+248], xmm0

; 1194 : 				ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1195 : 				SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1196 : 				scanDir  = ScanNone;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+252], xmm0

; 1197 : 				SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1198 : 				patternTime = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], 1

; 1199 : 				SetFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1200 : 				SimDriver.GetPlayerAircraft()->FCC->dropTrackCmd = FALSE;//Cobra 1/29/05 Needs this to reset lock

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+936]
	mov	BYTE PTR [edx+185], 0

; 1201 : 				break;

	jmp	SHORT $LN22@ACMMode

; 1202 : 			}
; 1203 : 			else {

	jmp	SHORT $LN20@ACMMode
$LN21@ACMMode:

; 1204 : 				rdrObj->localData->sensorState[Radar] = NoTrack;

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR [ecx+edx+192], 0
$LN20@ACMMode:

; 1205 : 			}
; 1206 : 			
; 1207 : 			rdrObj = rdrObj->next;

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _rdrObj$[ebp], ecx

; 1208 : 		}

	jmp	$LN24@ACMMode
$LN22@ACMMode:

; 1209 : 		
; 1210 : 		// RED - CTD Fix - Hud was already flushed on exit
; 1211 : 		if (TheHud){

	cmp	DWORD PTR ?TheHud@@3PAVHudClass@@A, 0	; TheHud
	je	SHORT $LN14@ACMMode

; 1212 : 			if (mode == ACM_BORE){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 8
	jne	SHORT $LN18@ACMMode

; 1213 : 				TheHud->HudData.Set(HudDataType::RadarBoresight);

	push	1
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	add	ecx, 4972				; 0000136cH
	call	?Set@HudDataType@@QAEXH@Z		; HudDataType::Set
	jmp	SHORT $LN14@ACMMode
$LN18@ACMMode:

; 1214 : 			}
; 1215 : 			else if (mode == ACM_SLEW){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 7
	jne	SHORT $LN16@ACMMode

; 1216 : 				TheHud->HudData.Set(HudDataType::RadarSlew);

	push	2
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	add	ecx, 4972				; 0000136cH
	call	?Set@HudDataType@@QAEXH@Z		; HudDataType::Set
	jmp	SHORT $LN14@ACMMode
$LN16@ACMMode:

; 1217 : 			}
; 1218 : 			else if (mode == ACM_10x60){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 9
	jne	SHORT $LN14@ACMMode

; 1219 : 				TheHud->HudData.Set(HudDataType::RadarVertical);

	push	4
	mov	ecx, DWORD PTR ?TheHud@@3PAVHudClass@@A	; TheHud
	add	ecx, 4972				; 0000136cH
	call	?Set@HudDataType@@QAEXH@Z		; HudDataType::Set
$LN14@ACMMode:

; 1220 : 			}
; 1221 : 		}
; 1222 : 	}
; 1223 : 	
; 1224 : 	
; 1225 : 	//Cobra
; 1226 : 	if (!lockedTarget && islck){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN13@ACMMode
	cmp	DWORD PTR ?islck@?1??ACMMode@RadarDopplerClass@@IAEXXZ@4HA, 0
	je	SHORT $LN13@ACMMode

; 1227 : 		ClearSensorTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 1228 :  		ChangeMode (mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1229 :  		SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1230 :  		lockedTarget = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1231 : 		islck = FALSE;

	mov	DWORD PTR ?islck@?1??ACMMode@RadarDopplerClass@@IAEXXZ@4HA, 0
$LN13@ACMMode:

; 1232 : 	}
; 1233 : 
; 1234 : 	/*-------------------------*/// me123 so designate doesn't drop target if locked
; 1235 : 	/* Select correct ACM Mode *///
; 1236 : 	// and drop target command returns to search if we have a lock, if we dont have a lock  it changes
; 1237 : 	/*-------------------------*/// to 20/30 from all acm modes exept in 20/30 it goes to 10/60
; 1238 : 	if (designateCmd && !lockedTarget){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+168], 0
	je	SHORT $LN12@ACMMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN12@ACMMode

; 1239 : 		// don't drop the targer if it's locked me123
; 1240 : 		ChangeMode (ACM_BORE);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1241 : 		SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1242 : 	}
; 1243 : 	else if (

	jmp	$LN2@ACMMode
$LN12@ACMMode:

; 1244 : 		!lockedTarget && mode != ACM_SLEW && 
; 1245 : 		SimDriver.GetPlayerAircraft() && // JB 010113 CTD fix
; 1246 : 		(SimDriver.GetPlayerAircraft()->FCC->cursorYCmd != 0 ||
; 1247 : 		SimDriver.GetPlayerAircraft()->FCC->cursorXCmd !=0)
; 1248 : 	){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN10@ACMMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 7
	je	SHORT $LN10@ACMMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN10@ACMMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+936]
	cmp	DWORD PTR [edx+200], 0
	jne	SHORT $LN9@ACMMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+936]
	cmp	DWORD PTR [eax+196], 0
	je	SHORT $LN10@ACMMode
$LN9@ACMMode:

; 1249 : 		ChangeMode (ACM_SLEW);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1250 : 		SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1251 : 	}
; 1252 : 	// MD -- 20040111: Adding this condition here to remove it from the cursor key commands
; 1253 : 	// which ended up being necessary to make the analog cursor support work the same way
; 1254 : 	// as the previous implementation of the key commands which did this job.  Looks like
; 1255 : 	// if should have been here all along really.
; 1256 : 	else if (

	jmp	$LN2@ACMMode
$LN10@ACMMode:

; 1257 : 		lockedTarget && mode != ACM_SLEW && 
; 1258 : 		SimDriver.GetPlayerAircraft() &&
; 1259 : 		(SimDriver.GetPlayerAircraft()->FCC->cursorYCmd != 0 ||
; 1260 : 		SimDriver.GetPlayerAircraft()->FCC->cursorXCmd !=0)
; 1261 : 	){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN7@ACMMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 7
	je	SHORT $LN7@ACMMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN7@ACMMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+936]
	cmp	DWORD PTR [eax+200], 0
	jne	SHORT $LN6@ACMMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+936]
	cmp	DWORD PTR [ecx+196], 0
	je	SHORT $LN7@ACMMode
$LN6@ACMMode:

; 1262 : 		//ClearSensorTarget();  //JPG 28 - This no longer applies w/ one-switch TMS aft to ACM NO RAD condition
; 1263 : 		ChangeMode(ACM_SLEW);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1264 : 		SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan
	jmp	SHORT $LN2@ACMMode
$LN7@ACMMode:

; 1265 : 		//lockedTarget = NULL;  //JPG This too
; 1266 : 	}
; 1267 : 	else if (dropTrackCmd){

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+164], 0
	je	SHORT $LN2@ACMMode

; 1268 : 		if (lockedTarget){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@ACMMode

; 1269 : 			ClearSensorTarget();  // me123 brake lock if locked

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 1270 : 			ChangeMode (mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1271 : 			SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1272 : 			lockedTarget = NULL;//me123

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1273 : 			SetEmitting(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax

; 1274 : 		}
; 1275 : 		else {

	jmp	SHORT $LN2@ACMMode
$LN3@ACMMode:

; 1276 : 			SetEmitting(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
$LN2@ACMMode:

; 1277 : 		}
; 1278 : 	}
; 1279 : 	
; 1280 : 	if (mode == ACM_10x60){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 9
	jne	SHORT $LN1@ACMMode

; 1281 : 		SetEmitting(TRUE);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx
$LN1@ACMMode:

; 1282 : 	}
; 1283 : 	/*else if (didDroptargetCmd)
; 1284 : 	{
; 1285 : 		SetEmitting(FALSE);
; 1286 : 	}
; 1287 : 	else {
; 1288 : 		didDroptargetCmd = FALSE;
; 1289 : 	} */
; 1290 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ACMMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::ACMMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
tv610 = -56						; size = 4
tv602 = -52						; size = 4
_elhack$1 = -48						; size = 4
_totHits$ = -44						; size = 4
tv349 = -40						; size = 4
tv348 = -36						; size = 4
tv339 = -32						; size = 4
tv326 = -28						; size = 4
tv325 = -24						; size = 4
tv316 = -20						; size = 4
tv156 = -16						; size = 4
tv152 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
?STTMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::STTMode
; _this$ = ecx

; 981  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 982  : 	int totHits;
; 983  : 	static bool diddroptrack= FALSE;
; 984  : 	
; 985  : 	if (oldseekerElCenter && !lockedTargetData) //me123

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN32@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+176], 0
	jne	$LN32@STTMode

; 986  : 	{
; 987  : 		seekerElCenter = min ( max (oldseekerElCenter, -MAX_ANT_EL + elScan), MAX_ANT_EL - elScan);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@bf860a91
	addss	xmm1, DWORD PTR [eax+208]
	comiss	xmm0, xmm1
	jbe	SHORT $LN35@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN36@STTMode
$LN35@STTMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv128[ebp], xmm0
$LN36@STTMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [eax+208]
	comiss	xmm0, DWORD PTR tv128[ebp]
	jbe	SHORT $LN39@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@bf860a91
	addss	xmm1, DWORD PTR [edx+208]
	comiss	xmm0, xmm1
	jbe	SHORT $LN37@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR tv152[ebp], xmm0
	jmp	SHORT $LN38@STTMode
$LN37@STTMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [ecx+208]
	movss	DWORD PTR tv152[ebp], xmm0
$LN38@STTMode:
	movss	xmm0, DWORD PTR tv152[ebp]
	movss	DWORD PTR tv156[ebp], xmm0
	jmp	SHORT $LN40@STTMode
$LN39@STTMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv156[ebp], xmm0
$LN40@STTMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv156[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 988  : 		oldseekerElCenter = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+64], xmm0
$LN32@STTMode:

; 989  : 	}
; 990  : 	
; 991  : 	if (!lockedTarget)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN31@STTMode

; 992  : 	{
; 993  : 		ClearFlagBit(STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 994  : 		if (mode != STT)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 13			; 0000000dH
	je	SHORT $LN30@STTMode

; 995  : 			ChangeMode (mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 996  : 		else

	jmp	SHORT $LN29@STTMode
$LN30@STTMode:

; 997  : 			ChangeMode (prevMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode
$LN29@STTMode:

; 998  : 		return;

	jmp	$LN33@STTMode

; 999  : 	}
; 1000 : 	else

	jmp	$LN23@STTMode
$LN31@STTMode:

; 1001 : 	{ //me123 gimbal check addet //Cobra 10/31/04 TJL
; 1002 :     
; 1003 :     		// Drop lock if the guy is outside our radar cone
; 1004 :     		if ((fabs( lockedTarget->localData->az ) > radarData->ScanHalfAngle) ||
; 1005 :  			(fabs( lockedTarget->localData->el ) > radarData->ScanHalfAngle) ) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv602[ebp]
	movss	xmm0, DWORD PTR tv602[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	comiss	xmm0, DWORD PTR [eax+24]
	ja	SHORT $LN26@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv610[ebp]
	movss	xmm0, DWORD PTR tv610[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	comiss	xmm0, DWORD PTR [edx+24]
	jbe	SHORT $LN23@STTMode
$LN26@STTMode:

; 1006 :  			// MD -- 20040911: according to Mirv, ACM with a lock losing track at the
; 1007 :  			// gimbals should not cause the radar to go to NO RAD but dropTrackCmd
; 1008 :  			// is also used in ACM mode for the TMS down and in that case it should
; 1009 :  			// go to NO RAD.  Since the ACMMode() code can't tell the difference,
; 1010 :  			// let's just drop the lock here for ACM modes and let the other modes
; 1011 :  			// with STTingTarget use dropTrackCmd as before.  May not be pretty but
; 1012 :  			// it seems to work how Mirv wants it ;)
; 1013 : 
; 1014 : 		if(mode == RadarClass::ACM_30x20 || mode == RadarClass::ACM_SLEW ||
; 1015 :  				mode == RadarClass::ACM_BORE ||	mode == RadarClass::ACM_10x60)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 6
	je	SHORT $LN24@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 7
	je	SHORT $LN24@STTMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 8
	je	SHORT $LN24@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 9
	jne	SHORT $LN25@STTMode
$LN24@STTMode:

; 1016 :  			{
; 1017 :  				ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 1018 :  				ChangeMode (mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1019 :  				SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1020 :  				lockedTarget = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1021 :  				return;

	jmp	$LN33@STTMode

; 1022 :  			}
; 1023 :  			else

	jmp	SHORT $LN23@STTMode
$LN25@STTMode:

; 1024 :     				dropTrackCmd = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+164], 1
$LN23@STTMode:

; 1025 :     		}
; 1026 : 		}
; 1027 : 	
; 1028 : 	if (!lockedTargetData)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+176], 0
	jne	SHORT $LN22@STTMode

; 1029 : 		return;

	jmp	$LN33@STTMode
$LN22@STTMode:

; 1030 : 	
; 1031 : 	if (!g_bMLU && (dropTrackCmd && !didDesignate && mode == SAM) ||
; 1032 : 		g_bMLU && dropTrackCmd && !diddroptrack)//me123

	movzx	eax, BYTE PTR ?g_bMLU@@3_NA		; g_bMLU
	test	eax, eax
	jne	SHORT $LN18@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	SHORT $LN18@STTMode
	cmp	DWORD PTR _didDesignate, 0
	jne	SHORT $LN18@STTMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 10			; 0000000aH
	je	SHORT $LN20@STTMode
$LN18@STTMode:
	movzx	eax, BYTE PTR ?g_bMLU@@3_NA		; g_bMLU
	test	eax, eax
	je	$LN21@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	$LN21@STTMode
	movzx	edx, BYTE PTR ?diddroptrack@?1??STTMode@RadarDopplerClass@@IAEXXZ@4_NA
	test	edx, edx
	jne	$LN21@STTMode
$LN20@STTMode:

; 1033 : 	{
; 1034 : 		reacqFlag = (int)(ReacqusitionCount / SEC_TO_MSEC * SimLibMajorFrameRate);

	movss	xmm0, DWORD PTR __real@41500000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameRate@@3MA
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], eax

; 1035 : 		reacqEl = lockedTargetData->el;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+484], edx

; 1036 : 		//ClearHistory(lockedTarget);
; 1037 : 		azScan = rwsAzs[rwsAzIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+332]
	mov	DWORD PTR [edx+204], ecx

; 1038 : 		displayAzScan = rwsAzs[rwsAzIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+412]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+332]
	mov	DWORD PTR [ecx+216], eax

; 1039 : 		bars = rwsBars[rwsBarIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+436]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+364]
	mov	DWORD PTR [eax+188], edx

; 1040 : 		barWidth = APG68_BAR_WIDTH;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [eax+248], xmm0

; 1041 : 		ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1042 : 		SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1043 : 		scanDir  = ScanFwd;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+252], xmm0

; 1044 : 		SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1045 : 		ClearFlagBit(STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1046 : 		diddroptrack = TRUE;

	mov	BYTE PTR ?diddroptrack@?1??STTMode@RadarDopplerClass@@IAEXXZ@4_NA, 1

; 1047 : 		return;

	jmp	$LN33@STTMode
$LN21@STTMode:

; 1048 : 	}
; 1049 : 	diddroptrack = FALSE;

	mov	BYTE PTR ?diddroptrack@?1??STTMode@RadarDopplerClass@@IAEXXZ@4_NA, 0

; 1050 : 	if (!oldseekerElCenter) 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN17@STTMode

; 1051 : 		oldseekerElCenter = seekerElCenter;//me123

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+64], edx
$LN17@STTMode:

; 1052 : 	
; 1053 : 	seekerAzCenter = max ( min (lockedTargetData->az, MAX_ANT_EL), -MAX_ANT_EL);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR [ecx+16]
	jbe	SHORT $LN41@STTMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR tv316[ebp], xmm0
	jmp	SHORT $LN42@STTMode
$LN41@STTMode:
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR tv316[ebp], xmm0
$LN42@STTMode:
	movss	xmm0, DWORD PTR tv316[ebp]
	comiss	xmm0, DWORD PTR __real@bf860a91
	jbe	SHORT $LN45@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR [edx+16]
	jbe	SHORT $LN43@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR tv325[ebp], xmm0
	jmp	SHORT $LN44@STTMode
$LN43@STTMode:
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR tv325[ebp], xmm0
$LN44@STTMode:
	movss	xmm0, DWORD PTR tv325[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	jmp	SHORT $LN46@STTMode
$LN45@STTMode:
	movss	xmm0, DWORD PTR __real@bf860a91
	movss	DWORD PTR tv326[ebp], xmm0
$LN46@STTMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv326[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 1054 : 	seekerElCenter = max ( min (lockedTargetData->el, MAX_ANT_EL), -MAX_ANT_EL);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR [ecx+28]
	jbe	SHORT $LN47@STTMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR tv339[ebp], xmm0
	jmp	SHORT $LN48@STTMode
$LN47@STTMode:
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR tv339[ebp], xmm0
$LN48@STTMode:
	movss	xmm0, DWORD PTR tv339[ebp]
	comiss	xmm0, DWORD PTR __real@bf860a91
	jbe	SHORT $LN51@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	movss	xmm0, DWORD PTR __real@3f860a91
	comiss	xmm0, DWORD PTR [edx+28]
	jbe	SHORT $LN49@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR tv348[ebp], xmm0
	jmp	SHORT $LN50@STTMode
$LN49@STTMode:
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR tv348[ebp], xmm0
$LN50@STTMode:
	movss	xmm0, DWORD PTR tv348[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
	jmp	SHORT $LN52@STTMode
$LN51@STTMode:
	movss	xmm0, DWORD PTR __real@bf860a91
	movss	DWORD PTR tv349[ebp], xmm0
$LN52@STTMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv349[ebp]
	movss	DWORD PTR [edx+60], xmm0

; 1055 : 	bars = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 1

; 1056 : 	azScan = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+204], xmm0

; 1057 : 	
; 1058 : 	/*--------------------------*/
; 1059 : 	/* Hits to maintain a Track */
; 1060 : 	/*--------------------------*/
; 1061 : 	
; 1062 : 	// MD -- 20031222: use a helper function
; 1063 : 	totHits = HitsOnTrack(lockedTargetData);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ; RadarDopplerClass::HitsOnTrack
	mov	DWORD PTR _totHits$[ebp], eax

; 1064 : 	
; 1065 : 	if (lockedTargetData->painted && totHits > HITS_FOR_TRACK)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN16@STTMode
	cmp	DWORD PTR _totHits$[ebp], 1
	jle	SHORT $LN16@STTMode

; 1066 : 	{
; 1067 : 		AddToHistory(lockedTarget, Track);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 1068 : 		lockedTargetData->sensorState[Radar] = SensorTrack;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR [eax+ecx+192], 3
$LN16@STTMode:

; 1069 : 	}
; 1070 : 	
; 1071 : 	/*------------------*/
; 1072 : 	/* Auto Range Scale */
; 1073 : 	/*------------------*/
; 1074 : 	if (mode != VS)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 5
	je	SHORT $LN12@STTMode

; 1075 : 	{
; 1076 : 		if (lockedTargetData->range > 0.9F * tdisplayRange && curRangeIdx < NUM_RANGES - 1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR [edx+264]
	movss	xmm1, DWORD PTR [ecx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN14@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+388], 4
	jge	SHORT $LN14@STTMode

; 1077 : 			rangeChangeCmd = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 1
	jmp	SHORT $LN12@STTMode
$LN14@STTMode:

; 1078 : 		else if (lockedTargetData->range < 0.4F * tdisplayRange && curRangeIdx > 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ecccccd
	mulss	xmm0, DWORD PTR [ecx+264]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN12@STTMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+388], 0
	jle	SHORT $LN12@STTMode

; 1079 : 			rangeChangeCmd = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+140], -1
$LN12@STTMode:

; 1080 : 	}
; 1081 : 	
; 1082 : 	if (totHits < HITS_FOR_TRACK || dropTrackCmd )

	cmp	DWORD PTR _totHits$[ebp], 1
	jl	SHORT $LN10@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	$LN9@STTMode
$LN10@STTMode:

; 1083 : 	{
; 1084 : 		ExtrapolateHistory(lockedTarget);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtrapolateHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ; RadarDopplerClass::ExtrapolateHistory

; 1085 : 		
; 1086 : 		if (((SimLibElapsedTime - lockedTarget->localData->rdrLastHit) > radarData->CoastTime) || dropTrackCmd )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	cmp	ecx, DWORD PTR [eax+32]
	ja	SHORT $LN8@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	$LN9@STTMode
$LN8@STTMode:

; 1087 : 		{
; 1088 : 			//me123	rangeChangeCmd = 0;
; 1089 : 			reacqFlag = (int)(ReacqusitionCount / SEC_TO_MSEC * SimLibMajorFrameRate);

	movss	xmm0, DWORD PTR __real@41500000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameRate@@3MA
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], edx

; 1090 : 			reacqEl = lockedTargetData->el;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+484], ecx

; 1091 : 			// MD -- 20040125: add new TWS mode processing: still show a bug after STT
; 1092 : 			if (mode != TWS)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 4
	je	SHORT $LN7@STTMode

; 1093 : 				ClearHistory(lockedTarget);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory
$LN7@STTMode:

; 1094 : 			
; 1095 : 			if (mode == ACM_30x20 || mode == ACM_SLEW
; 1096 : 				|| mode == ACM_BORE || mode == ACM_10x60 || mode == VS)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 6
	je	SHORT $LN5@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 7
	je	SHORT $LN5@STTMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 8
	je	SHORT $LN5@STTMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 9
	je	SHORT $LN5@STTMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 5
	jne	SHORT $LN6@STTMode
$LN5@STTMode:

; 1097 : 			{
; 1098 : 				lockedTarget->localData->rdrDetect = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+140], 0

; 1099 : 				ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 1100 : 				ChangeMode (mode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode
	jmp	$LN1@STTMode
$LN6@STTMode:

; 1101 : 			}
; 1102 : 			else if (mode == SAM)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 10			; 0000000aH
	jne	$LN3@STTMode

; 1103 : 			{
; 1104 : 				azScan = rwsAzs[rwsAzIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+412]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+332]
	mov	DWORD PTR [eax+204], edx

; 1105 : 				displayAzScan = rwsAzs[rwsAzIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+332]
	mov	DWORD PTR [edx+216], ecx

; 1106 : 				bars = rwsBars[rwsBarIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+436]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+364]
	mov	DWORD PTR [ecx+188], eax

; 1107 : 				barWidth = APG68_BAR_WIDTH;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [ecx+248], xmm0

; 1108 : 				ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1109 : 				SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1110 : 				scanDir  = ScanFwd;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+252], xmm0

; 1111 : 				//MI
; 1112 : 				ChangeMode(prevMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1113 : 			}
; 1114 : 			else

	jmp	SHORT $LN1@STTMode
$LN3@STTMode:

; 1115 : 			{
; 1116 : 				float elhack = oldseekerElCenter;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR _elhack$1[ebp], xmm0

; 1117 : 				ChangeMode (prevMode);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 1118 : 				oldseekerElCenter = elhack;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elhack$1[ebp]
	movss	DWORD PTR [edx+64], xmm0

; 1119 : 				// MD -- 20031223: antenna should go back to where the knob was set for all but TWS with a bug.
; 1120 : 				if (!g_bAntElevKnobFix)  

	movzx	eax, BYTE PTR ?g_bAntElevKnobFix@@3_NA	; g_bAntElevKnobFix
	test	eax, eax
	jne	SHORT $LN1@STTMode

; 1121 : 					seekerElCenter = elhack;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elhack$1[ebp]
	movss	DWORD PTR [ecx+60], xmm0
$LN1@STTMode:

; 1122 : 			}
; 1123 : 			SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1124 : 			ClearFlagBit(STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN9@STTMode:
$LN33@STTMode:

; 1125 : 		}
; 1126 : 	}
; 1127 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?STTMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::STTMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_totHits$ = -20						; size = 4
_tmpRange$ = -16					; size = 4
_rdrObj$ = -12						; size = 4
_rdrData$ = -8						; size = 4
_this$ = -4						; size = 4
?VSMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::VSMode
; _this$ = ecx

; 1293 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1294 : 	int totHits;
; 1295 : 	float tmpRange;
; 1296 : 	SimObjectType* rdrObj;
; 1297 : 	SimObjectLocalData* rdrData;
; 1298 : 
; 1299 :    if (lockedTarget){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN15@VSMode

; 1300 :       STTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?STTMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::STTMode

; 1301 :    }
; 1302 :    else {

	jmp	$LN1@VSMode
$LN15@VSMode:

; 1303 : 	   /*-----------------------*/
; 1304 : 	   /* Spotlight / Designate */
; 1305 : 	   /*-----------------------*/
; 1306 : 	   if (IsSet(Spotlight) && !designateCmd)

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN13@VSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+168], 0
	jne	SHORT $LN13@VSMode

; 1307 : 		   SetFlagBit (Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1308 : 	   else

	jmp	SHORT $LN12@VSMode
$LN13@VSMode:

; 1309 : 		   ClearFlagBit (Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN12@VSMode:

; 1310 : 
; 1311 : 	   if (!IsSet(Spotlight) && designateCmd)

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN11@VSMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+168], 0
	je	SHORT $LN11@VSMode

; 1312 : 	   {
; 1313 : 		   lastAzScan = azScan;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR [eax+292], edx

; 1314 : 		   lastBars = bars;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	mov	DWORD PTR [eax+304], edx

; 1315 : 		   azScan = 10.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e32b8c1
	movss	DWORD PTR [eax+204], xmm0

; 1316 : 		   bars = 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 4

; 1317 : 		   ClearSensorTarget();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
$LN11@VSMode:

; 1318 : 	   }
; 1319 : 
; 1320 : 	   if (designateCmd)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	SHORT $LN10@VSMode

; 1321 : 		   SetFlagBit(Spotlight);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1322 : 	   else

	jmp	SHORT $LN9@VSMode
$LN10@VSMode:

; 1323 : 		   ClearFlagBit(Spotlight);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN9@VSMode:

; 1324 : 
; 1325 : 	   /*-------------------*/
; 1326 : 	   /* check all objects */
; 1327 : 	   /*-------------------*/
; 1328 : 	   rdrObj = platform->targetList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+660]
	mov	DWORD PTR _rdrObj$[ebp], eax
$LN8@VSMode:

; 1329 : 	   while (rdrObj)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	$LN7@VSMode

; 1330 : 	   {
; 1331 : 		   rdrData = rdrObj->localData;

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _rdrData$[ebp], edx

; 1332 : 
; 1333 : 		   /*-------------------------------*/
; 1334 : 		   /* check for object in radar FOV */
; 1335 : 		   /*-------------------------------*/
; 1336 : 		   if (rdrData->painted)

	mov	eax, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN4@VSMode

; 1337 : 		   {
; 1338 : 			   /*----------------------*/
; 1339 : 			   /* detection this frame */
; 1340 : 			   /*----------------------*/
; 1341 : 			   if (rdrData->rdrDetect & 0x10 && rdrData->rangedot < 0.0F)

	mov	ecx, DWORD PTR _rdrData$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	and	edx, 16					; 00000010H
	je	SHORT $LN5@VSMode
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+48]
	jbe	SHORT $LN5@VSMode

; 1342 : 			   {
; 1343 : 				   tmpRange = rdrData->range;

	mov	ecx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	movss	DWORD PTR _tmpRange$[ebp], xmm0

; 1344 : 				   rdrData->range = -rdrData->rangedot * FTPSEC_TO_KNOTS;

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	mov	eax, DWORD PTR _rdrData$[ebp]
	movss	DWORD PTR [eax+44], xmm0

; 1345 : 				   SetHistory(rdrObj, Det);

	push	1
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::SetHistory

; 1346 : 				   rdrData->range = tmpRange;

	mov	edx, DWORD PTR _rdrData$[ebp]
	movss	xmm0, DWORD PTR _tmpRange$[ebp]
	movss	DWORD PTR [edx+44], xmm0

; 1347 : 			   }
; 1348 : 			   /*--------------*/
; 1349 : 			   /* no detection */
; 1350 : 			   /*--------------*/
; 1351 : 			   else

	jmp	SHORT $LN4@VSMode
$LN5@VSMode:

; 1352 : 				   AddToHistory(rdrObj, None);

	push	0
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory
$LN4@VSMode:

; 1353 : 		   }
; 1354 : 
; 1355 : 		   /*--------------------------------*/
; 1356 : 		   /* If designating, check for lock */
; 1357 : 		   /*--------------------------------*/
; 1358 : 		   if (IsSet(Designating))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN2@VSMode

; 1359 : 		   {
; 1360 : 				// MD -- 20031222: use a helper function
; 1361 : 			   totHits = HitsOnTrack(rdrData);

	mov	ecx, DWORD PTR _rdrData$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ; RadarDopplerClass::HitsOnTrack
	mov	DWORD PTR _totHits$[ebp], eax

; 1362 : 
; 1363 : 			   if (totHits >= HITS_FOR_LOCK &&
; 1364 : 				   IsUnderVSCursor(rdrObj, platform->Yaw()))

	cmp	DWORD PTR _totHits$[ebp], 2
	jl	$LN2@VSMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsUnderVSCursor@RadarDopplerClass@@IAEHPAVSimObjectType@@M@Z ; RadarDopplerClass::IsUnderVSCursor
	test	eax, eax
	je	$LN2@VSMode

; 1365 : 			   {
; 1366 : 				   SetSensorTarget(rdrObj);

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	call	edx

; 1367 : 				   ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1368 : 				   seekerAzCenter = lockedTargetData->az;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+56], eax

; 1369 : 				   seekerElCenter = lockedTargetData->el;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+60], ecx

; 1370 : 				   beamAz   = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+196], xmm0

; 1371 : 				   beamEl   = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+200], xmm0

; 1372 : 				   //			      ClearFlagBit (SpaceStabalized);
; 1373 : 				   beamWidth = radarData->BeamHalfAngle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+260], ecx

; 1374 : 				   azScan = 0.0F * DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+204], xmm0

; 1375 : 				   bars = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 1

; 1376 : 				   barWidth = APG68_BAR_WIDTH;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [ecx+248], xmm0

; 1377 : 				   ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 1378 : 				   SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1379 : 				   scanDir  = ScanNone;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+252], xmm0

; 1380 : 				   SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 1381 : 				   patternTime = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], 1

; 1382 : 				   SetFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 1383 : 				   break;

	jmp	SHORT $LN7@VSMode
$LN2@VSMode:

; 1384 : 			   }
; 1385 : 		   }
; 1386 : 
; 1387 : 		   rdrObj = rdrObj->next;

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _rdrObj$[ebp], edx

; 1388 : 	   }

	jmp	$LN8@VSMode
$LN7@VSMode:

; 1389 : 
; 1390 : 	   /*-----------------------------------*/
; 1391 : 	   /* No target found, return to search */
; 1392 : 	   /*-----------------------------------*/
; 1393 : 	   if (IsSet(Designating))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN1@VSMode

; 1394 : 	   {
; 1395 : 		   azScan = lastAzScan;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR [eax+204], edx

; 1396 : 		   bars = lastBars;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+304]
	mov	DWORD PTR [eax+188], edx
$LN1@VSMode:

; 1397 : 	   }
; 1398 :    }
; 1399 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?VSMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::VSMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
$T1 = -76						; size = 8
_tmpRange$ = -68					; size = 4
_totHits$ = -64						; size = 4
tv670 = -60						; size = 4
tv533 = -56						; size = 4
tv529 = -52						; size = 4
tv517 = -48						; size = 4
tv479 = -44						; size = 4
tv475 = -40						; size = 4
tv463 = -36						; size = 4
_elhack$2 = -32						; size = 4
tv176 = -28						; size = 4
tv172 = -24						; size = 4
tv148 = -20						; size = 4
_dropSAM$ = -16						; size = 4
_tmpVal$ = -12						; size = 4
_rdrObj$ = -8						; size = 4
_this$ = -4						; size = 4
?SAMMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::SAMMode
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 191  : int totHits, dropSAM = FALSE;

	mov	DWORD PTR _dropSAM$[ebp], 0

; 192  : float  tmpRange, tmpVal;
; 193  : SimObjectType* rdrObj;
; 194  : static bool justdidSTT = FALSE;
; 195  : 	// Drop Track, Revert to last mode
; 196  : 	if (lockedTarget == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN34@SAMMode

; 197  : 	{
; 198  : 		//MI better do what the comment tells us
; 199  : 		//ChangeMode (RWS);
; 200  : 		ChangeMode(prevMode);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 201  : 		return;

	jmp	$LN35@SAMMode
$LN34@SAMMode:

; 202  : 	}
; 203  : 
; 204  : 	// Drop immediatly on leaving volume
; 205  : 	if (fabs(lockedTargetData->ata) > MAX_ANT_EL)//me123 ||

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv670[ebp]
	movss	xmm0, DWORD PTR tv670[ebp]
	comiss	xmm0, DWORD PTR __real@3f860a91
	jbe	SHORT $LN33@SAMMode

; 206  : 		//me123 fabs(lockedTargetData->el) > MAX_ANT_EL)
; 207  : 	{
; 208  : 		dropSAM = TRUE;

	mov	DWORD PTR _dropSAM$[ebp], 1
$LN33@SAMMode:

; 209  : 	}
; 210  : 	if (!g_bAntElevKnobFix) {

	movzx	edx, BYTE PTR ?g_bAntElevKnobFix@@3_NA	; g_bAntElevKnobFix
	test	edx, edx
	jne	$LN32@SAMMode

; 211  : 		if (oldseekerElCenter && subMode != SAM_AUTO_MODE) 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN31@SAMMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+504], 11			; 0000000bH
	je	$LN31@SAMMode

; 212  : 		{
; 213  : 			seekerElCenter = min ( max (oldseekerElCenter, -MAX_ANT_EL + elScan), MAX_ANT_EL - elScan);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@bf860a91
	addss	xmm1, DWORD PTR [eax+208]
	comiss	xmm0, xmm1
	jbe	SHORT $LN37@SAMMode
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN38@SAMMode
$LN37@SAMMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv148[ebp], xmm0
$LN38@SAMMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [eax+208]
	comiss	xmm0, DWORD PTR tv148[ebp]
	jbe	SHORT $LN41@SAMMode
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+64]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@bf860a91
	addss	xmm1, DWORD PTR [edx+208]
	comiss	xmm0, xmm1
	jbe	SHORT $LN39@SAMMode
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR tv172[ebp], xmm0
	jmp	SHORT $LN40@SAMMode
$LN39@SAMMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [ecx+208]
	movss	DWORD PTR tv172[ebp], xmm0
$LN40@SAMMode:
	movss	xmm0, DWORD PTR tv172[ebp]
	movss	DWORD PTR tv176[ebp], xmm0
	jmp	SHORT $LN42@SAMMode
$LN41@SAMMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv176[ebp], xmm0
$LN42@SAMMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 214  : 			oldseekerElCenter = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+64], xmm0
$LN31@SAMMode:

; 215  : 		}
; 216  : 	}
; 217  : 	else

	jmp	SHORT $LN30@SAMMode
$LN32@SAMMode:

; 218  : 		seekerElCenter = AntElevKnob();  // always center on the elevation commanded by the knob position

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+252]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+60]
$LN30@SAMMode:

; 219  : 
; 220  : 
; 221  : 	if (IsSet(STTingTarget))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN29@SAMMode

; 222  : 	{
; 223  : 		justdidSTT = TRUE;

	mov	BYTE PTR ?justdidSTT@?1??SAMMode@RadarDopplerClass@@IAEXXZ@4_NA, 1

; 224  : 		if (dropSAM)

	cmp	DWORD PTR _dropSAM$[ebp], 0
	je	$LN28@SAMMode

; 225  : 		{
; 226  : 			float elhack;
; 227  : 			if (!g_bAntElevKnobFix)

	movzx	ecx, BYTE PTR ?g_bAntElevKnobFix@@3_NA	; g_bAntElevKnobFix
	test	ecx, ecx
	jne	SHORT $LN27@SAMMode

; 228  : 				elhack = oldseekerElCenter;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	movss	DWORD PTR _elhack$2[ebp], xmm0
$LN27@SAMMode:

; 229  : 			azScan = lastSAMAzScan;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	DWORD PTR [eax+204], edx

; 230  : 			bars = lastSAMBars;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	mov	DWORD PTR [eax+188], edx

; 231  : 			barWidth = APG68_BAR_WIDTH;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [eax+248], xmm0

; 232  : 			ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 233  : 			SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 234  : 			scanDir  = ScanFwd;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+252], xmm0

; 235  : 			ClearFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 236  : 			ChangeMode(SAM);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 237  : 			if (!g_bAntElevKnobFix) {

	movzx	edx, BYTE PTR ?g_bAntElevKnobFix@@3_NA	; g_bAntElevKnobFix
	test	edx, edx
	jne	SHORT $LN26@SAMMode

; 238  : 				oldseekerElCenter = elhack;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elhack$2[ebp]
	movss	DWORD PTR [eax+64], xmm0

; 239  : 				seekerElCenter = elhack;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elhack$2[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 240  : 			}
; 241  : 			else

	jmp	SHORT $LN25@SAMMode
$LN26@SAMMode:

; 242  : 				seekerElCenter = AntElevKnob();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+252]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+60]
$LN25@SAMMode:

; 243  : 		}
; 244  : 		else

	jmp	SHORT $LN24@SAMMode
$LN28@SAMMode:

; 245  : 		{	
; 246  : 			STTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?STTMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::STTMode
$LN24@SAMMode:

; 247  : 		}
; 248  : 	}
; 249  : 	else

	jmp	$LN1@SAMMode
$LN29@SAMMode:

; 250  : 	{
; 251  : 		/*-------------------*/
; 252  : 		/* check all objects */
; 253  : 		/*-------------------*/
; 254  : 		rdrObj = platform->targetList;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+660]
	mov	DWORD PTR _rdrObj$[ebp], eax
$LN22@SAMMode:

; 255  : 		while (rdrObj)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	$LN21@SAMMode

; 256  : 		{
; 257  : 			if (rdrObj->BaseData()->Id() == targetUnderCursor && IsSet(Designating) && !didDesignate)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN17@SAMMode
	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN17@SAMMode
	cmp	DWORD PTR _didDesignate, 0
	jne	$LN17@SAMMode

; 258  : 			{
; 259  : 				// Bug a target and go into STT
; 260  : 				if (rdrObj == lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rdrObj$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jne	$LN19@SAMMode

; 261  : 				{
; 262  : 					SetSensorTarget(rdrObj);

	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 263  : 					ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 264  : 					seekerAzCenter = lockedTargetData->az;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+56], ecx

; 265  : 					seekerElCenter = lockedTargetData->el;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+60], edx

; 266  : 					beamAz   = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+196], xmm0

; 267  : 					beamEl   = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+200], xmm0

; 268  : 					ClearFlagBit (SpaceStabalized);

	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 269  : 					beamWidth = radarData->BeamHalfAngle;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+260], edx

; 270  : 					lastSAMAzScan = azScan;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR [eax+296], edx

; 271  : 					lastSAMBars = bars;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	mov	DWORD PTR [eax+308], edx

; 272  : 					azScan = 0.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+204], xmm0

; 273  : 					bars = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 1

; 274  : 					barWidth = APG68_BAR_WIDTH;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [edx+248], xmm0

; 275  : 					ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 276  : 					SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 277  : 					scanDir  = ScanNone;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+252], xmm0

; 278  : 					SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 279  : 					SetFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 280  : 					patternTime = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], 1

; 281  : 				}
; 282  : 				else

	jmp	$LN17@SAMMode
$LN19@SAMMode:

; 283  : 				{
; 284  : 					// Move sam target to something else.
; 285  : 					// Lock anything detected at last chance
; 286  : 					if (rdrObj->localData->rdrDetect & 0x10)

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+140]
	and	ecx, 16					; 00000010H
	je	$LN17@SAMMode

; 287  : 					{
; 288  : 						if (lockedTarget)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN16@SAMMode

; 289  : 						{
; 290  : 							ClearHistory(lockedTarget);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory

; 291  : 							AddToHistory(lockedTarget, Solid);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory
$LN16@SAMMode:

; 292  : 						}
; 293  : 						rdrObj->localData->rdrDetect = 0x1f;

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+140], 31			; 0000001fH

; 294  : 						SetSensorTarget(rdrObj);

	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 295  : 						ClearHistory(lockedTarget);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory

; 296  : 						AddToHistory(lockedTarget, Track);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 297  : 						ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 298  : 						//seekerAzCenter = rdrObj->localData->az;
; 299  : 						//seekerElCenter = rdrObj->localData->el;
; 300  : 						rdrObj->localData->sensorLoopCount[Radar] = SimLibElapsedTime;

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+ecx+164], edx

; 301  : 						/*
; 302  : 						beamAz   = 0.0F;
; 303  : 						beamEl   = 0.0F;
; 304  : 						SetFlagBit (STTingTarget);
; 305  : 						patternTime = 1;
; 306  : 						*/
; 307  : 						break;

	jmp	SHORT $LN21@SAMMode
$LN17@SAMMode:

; 308  : 					}
; 309  : 				}
; 310  : 			}
; 311  : 
; 312  : 			/*-------------------------------*/
; 313  : 			/* check for object in radar FOV */
; 314  : 			/*-------------------------------*/
; 315  : 			if (rdrObj->localData->painted)

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN13@SAMMode

; 316  : 			{
; 317  : 				/*----------------------*/
; 318  : 				/* detection this frame */
; 319  : 				/*----------------------*/
; 320  : 				if (rdrObj->localData->rdrDetect & 0x10)

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+140]
	and	ecx, 16					; 00000010H
	je	SHORT $LN14@SAMMode

; 321  : 				{
; 322  : 					AddToHistory(rdrObj, Solid);

	push	2
	mov	edx, DWORD PTR _rdrObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 323  : 				}
; 324  : 				/*--------------*/
; 325  : 				/* no detection */
; 326  : 				/*--------------*/
; 327  : 				else

	jmp	SHORT $LN13@SAMMode
$LN14@SAMMode:

; 328  : 					ExtrapolateHistory(rdrObj);

	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtrapolateHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ; RadarDopplerClass::ExtrapolateHistory
$LN13@SAMMode:

; 329  : 			}
; 330  : 
; 331  : 			rdrObj = rdrObj->next;

	mov	ecx, DWORD PTR _rdrObj$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _rdrObj$[ebp], edx

; 332  : 		}

	jmp	$LN22@SAMMode
$LN21@SAMMode:

; 333  : 
; 334  : 		/*------------*/
; 335  : 		/* SAM Target */
; 336  : 		/*------------*/
; 337  : 		// MD -- 20031222: use a helper function
; 338  : 		totHits = HitsOnTrack(lockedTargetData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ; RadarDopplerClass::HitsOnTrack
	mov	DWORD PTR _totHits$[ebp], eax

; 339  : 
; 340  : 		if (lockedTargetData->painted)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN11@SAMMode

; 341  : 		{
; 342  : 			if (lockedTargetData->rdrDetect & 0x10)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR [edx+140]
	and	eax, 16					; 00000010H
	je	SHORT $LN11@SAMMode

; 343  : 			{
; 344  : 				lockedTargetData->sensorState[Radar] = SensorTrack;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax+192], 3

; 345  : 				AddToHistory(lockedTarget, Track);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory
$LN11@SAMMode:

; 346  : 			}
; 347  : 			//         lockedTargetData->rdrSy[1] = None;
; 348  : 		}
; 349  : 
; 350  : 
; 351  : 		if (subMode == SAM_MANUAL_MODE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+504], 12			; 0000000cH
	jne	SHORT $LN10@SAMMode

; 352  : 		{
; 353  : 			// Recalculate az limit
; 354  : 			CalcSAMAzLimit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalcSAMAzLimit@RadarDopplerClass@@IAEXXZ ; RadarDopplerClass::CalcSAMAzLimit

; 355  : 		}
; 356  : 		else

	jmp	$LN6@SAMMode
$LN10@SAMMode:

; 357  : 		{
; 358  : 			oldseekerElCenter = seekerElCenter;//me123

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+64], eax

; 359  : 			tmpVal = TargetAz(platform, lockedTarget);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR _tmpVal$[ebp]

; 360  : 			seekerAzCenter = min ( max (tmpVal ,-MAX_ANT_EL + azScan), MAX_ANT_EL - azScan);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+204]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@SAMMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv463[ebp], xmm0
	jmp	SHORT $LN44@SAMMode
$LN43@SAMMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+204]
	movss	DWORD PTR tv463[ebp], xmm0
$LN44@SAMMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [ecx+204]
	comiss	xmm0, DWORD PTR tv463[ebp]
	jbe	SHORT $LN47@SAMMode
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+204]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN45@SAMMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv475[ebp], xmm0
	jmp	SHORT $LN46@SAMMode
$LN45@SAMMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+204]
	movss	DWORD PTR tv475[ebp], xmm0
$LN46@SAMMode:
	movss	xmm0, DWORD PTR tv475[ebp]
	movss	DWORD PTR tv479[ebp], xmm0
	jmp	SHORT $LN48@SAMMode
$LN47@SAMMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [ecx+204]
	movss	DWORD PTR tv479[ebp], xmm0
$LN48@SAMMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv479[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 361  : 			tmpVal = TargetEl(platform, lockedTarget);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetEl
	add	esp, 8
	fstp	DWORD PTR _tmpVal$[ebp]

; 362  : 			if (!g_bAntElevKnobFix)

	movzx	ecx, BYTE PTR ?g_bAntElevKnobFix@@3_NA	; g_bAntElevKnobFix
	test	ecx, ecx
	jne	$LN8@SAMMode

; 363  : 			{
; 364  : 				if (!oldseekerElCenter) 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN7@SAMMode

; 365  : 					seekerElCenter = min ( max (tmpVal, -MAX_ANT_EL + elScan), MAX_ANT_EL - elScan);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+208]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN49@SAMMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv517[ebp], xmm0
	jmp	SHORT $LN50@SAMMode
$LN49@SAMMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [ecx+208]
	movss	DWORD PTR tv517[ebp], xmm0
$LN50@SAMMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [edx+208]
	comiss	xmm0, DWORD PTR tv517[ebp]
	jbe	SHORT $LN53@SAMMode
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+208]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN51@SAMMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv529[ebp], xmm0
	jmp	SHORT $LN52@SAMMode
$LN51@SAMMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [ecx+208]
	movss	DWORD PTR tv529[ebp], xmm0
$LN52@SAMMode:
	movss	xmm0, DWORD PTR tv529[ebp]
	movss	DWORD PTR tv533[ebp], xmm0
	jmp	SHORT $LN54@SAMMode
$LN53@SAMMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv533[ebp], xmm0
$LN54@SAMMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv533[ebp]
	movss	DWORD PTR [eax+60], xmm0
$LN7@SAMMode:

; 366  : 			}
; 367  : 			else

	jmp	SHORT $LN6@SAMMode
$LN8@SAMMode:

; 368  : 				seekerElCenter = AntElevKnob();  // always center on the knob in SAM

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+60]
$LN6@SAMMode:

; 369  : 		}
; 370  : 
; 371  : 		/*------------------*/
; 372  : 		/* Auto Range Scale */
; 373  : 		/*------------------*/
; 374  : 		//me123 don't autorange in SAM MODE
; 375  : 		//	   if (lockedTargetData->range > 0.9F * tdisplayRange &&
; 376  : 		//		    curRangeIdx < NUM_RANGES - 1)
; 377  : 		//		   rangeChangeCmd = 1;
; 378  : 		//	   else if (lockedTargetData->range < 0.4F * tdisplayRange &&
; 379  : 		//		    curRangeIdx > 0)
; 380  : 		//		   rangeChangeCmd = -1;
; 381  : 		if (!dropTrackCmd) 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+164], 0
	jne	SHORT $LN5@SAMMode

; 382  : 			justdidSTT = FALSE;

	mov	BYTE PTR ?justdidSTT@?1??SAMMode@RadarDopplerClass@@IAEXXZ@4_NA, 0
$LN5@SAMMode:

; 383  : 		if (totHits < HITS_FOR_TRACK|| dropSAM|| (dropTrackCmd && !justdidSTT)  )

	cmp	DWORD PTR _totHits$[ebp], 1
	jl	SHORT $LN3@SAMMode
	cmp	DWORD PTR _dropSAM$[ebp], 0
	jne	SHORT $LN3@SAMMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	$LN1@SAMMode
	movzx	ecx, BYTE PTR ?justdidSTT@?1??SAMMode@RadarDopplerClass@@IAEXXZ@4_NA
	test	ecx, ecx
	jne	$LN1@SAMMode
$LN3@SAMMode:

; 384  : 		{
; 385  : 			if (platform == SimDriver.GetPlayerAircraft() && ((AircraftClass*)platform)->AutopilotType() == AircraftClass::CombatAP)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], eax
	jne	SHORT $LN2@SAMMode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?AutopilotType@AircraftClass@@QAE?AW4AutoPilotType@1@XZ ; AircraftClass::AutopilotType
	cmp	eax, 2
	jne	SHORT $LN2@SAMMode

; 386  : 			{// nothing....this causes lock and brakelocs stream in mp
; 387  : 			}
; 388  : 			else 

	jmp	$LN1@SAMMode
$LN2@SAMMode:

; 389  : 			{
; 390  : 				rangeChangeCmd = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0

; 391  : 				reacqEl = lockedTargetData->el;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+484], edx

; 392  : 				reacqFlag = (int)(ReacqusitionCount / SEC_TO_MSEC * SimLibMajorFrameRate);

	movss	xmm0, DWORD PTR __real@41500000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameRate@@3MA
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], eax

; 393  : 				ClearHistory(lockedTarget);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory

; 394  : 				tmpRange = displayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+212]
	movss	DWORD PTR _tmpRange$[ebp], xmm0

; 395  : 				//MI
; 396  : 				//ChangeMode (RWS);
; 397  : 				ChangeMode (prevMode);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 398  : 				azScan = rwsAzs[rwsAzIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+412]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+332]
	mov	DWORD PTR [eax+204], edx

; 399  : 				displayAzScan = rwsAzs[rwsAzIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+332]
	mov	DWORD PTR [edx+216], ecx

; 400  : 				bars = rwsBars[rwsBarIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+436]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+364]
	mov	DWORD PTR [ecx+188], eax

; 401  : 				displayRange = tmpRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tmpRange$[ebp]
	movss	DWORD PTR [ecx+212], xmm0

; 402  : 				tdisplayRange = displayRange * NM_TO_FT;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+212]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+264], xmm0

; 403  : 				SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 404  : 				ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN1@SAMMode:
$LN35@SAMMode:

; 405  : 			}		   
; 406  : 		}
; 407  :    }
; 408  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SAMMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::SAMMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 8
tv271 = -16						; size = 4
_rdrData$ = -12						; size = 4
_rdrObj$ = -8						; size = 4
_this$ = -4						; size = 4
?RWSMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::RWSMode
; _this$ = ecx

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 	SimObjectType* rdrObj;
; 95   : 	SimObjectLocalData* rdrData;
; 96   : 	
; 97   : 	/*-----------------------*/
; 98   : 	/* Spotlight / Designate */
; 99   : 	/*-----------------------*/
; 100  : 	if (IsSet(Spotlight) && !designateCmd)

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN15@RWSMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 0
	jne	SHORT $LN15@RWSMode

; 101  : 		SetFlagBit (Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 102  : 	else

	jmp	SHORT $LN14@RWSMode
$LN15@RWSMode:

; 103  : 		ClearFlagBit (Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN14@RWSMode:

; 104  : 	
; 105  : 	if (!IsSet(Spotlight) && designateCmd)

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN13@RWSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+168], 0
	je	SHORT $LN13@RWSMode

; 106  : 	{
; 107  : 		lastAzScan = azScan;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	DWORD PTR [edx+292], ecx

; 108  : 		lastBars = bars;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	DWORD PTR [edx+304], ecx

; 109  : 		azScan = 10.0F * DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e32b8c1
	movss	DWORD PTR [edx+204], xmm0

; 110  : 		bars = 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 4

; 111  : 		ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
$LN13@RWSMode:

; 112  : 	}
; 113  : 	if (designateCmd)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+168], 0
	je	SHORT $LN12@RWSMode

; 114  : 		SetFlagBit(Spotlight);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 115  : 	else

	jmp	SHORT $LN11@RWSMode
$LN12@RWSMode:

; 116  : 		ClearFlagBit(Spotlight);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN11@RWSMode:

; 117  : 	
; 118  : 	/*-------------------*/
; 119  : 	/* check all objects */
; 120  : 	/*-------------------*/
; 121  : 	rdrObj = platform->targetList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+660]
	mov	DWORD PTR _rdrObj$[ebp], ecx
$LN10@RWSMode:

; 122  : 	while (rdrObj)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	$LN9@RWSMode

; 123  : 	{
; 124  : 		rdrData = rdrObj->localData;

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _rdrData$[ebp], eax

; 125  : 		
; 126  : 		/*-------------------------------*/
; 127  : 		/* check for object in radar FOV */
; 128  : 		/*-------------------------------*/
; 129  : 		if (rdrData->painted)

	mov	ecx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN6@RWSMode

; 130  : 		{
; 131  : 			/*----------------------*/
; 132  : 			/* detection this frame */
; 133  : 			/*----------------------*/
; 134  : 			if (rdrData->rdrDetect & 0x10)

	mov	edx, DWORD PTR _rdrData$[ebp]
	mov	eax, DWORD PTR [edx+140]
	and	eax, 16					; 00000010H
	je	SHORT $LN7@RWSMode

; 135  : 			{
; 136  : 				AddToHistory(rdrObj, Solid);

	push	2
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 137  : 			}
; 138  : 			/*--------------*/
; 139  : 			/* no detection */
; 140  : 			/*--------------*/
; 141  : 			else

	jmp	SHORT $LN6@RWSMode
$LN7@RWSMode:

; 142  : 				ExtrapolateHistory(rdrObj);

	mov	edx, DWORD PTR _rdrObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtrapolateHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@@Z ; RadarDopplerClass::ExtrapolateHistory
$LN6@RWSMode:

; 143  : 		}
; 144  : 		
; 145  : 		/*-------------*/
; 146  : 		/* Track State */
; 147  : 		/*-------------*/
; 148  : 		// 2002-03-25 MN add a check if the target is in our radar cone - if not, we not even have an UnreliableTrack
; 149  : 		// This fixes the AI oscillating target acquisition and losing
; 150  : 		if ((rdrData->rdrDetect & 0x1f) && (fabs(rdrData->ata) < radarData->ScanHalfAngle))

	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	and	ecx, 31					; 0000001fH
	je	SHORT $LN5@RWSMode
	mov	edx, DWORD PTR _rdrData$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv271[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	movss	xmm0, DWORD PTR [ecx+24]
	comiss	xmm0, DWORD PTR tv271[ebp]
	jbe	SHORT $LN5@RWSMode

; 151  : 			rdrData->sensorState[Radar] = UnreliableTrack;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [eax+edx+192], 2
$LN5@RWSMode:

; 152  : 		
; 153  : 		/*--------------------------------*/
; 154  : 		/* If designating, check for lock */
; 155  : 		/*--------------------------------*/
; 156  : 		if (IsSet(Designating) && (mode == RWS || mode == LRS) && rdrObj->BaseData()->Id() == targetUnderCursor)

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN2@RWSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 2
	je	SHORT $LN3@RWSMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 3
	jne	$LN2@RWSMode
$LN3@RWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@RWSMode

; 157  : 		{
; 158  : 			// Always lock if it is bright green (detected last time around)
; 159  : 			if (rdrData->rdrDetect & 0x10)

	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	and	ecx, 16					; 00000010H
	je	SHORT $LN2@RWSMode

; 160  : 			{
; 161  : 				rdrData->rdrDetect = 0x1f;

	mov	edx, DWORD PTR _rdrData$[ebp]
	mov	DWORD PTR [edx+140], 31			; 0000001fH

; 162  : 				SetSensorTarget(rdrObj);

	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 163  : 				ClearHistory(lockedTarget);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory

; 164  : 				AddToHistory(lockedTarget, Track);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 165  : 				ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 166  : 				ChangeMode (SAM);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChangeMode@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::ChangeMode

; 167  : 				//   seekerAzCenter = rdrData->az;
; 168  : 				//   seekerElCenter = rdrData->el;
; 169  : 				//   beamAz   = 0.0F;
; 170  : 				//   beamEl   = 0.0F;
; 171  : 				SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 172  : 				break;

	jmp	SHORT $LN9@RWSMode
$LN2@RWSMode:

; 173  : 			}
; 174  : 		}
; 175  : 		
; 176  : 		rdrObj = rdrObj->next;

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _rdrObj$[ebp], eax

; 177  : 	}

	jmp	$LN10@RWSMode
$LN9@RWSMode:

; 178  : 	
; 179  : 	/*-----------------------------------*/
; 180  : 	/* No target found, return to search */
; 181  : 	/*-----------------------------------*/
; 182  : 	if (IsSet(Designating))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN1@RWSMode

; 183  : 	{
; 184  : 		azScan = lastAzScan;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+292]
	mov	DWORD PTR [ecx+204], eax

; 185  : 		bars = lastBars;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+304]
	mov	DWORD PTR [ecx+188], eax
$LN1@RWSMode:

; 186  : 	}
; 187  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RWSMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::RWSMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 8
$T3 = -96						; size = 8
tv1209 = -88						; size = 4
tv1201 = -84						; size = 4
$T4 = -80						; size = 4
tv640 = -76						; size = 4
$T5 = -72						; size = 4
tv465 = -68						; size = 4
tv461 = -64						; size = 4
tv449 = -60						; size = 4
tv430 = -56						; size = 4
tv426 = -52						; size = 4
tv414 = -48						; size = 4
tv382 = -44						; size = 4
tv378 = -40						; size = 4
tv366 = -36						; size = 4
_attach$6 = -32						; size = 4
_rdrData$ = -28						; size = 4
_tmpVal$ = -24						; size = 4
_rdrObj$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?TWSMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::TWSMode
; _this$ = ecx

; 696  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TWSMode@RadarDopplerClass@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 697  : 	float  tmpVal;
; 698  : 	SimObjectType* rdrObj;
; 699  : 	SimObjectLocalData* rdrData;
; 700  : 	static bool tgtenteredcursor = FALSE;
; 701  : 	static bool justdidSTT = FALSE;
; 702  : 
; 703  : 	// No TWS if sngl failure
; 704  : 	if (platform == SimDriver.GetPlayerAircraft())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jne	SHORT $LN59@TWSMode

; 705  : 	{
; 706  : 		if (((AircraftClass*)platform)->mFaults->GetFault(FaultClass::fcc_fault) == FaultClass::sngl)

	push	11					; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+928]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN59@TWSMode

; 707  : 		{
; 708  : 			ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 709  : 			// MD -- 20041017: and clear any TWS directory entries.
; 710  : 			if (TWSTrackDirectory)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+532], 0
	je	SHORT $LN58@TWSMode

; 711  : 				TWSTrackDirectory = TWSTrackDirectory->Purge();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+532]
	call	?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Purge
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+532], eax
$LN58@TWSMode:

; 712  : 			return;

	jmp	$LN61@TWSMode
$LN59@TWSMode:

; 713  : 		}
; 714  : 	}
; 715  : 
; 716  : 	// update the TWS Track Directory
; 717  : 	TWSTrackDirectory = UpdateTWSDirectory(platform->targetList, TWSTrackDirectory);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+532]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+660]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTWSDirectory@RadarDopplerClass@@IAEPAVTWSTrackList@1@PAVSimObjectType@@PAV21@@Z ; RadarDopplerClass::UpdateTWSDirectory
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+532], eax

; 718  : 	
; 719  : 	if (IsSet(STTingTarget))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN57@TWSMode

; 720  : 	{
; 721  : 		justdidSTT = TRUE;

	mov	BYTE PTR ?justdidSTT@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA, 1

; 722  : 		STTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?STTMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::STTMode
$LN57@TWSMode:

; 723  : 	}
; 724  : 	
; 725  : 	//me123 addet spotlight to tws
; 726  : 	/*-----------------------*/
; 727  : 	/* Spotlight / Designate */
; 728  : 	/*-----------------------*/
; 729  : 	if (IsSet(Spotlight) && !designateCmd)

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN56@TWSMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+168], 0
	jne	SHORT $LN56@TWSMode

; 730  : 		SetFlagBit (Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 731  : 	else

	jmp	SHORT $LN55@TWSMode
$LN56@TWSMode:

; 732  : 		ClearFlagBit (Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN55@TWSMode:

; 733  : 	
; 734  : 	if (!IsSet(Spotlight) && designateCmd)

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN53@TWSMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	$LN53@TWSMode

; 735  : 	{
; 736  : 		if (!tgtenteredcursor)

	movzx	ecx, BYTE PTR ?tgtenteredcursor@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA
	test	ecx, ecx
	jne	$LN53@TWSMode

; 737  : 		{
; 738  : 			lastTwsAzIdx = curAzIdx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	DWORD PTR [edx+420], ecx

; 739  : 			lastTwsBarIdx = curBarIdx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+444], ecx

; 740  : 			// spotlighting pattern is +/-10 degrees, 4 bars
; 741  : 			curAzIdx = twsAzIdx = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+400], 0

; 742  : 			azScan = twsAzs[curAzIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+400]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+344]
	mov	DWORD PTR [eax+204], edx

; 743  : 			curBarIdx = twsBarIdx = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+440], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+392], 0

; 744  : 			bars = twsBars[curBarIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+392]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+376]
	mov	DWORD PTR [ecx+188], eax

; 745  : 			SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 746  : 			ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 747  : 			ClearFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN53@TWSMode:

; 748  : 		}
; 749  : 	}
; 750  : 	
; 751  : 	if (designateCmd)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+168], 0
	je	SHORT $LN52@TWSMode

; 752  : 		SetFlagBit(Spotlight);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 753  : 	else

	jmp	SHORT $LN51@TWSMode
$LN52@TWSMode:

; 754  : 		ClearFlagBit(Spotlight);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN51@TWSMode:

; 755  : 	
; 756  : 	if (!IsSet(Spotlight) && !IsSet(Designating) && !IsSet(STTingTarget))

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN46@TWSMode
	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN46@TWSMode
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN46@TWSMode

; 757  : 	{
; 758  : 		
; 759  : 		if (targetUnderCursor || (lockedTargetData && !g_bMLU))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??BVU_ID@@QBEKXZ			; VU_ID::operator unsigned long
	test	eax, eax
	jne	SHORT $LN48@TWSMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+176], 0
	je	$LN49@TWSMode
	movzx	eax, BYTE PTR ?g_bMLU@@3_NA		; g_bMLU
	test	eax, eax
	jne	$LN49@TWSMode
$LN48@TWSMode:

; 760  : 		{
; 761  : 			lastTwsAzIdx = curAzIdx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+400]
	mov	DWORD PTR [ecx+420], eax

; 762  : 			lastTwsBarIdx = curBarIdx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+392]
	mov	DWORD PTR [ecx+444], eax

; 763  : 			curAzIdx = twsAzIdx = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+416], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+400], 2

; 764  : 			curBarIdx = twsBarIdx = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+440], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+392], 2

; 765  : 			azScan = twsAzs[curAzIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+400]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+344]
	mov	DWORD PTR [ecx+204], eax

; 766  : 			bars = twsBars[curBarIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+376]
	mov	DWORD PTR [eax+188], edx

; 767  : 			SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 768  : 			tgtenteredcursor = TRUE;

	mov	BYTE PTR ?tgtenteredcursor@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA, 1
	jmp	$LN46@TWSMode
$LN49@TWSMode:

; 769  : 		}
; 770  : 		else if (tgtenteredcursor)

	movzx	eax, BYTE PTR ?tgtenteredcursor@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA
	test	eax, eax
	je	$LN46@TWSMode

; 771  : 		{
; 772  : 			curBarIdx = twsBarIdx = lastTwsBarIdx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+444]
	mov	DWORD PTR [ecx+440], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+440]
	mov	DWORD PTR [ecx+392], eax

; 773  : 			curAzIdx = twsAzIdx = lastTwsAzIdx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+420]
	mov	DWORD PTR [ecx+416], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+416]
	mov	DWORD PTR [ecx+400], eax

; 774  : 			azScan = twsAzs[curAzIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+400]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+344]
	mov	DWORD PTR [eax+204], edx

; 775  : 			bars = twsBars[curBarIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+376]
	mov	DWORD PTR [edx+188], ecx

; 776  : 			SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 777  : 			tgtenteredcursor = FALSE;

	mov	BYTE PTR ?tgtenteredcursor@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA, 0
$LN46@TWSMode:

; 778  : 		}
; 779  : 	}
; 780  : 	if (lasttargetUnderCursor)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	$LN34@TWSMode

; 781  : 	{
; 782  : 		
; 783  : 		int attach = FALSE;

	mov	DWORD PTR _attach$6[ebp], 0

; 784  : 		//check if the attached target is still in the targetlist
; 785  : 		rdrObj = platform->targetList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+660]
	mov	DWORD PTR _rdrObj$[ebp], edx
$LN44@TWSMode:

; 786  : 		while (rdrObj && !attach)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	SHORT $LN43@TWSMode
	cmp	DWORD PTR _attach$6[ebp], 0
	jne	SHORT $LN43@TWSMode

; 787  : 		{
; 788  : 			rdrData = rdrObj->localData;

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _rdrData$[ebp], ecx

; 789  : 
; 790  : 			if (rdrObj == lasttargetUnderCursor)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rdrObj$[ebp]
	cmp	eax, DWORD PTR [edx+44]
	jne	SHORT $LN41@TWSMode

; 791  : 				if (rdrData->TWSTrackFileOpen || lockedTarget)

	mov	ecx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	SHORT $LN40@TWSMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN41@TWSMode
$LN40@TWSMode:

; 792  : 					attach = TRUE;

	mov	DWORD PTR _attach$6[ebp], 1
$LN41@TWSMode:

; 793  : 			rdrObj = rdrObj->next;

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _rdrObj$[ebp], ecx

; 794  : 		}

	jmp	SHORT $LN44@TWSMode
$LN43@TWSMode:

; 795  : 		
; 796  : 		if (attach && SimDriver.GetPlayerAircraft() && SimDriver.GetPlayerAircraft()->FCC 
; 797  : 			&& SimDriver.GetPlayerAircraft()->FCC->cursorXCmd == 0 && SimDriver.GetPlayerAircraft()->FCC->cursorYCmd == 0)

	cmp	DWORD PTR _attach$6[ebp], 0
	je	$LN39@TWSMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	$LN39@TWSMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+936], 0
	je	$LN39@TWSMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+936]
	cmp	DWORD PTR [edx+196], 0
	jne	$LN39@TWSMode
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+936]
	cmp	DWORD PTR [eax+200], 0
	jne	$LN39@TWSMode

; 798  : 			
; 799  : 		{//me123 attach the cursor
; 800  : 			
; 801  : 			TargetToXY(lasttargetUnderCursor->localData, 0, tdisplayRange, &cursorX, &cursorY);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 220				; 000000dcH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+264]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TargetToXY@RadarDopplerClass@@QAEXPAVSimObjectLocalData@@HMPAM1@Z ; RadarDopplerClass::TargetToXY

; 802  : 			tmpVal = TargetAz(platform, lasttargetUnderCursor);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR _tmpVal$[ebp]

; 803  : 			seekerAzCenter = min ( max (tmpVal ,-MAX_ANT_EL + azScan), MAX_ANT_EL - azScan);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+204]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN63@TWSMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv366[ebp], xmm0
	jmp	SHORT $LN64@TWSMode
$LN63@TWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+204]
	movss	DWORD PTR tv366[ebp], xmm0
$LN64@TWSMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [ecx+204]
	comiss	xmm0, DWORD PTR tv366[ebp]
	jbe	SHORT $LN67@TWSMode
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+204]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN65@TWSMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv378[ebp], xmm0
	jmp	SHORT $LN66@TWSMode
$LN65@TWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+204]
	movss	DWORD PTR tv378[ebp], xmm0
$LN66@TWSMode:
	movss	xmm0, DWORD PTR tv378[ebp]
	movss	DWORD PTR tv382[ebp], xmm0
	jmp	SHORT $LN68@TWSMode
$LN67@TWSMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [ecx+204]
	movss	DWORD PTR tv382[ebp], xmm0
$LN68@TWSMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv382[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 804  : 			tmpVal = TargetEl(platform, lasttargetUnderCursor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetEl
	add	esp, 8
	fstp	DWORD PTR _tmpVal$[ebp]

; 805  : 			if (!g_bAntElevKnobFix) {  // MD -- 20031222: EL should only follow target if we're locked on

	movzx	ecx, BYTE PTR ?g_bAntElevKnobFix@@3_NA	; g_bAntElevKnobFix
	test	ecx, ecx
	jne	$LN38@TWSMode

; 806  : 				seekerElCenter = min ( max (tmpVal, -MAX_ANT_EL + elScan), MAX_ANT_EL - elScan);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+208]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN69@TWSMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv414[ebp], xmm0
	jmp	SHORT $LN70@TWSMode
$LN69@TWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+208]
	movss	DWORD PTR tv414[ebp], xmm0
$LN70@TWSMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [ecx+208]
	comiss	xmm0, DWORD PTR tv414[ebp]
	jbe	SHORT $LN73@TWSMode
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+208]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN71@TWSMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv426[ebp], xmm0
	jmp	SHORT $LN72@TWSMode
$LN71@TWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [eax+208]
	movss	DWORD PTR tv426[ebp], xmm0
$LN72@TWSMode:
	movss	xmm0, DWORD PTR tv426[ebp]
	movss	DWORD PTR tv430[ebp], xmm0
	jmp	SHORT $LN74@TWSMode
$LN73@TWSMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [ecx+208]
	movss	DWORD PTR tv430[ebp], xmm0
$LN74@TWSMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv430[ebp]
	movss	DWORD PTR [edx+60], xmm0

; 807  : 			}
; 808  : 			else

	jmp	$LN35@TWSMode
$LN38@TWSMode:

; 809  : 				if (lockedTarget)  

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN36@TWSMode

; 810  : 				{
; 811  : 					seekerElCenter = min ( max (tmpVal, -MAX_ANT_EL + elScan), MAX_ANT_EL - elScan);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [ecx+208]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN75@TWSMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv449[ebp], xmm0
	jmp	SHORT $LN76@TWSMode
$LN75@TWSMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv449[ebp], xmm0
$LN76@TWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [eax+208]
	comiss	xmm0, DWORD PTR tv449[ebp]
	jbe	SHORT $LN79@TWSMode
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [ecx+208]
	movss	xmm1, DWORD PTR _tmpVal$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN77@TWSMode
	movss	xmm0, DWORD PTR _tmpVal$[ebp]
	movss	DWORD PTR tv461[ebp], xmm0
	jmp	SHORT $LN78@TWSMode
$LN77@TWSMode:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	addss	xmm0, DWORD PTR [edx+208]
	movss	DWORD PTR tv461[ebp], xmm0
$LN78@TWSMode:
	movss	xmm0, DWORD PTR tv461[ebp]
	movss	DWORD PTR tv465[ebp], xmm0
	jmp	SHORT $LN80@TWSMode
$LN79@TWSMode:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	subss	xmm0, DWORD PTR [eax+208]
	movss	DWORD PTR tv465[ebp], xmm0
$LN80@TWSMode:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv465[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 812  : 				}
; 813  : 				else

	jmp	SHORT $LN35@TWSMode
$LN36@TWSMode:

; 814  : 					seekerElCenter = AntElevKnob();  // track the knob position

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+252]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+60]
$LN35@TWSMode:

; 815  : 		}
; 816  : 		else 

	jmp	SHORT $LN34@TWSMode
$LN39@TWSMode:

; 817  : 		{
; 818  : 			lasttargetUnderCursor = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 819  : 			attach = FALSE;

	mov	DWORD PTR _attach$6[ebp], 0
$LN34@TWSMode:

; 820  : 		}
; 821  : 	}
; 822  : 	
; 823  : 	
; 824  : 	/*-------------------*/
; 825  : 	/* check all objects */
; 826  : 	/*-------------------*/
; 827  : 	rdrObj = platform->targetList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+660]
	mov	DWORD PTR _rdrObj$[ebp], ecx
$LN33@TWSMode:

; 828  : 	while (rdrObj)

	cmp	DWORD PTR _rdrObj$[ebp], 0
	je	$LN32@TWSMode

; 829  : 	{
; 830  : 		rdrData = rdrObj->localData;

	mov	edx, DWORD PTR _rdrObj$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _rdrData$[ebp], eax

; 831  : 		
; 832  : 		/*-------------------------------*/
; 833  : 		/* check for target under cursor */
; 834  : 		/*-------------------------------*/
; 835  : 		if (rdrObj->BaseData()->Id() == targetUnderCursor)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	$LN25@TWSMode

; 836  : 		{
; 837  : 			if (!lasttargetUnderCursor)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN30@TWSMode

; 838  : 				lasttargetUnderCursor = rdrObj;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	DWORD PTR [edx+44], eax
$LN30@TWSMode:

; 839  : 
; 840  : 			if (IsSet(Designating))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN25@TWSMode

; 841  : 			{
; 842  : 				if (lockedTarget && (lockedTarget->BaseData()->Id() == targetUnderCursor))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN28@TWSMode
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN28@TWSMode

; 843  : 				{
; 844  : 					ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 845  : 					SetSensorTarget(lockedTarget);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	call	edx

; 846  : 					seekerAzCenter = lockedTargetData->az;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+56], eax

; 847  : 					seekerElCenter = lockedTargetData->el;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+60], ecx

; 848  : 					beamAz   = 0.0F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+196], xmm0

; 849  : 					beamEl   = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+200], xmm0

; 850  : 					beamWidth = radarData->BeamHalfAngle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+260], ecx

; 851  : 					lastTwsAzIdx = curAzIdx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	DWORD PTR [edx+420], ecx

; 852  : 					lastTwsBarIdx = curBarIdx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	mov	DWORD PTR [edx+444], ecx

; 853  : 					azScan = 0.0F; 

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+204], xmm0

; 854  : 					bars = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 1

; 855  : 					barWidth = APG68_BAR_WIDTH;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _APG68_BAR_WIDTH
	movss	DWORD PTR [ecx+248], xmm0

; 856  : 					ClearFlagBit(VerticalScan);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 857  : 					SetFlagBit(HorizontalScan);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 858  : 					scanDir  = ScanNone;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+252], xmm0

; 859  : 					SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan

; 860  : 					SetFlagBit (STTingTarget);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 861  : 					patternTime = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], 1

; 862  : 				}
; 863  : 				else

	jmp	$LN25@TWSMode
$LN28@TWSMode:

; 864  : 				// can't bug on a target being extrapolated
; 865  : 				if (rdrData->TWSTrackFileOpen && (rdrData->extrapolateStart == 0))

	mov	ecx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN26@TWSMode
	mov	edx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [edx+144], 0
	jne	SHORT $LN26@TWSMode

; 866  : 				{
; 867  : 					SetSensorTarget(rdrObj);

	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax

; 868  : 					AddToHistory(rdrObj, Bug);  // promote to bug

	push	7
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 869  : 					ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 870  : 				}
; 871  : 				else

	jmp	$LN25@TWSMode
$LN26@TWSMode:

; 872  : 				{
; 873  : 					// force addition to the directory of any search target the pilot is interested in if the 
; 874  : 					// directory already has content otherwise start a new directory.
; 875  : 					if (TWSTrackDirectory)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+532], 0
	je	SHORT $LN24@TWSMode

; 876  : 						TWSTrackDirectory = TWSTrackDirectory->ForceInsert(rdrObj);

	push	0
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+532]
	call	?ForceInsert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ; RadarDopplerClass::TWSTrackList::ForceInsert
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+532], eax

; 877  : 					else

	jmp	SHORT $LN23@TWSMode
$LN24@TWSMode:

; 878  : 						TWSTrackDirectory = new TWSTrackList(rdrObj);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN81@TWSMode
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::TWSTrackList
	mov	DWORD PTR tv640[ebp], eax
	jmp	SHORT $LN82@TWSMode
$LN81@TWSMode:
	mov	DWORD PTR tv640[ebp], 0
$LN82@TWSMode:
	mov	ecx, DWORD PTR tv640[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx+532], eax
$LN23@TWSMode:

; 879  : 					AddToHistory(rdrObj, Track);  // promote to track

	push	3
	mov	ecx, DWORD PTR _rdrObj$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 880  : 					ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN25@TWSMode:

; 881  : 				}
; 882  : 
; 883  : 			}
; 884  : 		}
; 885  : 		
; 886  : 		/*-------------------------------*/
; 887  : 		/* check for object in radar FOV */
; 888  : 		/*-------------------------------*/
; 889  : 		if (rdrData->painted)

	mov	edx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN17@TWSMode

; 890  : 		{
; 891  : 			/*----------------------*/
; 892  : 			/* detection this frame */
; 893  : 			/*----------------------*/
; 894  : 			if (rdrData->rdrDetect & 0x10)

	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	and	ecx, 16					; 00000010H
	je	SHORT $LN17@TWSMode

; 895  : 			{
; 896  : 				if (!rdrData->TWSTrackFileOpen)

	mov	edx, DWORD PTR _rdrData$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN20@TWSMode

; 897  : 				{
; 898  : 					AddToHistory(rdrObj, Solid);

	push	2
	mov	eax, DWORD PTR _rdrObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 899  : 				}
; 900  : 				else

	jmp	SHORT $LN17@TWSMode
$LN20@TWSMode:

; 901  : 				{
; 902  : 					if (rdrObj == lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rdrObj$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN18@TWSMode

; 903  : 					{
; 904  : 						lockedTargetData->sensorState[Radar] = SensorTrack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, 4
	shl	edx, 0
	mov	DWORD PTR [ecx+edx+192], 3

; 905  : 						AddToHistory(lockedTarget, Bug);

	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory

; 906  : 					}
; 907  : 					else

	jmp	SHORT $LN17@TWSMode
$LN18@TWSMode:

; 908  : 					{
; 909  : 						// Update track status for anything on the list that isn't bugged
; 910  : 						AddToHistory(rdrObj, Track);

	push	3
	mov	edx, DWORD PTR _rdrObj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory
$LN17@TWSMode:

; 911  : 					}
; 912  : 				}
; 913  : 			}
; 914  : 		}
; 915  : 		rdrObj = rdrObj->next;

	mov	eax, DWORD PTR _rdrObj$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _rdrObj$[ebp], ecx

; 916  : 	}

	jmp	$LN33@TWSMode
$LN32@TWSMode:

; 917  : 
; 918  : 	if (lockedTarget && lockedTargetData)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN16@TWSMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	je	$LN16@TWSMode

; 919  : 	{	
; 920  : 		/*------------------*/
; 921  : 		/* Auto Range Scale */
; 922  : 		/*------------------*/
; 923  : 		if (lockedTargetData->range > 0.9F * tdisplayRange &&
; 924  : 			curRangeIdx < NUM_RANGES - 1)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR [eax+264]
	movss	xmm1, DWORD PTR [edx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN15@TWSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+388], 4
	jge	SHORT $LN15@TWSMode

; 925  : 			rangeChangeCmd = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 1
$LN15@TWSMode:

; 926  : 		
; 927  : 		if (lockedTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN9@TWSMode

; 928  : 		{
; 929  : 			// Drop lock if the guy is outside our radar cone and remove the track file
; 930  : 			if ((fabs( lockedTarget->localData->az ) > radarData->ScanHalfAngle) ||
; 931  : 				(fabs( lockedTarget->localData->el ) > radarData->ScanHalfAngle) )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1201[ebp]
	movss	xmm0, DWORD PTR tv1201[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	comiss	xmm0, DWORD PTR [edx+24]
	ja	SHORT $LN12@TWSMode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv1209[ebp]
	movss	xmm0, DWORD PTR tv1209[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR [ecx+24]
	jbe	SHORT $LN13@TWSMode
$LN12@TWSMode:

; 932  : 			{
; 933  : 				ClearHistory(lockedTarget);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::ClearHistory

; 934  : 				if (TWSTrackDirectory)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+532], 0
	je	SHORT $LN11@TWSMode

; 935  : 					TWSTrackDirectory = TWSTrackDirectory->Remove(lockedTarget);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+532]
	call	?Remove@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::Remove
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+532], eax
$LN11@TWSMode:

; 936  : 				ClearSensorTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 937  : 			}
; 938  : 			else

	jmp	SHORT $LN9@TWSMode
$LN13@TWSMode:

; 939  : 			// when there is a bugged target, elevation is centered on it not the antenna knob position
; 940  : 				if (!IsSet(STTingTarget))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN9@TWSMode

; 941  : 					seekerElCenter = lockedTarget->localData->el;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+60], edx
$LN9@TWSMode:

; 942  : 		}
; 943  : 		
; 944  : 		if (!dropTrackCmd) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	jne	SHORT $LN8@TWSMode

; 945  : 			justdidSTT = FALSE;

	mov	BYTE PTR ?justdidSTT@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA, 0
$LN8@TWSMode:

; 946  : 
; 947  : 		if (!IsSet(STTingTarget) && ((dropTrackCmd && !justdidSTT) && lockedTargetData->TWSTrackFileOpen))

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN7@TWSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	$LN7@TWSMode
	movzx	edx, BYTE PTR ?justdidSTT@?1??TWSMode@RadarDopplerClass@@IAEXXZ@4_NA
	test	edx, edx
	jne	$LN7@TWSMode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	cmp	DWORD PTR [ecx+56], 0
	je	$LN7@TWSMode

; 948  : 		{
; 949  : 			rangeChangeCmd = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 0

; 950  : 			if (lockedTargetData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+176], 0
	je	SHORT $LN6@TWSMode

; 951  : 				reacqEl = lockedTargetData->el;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+484], ecx
$LN6@TWSMode:

; 952  : 			reacqFlag = (int)(ReacqusitionCount / SEC_TO_MSEC * SimLibMajorFrameRate);

	movss	xmm0, DWORD PTR __real@41500000
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameRate@@3MA
	cvttss2si edx, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], edx

; 953  : 			if (lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN5@TWSMode

; 954  : 				AddToHistory(lockedTarget, Track);  // demote from bug to track

	push	3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToHistory@RadarDopplerClass@@IAEXPAVSimObjectType@@H@Z ; RadarDopplerClass::AddToHistory
$LN5@TWSMode:

; 955  : 			ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 956  : 			SimDriver.GetPlayerAircraft()->FCC->dropTrackCmd = FALSE;  // shouldn't need this but timing is everything

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+185], 0
$LN7@TWSMode:

; 957  : 		}
; 958  : 	}
; 959  : 	else

	jmp	SHORT $LN2@TWSMode
$LN16@TWSMode:

; 960  : 	{
; 961  : 		if (dropTrackCmd && !lockedTarget && TWSTrackDirectory)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+164], 0
	je	SHORT $LN2@TWSMode
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN2@TWSMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+532], 0
	je	SHORT $LN2@TWSMode

; 962  : 		{
; 963  : 			// on udesignate with no bugged target, clear track directory and history and rebuild
; 964  : 			// starting next frame.
; 965  : 			ClearAllHistory();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAllHistory@RadarDopplerClass@@IAEXXZ ; RadarDopplerClass::ClearAllHistory

; 966  : 			if (TWSTrackDirectory)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+532], 0
	je	SHORT $LN2@TWSMode

; 967  : 				TWSTrackDirectory = TWSTrackDirectory->Purge();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	call	?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Purge
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+532], eax
$LN2@TWSMode:

; 968  : 		}
; 969  : 	}
; 970  : 	if (IsSet(Designating) && !IsSet(STTingTarget))

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN1@TWSMode
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN1@TWSMode

; 971  : 	{
; 972  : 		curBarIdx = (twsBarIdx = lastTwsBarIdx);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+444]
	mov	DWORD PTR [edx+440], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	mov	DWORD PTR [edx+392], ecx

; 973  : 		curAzIdx = (twsAzIdx = lastTwsAzIdx);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+420]
	mov	DWORD PTR [edx+416], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	mov	DWORD PTR [edx+400], ecx

; 974  : 		azScan = twsAzs[curAzIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+400]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+344]
	mov	DWORD PTR [ecx+204], eax

; 975  : 		bars = twsBars[curBarIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+392]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+376]
	mov	DWORD PTR [eax+188], edx

; 976  : 		SetScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetScan
$LN1@TWSMode:
$LN61@TWSMode:

; 977  : 	}
; 978  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TWSMode@RadarDopplerClass@@IAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?TWSMode@RadarDopplerClass@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TWSMode@RadarDopplerClass@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?TWSMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::TWSMode
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
_totHits$ = -12						; size = 4
_detect$ = -8						; size = 4
_i$ = -4						; size = 4
_rdrData$ = 8						; size = 4
?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z PROC ; RadarDopplerClass::HitsOnTrack
; _this$ = ecx

; 1547 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1548 : 	int	totHits = 0, i = 0;

	mov	DWORD PTR _totHits$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0

; 1549 : 	unsigned long detect = rdrData->rdrDetect;

	mov	eax, DWORD PTR _rdrData$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _detect$[ebp], ecx

; 1550 : 	
; 1551 : 	if (!rdrData)

	cmp	DWORD PTR _rdrData$[ebp], 0
	jne	SHORT $LN4@HitsOnTrac

; 1552 : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN5@HitsOnTrac
$LN4@HitsOnTrac:

; 1553 : 
; 1554 : 	for (i=0; i<5; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@HitsOnTrac
$LN2@HitsOnTrac:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@HitsOnTrac:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN1@HitsOnTrac

; 1555 : 	{
; 1556 : 		totHits += detect & 0x0001;

	mov	eax, DWORD PTR _detect$[ebp]
	and	eax, 1
	add	eax, DWORD PTR _totHits$[ebp]
	mov	DWORD PTR _totHits$[ebp], eax

; 1557 : 		detect = detect >> 1;

	mov	ecx, DWORD PTR _detect$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _detect$[ebp], ecx

; 1558 : 	}

	jmp	SHORT $LN2@HitsOnTrac
$LN1@HitsOnTrac:

; 1559 : 	
; 1560 : 	return totHits;

	mov	eax, DWORD PTR _totHits$[ebp]
$LN5@HitsOnTrac:

; 1561 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?HitsOnTrack@RadarDopplerClass@@QAEHPAVSimObjectLocalData@@@Z ENDP ; RadarDopplerClass::HitsOnTrack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?ClearFlagBit@RadarDopplerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlagBit@RadarDopplerClass@@QAEXH@Z PROC		; RadarDopplerClass::ClearFlagBit, COMDAT
; _this$ = ecx

; 238  : 	void ClearFlagBit (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+492]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ENDP		; RadarDopplerClass::ClearFlagBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?SetFlagBit@RadarDopplerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlagBit@RadarDopplerClass@@QAEXH@Z PROC		; RadarDopplerClass::SetFlagBit, COMDAT
; _this$ = ecx

; 237  :    void SetFlagBit (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBit@RadarDopplerClass@@QAEXH@Z ENDP		; RadarDopplerClass::SetFlagBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?IsSet@RadarDopplerClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newFlag$ = 8						; size = 4
?IsSet@RadarDopplerClass@@QAEHH@Z PROC			; RadarDopplerClass::IsSet, COMDAT
; _this$ = ecx

; 236  :    int  IsSet (int newFlag) {return (newFlag & flags) ? TRUE : FALSE;}; //MI moved to public

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newFlag$[ebp]
	and	ecx, DWORD PTR [eax+492]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@RadarDopplerClass@@QAEHH@Z ENDP			; RadarDopplerClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theNext$ = 8						; size = 4
?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z PROC ; RadarDopplerClass::TWSTrackList::SetNext, COMDAT
; _this$ = ecx

; 230  : 		void SetNext(TWSTrackList* theNext) { nextTrack = theNext; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _theNext$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z ENDP ; RadarDopplerClass::TWSTrackList::SetNext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ PROC	; RadarDopplerClass::TWSTrackList::Next, COMDAT
; _this$ = ecx

; 228  : 		TWSTrackList* Next(void) { return nextTrack; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ENDP	; RadarDopplerClass::TWSTrackList::Next
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?TrackFile@TWSTrackList@RadarDopplerClass@@QAEPAVSimObjectType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TrackFile@TWSTrackList@RadarDopplerClass@@QAEPAVSimObjectType@@XZ PROC ; RadarDopplerClass::TWSTrackList::TrackFile, COMDAT
; _this$ = ecx

; 227  : 		SimObjectType* TrackFile(void) { return track; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?TrackFile@TWSTrackList@RadarDopplerClass@@QAEPAVSimObjectType@@XZ ENDP ; RadarDopplerClass::TWSTrackList::TrackFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_tmp$ = -4						; size = 4
_depth$ = 8						; size = 4
?Clip@TWSTrackList@RadarDopplerClass@@QAEXH@Z PROC	; RadarDopplerClass::TWSTrackList::Clip
; _this$ = ecx

; 1678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1679 : 	TWSTrackList* tmp = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax
$LN3@Clip:

; 1680 : 
; 1681 : 	while (tmp)

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN4@Clip

; 1682 : 	{
; 1683 : 		depth++;

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$[ebp], ecx

; 1684 : 		if ((depth == MAX_TWS_TRACKS) && tmp->Next())

	cmp	DWORD PTR _depth$[ebp], 10		; 0000000aH
	jne	SHORT $LN1@Clip
	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	test	eax, eax
	je	SHORT $LN1@Clip

; 1685 : 		{
; 1686 : 			tmp->Next()->Purge();

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	mov	ecx, eax
	call	?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Purge

; 1687 : 			tmp->SetNext((TWSTrackList *)NULL); 

	push	0
	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z ; RadarDopplerClass::TWSTrackList::SetNext
$LN1@Clip:

; 1688 : 		}
; 1689 : 		tmp = tmp->Next();

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	mov	DWORD PTR _tmp$[ebp], eax

; 1690 : 	}

	jmp	SHORT $LN3@Clip
$LN4@Clip:

; 1691 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Clip@TWSTrackList@RadarDopplerClass@@QAEXH@Z ENDP	; RadarDopplerClass::TWSTrackList::Clip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ PROC	; RadarDopplerClass::TWSTrackList::Purge
; _this$ = ecx

; 1668 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1669 : 	if (nextTrack)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Purge

; 1670 : 		nextTrack->Purge();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Purge
$LN1@Purge:

; 1671 : 
; 1672 : 	Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@TWSTrackList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::TWSTrackList::Release

; 1673 : 
; 1674 : 	return (TWSTrackList*) NULL;

	xor	eax, eax

; 1675 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ENDP	; RadarDopplerClass::TWSTrackList::Purge
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Release@TWSTrackList@RadarDopplerClass@@QAEXXZ PROC	; RadarDopplerClass::TWSTrackList::Release
; _this$ = ecx

; 1694 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1695 : 	F4Assert(track);
; 1696 : 	track->localData->TWSTrackFileOpen = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+56], 0

; 1697 : 	track->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Release@SimObjectType@@QAEXXZ		; SimObjectType::Release

; 1698 : 	count--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 1699 : 	if (count == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@Release

; 1700 : 		delete this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@Release:

; 1701 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Release@TWSTrackList@RadarDopplerClass@@QAEXXZ ENDP	; RadarDopplerClass::TWSTrackList::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -12						; size = 4
_i$ = -8						; size = 4
_tmp$ = -4						; size = 4
?CountTracks@TWSTrackList@RadarDopplerClass@@QAEHXZ PROC ; RadarDopplerClass::TWSTrackList::CountTracks
; _this$ = ecx

; 1650 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1651 : 	int i = 1;

	mov	DWORD PTR _i$[ebp], 1

; 1652 : 
; 1653 : 	TWSTrackList* tmp = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax
$LN4@CountTrack:

; 1654 : 
; 1655 : 	while (tmp)

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN3@CountTrack

; 1656 : 	{
; 1657 : 		if (tmp->Next()) {

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	test	eax, eax
	je	SHORT $LN2@CountTrack

; 1658 : 			tmp = tmp->Next();

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	mov	DWORD PTR _tmp$[ebp], eax

; 1659 : 			i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 1660 : 		}
; 1661 : 		else

	jmp	SHORT $LN1@CountTrack
$LN2@CountTrack:

; 1662 : 			break;

	jmp	SHORT $LN3@CountTrack
$LN1@CountTrack:

; 1663 : 	}

	jmp	SHORT $LN4@CountTrack
$LN3@CountTrack:

; 1664 : 	return i;

	mov	eax, DWORD PTR _i$[ebp]

; 1665 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CountTracks@TWSTrackList@RadarDopplerClass@@QAEHXZ ENDP ; RadarDopplerClass::TWSTrackList::CountTracks
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_tmp$ = -4						; size = 4
_tgt$ = 8						; size = 4
?OnList@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z PROC ; RadarDopplerClass::TWSTrackList::OnList
; _this$ = ecx

; 1637 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1638 : 	TWSTrackList* tmp = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax
$LN3@OnList:

; 1639 : 
; 1640 : 	while (tmp)

	cmp	DWORD PTR _tmp$[ebp], 0
	je	SHORT $LN2@OnList

; 1641 : 	{
; 1642 : 		if (tmp->TrackFile() == tgt)

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?TrackFile@TWSTrackList@RadarDopplerClass@@QAEPAVSimObjectType@@XZ ; RadarDopplerClass::TWSTrackList::TrackFile
	cmp	eax, DWORD PTR _tgt$[ebp]
	jne	SHORT $LN1@OnList

; 1643 : 			return tmp;

	mov	eax, DWORD PTR _tmp$[ebp]
	jmp	SHORT $LN4@OnList
$LN1@OnList:

; 1644 : 		tmp = tmp->Next();

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	mov	DWORD PTR _tmp$[ebp], eax

; 1645 : 	}

	jmp	SHORT $LN3@OnList
$LN2@OnList:

; 1646 : 	return NULL;

	xor	eax, eax
$LN4@OnList:

; 1647 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?OnList@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z ENDP ; RadarDopplerClass::TWSTrackList::OnList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_tmp$1 = -8						; size = 4
_this$ = -4						; size = 4
_tgt$ = 8						; size = 4
?Remove@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z PROC ; RadarDopplerClass::TWSTrackList::Remove
; _this$ = ecx

; 1624 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1625 : 	if (tgt == track) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tgt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@Remove

; 1626 : 		TWSTrackList* tmp = nextTrack;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _tmp$1[ebp], eax

; 1627 : 		Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@TWSTrackList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::TWSTrackList::Release

; 1628 : 		return tmp;

	mov	eax, DWORD PTR _tmp$1[ebp]
	jmp	SHORT $LN4@Remove
	jmp	SHORT $LN2@Remove
$LN3@Remove:

; 1629 : 	}
; 1630 : 	else if (nextTrack)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@Remove

; 1631 : 		nextTrack = nextTrack->Remove(tgt);

	mov	edx, DWORD PTR _tgt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Remove@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::Remove
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@Remove:

; 1632 : 
; 1633 : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN4@Remove:

; 1634 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@@Z ENDP ; RadarDopplerClass::TWSTrackList::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_last$1 = -16						; size = 4
_i$2 = -12						; size = 4
_this$ = -8						; size = 4
_tmp$3 = -4						; size = 4
_tgt$ = 8						; size = 4
_depth$ = 12						; size = 4
?ForceInsert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z PROC ; RadarDopplerClass::TWSTrackList::ForceInsert
; _this$ = ecx

; 1601 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1602 : 	// This function does the same as an insert but first it checks to see if there's room in
; 1603 : 	// the directory and if not, it will remove the longest ranged track file.
; 1604 : 
; 1605 : 	if (this && ((CountTracks() - depth) >= MAX_TWS_TRACKS))

	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN6@ForceInser
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CountTracks@TWSTrackList@RadarDopplerClass@@QAEHXZ ; RadarDopplerClass::TWSTrackList::CountTracks
	sub	eax, DWORD PTR _depth$[ebp]
	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN6@ForceInser

; 1606 : 	{
; 1607 : 		TWSTrackList* tmp = this, *last = (TWSTrackList *) NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _tmp$3[ebp], eax
	mov	DWORD PTR _last$1[ebp], 0

; 1608 : 		for( int i = 1; ((i < (MAX_TWS_TRACKS - depth)) && tmp); i++)

	mov	DWORD PTR _i$2[ebp], 1
	jmp	SHORT $LN5@ForceInser
$LN4@ForceInser:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN5@ForceInser:
	mov	edx, 10					; 0000000aH
	sub	edx, DWORD PTR _depth$[ebp]
	cmp	DWORD PTR _i$2[ebp], edx
	jge	SHORT $LN3@ForceInser
	cmp	DWORD PTR _tmp$3[ebp], 0
	je	SHORT $LN3@ForceInser

; 1609 : 		{
; 1610 : 			last = tmp;

	mov	eax, DWORD PTR _tmp$3[ebp]
	mov	DWORD PTR _last$1[ebp], eax

; 1611 : 			tmp = tmp->Next();

	mov	ecx, DWORD PTR _tmp$3[ebp]
	call	?Next@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Next
	mov	DWORD PTR _tmp$3[ebp], eax

; 1612 : 		}

	jmp	SHORT $LN4@ForceInser
$LN3@ForceInser:

; 1613 : 		if (tmp)

	cmp	DWORD PTR _tmp$3[ebp], 0
	je	SHORT $LN6@ForceInser

; 1614 : 		{
; 1615 : 			tmp->Purge();

	mov	ecx, DWORD PTR _tmp$3[ebp]
	call	?Purge@TWSTrackList@RadarDopplerClass@@QAEPAV12@XZ ; RadarDopplerClass::TWSTrackList::Purge

; 1616 : 			if (last)

	cmp	DWORD PTR _last$1[ebp], 0
	je	SHORT $LN6@ForceInser

; 1617 : 				last->SetNext((TWSTrackList *) NULL);

	push	0
	mov	ecx, DWORD PTR _last$1[ebp]
	call	?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z ; RadarDopplerClass::TWSTrackList::SetNext
$LN6@ForceInser:

; 1618 : 		}
; 1619 : 	}
; 1620 : 	return Insert(tgt, depth);

	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tgt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ; RadarDopplerClass::TWSTrackList::Insert

; 1621 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ForceInsert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ENDP ; RadarDopplerClass::TWSTrackList::ForceInsert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv129 = -36						; size = 4
$T4 = -32						; size = 4
_tmp$5 = -28						; size = 4
tv81 = -24						; size = 4
$T6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tgt$ = 8						; size = 4
_depth$ = 12						; size = 4
?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z PROC ; RadarDopplerClass::TWSTrackList::Insert
; _this$ = ecx

; 1579 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1580 : 
; 1581 : 	if (!(depth < MAX_TWS_TRACKS))  // keep the list from growing needlessly

	cmp	DWORD PTR _depth$[ebp], 10		; 0000000aH
	jl	SHORT $LN6@Insert

; 1582 : 		return NULL;

	xor	eax, eax
	jmp	$LN7@Insert
$LN6@Insert:

; 1583 : 	
; 1584 : 	if (tgt != track)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tgt$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	$LN1@Insert

; 1585 : 	{
; 1586 : 		if (tgt->localData->range < track->localData->range) {

	mov	edx, DWORD PTR _tgt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN4@Insert

; 1587 : 			TWSTrackList* tmp = new TWSTrackList(tgt);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN9@Insert
	mov	edx, DWORD PTR _tgt$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::TWSTrackList
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN10@Insert
$LN9@Insert:
	mov	DWORD PTR tv81[ebp], 0
$LN10@Insert:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _tmp$5[ebp], ecx

; 1588 : 			tmp->SetNext(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tmp$5[ebp]
	call	?SetNext@TWSTrackList@RadarDopplerClass@@QAEXPAV12@@Z ; RadarDopplerClass::TWSTrackList::SetNext

; 1589 : 			Clip(depth + 1); // make sure the directory is limited to 10 entries when inserting in the middle

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clip@TWSTrackList@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::TWSTrackList::Clip

; 1590 : 			return tmp;

	mov	eax, DWORD PTR _tmp$5[ebp]
	jmp	SHORT $LN7@Insert
	jmp	SHORT $LN1@Insert
$LN4@Insert:

; 1591 : 		}
; 1592 : 		else if (nextTrack == NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN2@Insert

; 1593 : 			nextTrack = new TWSTrackList(tgt);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN11@Insert
	mov	edx, DWORD PTR _tgt$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z ; RadarDopplerClass::TWSTrackList::TWSTrackList
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN12@Insert
$LN11@Insert:
	mov	DWORD PTR tv129[ebp], 0
$LN12@Insert:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1594 : 		else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 1595 : 			nextTrack = nextTrack->Insert(tgt, depth + 1);

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _tgt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ; RadarDopplerClass::TWSTrackList::Insert
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@Insert:

; 1596 : 	}
; 1597 : 	return this;

	mov	eax, DWORD PTR _this$[ebp]
$LN7@Insert:

; 1598 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z$0:
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@TWSTrackList@RadarDopplerClass@@QAEPAV12@PAVSimObjectType@@H@Z ENDP ; RadarDopplerClass::TWSTrackList::Insert
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tgt$ = 8						; size = 4
??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z PROC ; RadarDopplerClass::TWSTrackList::TWSTrackList
; _this$ = ecx

; 1569 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1570 : 	F4Assert(tgt)
; 1571 : 	track = tgt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tgt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1572 : 	count = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 1

; 1573 : 	nextTrack = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1574 : 	track->Reference();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Reference@SimObjectType@@QAEXXZ	; SimObjectType::Reference

; 1575 : 	track->localData->TWSTrackFileOpen = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+56], 1

; 1576 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0TWSTrackList@RadarDopplerClass@@QAE@PAVSimObjectType@@@Z ENDP ; RadarDopplerClass::TWSTrackList::TWSTrackList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\modes.cpp
_TEXT	SEGMENT
tv73 = -12						; size = 4
tv88 = -8						; size = 4
_this$ = -4						; size = 4
_newDesignate$ = 8					; size = 4
_newDrop$ = 12						; size = 4
?ExecModes@RadarDopplerClass@@UAEXHH@Z PROC		; RadarDopplerClass::ExecModes
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	designateCmd = newDesignate && IsSOI();

	cmp	DWORD PTR _newDesignate$[ebp], 0
	je	SHORT $LN15@ExecModes
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	SHORT $LN15@ExecModes
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN16@ExecModes
$LN15@ExecModes:
	mov	DWORD PTR tv73[ebp], 0
$LN16@ExecModes:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR [eax+168], ecx

; 30   : 	if (designateCmd)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+168], 0
	je	SHORT $LN12@ExecModes

; 31   : 		SetFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 32   : 	else

	jmp	SHORT $LN11@ExecModes
$LN12@ExecModes:

; 33   : 		ClearFlagBit(Designating);

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN11@ExecModes:

; 34   : 	dropTrackCmd = newDrop;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newDrop$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 35   : 	
; 36   : 	/*----------------------*/
; 37   : 	/* reacquisition marker */
; 38   : 	/*----------------------*/
; 39   : 	if (reacqFlag) reacqFlag--; 

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+192], 0
	je	SHORT $LN10@ExecModes
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], ecx
$LN10@ExecModes:

; 40   : 	
; 41   : 	/*---------------------*/
; 42   : 	/* service radar modes */
; 43   : 	/*---------------------*/
; 44   : 	
; 45   : 	switch (mode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR tv88[ebp]
	sub	edx, 2
	mov	DWORD PTR tv88[ebp], edx
	cmp	DWORD PTR tv88[ebp], 15			; 0000000fH
	ja	SHORT $LN8@ExecModes
	mov	eax, DWORD PTR tv88[ebp]
	movzx	ecx, BYTE PTR $LN17@ExecModes[eax]
	jmp	DWORD PTR $LN18@ExecModes[ecx*4]
$LN7@ExecModes:

; 46   : 	{
; 47   : 		/*----------------------------*/
; 48   : 		/* Range While Search         */
; 49   : 		/*----------------------------*/
; 50   : 	case RWS:   // Range While Search
; 51   : 	case LRS:
; 52   : 		RWSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RWSMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::RWSMode

; 53   : 		break;

	jmp	SHORT $LN8@ExecModes
$LN6@ExecModes:

; 54   : 		
; 55   : 	case SAM:   // Situational Awareness mode
; 56   : 		SAMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SAMMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SAMMode

; 57   : 		break;

	jmp	SHORT $LN8@ExecModes
$LN5@ExecModes:

; 58   : 		
; 59   : 	case STT:   // Single Target Track
; 60   : 		STTMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?STTMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::STTMode

; 61   : 		break;

	jmp	SHORT $LN8@ExecModes
$LN4@ExecModes:

; 62   : 		
; 63   : 		/*-----------------------*/
; 64   : 		/* Auto Aquisition modes */
; 65   : 		/*-----------------------*/
; 66   : 	case ACM_30x20:   // Normal ACM
; 67   : 	case ACM_SLEW:    // Slewable ACM
; 68   : 	case ACM_BORE:    // Boresight ACM
; 69   : 	case ACM_10x60:   // Vertical Search ACM
; 70   : 		ACMMode ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ACMMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::ACMMode

; 71   : 		break;

	jmp	SHORT $LN8@ExecModes
$LN3@ExecModes:

; 72   : 		
; 73   : 	case VS:
; 74   : 		VSMode ();  // Velocity Search Mode

	mov	ecx, DWORD PTR _this$[ebp]
	call	?VSMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::VSMode

; 75   : 		break;

	jmp	SHORT $LN8@ExecModes
$LN2@ExecModes:

; 76   : 		
; 77   : 	case TWS:
; 78   : 		TWSMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?TWSMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::TWSMode

; 79   : 		break;

	jmp	SHORT $LN8@ExecModes
$LN1@ExecModes:

; 80   : 		
; 81   : 	case GM:
; 82   : 	case GMT:
; 83   : 	case SEA:
; 84   : 		GMMode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GMMode@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::GMMode
$LN8@ExecModes:

; 85   : 		break;
; 86   : 	}
; 87   : 	
; 88   : 	didDesignate = designateCmd;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	DWORD PTR _didDesignate, eax

; 89   : 	
; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN18@ExecModes:
	DD	$LN7@ExecModes
	DD	$LN2@ExecModes
	DD	$LN3@ExecModes
	DD	$LN4@ExecModes
	DD	$LN6@ExecModes
	DD	$LN5@ExecModes
	DD	$LN1@ExecModes
	DD	$LN8@ExecModes
$LN17@ExecModes:
	DB	0
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	4
	DB	7
	DB	7
	DB	5
	DB	6
	DB	7
	DB	6
	DB	6
?ExecModes@RadarDopplerClass@@UAEXHH@Z ENDP		; RadarDopplerClass::ExecModes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?IsEmitting@RadarClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@RadarClass@@QAEHXZ PROC			; RadarClass::IsEmitting, COMDAT
; _this$ = ecx

; 93   : 	int IsEmitting (void)						{ return isEmitting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@RadarClass@@QAEHXZ ENDP			; RadarClass::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?IsSOI@DrawableClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsSOI@DrawableClass@@QAEHXZ PROC			; DrawableClass::IsSOI, COMDAT
; _this$ = ecx

; 141  :       int IsSOI (void) {return (drawFlags & SOI ? TRUE : FALSE);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN3@IsSOI
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSOI
$LN3@IsSOI:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSOI:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSOI@DrawableClass@@QAEHXZ ENDP			; DrawableClass::IsSOI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_ID@@QBEKXZ PROC					; VU_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 162  : 	operator VU_KEY() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 		return (VU_KEY)(((unsigned short)creator_ << 16) | ((unsigned short)num_)); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??BVU_SESSION_ID@@QBEKXZ		; VU_SESSION_ID::operator unsigned long
	movzx	eax, ax
	shl	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	or	eax, edx

; 164  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_ID@@QBEKXZ ENDP					; VU_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??BVU_SESSION_ID@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BVU_SESSION_ID@@QBEKXZ PROC				; VU_SESSION_ID::operator unsigned long, COMDAT
; _this$ = ecx

; 79   : 	operator unsigned long() const { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		return (unsigned long) value_; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 81   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??BVU_SESSION_ID@@QBEKXZ ENDP				; VU_SESSION_ID::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
