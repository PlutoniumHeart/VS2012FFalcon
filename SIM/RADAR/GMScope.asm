; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\RADAR\GMScope.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?cRangeSquaredGMScope@@3MA			; cRangeSquaredGMScope
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
_BSS	SEGMENT
_viewOffsetRel DB 0cH DUP (?)
_viewOffsetInertial DB 0cH DUP (?)
_viewFrom DB	0cH DUP (?)
_headingForDisplay DD 01H DUP (?)
?cRangeSquaredGMScope@@3MA DD 01H DUP (?)		; cRangeSquaredGMScope
_BSS	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
_DATA	SEGMENT
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
_GM_OVERSCAN DD	03e4ccccdr			; 0.2
_DisplayAreaViewTop DD 03f400000r		; 0.75
_DisplayAreaViewBottom DD 0bf2e147br		; -0.68
_DisplayAreaViewLeft DD 0bf4ccccdr		; -0.8
_DisplayAreaViewRight DD 03f3851ecr		; 0.72
_RADAR_CONE_ANGLE DD 03f80adfdr			; 1.00531
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_atanf
PUBLIC	_cosf
PUBLIC	_powf
PUBLIC	_sinf
PUBLIC	_tanf
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?pow@@YAMMM@Z					; pow
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?tan@@YAMM@Z					; tan
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsCampaign@FalconEntity@@QAEHXZ		; FalconEntity::IsCampaign
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ	; VirtualDisplay::ZeroRotationAboutOrigin
PUBLIC	?SetGain@RenderGMRadar@@QAEXM@Z			; RenderGMRadar::SetGain
PUBLIC	?GetGain@RenderGMRadar@@QAEMXZ			; RenderGMRadar::GetGain
PUBLIC	?SetGimbalLimit@RenderGMComposite@@QAEXM@Z	; RenderGMComposite::SetGimbalLimit
PUBLIC	?SetGain@RenderGMComposite@@QAEXM@Z		; RenderGMComposite::SetGain
PUBLIC	?GetGain@RenderGMComposite@@QAEMXZ		; RenderGMComposite::GetGain
PUBLIC	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ	; DrawableObject::GetClass
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z	; DrawableObject::GetPosition
PUBLIC	?IsSOI@DrawableClass@@QAEHXZ			; DrawableClass::IsSOI
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	?IsEmitting@RadarClass@@QAEHXZ			; RadarClass::IsEmitting
PUBLIC	?SetWPArrive@WayPointClass@@QAEXK@Z		; WayPointClass::SetWPArrive
PUBLIC	?SetAGSnowPlow@RadarDopplerClass@@UAEXH@Z	; RadarDopplerClass::SetAGSnowPlow
PUBLIC	?SetAGFreeze@RadarDopplerClass@@QAEXH@Z		; RadarDopplerClass::SetAGFreeze
PUBLIC	?SetAGSteerpoint@RadarDopplerClass@@UAEXH@Z	; RadarDopplerClass::SetAGSteerpoint
PUBLIC	?ToggleAGfreeze@RadarDopplerClass@@UAEXXZ	; RadarDopplerClass::ToggleAGfreeze
PUBLIC	?ToggleAGsnowPlow@RadarDopplerClass@@UAEXXZ	; RadarDopplerClass::ToggleAGsnowPlow
PUBLIC	?ToggleAGcursorZero@RadarDopplerClass@@UAEXXZ	; RadarDopplerClass::ToggleAGcursorZero
PUBLIC	?SetGroundPoint@RadarDopplerClass@@UAEXMMM@Z	; RadarDopplerClass::SetGroundPoint
PUBLIC	?IsAG@RadarDopplerClass@@UAEHXZ			; RadarDopplerClass::IsAG
PUBLIC	?GetAGCenter@RadarDopplerClass@@UAEXPAM0@Z	; RadarDopplerClass::GetAGCenter
PUBLIC	?RestoreAGCursor@RadarDopplerClass@@UAEXXZ	; RadarDopplerClass::RestoreAGCursor
PUBLIC	?AGBottomRow@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::AGBottomRow
PUBLIC	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
PUBLIC	?Release@GMList@RadarDopplerClass@@QAEXXZ	; RadarDopplerClass::GMList::Release
PUBLIC	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
PUBLIC	?IsSet@RadarDopplerClass@@QAEHH@Z		; RadarDopplerClass::IsSet
PUBLIC	?SetFlagBit@RadarDopplerClass@@QAEXH@Z		; RadarDopplerClass::SetFlagBit
PUBLIC	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::ClearFlagBit
PUBLIC	?IsAADcltBit@RadarDopplerClass@@IAEHH@Z		; RadarDopplerClass::IsAADcltBit
PUBLIC	?IsAADclt@RadarDopplerClass@@IAEHH@Z		; RadarDopplerClass::IsAADclt
PUBLIC	?IsAGDclt@RadarDopplerClass@@IAEHH@Z		; RadarDopplerClass::IsAGDclt
PUBLIC	?IsAGDcltBit@RadarDopplerClass@@IAEHH@Z		; RadarDopplerClass::IsAGDcltBit
PUBLIC	?SetGroundTarget@RadarDopplerClass@@IAEXPAVFalconEntity@@@Z ; RadarDopplerClass::SetGroundTarget
PUBLIC	?GMMode@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::GMMode
PUBLIC	?GMDisplay@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::GMDisplay
PUBLIC	?GMSPWaypt@RadarDopplerClass@@QAEPAVWayPointClass@@XZ ; RadarDopplerClass::GMSPWaypt
PUBLIC	?SetGMScan@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::SetGMScan
PUBLIC	?SetAimPoint@RadarDopplerClass@@IAEXMM@Z	; RadarDopplerClass::SetAimPoint
PUBLIC	?AdjustGMOffset@RadarDopplerClass@@IAEXH@Z	; RadarDopplerClass::AdjustGMOffset
PUBLIC	?CheckGMBump@RadarDopplerClass@@IAEHXZ		; RadarDopplerClass::CheckGMBump
PUBLIC	?DropGMTrack@RadarDopplerClass@@IAEXXZ		; RadarDopplerClass::DropGMTrack
PUBLIC	?AddTargetReturnCallback@RadarDopplerClass@@KAXPAXPAVRenderGMRadar@@_N@Z ; RadarDopplerClass::AddTargetReturnCallback
PUBLIC	?AddTargetReturns@RadarDopplerClass@@IAEXPAVRenderGMRadar@@_N@Z ; RadarDopplerClass::AddTargetReturns
PUBLIC	?AddTargetReturnsOldStyle@RadarDopplerClass@@IAEXPAVGMList@1@@Z ; RadarDopplerClass::AddTargetReturnsOldStyle
PUBLIC	?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z ; RadarDopplerClass::DoGMDesignate
PUBLIC	?FreeGMList@RadarDopplerClass@@IAEXPAVGMList@1@@Z ; RadarDopplerClass::FreeGMList
PUBLIC	?GetGMCursorPosition@RadarDopplerClass@@IAEXPAM0@Z ; RadarDopplerClass::GetGMCursorPosition
PUBLIC	?InitialGroundContactTest@RadarDopplerClass@@IAEHAAM000PAVFalconEntity@@AAUmlTrig@@000@Z ; RadarDopplerClass::InitialGroundContactTest
PUBLIC	?GMTObjectContactTest@RadarDopplerClass@@IAEHPAVFalconEntity@@@Z ; RadarDopplerClass::GMTObjectContactTest
PUBLIC	?GMObjectContactTest@RadarDopplerClass@@IAEHPAVFalconEntity@@@Z ; RadarDopplerClass::GMObjectContactTest
PUBLIC	?IsAwake@SimBaseClass@@QBEHXZ			; SimBaseClass::IsAwake
PUBLIC	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ		; VuBin<SimWeaponClass>::operator bool
PUBLIC	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
PUBLIC	?F_ABS@@YAMM@Z					; F_ABS
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_02DALMIMOA@GM?$AA@			; `string'
PUBLIC	??_C@_03HOONMGKE@GMT?$AA@			; `string'
PUBLIC	??_C@_03JIDALBMA@SEA?$AA@			; `string'
PUBLIC	??_C@_04LMMJFDCN@AUTO?$AA@			; `string'
PUBLIC	??_C@_03KIGHCFHP@MAN?$AA@			; `string'
PUBLIC	??_C@_03IPJPMEHL@NRM?$AA@			; `string'
PUBLIC	??_C@_04DHIGGNDH@NORM?$AA@			; `string'
PUBLIC	??_C@_03KKGFKKLA@EXP?$AA@			; `string'
PUBLIC	??_C@_04NBEPBIG@DBS1?$AA@			; `string'
PUBLIC	??_C@_04CGDJKCEF@DBS2?$AA@			; `string'
PUBLIC	??_C@_04PGDFOHNL@OVRD?$AA@			; `string'
PUBLIC	??_C@_04GKDMIDBA@CNTL?$AA@			; `string'
PUBLIC	??_C@_04CAJPJFIH@BARO?$AA@			; `string'
PUBLIC	??_C@_02DEPNGCEB@FZ?$AA@			; `string'
PUBLIC	??_C@_02NEPPOLFA@SP?$AA@			; `string'
PUBLIC	??_C@_03NGANFLJH@STP?$AA@			; `string'
PUBLIC	??_C@_02DCDGKAKK@CZ?$AA@			; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_09JFBOEAOE@?$CF03d?3?$CF02d?$AA@		; `string'
PUBLIC	??_C@_0N@JIJJHBFE@?5?5?5?$CF02d?3?$CF02d?$AA@	; `string'
PUBLIC	??_C@_0N@FDANDMFD@?5?5?9?$CF02d?3?$CF02d?$AA@	; `string'
PUBLIC	??_C@_0L@JMLBFLDA@?9?$CF02d?3?$CF02d?$AA@	; `string'
PUBLIC	??_C@_05CJNIOAFN@XX?3XX?$AA@			; `string'
PUBLIC	??_C@_04LKFIONEM@DCLT?$AA@			; `string'
PUBLIC	??_C@_05DHIGAFHJ@QUIET?$AA@			; `string'
PUBLIC	??_C@_03KDFFCEML@RDY?$AA@			; `string'
PUBLIC	??_C@_06MNODKNNC@SILENT?$AA@			; `string'
PUBLIC	??_C@_03OONHJAKL@SMS?$AA@			; `string'
PUBLIC	??_C@_04IILMDFMO@MENU?$AA@			; `string'
PUBLIC	??_C@_04NLFHDAEB@SWAP?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3cf5c28f
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d851eb8
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db2b8c1
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e051eb8
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e860a91
PUBLIC	__real@3ecccccd
PUBLIC	__real@3eceb852
PUBLIC	__real@3f000000
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f2e147b
PUBLIC	__real@3f400000
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f670a3d
PUBLIC	__real@3f733333
PUBLIC	__real@3f79999a
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3fa00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40490fd9
PUBLIC	__real@406dec5b
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40b9fb76
PUBLIC	__real@40c90fd9
PUBLIC	__real@40d00000
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@41a0cccd
PUBLIC	__real@41c00000
PUBLIC	__real@42200000
PUBLIC	__real@42480000
PUBLIC	__real@42652ee1
PUBLIC	__real@42700000
PUBLIC	__real@447a0000
PUBLIC	__real@44bb8000
PUBLIC	__real@45610000
PUBLIC	__real@45bde1b0
PUBLIC	__real@461c4000
PUBLIC	__real@469c4000
PUBLIC	__real@47a8c000
PUBLIC	__real@4b9fa682
PUBLIC	__real@57c72084
PUBLIC	__real@8000000000000000
PUBLIC	__real@bc23d70a
PUBLIC	__real@bd4ccccd
PUBLIC	__real@bdcccccd
PUBLIC	__real@be800000
PUBLIC	__real@bf000000
PUBLIC	__real@bf2147ae
PUBLIC	__real@bf400000
PUBLIC	__real@bf733333
PUBLIC	__real@bf79999a
PUBLIC	__real@bf800000
PUBLIC	__real@bf860a91
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0490fd9
PUBLIC	__real@c0a00000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_abs:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_pow:PROC
EXTRN	_sin:PROC
EXTRN	_tan:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?F4IsBadReadPtr@@YA_NPBXI@Z:PROC		; F4IsBadReadPtr
EXTRN	?VuReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuReferenceEntity
EXTRN	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z:PROC	; VuDeReferenceEntity
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z:PROC ; VirtualDisplay::AdjustRotationAboutOrigin
EXTRN	?GetViewport@VirtualDisplay@@QAEXPAM000@Z:PROC	; VirtualDisplay::GetViewport
EXTRN	?DrawBlip@RenderGMRadar@@QAEXMM@Z:PROC		; RenderGMRadar::DrawBlip
EXTRN	?DrawBlip@RenderGMRadar@@QAEXPAVDrawableObject@@M_N@Z:PROC ; RenderGMRadar::DrawBlip
EXTRN	?SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z:PROC ; RenderGMComposite::SetBeam
EXTRN	?DrawComposite@RenderGMComposite@@QAEXPAUTpoint@@M@Z:PROC ; RenderGMComposite::DrawComposite
EXTRN	?SetRange@RenderGMComposite@@QAEXMH@Z:PROC	; RenderGMComposite::SetRange
EXTRN	?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z:PROC ; CalcRelGeom
EXTRN	?LabelButton@DrawableClass@@QAEXHPAD0H@Z:PROC	; DrawableClass::LabelButton
EXTRN	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z:PROC	; DrawableClass::GetButtonPos
EXTRN	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z:PROC ; DrawableClass::GetMfdColor
EXTRN	?DefaultLabel@MfdDrawable@@QAEXH@Z:PROC		; MfdDrawable::DefaultLabel
EXTRN	?SimCompare@@YAHPAVVuEntity@@0@Z:PROC		; SimCompare
EXTRN	??0WayPointClass@@QAE@XZ:PROC			; WayPointClass::WayPointClass
EXTRN	?SetLocation@WayPointClass@@QAEXMMM@Z:PROC	; WayPointClass::SetLocation
EXTRN	?GetLocation@WayPointClass@@QBEXPAM00@Z:PROC	; WayPointClass::GetLocation
EXTRN	?DrawRangeArrows@RadarDopplerClass@@IAEXXZ:PROC	; RadarDopplerClass::DrawRangeArrows
EXTRN	?DrawRange@RadarDopplerClass@@IAEXXZ:PROC	; RadarDopplerClass::DrawRange
EXTRN	?MENUDisplay@RadarDopplerClass@@IAEXXZ:PROC	; RadarDopplerClass::MENUDisplay
EXTRN	?DrawSymbol@RadarDopplerClass@@IAEXHMHH@Z:PROC	; RadarDopplerClass::DrawSymbol
EXTRN	?DrawScanMarkers@RadarDopplerClass@@IAEXXZ:PROC	; RadarDopplerClass::DrawScanMarkers
EXTRN	?DrawAzElTicks@RadarDopplerClass@@IAEXXZ:PROC	; RadarDopplerClass::DrawAzElTicks
EXTRN	?SetGMSPWaypt@RadarDopplerClass@@QAEXPAVWayPointClass@@@Z:PROC ; RadarDopplerClass::SetGMSPWaypt
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z:PROC ; OTWDriverClass::CheckLOS
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z:PROC ; FireControlComputer::SetStptMode
EXTRN	?SetGroundSpotPos@SmsDrawable@@QAEXMMM@Z:PROC	; SmsDrawable::SetGroundSpotPos
EXTRN	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z:PROC ; FackClass::GetFault
EXTRN	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z:PROC ; SIMLIB_IO_CLASS::GetAxisValue
EXTRN	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z:PROC ; FindLaserPod
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	?CursorRate@RadarClass@@1MB:DWORD		; RadarClass::CursorRate
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	?g_fCursorSpeed@@3MA:DWORD			; g_fCursorSpeed
EXTRN	?g_bAGRadarFixes@@3_NA:BYTE			; g_bAGRadarFixes
EXTRN	?g_fGMTMaxSpeed@@3MA:DWORD			; g_fGMTMaxSpeed
EXTRN	?g_fGMTMinSpeed@@3MA:DWORD			; g_fGMTMinSpeed
EXTRN	?g_fEXPfactor@@3MA:DWORD			; g_fEXPfactor
EXTRN	?g_fDBS1factor@@3MA:DWORD			; g_fDBS1factor
EXTRN	?g_fDBS2factor@@3MA:DWORD			; g_fDBS2factor
EXTRN	?g_bnoRadStutter@@3_NA:BYTE			; g_bnoRadStutter
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_GM_OVERSCAN_RNG DD 01H DUP (?)
_GM_OVERSCAN_H DD 01H DUP (?)
_GM_OVERSCAN_V DD 01H DUP (?)
_GMat	DB	0cH DUP (?)
_viewCenter DB	0cH DUP (?)
_SIN_RADAR_CONE_ANGLE DD 01H DUP (?)
_COS_RADAR_CONE_ANGLE DD 01H DUP (?)
_TAN_RADAR_CONE_ANGLE DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?test@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA
_BSS	SEGMENT
?test@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA DD 01H DUP (?) ; `RadarDopplerClass::SetAimPoint'::`24'::test
_BSS	ENDS
;	COMDAT ?testa@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA
_BSS	SEGMENT
?testa@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA DD 01H DUP (?) ; `RadarDopplerClass::SetAimPoint'::`24'::testa
_BSS	ENDS
;	COMDAT ?TwoRootTwo@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4MB
_BSS	SEGMENT
?TwoRootTwo@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4MB DD 01H DUP (?) ; `RadarDopplerClass::SetGMScan'::`2'::TwoRootTwo
_BSS	ENDS
;	COMDAT ?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA
_BSS	SEGMENT
?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA DD 01H DUP (?) ; `RadarDopplerClass::SetGMScan'::`2'::$S1
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0490fd9
CONST	SEGMENT
__real@c0490fd9 DD 0c0490fd9r			; -3.14159
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf860a91
CONST	SEGMENT
__real@bf860a91 DD 0bf860a91r			; -1.0472
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf79999a
CONST	SEGMENT
__real@bf79999a DD 0bf79999ar			; -0.975
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf2147ae
CONST	SEGMENT
__real@bf2147ae DD 0bf2147aer			; -0.63
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@bd4ccccd
CONST	SEGMENT
__real@bd4ccccd DD 0bd4ccccdr			; -0.05
CONST	ENDS
;	COMDAT __real@bc23d70a
CONST	SEGMENT
__real@bc23d70a DD 0bc23d70ar			; -0.01
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@57c72084
CONST	SEGMENT
__real@57c72084 DD 057c72084r			; 4.37885e+014
CONST	ENDS
;	COMDAT __real@4b9fa682
CONST	SEGMENT
__real@4b9fa682 DD 04b9fa682r			; 2.09257e+007
CONST	ENDS
;	COMDAT __real@47a8c000
CONST	SEGMENT
__real@47a8c000 DD 047a8c000r			; 86400
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@45610000
CONST	SEGMENT
__real@45610000 DD 045610000r			; 3600
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41a0cccd
CONST	SEGMENT
__real@41a0cccd DD 041a0cccdr			; 20.1
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40d00000
CONST	SEGMENT
__real@40d00000 DD 040d00000r			; 6.5
CONST	ENDS
;	COMDAT __real@40c90fd9
CONST	SEGMENT
__real@40c90fd9 DD 040c90fd9r			; 6.28318
CONST	ENDS
;	COMDAT __real@40b9fb76
CONST	SEGMENT
__real@40b9fb76 DD 040b9fb76r			; 5.81195
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406dec5b
CONST	SEGMENT
__real@406dec5b DD 0406dec5br			; 3.71755
CONST	ENDS
;	COMDAT __real@40490fd9
CONST	SEGMENT
__real@40490fd9 DD 040490fd9r			; 3.14159
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f79999a
CONST	SEGMENT
__real@3f79999a DD 03f79999ar			; 0.975
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f670a3d
CONST	SEGMENT
__real@3f670a3d DD 03f670a3dr			; 0.9025
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f2e147b
CONST	SEGMENT
__real@3f2e147b DD 03f2e147br			; 0.68
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eceb852
CONST	SEGMENT
__real@3eceb852 DD 03eceb852r			; 0.40375
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e860a91
CONST	SEGMENT
__real@3e860a91 DD 03e860a91r			; 0.261799
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e051eb8
CONST	SEGMENT
__real@3e051eb8 DD 03e051eb8r			; 0.13
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db2b8c1
CONST	SEGMENT
__real@3db2b8c1 DD 03db2b8c1r			; 0.0872665
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d851eb8
CONST	SEGMENT
__real@3d851eb8 DD 03d851eb8r			; 0.065
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3cf5c28f
CONST	SEGMENT
__real@3cf5c28f DD 03cf5c28fr			; 0.03
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLFHDAEB@SWAP?$AA@
CONST	SEGMENT
??_C@_04NLFHDAEB@SWAP?$AA@ DB 'SWAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IILMDFMO@MENU?$AA@
CONST	SEGMENT
??_C@_04IILMDFMO@MENU?$AA@ DB 'MENU', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OONHJAKL@SMS?$AA@
CONST	SEGMENT
??_C@_03OONHJAKL@SMS?$AA@ DB 'SMS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNODKNNC@SILENT?$AA@
CONST	SEGMENT
??_C@_06MNODKNNC@SILENT?$AA@ DB 'SILENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KDFFCEML@RDY?$AA@
CONST	SEGMENT
??_C@_03KDFFCEML@RDY?$AA@ DB 'RDY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHIGAFHJ@QUIET?$AA@
CONST	SEGMENT
??_C@_05DHIGAFHJ@QUIET?$AA@ DB 'QUIET', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LKFIONEM@DCLT?$AA@
CONST	SEGMENT
??_C@_04LKFIONEM@DCLT?$AA@ DB 'DCLT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CJNIOAFN@XX?3XX?$AA@
CONST	SEGMENT
??_C@_05CJNIOAFN@XX?3XX?$AA@ DB 'XX:XX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMLBFLDA@?9?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0L@JMLBFLDA@?9?$CF02d?3?$CF02d?$AA@ DB '-%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDANDMFD@?5?5?9?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@FDANDMFD@?5?5?9?$CF02d?3?$CF02d?$AA@ DB '  -%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JIJJHBFE@?5?5?5?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@JIJJHBFE@?5?5?5?$CF02d?3?$CF02d?$AA@ DB '   %02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFBOEAOE@?$CF03d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_09JFBOEAOE@?$CF03d?3?$CF02d?$AA@ DB '%03d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCDGKAKK@CZ?$AA@
CONST	SEGMENT
??_C@_02DCDGKAKK@CZ?$AA@ DB 'CZ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGANFLJH@STP?$AA@
CONST	SEGMENT
??_C@_03NGANFLJH@STP?$AA@ DB 'STP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NEPPOLFA@SP?$AA@
CONST	SEGMENT
??_C@_02NEPPOLFA@SP?$AA@ DB 'SP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DEPNGCEB@FZ?$AA@
CONST	SEGMENT
??_C@_02DEPNGCEB@FZ?$AA@ DB 'FZ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CAJPJFIH@BARO?$AA@
CONST	SEGMENT
??_C@_04CAJPJFIH@BARO?$AA@ DB 'BARO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKDMIDBA@CNTL?$AA@
CONST	SEGMENT
??_C@_04GKDMIDBA@CNTL?$AA@ DB 'CNTL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PGDFOHNL@OVRD?$AA@
CONST	SEGMENT
??_C@_04PGDFOHNL@OVRD?$AA@ DB 'OVRD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGDJKCEF@DBS2?$AA@
CONST	SEGMENT
??_C@_04CGDJKCEF@DBS2?$AA@ DB 'DBS2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBEPBIG@DBS1?$AA@
CONST	SEGMENT
??_C@_04NBEPBIG@DBS1?$AA@ DB 'DBS1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KKGFKKLA@EXP?$AA@
CONST	SEGMENT
??_C@_03KKGFKKLA@EXP?$AA@ DB 'EXP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHIGGNDH@NORM?$AA@
CONST	SEGMENT
??_C@_04DHIGGNDH@NORM?$AA@ DB 'NORM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IPJPMEHL@NRM?$AA@
CONST	SEGMENT
??_C@_03IPJPMEHL@NRM?$AA@ DB 'NRM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIGHCFHP@MAN?$AA@
CONST	SEGMENT
??_C@_03KIGHCFHP@MAN?$AA@ DB 'MAN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LMMJFDCN@AUTO?$AA@
CONST	SEGMENT
??_C@_04LMMJFDCN@AUTO?$AA@ DB 'AUTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JIDALBMA@SEA?$AA@
CONST	SEGMENT
??_C@_03JIDALBMA@SEA?$AA@ DB 'SEA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HOONMGKE@GMT?$AA@
CONST	SEGMENT
??_C@_03HOONMGKE@GMT?$AA@ DB 'GMT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DALMIMOA@GM?$AA@
CONST	SEGMENT
??_C@_02DALMIMOA@GM?$AA@ DB 'GM', 00H			; `string'
CONST	ENDS
;	COMDAT ?MAX_GAIN@?MA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MA
_DATA	SEGMENT
?MAX_GAIN@?MA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MA DD 041c80000r ; 25 ; `RadarDopplerClass::GMDisplay'::`192'::MAX_GAIN
_DATA	ENDS
;	COMDAT ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
CONST	SEGMENT
?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB DD 03d851eb8r ; 0.065 ; `RadarDopplerClass::GMDisplay'::`176'::size
CONST	ENDS
;	COMDAT ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
CONST	SEGMENT
?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB DD 03d851eb8r ; 0.065 ; `RadarDopplerClass::GMDisplay'[::L]::size
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z$0
__unwindtable$?SetGMScan@RadarDopplerClass@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetGMScan@RadarDopplerClass@@IAEXXZ$0
__ehfuncinfo$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetGMScan@RadarDopplerClass@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetGMScan@RadarDopplerClass@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GMMode@RadarDopplerClass@@IAEXXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?GMMode@RadarDopplerClass@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GMMode@RadarDopplerClass@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$4
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$5
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$6
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$7
	DD	01H
	DD	FLAT:__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GM_OVERSCAN_RNG$initializer$ DD FLAT:??__EGM_OVERSCAN_RNG@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GM_OVERSCAN_H$initializer$ DD FLAT:??__EGM_OVERSCAN_H@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_GM_OVERSCAN_V$initializer$ DD FLAT:??__EGM_OVERSCAN_V@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_SIN_RADAR_CONE_ANGLE$initializer$ DD FLAT:??__ESIN_RADAR_CONE_ANGLE@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_COS_RADAR_CONE_ANGLE$initializer$ DD FLAT:??__ECOS_RADAR_CONE_ANGLE@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_TAN_RADAR_CONE_ANGLE$initializer$ DD FLAT:??__ETAN_RADAR_CONE_ANGLE@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
;	COMDAT ??__ETAN_RADAR_CONE_ANGLE@@YAXXZ
text$yc	SEGMENT
??__ETAN_RADAR_CONE_ANGLE@@YAXXZ PROC			; `dynamic initializer for 'TAN_RADAR_CONE_ANGLE'', COMDAT

; 65   : static const float TAN_RADAR_CONE_ANGLE  = (float)tan(RADAR_CONE_ANGLE);

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _RADAR_CONE_ANGLE
	movss	DWORD PTR [esp], xmm0
	call	?tan@@YAMM@Z				; tan
	add	esp, 4
	fstp	DWORD PTR _TAN_RADAR_CONE_ANGLE
	pop	ebp
	ret	0
??__ETAN_RADAR_CONE_ANGLE@@YAXXZ ENDP			; `dynamic initializer for 'TAN_RADAR_CONE_ANGLE''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
;	COMDAT ??__ECOS_RADAR_CONE_ANGLE@@YAXXZ
text$yc	SEGMENT
??__ECOS_RADAR_CONE_ANGLE@@YAXXZ PROC			; `dynamic initializer for 'COS_RADAR_CONE_ANGLE'', COMDAT

; 64   : static const float COS_RADAR_CONE_ANGLE  = (float)cos(RADAR_CONE_ANGLE);

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _RADAR_CONE_ANGLE
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _COS_RADAR_CONE_ANGLE
	pop	ebp
	ret	0
??__ECOS_RADAR_CONE_ANGLE@@YAXXZ ENDP			; `dynamic initializer for 'COS_RADAR_CONE_ANGLE''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
;	COMDAT ??__ESIN_RADAR_CONE_ANGLE@@YAXXZ
text$yc	SEGMENT
??__ESIN_RADAR_CONE_ANGLE@@YAXXZ PROC			; `dynamic initializer for 'SIN_RADAR_CONE_ANGLE'', COMDAT

; 63   : static const float SIN_RADAR_CONE_ANGLE  = (float)sin(RADAR_CONE_ANGLE);

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _RADAR_CONE_ANGLE
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _SIN_RADAR_CONE_ANGLE
	pop	ebp
	ret	0
??__ESIN_RADAR_CONE_ANGLE@@YAXXZ ENDP			; `dynamic initializer for 'SIN_RADAR_CONE_ANGLE''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\fastmath.h
;	COMDAT ?F_ABS@@YAMM@Z
_TEXT	SEGMENT
_r$ = -4						; size = 4
_x$ = 8							; size = 4
?F_ABS@@YAMM@Z PROC					; F_ABS, COMDAT

; 19   : {	

	push	ebp
	mov	ebp, esp
	push	ecx

; 20   : 	float r;
; 21   : 
; 22   : 	_asm{ 
; 23   : 			fld		x

	fld	DWORD PTR _x$[ebp]

; 24   : 			fabs	

	fabs

; 25   : 			fstp	r

	fstp	DWORD PTR _r$[ebp]

; 26   : 	}
; 27   : 	return r;

	fld	DWORD PTR _r$[ebp]

; 28   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?F_ABS@@YAMM@Z ENDP					; F_ABS
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fcc.h
;	COMDAT ?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ PROC ; FireControlComputer::GetSubMode, COMDAT
; _this$ = ecx

; 281  : 	FCCSubMode GetSubMode (void) {return (subMode);};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ENDP ; FireControlComputer::GetSubMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ PROC		; VuBin<SimWeaponClass>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ ENDP		; VuBin<SimWeaponClass>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsAwake@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 177  : 	int IsAwake() const { return localFlags & OBJ_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv128 = -4						; size = 4
_contact$ = 8						; size = 4
?GMObjectContactTest@RadarDopplerClass@@IAEHPAVFalconEntity@@@Z PROC ; RadarDopplerClass::GMObjectContactTest
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	// objects can move
; 192  : 	if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN1@GMObjectCo
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN1@GMObjectCo

; 193  : 	{
; 194  : 		// maybe at some point, we might want to have a Vt threshold other than 0
; 195  : 		// if so, we'll have to 
; 196  : 		if(contact->GetVt() > g_fGMTMinSpeed) 

	mov	edx, DWORD PTR _contact$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _contact$[ebp]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv128[ebp]
	movss	xmm0, DWORD PTR tv128[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	jbe	SHORT $LN3@GMObjectCo

; 197  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN5@GMObjectCo
$LN3@GMObjectCo:

; 198  : 
; 199  : 		if(contact->IsSim())

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN1@GMObjectCo

; 200  : 		{
; 201  : 			
; 202  : 			//if(contact->GetVt() > 1.0F) 
; 203  : 			//	return 0.0f;
; 204  : 			if(	((SimBaseClass*)contact)->drawPointer && 
; 205  : 				((SimBaseClass*)contact)->drawPointer->GetClass() == DrawableObject::Guys)

	mov	eax, DWORD PTR _contact$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN1@GMObjectCo
	mov	ecx, DWORD PTR _contact$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN1@GMObjectCo

; 206  : 			{
; 207  : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN5@GMObjectCo
$LN1@GMObjectCo:

; 208  : 			}
; 209  : 		}
; 210  : 		/*
; 211  : 		else // is camp object
; 212  : 		{
; 213  : 			// 2002-04-03 MN contact is a CAMPAIGN object now !!! We can't do SimBaseClass stuff here. 
; 214  : 			// Speed test however is valid, as it checks U_MOVING flag of unit
; 215  : 			// As there are no campaign units that consist only of soldiers, no need to check for them here
; 216  : 			if(contact->GetVt() > 1.0F )
; 217  : 				return 0.0f;
; 218  : 		}
; 219  : 		*/
; 220  : 	}
; 221  : 	return 1;

	mov	eax, 1
$LN5@GMObjectCo:

; 222  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GMObjectContactTest@RadarDopplerClass@@IAEHPAVFalconEntity@@@Z ENDP ; RadarDopplerClass::GMObjectContactTest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv163 = -12						; size = 4
tv153 = -8						; size = 4
tv147 = -4						; size = 4
_contact$ = 8						; size = 4
?GMTObjectContactTest@RadarDopplerClass@@IAEHPAVFalconEntity@@@Z PROC ; RadarDopplerClass::GMTObjectContactTest
; _this$ = ecx

; 148  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 	// Begine GMT test
; 150  : 	if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN7@GMTObjectC
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	$LN7@GMTObjectC

; 151  : 	{
; 152  : 		if(contact->IsSim())

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN6@GMTObjectC

; 153  : 		{
; 154  : 			// never show pedestrians
; 155  : 			if ( ((SimBaseClass *)contact)->drawPointer && 
; 156  : 				 ((SimBaseClass *)contact)->drawPointer->GetClass() == DrawableObject::Guys 
; 157  : 			   )

	mov	edx, DWORD PTR _contact$[ebp]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN5@GMTObjectC
	mov	eax, DWORD PTR _contact$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN5@GMTObjectC

; 158  : 			{
; 159  : 				return 0;

	xor	eax, eax
	jmp	$LN8@GMTObjectC
$LN5@GMTObjectC:

; 160  : 			}
; 161  : 
; 162  : 			// speed filter
; 163  : 			if(	contact->GetVt() > g_fGMTMinSpeed && 
; 164  : 				contact->GetVt() < g_fGMTMaxSpeed)

	mov	ecx, DWORD PTR _contact$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _contact$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv147[ebp]
	movss	xmm0, DWORD PTR tv147[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	jbe	SHORT $LN4@GMTObjectC
	mov	ecx, DWORD PTR _contact$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _contact$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv153[ebp]
	movss	xmm0, DWORD PTR ?g_fGMTMaxSpeed@@3MA
	comiss	xmm0, DWORD PTR tv153[ebp]
	jbe	SHORT $LN4@GMTObjectC

; 165  : 			{
; 166  : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN8@GMTObjectC
$LN4@GMTObjectC:

; 167  : 			}
; 168  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN8@GMTObjectC

; 169  : 		}
; 170  : 		else

	jmp	SHORT $LN3@GMTObjectC
$LN6@GMTObjectC:

; 171  : 		{
; 172  : 			//if(contact->GetVt() > 1.0f)
; 173  : 			//	return 1;
; 174  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN8@GMTObjectC
$LN3@GMTObjectC:

; 175  : 		}
; 176  : 	}
; 177  : 	else

	jmp	SHORT $LN1@GMTObjectC
$LN7@GMTObjectC:

; 178  : 	{
; 179  : 		if(contact->GetVt())

	mov	ecx, DWORD PTR _contact$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _contact$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@GMTObjectC

; 180  : 			return 1;

	mov	eax, 1
	jmp	SHORT $LN8@GMTObjectC
$LN1@GMTObjectC:

; 181  : 	}
; 182  : 	return 0;

	xor	eax, eax
$LN8@GMTObjectC:

; 183  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GMTObjectContactTest@RadarDopplerClass@@IAEHPAVFalconEntity@@@Z ENDP ; RadarDopplerClass::GMTObjectContactTest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
tv323 = -72						; size = 4
tv318 = -68						; size = 4
tv360 = -64						; size = 4
tv362 = -60						; size = 4
tv267 = -56						; size = 4
tv262 = -52						; size = 4
tv356 = -48						; size = 4
tv358 = -44						; size = 4
tv257 = -40						; size = 4
tv252 = -36						; size = 4
tv354 = -32						; size = 4
tv247 = -28						; size = 4
tv242 = -24						; size = 4
_dx$ = -20						; size = 4
_y$ = -16						; size = 4
_x$ = -12						; size = 4
_dy$ = -8						; size = 4
_this$ = -4						; size = 4
_ownX$ = 8						; size = 4
_ownY$ = 12						; size = 4
_ownZ$ = 16						; size = 4
_radarHorizonSq$ = 20					; size = 4
_contact$ = 24						; size = 4
_trig$ = 28						; size = 4
_range$ = 32						; size = 4
_radius$ = 36						; size = 4
_canSee$ = 40						; size = 4
?InitialGroundContactTest@RadarDopplerClass@@IAEHAAM000PAVFalconEntity@@AAUmlTrig@@000@Z PROC ; RadarDopplerClass::InitialGroundContactTest
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 	//Tpoint pos;
; 83   : 	float x,y,dx,dy;
; 84   : 
; 85   : 	range = (contact->XPos()-ownX)*(contact->XPos()-ownX) +
; 86   : 			(contact->YPos()-ownY)*(contact->YPos()-ownY) +
; 87   : 			(contact->ZPos()-ownZ)*(contact->ZPos()-ownZ);

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv242[ebp]
	movss	xmm0, DWORD PTR tv242[ebp]
	mov	eax, DWORD PTR _ownX$[ebp]
	subss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _contact$[ebp]
	movss	DWORD PTR tv354[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv247[ebp]
	movss	xmm0, DWORD PTR tv247[ebp]
	mov	ecx, DWORD PTR _ownX$[ebp]
	subss	xmm0, DWORD PTR [ecx]
	movss	xmm1, DWORD PTR tv354[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _contact$[ebp]
	movss	DWORD PTR tv356[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv252[ebp]
	movss	xmm0, DWORD PTR tv252[ebp]
	mov	edx, DWORD PTR _ownY$[ebp]
	subss	xmm0, DWORD PTR [edx]
	mov	ecx, DWORD PTR _contact$[ebp]
	movss	DWORD PTR tv358[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv257[ebp]
	movss	xmm0, DWORD PTR tv257[ebp]
	mov	eax, DWORD PTR _ownY$[ebp]
	subss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv358[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv356[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _contact$[ebp]
	movss	DWORD PTR tv360[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv262[ebp]
	movss	xmm0, DWORD PTR tv262[ebp]
	mov	ecx, DWORD PTR _ownZ$[ebp]
	subss	xmm0, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _contact$[ebp]
	movss	DWORD PTR tv362[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv267[ebp]
	movss	xmm0, DWORD PTR tv267[ebp]
	mov	edx, DWORD PTR _ownZ$[ebp]
	subss	xmm0, DWORD PTR [edx]
	movss	xmm1, DWORD PTR tv362[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv360[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _range$[ebp]
	movss	DWORD PTR [eax], xmm0

; 88   : 	
; 89   : 	if (range < radarHorizonSq)

	mov	ecx, DWORD PTR _radarHorizonSq$[ebp]
	mov	edx, DWORD PTR _range$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [edx]
	jbe	$LN2@InitialGro

; 90   : 	{				
; 91   : 		range = sqrt(range);

	mov	eax, DWORD PTR _range$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	ecx, DWORD PTR _range$[ebp]
	fstp	DWORD PTR [ecx]

; 92   : 		if(contact->IsSim())

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN11@InitialGro

; 93   : 		{
; 94   : 			if(((SimBaseClass*)contact)->IsAwake())

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN10@InitialGro

; 95   : 			{
; 96   : 				radius = ((SimBaseClass*)contact)->drawPointer->Radius();

	mov	edx, DWORD PTR _contact$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	mov	eax, DWORD PTR _radius$[ebp]
	fstp	DWORD PTR [eax]

; 97   : 				radius = radius*radius*radius*radius;

	mov	ecx, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _radius$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [edx], xmm0

; 98   : 				canSee = radius/range * tdisplayRange/groundMapRange;

	mov	eax, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _range$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+264]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+476]
	mov	ecx, DWORD PTR _canSee$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 99   : 				// MLR why???
; 100  : 				//((SimBaseClass*)contact)->drawPointer->GetPosition(&pos);
; 101  : 				//contact->SetPosition(pos.x, pos.y, pos.z);		
; 102  : 			} 
; 103  : 			else

	jmp	SHORT $LN9@InitialGro
$LN10@InitialGro:

; 104  : 			{
; 105  : 				canSee = 0.0F;

	mov	edx, DWORD PTR _canSee$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0
$LN9@InitialGro:

; 106  : 			}
; 107  : 		}
; 108  : 		else

	jmp	SHORT $LN8@InitialGro
$LN11@InitialGro:

; 109  : 		{
; 110  : 			radius = DEFAULT_OBJECT_RADIUS;

	mov	eax, DWORD PTR _radius$[ebp]
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [eax], xmm0

; 111  : 			radius = radius*radius*radius*radius;

	mov	ecx, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _radius$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _radius$[ebp]
	movss	DWORD PTR [edx], xmm0

; 112  : 			canSee = radius/range * tdisplayRange/groundMapRange;

	mov	eax, DWORD PTR _radius$[ebp]
	mov	ecx, DWORD PTR _range$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+264]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+476]
	mov	ecx, DWORD PTR _canSee$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN8@InitialGro:

; 113  : 		}
; 114  : 		
; 115  : 		// Check LOS
; 116  : 		if (canSee > 0.8F)

	mov	edx, DWORD PTR _canSee$[ebp]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	$LN2@InitialGro

; 117  : 		{
; 118  : 			x = contact->XPos() - ownX;

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv318[ebp]
	movss	xmm0, DWORD PTR tv318[ebp]
	mov	eax, DWORD PTR _ownX$[ebp]
	subss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _x$[ebp], xmm0

; 119  : 			y = contact->YPos() - ownY;

	mov	ecx, DWORD PTR _contact$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv323[ebp]
	movss	xmm0, DWORD PTR tv323[ebp]
	mov	ecx, DWORD PTR _ownY$[ebp]
	subss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _y$[ebp], xmm0

; 120  : 			
; 121  : 			// Rotate for normalization
; 122  : 			dx = trig.cos*x - trig.sin*y;

	mov	edx, DWORD PTR _trig$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _trig$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 123  : 			dy = trig.sin*x + trig.cos*y;

	mov	ecx, DWORD PTR _trig$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _trig$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dy$[ebp], xmm0

; 124  : 			
; 125  : 			// Check Angle off nose
; 126  : 			if ( (dy > 0.0F && dx > 0.5F *  dy) || // Right side of nose
; 127  : 				 (dy < 0.0F && dx > 0.5F * -dy)   // Left side of nose
; 128  : 				)

	movss	xmm0, DWORD PTR _dy$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@InitialGro
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN5@InitialGro
$LN4@InitialGro:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN6@InitialGro
	movss	xmm0, DWORD PTR _dy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN6@InitialGro
$LN5@InitialGro:

; 129  : 			{
; 130  : 				// Actual LOS
; 131  : 				if (!OTWDriver.CheckLOS( platform, contact))

	mov	eax, DWORD PTR _contact$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z ; OTWDriverClass::CheckLOS
	test	eax, eax
	jne	SHORT $LN3@InitialGro

; 132  : 				{
; 133  : 					canSee = 0.0F;  // LOS is blocked

	mov	eax, DWORD PTR _canSee$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
$LN3@InitialGro:

; 134  : 				}
; 135  : 			}
; 136  : 			else

	jmp	SHORT $LN2@InitialGro
$LN6@InitialGro:

; 137  : 			{
; 138  : 				canSee = 0.0F;   // Outside of cone

	mov	ecx, DWORD PTR _canSee$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0
$LN2@InitialGro:

; 139  : 			}
; 140  : 		}
; 141  : 	}
; 142  : 	if(canSee > .8f)

	mov	edx, DWORD PTR _canSee$[ebp]
	movss	xmm0, DWORD PTR [edx]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	SHORT $LN1@InitialGro

; 143  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN13@InitialGro
$LN1@InitialGro:

; 144  : 	return 0;

	xor	eax, eax
$LN13@InitialGro:

; 145  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?InitialGroundContactTest@RadarDopplerClass@@IAEHAAM000PAVFalconEntity@@AAUmlTrig@@000@Z ENDP ; RadarDopplerClass::InitialGroundContactTest
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_trig$ = -28						; size = 8
_sinAz$ = -20						; size = 4
_xpos$ = -16						; size = 4
_cosAz$ = -12						; size = 4
_ypos$ = -8						; size = 4
_this$ = -4						; size = 4
_xLoc$ = 8						; size = 4
_yLoc$ = 12						; size = 4
?GetGMCursorPosition@RadarDopplerClass@@IAEXPAM0@Z PROC	; RadarDopplerClass::GetGMCursorPosition
; _this$ = ecx

; 2412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 2413 : 	float xpos, ypos, cosAz, sinAz;
; 2414 : 	mlTrig trig;
; 2415 : 
; 2416 : 	mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2417 : 	cosAz = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 2418 : 	sinAz = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 2419 : 
; 2420 : 	xpos = cursorX * 0.5F * tdisplayRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+264]
	movss	DWORD PTR _xpos$[ebp], xmm0

; 2421 : 	ypos = (cursorY + 1.0F) * 0.5F * tdisplayRange;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+264]
	movss	DWORD PTR _ypos$[ebp], xmm0

; 2422 : 
; 2423 : 	*yLoc = ypos*sinAz + xpos*cosAz;

	movss	xmm0, DWORD PTR _ypos$[ebp]
	mulss	xmm0, DWORD PTR _sinAz$[ebp]
	movss	xmm1, DWORD PTR _xpos$[ebp]
	mulss	xmm1, DWORD PTR _cosAz$[ebp]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _yLoc$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2424 : 	*xLoc = ypos*cosAz - xpos*sinAz;

	movss	xmm0, DWORD PTR _ypos$[ebp]
	mulss	xmm0, DWORD PTR _cosAz$[ebp]
	movss	xmm1, DWORD PTR _xpos$[ebp]
	mulss	xmm1, DWORD PTR _sinAz$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _xLoc$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2425 : 
; 2426 : 	
; 2427 : 	*xLoc += viewFrom.x;

	mov	ecx, DWORD PTR _xLoc$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _viewFrom
	mov	edx, DWORD PTR _xLoc$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2428 : 	*yLoc += viewFrom.y;

	mov	eax, DWORD PTR _yLoc$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _viewFrom+4
	mov	ecx, DWORD PTR _yLoc$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2429 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetGMCursorPosition@RadarDopplerClass@@IAEXPAM0@Z ENDP	; RadarDopplerClass::GetGMCursorPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_tmp$ = -4						; size = 4
_theList$ = 8						; size = 4
?FreeGMList@RadarDopplerClass@@IAEXPAVGMList@1@@Z PROC	; RadarDopplerClass::FreeGMList
; _this$ = ecx

; 2197 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
$LN2@FreeGMList:

; 2198 : GMList* tmp;
; 2199 : 
; 2200 :    while (theList)

	cmp	DWORD PTR _theList$[ebp], 0
	je	SHORT $LN3@FreeGMList

; 2201 :    {
; 2202 :       tmp = theList;

	mov	eax, DWORD PTR _theList$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax

; 2203 :       theList = theList->next;

	mov	ecx, DWORD PTR _theList$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _theList$[ebp], edx

; 2204 :       tmp->Release();

	mov	ecx, DWORD PTR _tmp$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 2205 :    }

	jmp	SHORT $LN2@FreeGMList
$LN3@FreeGMList:

; 2206 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?FreeGMList@RadarDopplerClass@@IAEXPAVGMList@1@@Z ENDP	; RadarDopplerClass::FreeGMList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
$T2 = -140						; size = 8
_trig$ = -132						; size = 8
tv484 = -124						; size = 4
tv477 = -120						; size = 4
tv464 = -116						; size = 4
tv456 = -112						; size = 4
tv449 = -108						; size = 4
tv430 = -104						; size = 4
tv423 = -100						; size = 4
tv412 = -96						; size = 4
tv406 = -92						; size = 4
tv394 = -88						; size = 4
tv386 = -84						; size = 4
$T3 = -80						; size = 4
tv267 = -76						; size = 4
tv263 = -72						; size = 4
tv251 = -68						; size = 4
_dy$ = -64						; size = 4
_cosAz$ = -60						; size = 4
_dx$ = -56						; size = 4
_sinAz$ = -52						; size = 4
_z$4 = -48						; size = 4
tv82 = -44						; size = 4
$T5 = -40						; size = 4
_x$6 = -36						; size = 4
_y$7 = -32						; size = 4
_minDist$ = -28						; size = 4
_ry$ = -24						; size = 4
_rx$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_curNode$ = 8						; size = 4
?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z PROC ; RadarDopplerClass::DoGMDesignate
; _this$ = ecx

; 2097 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2098 : 	float dx, dy;
; 2099 : 	float rx, ry;
; 2100 : 	float cosAz, sinAz;
; 2101 : 	mlTrig trig;
; 2102 : 	float minDist = 0.05F;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _minDist$[ebp], xmm0

; 2103 : 	
; 2104 : 	// MD -- 20040215: adding a step in designation to the snow plow mode;  When you are in
; 2105 : 	// SP and you first designate, that ground stabilizes the radar aim point and keys the
; 2106 : 	// navigation systems to look at the pseudo waypoint defined by the cursor position as
; 2107 : 	// the current steerpoint to use.
; 2108 : 	if (IsSet(SP) && (!IsSet(SP_STAB)))  // SP mode but not yet ground stabilized

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN14@DoGMDesign
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN14@DoGMDesign

; 2109 : 	{
; 2110 : 		float x = 0.0F, y = 0.0F, z = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$6[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$7[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _z$4[ebp], xmm0

; 2111 : 		if (!GMSPPseudoWaypt)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+536], 0
	jne	SHORT $LN13@DoGMDesign

; 2112 : 		{
; 2113 : 			GMSPPseudoWaypt = new WayPointClass();

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN17@DoGMDesign
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN18@DoGMDesign
$LN17@DoGMDesign:
	mov	DWORD PTR tv82[ebp], 0
$LN18@DoGMDesign:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+536], eax
$LN13@DoGMDesign:

; 2114 : 		}
; 2115 : 		// calculate x/y/z's
; 2116 : 		GetGMCursorPosition (&x, &y);

	lea	ecx, DWORD PTR _y$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGMCursorPosition@RadarDopplerClass@@IAEXPAM0@Z ; RadarDopplerClass::GetGMCursorPosition

; 2117 : 
; 2118 : 		z = OTWDriver.GetGroundLevel(x, y);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _y$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _z$4[ebp]

; 2119 : 
; 2120 : 		GMSPPseudoWaypt->SetLocation(x, y, z);

	push	ecx
	movss	xmm0, DWORD PTR _z$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$7[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$6[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	call	?SetLocation@WayPointClass@@QAEXMMM@Z	; WayPointClass::SetLocation

; 2121 : 		GMSPPseudoWaypt->SetWPArrive(SimLibElapsedTime);

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+536]
	call	?SetWPArrive@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPArrive

; 2122 : 
; 2123 : 		if (SimDriver.GetPlayerAircraft())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN12@DoGMDesign

; 2124 : 		{
; 2125 : 			SimDriver.GetPlayerAircraft()->FCC->SetStptMode(FireControlComputer::FCCGMPseudoPoint);

	push	3
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode

; 2126 : 			SimDriver.GetPlayerAircraft()->FCC->waypointStepCmd = 127;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+936]
	mov	BYTE PTR [eax+194], 127			; 0000007fH

; 2127 : 			// shouldn't need this here but make sure that first designate command doesn't also lock a target
; 2128 : 			SimDriver.GetPlayerAircraft()->FCC->designateCmd = FALSE;  // shouldn't need this here but make

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+936]
	mov	BYTE PTR [ecx+184], 0
$LN12@DoGMDesign:

; 2129 : 		}
; 2130 : 		SetFlagBit(SP_STAB);  // we are now in SP mode with a ground stabilized cursor aim point

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 2131 : 		return;

	jmp	$LN15@DoGMDesign

; 2132 : 	}
; 2133 : 	else

	jmp	$LN6@DoGMDesign
$LN14@DoGMDesign:

; 2134 : 	{
; 2135 : 		mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2136 : 		cosAz =  trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 2137 : 		sinAz = -trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 2138 : 		
; 2139 : 		// Offset the spots correctly
; 2140 : 		if (!(flags & FZ))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 32					; 00000020H
	jne	$LN8@DoGMDesign

; 2141 : 		{
; 2142 : 			if (flags & NORM)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	je	SHORT $LN9@DoGMDesign

; 2143 : 			{
; 2144 : 				// Find center of scope
; 2145 : 				GMXCenter = platform->XPos() + tdisplayRange * trig.cos * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv386[ebp]
	movss	xmm0, DWORD PTR tv386[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+524], xmm0

; 2146 : 				GMYCenter = platform->YPos() + tdisplayRange * trig.sin * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+528], xmm0

; 2147 : 			}
; 2148 : 			else

	jmp	SHORT $LN8@DoGMDesign
$LN9@DoGMDesign:

; 2149 : 			{
; 2150 : 				GMXCenter = GMat.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR [ecx+524], xmm0

; 2151 : 				GMYCenter = GMat.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR [edx+528], xmm0
$LN8@DoGMDesign:

; 2152 : 			}
; 2153 : 		}
; 2154 : 		
; 2155 : 		// Draw the spots
; 2156 : 		while (curNode)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN6@DoGMDesign

; 2157 : 		{
; 2158 : 			dx = curNode->Object()->XPos() - GMXCenter;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv406[ebp]
	movss	xmm0, DWORD PTR tv406[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+524]
	movss	DWORD PTR _dx$[ebp], xmm0

; 2159 : 			dy = curNode->Object()->YPos() - GMYCenter;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv412[ebp]
	movss	xmm0, DWORD PTR tv412[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+528]
	movss	DWORD PTR _dy$[ebp], xmm0

; 2160 : 			
; 2161 : 			// Note the axis switch from NED to screen
; 2162 : 			ry = cosAz * dx - sinAz * dy;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 2163 : 			rx = sinAz * dx + cosAz * dy;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 2164 : 			
; 2165 : 			if (F_ABS(rx) > groundMapRange ||
; 2166 : 				F_ABS(ry) > groundMapRange)

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv423[ebp]
	movss	xmm0, DWORD PTR tv423[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+476]
	ja	SHORT $LN4@DoGMDesign
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv430[ebp]
	movss	xmm0, DWORD PTR tv430[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+476]
	jbe	SHORT $LN5@DoGMDesign
$LN4@DoGMDesign:

; 2167 : 			{
; 2168 : 				curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 2169 : 				continue;

	jmp	$LN8@DoGMDesign
$LN5@DoGMDesign:

; 2170 : 			}
; 2171 : 			rx /= groundMapRange;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR [eax+476]
	movss	DWORD PTR _rx$[ebp], xmm0

; 2172 : 			ry /= groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _ry$[ebp], xmm0

; 2173 : 			
; 2174 : 			if (flags & NORM)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	je	SHORT $LN3@DoGMDesign

; 2175 : 			{
; 2176 : 				ry -= cursorY;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	subss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR _ry$[ebp], xmm0

; 2177 : 				rx -= cursorX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	subss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR _rx$[ebp], xmm0
$LN3@DoGMDesign:

; 2178 : 			}
; 2179 : 			
; 2180 : 			if (F_ABS(rx) < minDist && F_ABS (ry) < minDist)

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv449[ebp]
	movss	xmm0, DWORD PTR _minDist$[ebp]
	comiss	xmm0, DWORD PTR tv449[ebp]
	jbe	$LN2@DoGMDesign
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv456[ebp]
	movss	xmm0, DWORD PTR _minDist$[ebp]
	comiss	xmm0, DWORD PTR tv456[ebp]
	jbe	$LN2@DoGMDesign

; 2181 : 			{
; 2182 : 				minDist = min ( min (minDist, (float)F_ABS(rx)), (float)F_ABS(ry));

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv464[ebp]
	movss	xmm0, DWORD PTR tv464[ebp]
	comiss	xmm0, DWORD PTR _minDist$[ebp]
	jbe	SHORT $LN19@DoGMDesign
	movss	xmm0, DWORD PTR _minDist$[ebp]
	movss	DWORD PTR tv251[ebp], xmm0
	jmp	SHORT $LN20@DoGMDesign
$LN19@DoGMDesign:
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv251[ebp]
$LN20@DoGMDesign:
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv477[ebp]
	movss	xmm0, DWORD PTR tv477[ebp]
	comiss	xmm0, DWORD PTR tv251[ebp]
	jbe	SHORT $LN23@DoGMDesign
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv484[ebp]
	movss	xmm0, DWORD PTR tv484[ebp]
	comiss	xmm0, DWORD PTR _minDist$[ebp]
	jbe	SHORT $LN21@DoGMDesign
	movss	xmm0, DWORD PTR _minDist$[ebp]
	movss	DWORD PTR tv263[ebp], xmm0
	jmp	SHORT $LN22@DoGMDesign
$LN21@DoGMDesign:
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv263[ebp]
$LN22@DoGMDesign:
	movss	xmm0, DWORD PTR tv263[ebp]
	movss	DWORD PTR tv267[ebp], xmm0
	jmp	SHORT $LN24@DoGMDesign
$LN23@DoGMDesign:
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv267[ebp]
$LN24@DoGMDesign:
	movss	xmm0, DWORD PTR tv267[ebp]
	movss	DWORD PTR _minDist$[ebp], xmm0

; 2183 : 				if (designateCmd)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	SHORT $LN1@DoGMDesign

; 2184 : 				{
; 2185 : 					SetGroundTarget(curNode->Object());

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGroundTarget@RadarDopplerClass@@IAEXPAVFalconEntity@@@Z ; RadarDopplerClass::SetGroundTarget
$LN1@DoGMDesign:

; 2186 : 				}
; 2187 : 				
; 2188 : 				targetUnderCursor = curNode->Object()->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR [ecx+40], eax
$LN2@DoGMDesign:

; 2189 : 			}
; 2190 : 			
; 2191 : 			curNode = curNode->next;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _curNode$[ebp], eax

; 2192 : 		}

	jmp	$LN8@DoGMDesign
$LN6@DoGMDesign:
$LN15@DoGMDesign:

; 2193 : 	}
; 2194 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z ENDP ; RadarDopplerClass::DoGMDesignate
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
$T1 = -132						; size = 8
tv409 = -124						; size = 4
tv397 = -120						; size = 4
tv435 = -116						; size = 4
tv555 = -112						; size = 4
tv452 = -108						; size = 4
tv548 = -104						; size = 4
tv389 = -100						; size = 4
tv535 = -96						; size = 4
tv459 = -92						; size = 4
tv527 = -88						; size = 4
tv441 = -84						; size = 4
tv520 = -80						; size = 4
tv427 = -76						; size = 4
tv479 = -72						; size = 4
tv414 = -68						; size = 4
tv581 = -64						; size = 4
tv473 = -60						; size = 4
tv420 = -56						; size = 4
tv326 = -52						; size = 4
tv330 = -48						; size = 4
tv314 = -44						; size = 4
_trig$ = -40						; size = 8
_cosAz$ = -32						; size = 4
_sinAz$ = -28						; size = 4
_dx$ = -24						; size = 4
_dy$ = -20						; size = 4
_minDist$ = -16						; size = 4
_ry$ = -12						; size = 4
_rx$ = -8						; size = 4
_this$ = -4						; size = 4
_curNode$ = 8						; size = 4
?AddTargetReturnsOldStyle@RadarDopplerClass@@IAEXPAVGMList@1@@Z PROC ; RadarDopplerClass::AddTargetReturnsOldStyle
; _this$ = ecx

; 1995 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1996 : float dx=0.0F, dy=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0

; 1997 : float rx=0.0F, ry=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ry$[ebp], xmm0

; 1998 : float cosAz=0.0F, sinAz=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cosAz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 1999 : mlTrig trig={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _trig$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _trig$[ebp+4], eax

; 2000 : float minDist = groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _minDist$[ebp], xmm0

; 2001 : 
; 2002 :    mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2003 :    cosAz =  trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 2004 :    sinAz = -trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 2005 : 
; 2006 :    // Offset the spots correctly
; 2007 :    if (!(flags & FZ))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 32					; 00000020H
	jne	$LN16@AddTargetR

; 2008 :    {
; 2009 :       if (flags & NORM)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	je	SHORT $LN17@AddTargetR

; 2010 :       {
; 2011 :          // Find center of scope
; 2012 :          GMXCenter = platform->XPos() + tdisplayRange * trig.cos * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv389[ebp]
	movss	xmm0, DWORD PTR tv389[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+524], xmm0

; 2013 :          GMYCenter = platform->YPos() + tdisplayRange * trig.sin * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv397[ebp]
	movss	xmm0, DWORD PTR tv397[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+528], xmm0

; 2014 :       }
; 2015 :       else

	jmp	SHORT $LN16@AddTargetR
$LN17@AddTargetR:

; 2016 :       {
; 2017 :          GMXCenter = GMat.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR [ecx+524], xmm0

; 2018 :          GMYCenter = GMat.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR [edx+528], xmm0
$LN16@AddTargetR:

; 2019 :       }
; 2020 :    }
; 2021 : 
; 2022 :    // Draw the spots
; 2023 :    while (curNode)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN14@AddTargetR

; 2024 :    {
; 2025 :       // Check distance from radar patch center
; 2026 :       dx = curNode->Object()->XPos() - GMat.x;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv409[ebp]
	movss	xmm0, DWORD PTR tv409[ebp]
	subss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR _dx$[ebp], xmm0

; 2027 :       dy = curNode->Object()->YPos() - GMat.y;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv414[ebp]
	movss	xmm0, DWORD PTR tv414[ebp]
	subss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR _dy$[ebp], xmm0

; 2028 :       if (fabs(dx) > groundMapRange ||
; 2029 :           fabs(dy) > groundMapRange)

	push	ecx
	movss	xmm0, DWORD PTR _dx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv420[ebp]
	movss	xmm0, DWORD PTR tv420[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+476]
	ja	SHORT $LN12@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _dy$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv427[ebp]
	movss	xmm0, DWORD PTR tv427[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+476]
	jbe	SHORT $LN13@AddTargetR
$LN12@AddTargetR:

; 2030 :       {
; 2031 :          curNode = curNode->next;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _curNode$[ebp], eax

; 2032 :          continue;

	jmp	$LN16@AddTargetR
$LN13@AddTargetR:

; 2033 :       }
; 2034 : 
; 2035 :       // Now check position on screen
; 2036 :       dx = curNode->Object()->XPos() - GMXCenter;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv435[ebp]
	movss	xmm0, DWORD PTR tv435[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+524]
	movss	DWORD PTR _dx$[ebp], xmm0

; 2037 :       dy = curNode->Object()->YPos() - GMYCenter;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv441[ebp]
	movss	xmm0, DWORD PTR tv441[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+528]
	movss	DWORD PTR _dy$[ebp], xmm0

; 2038 : 
; 2039 :       // Note the axis switch from NED to screen
; 2040 :       ry = cosAz * dx - sinAz * dy;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 2041 :       rx = sinAz * dx + cosAz * dy;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 2042 : 
; 2043 :       if (F_ABS(rx) > groundMapRange ||
; 2044 :           F_ABS(ry) > groundMapRange)

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv452[ebp]
	movss	xmm0, DWORD PTR tv452[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+476]
	ja	SHORT $LN10@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv459[ebp]
	movss	xmm0, DWORD PTR tv459[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+476]
	jbe	SHORT $LN11@AddTargetR
$LN10@AddTargetR:

; 2045 :       {
; 2046 :          curNode = curNode->next;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _curNode$[ebp], eax

; 2047 :          continue;

	jmp	$LN16@AddTargetR
$LN11@AddTargetR:

; 2048 :       }
; 2049 :       rx /= groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _rx$[ebp], xmm0

; 2050 :       ry /= groundMapRange;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	divss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR _ry$[ebp], xmm0

; 2051 : 
; 2052 :       // Check for scan width NOTE 0.57 = tan(30) (90.0 - the azimuth limit)
; 2053 :       if ((ry + 1.0F) / (F_ABS (rx) + 0.001F) > 0.57F || F_ABS(rx) > 1.0F)

	movss	xmm0, DWORD PTR _ry$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	xmm1, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv581[ebp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv473[ebp]
	movss	xmm0, DWORD PTR tv473[ebp]
	addss	xmm0, DWORD PTR __real@3a83126f
	movss	xmm1, DWORD PTR tv581[ebp]
	divss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@3f11eb85
	ja	SHORT $LN8@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv479[ebp]
	movss	xmm0, DWORD PTR tv479[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN9@AddTargetR
$LN8@AddTargetR:

; 2054 :       {
; 2055 : 		  //MI
; 2056 : 		  if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN7@AddTargetR
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN7@AddTargetR

; 2057 : 		  {
; 2058 : 			  if(!lockedTarget)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN6@AddTargetR

; 2059 : 			  {
; 2060 : 				  display->AdjustOriginInViewport (rx, ry);

	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 2061 : 				  DrawSymbol (Solid, 0.0F, 0);

	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSymbol@RadarDopplerClass@@IAEXHMHH@Z ; RadarDopplerClass::DrawSymbol

; 2062 : 				  display->AdjustOriginInViewport (-rx, -ry); 

	movss	xmm0, DWORD PTR _ry$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN6@AddTargetR:

; 2063 : 			  }
; 2064 : 		  }
; 2065 : 		  else

	jmp	SHORT $LN5@AddTargetR
$LN7@AddTargetR:

; 2066 : 		  {
; 2067 : 			  display->AdjustOriginInViewport (rx, ry);

	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 2068 : 			  DrawSymbol (Solid, 0.0F, 0);

	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSymbol@RadarDopplerClass@@IAEXHMHH@Z ; RadarDopplerClass::DrawSymbol

; 2069 : 			  display->AdjustOriginInViewport (-rx, -ry);      

	movss	xmm0, DWORD PTR _ry$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN5@AddTargetR:

; 2070 : 		  }
; 2071 : 	  }
; 2072 :       else

	jmp	SHORT $LN3@AddTargetR
$LN9@AddTargetR:

; 2073 :       {
; 2074 :          if (lockedTarget && curNode->Object() == lockedTarget->BaseData())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN3@AddTargetR
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN3@AddTargetR

; 2075 :          {
; 2076 :             DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
$LN3@AddTargetR:

; 2077 :          }
; 2078 :       }
; 2079 : 
; 2080 :       if (flags & NORM)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 1
	je	SHORT $LN2@AddTargetR

; 2081 :       {
; 2082 :          ry -= cursorY;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	subss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR _ry$[ebp], xmm0

; 2083 :          rx -= cursorX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	subss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR _rx$[ebp], xmm0
$LN2@AddTargetR:

; 2084 :       }
; 2085 : 
; 2086 :       if (F_ABS(rx) < minDist && F_ABS (ry) < minDist)

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv520[ebp]
	movss	xmm0, DWORD PTR _minDist$[ebp]
	comiss	xmm0, DWORD PTR tv520[ebp]
	jbe	$LN1@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv527[ebp]
	movss	xmm0, DWORD PTR _minDist$[ebp]
	comiss	xmm0, DWORD PTR tv527[ebp]
	jbe	$LN1@AddTargetR

; 2087 :       {
; 2088 :          minDist = (float)min ( min (minDist, F_ABS(rx)), F_ABS(ry));

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv535[ebp]
	movss	xmm0, DWORD PTR tv535[ebp]
	comiss	xmm0, DWORD PTR _minDist$[ebp]
	jbe	SHORT $LN21@AddTargetR
	movss	xmm0, DWORD PTR _minDist$[ebp]
	movss	DWORD PTR tv314[ebp], xmm0
	jmp	SHORT $LN22@AddTargetR
$LN21@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv314[ebp]
$LN22@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv548[ebp]
	movss	xmm0, DWORD PTR tv548[ebp]
	comiss	xmm0, DWORD PTR tv314[ebp]
	jbe	SHORT $LN25@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv555[ebp]
	movss	xmm0, DWORD PTR tv555[ebp]
	comiss	xmm0, DWORD PTR _minDist$[ebp]
	jbe	SHORT $LN23@AddTargetR
	movss	xmm0, DWORD PTR _minDist$[ebp]
	movss	DWORD PTR tv326[ebp], xmm0
	jmp	SHORT $LN24@AddTargetR
$LN23@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv326[ebp]
$LN24@AddTargetR:
	movss	xmm0, DWORD PTR tv326[ebp]
	movss	DWORD PTR tv330[ebp], xmm0
	jmp	SHORT $LN26@AddTargetR
$LN25@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv330[ebp]
$LN26@AddTargetR:
	movss	xmm0, DWORD PTR tv330[ebp]
	movss	DWORD PTR _minDist$[ebp], xmm0

; 2089 :          targetUnderCursor = curNode->Object()->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR [ecx+40], eax
$LN1@AddTargetR:

; 2090 :       }
; 2091 : 
; 2092 :       curNode = curNode->next;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _curNode$[ebp], eax

; 2093 :    }

	jmp	$LN16@AddTargetR
$LN14@AddTargetR:

; 2094 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?AddTargetReturnsOldStyle@RadarDopplerClass@@IAEXPAVGMList@1@@Z ENDP ; RadarDopplerClass::AddTargetReturnsOldStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
$T1 = -128						; size = 8
_trig$ = -120						; size = 8
tv550 = -112						; size = 4
tv543 = -108						; size = 4
tv530 = -104						; size = 4
tv522 = -100						; size = 4
tv515 = -96						; size = 4
tv461 = -92						; size = 4
tv576 = -88						; size = 4
tv455 = -84						; size = 4
tv441 = -80						; size = 4
tv434 = -76						; size = 4
tv423 = -72						; size = 4
tv417 = -68						; size = 4
tv394 = -64						; size = 4
tv386 = -60						; size = 4
tv339 = -56						; size = 4
tv335 = -52						; size = 4
tv323 = -48						; size = 4
_drawable$2 = -44					; size = 4
_dy$ = -40						; size = 4
_cosAz$ = -36						; size = 4
_dx$ = -32						; size = 4
_sinAz$ = -28						; size = 4
_GainScale$ = -24					; size = 4
_minDist$ = -20						; size = 4
_ry$ = -16						; size = 4
_rx$ = -12						; size = 4
_curNode$ = -8						; size = 4
_this$ = -4						; size = 4
_renderer$ = 8						; size = 4
_Shaping$ = 12						; size = 1
?AddTargetReturns@RadarDopplerClass@@IAEXPAVRenderGMRadar@@_N@Z PROC ; RadarDopplerClass::AddTargetReturns
; _this$ = ecx

; 1881 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1882 : float			dx, dy;
; 1883 : float			rx, ry, GainScale = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _GainScale$[ebp], xmm0

; 1884 : float			cosAz, sinAz;
; 1885 : mlTrig			trig;
; 1886 : GMList			*curNode;
; 1887 : float       minDist = 0.05F;

	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR _minDist$[ebp], xmm0

; 1888 : 
; 1889 :    mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1890 :    cosAz =  trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 1891 :    sinAz = -trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 1892 : 
; 1893 :    // Offset the spots correctly
; 1894 :    if (!(flags & FZ))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 32					; 00000020H
	jne	$LN20@AddTargetR

; 1895 :    {
; 1896 :       if (flags & NORM)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 1
	je	SHORT $LN21@AddTargetR

; 1897 :       {
; 1898 :          // Find center of scope
; 1899 :          GMXCenter = platform->XPos() + tdisplayRange * trig.cos * 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv386[ebp]
	movss	xmm0, DWORD PTR tv386[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+264]
	mulss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+524], xmm0

; 1900 :          GMYCenter = platform->YPos() + tdisplayRange * trig.sin * 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+264]
	mulss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+528], xmm0

; 1901 :       }
; 1902 :       else

	jmp	SHORT $LN20@AddTargetR
$LN21@AddTargetR:

; 1903 :       {
; 1904 :          GMXCenter = GMat.x;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR [edx+524], xmm0

; 1905 :          GMYCenter = GMat.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR [eax+528], xmm0
$LN20@AddTargetR:

; 1906 :       }
; 1907 :    }
; 1908 : 
; 1909 :    // Draw the appropriate type of targets
; 1910 :    // TODO:  We should select _any_ large targets for GM, and only moving targets for GMT/SEA
; 1911 :    if (mode == GM) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 14			; 0000000eH
	jne	SHORT $LN19@AddTargetR

; 1912 :       curNode = GMFeatureListRoot;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	DWORD PTR _curNode$[ebp], eax

; 1913 : 	  GainScale = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _GainScale$[ebp], xmm0

; 1914 :    } else {	// GMT or SEA

	jmp	SHORT $LN18@AddTargetR
$LN19@AddTargetR:

; 1915 :       curNode = GMMoverListRoot;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	DWORD PTR _curNode$[ebp], edx

; 1916 : 	  GainScale = 4.0f;

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _GainScale$[ebp], xmm0
$LN18@AddTargetR:

; 1917 :    }
; 1918 : 
; 1919 :    // Clear target under cursor;
; 1920 :    targetUnderCursor = FalconNullId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR [eax+36], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR [eax+40], edx
$LN31@AddTargetR:

; 1921 : 
; 1922 :    while (curNode)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN16@AddTargetR

; 1923 :    {
; 1924 :       dx = curNode->Object()->XPos() - GMXCenter;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv417[ebp]
	movss	xmm0, DWORD PTR tv417[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+524]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1925 :       dy = curNode->Object()->YPos() - GMYCenter;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv423[ebp]
	movss	xmm0, DWORD PTR tv423[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+528]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1926 : 
; 1927 :       // Note the axis switch from NED to screen
; 1928 :       ry = cosAz * dx - sinAz * dy;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 1929 :       rx = sinAz * dx + cosAz * dy;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 1930 : 
; 1931 :       if (F_ABS(rx) > groundMapRange &&
; 1932 :           F_ABS(ry) > groundMapRange)

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv434[ebp]
	movss	xmm0, DWORD PTR tv434[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+476]
	jbe	SHORT $LN15@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv441[ebp]
	movss	xmm0, DWORD PTR tv441[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [eax+476]
	jbe	SHORT $LN15@AddTargetR

; 1933 :       {
; 1934 :          curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 1935 :          continue;

	jmp	$LN31@AddTargetR
$LN15@AddTargetR:

; 1936 :       }
; 1937 :       rx /= groundMapRange;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR [eax+476]
	movss	DWORD PTR _rx$[ebp], xmm0

; 1938 :       ry /= groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _ry$[ebp], xmm0

; 1939 : 
; 1940 :       // Check for scan width NOTE 0.57 = tan(30) (90.0 - the azimuth limit)
; 1941 :       if ((ry + 1.0F) / (F_ABS (rx) + 0.001F) > 0.57F || F_ABS(rx) > 1.0F)

	movss	xmm0, DWORD PTR _ry$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	xmm1, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv576[ebp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv455[ebp]
	movss	xmm0, DWORD PTR tv455[ebp]
	addss	xmm0, DWORD PTR __real@3a83126f
	movss	xmm1, DWORD PTR tv576[ebp]
	divss	xmm1, xmm0
	comiss	xmm1, DWORD PTR __real@3f11eb85
	ja	SHORT $LN13@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv461[ebp]
	movss	xmm0, DWORD PTR tv461[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN14@AddTargetR
$LN13@AddTargetR:

; 1942 :       {
; 1943 : 		  if (curNode->Object()->IsSim() && ((SimBaseClass*)curNode->Object())->IsAwake()) 

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN12@AddTargetR
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN12@AddTargetR

; 1944 : 		  {
; 1945 : 			  DrawableObject *drawable = ((SimBaseClass*)curNode->Object())->drawPointer;

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	edx, DWORD PTR [eax+332]
	mov	DWORD PTR _drawable$2[ebp], edx

; 1946 : 			  //MI
; 1947 : 			  if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN11@AddTargetR
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN11@AddTargetR

; 1948 : 			  {
; 1949 : 				  if(!lockedTarget)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN10@AddTargetR

; 1950 : 					  renderer->DrawBlip( drawable, GainScale, Shaping );

	movzx	eax, BYTE PTR _Shaping$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _GainScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _drawable$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawBlip@RenderGMRadar@@QAEXPAVDrawableObject@@M_N@Z ; RenderGMRadar::DrawBlip
$LN10@AddTargetR:

; 1951 : 			  }
; 1952 : 			  else

	jmp	SHORT $LN9@AddTargetR
$LN11@AddTargetR:

; 1953 : 				  renderer->DrawBlip( drawable, GainScale, Shaping );

	movzx	edx, BYTE PTR _Shaping$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _GainScale$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _drawable$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawBlip@RenderGMRadar@@QAEXPAVDrawableObject@@M_N@Z ; RenderGMRadar::DrawBlip
$LN9@AddTargetR:

; 1954 : 		  } 
; 1955 : 		  else 

	jmp	SHORT $LN5@AddTargetR
$LN12@AddTargetR:

; 1956 : 		  {
; 1957 : 			  //MI
; 1958 : 			  if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN7@AddTargetR
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN7@AddTargetR

; 1959 : 			  {
; 1960 : 				  if(!lockedTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN6@AddTargetR

; 1961 : 					  renderer->DrawBlip( curNode->Object()->XPos(), curNode->Object()->YPos() );

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawBlip@RenderGMRadar@@QAEXMM@Z	; RenderGMRadar::DrawBlip
$LN6@AddTargetR:

; 1962 : 			  }
; 1963 : 			  else

	jmp	SHORT $LN5@AddTargetR
$LN7@AddTargetR:

; 1964 : 				  renderer->DrawBlip( curNode->Object()->XPos(), curNode->Object()->YPos() );

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _renderer$[ebp]
	call	?DrawBlip@RenderGMRadar@@QAEXMM@Z	; RenderGMRadar::DrawBlip
$LN5@AddTargetR:

; 1965 : 		  }
; 1966 :       }
; 1967 :       else

	jmp	SHORT $LN3@AddTargetR
$LN14@AddTargetR:

; 1968 :       {
; 1969 :          if (lockedTarget && curNode->Object() == lockedTarget->BaseData())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN3@AddTargetR
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	esi, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	esi, eax
	jne	SHORT $LN3@AddTargetR

; 1970 :          {
; 1971 :             DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
$LN3@AddTargetR:

; 1972 :          }
; 1973 :       }
; 1974 : 
; 1975 :       if (flags & NORM)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 1
	je	SHORT $LN2@AddTargetR

; 1976 :       {
; 1977 :          ry -= cursorY;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	subss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR _ry$[ebp], xmm0

; 1978 :          rx -= cursorX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	subss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR _rx$[ebp], xmm0
$LN2@AddTargetR:

; 1979 :       }
; 1980 : 
; 1981 :       if (F_ABS(rx) < minDist && F_ABS(ry) < minDist)

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv515[ebp]
	movss	xmm0, DWORD PTR _minDist$[ebp]
	comiss	xmm0, DWORD PTR tv515[ebp]
	jbe	$LN1@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv522[ebp]
	movss	xmm0, DWORD PTR _minDist$[ebp]
	comiss	xmm0, DWORD PTR tv522[ebp]
	jbe	$LN1@AddTargetR

; 1982 :       {
; 1983 :          minDist = min ( min (minDist, (float)F_ABS(rx)), (float)F_ABS(ry));

	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv530[ebp]
	movss	xmm0, DWORD PTR tv530[ebp]
	comiss	xmm0, DWORD PTR _minDist$[ebp]
	jbe	SHORT $LN25@AddTargetR
	movss	xmm0, DWORD PTR _minDist$[ebp]
	movss	DWORD PTR tv323[ebp], xmm0
	jmp	SHORT $LN26@AddTargetR
$LN25@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv323[ebp]
$LN26@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv543[ebp]
	movss	xmm0, DWORD PTR tv543[ebp]
	comiss	xmm0, DWORD PTR tv323[ebp]
	jbe	SHORT $LN29@AddTargetR
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv550[ebp]
	movss	xmm0, DWORD PTR tv550[ebp]
	comiss	xmm0, DWORD PTR _minDist$[ebp]
	jbe	SHORT $LN27@AddTargetR
	movss	xmm0, DWORD PTR _minDist$[ebp]
	movss	DWORD PTR tv335[ebp], xmm0
	jmp	SHORT $LN28@AddTargetR
$LN27@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv335[ebp]
$LN28@AddTargetR:
	movss	xmm0, DWORD PTR tv335[ebp]
	movss	DWORD PTR tv339[ebp], xmm0
	jmp	SHORT $LN30@AddTargetR
$LN29@AddTargetR:
	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv339[ebp]
$LN30@AddTargetR:
	movss	xmm0, DWORD PTR tv339[ebp]
	movss	DWORD PTR _minDist$[ebp], xmm0

; 1984 :          targetUnderCursor = curNode->Object()->Id();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR [ecx+40], eax
$LN1@AddTargetR:

; 1985 :       }
; 1986 : 
; 1987 :       curNode = curNode->next;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _curNode$[ebp], eax

; 1988 :    }

	jmp	$LN31@AddTargetR
$LN16@AddTargetR:

; 1989 : 
; 1990 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?AddTargetReturns@RadarDopplerClass@@IAEXPAVRenderGMRadar@@_N@Z ENDP ; RadarDopplerClass::AddTargetReturns
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_self$ = 8						; size = 4
_renderer$ = 12						; size = 4
_Shaping$ = 16						; size = 1
?AddTargetReturnCallback@RadarDopplerClass@@KAXPAXPAVRenderGMRadar@@_N@Z PROC ; RadarDopplerClass::AddTargetReturnCallback

; 1875 : void RadarDopplerClass::AddTargetReturnCallback( void* self, RenderGMRadar* renderer, bool Shaping ){

	push	ebp
	mov	ebp, esp

; 1876 : 	((RadarDopplerClass*)self)->AddTargetReturns(renderer, Shaping);

	movzx	eax, BYTE PTR _Shaping$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renderer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _self$[ebp]
	call	?AddTargetReturns@RadarDopplerClass@@IAEXPAVRenderGMRadar@@_N@Z ; RadarDopplerClass::AddTargetReturns

; 1877 : }

	pop	ebp
	ret	0
?AddTargetReturnCallback@RadarDopplerClass@@KAXPAXPAVRenderGMRadar@@_N@Z ENDP ; RadarDopplerClass::AddTargetReturnCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_trig$ = -76						; size = 8
tv464 = -68						; size = 4
tv432 = -64						; size = 4
tv427 = -60						; size = 4
tv462 = -56						; size = 4
tv419 = -52						; size = 4
tv414 = -48						; size = 4
tv406 = -44						; size = 4
tv399 = -40						; size = 4
tv460 = -36						; size = 4
tv373 = -32						; size = 4
tv368 = -28						; size = 4
tv458 = -24						; size = 4
tv360 = -20						; size = 4
tv355 = -16						; size = 4
_cosAz$ = -12						; size = 4
_sinAz$ = -8						; size = 4
_this$ = -4						; size = 4
?DropGMTrack@RadarDopplerClass@@IAEXXZ PROC		; RadarDopplerClass::DropGMTrack
; _this$ = ecx

; 522  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 523  : 	float cosAz, sinAz;
; 524  : 	mlTrig trig;
; 525  : 	
; 526  : 	if (lockedTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN10@DropGMTrac

; 527  : 	{
; 528  : 		if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN9@DropGMTrac
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN9@DropGMTrac

; 529  : 		{
; 530  : 			mlSinCos (&trig, headingForDisplay);			  

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 531  : 			cosAz = trig.cos;			   

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 532  : 			sinAz = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 533  : 			
; 534  : 			viewOffsetInertial.x = lockedTarget->BaseData()->XPos() -
; 535  : 				(platform->XPos() + tdisplayRange * cosAz * 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv355[ebp]
	movss	xmm0, DWORD PTR tv355[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv458[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv360[ebp]
	movss	xmm0, DWORD PTR tv360[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+264]
	mulss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv458[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetInertial, xmm1

; 536  : 			viewOffsetInertial.y = lockedTarget->BaseData()->YPos() -
; 537  : 				(platform->YPos() + tdisplayRange * sinAz * 0.5F);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv368[ebp]
	movss	xmm0, DWORD PTR tv368[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv460[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv373[ebp]
	movss	xmm0, DWORD PTR tv373[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+264]
	mulss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv460[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetInertial+4, xmm1

; 538  : 			
; 539  : 			viewOffsetRel.x =  cosAz*viewOffsetInertial.x + sinAz*viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _viewOffsetInertial
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetInertial+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetRel, xmm0

; 540  : 			viewOffsetRel.y = -sinAz*viewOffsetInertial.x + cosAz*viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _viewOffsetInertial
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetInertial+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 541  : 			
; 542  : 			viewOffsetRel.x /= tdisplayRange * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _viewOffsetRel
	divss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetRel, xmm1

; 543  : 			viewOffsetRel.y /= tdisplayRange * 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _viewOffsetRel+4
	divss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetRel+4, xmm1

; 544  : 		}
; 545  : 		else

	jmp	$LN7@DropGMTrac
$LN9@DropGMTrac:

; 546  : 		{
; 547  : 			if (flags & NORM)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 1
	je	$LN7@DropGMTrac

; 548  : 			{
; 549  : 				mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 550  : 				cosAz = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 551  : 				sinAz = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 552  : 				
; 553  : 				if (!(flags & SP))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN6@DropGMTrac

; 554  : 				{
; 555  : 					GMat.x = platform->XPos() + tdisplayRange * cosAz * 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv399[ebp]
	movss	xmm0, DWORD PTR tv399[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+264]
	mulss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR _GMat, xmm0

; 556  : 					GMat.y = platform->YPos() + tdisplayRange * sinAz * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv406[ebp]
	movss	xmm0, DWORD PTR tv406[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR _GMat+4, xmm0

; 557  : 				}
; 558  : 				else

	jmp	$LN5@DropGMTrac
$LN6@DropGMTrac:

; 559  : 				{
; 560  : 					viewOffsetInertial.x = lockedTarget->BaseData()->XPos() -
; 561  : 						(platform->XPos() + tdisplayRange * cosAz * 0.5F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv414[ebp]
	movss	xmm0, DWORD PTR tv414[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv462[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv419[ebp]
	movss	xmm0, DWORD PTR tv419[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv462[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetInertial, xmm1

; 562  : 					viewOffsetInertial.y = lockedTarget->BaseData()->YPos() -
; 563  : 						(platform->YPos() + tdisplayRange * sinAz * 0.5F);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv427[ebp]
	movss	xmm0, DWORD PTR tv427[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv464[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv432[ebp]
	movss	xmm0, DWORD PTR tv432[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+264]
	mulss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR tv464[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetInertial+4, xmm1
$LN5@DropGMTrac:

; 564  : 				}
; 565  : 				
; 566  : 				viewOffsetRel.x =  cosAz*viewOffsetInertial.x + sinAz*viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _viewOffsetInertial
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetInertial+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetRel, xmm0

; 567  : 				viewOffsetRel.y = -sinAz*viewOffsetInertial.x + cosAz*viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _viewOffsetInertial
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetInertial+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 568  : 				
; 569  : 				viewOffsetRel.x /= tdisplayRange * 0.5F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _viewOffsetRel
	divss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetRel, xmm1

; 570  : 				viewOffsetRel.y /= tdisplayRange * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _viewOffsetRel+4
	divss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetRel+4, xmm1
$LN7@DropGMTrac:

; 571  : 			}
; 572  : 		}
; 573  : 		ClearSensorTarget();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx

; 574  : 		//MI add image noise again
; 575  : 		if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN4@DropGMTrac
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN4@DropGMTrac

; 576  : 		{
; 577  : 			scanDir = ScanFwd;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+252], xmm0
$LN4@DropGMTrac:

; 578  : 		}
; 579  : 	}

	jmp	SHORT $LN2@DropGMTrac
$LN10@DropGMTrac:

; 580  : 	else if (IsSet(SP) && IsSet(SP_STAB) && dropTrackCmd)

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN2@DropGMTrac
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN2@DropGMTrac
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN2@DropGMTrac

; 581  : 	{
; 582  : 		// MD -- 20040115: clear the ground stabilization and return FCC to steerpoint mode when
; 583  : 		// we are explicitly dropping a pseudo waypoint.
; 584  : 		if (SimDriver.GetPlayerAircraft())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN1@DropGMTrac

; 585  : 			SimDriver.GetPlayerAircraft()->FCC->SetStptMode(FireControlComputer::FCCWaypoint);

	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode
$LN1@DropGMTrac:

; 586  : 		SetGMSPWaypt(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGMSPWaypt@RadarDopplerClass@@QAEXPAVWayPointClass@@@Z ; RadarDopplerClass::SetGMSPWaypt

; 587  : 		ClearFlagBit(SP_STAB);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 588  : 		ToggleAGcursorZero();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax
$LN2@DropGMTrac:

; 589  : 	}
; 590  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DropGMTrack@RadarDopplerClass@@IAEXXZ ENDP		; RadarDopplerClass::DropGMTrack
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
tv224 = -72						; size = 8
_bottomfactor$ = -64					; size = 4
_topfactor$ = -60					; size = 4
_tmpX$ = -56						; size = 4
_cRangeSQ$ = -52					; size = 4
tv235 = -48						; size = 4
tv215 = -44						; size = 4
tv291 = -40						; size = 4
tv209 = -36						; size = 4
tv289 = -32						; size = 4
_maxIdx$ = -28						; size = 4
_fromNose$ = -24					; size = 4
_y$ = -20						; size = 4
_x$ = -16						; size = 4
_rangeChangeCmd$ = -12					; size = 4
_noseCursorAngle$ = -8					; size = 4
_this$ = -4						; size = 4
?CheckGMBump@RadarDopplerClass@@IAEHXZ PROC		; RadarDopplerClass::CheckGMBump
; _this$ = ecx

; 709  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 710  : int rangeChangeCmd = 0;

	mov	DWORD PTR _rangeChangeCmd$[ebp], 0

; 711  : int maxIdx;
; 712  : float cRangeSQ;
; 713  : float tmpX = (viewOffsetRel.x + 1.0F) * 0.5F;   // Correct for 0.0 being the center of the scope

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _tmpX$[ebp], xmm0

; 714  : float topfactor = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _topfactor$[ebp], xmm0

; 715  : float bottomfactor = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bottomfactor$[ebp], xmm0

; 716  : 
; 717  : #if 0
; 718  : 	// MD -- 20040229: comment this lot out -- it's not clear what this is coded to do but it doesn't appear to be
; 719  : 	// correct according to docs Mirv provided and behavioral testing.
; 720  : 	int range = (int)rangeScales[curRangeIdx];
; 721  : 
; 722  : 	switch(range)
; 723  : 	{
; 724  : 	case 10:
; 725  : 		if(flags & SP)	//SnowPlow
; 726  : 		{
; 727  : 			topfactor = 1.6F;
; 728  : 			bottomfactor = 0.0F;
; 729  : 		}
; 730  : 		else
; 731  : 		{
; 732  : 			topfactor = 0.48F;
; 733  : 			bottomfactor = 0.0F;
; 734  : 		}
; 735  : 	break;
; 736  : 	case 20:
; 737  : 		if(flags & SP)	//SnowPlow
; 738  : 		{
; 739  : 			topfactor = 1.7F;
; 740  : 			bottomfactor = 0.0078F;
; 741  : 		}
; 742  : 		else
; 743  : 		{
; 744  : 			topfactor = 1.797F;
; 745  : 			bottomfactor = 0.05F;
; 746  : 		}
; 747  : 	break;
; 748  : 	case 40:
; 749  : 		if(flags & SP)	//SnowPlow
; 750  : 		{
; 751  : 			topfactor = 1.7F;
; 752  : 			bottomfactor = 0.0088F;
; 753  : 		}
; 754  : 		else
; 755  : 		{
; 756  : 			topfactor = 1.80280F;
; 757  : 			bottomfactor = 0.236F;
; 758  : 		}
; 759  : 	break;
; 760  : 	case 80:
; 761  : 		if(flags & SP)	//SnowPlow
; 762  : 		{
; 763  : 			topfactor = 2.0F;
; 764  : 			bottomfactor = 0.014497F;
; 765  : 		}
; 766  : 		else
; 767  : 		{
; 768  : 			topfactor = 2.0F;
; 769  : 			bottomfactor = 0.4F;
; 770  : 		}
; 771  : 	break;
; 772  : 	default:
; 773  : 		ShiWarning("Should not get here")
; 774  : 	break;
; 775  : 	}
; 776  : 
; 777  : 
; 778  : //   cRangeSQ =  tmpX*tmpX + viewOffsetRel.y*viewOffsetRel.y;
; 779  : 	cRangeSQ = tmpX*tmpX + tmpX*tmpX; // only change range when we exceed limits in y direction (viewOffsetRel.x = y direction)
; 780  : 
; 781  : 	cRangeSquaredGMScope = cRangeSQ;GetDOFValue(ComplexGearDOF[1]) == (af->GetAeroData(AeroDataSet::NosGearRng + 4) * DTR)
; 782  : 
; 783  :    //MI
; 784  :    if(g_bRealisticAvionics && g_bAGRadarFixes)
; 785  :    {
; 786  : 	   if(IsSet(AutoAGRange))
; 787  : 	   {
; 788  : 		   if (cRangeSQ > topfactor)
; 789  : 		   {
; 790  : 			   rangeChangeCmd = 1;
; 791  : 		   }
; 792  : 		   else if (cRangeSQ < bottomfactor) 
; 793  : 		   { 
; 794  : 			   rangeChangeCmd = -1;
; 795  : 		   }
; 796  : 	   }
; 797  :    }
; 798  :    else
; 799  :    {
; 800  : 	   if (cRangeSQ > 0.95F * 0.95F)
; 801  : 	   {
; 802  : 		   rangeChangeCmd = 1;
; 803  : 	   }
; 804  : 	   else if (cRangeSQ < 0.425F * tmpX) 
; 805  : 	   {
; 806  : 		   rangeChangeCmd = -1;
; 807  : 	   }
; 808  :    }
; 809  : 
; 810  : #endif
; 811  : 
; 812  :    // MD -- 20040229: it appears that the bump ranges are set as 95% of display for max and 42.5% of
; 813  :    // display for for min.  These numbers are modified by the cosine of the azimuth of the cursor
; 814  :    // position as an additional multiplier.  Also, the bump does not happen if the radar is frozen
; 815  :    // or if the cursors are in motion or of course if the MAN range function is set.
; 816  : 
; 817  :    if (IsSet(FZ) || IsSet(WasMoving) || (!IsSet(AutoAGRange)))

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN14@CheckGMBum
	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN14@CheckGMBum
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN15@CheckGMBum
$LN14@CheckGMBum:

; 818  : 	   return rangeChangeCmd;

	mov	eax, DWORD PTR _rangeChangeCmd$[ebp]
	jmp	$LN16@CheckGMBum
$LN15@CheckGMBum:

; 819  : 
; 820  :    float x = (GMat.x + viewOffsetInertial.x) - platform->XPos();

	movss	xmm0, DWORD PTR _GMat
	addss	xmm0, DWORD PTR _viewOffsetInertial
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv289[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv209[ebp]
	movss	xmm0, DWORD PTR tv289[ebp]
	subss	xmm0, DWORD PTR tv209[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 821  :    float y = (GMat.y + viewOffsetInertial.y) - platform->YPos();

	movss	xmm0, DWORD PTR _GMat+4
	addss	xmm0, DWORD PTR _viewOffsetInertial+4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv291[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv215[ebp]
	movss	xmm0, DWORD PTR tv291[ebp]
	subss	xmm0, DWORD PTR tv215[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 822  : 
; 823  :    float noseCursorAngle = platform->Yaw();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _noseCursorAngle$[ebp]

; 824  : 
; 825  :    noseCursorAngle -= static_cast<float>(atan2(y, x));

	cvtss2sd xmm0, DWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv224[ebp]
	movsd	xmm0, QWORD PTR tv224[ebp]
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR _noseCursorAngle$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _noseCursorAngle$[ebp], xmm1

; 826  : 
; 827  :    	if (noseCursorAngle > 180.0F * DTR)

	movss	xmm0, DWORD PTR _noseCursorAngle$[ebp]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN13@CheckGMBum

; 828  : 		noseCursorAngle -= 360.0F * DTR;

	movss	xmm0, DWORD PTR _noseCursorAngle$[ebp]
	subss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _noseCursorAngle$[ebp], xmm0
	jmp	SHORT $LN11@CheckGMBum
$LN13@CheckGMBum:

; 829  : 	else if (noseCursorAngle < -180.0F * DTR)

	movss	xmm0, DWORD PTR __real@c0490fd9
	comiss	xmm0, DWORD PTR _noseCursorAngle$[ebp]
	jbe	SHORT $LN11@CheckGMBum

; 830  : 		noseCursorAngle += 360.0F * DTR;

	movss	xmm0, DWORD PTR _noseCursorAngle$[ebp]
	addss	xmm0, DWORD PTR __real@40c90fd9
	movss	DWORD PTR _noseCursorAngle$[ebp], xmm0
$LN11@CheckGMBum:

; 831  : 
; 832  : 	if (fabs(noseCursorAngle) > (90.0F * DTR)) // he's behind you!

	push	ecx
	movss	xmm0, DWORD PTR _noseCursorAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv235[ebp]
	movss	xmm0, DWORD PTR tv235[ebp]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	SHORT $LN10@CheckGMBum

; 833  : 	   return rangeChangeCmd;  // no bump unless the cursor is on the display in front of your jet

	mov	eax, DWORD PTR _rangeChangeCmd$[ebp]
	jmp	$LN16@CheckGMBum
$LN10@CheckGMBum:

; 834  : 		
; 835  :    cRangeSQ = (x * x) + (y * y);

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _cRangeSQ$[ebp], xmm0

; 836  : 
; 837  :    float fromNose = (float)sqrt(cRangeSQ);

	push	ecx
	movss	xmm0, DWORD PTR _cRangeSQ$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _fromNose$[ebp]

; 838  : 
; 839  :    // since display cursor position is capped at +/-0.95F, apply the percentages to
; 840  :    // that base but scale for correct range anyway.
; 841  :    if (fromNose >= (0.95F * 0.95F * tdisplayRange))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f670a3d
	mulss	xmm0, DWORD PTR [eax+264]
	movss	xmm1, DWORD PTR _fromNose$[ebp]
	comiss	xmm1, xmm0
	jb	SHORT $LN9@CheckGMBum

; 842  :    {
; 843  : 	   rangeChangeCmd = 1;

	mov	DWORD PTR _rangeChangeCmd$[ebp], 1
	jmp	SHORT $LN7@CheckGMBum
$LN9@CheckGMBum:

; 844  :    }
; 845  :    else if (fromNose < (0.425F * 0.95F * tdisplayRange))

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3eceb852
	mulss	xmm0, DWORD PTR [ecx+264]
	comiss	xmm0, DWORD PTR _fromNose$[ebp]
	jbe	SHORT $LN7@CheckGMBum

; 846  :    {
; 847  : 	   rangeChangeCmd = -1;

	mov	DWORD PTR _rangeChangeCmd$[ebp], -1
$LN7@CheckGMBum:

; 848  :    }
; 849  : 
; 850  :    // Max range available
; 851  :    if (flags & (DBS1 | DBS2) || mode == GMT || mode == SEA)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 12					; 0000000cH
	jne	SHORT $LN5@CheckGMBum
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 16			; 00000010H
	je	SHORT $LN5@CheckGMBum
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 17			; 00000011H
	jne	SHORT $LN6@CheckGMBum
$LN5@CheckGMBum:

; 852  :    {
; 853  :       maxIdx = NUM_RANGES - 2;

	mov	DWORD PTR _maxIdx$[ebp], 3

; 854  :    }
; 855  :    else

	jmp	SHORT $LN4@CheckGMBum
$LN6@CheckGMBum:

; 856  :    {
; 857  :       maxIdx = NUM_RANGES - 1;

	mov	DWORD PTR _maxIdx$[ebp], 4
$LN4@CheckGMBum:

; 858  :    }
; 859  : 
; 860  :    if (curRangeIdx + rangeChangeCmd >= maxIdx)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+388]
	add	ecx, DWORD PTR _rangeChangeCmd$[ebp]
	cmp	ecx, DWORD PTR _maxIdx$[ebp]
	jl	SHORT $LN3@CheckGMBum

; 861  :       rangeChangeCmd = 0;

	mov	DWORD PTR _rangeChangeCmd$[ebp], 0
	jmp	SHORT $LN1@CheckGMBum
$LN3@CheckGMBum:

; 862  :    else if (curRangeIdx + rangeChangeCmd < 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	add	eax, DWORD PTR _rangeChangeCmd$[ebp]
	jns	SHORT $LN1@CheckGMBum

; 863  :       rangeChangeCmd = 0;

	mov	DWORD PTR _rangeChangeCmd$[ebp], 0
$LN1@CheckGMBum:

; 864  : 
; 865  :    return rangeChangeCmd;

	mov	eax, DWORD PTR _rangeChangeCmd$[ebp]
$LN16@CheckGMBum:

; 866  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CheckGMBump@RadarDopplerClass@@IAEHXZ ENDP		; RadarDopplerClass::CheckGMBump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rangeChangeCmd$ = 8					; size = 4
?AdjustGMOffset@RadarDopplerClass@@IAEXH@Z PROC		; RadarDopplerClass::AdjustGMOffset
; _this$ = ecx

; 869  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 870  :    if (rangeChangeCmd > 0)

	cmp	DWORD PTR _rangeChangeCmd$[ebp], 0
	jle	$LN12@AdjustGMOf

; 871  :    {
; 872  : 	   //MI
; 873  : 	   if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN5@AdjustGMOf
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN5@AdjustGMOf

; 874  : 	   {
; 875  : 		   if(mode == GM || mode == SEA)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 14			; 0000000eH
	je	SHORT $LN9@AdjustGMOf
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 17			; 00000011H
	jne	SHORT $LN10@AdjustGMOf
$LN9@AdjustGMOf:

; 876  : 		   {
; 877  : 			   if(gmRangeIdx >= 4)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+404], 4
	jl	SHORT $LN8@AdjustGMOf

; 878  : 				   return;

	jmp	$LN13@AdjustGMOf
$LN8@AdjustGMOf:

; 879  : 		   }

	jmp	SHORT $LN5@AdjustGMOf
$LN10@AdjustGMOf:

; 880  : 		   else if(mode == GMT)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 16			; 00000010H
	jne	SHORT $LN5@AdjustGMOf

; 881  : 		   {
; 882  : 			   if(gmRangeIdx >= 3)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], 3
	jl	SHORT $LN5@AdjustGMOf

; 883  : 				   return;

	jmp	$LN13@AdjustGMOf
$LN5@AdjustGMOf:

; 884  : 		   }
; 885  : 	   }
; 886  :       viewOffsetRel.y *= 0.5F;

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 887  :       viewOffsetRel.x = ((viewOffsetRel.x + 1.0F) * 0.5F) - 1.0F;

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _viewOffsetRel, xmm0
	jmp	SHORT $LN3@AdjustGMOf
$LN12@AdjustGMOf:

; 888  :    }
; 889  :    else if (rangeChangeCmd < 0)

	cmp	DWORD PTR _rangeChangeCmd$[ebp], 0
	jge	SHORT $LN3@AdjustGMOf

; 890  :    {
; 891  : 	   //MI
; 892  : 	   if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN1@AdjustGMOf
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN1@AdjustGMOf

; 893  : 	   {
; 894  : 		   if(gmRangeIdx == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], 0
	jne	SHORT $LN1@AdjustGMOf

; 895  : 			   return;

	jmp	SHORT $LN13@AdjustGMOf
$LN1@AdjustGMOf:

; 896  : 	   }
; 897  :       viewOffsetRel.y *= 2.0F;

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 898  :       viewOffsetRel.x = ((viewOffsetRel.x + 1.0F) * 2.0F) - 1.0F;

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _viewOffsetRel, xmm0
$LN3@AdjustGMOf:

; 899  :    }
; 900  :    SetAimPoint (0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAimPoint@RadarDopplerClass@@IAEXMM@Z ; RadarDopplerClass::SetAimPoint
$LN13@AdjustGMOf:

; 901  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustGMOffset@RadarDopplerClass@@IAEXH@Z ENDP		; RadarDopplerClass::AdjustGMOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_trig$ = -72						; size = 8
tv478 = -64						; size = 4
_halfRange$ = -60					; size = 4
_cosAz$ = -56						; size = 4
_sinAz$ = -52						; size = 4
tv346 = -48						; size = 4
tv345 = -44						; size = 4
tv342 = -40						; size = 4
tv340 = -36						; size = 4
tv339 = -32						; size = 4
tv336 = -28						; size = 4
tv273 = -24						; size = 4
_laserPod$ = -20					; size = 4
_mavDisplay$ = -16					; size = 4
_CursorSpeed$1 = -12					; size = 4
_pac$ = -8						; size = 4
_this$ = -4						; size = 4
_xCmd$ = 8						; size = 4
_yCmd$ = 12						; size = 4
?SetAimPoint@RadarDopplerClass@@IAEXMM@Z PROC		; RadarDopplerClass::SetAimPoint
; _this$ = ecx

; 593  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 594  : 	float sinAz, cosAz;
; 595  : 	mlTrig trig;
; 596  : 	float halfRange = tdisplayRange * 0.5F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _halfRange$[ebp], xmm0

; 597  : 	
; 598  : 	MaverickDisplayClass *mavDisplay = NULL;

	mov	DWORD PTR _mavDisplay$[ebp], 0

; 599  : 	
; 600  : 	//MI we also want this happening when in TGP mode, not ground stabilized and SOI
; 601  : 	LaserPodClass* laserPod = (LaserPodClass* )FindLaserPod (SimDriver.GetPlayerAircraft());

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	push	eax
	call	?FindLaserPod@@YAPAVSensorClass@@PAVSimMoverClass@@@Z ; FindLaserPod
	add	esp, 4
	mov	DWORD PTR _laserPod$[ebp], eax

; 602  : 	//MI same for MAV's
; 603  : 	AircraftClass *pac = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _pac$[ebp], eax

; 604  : 	if (pac && pac->Sms && pac ->Sms->curWeaponType == wtAgm65 && pac->Sms->curWeapon){

	cmp	DWORD PTR _pac$[ebp], 0
	je	SHORT $LN34@SetAimPoin
	mov	ecx, DWORD PTR _pac$[ebp]
	cmp	DWORD PTR [ecx+940], 0
	je	SHORT $LN34@SetAimPoin
	mov	edx, DWORD PTR _pac$[ebp]
	mov	eax, DWORD PTR [edx+940]
	cmp	DWORD PTR [eax+148], 4
	jne	SHORT $LN34@SetAimPoin
	mov	ecx, DWORD PTR _pac$[ebp]
	mov	ecx, DWORD PTR [ecx+940]
	add	ecx, 164				; 000000a4H
	call	??B?$VuBin@VSimWeaponClass@@@@QBE_NXZ	; VuBin<SimWeaponClass>::operator bool
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN34@SetAimPoin

; 605  : 		mavDisplay = (MaverickDisplayClass*)((MissileClass*)pac->Sms->GetCurrentWeapon())->display;

	mov	eax, DWORD PTR _pac$[ebp]
	mov	ecx, DWORD PTR [eax+940]
	mov	edx, DWORD PTR _pac$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+940]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	eax, DWORD PTR [eax+712]
	mov	DWORD PTR _mavDisplay$[ebp], eax
$LN34@SetAimPoin:

; 606  : 	}
; 607  : 	if (
; 608  : 		(IsSOI() && !lockedTarget) || 
; 609  : 		(
; 610  : 			((laserPod && laserPod->IsSOI()) || (mavDisplay && mavDisplay->IsSOI())) && 
; 611  : 			pac && pac->FCC && pac->FCC->preDesignate
; 612  : 		) ||
; 613  : 		(pac->FCC->GetSubMode() == FireControlComputer::CCRP)
; 614  : 	){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	SHORT $LN31@SetAimPoin
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN32@SetAimPoin
$LN31@SetAimPoin:
	cmp	DWORD PTR _laserPod$[ebp], 0
	je	SHORT $LN28@SetAimPoin
	mov	ecx, DWORD PTR _laserPod$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	jne	SHORT $LN29@SetAimPoin
$LN28@SetAimPoin:
	cmp	DWORD PTR _mavDisplay$[ebp], 0
	je	SHORT $LN30@SetAimPoin
	mov	ecx, DWORD PTR _mavDisplay$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	SHORT $LN30@SetAimPoin
$LN29@SetAimPoin:
	cmp	DWORD PTR _pac$[ebp], 0
	je	SHORT $LN30@SetAimPoin
	mov	edx, DWORD PTR _pac$[ebp]
	cmp	DWORD PTR [edx+936], 0
	je	SHORT $LN30@SetAimPoin
	mov	eax, DWORD PTR _pac$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	movsx	edx, BYTE PTR [ecx+182]
	test	edx, edx
	jne	SHORT $LN32@SetAimPoin
$LN30@SetAimPoin:
	mov	eax, DWORD PTR _pac$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	call	?GetSubMode@FireControlComputer@@QAE?AW4FCCSubMode@1@XZ ; FireControlComputer::GetSubMode
	cmp	eax, 8
	jne	$LN33@SetAimPoin
$LN32@SetAimPoin:

; 615  : 		//MI better cursor control
; 616  : 		// MD -- 20040215: the cursor doesn't move in SP until you are ground stabilized
; 617  : 		if((xCmd != 0.0F || yCmd != 0.0F) && ((!IsSet(SP)) || (IsSet(SP) && IsSet(SP_STAB))))

	movss	xmm0, DWORD PTR _xCmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN26@SetAimPoin
	movss	xmm0, DWORD PTR _yCmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN27@SetAimPoin
$LN26@SetAimPoin:
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN25@SetAimPoin
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN27@SetAimPoin
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN27@SetAimPoin
$LN25@SetAimPoin:

; 618  : 		{
; 619  : 			float CursorSpeed = g_fCursorSpeed;

	movss	xmm0, DWORD PTR ?g_fCursorSpeed@@3MA
	movss	DWORD PTR _CursorSpeed$1[ebp], xmm0

; 620  : 			if (flags & DBS2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 8
	je	SHORT $LN24@SetAimPoin

; 621  : 				CursorSpeed *= g_fDBS2factor;

	movss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	mulss	xmm0, DWORD PTR ?g_fDBS2factor@@3MA
	movss	DWORD PTR _CursorSpeed$1[ebp], xmm0
	jmp	SHORT $LN20@SetAimPoin
$LN24@SetAimPoin:

; 622  : 			else if (flags & DBS1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 4
	je	SHORT $LN22@SetAimPoin

; 623  : 				CursorSpeed *= g_fDBS1factor;

	movss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	mulss	xmm0, DWORD PTR ?g_fDBS1factor@@3MA
	movss	DWORD PTR _CursorSpeed$1[ebp], xmm0
	jmp	SHORT $LN20@SetAimPoin
$LN22@SetAimPoin:

; 624  : 			else if (flags & EXP)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 2
	je	SHORT $LN20@SetAimPoin

; 625  : 				CursorSpeed *= g_fEXPfactor;

	movss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	mulss	xmm0, DWORD PTR ?g_fEXPfactor@@3MA
	movss	DWORD PTR _CursorSpeed$1[ebp], xmm0
$LN20@SetAimPoin:

; 626  : 			if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == true) && (IO.AnalogIsUsed(AXIS_CURSOR_Y) == true))

	push	11					; 0000000bH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	cmp	ecx, 1
	jne	$LN19@SetAimPoin
	push	12					; 0000000cH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	edx, al
	cmp	edx, 1
	jne	$LN19@SetAimPoin

; 627  : 			{
; 628  : 				viewOffsetRel.x += (yCmd / 20000.0F) * CursorSpeed * (6.5F * CursorRate) * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _yCmd$[ebp]
	divss	xmm0, DWORD PTR __real@469c4000
	mulss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	movss	xmm1, DWORD PTR __real@40d00000
	mulss	xmm1, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	addss	xmm0, DWORD PTR _viewOffsetRel
	movss	DWORD PTR _viewOffsetRel, xmm0

; 629  : 				viewOffsetRel.y += (xCmd / 20000.0F) * CursorSpeed * (6.5F * CursorRate) * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _xCmd$[ebp]
	divss	xmm0, DWORD PTR __real@469c4000
	mulss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	movss	xmm1, DWORD PTR __real@40d00000
	mulss	xmm1, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	addss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 630  : 			}
; 631  : 			else

	jmp	$LN18@SetAimPoin
$LN19@SetAimPoin:

; 632  : 			{
; 633  : 				viewOffsetRel.x += yCmd * 0.5F * CursorSpeed * curCursorRate * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _yCmd$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+228]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	addss	xmm0, DWORD PTR _viewOffsetRel
	movss	DWORD PTR _viewOffsetRel, xmm0

; 634  : 				viewOffsetRel.y += xCmd * 0.5F * CursorSpeed * curCursorRate * SimLibMajorFrameTime;

	movss	xmm0, DWORD PTR _xCmd$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _CursorSpeed$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+228]
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	addss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 635  : 				static float test = 0.0f;
; 636  : 				static float testa = 0.0f;
; 637  : 				curCursorRate = min(curCursorRate + CursorRate * SimLibMajorFrameTime * (4.0F+test), (6.5F+testa) * CursorRate);

	movss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR ?test@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA
	mulss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+228]
	movss	xmm1, DWORD PTR __real@40d00000
	addss	xmm1, DWORD PTR ?testa@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA
	mulss	xmm1, DWORD PTR ?CursorRate@RadarClass@@1MB
	comiss	xmm1, xmm0
	jbe	SHORT $LN37@SetAimPoin
	movss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, DWORD PTR ?test@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA
	mulss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+228]
	movss	DWORD PTR tv273[ebp], xmm0
	jmp	SHORT $LN38@SetAimPoin
$LN37@SetAimPoin:
	movss	xmm0, DWORD PTR __real@40d00000
	addss	xmm0, DWORD PTR ?testa@?BI@??SetAimPoint@RadarDopplerClass@@IAEXMM@Z@4MA
	mulss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	movss	DWORD PTR tv273[ebp], xmm0
$LN38@SetAimPoin:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv273[ebp]
	movss	DWORD PTR [ecx+228], xmm0
$LN18@SetAimPoin:

; 638  : 			}
; 639  : 		}
; 640  : 		else

	jmp	SHORT $LN16@SetAimPoin
$LN27@SetAimPoin:

; 641  : 		{
; 642  : 			if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == false) || (IO.AnalogIsUsed(AXIS_CURSOR_Y) == false))

	push	11					; 0000000bH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN15@SetAimPoin
	push	12					; 0000000cH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@SetAimPoin
$LN15@SetAimPoin:

; 643  : 				curCursorRate = CursorRate;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	movss	DWORD PTR [ecx+228], xmm0
$LN16@SetAimPoin:

; 644  : 			//TJL 11/19/03
; 645  : 			//GetCursorXYFromWorldXY (&CursorX, &CursorY, WorldX, WorldY);
; 646  : 		}
; 647  : 		//viewOffsetRel.x += yCmd * CursorRate*3 * SimLibMajorFrameTime *
; 648  : 		//     groundMapRange / halfRange;
; 649  : 		//viewOffsetRel.y += xCmd * CursorRate*3 * SimLibMajorFrameTime *
; 650  : 		//    groundMapRange / halfRange;
; 651  : 		
; 652  : 		// 2002-04-04 MN fix for cursor movement on the radar cone borders, only restrict to SnowPlow
; 653  : 		if (( (flags & SP) && (float)fabs(viewOffsetRel.y) > (viewOffsetRel.x + 1.0F)*TAN_RADAR_CONE_ANGLE ))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 64					; 00000040H
	je	$LN1@SetAimPoin
	push	ecx
	movss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv478[ebp]
	movss	xmm0, DWORD PTR tv478[ebp]
	movss	xmm1, DWORD PTR _viewOffsetRel
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, DWORD PTR _TAN_RADAR_CONE_ANGLE
	comiss	xmm0, xmm1
	jbe	$LN1@SetAimPoin

; 654  : 		{
; 655  : 			// set to middle axis when really close to it
; 656  : 			if (viewOffsetRel.y > -0.05f && viewOffsetRel.y < 0.05f)

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	comiss	xmm0, DWORD PTR __real@bd4ccccd
	jbe	SHORT $LN13@SetAimPoin
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR _viewOffsetRel+4
	jbe	SHORT $LN13@SetAimPoin

; 657  : 			{
; 658  : 				viewOffsetRel.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0
	jmp	$LN1@SetAimPoin
$LN13@SetAimPoin:

; 659  : 			}
; 660  : 			else if (xCmd && yCmd ) // let the cursor stay at its position on the gimbal border

	movss	xmm0, DWORD PTR _xCmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN11@SetAimPoin
	movss	xmm0, DWORD PTR _yCmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN11@SetAimPoin

; 661  : 			{
; 662  : 				if (viewOffsetRel.y >= 0.0f)

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN10@SetAimPoin

; 663  : 				{
; 664  : 					viewOffsetRel.y = (float)(viewOffsetRel.x + 1.0F) * TAN_RADAR_CONE_ANGLE;

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 665  : 					viewOffsetRel.x = (float)(viewOffsetRel.y  / TAN_RADAR_CONE_ANGLE) - 1.0F;

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	divss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _viewOffsetRel, xmm0

; 666  : 				}
; 667  : 				else

	jmp	SHORT $LN9@SetAimPoin
$LN10@SetAimPoin:

; 668  : 				{
; 669  : 					viewOffsetRel.y = -((float)(viewOffsetRel.x + 1.0F) * TAN_RADAR_CONE_ANGLE);

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 670  : 					viewOffsetRel.x = -((float)(viewOffsetRel.y / TAN_RADAR_CONE_ANGLE) + 1.0F);

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	divss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	addss	xmm0, DWORD PTR __real@3f800000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _viewOffsetRel, xmm0
$LN9@SetAimPoin:

; 671  : 				}

	jmp	$LN1@SetAimPoin
$LN11@SetAimPoin:

; 672  : 			}
; 673  : 			else if (yCmd)

	movss	xmm0, DWORD PTR _yCmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@SetAimPoin

; 674  : 			{
; 675  : 				if (viewOffsetRel.y >= 0.0f)

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN6@SetAimPoin

; 676  : 					// Tangens works a bit different ;-)
; 677  : 					//viewOffsetRel.y = (float)fabs(viewOffsetRel.x + 1.0F) / TAN_RADAR_CONE_ANGLE - 1.0F;
; 678  : 					viewOffsetRel.y = (float)(viewOffsetRel.x + 1.0F) * TAN_RADAR_CONE_ANGLE;

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 679  : 				else

	jmp	SHORT $LN5@SetAimPoin
$LN6@SetAimPoin:

; 680  : 					viewOffsetRel.y = -((float)(viewOffsetRel.x + 1.0F) * TAN_RADAR_CONE_ANGLE);

	movss	xmm0, DWORD PTR _viewOffsetRel
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0
$LN5@SetAimPoin:
	jmp	SHORT $LN1@SetAimPoin
$LN7@SetAimPoin:

; 681  : 			}
; 682  : 			else if (xCmd)

	movss	xmm0, DWORD PTR _xCmd$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@SetAimPoin

; 683  : 			{
; 684  : 				if (viewOffsetRel.y >= 0.0F)

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@SetAimPoin

; 685  : 					viewOffsetRel.x = (float)(viewOffsetRel.y  / TAN_RADAR_CONE_ANGLE) - 1.0F;

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	divss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _viewOffsetRel, xmm0

; 686  : 				else

	jmp	SHORT $LN1@SetAimPoin
$LN2@SetAimPoin:

; 687  : 					viewOffsetRel.x = -(float)((viewOffsetRel.y / TAN_RADAR_CONE_ANGLE) + 1.0F);

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	divss	xmm0, DWORD PTR _TAN_RADAR_CONE_ANGLE
	addss	xmm0, DWORD PTR __real@3f800000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _viewOffsetRel, xmm0
$LN1@SetAimPoin:

; 688  : 			}
; 689  : 		}
; 690  : 		
; 691  : 		viewOffsetRel.x = min ( max (viewOffsetRel.x, -0.975F), 0.975F);

	movss	xmm0, DWORD PTR _viewOffsetRel
	comiss	xmm0, DWORD PTR __real@bf79999a
	jbe	SHORT $LN39@SetAimPoin
	movss	xmm0, DWORD PTR _viewOffsetRel
	movss	DWORD PTR tv336[ebp], xmm0
	jmp	SHORT $LN40@SetAimPoin
$LN39@SetAimPoin:
	movss	xmm0, DWORD PTR __real@bf79999a
	movss	DWORD PTR tv336[ebp], xmm0
$LN40@SetAimPoin:
	movss	xmm0, DWORD PTR __real@3f79999a
	comiss	xmm0, DWORD PTR tv336[ebp]
	jbe	SHORT $LN43@SetAimPoin
	movss	xmm0, DWORD PTR _viewOffsetRel
	comiss	xmm0, DWORD PTR __real@bf79999a
	jbe	SHORT $LN41@SetAimPoin
	movss	xmm0, DWORD PTR _viewOffsetRel
	movss	DWORD PTR tv339[ebp], xmm0
	jmp	SHORT $LN42@SetAimPoin
$LN41@SetAimPoin:
	movss	xmm0, DWORD PTR __real@bf79999a
	movss	DWORD PTR tv339[ebp], xmm0
$LN42@SetAimPoin:
	movss	xmm0, DWORD PTR tv339[ebp]
	movss	DWORD PTR tv340[ebp], xmm0
	jmp	SHORT $LN44@SetAimPoin
$LN43@SetAimPoin:
	movss	xmm0, DWORD PTR __real@3f79999a
	movss	DWORD PTR tv340[ebp], xmm0
$LN44@SetAimPoin:
	movss	xmm0, DWORD PTR tv340[ebp]
	movss	DWORD PTR _viewOffsetRel, xmm0

; 692  : 		viewOffsetRel.y = min ( max (viewOffsetRel.y, -0.975F), 0.975F);

	movss	xmm0, DWORD PTR _viewOffsetRel+4
	comiss	xmm0, DWORD PTR __real@bf79999a
	jbe	SHORT $LN45@SetAimPoin
	movss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR tv342[ebp], xmm0
	jmp	SHORT $LN46@SetAimPoin
$LN45@SetAimPoin:
	movss	xmm0, DWORD PTR __real@bf79999a
	movss	DWORD PTR tv342[ebp], xmm0
$LN46@SetAimPoin:
	movss	xmm0, DWORD PTR __real@3f79999a
	comiss	xmm0, DWORD PTR tv342[ebp]
	jbe	SHORT $LN49@SetAimPoin
	movss	xmm0, DWORD PTR _viewOffsetRel+4
	comiss	xmm0, DWORD PTR __real@bf79999a
	jbe	SHORT $LN47@SetAimPoin
	movss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR tv345[ebp], xmm0
	jmp	SHORT $LN48@SetAimPoin
$LN47@SetAimPoin:
	movss	xmm0, DWORD PTR __real@bf79999a
	movss	DWORD PTR tv345[ebp], xmm0
$LN48@SetAimPoin:
	movss	xmm0, DWORD PTR tv345[ebp]
	movss	DWORD PTR tv346[ebp], xmm0
	jmp	SHORT $LN50@SetAimPoin
$LN49@SetAimPoin:
	movss	xmm0, DWORD PTR __real@3f79999a
	movss	DWORD PTR tv346[ebp], xmm0
$LN50@SetAimPoin:
	movss	xmm0, DWORD PTR tv346[ebp]
	movss	DWORD PTR _viewOffsetRel+4, xmm0
$LN33@SetAimPoin:

; 693  : 		
; 694  :     }
; 695  : 	
; 696  : 	mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 697  : 	cosAz = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 698  : 	sinAz = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 699  : 	
; 700  : 	viewOffsetInertial.x = cosAz*viewOffsetRel.x - sinAz*viewOffsetRel.y;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _viewOffsetRel
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetRel+4
	subss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 701  : 	viewOffsetInertial.y = sinAz*viewOffsetRel.x + cosAz*viewOffsetRel.y;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	mulss	xmm0, DWORD PTR _viewOffsetRel
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetRel+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetInertial+4, xmm0

; 702  : 	
; 703  : 	viewOffsetInertial.x *= halfRange;

	movss	xmm0, DWORD PTR _viewOffsetInertial
	mulss	xmm0, DWORD PTR _halfRange$[ebp]
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 704  : 	viewOffsetInertial.y *= halfRange;

	movss	xmm0, DWORD PTR _viewOffsetInertial+4
	mulss	xmm0, DWORD PTR _halfRange$[ebp]
	movss	DWORD PTR _viewOffsetInertial+4, xmm0

; 705  : 	
; 706  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetAimPoint@RadarDopplerClass@@IAEXMM@Z ENDP		; RadarDopplerClass::SetAimPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
tv512 = -68						; size = 4
tv507 = -64						; size = 4
tv500 = -60						; size = 4
tv495 = -56						; size = 4
tv490 = -52						; size = 4
_farEdge$ = -48						; size = 4
tv485 = -44						; size = 4
tv383 = -40						; size = 4
tv312 = -36						; size = 4
_scanBottom$ = -32					; size = 4
_scanTop$ = -28						; size = 4
tv291 = -24						; size = 4
_nearEdge$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetGMScan@RadarDopplerClass@@IAEXXZ PROC		; RadarDopplerClass::SetGMScan
; _this$ = ecx

; 975  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetGMScan@RadarDopplerClass@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 976  : float scanBottom, scanTop;
; 977  : float nearEdge, farEdge;
; 978  : static const float TwoRootTwo = 2.0f * (float)sqrt( 2.0f );

	mov	eax, DWORD PTR ?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA
	and	eax, 1
	jne	SHORT $LN47@SetGMScan
	mov	ecx, DWORD PTR ?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv383[ebp]
	movss	xmm0, DWORD PTR tv383[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ?TwoRootTwo@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4MB, xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN47@SetGMScan:

; 979  : 
; 980  : 
; 981  :    if (flags & EXP)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 2
	je	$LN46@SetGMScan

; 982  :    {
; 983  : 	   groundMapRange = tdisplayRange * 0.125F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3e000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+476], xmm0

; 984  : 	   if (displayRange <= 20.1f) 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a0cccd
	comiss	xmm0, DWORD PTR [eax+212]
	jb	SHORT $LN45@SetGMScan

; 985  : 	   {
; 986  : 		   groundMapLOD = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+508], 2

; 987  : 	   } else 

	jmp	SHORT $LN44@SetGMScan
$LN45@SetGMScan:

; 988  : 	   {
; 989  : 		   groundMapLOD = 3;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+508], 3
$LN44@SetGMScan:

; 990  : 	   }
; 991  : 	   //azScan = 60.0F * DTR;		// Radar still scans full volume, but only displays a subset...
; 992  : 	   //MI az is set thru the OSB now
; 993  : 	  if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN42@SetGMScan
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	jne	SHORT $LN43@SetGMScan
$LN42@SetGMScan:

; 994  : 		  azScan = 60.0F * DTR;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [edx+204], xmm0
	jmp	SHORT $LN40@SetGMScan
$LN43@SetGMScan:

; 995  : 	  else if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN40@SetGMScan
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN40@SetGMScan

; 996  : 	  {
; 997  : 		  if(mode == GM || mode == SEA)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 14			; 0000000eH
	je	SHORT $LN38@SetGMScan
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 17			; 00000011H
	jne	SHORT $LN39@SetGMScan
$LN38@SetGMScan:

; 998  : 			  curAzIdx = gmAzIdx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+428]
	mov	DWORD PTR [ecx+400], eax

; 999  : 		  else

	jmp	SHORT $LN37@SetGMScan
$LN39@SetGMScan:

; 1000 : 			  curAzIdx = gmtAzIdx;				 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+432]
	mov	DWORD PTR [ecx+400], eax
$LN37@SetGMScan:

; 1001 : 		  azScan = rwsAzs[curAzIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+400]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+332]
	mov	DWORD PTR [eax+204], edx
$LN40@SetGMScan:

; 1002 : 	  }
; 1003 :    }

	jmp	$LN8@SetGMScan
$LN46@SetGMScan:

; 1004 :    else if (flags & DBS1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 4
	je	$LN35@SetGMScan

; 1005 :    {
; 1006 : 	   groundMapRange = tdisplayRange * 0.125F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+264]
	mulss	xmm0, DWORD PTR __real@3e000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+476], xmm0

; 1007 : 	   if (displayRange <= 20.1f) 

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a0cccd
	comiss	xmm0, DWORD PTR [ecx+212]
	jb	SHORT $LN34@SetGMScan

; 1008 : 	   {
; 1009 : 		   groundMapLOD = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+508], 1

; 1010 : 	   } 
; 1011 : 	   else 

	jmp	SHORT $LN33@SetGMScan
$LN34@SetGMScan:

; 1012 : 	   {
; 1013 : 		   groundMapLOD = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+508], 2
$LN33@SetGMScan:

; 1014 : 	   }
; 1015 : 
; 1016 : //	  azScan = atan2( TwoRootTwo*groundMapRange, distance from platform to GMat );
; 1017 :       //azScan = 15.0F * DTR;
; 1018 : 	   //MI az is set thru the OSB now
; 1019 : 	  if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN31@SetGMScan
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	jne	SHORT $LN32@SetGMScan
$LN31@SetGMScan:

; 1020 : 		  azScan = 15.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e860a91
	movss	DWORD PTR [eax+204], xmm0
	jmp	SHORT $LN29@SetGMScan
$LN32@SetGMScan:

; 1021 : 	  else if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN29@SetGMScan
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN29@SetGMScan

; 1022 : 	  {
; 1023 : 		  if(mode == GM || mode == SEA)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 14			; 0000000eH
	je	SHORT $LN27@SetGMScan
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 17			; 00000011H
	jne	SHORT $LN28@SetGMScan
$LN27@SetGMScan:

; 1024 : 			  curAzIdx = gmAzIdx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	mov	DWORD PTR [edx+400], ecx

; 1025 : 		  else

	jmp	SHORT $LN26@SetGMScan
$LN28@SetGMScan:

; 1026 : 			  curAzIdx = gmtAzIdx;				 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+432]
	mov	DWORD PTR [edx+400], ecx
$LN26@SetGMScan:

; 1027 : 		  azScan = rwsAzs[curAzIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+400]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+332]
	mov	DWORD PTR [ecx+204], eax
$LN29@SetGMScan:

; 1028 : 	  }
; 1029 :    }

	jmp	$LN8@SetGMScan
$LN35@SetGMScan:

; 1030 :    else if (flags & DBS2)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 8
	je	$LN24@SetGMScan

; 1031 :    {
; 1032 : 	   //TJL 11/17/03 Fixed DBS2 to display what is within DBS1 tick marks
; 1033 : //      groundMapRange = tdisplayRange * 0.0625F;
; 1034 : 	  groundMapRange = tdisplayRange * 0.03F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	mulss	xmm0, DWORD PTR __real@3cf5c28f
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+476], xmm0

; 1035 : 
; 1036 : 	  //TJL 11/17/03 Deleted the min range test to get the new DBS2 range to work.
; 1037 :       //groundMapRange = min ( max (groundMapRange, 1.0F * NM_TO_FT), 7.0F * NM_TO_FT);
; 1038 : 
; 1039 : 	  if (displayRange <= 20.1f) {

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a0cccd
	comiss	xmm0, DWORD PTR [edx+212]
	jb	SHORT $LN23@SetGMScan

; 1040 : 		groundMapLOD = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+508], 0

; 1041 : 	  } else {

	jmp	SHORT $LN22@SetGMScan
$LN23@SetGMScan:

; 1042 : 		groundMapLOD = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+508], 1
$LN22@SetGMScan:

; 1043 : 	  }
; 1044 : //	  azScan = atan2( TwoRootTwo*groundMapRange, distance from platform to GMat );
; 1045 :       //azScan = 5.0F * DTR;
; 1046 : 	  //MI az is set thru the OSB now
; 1047 : 	  if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN20@SetGMScan
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	jne	SHORT $LN21@SetGMScan
$LN20@SetGMScan:

; 1048 : 		  azScan = 5.0F * DTR;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3db2b8c1
	movss	DWORD PTR [ecx+204], xmm0
	jmp	SHORT $LN18@SetGMScan
$LN21@SetGMScan:

; 1049 : 	  else if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN18@SetGMScan
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	SHORT $LN18@SetGMScan

; 1050 : 	  {
; 1051 : 		  if(mode == GM || mode == SEA)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 14			; 0000000eH
	je	SHORT $LN16@SetGMScan
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 17			; 00000011H
	jne	SHORT $LN17@SetGMScan
$LN16@SetGMScan:

; 1052 : 			  curAzIdx = gmAzIdx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	mov	DWORD PTR [eax+400], edx

; 1053 : 		  else

	jmp	SHORT $LN15@SetGMScan
$LN17@SetGMScan:

; 1054 : 			  curAzIdx = gmtAzIdx;				 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+432]
	mov	DWORD PTR [eax+400], edx
$LN15@SetGMScan:

; 1055 : 		  azScan = rwsAzs[curAzIdx];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+332]
	mov	DWORD PTR [edx+204], ecx
$LN18@SetGMScan:

; 1056 : 	  }
; 1057 :    }
; 1058 :    else	// NORM

	jmp	$LN8@SetGMScan
$LN24@SetGMScan:

; 1059 :    {
; 1060 : 	  ShiAssert( flags & NORM );	// If not, then what mode is this???
; 1061 :       groundMapRange = tdisplayRange * 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+476], xmm0

; 1062 : 	  if (displayRange <= 20.1f) 

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a0cccd
	comiss	xmm0, DWORD PTR [ecx+212]
	jb	SHORT $LN13@SetGMScan

; 1063 : 	  {
; 1064 : 		groundMapLOD = 3;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+508], 3

; 1065 : 	  } else 

	jmp	SHORT $LN12@SetGMScan
$LN13@SetGMScan:

; 1066 : 	  {
; 1067 : 		groundMapLOD = 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+508], 4
$LN12@SetGMScan:

; 1068 : 	  }
; 1069 : 	  //MI az is set thru the OSB now
; 1070 : 	  if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN10@SetGMScan
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	jne	SHORT $LN11@SetGMScan
$LN10@SetGMScan:

; 1071 : 		  azScan = MAX_ANT_EL;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [eax+204], xmm0
	jmp	SHORT $LN8@SetGMScan
$LN11@SetGMScan:

; 1072 : 	  else if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN8@SetGMScan
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN8@SetGMScan

; 1073 : 	  {
; 1074 : 		  if(mode == GM || mode == SEA)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 14			; 0000000eH
	je	SHORT $LN6@SetGMScan
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 17			; 00000011H
	jne	SHORT $LN7@SetGMScan
$LN6@SetGMScan:

; 1075 : 			  curAzIdx = gmAzIdx;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	mov	DWORD PTR [edx+400], ecx

; 1076 : 		  else

	jmp	SHORT $LN5@SetGMScan
$LN7@SetGMScan:

; 1077 : 			  curAzIdx = gmtAzIdx;				 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+432]
	mov	DWORD PTR [edx+400], ecx
$LN5@SetGMScan:

; 1078 : 		  azScan = rwsAzs[curAzIdx];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+400]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+332]
	mov	DWORD PTR [ecx+204], eax
$LN8@SetGMScan:

; 1079 : 	  }
; 1080 :    }
; 1081 : 
; 1082 :    nearEdge = displayRange * NM_TO_FT - groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+212]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	edx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR _nearEdge$[ebp], xmm0

; 1083 :    farEdge = displayRange * NM_TO_FT + groundMapRange;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+212]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _farEdge$[ebp], xmm0

; 1084 :    scanTop = -(float)atan (-platform->ZPos() / farEdge);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv485[ebp]
	movss	xmm0, DWORD PTR tv485[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _farEdge$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv490[ebp]
	movss	xmm0, DWORD PTR tv490[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _scanTop$[ebp], xmm0

; 1085 :    scanBottom = max (-MAX_ANT_EL, -(float)atan (-platform->ZPos() / nearEdge));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv495[ebp]
	movss	xmm0, DWORD PTR tv495[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _nearEdge$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv500[ebp]
	movss	xmm0, DWORD PTR tv500[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR __real@bf860a91
	comiss	xmm1, xmm0
	jbe	SHORT $LN50@SetGMScan
	movss	xmm0, DWORD PTR __real@bf860a91
	movss	DWORD PTR tv291[ebp], xmm0
	jmp	SHORT $LN51@SetGMScan
$LN50@SetGMScan:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv507[ebp]
	movss	xmm0, DWORD PTR tv507[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR _nearEdge$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR tv512[ebp]
	movss	xmm0, DWORD PTR tv512[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv291[ebp], xmm0
$LN51@SetGMScan:
	movss	xmm0, DWORD PTR tv291[ebp]
	movss	DWORD PTR _scanBottom$[ebp], xmm0

; 1086 :    // JB 010707 
; 1087 : 	 //bars = (int)((scanTop - scanBottom) / (barWidth * 2.0F) + 0.5F);
; 1088 : 	 bars = max(1, (int)((scanTop - scanBottom) / (barWidth * 2.0F) + 0.5F));

	movss	xmm0, DWORD PTR _scanTop$[ebp]
	subss	xmm0, DWORD PTR _scanBottom$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+248]
	mulss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cmp	eax, 1
	jge	SHORT $LN52@SetGMScan
	mov	DWORD PTR tv312[ebp], 1
	jmp	SHORT $LN53@SetGMScan
$LN52@SetGMScan:
	movss	xmm0, DWORD PTR _scanTop$[ebp]
	subss	xmm0, DWORD PTR _scanBottom$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+248]
	mulss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	mov	DWORD PTR tv312[ebp], edx
$LN53@SetGMScan:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv312[ebp]
	mov	DWORD PTR [eax+188], ecx

; 1089 : 
; 1090 : 	// For expanded modes, you'll need to set "at" to the center
; 1091 : 	// of the expanded region and reduce range to the size of the footprint
; 1092 : 	// to be expanded.  "center" is when the MFD center should fall in world space.
; 1093 : 	//
; 1094 : 	// SetGimbalLimit should also be done only when the value changes (typically at setup only)
; 1095 : 	// It allows you to provide a max ATA beyond which the image is clipped (approximatly)
; 1096 : 	//
; 1097 :     // Just use privateDisplay since that is the one and only GM type renderer
; 1098 : 	// and we want it in the right mode when it is used again even if it isn't current.
; 1099 : 	if( privateDisplay ) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN1@SetGMScan

; 1100 : 		((RenderGMComposite*)privateDisplay)->SetRange( groundMapRange, groundMapLOD );

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+508]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?SetRange@RenderGMComposite@@QAEXMH@Z	; RenderGMComposite::SetRange

; 1101 : //		((RenderGMComposite*)privateDisplay)->SetGimbalLimit( azScan );
; 1102 : 		//MI take the azimuth we've selected thru the OSB
; 1103 : 		if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN2@SetGMScan
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	jne	SHORT $LN3@SetGMScan
$LN2@SetGMScan:

; 1104 : 			((RenderGMComposite*)privateDisplay)->SetGimbalLimit( MAX_ANT_EL );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?SetGimbalLimit@RenderGMComposite@@QAEXM@Z ; RenderGMComposite::SetGimbalLimit

; 1105 : 		else

	jmp	SHORT $LN1@SetGMScan
$LN3@SetGMScan:

; 1106 : 			((RenderGMComposite*)privateDisplay)->SetGimbalLimit(azScan);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+204]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?SetGimbalLimit@RenderGMComposite@@QAEXM@Z ; RenderGMComposite::SetGimbalLimit
$LN1@SetGMScan:

; 1107 : 	}
; 1108 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetGMScan@RadarDopplerClass@@IAEXXZ$0:
	mov	eax, DWORD PTR ?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??SetGMScan@RadarDopplerClass@@IAEXXZ@4IA, eax
	ret	0
__ehhandler$?SetGMScan@RadarDopplerClass@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetGMScan@RadarDopplerClass@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetGMScan@RadarDopplerClass@@IAEXXZ ENDP		; RadarDopplerClass::SetGMScan
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?GMSPWaypt@RadarDopplerClass@@QAEPAVWayPointClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GMSPWaypt@RadarDopplerClass@@QAEPAVWayPointClass@@XZ PROC ; RadarDopplerClass::GMSPWaypt, COMDAT
; _this$ = ecx

; 424  : 	WayPointClass* GMSPWaypt() { return GMSPPseudoWaypt; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+536]
	mov	esp, ebp
	pop	ebp
	ret	0
?GMSPWaypt@RadarDopplerClass@@QAEPAVWayPointClass@@XZ ENDP ; RadarDopplerClass::GMSPWaypt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_trig$1 = -420						; size = 8
_tempres$2 = -412					; size = 4
tv3162 = -408						; size = 4
tv3254 = -404						; size = 4
tv4522 = -400						; size = 4
tv3508 = -396						; size = 4
tv3116 = -392						; size = 4
_Angle$3 = -388						; size = 4
_value$4 = -384						; size = 4
tv3177 = -380						; size = 4
tv3354 = -376						; size = 4
tv3332 = -372						; size = 4
tv4526 = -368						; size = 4
tv3110 = -364						; size = 4
tv4423 = -360						; size = 4
tv3527 = -356						; size = 4
tv4415 = -352						; size = 4
tv3502 = -348						; size = 4
tv4407 = -344						; size = 4
tv3394 = -340						; size = 4
tv4401 = -336						; size = 4
tv3345 = -332						; size = 4
_z$5 = -328						; size = 4
tv3263 = -324						; size = 4
_pos$6 = -320						; size = 4
tv3237 = -316						; size = 4
_diff$7 = -312						; size = 4
tv4524 = -308						; size = 4
_lenght$8 = -304					; size = 4
tv3190 = -300						; size = 4
tv384 = -296						; size = 4
tv2475 = -292						; size = 4
tv383 = -288						; size = 4
_dy$9 = -284						; size = 4
tv376 = -280						; size = 4
tv820 = -276						; size = 4
tv398 = -272						; size = 4
_y$10 = -268						; size = 4
tv2670 = -264						; size = 4
_step$11 = -260						; size = 4
tv2669 = -256						; size = 4
tv399 = -252						; size = 4
tv2666 = -248						; size = 4
tv2624 = -244						; size = 4
tv2664 = -240						; size = 4
_groundLookEl$ = -236					; size = 4
tv2663 = -232						; size = 4
tv2399 = -228						; size = 4
tv2660 = -224						; size = 4
_cursorAngle$12 = -220					; size = 4
tv2650 = -216						; size = 4
_diff$13 = -212						; size = 4
tv2645 = -208						; size = 4
tv391 = -204						; size = 4
_dx$14 = -200						; size = 4
_x$15 = -196						; size = 4
_vpRight$ = -192					; size = 4
_vpLeft$ = -188						; size = 4
_vpBottom$ = -184					; size = 4
tv2248 = -180						; size = 4
_sinAz$ = -176						; size = 4
_vpTop$ = -172						; size = 4
_cosAz$ = -168						; size = 4
_baseEl$ = -164						; size = 4
_CurrentPos$16 = -160					; size = 4
_dz$ = -156						; size = 4
_baseAz$ = -152						; size = 4
_pos1$17 = -148						; size = 4
_beamPercent$ = -144					; size = 4
_len$ = -140						; size = 4
_rx$ = -136						; size = 4
_y1$18 = -132						; size = 4
_ry$ = -128						; size = 4
_newgain$19 = -124					; size = 4
_tmpColor$ = -120					; size = 4
_trig$ = -116						; size = 8
_len$20 = -108						; size = 4
_len$21 = -104						; size = 4
_hr$22 = -100						; size = 4
_x$23 = -96						; size = 4
_y$24 = -92						; size = 4
_i$ = -88						; size = 4
tv816 = -81						; size = 1
_curFov$ = -80						; size = 4
_minute$25 = -76					; size = 4
_sec$26 = -72						; size = 4
_dy$ = -68						; size = 4
_dx$ = -64						; size = 4
_ttg$27 = -60						; size = 4
_this$ = -56						; size = 4
_center$ = -52						; size = 12
_tmpStr$28 = -40					; size = 24
_str$29 = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
?GMDisplay@RadarDopplerClass@@IAEXXZ PROC		; RadarDopplerClass::GMDisplay
; _this$ = ecx

; 1113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1114 : 	//START_PROFILE("GMDISPLAY");
; 1115 : 	Tpoint			center;
; 1116 : 	int				i=0;

	mov	DWORD PTR _i$[ebp], 0

; 1117 : 	float			len=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _len$[ebp], xmm0

; 1118 : 	int				curFov=0;

	mov	DWORD PTR _curFov$[ebp], 0

; 1119 : 	float			dx=0.0F, dy=0.0F, dz=0.0F, cosAz=0.0F, sinAz=0.0F, rx=0.0F, ry=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cosAz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sinAz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _rx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ry$[ebp], xmm0

; 1120 : 	float			groundLookEl=0.0F, baseAz=0.0F, baseEl=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _groundLookEl$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _baseAz$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _baseEl$[ebp], xmm0

; 1121 : 	int				beamPercent=0;

	mov	DWORD PTR _beamPercent$[ebp], 0

; 1122 : 	mlTrig			trig={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _trig$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _trig$[ebp+4], eax

; 1123 : 	float			vpLeft=0.0F, vpTop=0.0F, vpRight=0.0F, vpBottom=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vpLeft$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vpTop$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vpRight$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vpBottom$[ebp], xmm0

; 1124 : 	int				tmpColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tmpColor$[ebp], eax

; 1125 : 	
; 1126 : 	// Mode Step ?
; 1127 : 	if (fovStepCmd)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+160], 0
	je	$LN147@GMDisplay

; 1128 : 	{
; 1129 : 		fovStepCmd = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+160], 0

; 1130 : 		curFov = flags & 0x0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _curFov$[ebp], ecx

; 1131 : 		flags -= curFov;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	sub	eax, DWORD PTR _curFov$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+492], eax

; 1132 : 		curFov = curFov << 1;

	mov	edx, DWORD PTR _curFov$[ebp]
	shl	edx, 1
	mov	DWORD PTR _curFov$[ebp], edx

; 1133 : 		if (mode == GM && displayRange <= 40.0F)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 14			; 0000000eH
	jne	SHORT $LN146@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42200000
	comiss	xmm0, DWORD PTR [ecx+212]
	jb	SHORT $LN146@GMDisplay

; 1134 : 		{
; 1135 : 			if (curFov > DBS2)

	cmp	DWORD PTR _curFov$[ebp], 8
	jle	SHORT $LN145@GMDisplay

; 1136 : 				curFov = NORM;

	mov	DWORD PTR _curFov$[ebp], 1
$LN145@GMDisplay:

; 1137 : 		}
; 1138 : 		else

	jmp	SHORT $LN143@GMDisplay
$LN146@GMDisplay:

; 1139 : 		{
; 1140 : 			if (curFov > EXP)

	cmp	DWORD PTR _curFov$[ebp], 2
	jle	SHORT $LN143@GMDisplay

; 1141 : 				curFov = NORM;

	mov	DWORD PTR _curFov$[ebp], 1
$LN143@GMDisplay:

; 1142 : 		}
; 1143 : 		flags += curFov;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	add	eax, DWORD PTR _curFov$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+492], eax

; 1144 : 		SetGMScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGMScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetGMScan
$LN147@GMDisplay:

; 1145 : 	}
; 1146 : 	
; 1147 : 	// Find lookat point
; 1148 : 	if (!(flags & FZ))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 32					; 00000020H
	jne	$LN142@GMDisplay

; 1149 : 	{
; 1150 : 		viewFrom.x = platform->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _viewFrom

; 1151 : 		viewFrom.y = platform->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _viewFrom+4

; 1152 : 		viewFrom.z = platform->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _viewFrom+8

; 1153 : 		
; 1154 : 		headingForDisplay = platform->Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _headingForDisplay

; 1155 : 		mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1156 : 		if (!lockedTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	$LN141@GMDisplay

; 1157 : 		{
; 1158 : 			if (IsSet(SP) && (!IsSet(SP_STAB)))  // (flags & SP) // MD -- 20040215: make sure we don't snow plow after ground stabilizing!

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN140@GMDisplay
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN140@GMDisplay

; 1159 : 			{
; 1160 : 				// We're in snowplow, so look out in front of the aircraft
; 1161 : 				GMat.x = viewFrom.x + tdisplayRange * 0.5F * trig.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	addss	xmm0, DWORD PTR _viewFrom
	movss	DWORD PTR _GMat, xmm0

; 1162 : 				GMat.y = viewFrom.y + tdisplayRange * 0.5F * trig.sin;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _trig$[ebp]
	addss	xmm0, DWORD PTR _viewFrom+4
	movss	DWORD PTR _GMat+4, xmm0

; 1163 : 			}
; 1164 : 			else

	jmp	SHORT $LN139@GMDisplay
$LN140@GMDisplay:

; 1165 : 			{
; 1166 : 				// We're in steer point mode, so look there
; 1167 : 				GMat.x = viewCenter.x;

	movss	xmm0, DWORD PTR _viewCenter
	movss	DWORD PTR _GMat, xmm0

; 1168 : 				GMat.y = viewCenter.y;

	movss	xmm0, DWORD PTR _viewCenter+4
	movss	DWORD PTR _GMat+4, xmm0
$LN139@GMDisplay:

; 1169 : 			}
; 1170 : 			
; 1171 : 			if (!(flags & NORM))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 1
	jne	SHORT $LN138@GMDisplay

; 1172 : 			{
; 1173 : 				// We're zoomed in, so track the cursors
; 1174 : 				GMat.x += viewOffsetInertial.x;

	movss	xmm0, DWORD PTR _GMat
	addss	xmm0, DWORD PTR _viewOffsetInertial
	movss	DWORD PTR _GMat, xmm0

; 1175 : 				GMat.y += viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _GMat+4
	addss	xmm0, DWORD PTR _viewOffsetInertial+4
	movss	DWORD PTR _GMat+4, xmm0
$LN138@GMDisplay:

; 1176 : 			}
; 1177 : 		}
; 1178 : 		else 

	jmp	$LN133@GMDisplay
$LN141@GMDisplay:

; 1179 : 		{
; 1180 : 			if (!(flags & NORM))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	jne	SHORT $LN136@GMDisplay

; 1181 : 			{
; 1182 : 				// We're zoomed in, so look at the target
; 1183 : 				GMat.x = lockedTarget->BaseData()->XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _GMat

; 1184 : 				GMat.y = lockedTarget->BaseData()->YPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _GMat+4
	jmp	$LN133@GMDisplay
$LN136@GMDisplay:

; 1185 : 			}
; 1186 : 			else if (IsSet(SP) && (!IsSet(SP_STAB)))  // (flags & SP) // MD -- 20040215: if we aren't SP ground stabilized

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN134@GMDisplay
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	$LN134@GMDisplay

; 1187 : 			{
; 1188 : 				// We're in snowplow, so look out in front of the aircraft
; 1189 : 				GMat.x = viewFrom.x + tdisplayRange * 0.5F * trig.cos;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	addss	xmm0, DWORD PTR _viewFrom
	movss	DWORD PTR _GMat, xmm0

; 1190 : 				GMat.y = viewFrom.y + tdisplayRange * 0.5F * trig.sin;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _trig$[ebp]
	addss	xmm0, DWORD PTR _viewFrom+4
	movss	DWORD PTR _GMat+4, xmm0

; 1191 : 				viewOffsetInertial.x = lockedTarget->BaseData()->XPos() - GMat.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3110[ebp]
	movss	xmm0, DWORD PTR tv3110[ebp]
	subss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 1192 : 				viewOffsetInertial.y = lockedTarget->BaseData()->YPos() - GMat.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3116[ebp]
	movss	xmm0, DWORD PTR tv3116[ebp]
	subss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR _viewOffsetInertial+4, xmm0

; 1193 : 			}
; 1194 : 			else

	jmp	SHORT $LN133@GMDisplay
$LN134@GMDisplay:

; 1195 : 			{
; 1196 : 				// We're in steer point NORM mode, so look there
; 1197 : 				GMat.x = viewCenter.x;

	movss	xmm0, DWORD PTR _viewCenter
	movss	DWORD PTR _GMat, xmm0

; 1198 : 				GMat.y = viewCenter.y;

	movss	xmm0, DWORD PTR _viewCenter+4
	movss	DWORD PTR _GMat+4, xmm0
$LN133@GMDisplay:

; 1199 : 			}
; 1200 : 		}
; 1201 : 		
; 1202 : 		GMat.z  = OTWDriver.GetGroundLevel (GMat.x, GMat.y);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _GMat+8

; 1203 : 		
; 1204 : 		groundDesignateX = GMat.x;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR [ecx+456], xmm0

; 1205 : 		groundDesignateY = GMat.y;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR [edx+460], xmm0

; 1206 : 		groundDesignateZ = GMat.z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _GMat+8
	movss	DWORD PTR [eax+464], xmm0

; 1207 : 	}
; 1208 : 	else

	jmp	SHORT $LN132@GMDisplay
$LN142@GMDisplay:

; 1209 : 	{
; 1210 : 		mlSinCos (&trig, headingForDisplay);

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8
$LN132@GMDisplay:

; 1211 : 	}
; 1212 : 	
; 1213 : 	// We now now where the radar is looking.  Now decide where the display is centered
; 1214 : 	if (flags & NORM)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	je	SHORT $LN131@GMDisplay

; 1215 : 	{
; 1216 : 		center.x = viewFrom.x + tdisplayRange * 0.5F * trig.cos;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _trig$[ebp+4]
	addss	xmm0, DWORD PTR _viewFrom
	movss	DWORD PTR _center$[ebp], xmm0

; 1217 : 		center.y = viewFrom.y + tdisplayRange * 0.5F * trig.sin;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _trig$[ebp]
	addss	xmm0, DWORD PTR _viewFrom+4
	movss	DWORD PTR _center$[ebp+4], xmm0

; 1218 : 	}
; 1219 : 	else

	jmp	SHORT $LN130@GMDisplay
$LN131@GMDisplay:

; 1220 : 	{
; 1221 : 		center.x = GMat.x;

	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR _center$[ebp], xmm0

; 1222 : 		center.y = GMat.y;

	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR _center$[ebp+4], xmm0
$LN130@GMDisplay:

; 1223 : 	}
; 1224 : 	
; 1225 : 	// Find inertial display center
; 1226 : 	cosAz = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 1227 : 	sinAz = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 1228 : 	dx = GMat.x - viewFrom.x;

	movss	xmm0, DWORD PTR _GMat
	subss	xmm0, DWORD PTR _viewFrom
	movss	DWORD PTR _dx$[ebp], xmm0

; 1229 : 	dy = GMat.y - viewFrom.y;

	movss	xmm0, DWORD PTR _GMat+4
	subss	xmm0, DWORD PTR _viewFrom+4
	movss	DWORD PTR _dy$[ebp], xmm0

; 1230 : 	dz = GMat.z - viewFrom.z;

	movss	xmm0, DWORD PTR _GMat+8
	subss	xmm0, DWORD PTR _viewFrom+8
	movss	DWORD PTR _dz$[ebp], xmm0

; 1231 : 	
; 1232 : 	groundLookAz = (float)atan2 (dy, dx);

	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+468]

; 1233 : 	groundLookEl = (float)atan (-dz / (float)sqrt(dy*dy + dx*dx+.1f));

	movss	xmm0, DWORD PTR _dz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	movss	xmm2, DWORD PTR _dx$[ebp]
	mulss	xmm2, DWORD PTR _dx$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv4522[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv3162[ebp]
	movss	xmm0, DWORD PTR tv4522[ebp]
	divss	xmm0, DWORD PTR tv3162[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _groundLookEl$[ebp]

; 1234 : 
; 1235 : 	// Update the deltas if the cursor is off center
; 1236 : 	if (flags & NORM)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 1
	je	$LN129@GMDisplay

; 1237 : 	{
; 1238 : 		dx += viewOffsetInertial.x; 

	movss	xmm0, DWORD PTR _dx$[ebp]
	addss	xmm0, DWORD PTR _viewOffsetInertial
	movss	DWORD PTR _dx$[ebp], xmm0

; 1239 : 		dy += viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _dy$[ebp]
	addss	xmm0, DWORD PTR _viewOffsetInertial+4
	movss	DWORD PTR _dy$[ebp], xmm0

; 1240 : 		dz  = OTWDriver.GetGroundLevel (GMat.x + viewOffsetInertial.x, GMat.y + viewOffsetInertial.y) - viewFrom.z;

	push	0
	movss	xmm0, DWORD PTR _GMat+4
	addss	xmm0, DWORD PTR _viewOffsetInertial+4
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _GMat
	addss	xmm0, DWORD PTR _viewOffsetInertial
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv3177[ebp]
	movss	xmm0, DWORD PTR tv3177[ebp]
	subss	xmm0, DWORD PTR _viewFrom+8
	movss	DWORD PTR _dz$[ebp], xmm0

; 1241 : 		
; 1242 : 		// position the seeker volume center
; 1243 : 		baseAz = (float)atan2 (dy, dx);

	cvtss2sd xmm0, DWORD PTR _dx$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _dy$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _baseAz$[ebp]

; 1244 : 		baseEl = (float)atan (-dz / (float)sqrt(dy*dy + dx*dx+.1f));

	movss	xmm0, DWORD PTR _dz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	movss	xmm2, DWORD PTR _dx$[ebp]
	mulss	xmm2, DWORD PTR _dx$[ebp]
	addss	xmm1, xmm2
	addss	xmm1, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv4524[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv3190[ebp]
	movss	xmm0, DWORD PTR tv4524[ebp]
	divss	xmm0, DWORD PTR tv3190[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?atan@@YAMM@Z				; atan
	add	esp, 4
	fstp	DWORD PTR _baseEl$[ebp]

; 1245 : 	} 
; 1246 : 	else {

	jmp	SHORT $LN128@GMDisplay
$LN129@GMDisplay:

; 1247 : 		// position the seeker volume center
; 1248 : 		baseAz = groundLookAz;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+468]
	movss	DWORD PTR _baseAz$[ebp], xmm0

; 1249 : 		baseEl = groundLookEl;

	movss	xmm0, DWORD PTR _groundLookEl$[ebp]
	movss	DWORD PTR _baseEl$[ebp], xmm0
$LN128@GMDisplay:

; 1250 : 	}
; 1251 : 	
; 1252 : 	
; 1253 : 	// Position the cursor
; 1254 : 	cursorY = ( cosAz*dx + sinAz*dy) / (tdisplayRange * 0.5F) - 1.0F;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+264]
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+224], xmm0

; 1255 : 	cursorX = (-sinAz*dx + cosAz*dy) / (tdisplayRange * 0.5F);

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+264]
	mulss	xmm1, DWORD PTR __real@3f000000
	divss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+220], xmm0

; 1256 : 	
; 1257 : 	
; 1258 : 	cursorX = max ( min (cursorX, 0.95F), -0.95F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR [edx+220]
	jbe	SHORT $LN150@GMDisplay
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR tv376[ebp], xmm0
	jmp	SHORT $LN151@GMDisplay
$LN150@GMDisplay:
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR tv376[ebp], xmm0
$LN151@GMDisplay:
	movss	xmm0, DWORD PTR tv376[ebp]
	comiss	xmm0, DWORD PTR __real@bf733333
	jbe	SHORT $LN154@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR [ecx+220]
	jbe	SHORT $LN152@GMDisplay
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR tv383[ebp], xmm0
	jmp	SHORT $LN153@GMDisplay
$LN152@GMDisplay:
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR tv383[ebp], xmm0
$LN153@GMDisplay:
	movss	xmm0, DWORD PTR tv383[ebp]
	movss	DWORD PTR tv384[ebp], xmm0
	jmp	SHORT $LN155@GMDisplay
$LN154@GMDisplay:
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR tv384[ebp], xmm0
$LN155@GMDisplay:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv384[ebp]
	movss	DWORD PTR [eax+220], xmm0

; 1259 : 	cursorY = max ( min (cursorY, 0.95F), -0.95F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR [ecx+224]
	jbe	SHORT $LN156@GMDisplay
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR tv391[ebp], xmm0
	jmp	SHORT $LN157@GMDisplay
$LN156@GMDisplay:
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR tv391[ebp], xmm0
$LN157@GMDisplay:
	movss	xmm0, DWORD PTR tv391[ebp]
	comiss	xmm0, DWORD PTR __real@bf733333
	jbe	SHORT $LN160@GMDisplay
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR [eax+224]
	jbe	SHORT $LN158@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR tv398[ebp], xmm0
	jmp	SHORT $LN159@GMDisplay
$LN158@GMDisplay:
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR tv398[ebp], xmm0
$LN159@GMDisplay:
	movss	xmm0, DWORD PTR tv398[ebp]
	movss	DWORD PTR tv399[ebp], xmm0
	jmp	SHORT $LN161@GMDisplay
$LN160@GMDisplay:
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR tv399[ebp], xmm0
$LN161@GMDisplay:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv399[ebp]
	movss	DWORD PTR [edx+224], xmm0

; 1260 : 	
; 1261 : 	
; 1262 : 	// remove body rotations
; 1263 : 	seekerAzCenter =  baseAz - platform->Yaw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv3237[ebp]
	movss	xmm0, DWORD PTR _baseAz$[ebp]
	subss	xmm0, DWORD PTR tv3237[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 1264 : 	if (seekerAzCenter > 180.0F * DTR)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	comiss	xmm0, DWORD PTR __real@40490fd9
	jbe	SHORT $LN127@GMDisplay

; 1265 : 		seekerAzCenter -= 360.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	subss	xmm0, DWORD PTR __real@40c90fd9
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+56], xmm0
	jmp	SHORT $LN125@GMDisplay
$LN127@GMDisplay:

; 1266 : 	else if (seekerAzCenter < -180.0F * DTR)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c0490fd9
	comiss	xmm0, DWORD PTR [edx+56]
	jbe	SHORT $LN125@GMDisplay

; 1267 : 		seekerAzCenter += 360.0F * DTR;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	addss	xmm0, DWORD PTR __real@40c90fd9
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+56], xmm0
$LN125@GMDisplay:

; 1268 : 	seekerElCenter = baseEl - platform->Pitch();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv3254[ebp]
	movss	xmm0, DWORD PTR _baseEl$[ebp]
	subss	xmm0, DWORD PTR tv3254[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 1269 : 
; 1270 : 	// Blown antenna limit?
; 1271 : 	if (fabs(seekerAzCenter) > MAX_ANT_EL)

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv3263[ebp]
	movss	xmm0, DWORD PTR tv3263[ebp]
	comiss	xmm0, DWORD PTR __real@3f860a91
	jbe	$LN124@GMDisplay

; 1272 : 	{
; 1273 : 		//MI why would we want to do this?
; 1274 : 		if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN122@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	jne	SHORT $LN123@GMDisplay
$LN122@GMDisplay:

; 1275 : 		{
; 1276 : 			viewOffsetRel.x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel, xmm0

; 1277 : 			viewOffsetRel.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 1278 : 			SetAimPoint (0.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAimPoint@RadarDopplerClass@@IAEXMM@Z ; RadarDopplerClass::SetAimPoint

; 1279 : 			seekerAzCenter = 0.0F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+56], xmm0
	jmp	SHORT $LN118@GMDisplay
$LN123@GMDisplay:

; 1280 : 		}
; 1281 : 		else if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN118@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	SHORT $LN118@GMDisplay

; 1282 : 		{
; 1283 : 			if(seekerAzCenter > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+56]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN119@GMDisplay

; 1284 : 				seekerAzCenter = MAX_ANT_EL;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR [edx+56], xmm0

; 1285 : 			else

	jmp	SHORT $LN118@GMDisplay
$LN119@GMDisplay:

; 1286 : 				seekerAzCenter = -MAX_ANT_EL;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf860a91
	movss	DWORD PTR [eax+56], xmm0
$LN118@GMDisplay:

; 1287 : 		}
; 1288 : 		curFov = flags & 0x0f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _curFov$[ebp], edx

; 1289 : 		flags -= curFov;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	sub	ecx, DWORD PTR _curFov$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], ecx

; 1290 : 		flags += NORM;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], ecx

; 1291 : 		SetGMScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGMScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetGMScan

; 1292 : 		DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
$LN124@GMDisplay:

; 1293 : 	}
; 1294 : 
; 1295 : 	//STOP_PROFILE("GMDISPLAY");
; 1296 : 	// Draw the GM Display
; 1297 : 	if (display)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN27@GMDisplay

; 1298 : 	{
; 1299 : 		//START_PROFILE("GMDISPLAY DRAW1");
; 1300 : 		// Draw the actual image in the center
; 1301 : 		display->GetViewport (&vpLeft, &vpTop, &vpRight, &vpBottom);

	lea	ecx, DWORD PTR _vpBottom$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vpRight$[ebp]
	push	edx
	lea	eax, DWORD PTR _vpTop$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vpLeft$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?GetViewport@VirtualDisplay@@QAEXPAM000@Z ; VirtualDisplay::GetViewport

; 1302 : 		display->SetViewportRelative (DisplayAreaViewLeft, DisplayAreaViewTop, DisplayAreaViewRight, DisplayAreaViewBottom);

	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewBottom
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewRight
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewTop
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewLeft
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+116]
	call	edx

; 1303 : 		
; 1304 : 		// edg: DON'T DRAW when the display is a CANVAS
; 1305 : 		{
; 1306 : 			if (gainCmd != 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+136]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN116@GMDisplay

; 1307 : 			{
; 1308 : 				if(gainCmd < 1)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [ecx+136]
	jbe	SHORT $LN115@GMDisplay

; 1309 : 					GainPos -= 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+944]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+944], xmm0

; 1310 : 				else

	jmp	SHORT $LN114@GMDisplay
$LN115@GMDisplay:

; 1311 : 					GainPos += 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+944]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+944], xmm0
$LN114@GMDisplay:

; 1312 : 				if (GainPos < -5) 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c0a00000
	comiss	xmm0, DWORD PTR [eax+944]
	jbe	SHORT $LN113@GMDisplay

; 1313 : 					GainPos = -5;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR [ecx+944], xmm0
$LN113@GMDisplay:

; 1314 : 				if(GainPos > 20)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+944]
	comiss	xmm0, DWORD PTR __real@41a00000
	jbe	SHORT $LN112@GMDisplay

; 1315 : 					GainPos = 20;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [eax+944], xmm0
$LN112@GMDisplay:

; 1316 : 				if (GainPos < 0) 

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+944]
	jbe	SHORT $LN111@GMDisplay

; 1317 : 					curgain = 1 * pow(0.8f, - GainPos); //JAM 27Sep03 - These are floats

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+944]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv3332[ebp]
	movss	xmm0, DWORD PTR tv3332[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+948], xmm0
	jmp	SHORT $LN108@GMDisplay
$LN111@GMDisplay:

; 1318 : 				else if (GainPos > 0)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+944]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN109@GMDisplay

; 1319 : 					curgain = 1 * pow(1.25f, GainPos); //JAM 27Sep03 - These are floats

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+944]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3fa00000
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv3345[ebp]
	movss	xmm0, DWORD PTR tv3345[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+948], xmm0

; 1320 : 				else 

	jmp	SHORT $LN108@GMDisplay
$LN109@GMDisplay:

; 1321 : 					curgain = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+948], xmm0
$LN108@GMDisplay:

; 1322 : 				
; 1323 : 				//MI
; 1324 : 				if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN106@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	jne	SHORT $LN107@GMDisplay
$LN106@GMDisplay:

; 1325 : 					((RenderGMComposite*)display)->SetGain(((RenderGMComposite*)display)->GetGain()*gainCmd);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetGain@RenderGMComposite@@QAEMXZ	; RenderGMComposite::GetGain
	fstp	DWORD PTR tv3354[ebp]
	movss	xmm0, DWORD PTR tv3354[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+136]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?SetGain@RenderGMComposite@@QAEXM@Z	; RenderGMComposite::SetGain

; 1326 : 				else

	jmp	SHORT $LN105@GMDisplay
$LN107@GMDisplay:

; 1327 : 					((RenderGMComposite*)display)->SetGain(curgain);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+948]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?SetGain@RenderGMComposite@@QAEXM@Z	; RenderGMComposite::SetGain
$LN105@GMDisplay:

; 1328 : 				
; 1329 : 				gainCmd = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+136], xmm0
$LN116@GMDisplay:

; 1330 : 			}
; 1331 : 			
; 1332 : 			// MD -- 20040108: if the RNG knob is mapped to an analog axis, then the key commands are
; 1333 : 			// equivalent to the GAIN rocker switch on the top corner of the MFD -- the rocker sets the
; 1334 : 			// baseline value and then the change in value of the RNG knob can add or subtract 20% of the
; 1335 : 			// set baseline depending on direction of rotation and absolute magnitude of the movement.  Note:
; 1336 : 			// this means that if you enter GM modes with the knob positioned all the way at one end of its
; 1337 : 			// travel, there won't be a way to change the gain in that direction of travel using the knob.
; 1338 : 			// Strange but true: that's how it works in the real thing apparently.
; 1339 : 			// At the limits of the gain range, the knob should activate "synthetic enhancement" of the radar
; 1340 : 			// picture.  Since the current radar model doesn't support that, For now this code merely
; 1341 : 			// overdrives the gain for want of something better to do!
; 1342 : 			
; 1343 : 			if (IO.AnalogIsUsed(AXIS_RANGE_KNOB)) {

	push	13					; 0000000dH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	test	ecx, ecx
	je	$LN103@GMDisplay

; 1344 : 				int CurrentPos = IO.GetAxisValue(AXIS_RANGE_KNOB);

	push	13					; 0000000dH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::GetAxisValue
	mov	DWORD PTR _CurrentPos$16[ebp], eax

; 1345 : 				if (CurrentPos != lastRngKnobPos) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _CurrentPos$16[ebp]
	cmp	eax, DWORD PTR [edx+952]
	je	$LN103@GMDisplay

; 1346 : 					float diff = ((float)abs(CurrentPos - lastRngKnobPos) / 10000.0F) * (0.4F * curgain); // +/-20% -> 40% range total variation(?)...looks better so assume yes ;)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _CurrentPos$16[ebp]
	sub	edx, DWORD PTR [ecx+952]
	push	edx
	call	_abs
	add	esp, 4
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@461c4000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR __real@3ecccccd
	mulss	xmm1, DWORD PTR [eax+948]
	mulss	xmm0, xmm1
	movss	DWORD PTR _diff$13[ebp], xmm0

; 1347 : 					float newgain = ((RenderGMComposite*)display)->GetGain();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetGain@RenderGMComposite@@QAEMXZ	; RenderGMComposite::GetGain
	fstp	DWORD PTR _newgain$19[ebp]

; 1348 : 					if (CurrentPos > lastRngKnobPos)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _CurrentPos$16[ebp]
	cmp	eax, DWORD PTR [edx+952]
	jle	SHORT $LN102@GMDisplay

; 1349 : 						newgain += diff;

	movss	xmm0, DWORD PTR _newgain$19[ebp]
	addss	xmm0, DWORD PTR _diff$13[ebp]
	movss	DWORD PTR _newgain$19[ebp], xmm0

; 1350 : 					else

	jmp	SHORT $LN101@GMDisplay
$LN102@GMDisplay:

; 1351 : 						newgain -= diff;

	movss	xmm0, DWORD PTR _newgain$19[ebp]
	subss	xmm0, DWORD PTR _diff$13[ebp]
	movss	DWORD PTR _newgain$19[ebp], xmm0
$LN101@GMDisplay:

; 1352 : 					((RenderGMComposite*)display)->SetGain(newgain);

	push	ecx
	movss	xmm0, DWORD PTR _newgain$19[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?SetGain@RenderGMComposite@@QAEXM@Z	; RenderGMComposite::SetGain

; 1353 : 					lastRngKnobPos = CurrentPos;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _CurrentPos$16[ebp]
	mov	DWORD PTR [edx+952], eax
$LN103@GMDisplay:

; 1354 : 				}
; 1355 : 			}
; 1356 : 			
; 1357 : 			if(InitGain && g_bRealisticAvionics && g_bAGRadarFixes)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+956]
	test	edx, edx
	je	$LN100@GMDisplay
	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN100@GMDisplay
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	$LN100@GMDisplay

; 1358 : 			{
; 1359 : 				curgain = 1 * pow(1.25f, GainPos); //JAM 27Sep03 - These are floats

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+944]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3fa00000
	movss	DWORD PTR [esp], xmm0
	call	?pow@@YAMMM@Z				; pow
	add	esp, 8
	fstp	DWORD PTR tv3394[ebp]
	movss	xmm0, DWORD PTR tv3394[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+948], xmm0

; 1360 : 				((RenderGMComposite*)display)->SetGain(curgain);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+948]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?SetGain@RenderGMComposite@@QAEXM@Z	; RenderGMComposite::SetGain

; 1361 : 				// MD -- 20040108: save knob position on INIT if analog axis is mapped to RNG
; 1362 : 				if (IO.AnalogIsUsed(AXIS_RANGE_KNOB)) 

	push	13					; 0000000dH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN99@GMDisplay

; 1363 : 					lastRngKnobPos = IO.GetAxisValue(AXIS_RANGE_KNOB);

	push	13					; 0000000dH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?GetAxisValue@SIMLIB_IO_CLASS@@QAEHW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::GetAxisValue
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+952], eax
$LN99@GMDisplay:

; 1364 : 				InitGain = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+956], 0
$LN100@GMDisplay:

; 1365 : 			}
; 1366 : 			
; 1367 : 			if (!(flags & FZ))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 32					; 00000020H
	jne	$LN98@GMDisplay

; 1368 : 			{
; 1369 : 				// Decide how far along the beam scan is
; 1370 : 				if (beamAz >  azScan) 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+196]
	comiss	xmm0, DWORD PTR [eax+204]
	jbe	SHORT $LN97@GMDisplay

; 1371 : 					beamAz =  azScan;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	mov	DWORD PTR [ecx+196], eax
$LN97@GMDisplay:

; 1372 : 				if (beamAz < -azScan) 

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+204]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [edx+196]
	jbe	SHORT $LN96@GMDisplay

; 1373 : 					beamAz = -azScan;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+204]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+196], xmm0
$LN96@GMDisplay:

; 1374 : 				float tempres = beamAz/azScan;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+196]
	divss	xmm0, DWORD PTR [eax+204]
	movss	DWORD PTR _tempres$2[ebp], xmm0

; 1375 : 				beamPercent = FloatToInt32((1.0f + beamAz/azScan) * 50.0f);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+196]
	divss	xmm0, DWORD PTR [edx+204]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@42480000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _beamPercent$[ebp], eax

; 1376 : 				if (scanDir == ScanRev)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+252]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN95@GMDisplay

; 1377 : 				{
; 1378 : 					beamPercent = 100 - beamPercent;

	mov	ecx, 100				; 00000064H
	sub	ecx, DWORD PTR _beamPercent$[ebp]
	mov	DWORD PTR _beamPercent$[ebp], ecx
$LN95@GMDisplay:

; 1379 : 				}
; 1380 : 				
; 1381 : 				// OW
; 1382 : 				//((RenderGMComposite*)display)->EndDraw();
; 1383 : 				
; 1384 : 				// Advance the beam
; 1385 : 				ShiAssert( beamPercent <= 100 );
; 1386 : 				// From, At, Center == Ownship, Look Point, Center of MFD in world
; 1387 : 				
; 1388 : 				// 2002-04-03 MN send the seekers current center to SetBeam to modify the gimbal borders
; 1389 : 				float cursorAngle = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _cursorAngle$12[ebp], xmm0

; 1390 : 				if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN93@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	SHORT $LN93@GMDisplay

; 1391 : 				{
; 1392 : 					float value = 60.0F * DTR;

	movss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR _value$4[ebp], xmm0

; 1393 : 					if(azScan < value)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _value$4[ebp]
	comiss	xmm0, DWORD PTR [ecx+204]
	jbe	SHORT $LN93@GMDisplay

; 1394 : 						cursorAngle = seekerAzCenter;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+56]
	movss	DWORD PTR _cursorAngle$12[ebp], xmm0
$LN93@GMDisplay:

; 1395 : 				}
; 1396 : 				
; 1397 : 			//((RenderGMComposite*)display)->StartDraw();
; 1398 : 				((RenderGMComposite*)display)->SetBeam( &viewFrom, &GMat, &center, headingForDisplay, baseAz+beamAz, beamPercent, cursorAngle, (scanDir==ScanFwd), (flags & ( DBS1 |DBS2))?true:false);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 12					; 0000000cH
	je	SHORT $LN162@GMDisplay
	mov	BYTE PTR tv816[ebp], 1
	jmp	SHORT $LN163@GMDisplay
$LN162@GMDisplay:
	mov	BYTE PTR tv816[ebp], 0
$LN163@GMDisplay:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+252]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN164@GMDisplay
	mov	DWORD PTR tv820[ebp], 1
	jmp	SHORT $LN165@GMDisplay
$LN164@GMDisplay:
	mov	DWORD PTR tv820[ebp], 0
$LN165@GMDisplay:
	movzx	eax, BYTE PTR tv816[ebp]
	push	eax
	mov	ecx, DWORD PTR tv820[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _cursorAngle$12[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _beamPercent$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _baseAz$[ebp]
	addss	xmm0, DWORD PTR [eax+196]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _center$[ebp]
	push	ecx
	push	OFFSET _GMat
	push	OFFSET _viewFrom
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?SetBeam@RenderGMComposite@@QAEXPAUTpoint@@00MMHMH_N@Z ; RenderGMComposite::SetBeam
$LN98@GMDisplay:

; 1399 : 			}
; 1400 : 			
; 1401 : 			// OW - restore render target and start new scene
; 1402 : 			((RenderGMComposite*)display)->StartDraw();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+12]
	call	edx

; 1403 : 
; 1404 : 			// COBRA - RED - Started a New Frame, assert again view port
; 1405 : 			display->SetViewport (vpLeft, vpTop, vpRight, vpBottom);

	push	ecx
	movss	xmm0, DWORD PTR _vpBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpRight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpLeft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+112]
	call	edx

; 1406 : 			display->SetViewportRelative (DisplayAreaViewLeft, DisplayAreaViewTop, DisplayAreaViewRight, DisplayAreaViewBottom);

	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewBottom
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewRight
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewTop
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _DisplayAreaViewLeft
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+116]
	call	edx

; 1407 : 
; 1408 : 			// Generate the radar imagery
; 1409 : 			//MI
; 1410 : 			if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN92@GMDisplay
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN92@GMDisplay

; 1411 : 			{
; 1412 : 				if(!lockedTarget)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN91@GMDisplay

; 1413 : 					((RenderGMComposite*)display)->DrawComposite( &center, headingForDisplay );

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _center$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?DrawComposite@RenderGMComposite@@QAEXPAUTpoint@@M@Z ; RenderGMComposite::DrawComposite
$LN91@GMDisplay:

; 1414 : 			}
; 1415 : 			else

	jmp	SHORT $LN90@GMDisplay
$LN92@GMDisplay:

; 1416 : 				((RenderGMComposite*)display)->DrawComposite( &center, headingForDisplay );

	push	ecx
	movss	xmm0, DWORD PTR _headingForDisplay
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?DrawComposite@RenderGMComposite@@QAEXPAUTpoint@@M@Z ; RenderGMComposite::DrawComposite
$LN90@GMDisplay:

; 1417 : 			
; 1418 : 			
; 1419 : //						((RenderGMComposite*)display)->FinishFrame();
; 1420 : //						((RenderGMComposite*)display)->DebugDrawRadarImage( OTWDriver.OTWImage );
; 1421 : //						((RenderGMComposite*)display)->StartFrame();
; 1422 : //						((RenderGMComposite*)display)->DebugDrawLeftTexture( OTWDriver.renderer );
; 1423 : 			
; 1424 : #if 0
; 1425 : 			{
; 1426 : 				float	dx, dy;
; 1427 : 				char	string[80];
; 1428 : 				
; 1429 : 				dx = GMat.x-viewFrom.x;
; 1430 : 				dy = GMat.y-viewFrom.y;
; 1431 : 				
; 1432 : 				sprintf( string, "beamAz %0f, beamDir %0d, beamPercent %0d", beamAz * 180.0f/PI, (scanDir==ScanFwd)?1:-1, beamPercent );
; 1433 : 				display->ScreenText( 320.0f, 10.0f, string );
; 1434 : 				
; 1435 : 				sprintf( string, "from <%0f,%0f>  at <%0f,%0f>", viewFrom.x, viewFrom.y, GMat.x, GMat.y );
; 1436 : 				display->ScreenText( 320.0f, 18.0f, string );
; 1437 : 				
; 1438 : 				sprintf( string, "dx %0f, dy%0f, lookAngle %0f", dx, dy, atan2(dx,dy)*180.0f/PI );
; 1439 : 				display->ScreenText( 320.0f, 26.0f, string );
; 1440 : 			}
; 1441 : #endif
; 1442 : 			
; 1443 : 		} 
; 1444 : 
; 1445 : 
; 1446 : 		//STOP_PROFILE("GMDISPLAY DRAW1");
; 1447 : 		//START_PROFILE("GMDISPLAY DRAW2");
; 1448 : 
; 1449 : 		// Make sure to draw in green
; 1450 : 		display->SetColor (tmpColor);

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1451 : 		
; 1452 : 		// Add the Airplane if in freeze mode
; 1453 : 		if (flags & FZ)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 32					; 00000020H
	je	$LN89@GMDisplay

; 1454 : 		{
; 1455 : 			// Note the axis switch from NED to screen
; 1456 : 			dx = platform->XPos() - GMXCenter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv3502[ebp]
	movss	xmm0, DWORD PTR tv3502[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [ecx+524]
	movss	DWORD PTR _dx$[ebp], xmm0

; 1457 : 			dy = platform->YPos() - GMYCenter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv3508[ebp]
	movss	xmm0, DWORD PTR tv3508[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subss	xmm0, DWORD PTR [eax+528]
	movss	DWORD PTR _dy$[ebp], xmm0

; 1458 : 			
; 1459 : 			ry = trig.cos * dx + trig.sin * dy;//me123 from - to +

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _ry$[ebp], xmm0

; 1460 : 			rx = -trig.sin * dx + trig.cos * dy;//me123 from + to -

	movss	xmm0, DWORD PTR _trig$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _rx$[ebp], xmm0

; 1461 : 			
; 1462 : 			rx /= groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rx$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _rx$[ebp], xmm0

; 1463 : 			ry /= groundMapRange;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ry$[ebp]
	divss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR _ry$[ebp], xmm0

; 1464 : 			
; 1465 : 			display->AdjustOriginInViewport (rx, ry);

	push	ecx
	movss	xmm0, DWORD PTR _ry$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rx$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1466 : 			display->AdjustRotationAboutOrigin(platform->Yaw() - headingForDisplay);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv3527[ebp]
	movss	xmm0, DWORD PTR tv3527[ebp]
	subss	xmm0, DWORD PTR _headingForDisplay
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 1467 : 			//display->Line (0.1F, 0.0F, -0.1F, 0.0F);  //JPG 4 Mar 03  Make a circle with a line stickin' out
; 1468 : 			display->Circle (0.0F, 0.0F, 0.05F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+48]
	call	edx

; 1469 : 			display->Line (0.0F, 0.13F, 0.0F, -0.01F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bc23d70a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e051eb8
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1470 : 			display->ZeroRotationAboutOrigin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 1471 : 			display->AdjustOriginInViewport (-rx, -ry);

	movss	xmm0, DWORD PTR _ry$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rx$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport
$LN89@GMDisplay:

; 1472 : 		}
; 1473 : 		
; 1474 : 		if (flags & NORM)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	je	$LN88@GMDisplay

; 1475 : 		{
; 1476 : 			// Add FTT Diamond if needed
; 1477 : 			if (lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN85@GMDisplay

; 1478 : 			{
; 1479 : 				//MI
; 1480 : 				if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN86@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	$LN86@GMDisplay

; 1481 : 				{
; 1482 : 					static const float size = 0.065F;
; 1483 : 					display->Tri(cursorX, cursorY, cursorX + size, cursorY, cursorX, cursorY + size);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	addss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1484 : 					display->Tri(cursorX, cursorY, cursorX - size, cursorY, cursorX, cursorY - size);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1485 : 					display->Tri(cursorX, cursorY, cursorX + size, cursorY, cursorX, cursorY - size);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1486 : 					display->Tri(cursorX, cursorY, cursorX - size, cursorY, cursorX, cursorY + size);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	addss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR ?size@?IL@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1487 : 				}
; 1488 : 				else

	jmp	$LN85@GMDisplay
$LN86@GMDisplay:

; 1489 : 				{
; 1490 : 					display->Line (cursorX+0.1F, cursorY, cursorX, cursorY+0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1491 : 					display->Line (cursorX+0.1F, cursorY, cursorX, cursorY-0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1492 : 					display->Line (cursorX-0.1F, cursorY, cursorX, cursorY+0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1493 : 					display->Line (cursorX-0.1F, cursorY, cursorX, cursorY-0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN85@GMDisplay:

; 1494 : 				}
; 1495 : 			}
; 1496 : 			
; 1497 : 			// RV - I-Hawk 
; 1498 : 			display->SetColor( GetMfdColor( MFD_GMSCOPE_CURSOR ) );

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1499 : 
; 1500 : 			// Add Cursor
; 1501 : 			display->Line (-1.0F, cursorY, 1.0F, cursorY);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+224]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1502 : 			display->Line (cursorX, -1.0F, cursorX, 1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+220]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+220]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1503 : 			
; 1504 : 			
; 1505 : 			// Expansion Cues
; 1506 : 			if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN84@GMDisplay
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN84@GMDisplay

; 1507 : 			{			
; 1508 : 				float len = 0.065F;

	movss	xmm0, DWORD PTR __real@3d851eb8
	movss	DWORD PTR _len$21[ebp], xmm0

; 1509 : 				display->Line (cursorX+0.25F, cursorY+len, cursorX+0.25F, cursorY-len);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	subss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+224]
	addss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+220]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1510 : 				display->Line (cursorX-0.25F, cursorY+len, cursorX-0.25F, cursorY-len);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1511 : 				display->Line (cursorX+len, cursorY+0.25F, cursorX-len, cursorY+0.25F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	subss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1512 : 				display->Line (cursorX+len, cursorY-0.25F, cursorX-len, cursorY-0.25F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	subss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR _len$21[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1513 : 			}
; 1514 : 			else

	jmp	$LN83@GMDisplay
$LN84@GMDisplay:

; 1515 : 			{
; 1516 : 				display->Line (cursorX+0.25F, cursorY+0.1F, cursorX+0.25F, cursorY-0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1517 : 				display->Line (cursorX-0.25F, cursorY+0.1F, cursorX-0.25F, cursorY-0.1F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1518 : 				display->Line (cursorX+0.1F, cursorY+0.25F, cursorX-0.1F, cursorY+0.25F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1519 : 				display->Line (cursorX+0.1F, cursorY-0.25F, cursorX-0.1F, cursorY-0.25F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	subss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	subss	xmm0, DWORD PTR __real@3e800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	addss	xmm0, DWORD PTR __real@3dcccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN83@GMDisplay:

; 1520 : 			}
; 1521 : 
; 1522 : 			display->SetColor( tmpColor );

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1523 : 			
; 1524 : 			// Add the Arcs
; 1525 : 			//MI
; 1526 : 
; 1527 : 			// RV - I-Hawk 
; 1528 : 			display->SetColor( GetMfdColor( MFD_GMSCOPE_ARCS ) );

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1529 : 
; 1530 : 			if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN82@GMDisplay
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN82@GMDisplay

; 1531 : 			{
; 1532 : 				if(!lockedTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	$LN76@GMDisplay

; 1533 : 				{
; 1534 : 					if (displayRange > 10.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+212]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN80@GMDisplay

; 1535 : 					{
; 1536 : 						for (i=0; i<3; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN79@GMDisplay
$LN78@GMDisplay:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN79@GMDisplay:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN77@GMDisplay

; 1537 : 						{
; 1538 : 							display->Arc(0.0F, -1.0F, (i+1)*0.5F, 213.0F*DTR, 333.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40b9fb76
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@406dec5b
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 1539 : 						}

	jmp	SHORT $LN78@GMDisplay
$LN77@GMDisplay:

; 1540 : 					}
; 1541 : 					else

	jmp	SHORT $LN76@GMDisplay
$LN80@GMDisplay:

; 1542 : 					{
; 1543 : 						display->Arc(0.0F, -1.0F, 1.0F, 213.0F*DTR, 333.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40b9fb76
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@406dec5b
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+52]
	call	eax
$LN76@GMDisplay:

; 1544 : 					}
; 1545 : 				}
; 1546 : 			}
; 1547 : 			else

	jmp	$LN75@GMDisplay
$LN82@GMDisplay:

; 1548 : 			{
; 1549 : 				if (displayRange > 10.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+212]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN74@GMDisplay

; 1550 : 				{
; 1551 : 					for (i=0; i<3; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN73@GMDisplay
$LN72@GMDisplay:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN73@GMDisplay:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN71@GMDisplay

; 1552 : 					{
; 1553 : 						display->Arc(0.0F, -1.0F, (i+1)*0.5F, 213.0F*DTR, 333.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40b9fb76
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@406dec5b
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 1554 : 					}

	jmp	SHORT $LN72@GMDisplay
$LN71@GMDisplay:

; 1555 : 				}
; 1556 : 				else

	jmp	SHORT $LN70@GMDisplay
$LN74@GMDisplay:

; 1557 : 				{
; 1558 : 					display->Arc(0.0F, -1.0F, 1.0F, 213.0F*DTR, 333.0F * DTR);

	push	ecx
	movss	xmm0, DWORD PTR __real@40b9fb76
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@406dec5b
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+52]
	call	eax
$LN70@GMDisplay:

; 1559 : 				}
; 1560 : 
; 1561 : 				display->SetColor( tmpColor ); // RV - I-Hawk - Return to green

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1562 : 
; 1563 : 				// RV - I-Hawk 
; 1564 : 				display->SetColor( GetMfdColor( MFD_GMSCOPE_CURSOR ) );

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1565 : 
; 1566 : 				// Lines are at 60 degrees
; 1567 : 				display->Line (0.0F, -1.0F,  1.0F, -0.5F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1568 : 				display->Line (0.0F, -1.0F, -1.0F, -0.5F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN75@GMDisplay:

; 1569 : 			}
; 1570 : 
; 1571 : 		}
; 1572 : 		else

	jmp	$LN62@GMDisplay
$LN88@GMDisplay:

; 1573 : 		{
; 1574 : 			// RV - I-Hawk 
; 1575 : 			display->SetColor( GetMfdColor( MFD_GMSCOPE_CURSOR ) );

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMfdColor@DrawableClass@@QAEIW4MfdColor@@@Z ; DrawableClass::GetMfdColor
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1576 : 
; 1577 : 			// Add True Cursor // JPG 9 Dec 03 - This is the SA cue - made it half size
; 1578 : 			display->Line (cursorX-0.05F, cursorY, cursorX+0.05F, cursorY);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+224]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+220]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+220]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1579 : 			display->Line (cursorX, cursorY+0.05F, cursorX, cursorY-0.05F);

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+224]
	subss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+224]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+220]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1580 : 			
; 1581 : 			// Add FTT Diamond if needed
; 1582 : 			if (lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN66@GMDisplay

; 1583 : 			{
; 1584 : 				//MI
; 1585 : 				if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN67@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	$LN67@GMDisplay

; 1586 : 				{
; 1587 : 					static const float size = 0.065F;
; 1588 : 					display->Tri(0.0F, 0.0F, size, 0.0F, 0.0F, size);

	push	ecx
	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1589 : 					display->Tri(0.0F, 0.0F, -size, 0.0F, 0.0F, size);

	push	ecx
	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1590 : 					display->Tri(0.0F, 0.0F, size, 0.0F, 0.0F, -size);

	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1591 : 					display->Tri(0.0F, 0.0F, -size, 0.0F, 0.0F, -size);

	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?size@?LA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1592 : 				}
; 1593 : 				else

	jmp	$LN66@GMDisplay
$LN67@GMDisplay:

; 1594 : 				{
; 1595 : 					display->Line ( 0.1F, 0.0F, 0.0F,  0.1F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1596 : 					display->Line ( 0.1F, 0.0F, 0.0F, -0.1F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1597 : 					display->Line (-0.1F, 0.0F, 0.0F,  0.1F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1598 : 					display->Line (-0.1F, 0.0F, 0.0F, -0.1F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN66@GMDisplay:

; 1599 : 				}
; 1600 : 			}
; 1601 : 			
; 1602 : 			display->Line (-1.0F, 0.0F, 1.0F, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1603 : 			display->Line (0.0F, -1.0F, 0.0F, 1.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1604 : 			
; 1605 : 			// Add scale reference
; 1606 : 			len = 1500.0F / groundMapRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@44bb8000
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _len$[ebp], xmm0

; 1607 : 			display->Line (-0.75F, 0.75F, -0.75F, 0.8F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1608 : 			display->Line (-0.75F, 0.8F, -0.75F + len, 0.8F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf400000
	addss	xmm0, DWORD PTR _len$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1609 : 			display->Line (-0.75F + len, 0.8F, -0.75F + len, 0.75F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf400000
	addss	xmm0, DWORD PTR _len$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@bf400000
	addss	xmm0, DWORD PTR _len$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1610 : 			
; 1611 : 			if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN65@GMDisplay
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN65@GMDisplay

; 1612 : 			{	
; 1613 : 				if(flags & DBS1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 4
	je	$LN64@GMDisplay

; 1614 : 				{
; 1615 : 					float len = 0.065F;

	movss	xmm0, DWORD PTR __real@3d851eb8
	movss	DWORD PTR _len$20[ebp], xmm0

; 1616 : 					display->Line (0.25F, -len, 0.25F, len);

	push	ecx
	movss	xmm0, DWORD PTR _len$20[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _len$20[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1617 : 					display->Line (-0.25F, -len, -0.25F, len);

	push	ecx
	movss	xmm0, DWORD PTR _len$20[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _len$20[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1618 : 					display->Line (len, 0.25F, -len, 0.25F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _len$20[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _len$20[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1619 : 					display->Line (len, -0.25F, -len, -0.25F);

	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _len$20[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _len$20[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN64@GMDisplay:

; 1620 : 				}
; 1621 : 			}
; 1622 : 			else

	jmp	$LN62@GMDisplay
$LN65@GMDisplay:

; 1623 : 			{
; 1624 : 				if (flags & DBS1)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 4
	je	$LN62@GMDisplay

; 1625 : 				{
; 1626 : 					// Expansion Cues
; 1627 : 					display->Line ( 0.25F,  0.1F,  0.25F, -0.1F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1628 : 					display->Line (-0.25F,  0.1F, -0.25F, -0.1F);

	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1629 : 					display->Line ( 0.1F,  0.25F, -0.1F,  0.25F);

	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1630 : 					display->Line ( 0.1F, -0.25F, -0.1F, -0.25F);

	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bdcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx
$LN62@GMDisplay:

; 1631 : 				}
; 1632 : 			}
; 1633 : 		}
; 1634 : 
; 1635 : 		display->SetColor( tmpColor ); // RV - I-Hawk - Return to green

	mov	eax, DWORD PTR _tmpColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 1636 : 
; 1637 : 		//STOP_PROFILE("GMDISPLAY DRAW2");
; 1638 : 		//START_PROFILE("GMDISPLAY DRAW3");
; 1639 : 
; 1640 : 		display->SetViewport (vpLeft, vpTop, vpRight, vpBottom);

	push	ecx
	movss	xmm0, DWORD PTR _vpBottom$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpRight$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpTop$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vpLeft$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+112]
	call	eax

; 1641 : 		//MI
; 1642 : 		if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN61@GMDisplay
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN61@GMDisplay

; 1643 : 		{
; 1644 : 			static float MAX_GAIN = 25.0F;
; 1645 : 			float x, y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$24[ebp], xmm0

; 1646 : 			GetButtonPos(19, &x, &y);

	lea	eax, DWORD PTR _y$24[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$23[ebp]
	push	ecx
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetButtonPos@DrawableClass@@QAEXHPAM0@Z ; DrawableClass::GetButtonPos

; 1647 : 			x += 0.02F;

	movss	xmm0, DWORD PTR _x$23[ebp]
	addss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR _x$23[ebp], xmm0

; 1648 : 			y = 0.95F;

	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR _y$24[ebp], xmm0

; 1649 : 			float y1 = 0.2F;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _y1$18[ebp], xmm0

; 1650 : 			float diff = y - y1;

	movss	xmm0, DWORD PTR _y$24[ebp]
	subss	xmm0, DWORD PTR _y1$18[ebp]
	movss	DWORD PTR _diff$7[ebp], xmm0

; 1651 : 			float step = y1 / MAX_GAIN;

	movss	xmm0, DWORD PTR _y1$18[ebp]
	divss	xmm0, DWORD PTR ?MAX_GAIN@?MA@??GMDisplay@RadarDopplerClass@@IAEXXZ@4MA
	movss	DWORD PTR _step$11[ebp], xmm0

; 1652 : 			float pos = GainPos * step + (5*step);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+944]
	mulss	xmm0, DWORD PTR _step$11[ebp]
	movss	xmm1, DWORD PTR __real@40a00000
	mulss	xmm1, DWORD PTR _step$11[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _pos$6[ebp], xmm0

; 1653 : 			//add the gain range
; 1654 : 			display->Line(x, y,x + 0.07F, y);

	push	ecx
	movss	xmm0, DWORD PTR _y$24[ebp]
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$23[ebp]
	addss	xmm0, DWORD PTR __real@3d8f5c29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$24[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$23[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1655 : 			display->Line(x, y,x, y - y1);

	movss	xmm0, DWORD PTR _y$24[ebp]
	subss	xmm0, DWORD PTR _y1$18[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$23[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$24[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$23[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1656 : 			display->Line(x, y - y1,x + 0.07F, y - y1);

	movss	xmm0, DWORD PTR _y$24[ebp]
	subss	xmm0, DWORD PTR _y1$18[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$23[ebp]
	addss	xmm0, DWORD PTR __real@3d8f5c29
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$24[ebp]
	subss	xmm0, DWORD PTR _y1$18[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$23[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1657 : 			//Gain
; 1658 : 			mlTrig trig;
; 1659 : 			float Angle = 45.0F * DTR;

	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _Angle$3[ebp], xmm0

; 1660 : 			float lenght = 0.08F;

	movss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR _lenght$8[ebp], xmm0

; 1661 : 			mlSinCos(&trig, Angle);

	push	ecx
	movss	xmm0, DWORD PTR _Angle$3[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$1[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1662 : 			float pos1 = trig.sin * lenght;

	movss	xmm0, DWORD PTR _trig$1[ebp]
	mulss	xmm0, DWORD PTR _lenght$8[ebp]
	movss	DWORD PTR _pos1$17[ebp], xmm0

; 1663 : 			display->AdjustOriginInViewport(x,diff + pos);

	movss	xmm0, DWORD PTR _diff$7[ebp]
	addss	xmm0, DWORD PTR _pos$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$23[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1664 : 			display->Line(0.0F,0.0F,pos1, pos1);

	push	ecx
	movss	xmm0, DWORD PTR _pos1$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos1$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1665 : 			display->Line(0.0F,0.0F,pos1,-pos1);

	movss	xmm0, DWORD PTR _pos1$17[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos1$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 1666 : 			display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport
$LN61@GMDisplay:

; 1667 : 		} 
; 1668 : 
; 1669 : 		//STOP_PROFILE("GMDISPLAY DRAW3");
; 1670 : 		//START_PROFILE("GMDISPLAY DRAW4");
; 1671 : 		// Common Radar Stuff // ASSOCIATOR 3/12/03: Reversed drawing order
; 1672 : 		DrawAzElTicks();			

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawAzElTicks@RadarDopplerClass@@IAEXXZ ; RadarDopplerClass::DrawAzElTicks

; 1673 : 		DrawScanMarkers();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawScanMarkers@RadarDopplerClass@@IAEXXZ ; RadarDopplerClass::DrawScanMarkers

; 1674 : 		
; 1675 : 		// Draw Range arrows
; 1676 : 		if (IsAGDclt(Arrows) == FALSE) 

	push	131072					; 00020000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN60@GMDisplay

; 1677 : 			DrawRangeArrows();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawRangeArrows@RadarDopplerClass@@IAEXXZ ; RadarDopplerClass::DrawRangeArrows
$LN60@GMDisplay:

; 1678 : 		if (IsAADclt(Rng) == FALSE) 

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAADclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAADclt
	test	eax, eax
	jne	SHORT $LN59@GMDisplay

; 1679 : 			DrawRange();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawRange@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DrawRange
$LN59@GMDisplay:

; 1680 : 		
; 1681 : 		display->SetColor(tmpColor);

	mov	edx, DWORD PTR _tmpColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 1682 : 		if (IsAGDclt(MajorMode) == FALSE) 

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN56@GMDisplay

; 1683 : 		{
; 1684 : 			// Add Buttons
; 1685 : 			switch (mode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR tv2248[ebp], ecx
	cmp	DWORD PTR tv2248[ebp], 14		; 0000000eH
	je	SHORT $LN55@GMDisplay
	cmp	DWORD PTR tv2248[ebp], 16		; 00000010H
	je	SHORT $LN54@GMDisplay
	cmp	DWORD PTR tv2248[ebp], 17		; 00000011H
	je	SHORT $LN53@GMDisplay
	jmp	SHORT $LN56@GMDisplay
$LN55@GMDisplay:

; 1686 : 			{
; 1687 : 			case GM:
; 1688 : 				LabelButton (0, "GM");

	push	0
	push	0
	push	OFFSET ??_C@_02DALMIMOA@GM?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1689 : 				break;

	jmp	SHORT $LN56@GMDisplay
$LN54@GMDisplay:

; 1690 : 				
; 1691 : 			case GMT:
; 1692 : 				LabelButton (0, "GMT");

	push	0
	push	0
	push	OFFSET ??_C@_03HOONMGKE@GMT?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1693 : 				break;

	jmp	SHORT $LN56@GMDisplay
$LN53@GMDisplay:

; 1694 : 				
; 1695 : 			case SEA:
; 1696 : 				LabelButton (0, "SEA");

	push	0
	push	0
	push	OFFSET ??_C@_03JIDALBMA@SEA?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN56@GMDisplay:

; 1697 : 				break;
; 1698 : 			}
; 1699 : 		}
; 1700 : 		if(IsAGDclt(SubMode) == FALSE)

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN48@GMDisplay

; 1701 : 		{
; 1702 : 			if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	SHORT $LN51@GMDisplay
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	SHORT $LN51@GMDisplay

; 1703 : 			{
; 1704 : 				if(IsSet(AutoAGRange))

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN50@GMDisplay

; 1705 : 					LabelButton(1,"AUTO");

	push	0
	push	0
	push	OFFSET ??_C@_04LMMJFDCN@AUTO?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1706 : 				else

	jmp	SHORT $LN49@GMDisplay
$LN50@GMDisplay:

; 1707 : 					LabelButton (1, "MAN");

	push	0
	push	0
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN49@GMDisplay:

; 1708 : 			}
; 1709 : 			else

	jmp	SHORT $LN48@GMDisplay
$LN51@GMDisplay:

; 1710 : 				LabelButton(1, "MAN");

	push	0
	push	0
	push	OFFSET ??_C@_03KIGHCFHP@MAN?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN48@GMDisplay:

; 1711 : 		} 
; 1712 : 		if (IsAGDclt(Fov) == FALSE) 

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	$LN37@GMDisplay

; 1713 : 		{
; 1714 : 			if (flags & NORM)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 1
	je	SHORT $LN46@GMDisplay

; 1715 : 			{
; 1716 : 				//MI
; 1717 : 				if(!g_bRealisticAvionics || !g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN44@GMDisplay
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	jne	SHORT $LN45@GMDisplay
$LN44@GMDisplay:

; 1718 : 					LabelButton (2, "NRM");

	push	0
	push	0
	push	OFFSET ??_C@_03IPJPMEHL@NRM?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1719 : 				else

	jmp	SHORT $LN43@GMDisplay
$LN45@GMDisplay:

; 1720 : 					LabelButton (2, "NORM");

	push	0
	push	0
	push	OFFSET ??_C@_04DHIGGNDH@NORM?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN43@GMDisplay:

; 1721 : 			}
; 1722 : 			else

	jmp	SHORT $LN37@GMDisplay
$LN46@GMDisplay:

; 1723 : 			{
; 1724 : 				if (flags & EXP)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 2
	je	SHORT $LN41@GMDisplay

; 1725 : 					LabelButton (2, "EXP");

	push	0
	push	0
	push	OFFSET ??_C@_03KKGFKKLA@EXP?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
	jmp	SHORT $LN37@GMDisplay
$LN41@GMDisplay:

; 1726 : 				else if (flags & DBS1)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 4
	je	SHORT $LN39@GMDisplay

; 1727 : 					LabelButton (2, "DBS1");

	push	0
	push	0
	push	OFFSET ??_C@_04NBEPBIG@DBS1?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
	jmp	SHORT $LN37@GMDisplay
$LN39@GMDisplay:

; 1728 : 				else if (flags & DBS2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 8
	je	SHORT $LN37@GMDisplay

; 1729 : 					LabelButton (2, "DBS2");

	push	0
	push	0
	push	OFFSET ??_C@_04CGDJKCEF@DBS2?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN37@GMDisplay:

; 1730 : 			}
; 1731 : 		}
; 1732 : 		if (IsAGDclt(Ovrd) == FALSE) 

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN36@GMDisplay

; 1733 : 			LabelButton (3, "OVRD", NULL, !IsEmitting());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmitting@RadarClass@@QAEHXZ		; RadarClass::IsEmitting
	test	eax, eax
	jne	SHORT $LN166@GMDisplay
	mov	DWORD PTR tv2399[ebp], 1
	jmp	SHORT $LN167@GMDisplay
$LN166@GMDisplay:
	mov	DWORD PTR tv2399[ebp], 0
$LN167@GMDisplay:
	mov	edx, DWORD PTR tv2399[ebp]
	push	edx
	push	0
	push	OFFSET ??_C@_04PGDFOHNL@OVRD?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN36@GMDisplay:

; 1734 : 		if (IsAGDclt(Cntl) == FALSE) 

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN35@GMDisplay

; 1735 : 			LabelButton (4, "CNTL", NULL, IsSet(CtlMode));

	push	2097152					; 00200000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	push	eax
	push	0
	push	OFFSET ??_C@_04GKDMIDBA@CNTL?$AA@
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN35@GMDisplay:

; 1736 : 		
; 1737 : 		if (IsSet(MenuMode|CtlMode)) 

	push	3145728					; 00300000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN34@GMDisplay

; 1738 : 			MENUDisplay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MENUDisplay@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::MENUDisplay

; 1739 : 		else 

	jmp	$LN27@GMDisplay
$LN34@GMDisplay:

; 1740 : 		{
; 1741 : 			if(IsAGDclt(BupSen) == FALSE) 

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN32@GMDisplay

; 1742 : 				LabelButton (5, "BARO");

	push	0
	push	0
	push	OFFSET ??_C@_04CAJPJFIH@BARO?$AA@
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN32@GMDisplay:

; 1743 : 			if (IsAGDclt(FzSp) == FALSE) 

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN31@GMDisplay

; 1744 : 			{
; 1745 : 				LabelButton (6, "FZ", NULL, IsSet(FZ));	  

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	push	eax
	push	0
	push	OFFSET ??_C@_02DEPNGCEB@FZ?$AA@
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1746 : 				LabelButton (7, "SP", NULL, IsSet(SP));

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	push	eax
	push	0
	push	OFFSET ??_C@_02NEPPOLFA@SP?$AA@
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1747 : 				LabelButton (9, "STP", NULL, !IsSet(SP));

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	jne	SHORT $LN168@GMDisplay
	mov	DWORD PTR tv2475[ebp], 1
	jmp	SHORT $LN169@GMDisplay
$LN168@GMDisplay:
	mov	DWORD PTR tv2475[ebp], 0
$LN169@GMDisplay:
	mov	eax, DWORD PTR tv2475[ebp]
	push	eax
	push	0
	push	OFFSET ??_C@_03NGANFLJH@STP?$AA@
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN31@GMDisplay:

; 1748 : 			}
; 1749 : 			if (IsAGDclt(Cz) == FALSE) 

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN30@GMDisplay

; 1750 : 				LabelButton (8, "CZ");

	push	0
	push	0
	push	OFFSET ??_C@_02DCDGKAKK@CZ?$AA@
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN30@GMDisplay:

; 1751 : 			
; 1752 : 			AGBottomRow ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AGBottomRow@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::AGBottomRow

; 1753 : 			
; 1754 : 			if (IsAGDclt(AzBar) == FALSE) 

	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	$LN27@GMDisplay

; 1755 : 			{
; 1756 : 				//MI
; 1757 : 				if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN28@GMDisplay
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN28@GMDisplay

; 1758 : 				{
; 1759 : 					char str[10] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _str$29[ebp], al
	xor	ecx, ecx
	mov	DWORD PTR _str$29[ebp+1], ecx
	mov	DWORD PTR _str$29[ebp+5], ecx
	mov	BYTE PTR _str$29[ebp+9], cl

; 1760 : 					sprintf(str,"%.0f", displayAzScan * 0.1F * RTD);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+216]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mulss	xmm0, DWORD PTR __real@42652ee1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	eax, DWORD PTR _str$29[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1761 : 					ShiAssert (strlen(str) < sizeof(str));
; 1762 : 					LabelButton (17, "A", str);

	push	0
	lea	ecx, DWORD PTR _str$29[ebp]
	push	ecx
	push	OFFSET ??_C@_01FHEEJDEE@A?$AA@
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1763 : 				}
; 1764 : 				else

	jmp	SHORT $LN27@GMDisplay
$LN28@GMDisplay:

; 1765 : 					LabelButton (17, "A", "6");

	push	0
	push	OFFSET ??_C@_01DHDKHMHF@6?$AA@
	push	OFFSET ??_C@_01FHEEJDEE@A?$AA@
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN27@GMDisplay:

; 1766 : 			}
; 1767 : 		}
; 1768 : 		//STOP_PROFILE("GMDISPLAY DRAW4");
; 1769 :    }
; 1770 : 	//STOP_PROFILE("GMDISPLAY DRAW");   
; 1771 : 	//START_PROFILE("GMDISPLAY");
; 1772 : 
; 1773 : 	// MD --20040306: Adding the TTG display for when you have GM STP mode or SP mode with a ground
; 1774 : 	// stabilized cursor position
; 1775 : 	   
; 1776 : 	if (SimDriver.GetPlayerAircraft() && (!IsSet(SP) || (IsSet(SP) && IsSet(SP_STAB)))){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	$LN26@GMDisplay
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN25@GMDisplay
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN26@GMDisplay
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN26@GMDisplay
$LN25@GMDisplay:

; 1777 : 		char tmpStr[24];
; 1778 : 		float ttg = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ttg$27[ebp], xmm0

; 1779 : 		int hr = 0, minute = 0, sec = 0;

	mov	DWORD PTR _hr$22[ebp], 0
	mov	DWORD PTR _minute$25[ebp], 0
	mov	DWORD PTR _sec$26[ebp], 0

; 1780 : 		   
; 1781 : 		// MD -- 20040515: watch out!  Until MARKs are fixed properly, curWaypoint may not point to a real waypoint
; 1782 : 		// so check the pointer to avoid a CTD here.
; 1783 : 		if (SimDriver.GetPlayerAircraft() && 
; 1784 : 			!F4IsBadReadPtr(SimDriver.GetPlayerAircraft()->curWaypoint, sizeof(WayPointClass))
; 1785 : 		){

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	$LN24@GMDisplay
	push	60					; 0000003cH
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	edx, DWORD PTR [eax+728]
	push	edx
	call	?F4IsBadReadPtr@@YA_NPBXI@Z		; F4IsBadReadPtr
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	$LN24@GMDisplay

; 1786 : 			float x, y, z, dx, dy;
; 1787 : 			   
; 1788 : 			if (IsSet(SP) && IsSet(SP_STAB) && GMSPWaypt())

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN23@GMDisplay
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN23@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GMSPWaypt@RadarDopplerClass@@QAEPAVWayPointClass@@XZ ; RadarDopplerClass::GMSPWaypt
	test	eax, eax
	je	SHORT $LN23@GMDisplay

; 1789 : 				GMSPWaypt()->GetLocation(&x, &y, &z);

	lea	ecx, DWORD PTR _z$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$10[ebp]
	push	edx
	lea	eax, DWORD PTR _x$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GMSPWaypt@RadarDopplerClass@@QAEPAVWayPointClass@@XZ ; RadarDopplerClass::GMSPWaypt
	mov	ecx, eax
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation

; 1790 : 			else

	jmp	SHORT $LN22@GMDisplay
$LN23@GMDisplay:

; 1791 : 				SimDriver.GetPlayerAircraft()->curWaypoint->GetLocation(&x, &y, &z);

	lea	ecx, DWORD PTR _z$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$10[ebp]
	push	edx
	lea	eax, DWORD PTR _x$15[ebp]
	push	eax
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+728]
	call	?GetLocation@WayPointClass@@QBEXPAM00@Z	; WayPointClass::GetLocation
$LN22@GMDisplay:

; 1792 : 			   
; 1793 : 			dx = x - SimDriver.GetPlayerAircraft()->XPos();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv4401[ebp]
	movss	xmm0, DWORD PTR _x$15[ebp]
	subss	xmm0, DWORD PTR tv4401[ebp]
	movss	DWORD PTR _dx$14[ebp], xmm0

; 1794 : 			dy = y - SimDriver.GetPlayerAircraft()->YPos();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv4407[ebp]
	movss	xmm0, DWORD PTR _y$10[ebp]
	subss	xmm0, DWORD PTR tv4407[ebp]
	movss	DWORD PTR _dy$9[ebp], xmm0

; 1795 : 			   
; 1796 : 			ttg = ((float)sqrt(dx*dx + dy*dy)) / SimDriver.GetPlayerAircraft()->GetVt();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR tv2624[ebp], eax
	mov	ecx, DWORD PTR tv2624[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv2624[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv4415[ebp]
	movss	xmm0, DWORD PTR tv4415[ebp]
	movss	xmm1, DWORD PTR _dy$9[ebp]
	mulss	xmm1, DWORD PTR _dy$9[ebp]
	movss	xmm2, DWORD PTR _dx$14[ebp]
	mulss	xmm2, DWORD PTR _dx$14[ebp]
	addss	xmm2, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm2
	movss	DWORD PTR tv4526[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv4423[ebp]
	movss	xmm0, DWORD PTR tv4423[ebp]
	movss	xmm1, DWORD PTR tv4526[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _ttg$27[ebp], xmm0
$LN24@GMDisplay:

; 1797 : 		}
; 1798 : 		   
; 1799 : 		if ((ttg > 0.0F) && (FloatToInt32(ttg) > 0.0F))

	movss	xmm0, DWORD PTR _ttg$27[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN21@GMDisplay
	push	ecx
	movss	xmm0, DWORD PTR _ttg$27[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN21@GMDisplay

; 1800 : 		{
; 1801 : 			// burn any days in the number
; 1802 : 			hr = FloatToInt32(ttg / (3600.0F * 24.0F));

	movss	xmm0, DWORD PTR _ttg$27[ebp]
	divss	xmm0, DWORD PTR __real@47a8c000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _hr$22[ebp], eax

; 1803 : 			ttg -= hr * 3600.0F * 24.0F;

	cvtsi2ss xmm0, DWORD PTR _hr$22[ebp]
	mulss	xmm0, DWORD PTR __real@45610000
	mulss	xmm0, DWORD PTR __real@41c00000
	movss	xmm1, DWORD PTR _ttg$27[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _ttg$27[ebp], xmm1

; 1804 : 			hr  = FloatToInt32(ttg / 3600.0F);

	movss	xmm0, DWORD PTR _ttg$27[ebp]
	divss	xmm0, DWORD PTR __real@45610000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _hr$22[ebp], eax

; 1805 : 			hr  = max (hr, 0);

	cmp	DWORD PTR _hr$22[ebp], 0
	jle	SHORT $LN170@GMDisplay
	mov	ecx, DWORD PTR _hr$22[ebp]
	mov	DWORD PTR tv2645[ebp], ecx
	jmp	SHORT $LN171@GMDisplay
$LN170@GMDisplay:
	mov	DWORD PTR tv2645[ebp], 0
$LN171@GMDisplay:
	mov	edx, DWORD PTR tv2645[ebp]
	mov	DWORD PTR _hr$22[ebp], edx

; 1806 : 			ttg -= hr * 3600.0F;

	cvtsi2ss xmm0, DWORD PTR _hr$22[ebp]
	mulss	xmm0, DWORD PTR __real@45610000
	movss	xmm1, DWORD PTR _ttg$27[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _ttg$27[ebp], xmm1

; 1807 : 			ttg = max (ttg, 0.0F);

	movss	xmm0, DWORD PTR _ttg$27[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN172@GMDisplay
	movss	xmm0, DWORD PTR _ttg$27[ebp]
	movss	DWORD PTR tv2650[ebp], xmm0
	jmp	SHORT $LN173@GMDisplay
$LN172@GMDisplay:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv2650[ebp], xmm0
$LN173@GMDisplay:
	movss	xmm0, DWORD PTR tv2650[ebp]
	movss	DWORD PTR _ttg$27[ebp], xmm0

; 1808 : 			minute = FloatToInt32(ttg / 60.0F);

	movss	xmm0, DWORD PTR _ttg$27[ebp]
	divss	xmm0, DWORD PTR __real@42700000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _minute$25[ebp], eax

; 1809 : 			ttg -= minute * 60.0F;

	cvtsi2ss xmm0, DWORD PTR _minute$25[ebp]
	mulss	xmm0, DWORD PTR __real@42700000
	movss	xmm1, DWORD PTR _ttg$27[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _ttg$27[ebp], xmm1

; 1810 : 			sec = FloatToInt32(ttg);

	push	ecx
	movss	xmm0, DWORD PTR _ttg$27[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _sec$26[ebp], eax

; 1811 : 
; 1812 : 			minute = max(min(minute, 999), 0);

	cmp	DWORD PTR _minute$25[ebp], 999		; 000003e7H
	jge	SHORT $LN174@GMDisplay
	mov	eax, DWORD PTR _minute$25[ebp]
	mov	DWORD PTR tv2660[ebp], eax
	jmp	SHORT $LN175@GMDisplay
$LN174@GMDisplay:
	mov	DWORD PTR tv2660[ebp], 999		; 000003e7H
$LN175@GMDisplay:
	cmp	DWORD PTR tv2660[ebp], 0
	jle	SHORT $LN178@GMDisplay
	cmp	DWORD PTR _minute$25[ebp], 999		; 000003e7H
	jge	SHORT $LN176@GMDisplay
	mov	ecx, DWORD PTR _minute$25[ebp]
	mov	DWORD PTR tv2663[ebp], ecx
	jmp	SHORT $LN177@GMDisplay
$LN176@GMDisplay:
	mov	DWORD PTR tv2663[ebp], 999		; 000003e7H
$LN177@GMDisplay:
	mov	edx, DWORD PTR tv2663[ebp]
	mov	DWORD PTR tv2664[ebp], edx
	jmp	SHORT $LN179@GMDisplay
$LN178@GMDisplay:
	mov	DWORD PTR tv2664[ebp], 0
$LN179@GMDisplay:
	mov	eax, DWORD PTR tv2664[ebp]
	mov	DWORD PTR _minute$25[ebp], eax

; 1813 : 			sec = max(min(sec, 59), 0);

	cmp	DWORD PTR _sec$26[ebp], 59		; 0000003bH
	jge	SHORT $LN180@GMDisplay
	mov	ecx, DWORD PTR _sec$26[ebp]
	mov	DWORD PTR tv2666[ebp], ecx
	jmp	SHORT $LN181@GMDisplay
$LN180@GMDisplay:
	mov	DWORD PTR tv2666[ebp], 59		; 0000003bH
$LN181@GMDisplay:
	cmp	DWORD PTR tv2666[ebp], 0
	jle	SHORT $LN184@GMDisplay
	cmp	DWORD PTR _sec$26[ebp], 59		; 0000003bH
	jge	SHORT $LN182@GMDisplay
	mov	edx, DWORD PTR _sec$26[ebp]
	mov	DWORD PTR tv2669[ebp], edx
	jmp	SHORT $LN183@GMDisplay
$LN182@GMDisplay:
	mov	DWORD PTR tv2669[ebp], 59		; 0000003bH
$LN183@GMDisplay:
	mov	eax, DWORD PTR tv2669[ebp]
	mov	DWORD PTR tv2670[ebp], eax
	jmp	SHORT $LN185@GMDisplay
$LN184@GMDisplay:
	mov	DWORD PTR tv2670[ebp], 0
$LN185@GMDisplay:
	mov	ecx, DWORD PTR tv2670[ebp]
	mov	DWORD PTR _sec$26[ebp], ecx

; 1814 : 
; 1815 : 			if (hr != 0)

	cmp	DWORD PTR _hr$22[ebp], 0
	je	SHORT $LN20@GMDisplay

; 1816 : 				sprintf (tmpStr, "%03d:%02d", abs(minute), sec);  //JPG 5 Feb 04

	mov	edx, DWORD PTR _sec$26[ebp]
	push	edx
	mov	eax, DWORD PTR _minute$25[ebp]
	push	eax
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_09JFBOEAOE@?$CF03d?3?$CF02d?$AA@
	lea	ecx, DWORD PTR _tmpStr$28[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
	jmp	$LN13@GMDisplay
$LN20@GMDisplay:

; 1817 : 			else if (sec >= 0)

	cmp	DWORD PTR _sec$26[ebp], 0
	jl	SHORT $LN18@GMDisplay

; 1818 : 			{
; 1819 : 				if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN17@GMDisplay

; 1820 : 					sprintf (tmpStr, "   %02d:%02d", abs(minute), sec);

	mov	eax, DWORD PTR _sec$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _minute$25[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0N@JIJJHBFE@?5?5?5?$CF02d?3?$CF02d?$AA@
	lea	edx, DWORD PTR _tmpStr$28[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 1821 : 				else

	jmp	SHORT $LN16@GMDisplay
$LN17@GMDisplay:

; 1822 : 					sprintf (tmpStr, "%03d:%02d", abs(minute), sec);  //JPG "%02d:%02d"

	mov	eax, DWORD PTR _sec$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _minute$25[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_09JFBOEAOE@?$CF03d?3?$CF02d?$AA@
	lea	edx, DWORD PTR _tmpStr$28[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN16@GMDisplay:

; 1823 : 			}
; 1824 : 			else

	jmp	SHORT $LN13@GMDisplay
$LN18@GMDisplay:

; 1825 : 			{
; 1826 : 				if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN14@GMDisplay

; 1827 : 					sprintf (tmpStr, "  -%02d:%02d", abs(minute), abs(sec));

	mov	ecx, DWORD PTR _sec$26[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _minute$25[ebp]
	push	edx
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0N@FDANDMFD@?5?5?9?$CF02d?3?$CF02d?$AA@
	lea	eax, DWORD PTR _tmpStr$28[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 1828 : 				else

	jmp	SHORT $LN13@GMDisplay
$LN14@GMDisplay:

; 1829 : 					sprintf (tmpStr, "-%02d:%02d", abs(minute), abs(sec));

	mov	ecx, DWORD PTR _sec$26[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _minute$25[ebp]
	push	edx
	call	_abs
	add	esp, 4
	push	eax
	push	OFFSET ??_C@_0L@JMLBFLDA@?9?$CF02d?3?$CF02d?$AA@
	lea	eax, DWORD PTR _tmpStr$28[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H
$LN13@GMDisplay:

; 1830 : 			}
; 1831 : 		}
; 1832 : 		else

	jmp	SHORT $LN12@GMDisplay
$LN21@GMDisplay:

; 1833 : 		{
; 1834 : 			strcpy (tmpStr, "XX:XX");

	push	OFFSET ??_C@_05CJNIOAFN@XX?3XX?$AA@
	lea	ecx, DWORD PTR _tmpStr$28[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN12@GMDisplay:

; 1835 : 		}
; 1836 : 		display->TextRight(0.68F, -0.63F, tmpStr);

	push	0
	lea	edx, DWORD PTR _tmpStr$28[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@bf2147ae
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f2e147b
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+60]
	call	edx
$LN26@GMDisplay:

; 1837 : 	}
; 1838 :    
; 1839 : 	/*------------------*/
; 1840 : 	/* Auto Range Scale */
; 1841 : 	/*------------------*/
; 1842 : 	if (lockedTarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN1@GMDisplay

; 1843 : 	{
; 1844 : 		//MI
; 1845 : 		if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN10@GMDisplay
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN10@GMDisplay

; 1846 : 		{
; 1847 : 			if(IsSet(AutoAGRange))

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN6@GMDisplay

; 1848 : 			{
; 1849 : 				if (lockedTarget->localData->range > 0.9F * tdisplayRange && curRangeIdx < NUM_RANGES - 1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR [eax+264]
	movss	xmm1, DWORD PTR [edx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+388], 4
	jge	SHORT $LN8@GMDisplay

; 1850 : 					rangeChangeCmd = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 1
	jmp	SHORT $LN6@GMDisplay
$LN8@GMDisplay:

; 1851 : 				else if (lockedTarget->localData->range < 0.4F * tdisplayRange && curRangeIdx > 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ecccccd
	mulss	xmm0, DWORD PTR [eax+264]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN6@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+388], 0
	jle	SHORT $LN6@GMDisplay

; 1852 : 					rangeChangeCmd = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], -1
$LN6@GMDisplay:

; 1853 : 			}
; 1854 : 		}
; 1855 : 		else

	jmp	SHORT $LN2@GMDisplay
$LN10@GMDisplay:

; 1856 : 		{
; 1857 : 			if (lockedTarget->localData->range > 0.9F * tdisplayRange && curRangeIdx < NUM_RANGES - 1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f666666
	mulss	xmm0, DWORD PTR [eax+264]
	movss	xmm1, DWORD PTR [edx+44]
	comiss	xmm1, xmm0
	jbe	SHORT $LN4@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+388], 4
	jge	SHORT $LN4@GMDisplay

; 1858 : 				rangeChangeCmd = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 1
	jmp	SHORT $LN2@GMDisplay
$LN4@GMDisplay:

; 1859 : 			else if (lockedTarget->localData->range < 0.4F * tdisplayRange && curRangeIdx > 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3ecccccd
	mulss	xmm0, DWORD PTR [eax+264]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN2@GMDisplay
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+388], 0
	jle	SHORT $LN2@GMDisplay

; 1860 : 				rangeChangeCmd = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], -1
$LN2@GMDisplay:

; 1861 : 		}
; 1862 : 		//MI
; 1863 : 		if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN1@GMDisplay
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN1@GMDisplay

; 1864 : 		{
; 1865 : 			scanDir = ScanNone;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+252], xmm0

; 1866 : 			beamAz = lockedTarget->localData->az;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+196], ecx

; 1867 : 			beamEl = lockedTarget->localData->el;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+200], eax
$LN1@GMDisplay:

; 1868 : 		}
; 1869 : 	}
; 1870 : 
; 1871 : 	//STOP_PROFILE("GMDISPLAY");
; 1872 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GMDisplay@RadarDopplerClass@@IAEXXZ ENDP		; RadarDopplerClass::GMDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_c$2 = -516						; size = 4
tv2104 = -512						; size = 4
tv2984 = -508						; size = 4
tv2100 = -504						; size = 4
tv2936 = -500						; size = 4
tv2061 = -496						; size = 4
tv2978 = -492						; size = 4
tv2171 = -488						; size = 4
tv2940 = -484						; size = 4
tv2433 = -480						; size = 4
$T3 = -476						; size = 4
tv2980 = -472						; size = 4
tv2885 = -468						; size = 4
$T4 = -464						; size = 4
tv2877 = -460						; size = 4
tv2976 = -456						; size = 4
tv2853 = -452						; size = 4
tv2511 = -448						; size = 4
tv2842 = -444						; size = 4
tv2402 = -440						; size = 4
tv2829 = -436						; size = 4
tv2358 = -432						; size = 4
tv2818 = -428						; size = 4
tv2350 = -424						; size = 4
tv2809 = -420						; size = 4
tv2338 = -416						; size = 4
$T5 = -412						; size = 4
tv2198 = -408						; size = 4
$T6 = -404						; size = 4
tv2149 = -400						; size = 4
tv2683 = -396						; size = 4
tv2116 = -392						; size = 4
tv2679 = -388						; size = 4
tv2108 = -384						; size = 4
tv2667 = -380						; size = 4
tv2437 = -376						; size = 4
tv2656 = -372						; size = 4
tv2410 = -368						; size = 4
tv2647 = -364						; size = 4
tv2388 = -360						; size = 4
tv2640 = -356						; size = 4
tv2986 = -352						; size = 4
tv2634 = -348						; size = 4
tv2354 = -344						; size = 4
tv2994 = -340						; size = 4
tv2982 = -336						; size = 4
tv2996 = -332						; size = 4
tv2346 = -328						; size = 4
tv2619 = -324						; size = 4
tv2342 = -320						; size = 4
tv2615 = -316						; size = 4
$T7 = -312						; size = 4
tv2990 = -308						; size = 4
tv2272 = -304						; size = 4
tv2992 = -300						; size = 4
tv2194 = -296						; size = 4
tv2611 = -292						; size = 4
tv2163 = -288						; size = 4
tv2607 = -284						; size = 4
tv2054 = -280						; size = 4
tv2988 = -276						; size = 4
tv2120 = -272						; size = 4
tv2603 = -268						; size = 4
tv2938 = -264						; size = 4
tv2599 = -260						; size = 4
tv2112 = -256						; size = 4
$T8 = -252						; size = 4
$T9 = -248						; size = 4
tv2942 = -244						; size = 4
$T10 = -240						; size = 4
tv1091 = -236						; size = 4
$T11 = -232						; size = 4
tv1555 = -228						; size = 4
tv677 = -224						; size = 4
tv605 = -220						; size = 4
$T12 = -216						; size = 4
tv1163 = -212						; size = 4
tv1827 = -208						; size = 4
tv1669 = -204						; size = 4
$T13 = -200						; size = 4
$T14 = -196						; size = 4
tv1756 = -192						; size = 4
$T15 = -188						; size = 4
tv1732 = -184						; size = 4
$T16 = -180						; size = 4
tv1706 = -176						; size = 4
tv1682 = -172						; size = 4
tv1590 = -168						; size = 4
tv1523 = -164						; size = 4
_z$17 = -160						; size = 4
tv481 = -156						; size = 4
tv967 = -152						; size = 4
_y$18 = -148						; size = 4
_x$19 = -144						; size = 4
_radarHorizon$ = -140					; size = 4
_tmp2$ = -136						; size = 4
_trig$ = -132						; size = 8
_ownZ$ = -124						; size = 4
_featureWalker$ = -120					; size = 12
_dx$ = -108						; size = 4
_ownY$ = -104						; size = 4
_objectWalker$ = -100					; size = 12
_ownX$ = -88						; size = 4
_FilterThis$20 = -83					; size = 1
_filterthis$21 = -82					; size = 1
_filterthis$22 = -81					; size = 1
_x$ = -80						; size = 4
_y$ = -76						; size = 4
_range$ = -72						; size = 4
_dy$ = -68						; size = 4
_lastList$ = -64					; size = 4
_walker$ = -60						; size = 4
_canSee$ = -56						; size = 4
_testObject$ = -52					; size = 4
_tmpList$ = -48						; size = 4
_radius$ = -44						; size = 4
_testFeature$ = -40					; size = 4
_curNode$ = -36						; size = 4
_this$ = -32						; size = 4
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?GMMode@RadarDopplerClass@@IAEXXZ PROC			; RadarDopplerClass::GMMode
; _this$ = ecx

; 2436 : void RadarDopplerClass::GMMode (void){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GMMode@RadarDopplerClass@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2437 : 	float ownX = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ownX$[ebp], xmm0

; 2438 : 	float ownY = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ownY$[ebp], xmm0

; 2439 : 	float ownZ = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ownZ$[ebp], xmm0

; 2440 : 	FalconEntity* testFeature = NULL;

	mov	DWORD PTR _testFeature$[ebp], 0

; 2441 : 	SimBaseClass* testObject = NULL;

	mov	DWORD PTR _testObject$[ebp], 0

; 2442 : 	VuListIterator *walker = NULL;	//MI

	mov	DWORD PTR _walker$[ebp], 0

; 2443 : 	GMList* curNode = GMFeatureListRoot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	DWORD PTR _curNode$[ebp], ecx

; 2444 : 	GMList* tmpList = NULL;

	mov	DWORD PTR _tmpList$[ebp], 0

; 2445 : 	GMList* tmp2 = NULL;

	mov	DWORD PTR _tmp2$[ebp], 0

; 2446 : 	GMList* lastList = NULL;

	mov	DWORD PTR _lastList$[ebp], 0

; 2447 : 	float range = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _range$[ebp], xmm0

; 2448 : 	float radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2449 : 	float canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0

; 2450 : 	float x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$[ebp], xmm0

; 2451 : 	float y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$[ebp], xmm0

; 2452 : 	float dx = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0

; 2453 : 	float dy = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0

; 2454 : 	Tpoint pos;
; 2455 : 	float radarHorizon = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radarHorizon$[ebp], xmm0

; 2456 : 	mlTrig trig;
; 2457 : 	
; 2458 : 	mlSinCos (&trig, -platform->Yaw());

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv2054[ebp]
	movss	xmm0, DWORD PTR tv2054[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _trig$[ebp]
	push	eax
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2459 : 	
; 2460 : 	// Find out where the beam hits the edge of the earth
; 2461 : 	radius = EARTH_RADIUS_FT - platform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2061[ebp]
	movss	xmm0, DWORD PTR __real@4b9fa682
	subss	xmm0, DWORD PTR tv2061[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2462 : 	radarHorizon = (float)sqrt (radius*radius - EARTH_RADIUS_FT*EARTH_RADIUS_FT);

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	subss	xmm0, DWORD PTR __real@57c72084
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _radarHorizon$[ebp]

; 2463 : 	ownX = platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _ownX$[ebp]

; 2464 : 	ownY = platform->YPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _ownY$[ebp]

; 2465 : 	ownZ = platform->ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _ownZ$[ebp]

; 2466 : 
; 2467 : 	VuListIterator featureWalker (SimDriver.combinedFeatureList);

	mov	edx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+20
	push	edx
	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2468 : 	VuListIterator objectWalker (SimDriver.combinedList);

	mov	eax, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+16
	push	eax
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2469 : 	
; 2470 : 	// Parallel walk through the list of existing objects and the platforms
; 2471 : 	// target list. Only draw the visible objects on the target list that
; 2472 : 	// still exist. This test is to handle the case were an object is deleted
; 2473 : 	// between the start of a refresh and it's visibility check.
; 2474 : 	if (SimLibElapsedTime - lastFeatureUpdate > 500)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	edx, DWORD PTR [ecx+512]
	cmp	edx, 500				; 000001f4H
	jbe	$LN84@GMMode

; 2475 : 	{
; 2476 : 		lastFeatureUpdate = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+512], ecx

; 2477 : 		
; 2478 : 
; 2479 : 		// Clear the head of the list of removed entities
; 2480 : 		testFeature = (FalconEntity*)featureWalker.GetFirst();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 2481 : 		int c = 0;

	mov	DWORD PTR _c$2[ebp], 0

; 2482 : 		if (testFeature && curNode)

	cmp	DWORD PTR _testFeature$[ebp], 0
	je	SHORT $LN232@GMMode
	cmp	DWORD PTR _curNode$[ebp], 0
	je	SHORT $LN232@GMMode
$LN233@GMMode:

; 2483 : 		{
; 2484 : 			 // MLR-NOTE SimCompare is like strcmp but with entity Ids
; 2485 : 			while (curNode && SimCompare (curNode->Object(), testFeature) < 0)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	SHORT $LN232@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	push	edx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	push	eax
	call	?SimCompare@@YAHPAVVuEntity@@0@Z	; SimCompare
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN232@GMMode

; 2486 : 			{ // curNode && testFeature's id is higher than curNode->Object()'s is
; 2487 : 			  
; 2488 : 				tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 2489 : 				curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 2490 : 				tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 2491 : 			}

	jmp	SHORT $LN233@GMMode
$LN232@GMMode:

; 2492 : 		}
; 2493 : 
; 2494 : 		GMFeatureListRoot = curNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [eax+516], ecx

; 2495 : 		walker = &featureWalker;

	lea	edx, DWORD PTR _featureWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], edx

; 2496 : 		if (GMFeatureListRoot)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN231@GMMode

; 2497 : 			GMFeatureListRoot->prev = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	DWORD PTR [edx+16], 0
$LN231@GMMode:

; 2498 : 		
; 2499 : 		//MI
; 2500 : 		if(!testFeature && g_bAGRadarFixes && g_bRealisticAvionics)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN230@GMMode
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	SHORT $LN230@GMMode
	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN230@GMMode

; 2501 : 		{
; 2502 : 			testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 2503 : 			walker = &objectWalker;

	lea	edx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], edx
$LN230@GMMode:

; 2504 : 		}
; 2505 : 		
; 2506 : 		lastList = NULL;

	mov	DWORD PTR _lastList$[ebp], 0
$LN229@GMMode:

; 2507 : 		//while (testFeature)
; 2508 : 		
; 2509 : 		
; 2510 : 		//ADDING SECTION
; 2511 : 		//TJL 11/25/03 Fixes the 0.5 second stutter on Aircraft when in A/G mode
; 2512 : 		//!g_bnoRadStutter turns off the fix; this section is original code. Fix is after this.
; 2513 : 		while (testFeature && !g_bnoRadStutter)

	cmp	DWORD PTR _testFeature$[ebp], 0
	je	$LN228@GMMode
	movzx	eax, BYTE PTR ?g_bnoRadStutter@@3_NA	; g_bnoRadStutter
	test	eax, eax
	jne	$LN228@GMMode

; 2514 : 		{
; 2515 : 			
; 2516 : 			if (isEmitting)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	je	$LN227@GMMode

; 2517 : 				
; 2518 : 			{
; 2519 : 				range = (float)sqrt(
; 2520 : 					(testFeature->XPos()-ownX)*(testFeature->XPos()-ownX) +
; 2521 : 					(testFeature->YPos()-ownY)*(testFeature->YPos()-ownY) +
; 2522 : 					(testFeature->ZPos()-ownZ)*(testFeature->ZPos()-ownZ));

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2100[ebp]
	movss	xmm0, DWORD PTR tv2100[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2936[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2104[ebp]
	movss	xmm0, DWORD PTR tv2104[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	movss	xmm1, DWORD PTR tv2936[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2938[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2108[ebp]
	movss	xmm0, DWORD PTR tv2108[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2940[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2112[ebp]
	movss	xmm0, DWORD PTR tv2112[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	movss	xmm1, DWORD PTR tv2940[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2938[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2942[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2116[ebp]
	movss	xmm0, DWORD PTR tv2116[ebp]
	subss	xmm0, DWORD PTR _ownZ$[ebp]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2976[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2120[ebp]
	movss	xmm0, DWORD PTR tv2120[ebp]
	subss	xmm0, DWORD PTR _ownZ$[ebp]
	movss	xmm1, DWORD PTR tv2976[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2942[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 2523 : 				if (range < radarHorizon)

	movss	xmm0, DWORD PTR _radarHorizon$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	$LN226@GMMode

; 2524 : 				{
; 2525 : 					if (testFeature->IsSim())

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN225@GMMode

; 2526 : 					{
; 2527 : 						// Check for visibility
; 2528 : 						if (((SimBaseClass*)testFeature)->IsAwake())

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	$LN224@GMMode

; 2529 : 						{
; 2530 : 							radius = ((SimBaseClass*)testFeature)->drawPointer->Radius();

	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR _radius$[ebp]

; 2531 : 							radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2532 : 							canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+264]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0

; 2533 : 							((SimBaseClass*)testFeature)->drawPointer->GetPosition(&pos);

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 2534 : 							testFeature->SetPosition(pos.x, pos.y, pos.z);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 2535 : 							
; 2536 : 							if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN221@GMMode
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN221@GMMode

; 2537 : 							{
; 2538 : 								if(walker == &objectWalker)

	lea	eax, DWORD PTR _objectWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN221@GMMode

; 2539 : 								{
; 2540 : 									// 2002-04-03 MN removed IsBattalion check, added Drawable::Guys here
; 2541 : 									if(testFeature->GetVt() > 1.0F || /*testFeature->IsBattalion()*/ 
; 2542 : 										((SimBaseClass*)testFeature)->drawPointer && 
; 2543 : 										((SimBaseClass*)testFeature)->drawPointer->GetClass() == DrawableObject::Guys)

	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2149[ebp]
	movss	xmm0, DWORD PTR tv2149[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	ja	SHORT $LN220@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN221@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN221@GMMode
$LN220@GMMode:

; 2544 : 									{
; 2545 : 										radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2546 : 										//radius = radius*radius*radius*radius;
; 2547 : 										canSee = 0.0F; //radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN221@GMMode:

; 2548 : 									}
; 2549 : 								}
; 2550 : 							}
; 2551 : 						}
; 2552 : 						else

	jmp	SHORT $LN219@GMMode
$LN224@GMMode:

; 2553 : 						{
; 2554 : 							canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN219@GMMode:

; 2555 : 						}
; 2556 : 					}
; 2557 : 					else

	jmp	$LN211@GMMode
$LN225@GMMode:

; 2558 : 					{
; 2559 : 						//MI
; 2560 : 						if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN217@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	$LN217@GMMode

; 2561 : 						{
; 2562 : 							if(walker == &objectWalker)

	lea	edx, DWORD PTR _objectWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	$LN216@GMMode

; 2563 : 							{
; 2564 : 								// 2002-04-03 MN testFeature is a CAMPAIGN object now !!! We can't do SimBaseClass stuff here. 
; 2565 : 								// Speed test however is valid, as it checks U_MOVING flag of unit
; 2566 : 								// As there are no campaign units that consist only of soldiers, no need to check for them here
; 2567 : 								if(testFeature->GetVt() > g_fGMTMinSpeed /*|| 
; 2568 : 															((SimBaseClass*)testFeature)->drawPointer && 
; 2569 : 															((SimBaseClass*)testFeature)->drawPointer->GetClass() == DrawableObject::Guys*/
; 2570 : 															)

	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2163[ebp]
	movss	xmm0, DWORD PTR tv2163[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	jbe	SHORT $LN215@GMMode

; 2571 : 								{
; 2572 : 									radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2573 : 									//radius = radius*radius*radius*radius;
; 2574 : 									canSee = 0.0F;//radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
	jmp	SHORT $LN213@GMMode
$LN215@GMMode:

; 2575 : 								}
; 2576 : 								// 2002-04-03 MN a campaign unit only has two speed states - 0.0f and 40.0f for not moving/moving.
; 2577 : 								//else if(testFeature->GetVt() < -1.0F)	//should never happen really.
; 2578 : 								else if (!testFeature->GetVt())

	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2171[ebp]
	movss	xmm0, DWORD PTR tv2171[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN213@GMMode

; 2579 : 								{
; 2580 : 									radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2581 : 									radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2582 : 									canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+264]
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN213@GMMode:

; 2583 : 								}
; 2584 : 							}
; 2585 : 							else

	jmp	SHORT $LN212@GMMode
$LN216@GMMode:

; 2586 : 							{
; 2587 : 								radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2588 : 								radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2589 : 								canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+264]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN212@GMMode:

; 2590 : 							}
; 2591 : 						}
; 2592 : 						else

	jmp	SHORT $LN211@GMMode
$LN217@GMMode:

; 2593 : 						{
; 2594 : 							radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2595 : 							radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2596 : 							canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+264]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+476]
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN211@GMMode:

; 2597 : 						}
; 2598 : 					}
; 2599 : 				}
; 2600 : 				else

	jmp	SHORT $LN210@GMMode
$LN226@GMMode:

; 2601 : 				{
; 2602 : 					canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN210@GMMode:

; 2603 : 				}
; 2604 : 				
; 2605 : 				// Check LOS
; 2606 : 				if (canSee > 0.8F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	$LN204@GMMode

; 2607 : 				{
; 2608 : 					x = testFeature->XPos() - ownX;

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2194[ebp]
	movss	xmm0, DWORD PTR tv2194[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 2609 : 					y = testFeature->YPos() - ownY;

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2198[ebp]
	movss	xmm0, DWORD PTR tv2198[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 2610 : 					
; 2611 : 					// Rotate for normalization
; 2612 : 					dx = trig.cos*x - trig.sin*y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 2613 : 					dy = trig.sin*x + trig.cos*y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dy$[ebp], xmm0

; 2614 : 					
; 2615 : 					// Check Angle off nose
; 2616 : 					if (
; 2617 : 						(dy > 0.0F && dx > 0.5F * dy) || // Right side of nose
; 2618 : 						(dy < 0.0F && dx > 0.5F * -dy)   // Left side of nose
; 2619 : 						)

	movss	xmm0, DWORD PTR _dy$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN206@GMMode
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN207@GMMode
$LN206@GMMode:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN208@GMMode
	movss	xmm0, DWORD PTR _dy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN208@GMMode
$LN207@GMMode:

; 2620 : 					{
; 2621 : 						// Actual LOS
; 2622 : 						if (!OTWDriver.CheckLOS( platform, testFeature))

	mov	ecx, DWORD PTR _testFeature$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z ; OTWDriverClass::CheckLOS
	test	eax, eax
	jne	SHORT $LN205@GMMode

; 2623 : 						{
; 2624 : 							canSee = 0.0F;  // LOS is blocked

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN205@GMMode:

; 2625 : 						}
; 2626 : 					}
; 2627 : 					else

	jmp	SHORT $LN204@GMMode
$LN208@GMMode:

; 2628 : 					{
; 2629 : 						canSee = 0.0F;   // Outside of cone

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN204@GMMode:

; 2630 : 					}
; 2631 : 				}
; 2632 :          }
; 2633 :          else

	jmp	SHORT $LN203@GMMode
$LN227@GMMode:

; 2634 :          {
; 2635 : 			 canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN203@GMMode:

; 2636 :          }
; 2637 : 		 
; 2638 :          if (curNode)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN202@GMMode

; 2639 :          {
; 2640 : 			 switch (SimCompare (curNode->Object(), testFeature))

	mov	ecx, DWORD PTR _testFeature$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	push	eax
	call	?SimCompare@@YAHPAVVuEntity@@0@Z	; SimCompare
	add	esp, 8
	mov	DWORD PTR tv481[ebp], eax
	cmp	DWORD PTR tv481[ebp], -1
	je	$LN182@GMMode
	cmp	DWORD PTR tv481[ebp], 0
	je	SHORT $LN199@GMMode
	cmp	DWORD PTR tv481[ebp], 1
	je	$LN187@GMMode
	jmp	$LN200@GMMode
$LN199@GMMode:

; 2641 : 			 {
; 2642 : 			 case 0:
; 2643 : 				 if (canSee > 0.8F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	SHORT $LN198@GMMode

; 2644 : 				 {
; 2645 :                      //Update
; 2646 :                      lastList = curNode;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx

; 2647 :                      curNode = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _curNode$[ebp], ecx

; 2648 : 				 }
; 2649 : 				 else

	jmp	SHORT $LN197@GMMode
$LN198@GMMode:

; 2650 : 				 {
; 2651 :                      // Object can't be seen, remove
; 2652 :                      if (curNode->prev)

	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN196@GMMode

; 2653 : 						 curNode->prev->next = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax

; 2654 :                      else

	jmp	SHORT $LN194@GMMode
$LN196@GMMode:

; 2655 :                      {
; 2656 : 						 GMFeatureListRoot = curNode->next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+516], eax

; 2657 : 						 if (GMFeatureListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+516], 0
	je	SHORT $LN194@GMMode

; 2658 : 							 GMFeatureListRoot->prev = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	DWORD PTR [eax+16], 0
$LN194@GMMode:

; 2659 :                      }
; 2660 : 					 
; 2661 :                      if(curNode->next)

	mov	ecx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN193@GMMode

; 2662 : 						 curNode->next->prev = curNode->prev;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN193@GMMode:

; 2663 :                      tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 2664 :                      curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 2665 :                      tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release
$LN197@GMMode:

; 2666 : 				 }
; 2667 : 				 //MI
; 2668 : 				 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN192@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN192@GMMode

; 2669 : 				 {
; 2670 : 					 if(walker == &featureWalker)

	lea	edx, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN191@GMMode

; 2671 : 						 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 2672 : 					 else

	jmp	SHORT $LN190@GMMode
$LN191@GMMode:

; 2673 : 						 testFeature = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN190@GMMode:

; 2674 : 					 if(!testFeature && walker == &featureWalker)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN189@GMMode
	lea	eax, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN189@GMMode

; 2675 : 					 { 
; 2676 : 						 testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 2677 : 						 walker = &objectWalker;

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], ecx
$LN189@GMMode:

; 2678 : 					 } 
; 2679 : 				 }
; 2680 : 				 else

	jmp	SHORT $LN188@GMMode
$LN192@GMMode:

; 2681 : 					 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN188@GMMode:

; 2682 : 				 break;

	jmp	$LN200@GMMode
$LN187@GMMode:

; 2683 : 			 case 1: // testFeature > visObj -- Means the current allready deleted
; 2684 : 				 if (curNode->prev)

	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN186@GMMode

; 2685 :                      curNode->prev->next = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax

; 2686 : 				 else

	jmp	SHORT $LN184@GMMode
$LN186@GMMode:

; 2687 : 				 {
; 2688 :                      GMFeatureListRoot = curNode->next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+516], eax

; 2689 :                      if (GMFeatureListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+516], 0
	je	SHORT $LN184@GMMode

; 2690 : 						 GMFeatureListRoot->prev = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	DWORD PTR [eax+16], 0
$LN184@GMMode:

; 2691 : 				 }
; 2692 : 				 
; 2693 : 				 if(curNode->next)

	mov	ecx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN183@GMMode

; 2694 :                      curNode->next->prev = curNode->prev;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN183@GMMode:

; 2695 : 				 tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 2696 : 				 curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 2697 : 				 tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 2698 : 				 break;

	jmp	$LN200@GMMode
$LN182@GMMode:

; 2699 : 				 
; 2700 : 			 case -1: // testFeature < visObj -- Means the current not added yet
; 2701 : 				 bool filterthis = FALSE;

	mov	BYTE PTR _filterthis$21[ebp], 0

; 2702 : 				 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN179@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN179@GMMode

; 2703 : 				 {
; 2704 : 					 if(walker == &objectWalker)

	lea	edx, DWORD PTR _objectWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN179@GMMode

; 2705 : 					 {
; 2706 : 						 //bool here = true;
; 2707 : 						 //float speed = testFeature->GetVt();
; 2708 : 						 // 2002-04-03 MN removed IsBattalion check, added Drawable::Guys here and IsSim() check - don't do simbase stuff on campaign objects
; 2709 : 						 if(testFeature->GetVt() > g_fGMTMinSpeed || /*testFeature->IsBattalion()*/
; 2710 : 							 testFeature->IsSim() &&
; 2711 : 							 ((SimBaseClass*)testFeature)->drawPointer && 
; 2712 : 							 ((SimBaseClass*)testFeature)->drawPointer->GetClass() == DrawableObject::Guys)

	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2272[ebp]
	movss	xmm0, DWORD PTR tv2272[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	ja	SHORT $LN178@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN179@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN179@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN179@GMMode
$LN178@GMMode:

; 2713 : 						 {
; 2714 : 							 filterthis = TRUE;

	mov	BYTE PTR _filterthis$21[ebp], 1
$LN179@GMMode:

; 2715 : 						 }
; 2716 : 					 }
; 2717 : 				 }
; 2718 : 				 if (canSee > 1.0F && !filterthis)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN177@GMMode
	movzx	eax, BYTE PTR _filterthis$21[ebp]
	test	eax, eax
	jne	$LN177@GMMode

; 2719 : 				 {
; 2720 : 					 tmpList = new GMList (testFeature);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN238@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
	mov	DWORD PTR tv605[ebp], eax
	jmp	SHORT $LN239@GMMode
$LN238@GMMode:
	mov	DWORD PTR tv605[ebp], 0
$LN239@GMMode:
	mov	edx, DWORD PTR tv605[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 2721 : 					 tmpList->next = curNode;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 2722 : 					 tmpList->prev = lastList;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	ecx, DWORD PTR _lastList$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2723 : 					 if (tmpList->next)

	mov	edx, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN176@GMMode

; 2724 : 						 tmpList->next->prev = tmpList;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN176@GMMode:

; 2725 : 					 if (tmpList->prev)

	mov	eax, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN175@GMMode

; 2726 : 						 tmpList->prev->next = tmpList;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN175@GMMode:

; 2727 : 					 if (curNode == GMFeatureListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	edx, DWORD PTR [ecx+516]
	jne	SHORT $LN174@GMMode

; 2728 : 						 GMFeatureListRoot = tmpList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [eax+516], ecx
$LN174@GMMode:

; 2729 : 					 lastList = tmpList;

	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx
$LN177@GMMode:

; 2730 : 				 }
; 2731 : 				 //MI
; 2732 : 				 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN173@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN173@GMMode

; 2733 : 				 {
; 2734 : 					 if(walker == &featureWalker)

	lea	edx, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN172@GMMode

; 2735 : 						 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 2736 : 					 else

	jmp	SHORT $LN171@GMMode
$LN172@GMMode:

; 2737 : 						 testFeature = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN171@GMMode:

; 2738 : 					 if(!testFeature && walker == &featureWalker)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN170@GMMode
	lea	eax, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN170@GMMode

; 2739 : 					 { 
; 2740 : 						 testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 2741 : 						 walker = &objectWalker;

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], ecx
$LN170@GMMode:

; 2742 : 					 } 
; 2743 : 				 }
; 2744 : 				 else

	jmp	SHORT $LN169@GMMode
$LN173@GMMode:

; 2745 : 					 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN169@GMMode:
$LN200@GMMode:

; 2746 : 				 break;
; 2747 :             }
; 2748 :          } // curNode
; 2749 :          else

	jmp	$LN159@GMMode
$LN202@GMMode:

; 2750 :          {
; 2751 : 			 if (canSee > 1.0F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN167@GMMode

; 2752 : 			 {
; 2753 : 				 curNode = new GMList(testFeature);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T12[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN240@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
	mov	DWORD PTR tv677[ebp], eax
	jmp	SHORT $LN241@GMMode
$LN240@GMMode:
	mov	DWORD PTR tv677[ebp], 0
$LN241@GMMode:
	mov	eax, DWORD PTR tv677[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _curNode$[ebp], ecx

; 2754 : 				 curNode->prev = lastList;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR _lastList$[ebp]
	mov	DWORD PTR [edx+16], eax

; 2755 : 				 
; 2756 : 				 if (lastList)

	cmp	DWORD PTR _lastList$[ebp], 0
	je	SHORT $LN166@GMMode

; 2757 : 					 lastList->next = curNode;

	mov	ecx, DWORD PTR _lastList$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 2758 : 				 else

	jmp	SHORT $LN164@GMMode
$LN166@GMMode:

; 2759 : 				 {
; 2760 : 					 GMFeatureListRoot = curNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [eax+516], ecx

; 2761 : 					 if (GMFeatureListRoot)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+516], 0
	je	SHORT $LN164@GMMode

; 2762 : 						 GMFeatureListRoot->prev = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	DWORD PTR [ecx+16], 0
$LN164@GMMode:

; 2763 : 				 }
; 2764 : 				 lastList = curNode;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx

; 2765 : 				 curNode = NULL;

	mov	DWORD PTR _curNode$[ebp], 0
$LN167@GMMode:

; 2766 : 			 }
; 2767 : 			 //MI
; 2768 : 			 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN163@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN163@GMMode

; 2769 : 			 {
; 2770 : 				 if(walker == &featureWalker)

	lea	edx, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN162@GMMode

; 2771 : 					 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 2772 : 				 else

	jmp	SHORT $LN161@GMMode
$LN162@GMMode:

; 2773 : 					 testFeature = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN161@GMMode:

; 2774 : 				 if(!testFeature && walker == &featureWalker)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN160@GMMode
	lea	eax, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN160@GMMode

; 2775 : 				 { 
; 2776 : 					 testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 2777 : 					 walker = &objectWalker;

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], ecx
$LN160@GMMode:

; 2778 : 				 } 
; 2779 : 			 }
; 2780 : 			 else

	jmp	SHORT $LN159@GMMode
$LN163@GMMode:

; 2781 : 				 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN159@GMMode:

; 2782 :          }
; 2783 :       }

	jmp	$LN229@GMMode
$LN228@GMMode:

; 2784 : 	  
; 2785 : 	  
; 2786 : 	  //ENDING SECTION
; 2787 : 	  
; 2788 : 	  
; 2789 : 	  
; 2790 : 	  //TJL 11/25/03 This is the no stutter fix section.
; 2791 : 	  
; 2792 :       while (testFeature && g_bnoRadStutter)

	cmp	DWORD PTR _testFeature$[ebp], 0
	je	$LN157@GMMode
	movzx	edx, BYTE PTR ?g_bnoRadStutter@@3_NA	; g_bnoRadStutter
	test	edx, edx
	je	$LN157@GMMode

; 2793 :       {
; 2794 : 		  
; 2795 : 		  if (isEmitting && !testFeature->IsAirplane())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN156@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	test	eax, eax
	jne	$LN156@GMMode

; 2796 : 			  
; 2797 : 		  {
; 2798 : 			  range = (float)sqrt(
; 2799 : 				  (testFeature->XPos()-ownX)*(testFeature->XPos()-ownX) +
; 2800 : 				  (testFeature->YPos()-ownY)*(testFeature->YPos()-ownY) +
; 2801 : 				  (testFeature->ZPos()-ownZ)*(testFeature->ZPos()-ownZ));

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2338[ebp]
	movss	xmm0, DWORD PTR tv2338[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2978[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2342[ebp]
	movss	xmm0, DWORD PTR tv2342[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	movss	xmm1, DWORD PTR tv2978[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2980[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2346[ebp]
	movss	xmm0, DWORD PTR tv2346[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2982[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2350[ebp]
	movss	xmm0, DWORD PTR tv2350[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	movss	xmm1, DWORD PTR tv2982[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2980[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2984[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2354[ebp]
	movss	xmm0, DWORD PTR tv2354[ebp]
	subss	xmm0, DWORD PTR _ownZ$[ebp]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	movss	DWORD PTR tv2986[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2358[ebp]
	movss	xmm0, DWORD PTR tv2358[ebp]
	subss	xmm0, DWORD PTR _ownZ$[ebp]
	movss	xmm1, DWORD PTR tv2986[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2984[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 2802 : 			  if (range < radarHorizon)

	movss	xmm0, DWORD PTR _radarHorizon$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	$LN155@GMMode

; 2803 : 			  {
; 2804 : 				  if (testFeature->IsSim())

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN154@GMMode

; 2805 : 				  {
; 2806 :                       // Check for visibility
; 2807 : 					  //I-Hawk - added a check for GFX as chaff is now awake but has no GFX created
; 2808 : 					  //so here it'll CTD if not checking GFX existence
; 2809 : 					  if (((SimBaseClass*)testFeature)->IsAwake() &&
; 2810 : 						  ((SimBaseClass*)testFeature)->drawPointer ) 

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	$LN153@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	$LN153@GMMode

; 2811 : 					  {
; 2812 : 						  radius = ((SimBaseClass*)testFeature)->drawPointer->Radius();

	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR _radius$[ebp]

; 2813 : 						  radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2814 : 						  canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+264]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0

; 2815 : 						  ((SimBaseClass*)testFeature)->drawPointer->GetPosition(&pos);

	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 2816 : 						  testFeature->SetPosition(pos.x, pos.y, pos.z);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 2817 : 						  
; 2818 : 						  if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN150@GMMode
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN150@GMMode

; 2819 : 						  {
; 2820 : 							  if(walker == &objectWalker)

	lea	eax, DWORD PTR _objectWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN150@GMMode

; 2821 : 							  {
; 2822 : 								  // 2002-04-03 MN removed IsBattalion check, added Drawable::Guys here
; 2823 : 								  if(testFeature->GetVt() > 1.0F || /*testFeature->IsBattalion()*/ 
; 2824 : 									  ((SimBaseClass*)testFeature)->drawPointer && 
; 2825 : 									  ((SimBaseClass*)testFeature)->drawPointer->GetClass() == DrawableObject::Guys)

	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2388[ebp]
	movss	xmm0, DWORD PTR tv2388[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	ja	SHORT $LN149@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN150@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN150@GMMode
$LN149@GMMode:

; 2826 : 								  {
; 2827 : 									  radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2828 : 									  //radius = radius*radius*radius*radius;
; 2829 : 									  canSee = 0.0F; //radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN150@GMMode:

; 2830 : 								  }
; 2831 : 							  }
; 2832 : 						  }
; 2833 : 					  }
; 2834 : 					  else

	jmp	SHORT $LN148@GMMode
$LN153@GMMode:

; 2835 : 					  {
; 2836 : 						  canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN148@GMMode:

; 2837 : 					  }
; 2838 : 				  }
; 2839 : 				  else

	jmp	$LN140@GMMode
$LN154@GMMode:

; 2840 : 				  {
; 2841 : 					  //MI
; 2842 : 					  if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN146@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	$LN146@GMMode

; 2843 : 					  {
; 2844 : 						  if(walker == &objectWalker)

	lea	edx, DWORD PTR _objectWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	$LN145@GMMode

; 2845 : 						  {
; 2846 : 							  // 2002-04-03 MN testFeature is a CAMPAIGN object now !!! We can't do SimBaseClass stuff here. 
; 2847 : 							  // Speed test however is valid, as it checks U_MOVING flag of unit
; 2848 : 							  // As there are no campaign units that consist only of soldiers, no need to check for them here
; 2849 : 							  if(testFeature->GetVt() > g_fGMTMinSpeed /*|| 
; 2850 : 														  ((SimBaseClass*)testFeature)->drawPointer && 
; 2851 : 														  ((SimBaseClass*)testFeature)->drawPointer->GetClass() == DrawableObject::Guys*/
; 2852 : 														  )

	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2402[ebp]
	movss	xmm0, DWORD PTR tv2402[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	jbe	SHORT $LN144@GMMode

; 2853 : 							  {
; 2854 : 								  radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2855 : 								  //radius = radius*radius*radius*radius;
; 2856 : 								  canSee = 0.0F;//radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
	jmp	SHORT $LN142@GMMode
$LN144@GMMode:

; 2857 : 							  }
; 2858 : 							  // 2002-04-03 MN a campaign unit only has two speed states - 0.0f and 40.0f for not moving/moving.
; 2859 : 							  //else if(testFeature->GetVt() < -1.0F)	//should never happen really.
; 2860 : 							  else if (!testFeature->GetVt())

	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2410[ebp]
	movss	xmm0, DWORD PTR tv2410[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN142@GMMode

; 2861 : 							  {
; 2862 : 								  radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2863 : 								  radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2864 : 								  canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+264]
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN142@GMMode:

; 2865 : 							  }
; 2866 : 						  }
; 2867 : 						  else

	jmp	SHORT $LN141@GMMode
$LN145@GMMode:

; 2868 : 						  {
; 2869 : 							  radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2870 : 							  radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2871 : 							  canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+264]
	mov	ecx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [ecx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN141@GMMode:

; 2872 : 						  }
; 2873 : 					  }
; 2874 : 					  else

	jmp	SHORT $LN140@GMMode
$LN146@GMMode:

; 2875 : 					  {
; 2876 : 						  radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 2877 : 						  radius = radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 2878 : 						  canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+264]
	mov	eax, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [eax+476]
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN140@GMMode:

; 2879 : 					  }
; 2880 : 				  }
; 2881 : 			  }
; 2882 : 			  else

	jmp	SHORT $LN139@GMMode
$LN155@GMMode:

; 2883 : 			  {
; 2884 : 				  canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN139@GMMode:

; 2885 : 			  }
; 2886 : 			  
; 2887 : 			  // Check LOS
; 2888 : 			  if (canSee > 0.8F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	$LN133@GMMode

; 2889 : 			  {
; 2890 : 				  x = testFeature->XPos() - ownX;

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2433[ebp]
	movss	xmm0, DWORD PTR tv2433[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 2891 : 				  y = testFeature->YPos() - ownY;

	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2437[ebp]
	movss	xmm0, DWORD PTR tv2437[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 2892 : 				  
; 2893 : 				  // Rotate for normalization
; 2894 : 				  dx = trig.cos*x - trig.sin*y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 2895 : 				  dy = trig.sin*x + trig.cos*y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dy$[ebp], xmm0

; 2896 : 				  
; 2897 : 				  // Check Angle off nose
; 2898 : 				  if (
; 2899 : 					  (dy > 0.0F && dx > 0.5F * dy) || // Right side of nose
; 2900 : 					  (dy < 0.0F && dx > 0.5F * -dy)   // Left side of nose
; 2901 : 					  )

	movss	xmm0, DWORD PTR _dy$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN135@GMMode
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN136@GMMode
$LN135@GMMode:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN137@GMMode
	movss	xmm0, DWORD PTR _dy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN137@GMMode
$LN136@GMMode:

; 2902 : 				  {
; 2903 : 					  // Actual LOS
; 2904 : 					  if (!OTWDriver.CheckLOS( platform, testFeature))

	mov	ecx, DWORD PTR _testFeature$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z ; OTWDriverClass::CheckLOS
	test	eax, eax
	jne	SHORT $LN134@GMMode

; 2905 : 					  {
; 2906 : 						  canSee = 0.0F;  // LOS is blocked

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN134@GMMode:

; 2907 : 					  }
; 2908 : 				  }
; 2909 : 				  else

	jmp	SHORT $LN133@GMMode
$LN137@GMMode:

; 2910 : 				  {
; 2911 : 					  canSee = 0.0F;   // Outside of cone

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN133@GMMode:

; 2912 : 				  }
; 2913 : 			  }
; 2914 :          }
; 2915 :          else

	jmp	SHORT $LN132@GMMode
$LN156@GMMode:

; 2916 :          {
; 2917 : 			 canSee = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN132@GMMode:

; 2918 :          }
; 2919 : 		 
; 2920 :          if (curNode)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN131@GMMode

; 2921 :          {
; 2922 : 			 switch (SimCompare (curNode->Object(), testFeature))

	mov	ecx, DWORD PTR _testFeature$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	push	eax
	call	?SimCompare@@YAHPAVVuEntity@@0@Z	; SimCompare
	add	esp, 8
	mov	DWORD PTR tv967[ebp], eax
	cmp	DWORD PTR tv967[ebp], -1
	je	$LN111@GMMode
	cmp	DWORD PTR tv967[ebp], 0
	je	SHORT $LN128@GMMode
	cmp	DWORD PTR tv967[ebp], 1
	je	$LN116@GMMode
	jmp	$LN129@GMMode
$LN128@GMMode:

; 2923 : 			 {
; 2924 : 			 case 0:
; 2925 : 				 if (canSee > 0.8F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	SHORT $LN127@GMMode

; 2926 : 				 {
; 2927 :                      //Update
; 2928 :                      lastList = curNode;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx

; 2929 :                      curNode = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _curNode$[ebp], ecx

; 2930 : 				 }
; 2931 : 				 else

	jmp	SHORT $LN126@GMMode
$LN127@GMMode:

; 2932 : 				 {
; 2933 :                      // Object can't be seen, remove
; 2934 :                      if (curNode->prev)

	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN125@GMMode

; 2935 : 						 curNode->prev->next = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax

; 2936 :                      else

	jmp	SHORT $LN123@GMMode
$LN125@GMMode:

; 2937 :                      {
; 2938 : 						 GMFeatureListRoot = curNode->next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+516], eax

; 2939 : 						 if (GMFeatureListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+516], 0
	je	SHORT $LN123@GMMode

; 2940 : 							 GMFeatureListRoot->prev = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	DWORD PTR [eax+16], 0
$LN123@GMMode:

; 2941 :                      }
; 2942 : 					 
; 2943 :                      if(curNode->next)

	mov	ecx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN122@GMMode

; 2944 : 						 curNode->next->prev = curNode->prev;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN122@GMMode:

; 2945 :                      tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 2946 :                      curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 2947 :                      tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release
$LN126@GMMode:

; 2948 : 				 }
; 2949 : 				 //MI
; 2950 : 				 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN121@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN121@GMMode

; 2951 : 				 {
; 2952 : 					 if(walker == &featureWalker)

	lea	edx, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN120@GMMode

; 2953 : 						 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 2954 : 					 else

	jmp	SHORT $LN119@GMMode
$LN120@GMMode:

; 2955 : 						 testFeature = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN119@GMMode:

; 2956 : 					 if(!testFeature && walker == &featureWalker)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN118@GMMode
	lea	eax, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN118@GMMode

; 2957 : 					 { 
; 2958 : 						 testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 2959 : 						 walker = &objectWalker;

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], ecx
$LN118@GMMode:

; 2960 : 					 } 
; 2961 : 				 }
; 2962 : 				 else

	jmp	SHORT $LN117@GMMode
$LN121@GMMode:

; 2963 : 					 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN117@GMMode:

; 2964 : 				 break;

	jmp	$LN129@GMMode
$LN116@GMMode:

; 2965 : 			 case 1: // testFeature > visObj -- Means the current allready deleted
; 2966 : 				 if (curNode->prev)

	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN115@GMMode

; 2967 :                      curNode->prev->next = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax

; 2968 : 				 else

	jmp	SHORT $LN113@GMMode
$LN115@GMMode:

; 2969 : 				 {
; 2970 :                      GMFeatureListRoot = curNode->next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+516], eax

; 2971 :                      if (GMFeatureListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+516], 0
	je	SHORT $LN113@GMMode

; 2972 : 						 GMFeatureListRoot->prev = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	DWORD PTR [eax+16], 0
$LN113@GMMode:

; 2973 : 				 }
; 2974 : 				 
; 2975 : 				 if(curNode->next)

	mov	ecx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN112@GMMode

; 2976 :                      curNode->next->prev = curNode->prev;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN112@GMMode:

; 2977 : 				 tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 2978 : 				 curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 2979 : 				 tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 2980 : 				 break;

	jmp	$LN129@GMMode
$LN111@GMMode:

; 2981 : 				 
; 2982 : 			 case -1: // testFeature < visObj -- Means the current not added yet
; 2983 : 				 bool filterthis = FALSE;

	mov	BYTE PTR _filterthis$22[ebp], 0

; 2984 : 				 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN108@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN108@GMMode

; 2985 : 				 {
; 2986 : 					 if(walker == &objectWalker)

	lea	edx, DWORD PTR _objectWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN108@GMMode

; 2987 : 					 {
; 2988 : 						 //bool here = true;
; 2989 : 						 //float speed = testFeature->GetVt();
; 2990 : 						 // 2002-04-03 MN removed IsBattalion check, added Drawable::Guys here and IsSim() check - don't do simbase stuff on campaign objects
; 2991 : 						 if(testFeature->GetVt() > g_fGMTMinSpeed || /*testFeature->IsBattalion()*/
; 2992 : 							 testFeature->IsSim() &&
; 2993 : 							 ((SimBaseClass*)testFeature)->drawPointer && 
; 2994 : 							 ((SimBaseClass*)testFeature)->drawPointer->GetClass() == DrawableObject::Guys)

	mov	eax, DWORD PTR _testFeature$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _testFeature$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2511[ebp]
	movss	xmm0, DWORD PTR tv2511[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	ja	SHORT $LN107@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN108@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN108@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN108@GMMode
$LN107@GMMode:

; 2995 : 						 {
; 2996 : 							 filterthis = TRUE;

	mov	BYTE PTR _filterthis$22[ebp], 1
$LN108@GMMode:

; 2997 : 						 }
; 2998 : 					 }
; 2999 : 				 }
; 3000 : 				 if (canSee > 1.0F && !filterthis)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN106@GMMode
	movzx	eax, BYTE PTR _filterthis$22[ebp]
	test	eax, eax
	jne	$LN106@GMMode

; 3001 : 				 {
; 3002 : 					 tmpList = new GMList (testFeature);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN242@GMMode
	mov	ecx, DWORD PTR _testFeature$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
	mov	DWORD PTR tv1091[ebp], eax
	jmp	SHORT $LN243@GMMode
$LN242@GMMode:
	mov	DWORD PTR tv1091[ebp], 0
$LN243@GMMode:
	mov	edx, DWORD PTR tv1091[ebp]
	mov	DWORD PTR $T9[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 3003 : 					 tmpList->next = curNode;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3004 : 					 tmpList->prev = lastList;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	ecx, DWORD PTR _lastList$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 3005 : 					 if (tmpList->next)

	mov	edx, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN105@GMMode

; 3006 : 						 tmpList->next->prev = tmpList;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN105@GMMode:

; 3007 : 					 if (tmpList->prev)

	mov	eax, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN104@GMMode

; 3008 : 						 tmpList->prev->next = tmpList;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN104@GMMode:

; 3009 : 					 if (curNode == GMFeatureListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	edx, DWORD PTR [ecx+516]
	jne	SHORT $LN103@GMMode

; 3010 : 						 GMFeatureListRoot = tmpList;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [eax+516], ecx
$LN103@GMMode:

; 3011 : 					 lastList = tmpList;

	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx
$LN106@GMMode:

; 3012 : 				 }
; 3013 : 				 //MI
; 3014 : 				 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN102@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN102@GMMode

; 3015 : 				 {
; 3016 : 					 if(walker == &featureWalker)

	lea	edx, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN101@GMMode

; 3017 : 						 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 3018 : 					 else

	jmp	SHORT $LN100@GMMode
$LN101@GMMode:

; 3019 : 						 testFeature = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN100@GMMode:

; 3020 : 					 if(!testFeature && walker == &featureWalker)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN99@GMMode
	lea	eax, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN99@GMMode

; 3021 : 					 { 
; 3022 : 						 testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 3023 : 						 walker = &objectWalker;

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], ecx
$LN99@GMMode:

; 3024 : 					 } 
; 3025 : 				 }
; 3026 : 				 else

	jmp	SHORT $LN98@GMMode
$LN102@GMMode:

; 3027 : 					 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN98@GMMode:
$LN129@GMMode:

; 3028 : 				 break;
; 3029 :             }
; 3030 :          } // curNode
; 3031 :          else

	jmp	$LN88@GMMode
$LN131@GMMode:

; 3032 :          {
; 3033 : 			 if (canSee > 1.0F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN96@GMMode

; 3034 : 			 {
; 3035 : 				 curNode = new GMList(testFeature);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T16[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T16[ebp], 0
	je	SHORT $LN244@GMMode
	mov	edx, DWORD PTR _testFeature$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T16[ebp]
	call	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
	mov	DWORD PTR tv1163[ebp], eax
	jmp	SHORT $LN245@GMMode
$LN244@GMMode:
	mov	DWORD PTR tv1163[ebp], 0
$LN245@GMMode:
	mov	eax, DWORD PTR tv1163[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _curNode$[ebp], ecx

; 3036 : 				 curNode->prev = lastList;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR _lastList$[ebp]
	mov	DWORD PTR [edx+16], eax

; 3037 : 				 
; 3038 : 				 if (lastList)

	cmp	DWORD PTR _lastList$[ebp], 0
	je	SHORT $LN95@GMMode

; 3039 : 					 lastList->next = curNode;

	mov	ecx, DWORD PTR _lastList$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3040 : 				 else

	jmp	SHORT $LN93@GMMode
$LN95@GMMode:

; 3041 : 				 {
; 3042 : 					 GMFeatureListRoot = curNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [eax+516], ecx

; 3043 : 					 if (GMFeatureListRoot)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+516], 0
	je	SHORT $LN93@GMMode

; 3044 : 						 GMFeatureListRoot->prev = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	DWORD PTR [ecx+16], 0
$LN93@GMMode:

; 3045 : 				 }
; 3046 : 				 lastList = curNode;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx

; 3047 : 				 curNode = NULL;

	mov	DWORD PTR _curNode$[ebp], 0
$LN96@GMMode:

; 3048 : 			 }
; 3049 : 			 //MI
; 3050 : 			 if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN92@GMMode
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN92@GMMode

; 3051 : 			 {
; 3052 : 				 if(walker == &featureWalker)

	lea	edx, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], edx
	jne	SHORT $LN91@GMMode

; 3053 : 					 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax

; 3054 : 				 else

	jmp	SHORT $LN90@GMMode
$LN91@GMMode:

; 3055 : 					 testFeature = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN90@GMMode:

; 3056 : 				 if(!testFeature && walker == &featureWalker)

	cmp	DWORD PTR _testFeature$[ebp], 0
	jne	SHORT $LN89@GMMode
	lea	eax, DWORD PTR _featureWalker$[ebp]
	cmp	DWORD PTR _walker$[ebp], eax
	jne	SHORT $LN89@GMMode

; 3057 : 				 { 
; 3058 : 					 testFeature = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testFeature$[ebp], eax

; 3059 : 					 walker = &objectWalker;

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	mov	DWORD PTR _walker$[ebp], ecx
$LN89@GMMode:

; 3060 : 				 } 
; 3061 : 			 }
; 3062 : 			 else

	jmp	SHORT $LN88@GMMode
$LN92@GMMode:

; 3063 : 				 testFeature = (SimBaseClass*)featureWalker.GetNext();

	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testFeature$[ebp], eax
$LN88@GMMode:

; 3064 :          }
; 3065 :       }

	jmp	$LN228@GMMode
$LN157@GMMode:

; 3066 : 	  
; 3067 : 	  //TJL 11/25/03 No stutter fix section ends
; 3068 : 	  
; 3069 : 	  
; 3070 :       // Delete anthing after curNode
; 3071 :       tmpList = curNode;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], edx

; 3072 :       if (tmpList && tmpList->prev)

	cmp	DWORD PTR _tmpList$[ebp], 0
	je	SHORT $LN87@GMMode
	mov	eax, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN87@GMMode

; 3073 : 		  tmpList->prev->next = NULL;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+20], 0
$LN87@GMMode:

; 3074 : 	  
; 3075 :       if (tmpList == GMFeatureListRoot)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tmpList$[ebp]
	cmp	ecx, DWORD PTR [eax+516]
	jne	SHORT $LN86@GMMode

; 3076 : 		  GMFeatureListRoot = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+516], 0
$LN86@GMMode:

; 3077 : 	  
; 3078 :       while (tmpList)

	cmp	DWORD PTR _tmpList$[ebp], 0
	je	SHORT $LN84@GMMode

; 3079 :       {
; 3080 : 		  tmp2 = tmpList;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR _tmp2$[ebp], eax

; 3081 : 		  tmpList = tmpList->next;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _tmpList$[ebp], edx

; 3082 : 		  tmp2->Release();

	mov	ecx, DWORD PTR _tmp2$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 3083 :       }

	jmp	SHORT $LN86@GMMode
$LN84@GMMode:

; 3084 : 	  
; 3085 : #ifdef DEBUG
; 3086 :       // Verify order and singleness of list
; 3087 :       tmpList = GMFeatureListRoot;
; 3088 :       while (tmpList) 
; 3089 : 	  {
; 3090 : 		  if (tmpList->next) 
; 3091 : 		  {
; 3092 : 			  //MI changed to get movers on the list
; 3093 : 			  //F4Assert( SimCompare( tmpList->Object(), tmpList->next->Object() ) == 1 );
; 3094 : 			  F4Assert((SimCompare(tmpList->Object(), tmpList->next->Object()) == 1) ||
; 3095 : 				  (SimCompare(tmpList->Object(), tmpList->next->Object()) == -1));
; 3096 : 		  }
; 3097 : 		  tmpList = tmpList->next;
; 3098 :       }
; 3099 : #endif
; 3100 :    }
; 3101 :    
; 3102 :    // Now Do the movers
; 3103 :    curNode = GMMoverListRoot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	DWORD PTR _curNode$[ebp], ecx

; 3104 :    lastList = NULL;

	mov	DWORD PTR _lastList$[ebp], 0

; 3105 :    testObject = (SimBaseClass*)objectWalker.GetFirst();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _testObject$[ebp], eax

; 3106 :    if (testObject && curNode)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	SHORT $LN81@GMMode
	cmp	DWORD PTR _curNode$[ebp], 0
	je	SHORT $LN81@GMMode
$LN82@GMMode:

; 3107 :    {
; 3108 : 	   while (curNode && SimCompare (curNode->Object(), testObject) < 0)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	SHORT $LN81@GMMode
	mov	edx, DWORD PTR _testObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	push	eax
	call	?SimCompare@@YAHPAVVuEntity@@0@Z	; SimCompare
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN81@GMMode

; 3109 : 	   {
; 3110 : 		   tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 3111 : 		   curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 3112 : 		   tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 3113 : 	   }

	jmp	SHORT $LN82@GMMode
$LN81@GMMode:

; 3114 :    }
; 3115 :    
; 3116 :    GMMoverListRoot = curNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [eax+520], ecx

; 3117 :    if (GMMoverListRoot)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+520], 0
	je	SHORT $LN80@GMMode

; 3118 : 	   GMMoverListRoot->prev = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	DWORD PTR [ecx+16], 0
$LN80@GMMode:

; 3119 :    
; 3120 :    while (testObject)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	$LN78@GMMode

; 3121 :    {
; 3122 : 	   if (testObject->OnGround())

	mov	edx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	$LN77@GMMode

; 3123 : 	   {
; 3124 : 		   if (isEmitting)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+76], 0
	je	$LN76@GMMode

; 3125 : 		   {
; 3126 : 			   // Check for visibility
; 3127 : 			   range = (float)sqrt(
; 3128 : 				   (testObject->XPos()-ownX)*(testObject->XPos()-ownX) +
; 3129 : 				   (testObject->YPos()-ownY)*(testObject->YPos()-ownY) +
; 3130 : 				   (testObject->ZPos()-ownZ)*(testObject->ZPos()-ownZ));

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2599[ebp]
	movss	xmm0, DWORD PTR tv2599[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	mov	ecx, DWORD PTR _testObject$[ebp]
	movss	DWORD PTR tv2988[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2603[ebp]
	movss	xmm0, DWORD PTR tv2603[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	movss	xmm1, DWORD PTR tv2988[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _testObject$[ebp]
	movss	DWORD PTR tv2990[ebp], xmm1
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2607[ebp]
	movss	xmm0, DWORD PTR tv2607[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	mov	ecx, DWORD PTR _testObject$[ebp]
	movss	DWORD PTR tv2992[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2611[ebp]
	movss	xmm0, DWORD PTR tv2611[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	movss	xmm1, DWORD PTR tv2992[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2990[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _testObject$[ebp]
	movss	DWORD PTR tv2994[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2615[ebp]
	movss	xmm0, DWORD PTR tv2615[ebp]
	subss	xmm0, DWORD PTR _ownZ$[ebp]
	mov	ecx, DWORD PTR _testObject$[ebp]
	movss	DWORD PTR tv2996[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv2619[ebp]
	movss	xmm0, DWORD PTR tv2619[ebp]
	subss	xmm0, DWORD PTR _ownZ$[ebp]
	movss	xmm1, DWORD PTR tv2996[ebp]
	mulss	xmm1, xmm0
	movss	xmm0, DWORD PTR tv2994[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 3131 : 			   
; 3132 : 			   if (range < radarHorizon)

	movss	xmm0, DWORD PTR _radarHorizon$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	$LN75@GMMode

; 3133 : 			   {
; 3134 : 				   //MI only show objects that are really moving
; 3135 : 				   if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	$LN74@GMMode
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	$LN74@GMMode

; 3136 : 				   {
; 3137 : 					   bool FilterThis = FALSE;

	mov	BYTE PTR _FilterThis$20[ebp], 0

; 3138 : 					   if(testObject && testObject->IsSim() && testObject->drawPointer && 
; 3139 : 						   testObject->drawPointer->GetClass() == DrawableObject::Guys)

	cmp	DWORD PTR _testObject$[ebp], 0
	je	SHORT $LN73@GMMode
	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN73@GMMode
	mov	eax, DWORD PTR _testObject$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN73@GMMode
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ; DrawableObject::GetClass
	cmp	eax, 3
	jne	SHORT $LN73@GMMode

; 3140 : 						   FilterThis = TRUE;

	mov	BYTE PTR _FilterThis$20[ebp], 1
$LN73@GMMode:

; 3141 : 					   
; 3142 : 					   if(testObject->IsSim() && !FilterThis &&
; 3143 : 						   testObject->GetVt() > g_fGMTMinSpeed && 
; 3144 : 						   testObject->GetVt() < g_fGMTMaxSpeed)

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN72@GMMode
	movzx	edx, BYTE PTR _FilterThis$20[ebp]
	test	edx, edx
	jne	$LN72@GMMode
	mov	eax, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2634[ebp]
	movss	xmm0, DWORD PTR tv2634[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	jbe	SHORT $LN72@GMMode
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2640[ebp]
	movss	xmm0, DWORD PTR ?g_fGMTMaxSpeed@@3MA
	comiss	xmm0, DWORD PTR tv2640[ebp]
	jbe	SHORT $LN72@GMMode

; 3145 : 					   {
; 3146 : 						   if (testObject->IsAwake())

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN71@GMMode

; 3147 : 						   {
; 3148 : 							   radius = 2.0F * testObject->drawPointer->Radius();

	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2647[ebp]
	movss	xmm0, DWORD PTR tv2647[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 3149 : 							   /*  JB 010624 Why? Setting the position like this screws up multiplayer and entitys' movement
; 3150 : 							   if (testObject->GetDomain() != DOMAIN_SEA) // JB carrier (otherwise ships stop when you turn on your GM radar)
; 3151 : 							   {
; 3152 : 							   ((SimBaseClass*)testObject)->drawPointer->GetPosition(&pos);
; 3153 : 							   testObject->SetPosition(pos.x, pos.y, pos.z);
; 3154 : 						   }*/
; 3155 : 						   }
; 3156 : 						   else

	jmp	SHORT $LN70@GMMode
$LN71@GMMode:

; 3157 : 						   {
; 3158 : 							   radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0
$LN70@GMMode:

; 3159 : 						   }

	jmp	SHORT $LN67@GMMode
$LN72@GMMode:

; 3160 : 					   }
; 3161 : 					   // 2002-04-03 MN added check for moving campaign objects
; 3162 : 					   else if (testObject->IsCampaign() && testObject->GetVt()) // campaign units only return 40 or 0 knots, depending on U_MOVING flag

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN68@GMMode
	mov	edx, DWORD PTR _testObject$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _testObject$[ebp]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv2656[ebp]
	movss	xmm0, DWORD PTR tv2656[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN68@GMMode

; 3163 : 					   {
; 3164 : 						   radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0

; 3165 : 					   }
; 3166 : 					   else

	jmp	SHORT $LN67@GMMode
$LN68@GMMode:

; 3167 : 					   {
; 3168 : 						   radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0
$LN67@GMMode:

; 3169 : 					   }
; 3170 : 				   }
; 3171 : 				   else

	jmp	SHORT $LN62@GMMode
$LN74@GMMode:

; 3172 : 				   {
; 3173 : 					   if (testObject->IsSim()) // NOTE this is for actually moving && testObject->GetVt() > 10.0F * KNOTS_TO_FTPSEC &&

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN65@GMMode

; 3174 : 						   //testObject->GetVt() < 100.0F * KNOTS_TO_FTPSEC)
; 3175 : 					   {
; 3176 : 						   if (testObject->IsAwake())

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN64@GMMode

; 3177 : 						   {
; 3178 : 							   radius = 2.0F * testObject->drawPointer->Radius();

	mov	eax, DWORD PTR _testObject$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv2667[ebp]
	movss	xmm0, DWORD PTR tv2667[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _radius$[ebp], xmm0

; 3179 : 							   /*  JB 010624 Why? Setting the position like this screws up multiplayer and entitys' movement
; 3180 : 							   if (testObject->GetDomain() != DOMAIN_SEA) // JB carrier (otherwise ships stop when you turn on your GM radar)
; 3181 : 							   {
; 3182 : 							   ((SimBaseClass*)testObject)->drawPointer->GetPosition(&pos);
; 3183 : 							   testObject->SetPosition(pos.x, pos.y, pos.z);
; 3184 : 						   }*/
; 3185 : 						   }
; 3186 : 						   else

	jmp	SHORT $LN63@GMMode
$LN64@GMMode:

; 3187 : 						   {
; 3188 : 							   radius = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _radius$[ebp], xmm0
$LN63@GMMode:

; 3189 : 						   }
; 3190 : 					   }
; 3191 : 					   else 

	jmp	SHORT $LN62@GMMode
$LN65@GMMode:

; 3192 : 					   {
; 3193 : 						   radius = DEFAULT_OBJECT_RADIUS;

	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR _radius$[ebp], xmm0
$LN62@GMMode:

; 3194 : 					   }
; 3195 : 				   }
; 3196 : 				   
; 3197 : 				   radius = radius*radius*radius*radius*radius;

	movss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	mulss	xmm0, DWORD PTR _radius$[ebp]
	movss	DWORD PTR _radius$[ebp], xmm0

; 3198 : 				   canSee = radius/range * tdisplayRange/groundMapRange;

	movss	xmm0, DWORD PTR _radius$[ebp]
	divss	xmm0, DWORD PTR _range$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+264]
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+476]
	movss	DWORD PTR _canSee$[ebp], xmm0

; 3199 : 				   
; 3200 : 				   // Check LOS
; 3201 : 				   if (canSee > 0.8F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	$LN56@GMMode

; 3202 : 				   {
; 3203 : 					   x = testObject->XPos() - ownX;

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv2679[ebp]
	movss	xmm0, DWORD PTR tv2679[ebp]
	subss	xmm0, DWORD PTR _ownX$[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 3204 : 					   y = testObject->YPos() - ownY;

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv2683[ebp]
	movss	xmm0, DWORD PTR tv2683[ebp]
	subss	xmm0, DWORD PTR _ownY$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 3205 : 					   
; 3206 : 					   // Rotate for normalization
; 3207 : 					   dx = trig.cos*x - trig.sin*y;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _dx$[ebp], xmm0

; 3208 : 					   dy = trig.sin*x + trig.cos*y;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _trig$[ebp+4]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dy$[ebp], xmm0

; 3209 : 					   
; 3210 : 					   // Check Angle off nose
; 3211 : 					   if((dy > 0.0F && dx > 0.5F * dy) || // Right side of nose
; 3212 : 						   (dy < 0.0F && dx > 0.5F * -dy))   // Left side of nose

	movss	xmm0, DWORD PTR _dy$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN58@GMMode
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _dy$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	ja	SHORT $LN59@GMMode
$LN58@GMMode:
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _dy$[ebp]
	jbe	SHORT $LN60@GMMode
	movss	xmm0, DWORD PTR _dy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _dx$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN60@GMMode
$LN59@GMMode:

; 3213 : 					   {
; 3214 : 						   // Actual LOS
; 3215 : 						   if (testObject->IsSim() && !OTWDriver.CheckLOS( platform, testObject))

	mov	ecx, DWORD PTR _testObject$[ebp]
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN57@GMMode
	mov	eax, DWORD PTR _testObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?CheckLOS@OTWDriverClass@@QAEHPAVFalconEntity@@0@Z ; OTWDriverClass::CheckLOS
	test	eax, eax
	jne	SHORT $LN57@GMMode

; 3216 : 						   {
; 3217 : 							   canSee = 0.0F;  // LOS is blocked

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN57@GMMode:

; 3218 : 						   }
; 3219 : 					   }
; 3220 : 					   else

	jmp	SHORT $LN56@GMMode
$LN60@GMMode:

; 3221 : 					   {
; 3222 : 						   canSee = 0.0F;   // Outside of cone

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN56@GMMode:

; 3223 : 					   }
; 3224 : 				   }
; 3225 : 			   }
; 3226 : 			   else

	jmp	SHORT $LN55@GMMode
$LN75@GMMode:

; 3227 : 			   {
; 3228 : 				   canSee = 0.0F;  // Beyond radar horizon

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN55@GMMode:

; 3229 : 			   }
; 3230 :          }
; 3231 :          else

	jmp	SHORT $LN54@GMMode
$LN76@GMMode:

; 3232 :          {
; 3233 : 			 canSee = 0.0F;  // Our radar is off

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _canSee$[ebp], xmm0
$LN54@GMMode:

; 3234 :          }
; 3235 : 		 
; 3236 :          if (curNode)

	cmp	DWORD PTR _curNode$[ebp], 0
	je	$LN53@GMMode

; 3237 :          {
; 3238 : 			 if(testObject == curNode->Object())

	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	cmp	DWORD PTR _testObject$[ebp], eax
	jne	$LN52@GMMode

; 3239 : 			 {
; 3240 : 				 if (canSee > 0.8F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jbe	SHORT $LN51@GMMode

; 3241 : 				 {
; 3242 : 					 //Update
; 3243 : 					 lastList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _lastList$[ebp], eax

; 3244 : 					 curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 3245 : 				 }
; 3246 : 				 else

	jmp	SHORT $LN50@GMMode
$LN51@GMMode:

; 3247 : 				 {
; 3248 : 					 // Object can't be seen, remove
; 3249 : 					 if (curNode->prev)

	mov	eax, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN49@GMMode

; 3250 : 						 curNode->prev->next = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], ecx

; 3251 : 					 else

	jmp	SHORT $LN47@GMMode
$LN49@GMMode:

; 3252 : 					 {
; 3253 : 						 GMMoverListRoot = curNode->next;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+520], ecx

; 3254 : 						 if (GMMoverListRoot)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+520], 0
	je	SHORT $LN47@GMMode

; 3255 : 							 GMMoverListRoot->prev = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	DWORD PTR [ecx+16], 0
$LN47@GMMode:

; 3256 : 					 }
; 3257 : 					 if(curNode->next)

	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN46@GMMode

; 3258 : 						 curNode->next->prev = curNode->prev;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
$LN46@GMMode:

; 3259 : 					 tmpList = curNode;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], ecx

; 3260 : 					 curNode = curNode->next;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _curNode$[ebp], eax

; 3261 : 					 tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release
$LN50@GMMode:

; 3262 : 				 }
; 3263 : 				 testObject = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax

; 3264 : 			 }
; 3265 : 			 else

	jmp	$LN43@GMMode
$LN52@GMMode:

; 3266 : 			 {
; 3267 : 				 switch (SimCompare (curNode->Object(), testObject))

	mov	ecx, DWORD PTR _testObject$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _curNode$[ebp]
	call	?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ; RadarDopplerClass::GMList::Object
	push	eax
	call	?SimCompare@@YAHPAVVuEntity@@0@Z	; SimCompare
	add	esp, 8
	mov	DWORD PTR tv1523[ebp], eax
	cmp	DWORD PTR tv1523[ebp], -1
	je	$LN37@GMMode
	cmp	DWORD PTR tv1523[ebp], 0
	jl	$LN43@GMMode
	cmp	DWORD PTR tv1523[ebp], 1
	jle	SHORT $LN42@GMMode
	jmp	$LN43@GMMode
$LN42@GMMode:

; 3268 : 				 {
; 3269 : 				 case 0:
; 3270 : 				 case 1: // testObject >= visObj -- Means the current allready deleted
; 3271 :                      if (curNode->prev)

	mov	edx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN41@GMMode

; 3272 : 						 curNode->prev->next = curNode->next;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax

; 3273 :                      else

	jmp	SHORT $LN39@GMMode
$LN41@GMMode:

; 3274 :                      {
; 3275 : 						 GMMoverListRoot = curNode->next;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+520], eax

; 3276 : 						 if (GMMoverListRoot)	// Don't point the thing before the end of the list to nothing if there isn't anything after this list - RH

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+520], 0
	je	SHORT $LN39@GMMode

; 3277 : 						 {
; 3278 : 							 GMMoverListRoot->prev = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	DWORD PTR [eax+16], 0
$LN39@GMMode:

; 3279 : 						 }
; 3280 :                      }
; 3281 :                      if(curNode->next)

	mov	ecx, DWORD PTR _curNode$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN38@GMMode

; 3282 : 						 curNode->next->prev = curNode->prev;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN38@GMMode:

; 3283 :                      tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 3284 : 					 
; 3285 :                      curNode = curNode->next;

	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curNode$[ebp], edx

; 3286 :                      tmpList->Release();

	mov	ecx, DWORD PTR _tmpList$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 3287 : 					 break;

	jmp	$LN43@GMMode
$LN37@GMMode:

; 3288 : 					 
; 3289 : 				 case -1: // testObject < visObj -- Means the current not added yet
; 3290 :                      if (canSee > 1.0F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN36@GMMode

; 3291 :                      {
; 3292 : 						 tmpList = new GMList (testObject);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN246@GMMode
	mov	eax, DWORD PTR _testObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
	mov	DWORD PTR tv1555[ebp], eax
	jmp	SHORT $LN247@GMMode
$LN246@GMMode:
	mov	DWORD PTR tv1555[ebp], 0
$LN247@GMMode:
	mov	ecx, DWORD PTR tv1555[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _tmpList$[ebp], edx

; 3293 : 						 tmpList->next = curNode;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 3294 : 						 tmpList->prev = lastList;

	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	eax, DWORD PTR _lastList$[ebp]
	mov	DWORD PTR [edx+16], eax

; 3295 : 						 if (tmpList->next)

	mov	ecx, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN35@GMMode

; 3296 : 							 tmpList->next->prev = tmpList;

	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN35@GMMode:

; 3297 : 						 if (tmpList->prev)

	mov	edx, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN34@GMMode

; 3298 : 							 tmpList->prev->next = tmpList;

	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN34@GMMode:

; 3299 : 						 if (curNode == GMMoverListRoot)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	cmp	ecx, DWORD PTR [eax+520]
	jne	SHORT $LN33@GMMode

; 3300 : 							 GMMoverListRoot = tmpList;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR [edx+520], eax
$LN33@GMMode:

; 3301 : 						 lastList = tmpList;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR _lastList$[ebp], ecx
$LN36@GMMode:

; 3302 :                      }
; 3303 :                      testObject = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax
$LN43@GMMode:

; 3304 : 					 break;
; 3305 : 				 }
; 3306 : 			 } // inUse != testObject
; 3307 :          } // inUse
; 3308 :          else

	jmp	$LN32@GMMode
$LN53@GMMode:

; 3309 :          {
; 3310 : 			 if (canSee > 1.0F)

	movss	xmm0, DWORD PTR _canSee$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	$LN31@GMMode

; 3311 : 			 {
; 3312 : 				 curNode = new GMList (testObject);

	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T14[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN248@GMMode
	mov	edx, DWORD PTR _testObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T14[ebp]
	call	??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ; RadarDopplerClass::GMList::GMList
	mov	DWORD PTR tv1590[ebp], eax
	jmp	SHORT $LN249@GMMode
$LN248@GMMode:
	mov	DWORD PTR tv1590[ebp], 0
$LN249@GMMode:
	mov	eax, DWORD PTR tv1590[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _curNode$[ebp], ecx

; 3313 : 				 curNode->prev = lastList;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	eax, DWORD PTR _lastList$[ebp]
	mov	DWORD PTR [edx+16], eax

; 3314 : 				 
; 3315 : 				 if (lastList)

	cmp	DWORD PTR _lastList$[ebp], 0
	je	SHORT $LN30@GMMode

; 3316 : 					 lastList->next = curNode;

	mov	ecx, DWORD PTR _lastList$[ebp]
	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3317 : 				 else

	jmp	SHORT $LN28@GMMode
$LN30@GMMode:

; 3318 : 				 {
; 3319 : 					 GMMoverListRoot = curNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR [eax+520], ecx

; 3320 : 					 if (GMMoverListRoot)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+520], 0
	je	SHORT $LN28@GMMode

; 3321 : 						 GMMoverListRoot->prev = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	DWORD PTR [ecx+16], 0
$LN28@GMMode:

; 3322 : 				 }
; 3323 : 				 lastList = curNode;

	mov	edx, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _lastList$[ebp], edx

; 3324 : 				 curNode = NULL;

	mov	DWORD PTR _curNode$[ebp], 0
$LN31@GMMode:

; 3325 : 			 }
; 3326 : 			 testObject = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax
$LN32@GMMode:

; 3327 :          }
; 3328 :       }
; 3329 :       else

	jmp	SHORT $LN27@GMMode
$LN77@GMMode:

; 3330 :       {
; 3331 : 		  testObject = (SimBaseClass*)objectWalker.GetNext();

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _testObject$[ebp], eax
$LN27@GMMode:

; 3332 :       }
; 3333 :    }

	jmp	$LN80@GMMode
$LN78@GMMode:

; 3334 :    // Delete anthing after curNode
; 3335 :    tmpList = curNode;

	mov	eax, DWORD PTR _curNode$[ebp]
	mov	DWORD PTR _tmpList$[ebp], eax

; 3336 :    if (tmpList && tmpList->prev)

	cmp	DWORD PTR _tmpList$[ebp], 0
	je	SHORT $LN26@GMMode
	mov	ecx, DWORD PTR _tmpList$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN26@GMMode

; 3337 : 	   tmpList->prev->next = NULL;

	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+20], 0
$LN26@GMMode:

; 3338 :    
; 3339 :    if (tmpList == GMMoverListRoot)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _tmpList$[ebp]
	cmp	edx, DWORD PTR [ecx+520]
	jne	SHORT $LN25@GMMode

; 3340 : 	   GMMoverListRoot = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
$LN25@GMMode:

; 3341 :    
; 3342 :    while (tmpList)

	cmp	DWORD PTR _tmpList$[ebp], 0
	je	SHORT $LN23@GMMode

; 3343 :    {
; 3344 : 	   tmp2 = tmpList;

	mov	ecx, DWORD PTR _tmpList$[ebp]
	mov	DWORD PTR _tmp2$[ebp], ecx

; 3345 : 	   tmpList = tmpList->next;

	mov	edx, DWORD PTR _tmpList$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _tmpList$[ebp], eax

; 3346 : 	   tmp2->Release();

	mov	ecx, DWORD PTR _tmp2$[ebp]
	call	?Release@GMList@RadarDopplerClass@@QAEXXZ ; RadarDopplerClass::GMList::Release

; 3347 :    }

	jmp	SHORT $LN25@GMMode
$LN23@GMMode:

; 3348 :    
; 3349 : #ifdef DEBUG
; 3350 :    // Verify order and singleness of list
; 3351 :    tmpList = GMMoverListRoot;
; 3352 :    while (tmpList) 
; 3353 :    {
; 3354 : 	   if (tmpList->next) 
; 3355 : 	   {
; 3356 : 		   F4Assert( SimCompare( tmpList->Object(), tmpList->next->Object() ) == 1 );
; 3357 : 	   }
; 3358 : 	   tmpList = tmpList->next;
; 3359 :    }
; 3360 : #endif
; 3361 :    
; 3362 :    if (IsSOI() && dropTrackCmd)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSOI@DrawableClass@@QAEHXZ		; DrawableClass::IsSOI
	test	eax, eax
	je	SHORT $LN22@GMMode
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	SHORT $LN22@GMMode

; 3363 :    {
; 3364 : 	   DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
$LN22@GMMode:

; 3365 :    }
; 3366 :    //MI
; 3367 :    if(g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	je	$LN10@GMMode
	movzx	eax, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	eax, eax
	je	$LN10@GMMode

; 3368 :    {
; 3369 : 	   if(lockedTarget && lockedTarget->BaseData())

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN10@GMMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	test	eax, eax
	je	$LN10@GMMode

; 3370 : 	   {
; 3371 : 		   if(mode == GMT)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 16			; 00000010H
	jne	$LN19@GMMode

; 3372 : 		   {
; 3373 : 			   if(lockedTarget->BaseData()->IsSim() && (lockedTarget->BaseData()->GetVt() < g_fGMTMinSpeed ||
; 3374 : 				   lockedTarget->BaseData()->GetVt() > g_fGMTMaxSpeed))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN18@GMMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1669[ebp], eax
	mov	eax, DWORD PTR tv1669[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1669[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2809[ebp]
	movss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	comiss	xmm0, DWORD PTR tv2809[ebp]
	ja	SHORT $LN17@GMMode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1682[ebp], eax
	mov	edx, DWORD PTR tv1682[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1682[ebp]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv2818[ebp]
	movss	xmm0, DWORD PTR tv2818[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMaxSpeed@@3MA
	jbe	SHORT $LN18@GMMode
$LN17@GMMode:

; 3375 : 				   DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
	jmp	SHORT $LN15@GMMode
$LN18@GMMode:

; 3376 : 			   else if(lockedTarget->BaseData()->IsCampaign() && lockedTarget->BaseData()->GetVt() <= 0.0F)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN15@GMMode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1706[ebp], eax
	mov	edx, DWORD PTR tv1706[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1706[ebp]
	mov	edx, DWORD PTR [eax+220]
	call	edx
	fstp	DWORD PTR tv2829[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR tv2829[ebp]
	jb	SHORT $LN15@GMMode

; 3377 : 				   DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
$LN15@GMMode:

; 3378 : 		   }

	jmp	$LN10@GMMode
$LN19@GMMode:

; 3379 : 		   else if(mode == GM)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 14			; 0000000eH
	jne	$LN10@GMMode

; 3380 : 		   {
; 3381 : 			   if(lockedTarget->BaseData()->IsSim() && lockedTarget->BaseData()->GetVt() > g_fGMTMinSpeed)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN12@GMMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1732[ebp], eax
	mov	eax, DWORD PTR tv1732[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1732[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2842[ebp]
	movss	xmm0, DWORD PTR tv2842[ebp]
	comiss	xmm0, DWORD PTR ?g_fGMTMinSpeed@@3MA
	jbe	SHORT $LN12@GMMode

; 3382 : 				   DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
	jmp	SHORT $LN10@GMMode
$LN12@GMMode:

; 3383 : 			   else if(lockedTarget->BaseData()->IsCampaign() && lockedTarget->BaseData()->GetVt() > 0.0F)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsCampaign@FalconEntity@@QAEHXZ	; FalconEntity::IsCampaign
	test	eax, eax
	je	SHORT $LN10@GMMode
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv1756[ebp], eax
	mov	eax, DWORD PTR tv1756[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv1756[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv2853[ebp]
	movss	xmm0, DWORD PTR tv2853[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@GMMode

; 3384 : 				   DropGMTrack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DropGMTrack@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::DropGMTrack
$LN10@GMMode:

; 3385 : 		   }
; 3386 : 	   }
; 3387 :    }
; 3388 :    
; 3389 :    //Build Track List
; 3390 :    if (lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN9@GMMode

; 3391 :    {
; 3392 : 	   // WARNING:  This might do ALOT more work than you want.  CalcRelGeom
; 3393 : 	   // will walk all children of lockedTarget (through the next pointer).
; 3394 : 	   // If you don't want this, set is next pointer to NULL before calling
; 3395 : 	   // and set it back upon return.
; 3396 : 	   CalcRelGeom(platform, lockedTarget, NULL, 1.0F / SimLibMajorFrameTime);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	?CalcRelGeom@@YAXPAVSimBaseClass@@PAVSimObjectType@@QAY02MM@Z ; CalcRelGeom
	add	esp, 16					; 00000010H
$LN9@GMMode:

; 3397 :    }
; 3398 :    
; 3399 :    if (designateCmd)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	SHORT $LN5@GMMode

; 3400 :    {
; 3401 : 	   if (mode == GM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 14			; 0000000eH
	jne	SHORT $LN7@GMMode

; 3402 : 	   {
; 3403 : 		   DoGMDesignate (GMFeatureListRoot);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z ; RadarDopplerClass::DoGMDesignate
	jmp	SHORT $LN5@GMMode
$LN7@GMMode:

; 3404 : 	   }
; 3405 : 	   else if (mode == GMT || mode == SEA)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 16			; 00000010H
	je	SHORT $LN4@GMMode
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 17			; 00000011H
	jne	SHORT $LN5@GMMode
$LN4@GMMode:

; 3406 : 	   {
; 3407 : 		   DoGMDesignate (GMMoverListRoot);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoGMDesignate@RadarDopplerClass@@IAEXPAVGMList@1@@Z ; RadarDopplerClass::DoGMDesignate
$LN5@GMMode:

; 3408 : 	   }
; 3409 :    }
; 3410 :    
; 3411 :    // MD -- 20040216: update the Pseudo waypoint after there was a slew operation
; 3412 :    if (IsSet(SP) && IsSet(SP_STAB))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN2@GMMode
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN2@GMMode

; 3413 :    {
; 3414 : 	    //  only update if cursor is in the field of MFD view
; 3415 : 		if ((F_ABS(cursorX) < 0.95F) && (F_ABS(cursorY) < 0.95F)) 

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+220]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv2877[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR tv2877[ebp]
	jbe	$LN2@GMMode
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+224]
	movss	DWORD PTR [esp], xmm0
	call	?F_ABS@@YAMM@Z				; F_ABS
	add	esp, 4
	fstp	DWORD PTR tv2885[ebp]
	movss	xmm0, DWORD PTR __real@3f733333
	comiss	xmm0, DWORD PTR tv2885[ebp]
	jbe	$LN2@GMMode

; 3416 : 		{
; 3417 : 
; 3418 : 		   float x = 0.0F, y = 0.0F, z = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$19[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$18[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _z$17[ebp], xmm0

; 3419 : 		   if (!GMSPPseudoWaypt)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+536], 0
	jne	SHORT $LN1@GMMode

; 3420 : 		   {
; 3421 : 			   GMSPPseudoWaypt = new WayPointClass();

	push	60					; 0000003cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN250@GMMode
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0WayPointClass@@QAE@XZ		; WayPointClass::WayPointClass
	mov	DWORD PTR tv1827[ebp], eax
	jmp	SHORT $LN251@GMMode
$LN250@GMMode:
	mov	DWORD PTR tv1827[ebp], 0
$LN251@GMMode:
	mov	edx, DWORD PTR tv1827[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+536], ecx
$LN1@GMMode:

; 3422 : 		   }
; 3423 : 		   // calculate x/y/z's
; 3424 : 		   GetGMCursorPosition (&x, &y);

	lea	edx, DWORD PTR _y$18[ebp]
	push	edx
	lea	eax, DWORD PTR _x$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGMCursorPosition@RadarDopplerClass@@IAEXPAM0@Z ; RadarDopplerClass::GetGMCursorPosition

; 3425 : 		   
; 3426 : 		   z = OTWDriver.GetGroundLevel(x, y);

	push	0
	push	ecx
	movss	xmm0, DWORD PTR _y$18[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$19[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR _z$17[ebp]

; 3427 : 		   
; 3428 : 		   GMSPPseudoWaypt->SetLocation(x, y, z);

	push	ecx
	movss	xmm0, DWORD PTR _z$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$18[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$19[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+536]
	call	?SetLocation@WayPointClass@@QAEXMMM@Z	; WayPointClass::SetLocation

; 3429 : 		   GMSPPseudoWaypt->SetWPArrive(SimLibElapsedTime);

	mov	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	call	?SetWPArrive@WayPointClass@@QAEXK@Z	; WayPointClass::SetWPArrive

; 3430 : 		   
; 3431 : 		   SetGroundPoint(x, y, z);

	push	ecx
	movss	xmm0, DWORD PTR _z$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$18[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$19[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	call	eax

; 3432 : 		   ToggleAGcursorZero();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+180]
	call	eax

; 3433 : 		   
; 3434 : 		   SetGMScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGMScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetGMScan
$LN2@GMMode:

; 3435 : 		}
; 3436 :    }   
; 3437 :    
; 3438 :    // Update groundSpot position
; 3439 :    GetAGCenter (&x, &y);

	lea	ecx, DWORD PTR _y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax

; 3440 :    ((AircraftClass*)platform)->Sms->drawable->SetGroundSpotPos(x, y, 0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+940]
	mov	ecx, DWORD PTR [eax+160]
	call	?SetGroundSpotPos@SmsDrawable@@QAEXMMM@Z ; SmsDrawable::SetGroundSpotPos

; 3441 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _featureWalker$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$0:
	lea	ecx, DWORD PTR _featureWalker$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$1:
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$2:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$3:
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$4:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$5:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$6:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$7:
	mov	eax, DWORD PTR $T14[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GMMode@RadarDopplerClass@@IAEXXZ$8:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GMMode@RadarDopplerClass@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-508]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GMMode@RadarDopplerClass@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GMMode@RadarDopplerClass@@IAEXXZ ENDP			; RadarDopplerClass::GMMode
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_trig$ = -28						; size = 8
tv219 = -20						; size = 4
tv213 = -16						; size = 4
_cosAz$ = -12						; size = 4
_sinAz$ = -8						; size = 4
_this$ = -4						; size = 4
_newTarget$ = 8						; size = 4
?SetGroundTarget@RadarDopplerClass@@IAEXPAVFalconEntity@@@Z PROC ; RadarDopplerClass::SetGroundTarget
; _this$ = ecx

; 2229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 2230 : float cosAz, sinAz;
; 2231 : mlTrig trig;
; 2232 : 
; 2233 : 	if (lockedTarget && newTarget == lockedTarget->BaseData())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN4@SetGroundT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	DWORD PTR _newTarget$[ebp], eax
	jne	SHORT $LN4@SetGroundT

; 2234 : 		return;

	jmp	$LN5@SetGroundT
$LN4@SetGroundT:

; 2235 : 
; 2236 : 	SetSensorTargetHack( newTarget );

	mov	edx, DWORD PTR _newTarget$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 2237 : 
; 2238 : 	if (newTarget)

	cmp	DWORD PTR _newTarget$[ebp], 0
	je	$LN1@SetGroundT

; 2239 : 	{
; 2240 :       if (flags & NORM)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 1
	je	$LN2@SetGroundT

; 2241 :       {
; 2242 :          mlSinCos (&trig, groundLookAz);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+468]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _trig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 2243 :          cosAz = trig.cos;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	movss	DWORD PTR _cosAz$[ebp], xmm0

; 2244 :          sinAz = trig.sin;

	movss	xmm0, DWORD PTR _trig$[ebp]
	movss	DWORD PTR _sinAz$[ebp], xmm0

; 2245 : 
; 2246 :          viewOffsetInertial.x = lockedTarget->BaseData()->XPos() - GMat.x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv213[ebp]
	movss	xmm0, DWORD PTR tv213[ebp]
	subss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 2247 :          viewOffsetInertial.y = lockedTarget->BaseData()->YPos() - GMat.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv219[ebp]
	movss	xmm0, DWORD PTR tv219[ebp]
	subss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR _viewOffsetInertial+4, xmm0

; 2248 : 
; 2249 :          viewOffsetRel.x =  cosAz*viewOffsetInertial.x + sinAz*viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _cosAz$[ebp]
	mulss	xmm0, DWORD PTR _viewOffsetInertial
	movss	xmm1, DWORD PTR _sinAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetInertial+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetRel, xmm0

; 2250 :          viewOffsetRel.y = -sinAz*viewOffsetInertial.x + cosAz*viewOffsetInertial.y;

	movss	xmm0, DWORD PTR _sinAz$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _viewOffsetInertial
	movss	xmm1, DWORD PTR _cosAz$[ebp]
	mulss	xmm1, DWORD PTR _viewOffsetInertial+4
	addss	xmm0, xmm1
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 2251 : 
; 2252 :          viewOffsetRel.x /= tdisplayRange * 0.5F;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _viewOffsetRel
	divss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetRel, xmm1

; 2253 :          viewOffsetRel.y /= tdisplayRange * 0.5F;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+264]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR _viewOffsetRel+4
	divss	xmm1, xmm0
	movss	DWORD PTR _viewOffsetRel+4, xmm1

; 2254 :       }
; 2255 :       else

	jmp	SHORT $LN1@SetGroundT
$LN2@SetGroundT:

; 2256 :       {
; 2257 :          GMat.x = lockedTarget->BaseData()->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _GMat

; 2258 :          GMat.y = lockedTarget->BaseData()->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _GMat+4

; 2259 :          viewOffsetInertial.x = viewOffsetRel.x = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel, xmm0
	movss	xmm0, DWORD PTR _viewOffsetRel
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 2260 :          viewOffsetInertial.y = viewOffsetRel.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0
	movss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR _viewOffsetInertial+4, xmm0
$LN1@SetGroundT:
$LN5@SetGroundT:

; 2261 :       }
; 2262 :    }
; 2263 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetGroundTarget@RadarDopplerClass@@IAEXPAVFalconEntity@@@Z ENDP ; RadarDopplerClass::SetGroundTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?IsAGDcltBit@RadarDopplerClass@@IAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newFlag$ = 8						; size = 4
?IsAGDcltBit@RadarDopplerClass@@IAEHH@Z PROC		; RadarDopplerClass::IsAGDcltBit, COMDAT
; _this$ = ecx

; 260  : 	int  IsAGDcltBit(int newFlag) {return (newFlag & agdclt) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newFlag$[ebp]
	and	ecx, DWORD PTR [eax+500]
	je	SHORT $LN3@IsAGDcltBi
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAGDcltBi
$LN3@IsAGDcltBi:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAGDcltBi:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsAGDcltBit@RadarDopplerClass@@IAEHH@Z ENDP		; RadarDopplerClass::IsAGDcltBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?IsAGDclt@RadarDopplerClass@@IAEHH@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_flg$ = 8						; size = 4
?IsAGDclt@RadarDopplerClass@@IAEHH@Z PROC		; RadarDopplerClass::IsAGDclt, COMDAT
; _this$ = ecx

; 259  : 	int IsAGDclt(int flg) { return IsSet(AGDecluttered) && IsAGDcltBit(flg); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN3@IsAGDclt
	mov	eax, DWORD PTR _flg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDcltBit@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDcltBit
	test	eax, eax
	je	SHORT $LN3@IsAGDclt
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@IsAGDclt
$LN3@IsAGDclt:
	mov	DWORD PTR tv72[ebp], 0
$LN4@IsAGDclt:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsAGDclt@RadarDopplerClass@@IAEHH@Z ENDP		; RadarDopplerClass::IsAGDclt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?IsAADclt@RadarDopplerClass@@IAEHH@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_flg$ = 8						; size = 4
?IsAADclt@RadarDopplerClass@@IAEHH@Z PROC		; RadarDopplerClass::IsAADclt, COMDAT
; _this$ = ecx

; 254  : 	int IsAADclt(int flg) { return IsSet(AADecluttered) && IsAADcltBit(flg); };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	push	262144					; 00040000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN3@IsAADclt
	mov	eax, DWORD PTR _flg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAADcltBit@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAADcltBit
	test	eax, eax
	je	SHORT $LN3@IsAADclt
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@IsAADclt
$LN3@IsAADclt:
	mov	DWORD PTR tv72[ebp], 0
$LN4@IsAADclt:
	mov	eax, DWORD PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsAADclt@RadarDopplerClass@@IAEHH@Z ENDP		; RadarDopplerClass::IsAADclt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?IsAADcltBit@RadarDopplerClass@@IAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newFlag$ = 8						; size = 4
?IsAADcltBit@RadarDopplerClass@@IAEHH@Z PROC		; RadarDopplerClass::IsAADcltBit, COMDAT
; _this$ = ecx

; 253  : 	int  IsAADcltBit(int newFlag) {return (newFlag & aadclt) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newFlag$[ebp]
	and	ecx, DWORD PTR [eax+496]
	je	SHORT $LN3@IsAADcltBi
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsAADcltBi
$LN3@IsAADcltBi:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsAADcltBi:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsAADcltBit@RadarDopplerClass@@IAEHH@Z ENDP		; RadarDopplerClass::IsAADcltBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?ClearFlagBit@RadarDopplerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?ClearFlagBit@RadarDopplerClass@@QAEXH@Z PROC		; RadarDopplerClass::ClearFlagBit, COMDAT
; _this$ = ecx

; 238  : 	void ClearFlagBit (int newFlag) {flags &= ~newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newFlag$[ebp]
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+492]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ENDP		; RadarDopplerClass::ClearFlagBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?SetFlagBit@RadarDopplerClass@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newFlag$ = 8						; size = 4
?SetFlagBit@RadarDopplerClass@@QAEXH@Z PROC		; RadarDopplerClass::SetFlagBit, COMDAT
; _this$ = ecx

; 237  :    void SetFlagBit (int newFlag) {flags |= newFlag;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	or	ecx, DWORD PTR _newFlag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFlagBit@RadarDopplerClass@@QAEXH@Z ENDP		; RadarDopplerClass::SetFlagBit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?IsSet@RadarDopplerClass@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newFlag$ = 8						; size = 4
?IsSet@RadarDopplerClass@@QAEHH@Z PROC			; RadarDopplerClass::IsSet, COMDAT
; _this$ = ecx

; 236  :    int  IsSet (int newFlag) {return (newFlag & flags) ? TRUE : FALSE;}; //MI moved to public

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newFlag$[ebp]
	and	ecx, DWORD PTR [eax+492]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@RadarDopplerClass@@QAEHH@Z ENDP			; RadarDopplerClass::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radardoppler.h
;	COMDAT ?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ PROC ; RadarDopplerClass::GMList::Object, COMDAT
; _this$ = ecx

; 203  :          FalconEntity* Object(void) {return object;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Object@GMList@RadarDopplerClass@@QAEPAVFalconEntity@@XZ ENDP ; RadarDopplerClass::GMList::Object
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Release@GMList@RadarDopplerClass@@QAEXXZ PROC		; RadarDopplerClass::GMList::Release
; _this$ = ecx

; 2219 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2220 :    VuDeReferenceEntity (object);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?VuDeReferenceEntity@@YAHPAVVuEntity@@@Z ; VuDeReferenceEntity
	add	esp, 4

; 2221 :    count --;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2222 : 
; 2223 :    if (count == 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN2@Release

; 2224 :       delete (this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@Release:

; 2225 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Release@GMList@RadarDopplerClass@@QAEXXZ ENDP		; RadarDopplerClass::GMList::Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_obj$ = 8						; size = 4
??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z PROC ; RadarDopplerClass::GMList::GMList
; _this$ = ecx

; 2209 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2210 :    F4Assert (obj);
; 2211 :    next = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2212 :    prev = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 2213 :    object = obj;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx], eax

; 2214 :    VuReferenceEntity (object);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?VuReferenceEntity@@YAHPAVVuEntity@@@Z	; VuReferenceEntity
	add	esp, 4

; 2215 :    count = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 2216 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0GMList@RadarDopplerClass@@QAE@PAVFalconEntity@@@Z ENDP ; RadarDopplerClass::GMList::GMList
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_mFaults$1 = -8						; size = 4
_this$ = -4						; size = 4
?AGBottomRow@RadarDopplerClass@@IAEXXZ PROC		; RadarDopplerClass::AGBottomRow
; _this$ = ecx

; 2375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2376 :    if (g_bRealisticAvionics) {

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN13@AGBottomRo

; 2377 :        if (IsAGDclt(Dclt) == FALSE) LabelButton(10, "DCLT", NULL, IsSet(AGDecluttered));

	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN12@AGBottomRo
	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	push	eax
	push	0
	push	OFFSET ??_C@_04LKFIONEM@DCLT?$AA@
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN12@AGBottomRo:

; 2378 :        if (IsAGDclt(Fmt1) == FALSE) DefaultLabel(11);

	push	1024					; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN11@AGBottomRo
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DefaultLabel@MfdDrawable@@QAEXH@Z	; MfdDrawable::DefaultLabel
$LN11@AGBottomRo:

; 2379 :        //if (IsAGDclt(Fmt2) == FALSE) DefaultLabel(12);	MI moved downwards
; 2380 :        if (IsAGDclt(Fmt3) == FALSE) DefaultLabel(13);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN10@AGBottomRo
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DefaultLabel@MfdDrawable@@QAEXH@Z	; MfdDrawable::DefaultLabel
$LN10@AGBottomRo:

; 2381 :        if (IsAGDclt(Swap) == FALSE) DefaultLabel(14);

	push	8192					; 00002000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN9@AGBottomRo
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DefaultLabel@MfdDrawable@@QAEXH@Z	; MfdDrawable::DefaultLabel
$LN9@AGBottomRo:

; 2382 : 	   //MI RF Switch info
; 2383 : 	   if(SimDriver.GetPlayerAircraft() && (SimDriver.GetPlayerAircraft()->RFState == 1 ||
; 2384 : 			SimDriver.GetPlayerAircraft()->RFState == 2))

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	$LN8@AGBottomRo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1520], 1
	je	SHORT $LN7@AGBottomRo
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1520], 2
	jne	SHORT $LN8@AGBottomRo
$LN7@AGBottomRo:

; 2385 : 	   {
; 2386 : 		   FackClass* mFaults = ((AircraftClass*)(SimDriver.GetPlayerAircraft()))->mFaults;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+928]
	mov	DWORD PTR _mFaults$1[ebp], ecx

; 2387 : 		   if(mFaults && !(mFaults->GetFault(FaultClass::fcc_fault) == FaultClass::xmtr))

	cmp	DWORD PTR _mFaults$1[ebp], 0
	je	SHORT $LN6@AGBottomRo
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _mFaults$1[ebp]
	call	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
	cmp	eax, 1024				; 00000400H
	je	SHORT $LN6@AGBottomRo

; 2388 : 		   {
; 2389 : 			   if(SimDriver.GetPlayerAircraft()->RFState == 1)

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	cmp	DWORD PTR [eax+1520], 1
	jne	SHORT $LN5@AGBottomRo

; 2390 : 				   LabelButton(12, "RDY", "QUIET");

	push	0
	push	OFFSET ??_C@_05DHIGAFHJ@QUIET?$AA@
	push	OFFSET ??_C@_03KDFFCEML@RDY?$AA@
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 2391 : 			   else

	jmp	SHORT $LN6@AGBottomRo
$LN5@AGBottomRo:

; 2392 : 				   LabelButton(12, "RDY", "SILENT");

	push	0
	push	OFFSET ??_C@_06MNODKNNC@SILENT?$AA@
	push	OFFSET ??_C@_03KDFFCEML@RDY?$AA@
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN6@AGBottomRo:

; 2393 : 		   }
; 2394 : 	   }
; 2395 : 	   else

	jmp	SHORT $LN3@AGBottomRo
$LN8@AGBottomRo:

; 2396 : 		   if (IsAGDclt(Fmt2) == FALSE) DefaultLabel(12);

	push	2048					; 00000800H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAGDclt@RadarDopplerClass@@IAEHH@Z	; RadarDopplerClass::IsAGDclt
	test	eax, eax
	jne	SHORT $LN3@AGBottomRo
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DefaultLabel@MfdDrawable@@QAEXH@Z	; MfdDrawable::DefaultLabel
$LN3@AGBottomRo:

; 2397 :    } else {

	jmp	SHORT $LN14@AGBottomRo
$LN13@AGBottomRo:

; 2398 :        LabelButton (10, "DCLT", NULL, IsSet (AGDecluttered));

	push	524288					; 00080000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	push	eax
	push	0
	push	OFFSET ??_C@_04LKFIONEM@DCLT?$AA@
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 2399 :        LabelButton (11, "SMS");

	push	0
	push	0
	push	OFFSET ??_C@_03OONHJAKL@SMS?$AA@
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 2400 :        LabelButton (13, "MENU", NULL, 1);//me123

	push	1
	push	0
	push	OFFSET ??_C@_04IILMDFMO@MENU?$AA@
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 2401 :        LabelButton (14, "SWAP");

	push	0
	push	0
	push	OFFSET ??_C@_04NLFHDAEB@SWAP?$AA@
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN14@AGBottomRo:

; 2402 :    }
; 2403 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AGBottomRow@RadarDopplerClass@@IAEXXZ ENDP		; RadarDopplerClass::AGBottomRow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_dist$1 = -36						; size = 4
tv200 = -32						; size = 4
tv195 = -28						; size = 4
_dy$2 = -24						; size = 4
_dx$3 = -20						; size = 4
_maxIdx$4 = -16						; size = 4
_dispRange$5 = -12					; size = 4
_i$6 = -8						; size = 4
_this$ = -4						; size = 4
?RestoreAGCursor@RadarDopplerClass@@UAEXXZ PROC		; RadarDopplerClass::RestoreAGCursor
; _this$ = ecx

; 913  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 	viewOffsetInertial.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 915  : 	viewOffsetInertial.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetInertial+4, xmm0

; 916  : 	viewOffsetInertial.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetInertial+8, xmm0

; 917  : 
; 918  : 	viewOffsetRel.x = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel, xmm0

; 919  : 	viewOffsetRel.y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0

; 920  : 	viewOffsetRel.z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel+8, xmm0

; 921  : 
; 922  : // now check if steerpoint position is off of the current radar range, and adjust it appropriately
; 923  : // only in NORM mode and STP mode
; 924  : 	// MD -- 20040229: and make this adjustment if we are ground stabilized in SP mode as well
; 925  : 	if ((flags & NORM) && ( (!(flags & SP)) || (IsSet(SP) && IsSet(SP_STAB))))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 1
	je	$LN13@RestoreAGC
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 64					; 00000040H
	je	SHORT $LN12@RestoreAGC
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN13@RestoreAGC
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	$LN13@RestoreAGC
$LN12@RestoreAGC:

; 926  : 	{
; 927  :         int i = 0;

	mov	DWORD PTR _i$6[ebp], 0

; 928  : 		// Distance to GMat, only x and y
; 929  : 		float dx,dy,dist, dispRange;
; 930  : 		dx = platform->XPos() - viewCenter.x;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv195[ebp]
	movss	xmm0, DWORD PTR tv195[ebp]
	subss	xmm0, DWORD PTR _viewCenter
	movss	DWORD PTR _dx$3[ebp], xmm0

; 931  : 		dy = platform->YPos() - viewCenter.y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv200[ebp]
	movss	xmm0, DWORD PTR tv200[ebp]
	subss	xmm0, DWORD PTR _viewCenter+4
	movss	DWORD PTR _dy$2[ebp], xmm0

; 932  : 
; 933  : 		dist = dx*dx + dy*dy;

	movss	xmm0, DWORD PTR _dx$3[ebp]
	mulss	xmm0, DWORD PTR _dx$3[ebp]
	movss	xmm1, DWORD PTR _dy$2[ebp]
	mulss	xmm1, DWORD PTR _dy$2[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _dist$1[ebp], xmm0

; 934  : 
; 935  : 		// find correct radar scan distance
; 936  : 		for (i=0; i<NUM_RANGES; i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN11@RestoreAGC
$LN10@RestoreAGC:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN11@RestoreAGC:
	cmp	DWORD PTR _i$6[ebp], 5
	jge	SHORT $LN9@RestoreAGC

; 937  : 		{
; 938  : 			dispRange = rangeScales[i] * NM_TO_FT;

	mov	ecx, DWORD PTR _i$6[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4+312]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	movss	DWORD PTR _dispRange$5[ebp], xmm0

; 939  : 			dispRange *= dispRange;

	movss	xmm0, DWORD PTR _dispRange$5[ebp]
	mulss	xmm0, DWORD PTR _dispRange$5[ebp]
	movss	DWORD PTR _dispRange$5[ebp], xmm0

; 940  : 			if (dist < dispRange)

	movss	xmm0, DWORD PTR _dispRange$5[ebp]
	comiss	xmm0, DWORD PTR _dist$1[ebp]
	jbe	SHORT $LN8@RestoreAGC

; 941  : 				break;

	jmp	SHORT $LN9@RestoreAGC
$LN8@RestoreAGC:

; 942  : 		}

	jmp	SHORT $LN10@RestoreAGC
$LN9@RestoreAGC:

; 943  : 
; 944  : 		int maxIdx;
; 945  : 		// Reuse current range, within limits of course
; 946  : 		if (flags & (DBS1 | DBS2) || mode == GMT || mode == SEA)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 12					; 0000000cH
	jne	SHORT $LN6@RestoreAGC
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 16			; 00000010H
	je	SHORT $LN6@RestoreAGC
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 17			; 00000011H
	jne	SHORT $LN7@RestoreAGC
$LN6@RestoreAGC:

; 947  : 		{
; 948  : 			maxIdx = NUM_RANGES - 3;

	mov	DWORD PTR _maxIdx$4[ebp], 2

; 949  : 		}
; 950  : 		else

	jmp	SHORT $LN5@RestoreAGC
$LN7@RestoreAGC:

; 951  : 		{
; 952  : 			maxIdx = NUM_RANGES - 2;

	mov	DWORD PTR _maxIdx$4[ebp], 3
$LN5@RestoreAGC:

; 953  : 		}
; 954  : 
; 955  : 		if (mode != GM)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 14			; 0000000eH
	je	SHORT $LN4@RestoreAGC

; 956  : 		{
; 957  : 			ClearFlagBit(DBS1);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 958  : 			ClearFlagBit(DBS2);

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN4@RestoreAGC:

; 959  : 		}
; 960  : 
; 961  : 		curRangeIdx = i;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [edx+388], eax

; 962  : 		if (curRangeIdx > maxIdx)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+388]
	cmp	edx, DWORD PTR _maxIdx$4[ebp]
	jle	SHORT $LN3@RestoreAGC

; 963  : 			curRangeIdx = maxIdx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _maxIdx$4[ebp]
	mov	DWORD PTR [eax+388], ecx
	jmp	SHORT $LN1@RestoreAGC
$LN3@RestoreAGC:

; 964  : 		else if (curRangeIdx < 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+388], 0
	jge	SHORT $LN1@RestoreAGC

; 965  : 			curRangeIdx = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+388], 0
$LN1@RestoreAGC:

; 966  : 
; 967  : 		gmRangeIdx = curRangeIdx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	mov	DWORD PTR [ecx+404], eax

; 968  : 		displayRange = rangeScales[curRangeIdx];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+388]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+312]
	mov	DWORD PTR [eax+212], edx

; 969  : 		tdisplayRange = displayRange * NM_TO_FT;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+212]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+264], xmm0

; 970  : 		SetGMScan();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGMScan@RadarDopplerClass@@IAEXXZ	; RadarDopplerClass::SetGMScan
$LN13@RestoreAGC:

; 971  : 	}
; 972  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreAGCursor@RadarDopplerClass@@UAEXXZ ENDP		; RadarDopplerClass::RestoreAGCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetAGCenter@RadarDopplerClass@@UAEXPAM0@Z PROC		; RadarDopplerClass::GetAGCenter
; _this$ = ecx

; 2362 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2363 :    *x = GMat.x;

	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR _GMat
	movss	DWORD PTR [eax], xmm0

; 2364 :    *y = GMat.y;

	mov	ecx, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR _GMat+4
	movss	DWORD PTR [ecx], xmm0

; 2365 : 
; 2366 :    if ((flags & NORM))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+492]
	and	eax, 1
	je	SHORT $LN1@GetAGCente

; 2367 :    {
; 2368 :       *x += viewOffsetInertial.x;

	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _viewOffsetInertial
	mov	edx, DWORD PTR _x$[ebp]
	movss	DWORD PTR [edx], xmm0

; 2369 :       *y += viewOffsetInertial.y;

	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _viewOffsetInertial+4
	mov	ecx, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN1@GetAGCente:

; 2370 :    }
; 2371 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAGCenter@RadarDopplerClass@@UAEXPAM0@Z ENDP		; RadarDopplerClass::GetAGCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?IsAG@RadarDopplerClass@@UAEHXZ PROC			; RadarDopplerClass::IsAG
; _this$ = ecx

; 2348 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2349 : int retval;
; 2350 : 
; 2351 :    if (mode == GM || mode == GMT || mode == SEA)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+184], 14			; 0000000eH
	je	SHORT $LN2@IsAG
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+184], 16			; 00000010H
	je	SHORT $LN2@IsAG
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 17			; 00000011H
	jne	SHORT $LN3@IsAG
$LN2@IsAG:

; 2352 : // 2000-10-04 MODIFIED BY S.G. NEED TO KNOW WHICH MODE WE ARE IN
; 2353 : //    retval = TRUE;
; 2354 :       retval = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR _retval$[ebp], ecx

; 2355 :    else

	jmp	SHORT $LN1@IsAG
$LN3@IsAG:

; 2356 :       retval = FALSE;

	mov	DWORD PTR _retval$[ebp], 0
$LN1@IsAG:

; 2357 : 
; 2358 :    return retval;

	mov	eax, DWORD PTR _retval$[ebp]

; 2359 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAG@RadarDopplerClass@@UAEHXZ ENDP			; RadarDopplerClass::IsAG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
_zPos$ = 16						; size = 4
?SetGroundPoint@RadarDopplerClass@@UAEXMMM@Z PROC	; RadarDopplerClass::SetGroundPoint
; _this$ = ecx

; 905  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 906  : 	viewCenter.x = xPos;

	movss	xmm0, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR _viewCenter, xmm0

; 907  : 	viewCenter.y = yPos;

	movss	xmm0, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR _viewCenter+4, xmm0

; 908  : 	viewCenter.z = zPos;

	movss	xmm0, DWORD PTR _zPos$[ebp]
	movss	DWORD PTR _viewCenter+8, xmm0

; 909  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetGroundPoint@RadarDopplerClass@@UAEXMMM@Z ENDP	; RadarDopplerClass::SetGroundPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAGcursorZero@RadarDopplerClass@@UAEXXZ PROC	; RadarDopplerClass::ToggleAGcursorZero
; _this$ = ecx

; 2342 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2343 :    viewOffsetInertial.x = viewOffsetInertial.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetInertial+4, xmm0
	movss	xmm0, DWORD PTR _viewOffsetInertial+4
	movss	DWORD PTR _viewOffsetInertial, xmm0

; 2344 :    viewOffsetRel.x = viewOffsetRel.y = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _viewOffsetRel+4, xmm0
	movss	xmm0, DWORD PTR _viewOffsetRel+4
	movss	DWORD PTR _viewOffsetRel, xmm0

; 2345 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAGcursorZero@RadarDopplerClass@@UAEXXZ ENDP	; RadarDopplerClass::ToggleAGcursorZero
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAGsnowPlow@RadarDopplerClass@@UAEXXZ PROC	; RadarDopplerClass::ToggleAGsnowPlow
; _this$ = ecx

; 2314 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2315 : 	if (flags & SP)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+492]
	and	ecx, 64					; 00000040H
	je	SHORT $LN4@ToggleAGsn

; 2316 : 	{
; 2317 : 		SetAGSteerpoint(TRUE);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+256]
	call	edx

; 2318 : 		if (g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN3@ToggleAGsn
	movzx	ecx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	ecx, ecx
	je	SHORT $LN3@ToggleAGsn

; 2319 : 			RestoreAGCursor();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+260]
	call	edx
$LN3@ToggleAGsn:

; 2320 : 		LastAGModes = 3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+936], 3

; 2321 : 	}
; 2322 : 	else

	jmp	SHORT $LN5@ToggleAGsn
$LN4@ToggleAGsn:

; 2323 : 	{
; 2324 : 		SetAGSnowPlow(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	call	eax

; 2325 : 		if (g_bRealisticAvionics && g_bAGRadarFixes)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	je	SHORT $LN1@ToggleAGsn
	movzx	edx, BYTE PTR ?g_bAGRadarFixes@@3_NA	; g_bAGRadarFixes
	test	edx, edx
	je	SHORT $LN1@ToggleAGsn

; 2326 : 			RestoreAGCursor();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+260]
	call	eax
$LN1@ToggleAGsn:

; 2327 : 		LastAGModes = 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+936], 2
$LN5@ToggleAGsn:

; 2328 : 	}
; 2329 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAGsnowPlow@RadarDopplerClass@@UAEXXZ ENDP	; RadarDopplerClass::ToggleAGsnowPlow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAGfreeze@RadarDopplerClass@@UAEXXZ PROC		; RadarDopplerClass::ToggleAGfreeze
; _this$ = ecx

; 2304 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2305 : 	LastAGModes = 1; // ASSOCIATOR: moved to here so that the key command works the same as the MFD command 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+936], 1

; 2306 : 	if (flags & FZ)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+492]
	and	edx, 32					; 00000020H
	je	SHORT $LN2@ToggleAGfr

; 2307 :       ClearFlagBit (FZ);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 2308 :    else

	jmp	SHORT $LN3@ToggleAGfr
$LN2@ToggleAGfr:

; 2309 :       SetFlagBit(FZ);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit
$LN3@ToggleAGfr:

; 2310 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAGfreeze@RadarDopplerClass@@UAEXXZ ENDP		; RadarDopplerClass::ToggleAGfreeze
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?SetAGSteerpoint@RadarDopplerClass@@UAEXH@Z PROC	; RadarDopplerClass::SetAGSteerpoint
; _this$ = ecx

; 2282 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2283 : 	// MD -- 20040216: adding logic to support GM SP ground stabilization.
; 2284 : 	// Here we need to ensure that the FCC is put back into standard waypoint
; 2285 : 	// steering mode.
; 2286 : 	if (IsSet(SP) && IsSet(SP_STAB))

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN5@SetAGSteer
	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSet@RadarDopplerClass@@QAEHH@Z	; RadarDopplerClass::IsSet
	test	eax, eax
	je	SHORT $LN5@SetAGSteer

; 2287 : 	{
; 2288 : 		if (SimDriver.GetPlayerAircraft())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	test	eax, eax
	je	SHORT $LN4@SetAGSteer

; 2289 : 			SimDriver.GetPlayerAircraft()->FCC->SetStptMode(FireControlComputer::FCCWaypoint);

	push	0
	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	ecx, DWORD PTR [eax+936]
	call	?SetStptMode@FireControlComputer@@QAEXW4FCCStptMode@1@@Z ; FireControlComputer::SetStptMode
$LN4@SetAGSteer:

; 2290 : 		SimDriver.GetPlayerAircraft()->FCC->waypointStepCmd = 127;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	eax, DWORD PTR [eax+936]
	mov	BYTE PTR [eax+194], 127			; 0000007fH

; 2291 : 		ClearFlagBit(SP_STAB);

	push	128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit

; 2292 : 		if (GMSPPseudoWaypt)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+536], 0
	je	SHORT $LN5@SetAGSteer

; 2293 : 		{
; 2294 : 			SetGMSPWaypt(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGMSPWaypt@RadarDopplerClass@@QAEXPAVWayPointClass@@@Z ; RadarDopplerClass::SetGMSPWaypt
$LN5@SetAGSteer:

; 2295 : 		}
; 2296 : 	}
; 2297 : 	if (!val)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@SetAGSteer

; 2298 : 		SetFlagBit (SP);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 2299 : 	else

	jmp	SHORT $LN6@SetAGSteer
$LN2@SetAGSteer:

; 2300 : 		ClearFlagBit(SP);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN6@SetAGSteer:

; 2301 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGSteerpoint@RadarDopplerClass@@UAEXH@Z ENDP	; RadarDopplerClass::SetAGSteerpoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?SetAGFreeze@RadarDopplerClass@@QAEXH@Z PROC		; RadarDopplerClass::SetAGFreeze
; _this$ = ecx

; 2266 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2267 :    if (val)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN2@SetAGFreez

; 2268 :       SetFlagBit (FZ);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 2269 :    else

	jmp	SHORT $LN3@SetAGFreez
$LN2@SetAGFreez:

; 2270 :       ClearFlagBit(FZ);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN3@SetAGFreez:

; 2271 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGFreeze@RadarDopplerClass@@QAEXH@Z ENDP		; RadarDopplerClass::SetAGFreeze
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\gmscope.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?SetAGSnowPlow@RadarDopplerClass@@UAEXH@Z PROC		; RadarDopplerClass::SetAGSnowPlow
; _this$ = ecx

; 2274 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2275 :    if (val)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN2@SetAGSnowP

; 2276 :       SetFlagBit (SP);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlagBit@RadarDopplerClass@@QAEXH@Z	; RadarDopplerClass::SetFlagBit

; 2277 :    else

	jmp	SHORT $LN3@SetAGSnowP
$LN2@SetAGSnowP:

; 2278 :       ClearFlagBit(SP);

	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFlagBit@RadarDopplerClass@@QAEXH@Z ; RadarDopplerClass::ClearFlagBit
$LN3@SetAGSnowP:

; 2279 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGSnowPlow@RadarDopplerClass@@UAEXH@Z ENDP		; RadarDopplerClass::SetAGSnowPlow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\campwp.h
;	COMDAT ?SetWPArrive@WayPointClass@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?SetWPArrive@WayPointClass@@QAEXK@Z PROC		; WayPointClass::SetWPArrive, COMDAT
; _this$ = ecx

; 195  : 	void SetWPArrive (CampaignTime t)				{ Arrive = t; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWPArrive@WayPointClass@@QAEXK@Z ENDP		; WayPointClass::SetWPArrive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?IsEmitting@RadarClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@RadarClass@@QAEHXZ PROC			; RadarClass::IsEmitting, COMDAT
; _this$ = ecx

; 93   : 	int IsEmitting (void)						{ return isEmitting; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@RadarClass@@QAEHXZ ENDP			; RadarClass::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\drawable.h
;	COMDAT ?IsSOI@DrawableClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsSOI@DrawableClass@@QAEHXZ PROC			; DrawableClass::IsSOI, COMDAT
; _this$ = ecx

; 141  :       int IsSOI (void) {return (drawFlags & SOI ? TRUE : FALSE);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN3@IsSOI
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSOI
$LN3@IsSOI:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSOI:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSOI@DrawableClass@@QAEHXZ ENDP			; DrawableClass::IsSOI
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z PROC	; DrawableObject::GetPosition, COMDAT
; _this$ = ecx

; 28   : 	void GetPosition(Tpoint* pos){ *pos = position; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ENDP	; DrawableObject::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ PROC	; DrawableObject::GetClass, COMDAT
; _this$ = ecx

; 26   : 	DrawClass GetClass() const { return drawClassID; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetClass@DrawableObject@@QBE?AW4DrawClass@1@XZ ENDP	; DrawableObject::GetClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ?GetGain@RenderGMComposite@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGain@RenderGMComposite@@QAEMXZ PROC			; RenderGMComposite::GetGain, COMDAT
; _this$ = ecx

; 44   : 	float	GetGain( void )				{ return radar.GetGain(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?GetGain@RenderGMRadar@@QAEMXZ		; RenderGMRadar::GetGain
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGain@RenderGMComposite@@QAEMXZ ENDP			; RenderGMComposite::GetGain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ?SetGain@RenderGMComposite@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newGain$ = 8						; size = 4
?SetGain@RenderGMComposite@@QAEXM@Z PROC		; RenderGMComposite::SetGain, COMDAT
; _this$ = ecx

; 39   : 	void	SetGain( float newGain )					{ radar.SetGain( newGain ); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _newGain$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 262852				; 000402c4H
	call	?SetGain@RenderGMRadar@@QAEXM@Z		; RenderGMRadar::SetGain
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGain@RenderGMComposite@@QAEXM@Z ENDP		; RenderGMComposite::SetGain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ?SetGimbalLimit@RenderGMComposite@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_angleLimit$ = 8					; size = 4
?SetGimbalLimit@RenderGMComposite@@QAEXM@Z PROC		; RenderGMComposite::SetGimbalLimit, COMDAT
; _this$ = ecx

; 33   : 	void	SetGimbalLimit( float angleLimit )			{ gimbalLimit = angleLimit; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _angleLimit$[ebp]
	movss	DWORD PTR [eax+526124], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGimbalLimit@RenderGMComposite@@QAEXM@Z ENDP		; RenderGMComposite::SetGimbalLimit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??__EGM_OVERSCAN_V@@YAXXZ
text$yc	SEGMENT
??__EGM_OVERSCAN_V@@YAXXZ PROC				; `dynamic initializer for 'GM_OVERSCAN_V'', COMDAT

; 21   : static const float	GM_OVERSCAN_V		= 1.0f + GM_OVERSCAN + GM_OVERSCAN;

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR _GM_OVERSCAN
	addss	xmm0, DWORD PTR _GM_OVERSCAN
	movss	DWORD PTR _GM_OVERSCAN_V, xmm0
	pop	ebp
	ret	0
??__EGM_OVERSCAN_V@@YAXXZ ENDP				; `dynamic initializer for 'GM_OVERSCAN_V''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??__EGM_OVERSCAN_H@@YAXXZ
text$yc	SEGMENT
??__EGM_OVERSCAN_H@@YAXXZ PROC				; `dynamic initializer for 'GM_OVERSCAN_H'', COMDAT

; 20   : static const float	GM_OVERSCAN_H		= 1.0f + GM_OVERSCAN;

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _GM_OVERSCAN
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _GM_OVERSCAN_H, xmm0
	pop	ebp
	ret	0
??__EGM_OVERSCAN_H@@YAXXZ ENDP				; `dynamic initializer for 'GM_OVERSCAN_H''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmcomposit.h
;	COMDAT ??__EGM_OVERSCAN_RNG@@YAXXZ
text$yc	SEGMENT
??__EGM_OVERSCAN_RNG@@YAXXZ PROC			; `dynamic initializer for 'GM_OVERSCAN_RNG'', COMDAT

; 19   : static const float	GM_OVERSCAN_RNG		= 1.0f + GM_OVERSCAN;

	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _GM_OVERSCAN
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _GM_OVERSCAN_RNG, xmm0
	pop	ebp
	ret	0
??__EGM_OVERSCAN_RNG@@YAXXZ ENDP			; `dynamic initializer for 'GM_OVERSCAN_RNG''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmradar.h
;	COMDAT ?GetGain@RenderGMRadar@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGain@RenderGMRadar@@QAEMXZ PROC			; RenderGMRadar::GetGain, COMDAT
; _this$ = ecx

; 45   : 	float	GetGain( void )				{ return gain; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+263128]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGain@RenderGMRadar@@QAEMXZ ENDP			; RenderGMRadar::GetGain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\gmradar.h
;	COMDAT ?SetGain@RenderGMRadar@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newGain$ = 8						; size = 4
?SetGain@RenderGMRadar@@QAEXM@Z PROC			; RenderGMRadar::SetGain, COMDAT
; _this$ = ecx

; 41   : 	void	SetGain( float newGain )				{ if(newGain <= 1000.0F && newGain >= 0.0F) gain = newGain; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR _newGain$[ebp]
	jb	SHORT $LN1@SetGain
	movss	xmm0, DWORD PTR _newGain$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN1@SetGain
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newGain$[ebp]
	movss	DWORD PTR [eax+263128], xmm0
$LN1@SetGain:
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGain@RenderGMRadar@@QAEXM@Z ENDP			; RenderGMRadar::SetGain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::ZeroRotationAboutOrigin, COMDAT
; _this$ = ecx

; 144  :     void ZeroRotationAboutOrigin( void ) { dmatrix.rotation01 = dmatrix.rotation10 = 0.0f, dmatrix.rotation00 = dmatrix.rotation11 = 1.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+80], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+76], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::ZeroRotationAboutOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampaign@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsCampaign@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsCampaign, COMDAT
; _this$ = ecx

; 101  : 		{return (falconType & FalconCampaignEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 1
	je	SHORT $LN3@IsCampaign
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsCampaign
$LN3@IsCampaign:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsCampaign:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampaign@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsCampaign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?tan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?tan@@YAMM@Z PROC					; tan, COMDAT

; 543  :         {return (tanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_tanf
	add	esp, 4
	pop	ebp
	ret	0
?tan@@YAMM@Z ENDP					; tan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?pow@@YAMMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
?pow@@YAMMM@Z PROC					; pow, COMDAT

; 533  :         {return (powf(_X, _Y)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __Y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_powf
	add	esp, 8
	pop	ebp
	ret	0
?pow@@YAMMM@Z ENDP					; pow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 505  :         {return (atanf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	pop	ebp
	ret	0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 436  :         {return ((float)tan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_tan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _powf
_TEXT	SEGMENT
tv77 = -12						; size = 8
tv79 = -4						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT

; 428  :         {return ((float)pow((double)_X, (double)_Y)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_powf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
