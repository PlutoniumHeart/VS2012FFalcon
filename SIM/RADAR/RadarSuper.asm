; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\RADAR\RadarSuper.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
_BLIP_SIZE DD	03ca3d70ar			; 0.02
_CURSOR_SIZE DD	03cf5c28fr			; 0.03
_TRACK_SIZE DD	03d4ccccdr			; 0.05
_VELOCITY_FLAG_SCALE DD 03883126fr		; 6.25e-005
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_cosf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??8VU_SESSION_ID@@QBEHABV0@@Z			; VU_SESSION_ID::operator==
PUBLIC	??8VU_ID@@QBE_NABV0@@Z				; VU_ID::operator==
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ	; VuEntity::EntityType
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?IsSim@FalconEntity@@QAEHXZ			; FalconEntity::IsSim
PUBLIC	?mlSinCos@@YAXPAUmlTrig@@M@Z			; mlSinCos
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z	; MfdDrawable::Display
PUBLIC	?SetType@SensorClass@@UAEXW4SensorType@1@@Z	; SensorClass::SetType
PUBLIC	?IsOn@SensorClass@@UAEHXZ			; SensorClass::IsOn
PUBLIC	?ExecModes@SensorClass@@UAEXHH@Z		; SensorClass::ExecModes
PUBLIC	?UpdateState@SensorClass@@UAEXHH@Z		; SensorClass::UpdateState
PUBLIC	?SetSeekerPos@SensorClass@@UAEXMM@Z		; SensorClass::SetSeekerPos
PUBLIC	?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ	; SensorClass::TargetUnderCursor
PUBLIC	?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ; SensorClass::GetDisplay
PUBLIC	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ	; SimObjectType::BaseData
PUBLIC	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?TStance@TeamClass@@QAEHE@Z			; TeamClass::TStance
PUBLIC	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ	; VirtualDisplay::CenterOriginInViewport
PUBLIC	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ	; VirtualDisplay::ZeroRotationAboutOrigin
PUBLIC	??1RadarClass@@UAE@XZ				; RadarClass::~RadarClass
PUBLIC	?RangeStep@RadarClass@@UAEXH@Z			; RadarClass::RangeStep
PUBLIC	?NextTarget@RadarClass@@UAEXXZ			; RadarClass::NextTarget
PUBLIC	?PrevTarget@RadarClass@@UAEXXZ			; RadarClass::PrevTarget
PUBLIC	?DefaultAAMode@RadarClass@@UAEXXZ		; RadarClass::DefaultAAMode
PUBLIC	?StepAAmode@RadarClass@@UAEXXZ			; RadarClass::StepAAmode
PUBLIC	?SetSRMOverride@RadarClass@@UAEXXZ		; RadarClass::SetSRMOverride
PUBLIC	?SetMRMOverride@RadarClass@@UAEXXZ		; RadarClass::SetMRMOverride
PUBLIC	?ClearOverride@RadarClass@@UAEXXZ		; RadarClass::ClearOverride
PUBLIC	?SelectACMVertical@RadarClass@@UAEXXZ		; RadarClass::SelectACMVertical
PUBLIC	?SelectACMBore@RadarClass@@UAEXXZ		; RadarClass::SelectACMBore
PUBLIC	?SelectACMSlew@RadarClass@@UAEXXZ		; RadarClass::SelectACMSlew
PUBLIC	?SelectACM30x20@RadarClass@@UAEXXZ		; RadarClass::SelectACM30x20
PUBLIC	?StepAAscanHeight@RadarClass@@UAEXXZ		; RadarClass::StepAAscanHeight
PUBLIC	?StepAAscanWidth@RadarClass@@UAEXXZ		; RadarClass::StepAAscanWidth
PUBLIC	?StepAAelvation@RadarClass@@UAEXH@Z		; RadarClass::StepAAelvation
PUBLIC	?DefaultAGMode@RadarClass@@UAEXXZ		; RadarClass::DefaultAGMode
PUBLIC	?StepAGmode@RadarClass@@UAEXXZ			; RadarClass::StepAGmode
PUBLIC	?StepAGfov@RadarClass@@UAEXXZ			; RadarClass::StepAGfov
PUBLIC	?StepAGgain@RadarClass@@UAEXH@Z			; RadarClass::StepAGgain
PUBLIC	?SetMode@RadarClass@@UAEXW4RadarMode@1@@Z	; RadarClass::SetMode
PUBLIC	?ToggleAGfreeze@RadarClass@@UAEXXZ		; RadarClass::ToggleAGfreeze
PUBLIC	?ToggleAGsnowPlow@RadarClass@@UAEXXZ		; RadarClass::ToggleAGsnowPlow
PUBLIC	?SetAGSnowPlow@RadarClass@@UAEXH@Z		; RadarClass::SetAGSnowPlow
PUBLIC	?ToggleAGcursorZero@RadarClass@@UAEXXZ		; RadarClass::ToggleAGcursorZero
PUBLIC	?SetGroundPoint@RadarClass@@UAEXMMM@Z		; RadarClass::SetGroundPoint
PUBLIC	?IsAG@RadarClass@@UAEHXZ			; RadarClass::IsAG
PUBLIC	?GetAGCenter@RadarClass@@UAEXPAM0@Z		; RadarClass::GetAGCenter
PUBLIC	?GetRange@RadarClass@@UAEMXZ			; RadarClass::GetRange
PUBLIC	?GetVolume@RadarClass@@UAEMXZ			; RadarClass::GetVolume
PUBLIC	?GetCursorPosition@RadarClass@@UAEXPAM0@Z	; RadarClass::GetCursorPosition
PUBLIC	?GetBuggedData@RadarClass@@UAEHPAM000@Z		; RadarClass::GetBuggedData
PUBLIC	?ClearModeDesiredCmd@RadarClass@@UAEXXZ		; RadarClass::ClearModeDesiredCmd
PUBLIC	?GetRadarModeR@RadarClass@@UAE?AW4RadarMode@1@XZ ; RadarClass::GetRadarModeR
PUBLIC	??_GRadarClass@@UAEPAXI@Z			; RadarClass::`scalar deleting destructor'
PUBLIC	??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z	; RadarSuperClass::RadarSuperClass
PUBLIC	??1RadarSuperClass@@UAE@XZ			; RadarSuperClass::~RadarSuperClass
PUBLIC	?ExecModes@RadarSuperClass@@UAEXHH@Z		; RadarSuperClass::ExecModes
PUBLIC	?UpdateState@RadarSuperClass@@UAEXHH@Z		; RadarSuperClass::UpdateState
PUBLIC	?Exec@RadarSuperClass@@UAEPAVSimObjectType@@PAV2@@Z ; RadarSuperClass::Exec
PUBLIC	?Display@RadarSuperClass@@UAEXPAVVirtualDisplay@@@Z ; RadarSuperClass::Display
PUBLIC	?PushButton@RadarSuperClass@@UAEXHH@Z		; RadarSuperClass::PushButton
PUBLIC	?RangeStep@RadarSuperClass@@UAEXH@Z		; RadarSuperClass::RangeStep
PUBLIC	?NextTarget@RadarSuperClass@@UAEXXZ		; RadarSuperClass::NextTarget
PUBLIC	?PrevTarget@RadarSuperClass@@UAEXXZ		; RadarSuperClass::PrevTarget
PUBLIC	?DefaultAAMode@RadarSuperClass@@UAEXXZ		; RadarSuperClass::DefaultAAMode
PUBLIC	?StepAAmode@RadarSuperClass@@UAEXXZ		; RadarSuperClass::StepAAmode
PUBLIC	?SetSRMOverride@RadarSuperClass@@UAEXXZ		; RadarSuperClass::SetSRMOverride
PUBLIC	?SetMRMOverride@RadarSuperClass@@UAEXXZ		; RadarSuperClass::SetMRMOverride
PUBLIC	?ClearOverride@RadarSuperClass@@UAEXXZ		; RadarSuperClass::ClearOverride
PUBLIC	?SelectACMBore@RadarSuperClass@@UAEXXZ		; RadarSuperClass::SelectACMBore
PUBLIC	?SelectACMVertical@RadarSuperClass@@UAEXXZ	; RadarSuperClass::SelectACMVertical
PUBLIC	?SelectACMSlew@RadarSuperClass@@UAEXXZ		; RadarSuperClass::SelectACMSlew
PUBLIC	?SelectACM30x20@RadarSuperClass@@UAEXXZ		; RadarSuperClass::SelectACM30x20
PUBLIC	?DefaultAGMode@RadarSuperClass@@UAEXXZ		; RadarSuperClass::DefaultAGMode
PUBLIC	?StepAGmode@RadarSuperClass@@UAEXXZ		; RadarSuperClass::StepAGmode
PUBLIC	?GetRange@RadarSuperClass@@UAEMXZ		; RadarSuperClass::GetRange
PUBLIC	?GetCursorPosition@RadarSuperClass@@UAEXPAM0@Z	; RadarSuperClass::GetCursorPosition
PUBLIC	?GetAGCenter@RadarSuperClass@@UAEXPAM0@Z	; RadarSuperClass::GetAGCenter
PUBLIC	?IsAG@RadarSuperClass@@UAEHXZ			; RadarSuperClass::IsAG
PUBLIC	?SetMode@RadarSuperClass@@UAEXW4RadarMode@RadarClass@@@Z ; RadarSuperClass::SetMode
PUBLIC	?NewRange@RadarSuperClass@@IAEXM@Z		; RadarSuperClass::NewRange
PUBLIC	?CursorDelta@RadarSuperClass@@IAEMMM@Z		; RadarSuperClass::CursorDelta
PUBLIC	?ExecAG@RadarSuperClass@@IAEXXZ			; RadarSuperClass::ExecAG
PUBLIC	?ExecAA@RadarSuperClass@@IAEXXZ			; RadarSuperClass::ExecAA
PUBLIC	?DrawCursor@RadarSuperClass@@IAEXXZ		; RadarSuperClass::DrawCursor
PUBLIC	?DrawBullseyeData@RadarSuperClass@@IAEXXZ	; RadarSuperClass::DrawBullseyeData
PUBLIC	?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z	; RadarSuperClass::DrawLockedAirInfo
PUBLIC	?DrawLockedGndInfo@RadarSuperClass@@IAEXMM@Z	; RadarSuperClass::DrawLockedGndInfo
PUBLIC	?DrawWaterline@RadarSuperClass@@IAEXXZ		; RadarSuperClass::DrawWaterline
PUBLIC	?DrawButtons@RadarSuperClass@@IAEXXZ		; RadarSuperClass::DrawButtons
PUBLIC	?DisplayAAReturns@RadarSuperClass@@IAEXXZ	; RadarSuperClass::DisplayAAReturns
PUBLIC	?DisplayAGReturns@RadarSuperClass@@IAEXXZ	; RadarSuperClass::DisplayAGReturns
PUBLIC	??_GRadarSuperClass@@UAEPAXI@Z			; RadarSuperClass::`scalar deleting destructor'
PUBLIC	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7RadarClass@@6B@				; RadarClass::`vftable'
PUBLIC	??_7RadarSuperClass@@6B@			; RadarSuperClass::`vftable'
PUBLIC	??_C@_09LGBCLDAA@RADAR?5OFF?$AA@		; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f?$AA@			; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d?$AA@			; `string'
PUBLIC	??_C@_0BB@NCGMHNEM@?$CF03?40f?5?$CF02?40f?5NM?$AA@ ; `string'
PUBLIC	??_C@_08DCHPFLAD@BULLSEYE?$AA@			; `string'
PUBLIC	??_C@_08JJDNADML@?$CF02?40f?$CFc?$AA@		; `string'
PUBLIC	??_C@_06EKMMACPN@?$CF03?40f?$AA@		; `string'
PUBLIC	??_C@_08EAMNCMCD@?$CF03?40fkt?$AA@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_04CIHBIJA@BLDG?$AA@			; `string'
PUBLIC	??_C@_05OPFMIDOD@?$CF0?40f?$AA@			; `string'
PUBLIC	??_C@_03MKBIBNGK@ACM?$AA@			; `string'
PUBLIC	??_C@_02JIIELPFO@AA?$AA@			; `string'
PUBLIC	??_C@_03HOONMGKE@GMT?$AA@			; `string'
PUBLIC	??_C@_02DALMIMOA@GM?$AA@			; `string'
PUBLIC	??_C@_03JKJFCLEN@FCR?$AA@			; `string'
PUBLIC	??_C@_04NLFHDAEB@SWAP?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R0?AVDrawableClass@@@8			; DrawableClass `RTTI Type Descriptor'
PUBLIC	??_R3DrawableClass@@8				; DrawableClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DrawableClass@@8				; DrawableClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DrawableClass@@8			; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMfdDrawable@@@8				; MfdDrawable `RTTI Type Descriptor'
PUBLIC	??_R3MfdDrawable@@8				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MfdDrawable@@8				; MfdDrawable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MfdDrawable@@8			; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RadarClass@@6B@				; RadarClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRadarClass@@@8				; RadarClass `RTTI Type Descriptor'
PUBLIC	??_R3RadarClass@@8				; RadarClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RadarClass@@8				; RadarClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RadarClass@@8			; RadarClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SensorClass@@8			; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSensorClass@@@8				; SensorClass `RTTI Type Descriptor'
PUBLIC	??_R3SensorClass@@8				; SensorClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SensorClass@@8				; SensorClass::`RTTI Base Class Array'
PUBLIC	??_R4RadarSuperClass@@6B@			; RadarSuperClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRadarSuperClass@@@8			; RadarSuperClass `RTTI Type Descriptor'
PUBLIC	??_R3RadarSuperClass@@8				; RadarSuperClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RadarSuperClass@@8				; RadarSuperClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RadarSuperClass@@8		; RadarSuperClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@392c987a
PUBLIC	__real@3a83126f
PUBLIC	__real@3d6147ae
PUBLIC	__real@3d75c28f
PUBLIC	__real@3ec51eb8
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f060a91
PUBLIC	__real@3f17ac60
PUBLIC	__real@3f400000
PUBLIC	__real@3f490fd9
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f533333
PUBLIC	__real@3f600000
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f860a91
PUBLIC	__real@3f860aa6
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc90fd9
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@42200000
PUBLIC	__real@42652ee1
PUBLIC	__real@42c60000
PUBLIC	__real@43b40000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@45bde1b0
PUBLIC	__real@461c4000
PUBLIC	__real@60ad78ec
PUBLIC	__real@8000000000000000
PUBLIC	__real@bd0f5c29
PUBLIC	__real@bd75c28f
PUBLIC	__real@be800000
PUBLIC	__real@bf000000
PUBLIC	__real@bf19999a
PUBLIC	__real@bf266666
PUBLIC	__real@bf400000
PUBLIC	__real@bf490fd9
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf59999a
PUBLIC	__real@bf600000
PUBLIC	__real@bf666666
PUBLIC	__real@bf6b851f
PUBLIC	__real@bf733333
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fd9
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@e0ad78ec
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_sprintf:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z:PROC	; VuListIterator::VuListIterator
EXTRN	??1VuListIterator@@UAE@XZ:PROC			; VuListIterator::~VuListIterator
EXTRN	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetFirst
EXTRN	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ:PROC ; VuListIterator::GetNext
EXTRN	?DisplayExit@DrawableClass@@UAEXXZ:PROC		; DrawableClass::DisplayExit
EXTRN	?LabelButton@DrawableClass@@QAEXHPAD0H@Z:PROC	; DrawableClass::LabelButton
EXTRN	?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z:PROC	; MFDClass::SetNewMode
EXTRN	?PushButton@MfdDrawable@@UAEXHH@Z:PROC		; MfdDrawable::PushButton
EXTRN	?MFDSwapDisplays@@YAXXZ:PROC			; MFDSwapDisplays
EXTRN	??1SensorClass@@UAE@XZ:PROC			; SensorClass::~SensorClass
EXTRN	?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z:PROC ; SensorClass::SetSensorTargetHack
EXTRN	?CheckLockedTarget@SensorClass@@MAEXXZ:PROC	; SensorClass::CheckLockedTarget
EXTRN	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z:PROC ; TargetAz
EXTRN	?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z:PROC ; TargetEl
EXTRN	?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z:PROC ; CalcRelValues
EXTRN	?SetRdrAz@SimBaseClass@@QAEXM@Z:PROC		; SimBaseClass::SetRdrAz
EXTRN	?SetRdrEl@SimBaseClass@@QAEXM@Z:PROC		; SimBaseClass::SetRdrEl
EXTRN	?SetRdrAzCenter@SimBaseClass@@QAEXM@Z:PROC	; SimBaseClass::SetRdrAzCenter
EXTRN	?SetRdrElCenter@SimBaseClass@@QAEXM@Z:PROC	; SimBaseClass::SetRdrElCenter
EXTRN	?SetRdrCycleTime@SimBaseClass@@QAEXM@Z:PROC	; SimBaseClass::SetRdrCycleTime
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z:PROC ; VirtualDisplay::AdjustOriginInViewport
EXTRN	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z:PROC ; VirtualDisplay::AdjustRotationAboutOrigin
EXTRN	?GetBullseyeSimLocation@CampaignClass@@QAEXPAM0@Z:PROC ; CampaignClass::GetBullseyeSimLocation
EXTRN	?SetSensorTarget@RadarClass@@MAEXPAVSimObjectType@@@Z:PROC ; RadarClass::SetSensorTarget
EXTRN	?ReturnStrength@RadarClass@@UAEMPAVSimObjectType@@@Z:PROC ; RadarClass::ReturnStrength
EXTRN	??0RadarClass@@QAE@HPAVSimMoverClass@@@Z:PROC	; RadarClass::RadarClass
EXTRN	?DisplayInit@RadarClass@@UAEXPAVImageBuffer@@@Z:PROC ; RadarClass::DisplayInit
EXTRN	?SendTrackMsg@RadarClass@@UAEXPAVSimObjectType@@II@Z:PROC ; RadarClass::SendTrackMsg
EXTRN	?SetPower@RadarClass@@UAEXH@Z:PROC		; RadarClass::SetPower
EXTRN	?SetEmitting@RadarClass@@UAEXH@Z:PROC		; RadarClass::SetEmitting
EXTRN	?SetDesiredTarget@RadarClass@@UAEXPAVSimObjectType@@@Z:PROC ; RadarClass::SetDesiredTarget
EXTRN	?ClearSensorTarget@RadarClass@@UAEXXZ:PROC	; RadarClass::ClearSensorTarget
EXTRN	??_ERadarClass@@UAEPAXI@Z:PROC			; RadarClass::`vector deleting destructor'
EXTRN	??_ERadarSuperClass@@UAEPAXI@Z:PROC		; RadarSuperClass::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?FalconNullId@@3VVU_ID@@A:QWORD			; FalconNullId
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?MfdDisplay@@3PAPAVMFDClass@@A:BYTE		; MfdDisplay
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	?TheCampaign@@3VCampaignClass@@A:BYTE		; TheCampaign
EXTRN	?CursorRate@RadarClass@@1MB:DWORD		; RadarClass::CursorRate
EXTRN	?TrackUpdateTime@RadarClass@@2KB:DWORD		; RadarClass::TrackUpdateTime
EXTRN	?IO@@3VSIMLIB_IO_CLASS@@A:BYTE			; IO
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?trackTriH@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB
_BSS	SEGMENT
?trackTriH@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB DD 01H DUP (?) ; `RadarSuperClass::DrawLockedAirInfo'::`2'::trackTriH
_BSS	ENDS
;	COMDAT ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
_BSS	SEGMENT
?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA DD 01H DUP (?) ; `RadarSuperClass::DrawLockedAirInfo'::`2'::$S1
_BSS	ENDS
;	COMDAT ?trackTriV@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB
_BSS	SEGMENT
?trackTriV@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB DD 01H DUP (?) ; `RadarSuperClass::DrawLockedAirInfo'::`2'::trackTriV
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@e0ad78ec
CONST	SEGMENT
__real@e0ad78ec DD 0e0ad78ecr			; -1e+020
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bfc90fd9
CONST	SEGMENT
__real@bfc90fd9 DD 0bfc90fd9r			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf733333
CONST	SEGMENT
__real@bf733333 DD 0bf733333r			; -0.95
CONST	ENDS
;	COMDAT __real@bf6b851f
CONST	SEGMENT
__real@bf6b851f DD 0bf6b851fr			; -0.92
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf600000
CONST	SEGMENT
__real@bf600000 DD 0bf600000r			; -0.875
CONST	ENDS
;	COMDAT __real@bf59999a
CONST	SEGMENT
__real@bf59999a DD 0bf59999ar			; -0.85
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@bf490fd9
CONST	SEGMENT
__real@bf490fd9 DD 0bf490fd9r			; -0.785398
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf266666
CONST	SEGMENT
__real@bf266666 DD 0bf266666r			; -0.65
CONST	ENDS
;	COMDAT __real@bf19999a
CONST	SEGMENT
__real@bf19999a DD 0bf19999ar			; -0.6
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@bd75c28f
CONST	SEGMENT
__real@bd75c28f DD 0bd75c28fr			; -0.06
CONST	ENDS
;	COMDAT __real@bd0f5c29
CONST	SEGMENT
__real@bd0f5c29 DD 0bd0f5c29r			; -0.035
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@60ad78ec
CONST	SEGMENT
__real@60ad78ec DD 060ad78ecr			; 1e+020
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@45bde1b0
CONST	SEGMENT
__real@45bde1b0 DD 045bde1b0r			; 6076.21
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@42c60000
CONST	SEGMENT
__real@42c60000 DD 042c60000r			; 99
CONST	ENDS
;	COMDAT __real@42652ee1
CONST	SEGMENT
__real@42652ee1 DD 042652ee1r			; 57.2958
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc90fd9
CONST	SEGMENT
__real@3fc90fd9 DD 03fc90fd9r			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f860aa6
CONST	SEGMENT
__real@3f860aa6 DD 03f860aa6r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f860a91
CONST	SEGMENT
__real@3f860a91 DD 03f860a91r			; 1.0472
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f533333
CONST	SEGMENT
__real@3f533333 DD 03f533333r			; 0.825
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f490fd9
CONST	SEGMENT
__real@3f490fd9 DD 03f490fd9r			; 0.785398
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f17ac60
CONST	SEGMENT
__real@3f17ac60 DD 03f17ac60r			; 0.592474
CONST	ENDS
;	COMDAT __real@3f060a91
CONST	SEGMENT
__real@3f060a91 DD 03f060a91r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec51eb8
CONST	SEGMENT
__real@3ec51eb8 DD 03ec51eb8r			; 0.385
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d6147ae
CONST	SEGMENT
__real@3d6147ae DD 03d6147aer			; 0.055
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@392c987a
CONST	SEGMENT
__real@392c987a DD 0392c987ar			; 0.0001646
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@RadarSuperClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RadarSuperClass@@8 DD FLAT:??_R0?AVRadarSuperClass@@@8 ; RadarSuperClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RadarSuperClass@@8
rdata$r	ENDS
;	COMDAT ??_R2RadarSuperClass@@8
rdata$r	SEGMENT
??_R2RadarSuperClass@@8 DD FLAT:??_R1A@?0A@EA@RadarSuperClass@@8 ; RadarSuperClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RadarClass@@8
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RadarSuperClass@@8
rdata$r	SEGMENT
??_R3RadarSuperClass@@8 DD 00H				; RadarSuperClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2RadarSuperClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRadarSuperClass@@@8
_DATA	SEGMENT
??_R0?AVRadarSuperClass@@@8 DD FLAT:??_7type_info@@6B@	; RadarSuperClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRadarSuperClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RadarSuperClass@@6B@
rdata$r	SEGMENT
??_R4RadarSuperClass@@6B@ DD 00H			; RadarSuperClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRadarSuperClass@@@8
	DD	FLAT:??_R3RadarSuperClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SensorClass@@8
rdata$r	SEGMENT
??_R2SensorClass@@8 DD FLAT:??_R1A@?0A@EA@SensorClass@@8 ; SensorClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3SensorClass@@8
rdata$r	SEGMENT
??_R3SensorClass@@8 DD 00H				; SensorClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSensorClass@@@8
_DATA	SEGMENT
??_R0?AVSensorClass@@@8 DD FLAT:??_7type_info@@6B@	; SensorClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSensorClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SensorClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SensorClass@@8 DD FLAT:??_R0?AVSensorClass@@@8 ; SensorClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SensorClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RadarClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RadarClass@@8 DD FLAT:??_R0?AVRadarClass@@@8 ; RadarClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RadarClass@@8
rdata$r	ENDS
;	COMDAT ??_R2RadarClass@@8
rdata$r	SEGMENT
??_R2RadarClass@@8 DD FLAT:??_R1A@?0A@EA@RadarClass@@8	; RadarClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SensorClass@@8
	DD	FLAT:??_R1A@?0A@EA@MfdDrawable@@8
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3RadarClass@@8
rdata$r	SEGMENT
??_R3RadarClass@@8 DD 00H				; RadarClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2RadarClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRadarClass@@@8
_DATA	SEGMENT
??_R0?AVRadarClass@@@8 DD FLAT:??_7type_info@@6B@	; RadarClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRadarClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4RadarClass@@6B@
rdata$r	SEGMENT
??_R4RadarClass@@6B@ DD 00H				; RadarClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRadarClass@@@8
	DD	FLAT:??_R3RadarClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MfdDrawable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MfdDrawable@@8 DD FLAT:??_R0?AVMfdDrawable@@@8 ; MfdDrawable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R2MfdDrawable@@8
rdata$r	SEGMENT
??_R2MfdDrawable@@8 DD FLAT:??_R1A@?0A@EA@MfdDrawable@@8 ; MfdDrawable::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R3MfdDrawable@@8
rdata$r	SEGMENT
??_R3MfdDrawable@@8 DD 00H				; MfdDrawable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MfdDrawable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMfdDrawable@@@8
_DATA	SEGMENT
??_R0?AVMfdDrawable@@@8 DD FLAT:??_7type_info@@6B@	; MfdDrawable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMfdDrawable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@DrawableClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DrawableClass@@8 DD FLAT:??_R0?AVDrawableClass@@@8 ; DrawableClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R2DrawableClass@@8
rdata$r	SEGMENT
??_R2DrawableClass@@8 DD FLAT:??_R1A@?0A@EA@DrawableClass@@8 ; DrawableClass::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3DrawableClass@@8
rdata$r	SEGMENT
??_R3DrawableClass@@8 DD 00H				; DrawableClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2DrawableClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDrawableClass@@@8
_DATA	SEGMENT
??_R0?AVDrawableClass@@@8 DD FLAT:??_7type_info@@6B@	; DrawableClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDrawableClass@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLFHDAEB@SWAP?$AA@
CONST	SEGMENT
??_C@_04NLFHDAEB@SWAP?$AA@ DB 'SWAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKJFCLEN@FCR?$AA@
CONST	SEGMENT
??_C@_03JKJFCLEN@FCR?$AA@ DB 'FCR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DALMIMOA@GM?$AA@
CONST	SEGMENT
??_C@_02DALMIMOA@GM?$AA@ DB 'GM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HOONMGKE@GMT?$AA@
CONST	SEGMENT
??_C@_03HOONMGKE@GMT?$AA@ DB 'GMT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JIIELPFO@AA?$AA@
CONST	SEGMENT
??_C@_02JIIELPFO@AA?$AA@ DB 'AA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MKBIBNGK@ACM?$AA@
CONST	SEGMENT
??_C@_03MKBIBNGK@ACM?$AA@ DB 'ACM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OPFMIDOD@?$CF0?40f?$AA@
CONST	SEGMENT
??_C@_05OPFMIDOD@?$CF0?40f?$AA@ DB '%0.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
CONST	SEGMENT
?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB DD 03d315b57r ; 0.0433 ; `RadarSuperClass::DrawButtons'::`2'::arrowW
CONST	ENDS
;	COMDAT ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
CONST	SEGMENT
?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB DD 03d19999ar ; 0.0375 ; `RadarSuperClass::DrawButtons'::`2'::arrowH
CONST	ENDS
;	COMDAT ?Height@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
CONST	SEGMENT
?Height@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB DD 03d23d70ar ; 0.04 ; `RadarSuperClass::DrawWaterline'::`2'::Height
CONST	ENDS
;	COMDAT ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
CONST	SEGMENT
?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB DD 03ecccccdr ; 0.4 ; `RadarSuperClass::DrawWaterline'::`2'::OutsideEdge
CONST	ENDS
;	COMDAT ?InsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
CONST	SEGMENT
?InsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB DD 03da3d70ar ; 0.08 ; `RadarSuperClass::DrawWaterline'::`2'::InsideEdge
CONST	ENDS
;	COMDAT ??_C@_04CIHBIJA@BLDG?$AA@
CONST	SEGMENT
??_C@_04CIHBIJA@BLDG?$AA@ DB 'BLDG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAMNCMCD@?$CF03?40fkt?$AA@
CONST	SEGMENT
??_C@_08EAMNCMCD@?$CF03?40fkt?$AA@ DB '%03.0fkt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKMMACPN@?$CF03?40f?$AA@
CONST	SEGMENT
??_C@_06EKMMACPN@?$CF03?40f?$AA@ DB '%03.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJDNADML@?$CF02?40f?$CFc?$AA@
CONST	SEGMENT
??_C@_08JJDNADML@?$CF02?40f?$CFc?$AA@ DB '%02.0f%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHPFLAD@BULLSEYE?$AA@
CONST	SEGMENT
??_C@_08DCHPFLAD@BULLSEYE?$AA@ DB 'BULLSEYE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NCGMHNEM@?$CF03?40f?5?$CF02?40f?5NM?$AA@
CONST	SEGMENT
??_C@_0BB@NCGMHNEM@?$CF03?40f?5?$CF02?40f?5NM?$AA@ DB '%03.0f %02.0f NM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d?$AA@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d?$AA@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f?$AA@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f?$AA@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGBCLDAA@RADAR?5OFF?$AA@
CONST	SEGMENT
??_C@_09LGBCLDAA@RADAR?5OFF?$AA@ DB 'RADAR OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7RadarSuperClass@@6B@
CONST	SEGMENT
??_7RadarSuperClass@@6B@ DD FLAT:??_R4RadarSuperClass@@6B@ ; RadarSuperClass::`vftable'
	DD	FLAT:??_ERadarSuperClass@@UAEPAXI@Z
	DD	FLAT:?Display@RadarSuperClass@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@RadarClass@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@RadarSuperClass@@UAEXHH@Z
	DD	FLAT:?SetType@SensorClass@@UAEXW4SensorType@1@@Z
	DD	FLAT:?SetPower@RadarClass@@UAEXH@Z
	DD	FLAT:?IsOn@SensorClass@@UAEHXZ
	DD	FLAT:?SetDesiredTarget@RadarClass@@UAEXPAVSimObjectType@@@Z
	DD	FLAT:?ClearSensorTarget@RadarClass@@UAEXXZ
	DD	FLAT:?Exec@RadarSuperClass@@UAEPAVSimObjectType@@PAV2@@Z
	DD	FLAT:?ExecModes@RadarSuperClass@@UAEXHH@Z
	DD	FLAT:?UpdateState@RadarSuperClass@@UAEXHH@Z
	DD	FLAT:?SetSeekerPos@SensorClass@@UAEXMM@Z
	DD	FLAT:?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetSensorTarget@RadarClass@@MAEXPAVSimObjectType@@@Z
	DD	FLAT:?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z
	DD	FLAT:?CheckLockedTarget@SensorClass@@MAEXXZ
	DD	FLAT:?ReturnStrength@RadarClass@@UAEMPAVSimObjectType@@@Z
	DD	FLAT:?SendTrackMsg@RadarClass@@UAEXPAVSimObjectType@@II@Z
	DD	FLAT:?SetEmitting@RadarClass@@UAEXH@Z
	DD	FLAT:?RangeStep@RadarSuperClass@@UAEXH@Z
	DD	FLAT:?NextTarget@RadarSuperClass@@UAEXXZ
	DD	FLAT:?PrevTarget@RadarSuperClass@@UAEXXZ
	DD	FLAT:?DefaultAAMode@RadarSuperClass@@UAEXXZ
	DD	FLAT:?StepAAmode@RadarSuperClass@@UAEXXZ
	DD	FLAT:?SetSRMOverride@RadarSuperClass@@UAEXXZ
	DD	FLAT:?SetMRMOverride@RadarSuperClass@@UAEXXZ
	DD	FLAT:?ClearOverride@RadarSuperClass@@UAEXXZ
	DD	FLAT:?SelectACMVertical@RadarSuperClass@@UAEXXZ
	DD	FLAT:?SelectACMBore@RadarSuperClass@@UAEXXZ
	DD	FLAT:?SelectACMSlew@RadarSuperClass@@UAEXXZ
	DD	FLAT:?SelectACM30x20@RadarSuperClass@@UAEXXZ
	DD	FLAT:?StepAAscanHeight@RadarClass@@UAEXXZ
	DD	FLAT:?StepAAscanWidth@RadarClass@@UAEXXZ
	DD	FLAT:?StepAAelvation@RadarClass@@UAEXH@Z
	DD	FLAT:?DefaultAGMode@RadarSuperClass@@UAEXXZ
	DD	FLAT:?StepAGmode@RadarSuperClass@@UAEXXZ
	DD	FLAT:?StepAGfov@RadarClass@@UAEXXZ
	DD	FLAT:?StepAGgain@RadarClass@@UAEXH@Z
	DD	FLAT:?SetMode@RadarSuperClass@@UAEXW4RadarMode@RadarClass@@@Z
	DD	FLAT:?ToggleAGfreeze@RadarClass@@UAEXXZ
	DD	FLAT:?ToggleAGsnowPlow@RadarClass@@UAEXXZ
	DD	FLAT:?SetAGSnowPlow@RadarClass@@UAEXH@Z
	DD	FLAT:?ToggleAGcursorZero@RadarClass@@UAEXXZ
	DD	FLAT:?SetGroundPoint@RadarClass@@UAEXMMM@Z
	DD	FLAT:?IsAG@RadarSuperClass@@UAEHXZ
	DD	FLAT:?GetAGCenter@RadarSuperClass@@UAEXPAM0@Z
	DD	FLAT:?GetRange@RadarSuperClass@@UAEMXZ
	DD	FLAT:?GetVolume@RadarClass@@UAEMXZ
	DD	FLAT:?GetCursorPosition@RadarSuperClass@@UAEXPAM0@Z
	DD	FLAT:?GetBuggedData@RadarClass@@UAEHPAM000@Z
	DD	FLAT:?ClearModeDesiredCmd@RadarClass@@UAEXXZ
	DD	FLAT:?GetRadarModeR@RadarClass@@UAE?AW4RadarMode@1@XZ
CONST	ENDS
;	COMDAT ??_7RadarClass@@6B@
CONST	SEGMENT
??_7RadarClass@@6B@ DD FLAT:??_R4RadarClass@@6B@	; RadarClass::`vftable'
	DD	FLAT:??_ERadarClass@@UAEPAXI@Z
	DD	FLAT:?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z
	DD	FLAT:?DisplayInit@RadarClass@@UAEXPAVImageBuffer@@@Z
	DD	FLAT:?DisplayExit@DrawableClass@@UAEXXZ
	DD	FLAT:?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
	DD	FLAT:?PushButton@MfdDrawable@@UAEXHH@Z
	DD	FLAT:?SetType@SensorClass@@UAEXW4SensorType@1@@Z
	DD	FLAT:?SetPower@RadarClass@@UAEXH@Z
	DD	FLAT:?IsOn@SensorClass@@UAEHXZ
	DD	FLAT:?SetDesiredTarget@RadarClass@@UAEXPAVSimObjectType@@@Z
	DD	FLAT:?ClearSensorTarget@RadarClass@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:?ExecModes@SensorClass@@UAEXHH@Z
	DD	FLAT:?UpdateState@SensorClass@@UAEXHH@Z
	DD	FLAT:?SetSeekerPos@SensorClass@@UAEXMM@Z
	DD	FLAT:?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
	DD	FLAT:?SetSensorTarget@RadarClass@@MAEXPAVSimObjectType@@@Z
	DD	FLAT:?SetSensorTargetHack@SensorClass@@MAEXPAVFalconEntity@@@Z
	DD	FLAT:?CheckLockedTarget@SensorClass@@MAEXXZ
	DD	FLAT:?ReturnStrength@RadarClass@@UAEMPAVSimObjectType@@@Z
	DD	FLAT:?SendTrackMsg@RadarClass@@UAEXPAVSimObjectType@@II@Z
	DD	FLAT:?SetEmitting@RadarClass@@UAEXH@Z
	DD	FLAT:?RangeStep@RadarClass@@UAEXH@Z
	DD	FLAT:?NextTarget@RadarClass@@UAEXXZ
	DD	FLAT:?PrevTarget@RadarClass@@UAEXXZ
	DD	FLAT:?DefaultAAMode@RadarClass@@UAEXXZ
	DD	FLAT:?StepAAmode@RadarClass@@UAEXXZ
	DD	FLAT:?SetSRMOverride@RadarClass@@UAEXXZ
	DD	FLAT:?SetMRMOverride@RadarClass@@UAEXXZ
	DD	FLAT:?ClearOverride@RadarClass@@UAEXXZ
	DD	FLAT:?SelectACMVertical@RadarClass@@UAEXXZ
	DD	FLAT:?SelectACMBore@RadarClass@@UAEXXZ
	DD	FLAT:?SelectACMSlew@RadarClass@@UAEXXZ
	DD	FLAT:?SelectACM30x20@RadarClass@@UAEXXZ
	DD	FLAT:?StepAAscanHeight@RadarClass@@UAEXXZ
	DD	FLAT:?StepAAscanWidth@RadarClass@@UAEXXZ
	DD	FLAT:?StepAAelvation@RadarClass@@UAEXH@Z
	DD	FLAT:?DefaultAGMode@RadarClass@@UAEXXZ
	DD	FLAT:?StepAGmode@RadarClass@@UAEXXZ
	DD	FLAT:?StepAGfov@RadarClass@@UAEXXZ
	DD	FLAT:?StepAGgain@RadarClass@@UAEXH@Z
	DD	FLAT:?SetMode@RadarClass@@UAEXW4RadarMode@1@@Z
	DD	FLAT:?ToggleAGfreeze@RadarClass@@UAEXXZ
	DD	FLAT:?ToggleAGsnowPlow@RadarClass@@UAEXXZ
	DD	FLAT:?SetAGSnowPlow@RadarClass@@UAEXH@Z
	DD	FLAT:?ToggleAGcursorZero@RadarClass@@UAEXXZ
	DD	FLAT:?SetGroundPoint@RadarClass@@UAEXMMM@Z
	DD	FLAT:?IsAG@RadarClass@@UAEHXZ
	DD	FLAT:?GetAGCenter@RadarClass@@UAEXPAM0@Z
	DD	FLAT:?GetRange@RadarClass@@UAEMXZ
	DD	FLAT:?GetVolume@RadarClass@@UAEMXZ
	DD	FLAT:?GetCursorPosition@RadarClass@@UAEXPAM0@Z
	DD	FLAT:?GetBuggedData@RadarClass@@UAEHPAM000@Z
	DD	FLAT:?ClearModeDesiredCmd@RadarClass@@UAEXXZ
	DD	FLAT:?GetRadarModeR@RadarClass@@UAE?AW4RadarMode@1@XZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?DisplayAGReturns@RadarSuperClass@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DisplayAGReturns@RadarSuperClass@@IAEXXZ$0
__unwindtable$?ExecAG@RadarSuperClass@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExecAG@RadarSuperClass@@IAEXXZ$0
__unwindtable$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z$0
__unwindtable$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z$1
__ehfuncinfo$?DisplayAGReturns@RadarSuperClass@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DisplayAGReturns@RadarSuperClass@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ExecAG@RadarSuperClass@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ExecAG@RadarSuperClass@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simio.h
;	COMDAT ?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z PROC ; SIMLIB_IO_CLASS::AnalogIsUsed, COMDAT
; _this$ = ecx

; 237  : 	bool	AnalogIsUsed(GameAxis_t id) { return ( analog[id].isUsed); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _id$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+12]
	mov	esp, ebp
	pop	ebp
	ret	4
?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ENDP ; SIMLIB_IO_CLASS::AnalogIsUsed
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRadarSuperClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRadarSuperClass@@UAEPAXI@Z PROC			; RadarSuperClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RadarSuperClass@@UAE@XZ		; RadarSuperClass::~RadarSuperClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRadarSuperClass@@UAEPAXI@Z ENDP			; RadarSuperClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_objectWalker$ = -112					; size = 12
_trig$ = -100						; size = 8
tv358 = -92						; size = 4
tv417 = -88						; size = 4
tv353 = -84						; size = 4
tv349 = -80						; size = 4
tv415 = -76						; size = 4
tv344 = -72						; size = 4
tv340 = -68						; size = 4
tv413 = -64						; size = 4
tv335 = -60						; size = 4
_range$ = -56						; size = 4
_scaledCosYaw$ = -52					; size = 4
_scaledSinYaw$ = -48					; size = 4
_dz$ = -44						; size = 4
_list$ = -40						; size = 4
_dx$ = -36						; size = 4
_dy$ = -32						; size = 4
_x$ = -28						; size = 4
_y$ = -24						; size = 4
_object$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DisplayAGReturns@RadarSuperClass@@IAEXXZ PROC		; RadarSuperClass::DisplayAGReturns
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DisplayAGReturns@RadarSuperClass@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 609  : 	FalconPrivateOrderedList	*list;	
; 610  : 	FalconEntity				*object;
; 611  : 	float						scaledCosYaw, scaledSinYaw;
; 612  : 	float						x, y;			// Screen space coordinates (x left/right)
; 613  : 	float						dx, dy, dz;
; 614  : 	float						range;
; 615  : 	mlTrig trig;
; 616  : 
; 617  : 
; 618  : 	// Choose the appropriate sim list based on the radar mode
; 619  : 	if (mode == GM) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 14			; 0000000eH
	jne	SHORT $LN10@DisplayAGR

; 620  : 		list = SimDriver.combinedFeatureList;	// Buildings

	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+20
	mov	DWORD PTR _list$[ebp], ecx

; 621  : 	} else {

	jmp	SHORT $LN9@DisplayAGR
$LN10@DisplayAGR:

; 622  : 		list = SimDriver.combinedList;			// Vehicles

	mov	edx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+16
	mov	DWORD PTR _list$[ebp], edx
$LN9@DisplayAGR:

; 623  : 	}
; 624  : 	VuListIterator	objectWalker( list );

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 625  : 
; 626  : 
; 627  : 	// Prepare our rotation from world space into heading north space including feet->screen scaleing
; 628  : 	mlSinCos (&trig, platform->Yaw());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 629  : 	scaledCosYaw = trig.cos * 2.0f * invRangeFT;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+140]
	movss	DWORD PTR _scaledCosYaw$[ebp], xmm0

; 630  : 	scaledSinYaw = trig.sin * 2.0f * invRangeFT;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+140]
	movss	DWORD PTR _scaledSinYaw$[ebp], xmm0

; 631  : 
; 632  : 	// Adjust screen space to make display easier
; 633  : 	display->AdjustOriginInViewport( 0.0f, -1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 634  : 
; 635  : 	// Consider each potential target for display
; 636  : 	for (object = (FalconEntity*)objectWalker.GetFirst(); 

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _object$[ebp], eax

; 637  : 		 object; 

	jmp	SHORT $LN8@DisplayAGR
$LN7@DisplayAGR:

; 638  : 		 object = (FalconEntity*)objectWalker.GetNext()) {

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _object$[ebp], eax
$LN8@DisplayAGR:
	cmp	DWORD PTR _object$[ebp], 0
	je	$LN6@DisplayAGR

; 639  : 
; 640  : 		// Skip things not on the ground
; 641  : 		if (!object->OnGround()) {

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN5@DisplayAGR

; 642  : 			continue;

	jmp	SHORT $LN7@DisplayAGR
$LN5@DisplayAGR:

; 643  : 		}
; 644  : 
; 645  : 		// Figure out the little bit of relative geometry we need
; 646  : 		dx = object->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv335[ebp]
	movss	xmm0, DWORD PTR tv335[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv413[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv340[ebp]
	movss	xmm0, DWORD PTR tv413[ebp]
	subss	xmm0, DWORD PTR tv340[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 647  : 		dy = object->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv344[ebp]
	movss	xmm0, DWORD PTR tv344[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv415[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv349[ebp]
	movss	xmm0, DWORD PTR tv415[ebp]
	subss	xmm0, DWORD PTR tv349[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 648  : 		dz = object->ZPos() - platform->ZPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv353[ebp]
	movss	xmm0, DWORD PTR tv353[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv417[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv358[ebp]
	movss	xmm0, DWORD PTR tv417[ebp]
	subss	xmm0, DWORD PTR tv358[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 649  : 		range = (float)sqrt( dx*dx + dy*dy + dz*dz );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _dz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 650  : 		x = dy*scaledCosYaw - dx*scaledSinYaw;	// Rotate into heading up plan view space

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _scaledCosYaw$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _scaledSinYaw$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 651  : 		y = dy*scaledSinYaw + dx*scaledCosYaw;	// and scale from feet into viewport space

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _scaledSinYaw$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _scaledCosYaw$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _y$[ebp], xmm0

; 652  : 
; 653  : 
; 654  : 		// Skip the object if it is out of range or _really_ close
; 655  : 		if ((range > rangeFT) || (range < 1000.0f)) {

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR [ecx+136]
	ja	SHORT $LN3@DisplayAGR
	movss	xmm0, DWORD PTR __real@447a0000
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN4@DisplayAGR
$LN3@DisplayAGR:

; 656  : 			continue;

	jmp	$LN7@DisplayAGR
$LN4@DisplayAGR:

; 657  : 		}
; 658  : 
; 659  : 		// Draw the appropriate target symbol
; 660  : 		if (lockedTarget && object == lockedTarget->BaseData()) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN2@DisplayAGR
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	cmp	DWORD PTR _object$[ebp], eax
	jne	SHORT $LN2@DisplayAGR

; 661  : 
; 662  : 			DrawLockedGndInfo( x, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawLockedGndInfo@RadarSuperClass@@IAEXMM@Z ; RadarSuperClass::DrawLockedGndInfo

; 663  : 
; 664  : 		} else {

	jmp	$LN1@DisplayAGR
$LN2@DisplayAGR:

; 665  : 
; 666  : 			display->Tri( x-BLIP_SIZE, y-BLIP_SIZE, x-BLIP_SIZE, y+BLIP_SIZE, x+BLIP_SIZE, y+BLIP_SIZE );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 667  : 			display->Tri( x-BLIP_SIZE, y-BLIP_SIZE, x+BLIP_SIZE, y-BLIP_SIZE, x+BLIP_SIZE, y+BLIP_SIZE );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax
$LN1@DisplayAGR:

; 668  : 
; 669  : 		}
; 670  : 	}

	jmp	$LN7@DisplayAGR
$LN6@DisplayAGR:

; 671  : 
; 672  : 	// Clear the viewport shift and spin
; 673  : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 674  : 	display->ZeroRotationAboutOrigin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 675  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DisplayAGReturns@RadarSuperClass@@IAEXXZ$0:
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?DisplayAGReturns@RadarSuperClass@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DisplayAGReturns@RadarSuperClass@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DisplayAGReturns@RadarSuperClass@@IAEXXZ ENDP		; RadarSuperClass::DisplayAGReturns
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
$T1 = -80						; size = 8
_tmpStr$ = -72						; size = 4
tv515 = -68						; size = 4
tv466 = -64						; size = 4
tv449 = -60						; size = 4
tv428 = -56						; size = 4
tv533 = -52						; size = 4
tv420 = -48						; size = 4
tv250 = -44						; size = 4
tv173 = -40						; size = 4
tv147 = -36						; size = 4
tv139 = -32						; size = 4
tv131 = -28						; size = 4
tv87 = -24						; size = 4
_tmpColor$ = -20					; size = 4
_x$ = -16						; size = 4
_y$ = -12						; size = 4
_object$ = -8						; size = 4
_this$ = -4						; size = 4
?DisplayAAReturns@RadarSuperClass@@IAEXXZ PROC		; RadarSuperClass::DisplayAAReturns
; _this$ = ecx

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 680  : 	SimObjectType*		object;
; 681  : 	float				x, y;			// Screen space coordinates (x left/right)
; 682  : 	char				tmpStr[4];
; 683  : 	int tmpColor = display->Color();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+108]
	call	edx
	mov	DWORD PTR _tmpColor$[ebp], eax

; 684  : 
; 685  : 
; 686  : 	// Consider each potential target for display
; 687  : 	for (object = platform->targetList; object; object = object->next) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+660]
	mov	DWORD PTR _object$[ebp], edx
	jmp	SHORT $LN14@DisplayAAR
$LN13@DisplayAAR:
	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _object$[ebp], ecx
$LN14@DisplayAAR:
	cmp	DWORD PTR _object$[ebp], 0
	je	$LN12@DisplayAAR

; 688  : 
; 689  : 		// Only consider objects in the appropriate domain (air/land)
; 690  : 		if (object->BaseData()->OnGround()) {

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv87[ebp], eax
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN11@DisplayAAR

; 691  : 			continue;

	jmp	SHORT $LN13@DisplayAAR
$LN11@DisplayAAR:

; 692  : 		}
; 693  : 
; 694  : 		// Skip the object if it is out of range
; 695  : 		if (object->localData->range > rangeFT) {

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [edx+136]
	jbe	SHORT $LN10@DisplayAAR

; 696  : 			continue;

	jmp	SHORT $LN13@DisplayAAR
$LN10@DisplayAAR:

; 697  : 		}
; 698  : 
; 699  : 		// Skip weapons
; 700  : 		if (object->BaseData()->IsMissile() || object->BaseData()->IsBomb()) {

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv131[ebp], eax
	mov	eax, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	jne	SHORT $LN8@DisplayAAR
	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR tv139[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv139[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	SHORT $LN9@DisplayAAR
$LN8@DisplayAAR:

; 701  : 			continue;

	jmp	$LN13@DisplayAAR
$LN9@DisplayAAR:

; 702  : 		}
; 703  : 
; 704  : 		// Skip ejected pilots
; 705  : 		if ( object->BaseData()->IsEject() )

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR tv147[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv147[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	SHORT $LN7@DisplayAAR

; 706  : 		{
; 707  : 			continue;

	jmp	$LN13@DisplayAAR
$LN7@DisplayAAR:

; 708  : 		}
; 709  : 
; 710  : 		// Skip anything not in our radar pyramid
; 711  : 		if (max(fabs(object->localData->az), fabs(object->localData->el)) > radarData->ScanHalfAngle) {

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv420[ebp]
	movss	xmm0, DWORD PTR tv420[ebp]
	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv533[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv428[ebp]
	movss	xmm0, DWORD PTR tv533[ebp]
	comiss	xmm0, DWORD PTR tv428[ebp]
	jbe	SHORT $LN17@DisplayAAR
	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv173[ebp]
	jmp	SHORT $LN18@DisplayAAR
$LN17@DisplayAAR:
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv173[ebp]
$LN18@DisplayAAR:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	movss	xmm0, DWORD PTR tv173[ebp]
	comiss	xmm0, DWORD PTR [ecx+24]
	jbe	SHORT $LN6@DisplayAAR

; 712  : 			continue;

	jmp	$LN13@DisplayAAR
$LN6@DisplayAAR:

; 713  : 		}
; 714  : 
; 715  : 		// Okay, it qualifies, so draw the appropriate target symbol
; 716  : 		x = TargetAz( platform, object ) / radarData->ScanHalfAngle;

	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv449[ebp]
	movss	xmm0, DWORD PTR tv449[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	divss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _x$[ebp], xmm0

; 717  : 		y = object->localData->range * 2.0f * invRangeFT - 1.0f;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx+44]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+140]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _y$[ebp], xmm0

; 718  : 
; 719  : 		if (object == lockedTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _object$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jne	SHORT $LN5@DisplayAAR

; 720  : 
; 721  : 			DrawLockedAirInfo( x, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z ; RadarSuperClass::DrawLockedAirInfo

; 722  : 
; 723  : 		} else {

	jmp	$LN1@DisplayAAR
$LN5@DisplayAAR:

; 724  : 
; 725  : 			// Dim the target mark if it is below the signal strength threshhold
; 726  : 			if (ReturnStrength(object) >= 1.0f)

	mov	eax, DWORD PTR _object$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	fstp	DWORD PTR tv466[ebp]
	movss	xmm0, DWORD PTR tv466[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@DisplayAAR

; 727  : 			{
; 728  : 				// Full intensity
; 729  : 				display->SetColor( tmpColor );

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 730  : 			} else {

	jmp	SHORT $LN2@DisplayAAR
$LN3@DisplayAAR:

; 731  : 				// Dimmed
; 732  : 				display->SetColor( (tmpColor > 4 ) && 0xFF00 );

	cmp	DWORD PTR _tmpColor$[ebp], 4
	jle	SHORT $LN19@DisplayAAR
	mov	ecx, 65280				; 0000ff00H
	test	ecx, ecx
	je	SHORT $LN19@DisplayAAR
	mov	DWORD PTR tv250[ebp], 1
	jmp	SHORT $LN20@DisplayAAR
$LN19@DisplayAAR:
	mov	DWORD PTR tv250[ebp], 0
$LN20@DisplayAAR:
	mov	edx, DWORD PTR tv250[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx
$LN2@DisplayAAR:

; 733  : 			}
; 734  : 
; 735  : 			display->Tri( x-BLIP_SIZE, y-BLIP_SIZE, x-BLIP_SIZE, y+BLIP_SIZE, x+BLIP_SIZE, y+BLIP_SIZE );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+36]
	call	edx

; 736  : 			display->Tri( x-BLIP_SIZE, y-BLIP_SIZE, x+BLIP_SIZE, y-BLIP_SIZE, x+BLIP_SIZE, y+BLIP_SIZE );

	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+36]
	call	edx

; 737  : 
; 738  : 			if (object->BaseData()->Id() == targetUnderCursor)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN1@DisplayAAR

; 739  : 			{
; 740  : 				sprintf (tmpStr, "%.0f", -object->BaseData()->ZPos() * 0.001F);

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv515[ebp]
	movss	xmm0, DWORD PTR tv515[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3a83126f
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04GHNNFJCK@?$CF?40f?$AA@
	lea	eax, DWORD PTR _tmpStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 741  : 				ShiAssert( strlen(tmpStr) < sizeof(tmpStr) );
; 742  : 				display->TextCenter (x, y - 1.5F * BLIP_SIZE, tmpStr);

	push	0
	lea	ecx, DWORD PTR _tmpStr$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR __real@3fc00000
	mulss	xmm0, DWORD PTR _BLIP_SIZE
	movss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN1@DisplayAAR:

; 743  : 			}
; 744  : 		}
; 745  : 	}

	jmp	$LN13@DisplayAAR
$LN12@DisplayAAR:

; 746  : 
; 747  : 	// Put the display color back the way we got it
; 748  : 	display->SetColor( tmpColor );

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 749  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DisplayAAReturns@RadarSuperClass@@IAEXXZ ENDP		; RadarSuperClass::DisplayAAReturns
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_string$ = -20						; size = 4
tv245 = -16						; size = 4
tv214 = -12						; size = 4
tv198 = -8						; size = 4
_this$ = -4						; size = 4
?DrawButtons@RadarSuperClass@@IAEXXZ PROC		; RadarSuperClass::DrawButtons
; _this$ = ecx

; 1033 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1034 : 	static const float arrowH = 0.0375f;
; 1035 : 	static const float arrowW = 0.0433f;
; 1036 : 	char string[4];
; 1037 : 
; 1038 : 	// Draw the range label and change arrows
; 1039 : 	sprintf( string, "%0.0f", rangeNM );

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+132]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05OPFMIDOD@?$CF0?40f?$AA@
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	call	_sprintf

; 1040 : 	ShiAssert( strlen(string) < sizeof(string) );
; 1041 : 	display->AdjustOriginInViewport( -0.92f, 0.0f );

	add	esp, 12					; 0000000cH
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf6b851f
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1042 : 	display->TextCenter( arrowW, 0.385f, string );

	push	0
	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3ec51eb8
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 1043 : 	display->AdjustOriginInViewport( 0.0f, 0.50F );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1044 : 	display->Tri( 0.0f, arrowH, arrowW, -arrowH, -arrowW, -arrowH );

	movss	xmm0, DWORD PTR ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1045 : 	display->AdjustOriginInViewport( 0.0f, -0.25F );

	push	ecx
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1046 : 	display->Tri( 0.0f, -arrowH, arrowW, arrowH, -arrowW, arrowH );

	push	ecx
	movss	xmm0, DWORD PTR ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?arrowW@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?arrowH@?1??DrawButtons@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 1047 : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 1048 : 
; 1049 : 	// Draw the mode change button and indicate current mode
; 1050 : 	if (mode == AA) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 18			; 00000012H
	jne	SHORT $LN3@DrawButton

; 1051 : 		LabelButton (1, "ACM", "", lockCmd == AUTO);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 1
	jne	SHORT $LN6@DrawButton
	mov	DWORD PTR tv198[ebp], 1
	jmp	SHORT $LN7@DrawButton
$LN6@DrawButton:
	mov	DWORD PTR tv198[ebp], 0
$LN7@DrawButton:
	mov	ecx, DWORD PTR tv198[ebp]
	push	ecx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_03MKBIBNGK@ACM?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN3@DrawButton:

; 1052 : 	}
; 1053 : 	LabelButton (2, "AA",  "", mode == AA);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 18			; 00000012H
	jne	SHORT $LN8@DrawButton
	mov	DWORD PTR tv214[ebp], 1
	jmp	SHORT $LN9@DrawButton
$LN8@DrawButton:
	mov	DWORD PTR tv214[ebp], 0
$LN9@DrawButton:
	mov	eax, DWORD PTR tv214[ebp]
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_02JIIELPFO@AA?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1054 : 	if (mode == GMT) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 16			; 00000010H
	jne	SHORT $LN2@DrawButton

; 1055 : 		LabelButton (3, "GMT",  "", TRUE);

	push	1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_03HOONMGKE@GMT?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1056 : 	} else {

	jmp	SHORT $LN1@DrawButton
$LN2@DrawButton:

; 1057 : 		LabelButton (3, "GM",  "", mode == GM);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 14			; 0000000eH
	jne	SHORT $LN10@DrawButton
	mov	DWORD PTR tv245[ebp], 1
	jmp	SHORT $LN11@DrawButton
$LN10@DrawButton:
	mov	DWORD PTR tv245[ebp], 0
$LN11@DrawButton:
	mov	eax, DWORD PTR tv245[ebp]
	push	eax
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_02DALMIMOA@GM?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton
$LN1@DrawButton:

; 1058 : 	}
; 1059 : 	LabelButton (13, "FCR", NULL, 1);

	push	1
	push	0
	push	OFFSET ??_C@_03JKJFCLEN@FCR?$AA@
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1060 : 	LabelButton (14, "SWAP", "");

	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	OFFSET ??_C@_04NLFHDAEB@SWAP?$AA@
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LabelButton@DrawableClass@@QAEXHPAD0H@Z ; DrawableClass::LabelButton

; 1061 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawButtons@RadarSuperClass@@IAEXXZ ENDP		; RadarSuperClass::DrawButtons
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_rot$ = -32						; size = 8
tv264 = -24						; size = 4
tv252 = -20						; size = 4
tv242 = -16						; size = 4
_yPos$ = -12						; size = 4
_theta$ = -8						; size = 4
_this$ = -4						; size = 4
?DrawWaterline@RadarSuperClass@@IAEXXZ PROC		; RadarSuperClass::DrawWaterline
; _this$ = ecx

; 1001 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1002 : 	float	yPos, theta;
; 1003 : 	mlTrig	rot;
; 1004 : 
; 1005 : 	static const float	InsideEdge	= 0.08f;
; 1006 : 	static const float	OutsideEdge	= 0.40f;
; 1007 : 	static const float	Height		= 0.04f;
; 1008 : 
; 1009 : 	theta  = -platform->Pitch();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv242[ebp]
	movss	xmm0, DWORD PTR tv242[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _theta$[ebp], xmm0

; 1010 : 	if(theta > 45.0F * DTR)

	movss	xmm0, DWORD PTR _theta$[ebp]
	comiss	xmm0, DWORD PTR __real@3f490fd9
	jbe	SHORT $LN3@DrawWaterl

; 1011 : 		theta = 45.0F * DTR;

	movss	xmm0, DWORD PTR __real@3f490fd9
	movss	DWORD PTR _theta$[ebp], xmm0
	jmp	SHORT $LN1@DrawWaterl
$LN3@DrawWaterl:

; 1012 : 	else if( theta < -45.0F * DTR)

	movss	xmm0, DWORD PTR __real@bf490fd9
	comiss	xmm0, DWORD PTR _theta$[ebp]
	jbe	SHORT $LN1@DrawWaterl

; 1013 : 		theta = -45.0F * DTR;

	movss	xmm0, DWORD PTR __real@bf490fd9
	movss	DWORD PTR _theta$[ebp], xmm0
$LN1@DrawWaterl:

; 1014 : 
; 1015 : 	yPos = theta / (60.0f * DTR);

	movss	xmm0, DWORD PTR _theta$[ebp]
	divss	xmm0, DWORD PTR __real@3f860a91
	movss	DWORD PTR _yPos$[ebp], xmm0

; 1016 : 
; 1017 : 	// Rotate the local origin to account for body roll
; 1018 : 	mlSinCos (&rot, -platform->Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv252[ebp]
	movss	xmm0, DWORD PTR tv252[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1019 : 	display->AdjustOriginInViewport (rot.sin*yPos, rot.cos*yPos);

	movss	xmm0, DWORD PTR _rot$[ebp+4]
	mulss	xmm0, DWORD PTR _yPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _rot$[ebp]
	mulss	xmm0, DWORD PTR _yPos$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 1020 : 	display->AdjustRotationAboutOrigin (-platform->Roll());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR tv264[ebp]
	movss	xmm0, DWORD PTR tv264[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 1021 : 
; 1022 : 	display->Line(	OutsideEdge,	-Height,	 OutsideEdge,	0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?Height@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1023 : 	display->Line(	OutsideEdge,	 0.0f,		 InsideEdge,	0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?InsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1024 : 	display->Line(	-OutsideEdge,	-Height,	-OutsideEdge,	0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?Height@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1025 : 	display->Line(	-OutsideEdge,	 0.0f,		-InsideEdge,	0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?InsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?OutsideEdge@?1??DrawWaterline@RadarSuperClass@@IAEXXZ@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 1026 : 
; 1027 : 	display->ZeroRotationAboutOrigin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 1028 : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 1029 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DrawWaterline@RadarSuperClass@@IAEXXZ ENDP		; RadarSuperClass::DrawWaterline
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv246 = -40						; size = 4
_classPtr$1 = -36					; size = 4
_y$ = -32						; size = 4
_x$ = -28						; size = 4
_this$ = -24						; size = 4
_string$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_h$ = 8							; size = 4
_v$ = 12						; size = 4
?DrawLockedGndInfo@RadarSuperClass@@IAEXMM@Z PROC	; RadarSuperClass::DrawLockedGndInfo
; _this$ = ecx

; 943  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 944  : 	float					x, y;		// Screen space coordinates (x left/right)
; 945  : 	char					string[16];
; 946  : 
; 947  : 	ShiAssert( lockedTarget );
; 948  : 
; 949  : 
; 950  : 	// Shift to a target centric frame
; 951  : 	display->AdjustOriginInViewport( h, v );

	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 952  : 
; 953  : 	// Mark where the locked target will be
; 954  : 	display->Line ( 0.0f, TRACK_SIZE, TRACK_SIZE, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 955  : 	display->Line ( TRACK_SIZE, 0.0f, 0.0f, -TRACK_SIZE );

	movss	xmm0, DWORD PTR _TRACK_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 956  : 	display->Line ( 0.0f, -TRACK_SIZE, -TRACK_SIZE, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _TRACK_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _TRACK_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 957  : 	display->Line ( -TRACK_SIZE, 0.0f, 0.0f, TRACK_SIZE );

	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _TRACK_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 958  : 
; 959  : 	// Draw the locked target's symbol (just a blip inside the lock marker)
; 960  : 	display->Tri( -BLIP_SIZE, -BLIP_SIZE, -BLIP_SIZE, +BLIP_SIZE, +BLIP_SIZE, +BLIP_SIZE );

	push	ecx
	movss	xmm0, DWORD PTR _BLIP_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _BLIP_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _BLIP_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _BLIP_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _BLIP_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _BLIP_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 961  : 	display->Tri( -BLIP_SIZE, -BLIP_SIZE, +BLIP_SIZE, -BLIP_SIZE, +BLIP_SIZE, +BLIP_SIZE );

	push	ecx
	movss	xmm0, DWORD PTR _BLIP_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _BLIP_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _BLIP_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _BLIP_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _BLIP_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _BLIP_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 962  : 
; 963  : 
; 964  : 	// Clear the viewport shift and spin
; 965  : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 966  : 	display->ZeroRotationAboutOrigin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 967  : 
; 968  : 
; 969  : 	// Target ID (NCTR)
; 970  : 	if (lockedTarget->BaseData()->IsSim() && !((SimBaseClass*)lockedTarget->BaseData())->IsExploding())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	$LN1@DrawLocked
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv246[ebp], eax
	mov	edx, DWORD PTR tv246[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv246[ebp]
	mov	edx, DWORD PTR [eax+208]
	call	edx
	test	eax, eax
	jne	$LN1@DrawLocked

; 971  : 	{
; 972  : 		Falcon4EntityClassType *classPtr = (Falcon4EntityClassType*)lockedTarget->BaseData()->EntityType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$1[ebp], eax

; 973  : 
; 974  : 		if (classPtr->dataType == DTYPE_VEHICLE) {

	mov	ecx, DWORD PTR _classPtr$1[ebp]
	movzx	edx, BYTE PTR [ecx+76]
	cmp	edx, 5
	jne	SHORT $LN3@DrawLocked

; 975  : 			sprintf (string, "%s", ((VehicleClassDataType*)(classPtr->dataPtr))->Name);

	mov	eax, DWORD PTR _classPtr$1[ebp]
	mov	ecx, DWORD PTR [eax+77]
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 976  : 			ShiAssert( strlen(string) < sizeof(string) );
; 977  : 			display->TextCenter(0.0F, 0.75F, string);

	push	0
	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	jmp	SHORT $LN1@DrawLocked
$LN3@DrawLocked:

; 978  : 		} else if (classPtr->dataType == DTYPE_FEATURE) {

	mov	ecx, DWORD PTR _classPtr$1[ebp]
	movzx	edx, BYTE PTR [ecx+76]
	cmp	edx, 1
	jne	SHORT $LN1@DrawLocked

; 979  : 			sprintf (string, "%s", "BLDG");

	push	OFFSET ??_C@_04CIHBIJA@BLDG?$AA@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 980  : 			ShiAssert( strlen(string) < sizeof(string) );
; 981  : 			display->TextCenter(0.0F, 0.75F, string);

	push	0
	lea	ecx, DWORD PTR _string$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN1@DrawLocked:

; 982  : 		}
; 983  : 	}
; 984  : 
; 985  : 	// Mark our antenna elevation and azmuth to the locked target
; 986  : 	y = lockedTarget->localData->el / radarData->ScanHalfAngle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	movss	xmm0, DWORD PTR [eax+28]
	divss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _y$[ebp], xmm0

; 987  : 	x = lockedTarget->localData->az / radarData->ScanHalfAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	movss	xmm0, DWORD PTR [edx+16]
	divss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _x$[ebp], xmm0

; 988  : 
; 989  : 	display->Line( -0.85f, y,           -0.80f, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 990  : 	display->Line( -0.85f, y+BLIP_SIZE, -0.85f, y-BLIP_SIZE );

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 991  : 	display->Line( x,           -0.80f, x,           -0.85f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 992  : 	display->Line( x+BLIP_SIZE, -0.85f, x-BLIP_SIZE, -0.85f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 993  : 
; 994  : 
; 995  : 	// Put the viewport shift back the way we got it
; 996  : 	display->AdjustOriginInViewport( 0.0f, -1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 997  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?DrawLockedGndInfo@RadarSuperClass@@IAEXMM@Z ENDP	; RadarSuperClass::DrawLockedGndInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv692 = -116						; size = 4
tv871 = -112						; size = 4
tv926 = -108						; size = 4
tv717 = -104						; size = 4
tv904 = -100						; size = 4
tv683 = -96						; size = 4
tv876 = -92						; size = 4
tv940 = -88						; size = 4
tv857 = -84						; size = 4
_classPtr$ = -80					; size = 4
tv295 = -76						; size = 4
tv205 = -72						; size = 4
tv557 = -68						; size = 4
_tmpColor$ = -64					; size = 4
_x$ = -60						; size = 4
_y$ = -56						; size = 4
tv139 = -49						; size = 1
_value$ = -48						; size = 4
_this$ = -44						; size = 4
_str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_h$ = 8							; size = 4
_v$ = 12						; size = 4
?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z PROC	; RadarSuperClass::DrawLockedAirInfo
; _this$ = ecx

; 848  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 849  : 	static const float		trackTriH = TRACK_SIZE * (float)cos( DTR * 30.0f );

	mov	eax, DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
	and	eax, 1
	jne	SHORT $LN6@DrawLocked
	mov	ecx, DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA, ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f060a91
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv683[ebp]
	movss	xmm0, DWORD PTR tv683[ebp]
	mulss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR ?trackTriH@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB, xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN6@DrawLocked:

; 850  : 	static const float		trackTriV = TRACK_SIZE * (float)sin( DTR * 30.0f );

	mov	edx, DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
	and	edx, 2
	jne	SHORT $LN5@DrawLocked
	mov	eax, DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
	or	eax, 2
	mov	DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f060a91
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv692[ebp]
	movss	xmm0, DWORD PTR tv692[ebp]
	mulss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR ?trackTriV@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB, xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN5@DrawLocked:

; 851  : 	float					value;
; 852  : 	float					x, y;		// Screen space coordinates (x left/right)
; 853  : 	char					str[24];
; 854  : 	Falcon4EntityClassType*	classPtr;
; 855  : 	int tmpColor = display->Color();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+108]
	call	eax
	mov	DWORD PTR _tmpColor$[ebp], eax

; 856  : 
; 857  : 
; 858  : 	ShiAssert( lockedTarget );
; 859  : 
; 860  : 
; 861  : 	// Display the locked target's track data
; 862  : 	// Aspect
; 863  : 	value = lockedTarget->localData->aspect * RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+68]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _value$[ebp], xmm0

; 864  : 	sprintf (str, "%02.0f%c", value, (lockedTarget->localData->azFrom > 0.0F ? 'R' : 'L'));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@DrawLocked
	mov	BYTE PTR tv139[ebp], 82			; 00000052H
	jmp	SHORT $LN10@DrawLocked
$LN9@DrawLocked:
	mov	BYTE PTR tv139[ebp], 76			; 0000004cH
$LN10@DrawLocked:
	movsx	ecx, BYTE PTR tv139[ebp]
	push	ecx
	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08JJDNADML@?$CF02?40f?$CFc?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 20					; 00000014H

; 865  : 	ShiAssert( strlen(str) < sizeof(str) );
; 866  : 	display->TextLeft(-0.875F, 0.825F, str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f533333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf600000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 867  : 
; 868  : 	// Heading
; 869  : 	value = lockedTarget->BaseData()->Yaw() * RTD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv717[ebp]
	movss	xmm0, DWORD PTR tv717[ebp]
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _value$[ebp], xmm0

; 870  : 	if (value < 1.0f)  value += 360.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _value$[ebp]
	jbe	SHORT $LN4@DrawLocked
	movss	xmm0, DWORD PTR _value$[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _value$[ebp], xmm0
$LN4@DrawLocked:

; 871  : 	sprintf (str, "%03.0f", floor(value));

	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06EKMMACPN@?$CF03?40f?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 872  : 	ShiAssert( strlen(str) < sizeof(str) );
; 873  : 	display->TextLeft(-0.5F, 0.825F, str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f533333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 874  : 
; 875  : 	// Target calibrated airspeed
; 876  :     value = lockedTarget->BaseData()->GetKias();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR [eax+224]
	call	edx
	fstp	DWORD PTR _value$[ebp]

; 877  : 	sprintf (str, "%03.0fkt", value);

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08EAMNCMCD@?$CF03?40fkt?$AA@
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 878  : 	ShiAssert( strlen(str) < sizeof(str) );
; 879  : 	display->TextRight(0.40F, 0.825F, str);

	push	0
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f533333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+60]
	call	eax

; 880  : 
; 881  : 	// Closure
; 882  : 	value = -lockedTarget->localData->rangedot * FTPSEC_TO_KNOTS;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+48]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3f17ac60
	movss	DWORD PTR _value$[ebp], xmm0

; 883  : 	sprintf (str, "%03.0f", value);

	cvtss2sd xmm0, DWORD PTR _value$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_06EKMMACPN@?$CF03?40f?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 884  : 	ShiAssert( strlen(str) < sizeof(str) );
; 885  : 	display->TextRight(0.875F, 0.825F, str);

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f533333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f600000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+60]
	call	edx

; 886  : 
; 887  : 	// Target ID (NCTR)
; 888  : 	classPtr = (Falcon4EntityClassType*)lockedTarget->BaseData()->EntityType();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ; VuEntity::EntityType
	mov	DWORD PTR _classPtr$[ebp], eax

; 889  : 	if (lockedTarget->BaseData()->IsSim() && (!((SimBaseClass*)lockedTarget->BaseData())->IsExploding()) && 
; 890  : 		(classPtr->dataType == DTYPE_VEHICLE)) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?IsSim@FalconEntity@@QAEHXZ		; FalconEntity::IsSim
	test	eax, eax
	je	SHORT $LN3@DrawLocked
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv295[ebp], eax
	mov	eax, DWORD PTR tv295[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv295[ebp]
	mov	eax, DWORD PTR [edx+208]
	call	eax
	test	eax, eax
	jne	SHORT $LN3@DrawLocked
	mov	ecx, DWORD PTR _classPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+76]
	cmp	edx, 5
	jne	SHORT $LN3@DrawLocked

; 891  : 		sprintf (str, "%s", ((VehicleClassDataType*)(classPtr->dataPtr))->Name);

	mov	eax, DWORD PTR _classPtr$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	add	ecx, 8
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 892  : 		ShiAssert( strlen(str) < sizeof(str) );
; 893  : 		display->TextCenter(0.0F, 0.75F, str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax
$LN3@DrawLocked:

; 894  : 	}
; 895  : 
; 896  : 
; 897  : 	// Mark our antenna elevation and azmuth to the locked target
; 898  : 	y = lockedTarget->localData->el / radarData->ScanHalfAngle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	movss	xmm0, DWORD PTR [eax+28]
	divss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _y$[ebp], xmm0

; 899  : 	x = lockedTarget->localData->az / radarData->ScanHalfAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	movss	xmm0, DWORD PTR [edx+16]
	divss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _x$[ebp], xmm0

; 900  : 
; 901  : 	display->Line( -0.85f, y,           -0.80f, y );

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 902  : 	display->Line( -0.85f, y+BLIP_SIZE, -0.85f, y-BLIP_SIZE );

	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _y$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 903  : 	display->Line( x,           -0.80f, x,           -0.85f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 904  : 	display->Line( x+BLIP_SIZE, -0.85f, x-BLIP_SIZE, -0.85f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf59999a
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _x$[ebp]
	addss	xmm0, DWORD PTR _BLIP_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 905  : 
; 906  : 
; 907  : 	// Mark where the locked target will be
; 908  : 	display->AdjustOriginInViewport( h, v );

	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 909  : 	display->Circle ( 0.0f, 0.0f, TRACK_SIZE );

	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 910  : 
; 911  : 	// Dim the target mark if it is below the signal strength threshhold
; 912  : 	if (ReturnStrength(lockedTarget) >= 1.0f)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	fstp	DWORD PTR tv857[ebp]
	movss	xmm0, DWORD PTR tv857[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN2@DrawLocked

; 913  : 	{
; 914  : 		// Full intensity
; 915  : 		display->SetColor( tmpColor );

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax

; 916  : 	} else {

	jmp	SHORT $LN1@DrawLocked
$LN2@DrawLocked:

; 917  : 		// Dimmed
; 918  : 		display->SetColor( (tmpColor >> 4) & 0xFF00 );

	mov	ecx, DWORD PTR _tmpColor$[ebp]
	sar	ecx, 4
	and	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+92]
	call	eax
$LN1@DrawLocked:

; 919  : 	}
; 920  : 
; 921  : 	// Draw the locked target's symbol (triangle with velocity line)
; 922  : 	value = lockedTarget->BaseData()->Yaw() - platform->Yaw() - h*radarData->ScanHalfAngle;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv871[ebp]
	movss	xmm0, DWORD PTR tv871[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv940[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv876[ebp]
	movss	xmm0, DWORD PTR tv940[ebp]
	subss	xmm0, DWORD PTR tv876[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	movss	xmm1, DWORD PTR _h$[ebp]
	mulss	xmm1, DWORD PTR [ecx+24]
	subss	xmm0, xmm1
	movss	DWORD PTR _value$[ebp], xmm0

; 923  : 	display->AdjustRotationAboutOrigin( value );

	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustRotationAboutOrigin@VirtualDisplay@@QAEXM@Z ; VirtualDisplay::AdjustRotationAboutOrigin

; 924  : 	display->Tri (0.0f, TRACK_SIZE, trackTriH, -trackTriV, -trackTriH, -trackTriV);

	movss	xmm0, DWORD PTR ?trackTriV@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?trackTriH@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR ?trackTriV@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR ?trackTriH@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4MB
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+36]
	call	edx

; 925  : 	display->Line (0.0f, TRACK_SIZE, 0.0f, TRACK_SIZE + lockedTarget->BaseData()->GetVt()*VELOCITY_FLAG_SCALE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv557[ebp], eax
	mov	ecx, DWORD PTR tv557[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv557[ebp]
	mov	eax, DWORD PTR [edx+220]
	call	eax
	fstp	DWORD PTR tv904[ebp]
	movss	xmm0, DWORD PTR tv904[ebp]
	mulss	xmm0, DWORD PTR _VELOCITY_FLAG_SCALE
	addss	xmm0, DWORD PTR _TRACK_SIZE
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _TRACK_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+32]
	call	eax

; 926  : 	display->ZeroRotationAboutOrigin();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ; VirtualDisplay::ZeroRotationAboutOrigin

; 927  : 
; 928  : 	display->SetColor( tmpColor );

	mov	edx, DWORD PTR _tmpColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+92]
	call	edx

; 929  : 
; 930  : 
; 931  : 	// Display the target's altitude
; 932  : 	value = -lockedTarget->BaseData()->ZPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv926[ebp]
	movss	xmm0, DWORD PTR tv926[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _value$[ebp], xmm0

; 933  : 	sprintf(str,"%02d",(int)(value*0.001f));

	movss	xmm0, DWORD PTR _value$[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	cvttss2si ecx, xmm0
	push	ecx
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 934  : 	ShiAssert (strlen(str) < sizeof(str));
; 935  : 	display->TextCenter(0.0F, -0.06F, str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bd75c28f
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 936  : 
; 937  : 	// Undo the viewpoint origin shift
; 938  : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 939  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z$0:
	mov	eax, DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA, eax
	ret	0
__unwindfunclet$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z$1:
	mov	eax, DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA
	and	eax, -3					; fffffffdH
	mov	DWORD PTR ?$S1@?1??DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z@4IA, eax
	ret	0
__ehhandler$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DrawLockedAirInfo@RadarSuperClass@@IAEXMM@Z ENDP	; RadarSuperClass::DrawLockedAirInfo
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv260 = -68						; size = 8
_trig$ = -60						; size = 8
tv241 = -52						; size = 4
tv247 = -48						; size = 4
_bullseyeY$ = -44					; size = 4
_bullseyeX$ = -40					; size = 4
_range$ = -36						; size = 4
_az$ = -32						; size = 4
_cursX$ = -28						; size = 4
_cursY$ = -24						; size = 4
_this$ = -20						; size = 4
_str$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?DrawBullseyeData@RadarSuperClass@@IAEXXZ PROC		; RadarSuperClass::DrawBullseyeData
; _this$ = ecx

; 809  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 	float az, range;
; 811  : 	float cursX, cursY;
; 812  : 	char str[12];
; 813  : 	float bullseyeX, bullseyeY;
; 814  :    mlTrig trig;
; 815  : 	
; 816  : 	TheCampaign.GetBullseyeSimLocation (&bullseyeX, &bullseyeY);

	lea	eax, DWORD PTR _bullseyeY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bullseyeX$[ebp]
	push	ecx
	mov	ecx, OFFSET ?TheCampaign@@3VCampaignClass@@A ; TheCampaign
	call	?GetBullseyeSimLocation@CampaignClass@@QAEXPAM0@Z ; CampaignClass::GetBullseyeSimLocation

; 817  : 
; 818  : 	// Compute cursor location in world space
; 819  : 	if (mode == AA) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 18			; 00000012H
	jne	$LN3@DrawBullse

; 820  : 		// BScope presentation
; 821  : 		az    = cursorX * radarData->ScanHalfAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	mulss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _az$[ebp], xmm0

; 822  : 		range = (cursorY + 1.0f) * 0.5f * rangeFT;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+136]
	movss	DWORD PTR _range$[ebp], xmm0

; 823  :       mlSinCos (&trig, az);

	push	ecx
	movss	xmm0, DWORD PTR _az$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _trig$[ebp]
	push	edx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 824  : 		cursX = trig.sin * range;

	movss	xmm0, DWORD PTR _trig$[ebp]
	mulss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _cursX$[ebp], xmm0

; 825  : 		cursY = trig.cos * range;

	movss	xmm0, DWORD PTR _trig$[ebp+4]
	mulss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _cursY$[ebp], xmm0

; 826  : 		cursX += platform->XPos();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv241[ebp]
	movss	xmm0, DWORD PTR tv241[ebp]
	addss	xmm0, DWORD PTR _cursX$[ebp]
	movss	DWORD PTR _cursX$[ebp], xmm0

; 827  : 		cursY += platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv247[ebp]
	movss	xmm0, DWORD PTR tv247[ebp]
	addss	xmm0, DWORD PTR _cursY$[ebp]
	movss	DWORD PTR _cursY$[ebp], xmm0

; 828  : 	} else {

	jmp	SHORT $LN2@DrawBullse
$LN3@DrawBullse:

; 829  : 		// God's eye presentation
; 830  : 		GetAGCenter ( &cursX, &cursY );

	lea	edx, DWORD PTR _cursY$[ebp]
	push	edx
	lea	eax, DWORD PTR _cursX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
$LN2@DrawBullse:

; 831  : 	}
; 832  : 
; 833  : 	// Compute azmuth and range from bullseye point
; 834  : 	az = RTD * (float)atan2 (cursY - bullseyeY, cursX - bullseyeX);

	movss	xmm0, DWORD PTR _cursX$[ebp]
	subss	xmm0, DWORD PTR _bullseyeX$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _cursY$[ebp]
	subss	xmm0, DWORD PTR _bullseyeY$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv260[ebp]
	movsd	xmm0, QWORD PTR tv260[ebp]
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@42652ee1
	movss	DWORD PTR _az$[ebp], xmm0

; 835  : 	range = (float)sqrt( (cursX-bullseyeX)*(cursX-bullseyeX) + (cursY-bullseyeY)*(cursY-bullseyeY) );

	movss	xmm0, DWORD PTR _cursX$[ebp]
	subss	xmm0, DWORD PTR _bullseyeX$[ebp]
	movss	xmm1, DWORD PTR _cursX$[ebp]
	subss	xmm1, DWORD PTR _bullseyeX$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _cursY$[ebp]
	subss	xmm1, DWORD PTR _bullseyeY$[ebp]
	movss	xmm2, DWORD PTR _cursY$[ebp]
	subss	xmm2, DWORD PTR _bullseyeY$[ebp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 836  : 	if (az < -0.6f)

	movss	xmm0, DWORD PTR __real@bf19999a
	comiss	xmm0, DWORD PTR _az$[ebp]
	jbe	SHORT $LN1@DrawBullse

; 837  : 		az += 360.0f;

	movss	xmm0, DWORD PTR _az$[ebp]
	addss	xmm0, DWORD PTR __real@43b40000
	movss	DWORD PTR _az$[ebp], xmm0
$LN1@DrawBullse:

; 838  : 
; 839  : 	// Present the data on the display
; 840  : 	sprintf( str, "%03.0f %02.0f NM", az, range*FT_TO_NM );

	movss	xmm0, DWORD PTR _range$[ebp]
	mulss	xmm0, DWORD PTR __real@392c987a
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _az$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BB@NCGMHNEM@?$CF03?40f?5?$CF02?40f?5NM?$AA@
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 24					; 00000018H

; 841  : 	ShiAssert (strlen (str) < sizeof(str));
; 842  : 	display->TextLeft( -0.95F, -0.75F, str );

	push	0
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 843  : 	display->TextLeft( -0.95f, -0.65f, "BULLSEYE");

	push	0
	push	OFFSET ??_C@_08DCHPFLAD@BULLSEYE?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@bf266666
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf733333
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 844  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawBullseyeData@RadarSuperClass@@IAEXXZ ENDP		; RadarSuperClass::DrawBullseyeData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv318 = -76						; size = 4
tv344 = -72						; size = 4
tv352 = -68						; size = 4
tv395 = -64						; size = 4
tv397 = -60						; size = 4
tv330 = -56						; size = 4
tv219 = -52						; size = 4
tv221 = -48						; size = 4
tv225 = -44						; size = 4
tv218 = -40						; size = 4
tv215 = -36						; size = 4
tv224 = -32						; size = 4
_ang$ = -28						; size = 4
_high$ = -24						; size = 4
_low$ = -20						; size = 4
_this$ = -16						; size = 4
_str$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
?DrawCursor@RadarSuperClass@@IAEXXZ PROC		; RadarSuperClass::DrawCursor
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 	char	str[8];
; 761  : 	float	ang;
; 762  : 	float	high;
; 763  : 	float	low;
; 764  : 
; 765  : 	display->AdjustOriginInViewport (cursorX, cursorY);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+156]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	call	?AdjustOriginInViewport@VirtualDisplay@@QAEXMM@Z ; VirtualDisplay::AdjustOriginInViewport

; 766  : 
; 767  : 	// Draw the vertical cursor bars
; 768  : 	display->Line( -CURSOR_SIZE, -CURSOR_SIZE, -CURSOR_SIZE, CURSOR_SIZE );

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 769  : 	display->Line(  CURSOR_SIZE, -CURSOR_SIZE,  CURSOR_SIZE, CURSOR_SIZE );

	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _CURSOR_SIZE
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+32]
	call	edx

; 770  : 
; 771  : 	// Compute the evelation limits of the scan volume
; 772  : 	ang = platform->Pitch() + radarData->ScanHalfAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv318[ebp]
	movss	xmm0, DWORD PTR tv318[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	addss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _ang$[ebp], xmm0

; 773  : 	if (ang > 90.0f * DTR) {

	movss	xmm0, DWORD PTR _ang$[ebp]
	comiss	xmm0, DWORD PTR __real@3fc90fd9
	jbe	SHORT $LN4@DrawCursor

; 774  : 		high = 1.0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _high$[ebp], xmm0

; 775  : 	} else {

	jmp	SHORT $LN3@DrawCursor
$LN4@DrawCursor:

; 776  : 		high = (float)sin( ang );

	push	ecx
	movss	xmm0, DWORD PTR _ang$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _high$[ebp]
$LN3@DrawCursor:

; 777  : 	}
; 778  : 
; 779  : 	ang = platform->Pitch() - radarData->ScanHalfAngle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv330[ebp]
	movss	xmm0, DWORD PTR tv330[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	subss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR _ang$[ebp], xmm0

; 780  : 	if (ang < -90.0f * DTR) {

	movss	xmm0, DWORD PTR __real@bfc90fd9
	comiss	xmm0, DWORD PTR _ang$[ebp]
	jbe	SHORT $LN2@DrawCursor

; 781  : 		low = -1.0;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _low$[ebp], xmm0

; 782  : 	} else {

	jmp	SHORT $LN1@DrawCursor
$LN2@DrawCursor:

; 783  : 		low = (float)sin( ang );

	push	ecx
	movss	xmm0, DWORD PTR _ang$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _low$[ebp]
$LN1@DrawCursor:

; 784  : 	}
; 785  : 
; 786  : 	// Convert to feet and factor in the height of our platform
; 787  : 	high = 0.001f * (high * rangeFT - platform->ZPos());

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _high$[ebp]
	mulss	xmm0, DWORD PTR [eax+136]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv395[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv344[ebp]
	movss	xmm0, DWORD PTR tv395[ebp]
	subss	xmm0, DWORD PTR tv344[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _high$[ebp], xmm0

; 788  : 	low  = 0.001f * (low  * rangeFT - platform->ZPos());

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _low$[ebp]
	mulss	xmm0, DWORD PTR [edx+136]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv397[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv352[ebp]
	movss	xmm0, DWORD PTR tv397[ebp]
	subss	xmm0, DWORD PTR tv352[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _low$[ebp], xmm0

; 789  : 
; 790  : 	// Clamp to legal display range
; 791  : 	high	= min( max(high, 0.0F), 99.0F);

	movss	xmm0, DWORD PTR _high$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN7@DrawCursor
	movss	xmm0, DWORD PTR _high$[ebp]
	movss	DWORD PTR tv215[ebp], xmm0
	jmp	SHORT $LN8@DrawCursor
$LN7@DrawCursor:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv215[ebp], xmm0
$LN8@DrawCursor:
	movss	xmm0, DWORD PTR __real@42c60000
	comiss	xmm0, DWORD PTR tv215[ebp]
	jbe	SHORT $LN11@DrawCursor
	movss	xmm0, DWORD PTR _high$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@DrawCursor
	movss	xmm0, DWORD PTR _high$[ebp]
	movss	DWORD PTR tv218[ebp], xmm0
	jmp	SHORT $LN10@DrawCursor
$LN9@DrawCursor:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv218[ebp], xmm0
$LN10@DrawCursor:
	movss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR tv219[ebp], xmm0
	jmp	SHORT $LN12@DrawCursor
$LN11@DrawCursor:
	movss	xmm0, DWORD PTR __real@42c60000
	movss	DWORD PTR tv219[ebp], xmm0
$LN12@DrawCursor:
	movss	xmm0, DWORD PTR tv219[ebp]
	movss	DWORD PTR _high$[ebp], xmm0

; 792  : 	low		= min( max(low,  0.0F), 99.0F);

	movss	xmm0, DWORD PTR _low$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@DrawCursor
	movss	xmm0, DWORD PTR _low$[ebp]
	movss	DWORD PTR tv221[ebp], xmm0
	jmp	SHORT $LN14@DrawCursor
$LN13@DrawCursor:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv221[ebp], xmm0
$LN14@DrawCursor:
	movss	xmm0, DWORD PTR __real@42c60000
	comiss	xmm0, DWORD PTR tv221[ebp]
	jbe	SHORT $LN17@DrawCursor
	movss	xmm0, DWORD PTR _low$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN15@DrawCursor
	movss	xmm0, DWORD PTR _low$[ebp]
	movss	DWORD PTR tv224[ebp], xmm0
	jmp	SHORT $LN16@DrawCursor
$LN15@DrawCursor:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv224[ebp], xmm0
$LN16@DrawCursor:
	movss	xmm0, DWORD PTR tv224[ebp]
	movss	DWORD PTR tv225[ebp], xmm0
	jmp	SHORT $LN18@DrawCursor
$LN17@DrawCursor:
	movss	xmm0, DWORD PTR __real@42c60000
	movss	DWORD PTR tv225[ebp], xmm0
$LN18@DrawCursor:
	movss	xmm0, DWORD PTR tv225[ebp]
	movss	DWORD PTR _low$[ebp], xmm0

; 793  : 
; 794  : 
; 795  : 	// Print the evelation limits of the scan volume
; 796  : 	sprintf(str,"%02d",(int)high);

	cvttss2si ecx, DWORD PTR _high$[ebp]
	push	ecx
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 797  : 	ShiAssert (strlen(str) < sizeof(str));
; 798  : 	display->TextLeft(0.06F, 0.055F, str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3d6147ae
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 799  : 
; 800  : 	sprintf(str,"%02d",(int)low);

	cvttss2si ecx, DWORD PTR _low$[ebp]
	push	ecx
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 801  : 	ShiAssert (strlen(str) < sizeof(str));
; 802  : 	display->TextLeft(0.06F,-0.035F, str);

	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@bd0f5c29
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+56]
	call	eax

; 803  : 
; 804  : 	display->CenterOriginInViewport();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ; VirtualDisplay::CenterOriginInViewport

; 805  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?DrawCursor@RadarSuperClass@@IAEXXZ ENDP		; RadarSuperClass::DrawCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
$T1 = -172						; size = 8
$T2 = -164						; size = 8
tv815 = -156						; size = 4
tv841 = -152						; size = 4
tv765 = -148						; size = 4
tv846 = -144						; size = 4
tv951 = -140						; size = 4
tv1030 = -136						; size = 4
tv925 = -132						; size = 4
tv810 = -128						; size = 4
tv904 = -124						; size = 4
tv1032 = -120						; size = 4
tv1036 = -116						; size = 4
tv826 = -112						; size = 4
tv896 = -108						; size = 4
tv821 = -104						; size = 4
tv857 = -100						; size = 4
tv1028 = -96						; size = 4
tv1034 = -92						; size = 4
tv757 = -88						; size = 4
tv852 = -84						; size = 4
tv782 = -80						; size = 4
tv390 = -76						; size = 4
_cursorTgtID$ = -72					; size = 8
_sendThisFrame$ = -64					; size = 4
tv418 = -60						; size = 4
tv648 = -56						; size = 4
tv444 = -52						; size = 4
tv541 = -48						; size = 4
tv410 = -44						; size = 4
_cursorDelta$ = -40					; size = 4
_d$3 = -36						; size = 4
tv402 = -32						; size = 4
tv505 = -28						; size = 4
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_newLock$ = -16						; size = 4
_bestSoFar$ = -12					; size = 4
_object$ = -8						; size = 4
_this$ = -4						; size = 4
?ExecAA@RadarSuperClass@@IAEXXZ PROC			; RadarSuperClass::ExecAA
; _this$ = ecx

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	mov	DWORD PTR _this$[ebp], ecx

; 386  : 	SimObjectType*	object;
; 387  : 	SimObjectType*	newLock;
; 388  : 	float			x, y;
; 389  : 	float			bestSoFar;
; 390  : 	int				sendThisFrame;
; 391  : 	float			cursorDelta = BLIP_SIZE*2.0f;

	movss	xmm0, DWORD PTR _BLIP_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _cursorDelta$[ebp], xmm0

; 392  : 	VU_ID			cursorTgtID = FalconNullId;

	mov	eax, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _cursorTgtID$[ebp], eax
	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _cursorTgtID$[ebp+4], ecx

; 393  : 
; 394  : 	
; 395  : 	// See if we need to drop lock
; 396  : 	if (lockedTarget) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN46@ExecAA

; 397  : 
; 398  : 		// Drop lock if the guy is outside our radar cone
; 399  : 		if ((fabs( lockedTarget->localData->az ) > radarData->ScanHalfAngle) ||
; 400  : 			(fabs( lockedTarget->localData->el ) > radarData->ScanHalfAngle) ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv757[ebp]
	movss	xmm0, DWORD PTR tv757[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	comiss	xmm0, DWORD PTR [ecx+24]
	ja	SHORT $LN50@ExecAA
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv765[ebp]
	movss	xmm0, DWORD PTR tv765[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	comiss	xmm0, DWORD PTR [eax+24]
	jbe	SHORT $LN51@ExecAA
$LN50@ExecAA:

; 401  : 			if (lockedTarget) SendTrackMsg( lockedTarget, Track_Unlock );

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN49@ExecAA
	push	0
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN49@ExecAA:

; 402  : 			ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 403  : 			lockCmd = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 404  : 		} else {

	jmp	$LN46@ExecAA
$LN51@ExecAA:

; 405  : 
; 406  : 			// Drop lock if the guy has been below the signal strength threshhold too long
; 407  : 			if (ReturnStrength(lockedTarget) < 1.0f) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	fstp	DWORD PTR tv782[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv782[ebp]
	jbe	SHORT $LN46@ExecAA

; 408  : 				// He's faded.  How long has he been hiding?
; 409  : 				if (SimLibElapsedTime - lockedTarget->localData->rdrLastHit > radarData->CoastTime) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	cmp	ecx, DWORD PTR [eax+32]
	jbe	SHORT $LN46@ExecAA

; 410  : 					// Give up and drop lock
; 411  : 					if (lockedTarget) SendTrackMsg( lockedTarget, Track_Unlock );

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN45@ExecAA
	push	0
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN45@ExecAA:

; 412  : 					ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 413  : 					lockCmd = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN46@ExecAA:

; 414  : 				}
; 415  : 			}
; 416  : 		}
; 417  : 	}
; 418  : 
; 419  : 
; 420  : 	// Prepare our range metrics if we're stepping targets
; 421  : 	newLock = lockedTarget;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _newLock$[ebp], eax

; 422  : 	if (lockCmd == AUTO) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+148], 1
	jne	SHORT $LN44@ExecAA

; 423  : 		bestSoFar = rangeFT;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+136]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0
	jmp	$LN35@ExecAA
$LN44@ExecAA:

; 424  : 	} else if (lockCmd == BORE) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 3
	jne	SHORT $LN42@ExecAA

; 425  : 		bestSoFar = radarData->BeamHalfAngle;		// Model a somewhat narrow beam

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 426  : 		newLock = NULL;

	mov	DWORD PTR _newLock$[ebp], 0
	jmp	$LN35@ExecAA
$LN42@ExecAA:

; 427  : 	} else if (lockCmd == NEXT) {			// Want one further out

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 4
	jne	$LN40@ExecAA

; 428  : 		if (lockedTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN39@ExecAA

; 429  : 			x = lockedTarget->BaseData()->XPos() - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv810[ebp]
	movss	xmm0, DWORD PTR tv810[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1028[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv815[ebp]
	movss	xmm0, DWORD PTR tv1028[ebp]
	subss	xmm0, DWORD PTR tv815[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 430  : 			y = lockedTarget->BaseData()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv821[ebp]
	movss	xmm0, DWORD PTR tv821[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1030[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv826[ebp]
	movss	xmm0, DWORD PTR tv1030[ebp]
	subss	xmm0, DWORD PTR tv826[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 431  : 			lockedTarget->localData->range = (float)sqrt( x*x + y*y );

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+44]
$LN39@ExecAA:

; 432  : 		}
; 433  : 		bestSoFar = 1e20f;

	movss	xmm0, DWORD PTR __real@60ad78ec
	movss	DWORD PTR _bestSoFar$[ebp], xmm0
	jmp	$LN35@ExecAA
$LN40@ExecAA:

; 434  : 	} else if (lockCmd == PREV) {			// Want one closer in

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 5
	jne	$LN37@ExecAA

; 435  : 		if (lockedTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN36@ExecAA

; 436  : 			x = lockedTarget->BaseData()->XPos() - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv841[ebp]
	movss	xmm0, DWORD PTR tv841[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1032[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv846[ebp]
	movss	xmm0, DWORD PTR tv1032[ebp]
	subss	xmm0, DWORD PTR tv846[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 437  : 			y = lockedTarget->BaseData()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv852[ebp]
	movss	xmm0, DWORD PTR tv852[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1034[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv857[ebp]
	movss	xmm0, DWORD PTR tv1034[ebp]
	subss	xmm0, DWORD PTR tv857[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 438  : 			lockedTarget->localData->range = (float)sqrt( x*x + y*y );

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+44]
$LN36@ExecAA:

; 439  : 		}
; 440  : 		bestSoFar = -1e20f;

	movss	xmm0, DWORD PTR __real@e0ad78ec
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 441  : 	}
; 442  : 	else

	jmp	SHORT $LN35@ExecAA
$LN37@ExecAA:

; 443  : 	{
; 444  : 		bestSoFar = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bestSoFar$[ebp], xmm0
$LN35@ExecAA:

; 445  : 	}
; 446  : 
; 447  : 
; 448  : 	// Consider each potential target in our environment for lock and cursor identification
; 449  : 	for (object = platform->targetList; object; object = object->next) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+660]
	mov	DWORD PTR _object$[ebp], edx
	jmp	SHORT $LN34@ExecAA
$LN33@ExecAA:
	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _object$[ebp], ecx
$LN34@ExecAA:
	cmp	DWORD PTR _object$[ebp], 0
	je	$LN32@ExecAA

; 450  : 
; 451  : 		// Skip ground objects in AA mode
; 452  : 		if ( object->BaseData()->OnGround() ) {

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv390[ebp], eax
	mov	edx, DWORD PTR tv390[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv390[ebp]
	mov	edx, DWORD PTR [eax+148]
	call	edx
	test	eax, eax
	je	SHORT $LN31@ExecAA

; 453  : 			continue;

	jmp	SHORT $LN33@ExecAA
$LN31@ExecAA:

; 454  : 		}
; 455  : 
; 456  : 		// Skip anything beyond our display range
; 457  : 		if (object->localData->range > rangeFT) {

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [edx+136]
	jbe	SHORT $LN30@ExecAA

; 458  : 			continue;

	jmp	SHORT $LN33@ExecAA
$LN30@ExecAA:

; 459  : 		}
; 460  : 
; 461  : 		// Skip weapons
; 462  : 		if ( object->BaseData()->IsMissile() || object->BaseData()->IsBomb())

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv402[ebp], eax
	mov	eax, DWORD PTR tv402[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv402[ebp]
	mov	eax, DWORD PTR [edx+156]
	call	eax
	test	eax, eax
	jne	SHORT $LN28@ExecAA
	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv410[ebp], eax
	mov	ecx, DWORD PTR tv410[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv410[ebp]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	test	eax, eax
	je	SHORT $LN29@ExecAA
$LN28@ExecAA:

; 463  : 		{
; 464  : 			continue;

	jmp	$LN33@ExecAA
$LN29@ExecAA:

; 465  : 		}
; 466  : 
; 467  : 		// Skip ejected pilots
; 468  : 		if ( object->BaseData()->IsEject() )

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv418[ebp], eax
	mov	ecx, DWORD PTR tv418[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv418[ebp]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	test	eax, eax
	je	SHORT $LN27@ExecAA

; 469  : 		{
; 470  : 			continue;

	jmp	$LN33@ExecAA
$LN27@ExecAA:

; 471  : 		}
; 472  : 
; 473  : 		// Skip anything not in our radar pyramid
; 474  : 		if (max(fabs(object->localData->az), fabs(object->localData->el)) > radarData->ScanHalfAngle) {

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	ecx
	movss	xmm0, DWORD PTR [edx+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv896[ebp]
	movss	xmm0, DWORD PTR tv896[ebp]
	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1036[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv904[ebp]
	movss	xmm0, DWORD PTR tv1036[ebp]
	comiss	xmm0, DWORD PTR tv904[ebp]
	jbe	SHORT $LN55@ExecAA
	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv444[ebp]
	jmp	SHORT $LN56@ExecAA
$LN55@ExecAA:
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	ecx
	movss	xmm0, DWORD PTR [edx+28]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv444[ebp]
$LN56@ExecAA:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	movss	xmm0, DWORD PTR tv444[ebp]
	comiss	xmm0, DWORD PTR [ecx+24]
	jbe	SHORT $LN26@ExecAA

; 475  : 			continue;

	jmp	$LN33@ExecAA
$LN26@ExecAA:

; 476  : 		}
; 477  : 
; 478  : 		// Relative position for target under cursor
; 479  : 		x = TargetAz( platform, object ) / radarData->ScanHalfAngle;

	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 8
	fstp	DWORD PTR tv925[ebp]
	movss	xmm0, DWORD PTR tv925[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	divss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _x$[ebp], xmm0

; 480  : 		y = 2.0f * object->localData->range * invRangeFT - 1.0f;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+140]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _y$[ebp], xmm0

; 481  : 		float d = CursorDelta(x,y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CursorDelta@RadarSuperClass@@IAEMMM@Z	; RadarSuperClass::CursorDelta
	fstp	DWORD PTR _d$3[ebp]

; 482  : 		if (d < cursorDelta)

	movss	xmm0, DWORD PTR _cursorDelta$[ebp]
	comiss	xmm0, DWORD PTR _d$3[ebp]
	jbe	SHORT $LN25@ExecAA

; 483  : 		{
; 484  : 			cursorDelta = d;

	movss	xmm0, DWORD PTR _d$3[ebp]
	movss	DWORD PTR _cursorDelta$[ebp], xmm0

; 485  : 			cursorTgtID = object->BaseData()->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _cursorTgtID$[ebp], edx
	mov	DWORD PTR _cursorTgtID$[ebp+4], eax
$LN25@ExecAA:

; 486  : 		}
; 487  : 
; 488  : 		// We're done unless we need to acquire a lock
; 489  : 		if (!lockCmd) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+148], 0
	jne	SHORT $LN24@ExecAA

; 490  : 			continue;

	jmp	$LN33@ExecAA
$LN24@ExecAA:

; 491  : 		}
; 492  : 
; 493  : 		// Don't allow locks on anything below the signal strength threshhold
; 494  : 		if (ReturnStrength(object) < 1.0f) {

	mov	edx, DWORD PTR _object$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	fstp	DWORD PTR tv951[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv951[ebp]
	jbe	SHORT $LN23@ExecAA

; 495  : 			continue;

	jmp	$LN33@ExecAA
$LN23@ExecAA:

; 496  : 		}
; 497  : 
; 498  : 		// Handle the lock command
; 499  : 		switch (lockCmd) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR tv505[ebp], edx
	mov	eax, DWORD PTR tv505[ebp]
	sub	eax, 1
	mov	DWORD PTR tv505[ebp], eax
	cmp	DWORD PTR tv505[ebp], 4
	ja	$LN4@ExecAA
	mov	ecx, DWORD PTR tv505[ebp]
	jmp	DWORD PTR $LN59@ExecAA[ecx*4]
$LN20@ExecAA:

; 500  : 
; 501  : 		  case AUTO:
; 502  : 			// While holding a lock, ignore this command
; 503  : 			if (lockedTarget)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN19@ExecAA

; 504  : 				break;

	jmp	$LN21@ExecAA
$LN19@ExecAA:

; 505  : 
; 506  : 			// If this is the nearest "threat" object in front of us, pick it
; 507  : 			if (object->localData->range <= bestSoFar) {

	mov	eax, DWORD PTR _object$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR [ecx+44]
	jb	SHORT $LN17@ExecAA

; 508  : 				if ( TeamInfo[platform->GetTeam()]->TStance(object->BaseData()->GetTeam()) == War ) {

	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR tv541[ebp], eax
	mov	edx, DWORD PTR tv541[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv541[ebp]
	mov	edx, DWORD PTR [eax+116]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?TStance@TeamClass@@QAEHE@Z		; TeamClass::TStance
	cmp	eax, 5
	jne	SHORT $LN17@ExecAA

; 509  : 					bestSoFar = object->localData->range;

	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 510  : 					newLock = object;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], ecx
$LN17@ExecAA:

; 511  : 				}
; 512  : 			}
; 513  : 			break;

	jmp	$LN21@ExecAA
$LN16@ExecAA:

; 514  : 
; 515  : 		  case BORE:
; 516  : 			// We've been asked to lock the target nearest our nose
; 517  : 			if (object->localData->ata < bestSoFar) {

	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN15@ExecAA

; 518  : 				bestSoFar = object->localData->ata;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 519  : 				newLock = object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], eax

; 520  : 				wantLock = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 0
$LN15@ExecAA:

; 521  : 			}
; 522  : 			break;

	jmp	$LN21@ExecAA
$LN14@ExecAA:

; 523  : 
; 524  : 		  case CURSOR:
; 525  : 			// We've been asked to lock a specific target, so find which one...
; 526  : 			if (object->BaseData()->Id() == targetUnderCursor) {

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _object$[ebp]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@ExecAA

; 527  : 				newLock = object;

	mov	edx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], edx

; 528  : 				wantLock = NOCHANGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0
$LN13@ExecAA:

; 529  : 			}
; 530  : 			break;

	jmp	$LN21@ExecAA
$LN12@ExecAA:

; 531  : 
; 532  : 		  case NEXT:
; 533  : 			if (object->localData->range < bestSoFar) {

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR [edx+44]
	jbe	SHORT $LN10@ExecAA

; 534  : 				if ((!lockedTarget) || (object->localData->range > lockedTarget->localData->range)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN9@ExecAA
	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx+44]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN10@ExecAA
$LN9@ExecAA:

; 535  : 					bestSoFar = object->localData->range;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	movss	xmm0, DWORD PTR [edx+44]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 536  : 					newLock = object;

	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], eax

; 537  : 					wantLock = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 0
$LN10@ExecAA:

; 538  : 				}
; 539  : 			}
; 540  : 			break;

	jmp	SHORT $LN21@ExecAA
$LN8@ExecAA:

; 541  : 
; 542  : 		  case PREV:
; 543  : 			if (object->localData->range > bestSoFar) {

	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN6@ExecAA

; 544  : 				if ((!lockedTarget) || (object->localData->range < lockedTarget->localData->range)) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN5@ExecAA
	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	ecx, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [ecx+44]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN6@ExecAA
$LN5@ExecAA:

; 545  : 					bestSoFar = object->localData->range;

	mov	edx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 546  : 					newLock = object;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], ecx

; 547  : 					wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0
$LN6@ExecAA:
$LN4@ExecAA:
$LN21@ExecAA:

; 548  : 				}
; 549  : 			}
; 550  : 			break;
; 551  : 
; 552  : 		  default:
; 553  : 			ShiWarning( "Bad lock command" );
; 554  : 		}
; 555  : 	}	// End of our target list traversal loop

	jmp	$LN33@ExecAA
$LN32@ExecAA:

; 556  : 
; 557  : 
; 558  : 	// If we changed locks, immediatly notify those concerned and update our state
; 559  : 	if (newLock != lockedTarget) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLock$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	je	SHORT $LN3@ExecAA

; 560  : 		SetDesiredTarget( newLock );

	mov	edx, DWORD PTR _newLock$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 561  : 		sendThisFrame = TRUE;

	mov	DWORD PTR _sendThisFrame$[ebp], 1

; 562  : 	} else {

	jmp	SHORT $LN2@ExecAA
$LN3@ExecAA:

; 563  : 		// See if it is time to send a "lock" update
; 564  : 		sendThisFrame = lockedTarget && (SimLibElapsedTime - lastTargetLockSend > TrackUpdateTime);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN57@ExecAA
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	sub	eax, DWORD PTR [edx+72]
	cmp	eax, DWORD PTR ?TrackUpdateTime@RadarClass@@2KB ; RadarClass::TrackUpdateTime
	jbe	SHORT $LN57@ExecAA
	mov	DWORD PTR tv648[ebp], 1
	jmp	SHORT $LN58@ExecAA
$LN57@ExecAA:
	mov	DWORD PTR tv648[ebp], 0
$LN58@ExecAA:
	mov	ecx, DWORD PTR tv648[ebp]
	mov	DWORD PTR _sendThisFrame$[ebp], ecx
$LN2@ExecAA:

; 565  : 	}
; 566  : 
; 567  : 	// Send our periodic lock message
; 568  : 	if ((sendThisFrame) && (lockedTarget)) {

	cmp	DWORD PTR _sendThisFrame$[ebp], 0
	je	SHORT $LN1@ExecAA
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN1@ExecAA

; 569  : 		SendTrackMsg( lockedTarget, Track_Lock );

	push	0
	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+80]
	call	edx

; 570  : 		lastTargetLockSend = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [eax+72], ecx
$LN1@ExecAA:

; 571  : 	}
; 572  : 
; 573  : 
; 574  : 	// Publish the ID of the target under the cursor
; 575  : 	targetUnderCursor = cursorTgtID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cursorTgtID$[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _cursorTgtID$[ebp+4]
	mov	DWORD PTR [edx+40], ecx

; 576  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN59@ExecAA:
	DD	$LN20@ExecAA
	DD	$LN14@ExecAA
	DD	$LN16@ExecAA
	DD	$LN12@ExecAA
	DD	$LN8@ExecAA
?ExecAA@RadarSuperClass@@IAEXXZ ENDP			; RadarSuperClass::ExecAA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
$T2 = -260						; size = 8
$T3 = -252						; size = 8
_objectWalker$ = -244					; size = 12
tv1006 = -232						; size = 4
tv793 = -228						; size = 4
tv865 = -224						; size = 4
tv782 = -220						; size = 4
tv819 = -216						; size = 4
tv998 = -212						; size = 4
tv1010 = -208						; size = 4
tv976 = -204						; size = 4
tv860 = -200						; size = 4
tv1016 = -196						; size = 4
tv824 = -192						; size = 4
tv971 = -188						; size = 4
tv1002 = -184						; size = 4
tv965 = -180						; size = 4
tv788 = -176						; size = 4
tv1014 = -172						; size = 4
tv869 = -168						; size = 4
tv960 = -164						; size = 4
tv1008 = -160						; size = 4
tv926 = -156						; size = 4
tv856 = -152						; size = 4
tv1012 = -148						; size = 4
tv851 = -144						; size = 4
_atz$ = -140						; size = 4
tv777 = -136						; size = 4
_aty$ = -132						; size = 4
tv813 = -128						; size = 4
_atx$ = -124						; size = 4
tv808 = -120						; size = 4
tv898 = -116						; size = 4
tv1000 = -112						; size = 4
tv892 = -108						; size = 4
tv874 = -104						; size = 4
tv1004 = -100						; size = 4
_yaw$ = -96						; size = 8
_cursorDelta$ = -88					; size = 4
_cursorTgtID$ = -84					; size = 8
_cosATA$4 = -76						; size = 4
_d$5 = -72						; size = 4
_x$ = -68						; size = 4
_scaledSinYaw$ = -64					; size = 4
_y$ = -60						; size = 4
_scaledCosYaw$ = -56					; size = 4
_list$ = -52						; size = 4
_dz$ = -48						; size = 4
tv447 = -44						; size = 4
_newLock$ = -40						; size = 4
_bestSoFar$ = -36					; size = 4
_range$ = -32						; size = 4
_object$ = -28						; size = 4
_dy$ = -24						; size = 4
_dx$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ExecAG@RadarSuperClass@@IAEXXZ PROC			; RadarSuperClass::ExecAG
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ExecAG@RadarSuperClass@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	FalconPrivateOrderedList	*list=NULL;	

	mov	DWORD PTR _list$[ebp], 0

; 206  : 	FalconEntity*				object=NULL;

	mov	DWORD PTR _object$[ebp], 0

; 207  : 	FalconEntity*				newLock=NULL;

	mov	DWORD PTR _newLock$[ebp], 0

; 208  : 	float						x=0.0F, y=0.0F;			// Screen space coordinates (x left/right)

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _x$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _y$[ebp], xmm0

; 209  : 	float						dx=0.0F, dy=0.0F, dz=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dx$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dy$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _dz$[ebp], xmm0

; 210  : 	float						range=0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _range$[ebp], xmm0

; 211  : 	float						bestSoFar = 1e20f;;

	movss	xmm0, DWORD PTR __real@60ad78ec
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 212  : 	mlTrig						yaw={0.0F};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _yaw$[ebp], xmm0
	xor	eax, eax
	mov	DWORD PTR _yaw$[ebp+4], eax

; 213  : 	float						scaledCosYaw=1.0F, scaledSinYaw=0.0F;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _scaledCosYaw$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _scaledSinYaw$[ebp], xmm0

; 214  : 	float			cursorDelta = BLIP_SIZE*2.0f;

	movss	xmm0, DWORD PTR _BLIP_SIZE
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _cursorDelta$[ebp], xmm0

; 215  : 	VU_ID			cursorTgtID = FalconNullId;

	mov	ecx, DWORD PTR ?FalconNullId@@3VVU_ID@@A
	mov	DWORD PTR _cursorTgtID$[ebp], ecx
	mov	edx, DWORD PTR ?FalconNullId@@3VVU_ID@@A+4
	mov	DWORD PTR _cursorTgtID$[ebp+4], edx

; 216  : 
; 217  : 	// Convienience synonym for the "At" vector of the platform...
; 218  : 	const float atx	= platform->dmx[0][0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, 12					; 0000000cH
	imul	edx, 0
	lea	eax, DWORD PTR [ecx+edx+296]
	mov	ecx, 4
	imul	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _atx$[ebp], xmm0

; 219  : 	const float aty	= platform->dmx[0][1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, 12					; 0000000cH
	imul	ecx, 0
	lea	edx, DWORD PTR [eax+ecx+296]
	mov	eax, 4
	shl	eax, 0
	movss	xmm0, DWORD PTR [edx+eax]
	movss	DWORD PTR _aty$[ebp], xmm0

; 220  : 	const float atz	= platform->dmx[0][2];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, 12					; 0000000cH
	imul	eax, 0
	lea	ecx, DWORD PTR [edx+eax+296]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR _atz$[ebp], xmm0

; 221  : 
; 222  : 
; 223  : 	// Choose the appropriate sim list based on the radar mode
; 224  : 	if (mode == GM) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 14			; 0000000eH
	jne	SHORT $LN38@ExecAG

; 225  : 		list = SimDriver.combinedFeatureList;	// Buildings

	mov	ecx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+20
	mov	DWORD PTR _list$[ebp], ecx

; 226  : 	} else {

	jmp	SHORT $LN37@ExecAG
$LN38@ExecAG:

; 227  : 		list = SimDriver.combinedList;			// Vehicles

	mov	edx, DWORD PTR ?SimDriver@@3VSimulationDriver@@A+16
	mov	DWORD PTR _list$[ebp], edx
$LN37@ExecAG:

; 228  : 	}
; 229  : 	VuListIterator	objectWalker( list );

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??0VuListIterator@@QAE@PAVVuLinkedList@@@Z ; VuListIterator::VuListIterator
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 
; 231  : 
; 232  : 	// Prepare our range metrics if we're stepping targets
; 233  : 	if (lockedTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN36@ExecAG

; 234  : 		newLock = lockedTarget->BaseData();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	DWORD PTR _newLock$[ebp], eax

; 235  : 	} else {

	jmp	SHORT $LN35@ExecAG
$LN36@ExecAG:

; 236  : 		newLock = NULL;

	mov	DWORD PTR _newLock$[ebp], 0
$LN35@ExecAG:

; 237  : 	}
; 238  : 	if (lockCmd == BORE) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 3
	jne	SHORT $LN34@ExecAG

; 239  : 		bestSoFar = (float)cos( radarData->BeamHalfAngle );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	ecx
	movss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _bestSoFar$[ebp]

; 240  : 		newLock = NULL;

	mov	DWORD PTR _newLock$[ebp], 0
	jmp	$LN27@ExecAG
$LN34@ExecAG:

; 241  : 	} else if (lockCmd == NEXT) {			// Want one further out

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 4
	jne	$LN32@ExecAG

; 242  : 		if (lockedTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN31@ExecAG

; 243  : 			dx = lockedTarget->BaseData()->XPos() - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv777[ebp]
	movss	xmm0, DWORD PTR tv777[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv998[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv782[ebp]
	movss	xmm0, DWORD PTR tv998[ebp]
	subss	xmm0, DWORD PTR tv782[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 244  : 			dy = lockedTarget->BaseData()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv788[ebp]
	movss	xmm0, DWORD PTR tv788[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1000[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv793[ebp]
	movss	xmm0, DWORD PTR tv1000[ebp]
	subss	xmm0, DWORD PTR tv793[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 245  : 			lockedTarget->localData->range = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+44]
$LN31@ExecAG:

; 246  : 		}
; 247  : 		bestSoFar = 1e20f;

	movss	xmm0, DWORD PTR __real@60ad78ec
	movss	DWORD PTR _bestSoFar$[ebp], xmm0
	jmp	$LN27@ExecAG
$LN32@ExecAG:

; 248  : 	} else if (lockCmd == PREV) {			// Want one closer in

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 5
	jne	$LN29@ExecAG

; 249  : 		if (lockedTarget) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN28@ExecAG

; 250  : 			dx = lockedTarget->BaseData()->XPos() - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv808[ebp]
	movss	xmm0, DWORD PTR tv808[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1002[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv813[ebp]
	movss	xmm0, DWORD PTR tv1002[ebp]
	subss	xmm0, DWORD PTR tv813[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 251  : 			dy = lockedTarget->BaseData()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv819[ebp]
	movss	xmm0, DWORD PTR tv819[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1004[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv824[ebp]
	movss	xmm0, DWORD PTR tv1004[ebp]
	subss	xmm0, DWORD PTR tv824[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 252  : 			lockedTarget->localData->range = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+44]
$LN28@ExecAG:

; 253  : 		}
; 254  : 		bestSoFar = -1e20f;

	movss	xmm0, DWORD PTR __real@e0ad78ec
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 255  : 	}
; 256  : 	else

	jmp	SHORT $LN27@ExecAG
$LN29@ExecAG:

; 257  : 	{
; 258  : 		bestSoFar = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _bestSoFar$[ebp], xmm0
$LN27@ExecAG:

; 259  : 	}
; 260  : 
; 261  : 	
; 262  : 	// Prepare our rotation from world space into heading north space including feet->screen scaleing
; 263  : 	mlSinCos( &yaw, platform->Yaw() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _yaw$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 264  : 	scaledCosYaw = yaw.cos * 2.0f * invRangeFT;

	movss	xmm0, DWORD PTR _yaw$[ebp+4]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+140]
	movss	DWORD PTR _scaledCosYaw$[ebp], xmm0

; 265  : 	scaledSinYaw = yaw.sin * 2.0f * invRangeFT;

	movss	xmm0, DWORD PTR _yaw$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+140]
	movss	DWORD PTR _scaledSinYaw$[ebp], xmm0

; 266  : 
; 267  : 
; 268  : 	// Consider each potential target for locking and cursor identification
; 269  : 	for (object = (FalconEntity*)objectWalker.GetFirst(); 

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetFirst@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetFirst
	mov	DWORD PTR _object$[ebp], eax

; 270  : 		 object; 

	jmp	SHORT $LN26@ExecAG
$LN25@ExecAG:

; 271  : 		 object = (FalconEntity*)objectWalker.GetNext()) {

	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	?GetNext@VuListIterator@@QAEPAVVuEntity@@XZ ; VuListIterator::GetNext
	mov	DWORD PTR _object$[ebp], eax
$LN26@ExecAG:
	cmp	DWORD PTR _object$[ebp], 0
	je	$LN24@ExecAG

; 272  : 
; 273  : 		// Skip things not on the ground
; 274  : 		if (!object->OnGround()) {

	mov	ecx, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+148]
	call	eax
	test	eax, eax
	jne	SHORT $LN23@ExecAG

; 275  : 			continue;

	jmp	SHORT $LN25@ExecAG
$LN23@ExecAG:

; 276  : 		}
; 277  : 
; 278  : 		// Figure the first bit of relative geometry we need
; 279  : 		dx = object->XPos() - platform->XPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv851[ebp]
	movss	xmm0, DWORD PTR tv851[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv1006[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv856[ebp]
	movss	xmm0, DWORD PTR tv1006[ebp]
	subss	xmm0, DWORD PTR tv856[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 280  : 		dy = object->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv860[ebp]
	movss	xmm0, DWORD PTR tv860[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1008[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv865[ebp]
	movss	xmm0, DWORD PTR tv1008[ebp]
	subss	xmm0, DWORD PTR tv865[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 281  : 		dz = object->ZPos() - platform->ZPos();

	mov	ecx, DWORD PTR _object$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv869[ebp]
	movss	xmm0, DWORD PTR tv869[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1010[ebp], xmm0
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv874[ebp]
	movss	xmm0, DWORD PTR tv1010[ebp]
	subss	xmm0, DWORD PTR tv874[ebp]
	movss	DWORD PTR _dz$[ebp], xmm0

; 282  : 		range = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR _range$[ebp]

; 283  : 
; 284  : 		// Skip the object if it is out of range or _really_ close
; 285  : 		if ((range > rangeFT) || (range < 500.0f)) {

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR [ecx+136]
	ja	SHORT $LN21@ExecAG
	movss	xmm0, DWORD PTR __real@43fa0000
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN22@ExecAG
$LN21@ExecAG:

; 286  : 			continue;

	jmp	$LN25@ExecAG
$LN22@ExecAG:

; 287  : 		}
; 288  : 
; 289  : 		// Decide where the target will fall on the display
; 290  : 		x = dy*scaledCosYaw - dx*scaledSinYaw;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _scaledCosYaw$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _scaledSinYaw$[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _x$[ebp], xmm0

; 291  : 		y = dy*scaledSinYaw + dx*scaledCosYaw - 1.0f;

	movss	xmm0, DWORD PTR _dy$[ebp]
	mulss	xmm0, DWORD PTR _scaledSinYaw$[ebp]
	movss	xmm1, DWORD PTR _dx$[ebp]
	mulss	xmm1, DWORD PTR _scaledCosYaw$[ebp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _y$[ebp], xmm0

; 292  : 
; 293  : 		// Skip the object if it is off screen
; 294  : 		if ((fabs(x) > 1.0f) || (fabs(y) > 1.0f)) {

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv892[ebp]
	movss	xmm0, DWORD PTR tv892[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	ja	SHORT $LN19@ExecAG
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv898[ebp]
	movss	xmm0, DWORD PTR tv898[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN20@ExecAG
$LN19@ExecAG:

; 295  : 			continue;

	jmp	$LN25@ExecAG
$LN20@ExecAG:

; 296  : 		}
; 297  : 
; 298  : 		// See if this target is under the cursors
; 299  : 		float d = CursorDelta(x,y);

	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CursorDelta@RadarSuperClass@@IAEMMM@Z	; RadarSuperClass::CursorDelta
	fstp	DWORD PTR _d$5[ebp]

; 300  : 		if (d < cursorDelta)

	movss	xmm0, DWORD PTR _cursorDelta$[ebp]
	comiss	xmm0, DWORD PTR _d$5[ebp]
	jbe	SHORT $LN18@ExecAG

; 301  : 		{
; 302  : 			cursorDelta = d;

	movss	xmm0, DWORD PTR _d$5[ebp]
	movss	DWORD PTR _cursorDelta$[ebp], xmm0

; 303  : 			cursorTgtID = object->Id();

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _object$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _cursorTgtID$[ebp], ecx
	mov	DWORD PTR _cursorTgtID$[ebp+4], edx
$LN18@ExecAG:

; 304  : 		}
; 305  : 
; 306  : 
; 307  : 		// We're done unless we need to lock something up
; 308  : 		if (!lockCmd) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jne	SHORT $LN17@ExecAG

; 309  : 			continue;

	jmp	$LN25@ExecAG
$LN17@ExecAG:

; 310  : 		}
; 311  : 
; 312  : 
; 313  : 		// Handle the lock command
; 314  : 		switch (lockCmd) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR tv447[ebp], edx
	mov	eax, DWORD PTR tv447[ebp]
	sub	eax, 2
	mov	DWORD PTR tv447[ebp], eax
	cmp	DWORD PTR tv447[ebp], 3
	ja	$LN2@ExecAG
	mov	ecx, DWORD PTR tv447[ebp]
	jmp	DWORD PTR $LN43@ExecAG[ecx*4]
$LN14@ExecAG:

; 315  : 
; 316  : 		  case BORE:
; 317  : 			// We've been asked to lock the target nearest our nose
; 318  : 			{
; 319  : 				float cosATA = (atx*dx + aty*dy + atz*dz) / (float)sqrt(range*range+dz*dz);

	movss	xmm0, DWORD PTR _atx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _aty$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _atz$[ebp]
	mulss	xmm1, DWORD PTR _dz$[ebp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR _range$[ebp]
	mulss	xmm1, DWORD PTR _range$[ebp]
	movss	xmm2, DWORD PTR _dz$[ebp]
	mulss	xmm2, DWORD PTR _dz$[ebp]
	addss	xmm1, xmm2
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv1012[ebp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	fstp	DWORD PTR tv926[ebp]
	movss	xmm0, DWORD PTR tv1012[ebp]
	divss	xmm0, DWORD PTR tv926[ebp]
	movss	DWORD PTR _cosATA$4[ebp], xmm0

; 320  : 				if (cosATA > bestSoFar) {

	movss	xmm0, DWORD PTR _cosATA$4[ebp]
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN13@ExecAG

; 321  : 					bestSoFar = cosATA;

	movss	xmm0, DWORD PTR _cosATA$4[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 322  : 					newLock = object;

	mov	edx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], edx

; 323  : 					wantLock = NOCHANGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0
$LN13@ExecAG:

; 324  : 				}
; 325  : 			}
; 326  : 			break;

	jmp	$LN15@ExecAG
$LN12@ExecAG:

; 327  : 
; 328  : 		  case CURSOR:
; 329  : 			// We've been asked to lock a specific target, so find which one...
; 330  : 			if (object->Id() == targetUnderCursor) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _object$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, eax
	call	??8VU_ID@@QBE_NABV0@@Z			; VU_ID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@ExecAG

; 331  : 				newLock = object;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], ecx

; 332  : 				wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0
$LN11@ExecAG:

; 333  : 			}
; 334  : 			break;

	jmp	$LN15@ExecAG
$LN10@ExecAG:

; 335  : 
; 336  : 		  case NEXT:
; 337  : 			if (range < bestSoFar) {

	movss	xmm0, DWORD PTR _bestSoFar$[ebp]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN8@ExecAG

; 338  : 				if ((!lockedTarget) || (range > lockedTarget->localData->range)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN7@ExecAG
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR [eax+44]
	jbe	SHORT $LN8@ExecAG
$LN7@ExecAG:

; 339  : 					bestSoFar = range;

	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 340  : 					newLock = object;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], ecx

; 341  : 					wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0
$LN8@ExecAG:

; 342  : 				}
; 343  : 			}
; 344  : 			break;

	jmp	SHORT $LN15@ExecAG
$LN6@ExecAG:

; 345  : 
; 346  : 		  case PREV:
; 347  : 			if (range > bestSoFar) {

	movss	xmm0, DWORD PTR _range$[ebp]
	comiss	xmm0, DWORD PTR _bestSoFar$[ebp]
	jbe	SHORT $LN4@ExecAG

; 348  : 				if ((!lockedTarget) || (range < lockedTarget->localData->range)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@ExecAG
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	movss	xmm0, DWORD PTR [eax+44]
	comiss	xmm0, DWORD PTR _range$[ebp]
	jbe	SHORT $LN4@ExecAG
$LN3@ExecAG:

; 349  : 					bestSoFar = range;

	movss	xmm0, DWORD PTR _range$[ebp]
	movss	DWORD PTR _bestSoFar$[ebp], xmm0

; 350  : 					newLock = object;

	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR _newLock$[ebp], ecx

; 351  : 					wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0
$LN4@ExecAG:
$LN2@ExecAG:
$LN15@ExecAG:

; 352  : 				}
; 353  : 			}
; 354  : 			break;
; 355  : 
; 356  : 		  default:
; 357  : 			ShiWarning( "Bad lock command" );
; 358  : 		}
; 359  : 	}	// End of our target list traversal loop

	jmp	$LN25@ExecAG
$LN24@ExecAG:

; 360  : 
; 361  : 
; 362  : 	/// Update our locked target
; 363  : 	SetSensorTargetHack( newLock );

	mov	eax, DWORD PTR _newLock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax

; 364  : 	if (lockedTarget)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN1@ExecAG

; 365  : 	{
; 366  : 		dx = lockedTarget->BaseData()->XPos() - platform->XPos();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv960[ebp]
	movss	xmm0, DWORD PTR tv960[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv1014[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv965[ebp]
	movss	xmm0, DWORD PTR tv1014[ebp]
	subss	xmm0, DWORD PTR tv965[ebp]
	movss	DWORD PTR _dx$[ebp], xmm0

; 367  : 		dy = lockedTarget->BaseData()->YPos() - platform->YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	mov	ecx, eax
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv971[ebp]
	movss	xmm0, DWORD PTR tv971[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv1016[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv976[ebp]
	movss	xmm0, DWORD PTR tv1016[ebp]
	subss	xmm0, DWORD PTR tv976[ebp]
	movss	DWORD PTR _dy$[ebp], xmm0

; 368  : 
; 369  : 		lockedTarget->localData->range = (float)sqrt( dx*dx + dy*dy );

	movss	xmm0, DWORD PTR _dx$[ebp]
	mulss	xmm0, DWORD PTR _dx$[ebp]
	movss	xmm1, DWORD PTR _dy$[ebp]
	mulss	xmm1, DWORD PTR _dy$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	fstp	DWORD PTR [edx+44]

; 370  : 		CalcRelValues(	platform, lockedTarget->BaseData(),
; 371  : 						&lockedTarget->localData->az, 
; 372  : 						&lockedTarget->localData->el, 
; 373  : 						&lockedTarget->localData->ata, 
; 374  : 						&lockedTarget->localData->ataFrom, 
; 375  : 						&lockedTarget->localData->droll );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 28					; 0000001cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	call	?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ; SimObjectType::BaseData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	?CalcRelValues@@YAXPAVSimBaseClass@@PAVFalconEntity@@PAM2222@Z ; CalcRelValues
	add	esp, 28					; 0000001cH
$LN1@ExecAG:

; 376  : 	}
; 377  : 
; 378  : 
; 379  : 	// Publish the ID of the target under the cursor
; 380  : 	targetUnderCursor = cursorTgtID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cursorTgtID$[ebp]
	mov	DWORD PTR [eax+36], ecx
	mov	edx, DWORD PTR _cursorTgtID$[ebp+4]
	mov	DWORD PTR [eax+40], edx

; 381  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	call	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN43@ExecAG:
	DD	$LN12@ExecAG
	DD	$LN14@ExecAG
	DD	$LN10@ExecAG
	DD	$LN6@ExecAG
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ExecAG@RadarSuperClass@@IAEXXZ$0:
	lea	ecx, DWORD PTR _objectWalker$[ebp]
	jmp	??1VuListIterator@@UAE@XZ		; VuListIterator::~VuListIterator
__ehhandler$?ExecAG@RadarSuperClass@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ExecAG@RadarSuperClass@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ExecAG@RadarSuperClass@@IAEXXZ ENDP			; RadarSuperClass::ExecAG
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv134 = -20						; size = 4
tv150 = -16						; size = 4
tv94 = -12						; size = 4
tv85 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?CursorDelta@RadarSuperClass@@IAEMMM@Z PROC		; RadarSuperClass::CursorDelta
; _this$ = ecx

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 754  : 	return (float)max( fabs(x - cursorX), fabs(y - cursorY) );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR [eax+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR tv94[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	subss	xmm1, DWORD PTR [ecx+156]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv150[ebp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv134[ebp]
	movss	xmm0, DWORD PTR tv150[ebp]
	comiss	xmm0, DWORD PTR tv134[ebp]
	jbe	SHORT $LN3@CursorDelt
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	subss	xmm0, DWORD PTR [edx+152]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv85[ebp]
	jmp	SHORT $LN4@CursorDelt
$LN3@CursorDelt:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	subss	xmm0, DWORD PTR [eax+156]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv85[ebp]
$LN4@CursorDelt:
	fld	DWORD PTR tv85[ebp]

; 755  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CursorDelta@RadarSuperClass@@IAEMMM@Z ENDP		; RadarSuperClass::CursorDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newRange$ = 8						; size = 4
?NewRange@RadarSuperClass@@IAEXM@Z PROC			; RadarSuperClass::NewRange
; _this$ = ecx

; 1095 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1096 : 	// Round the new range to the nearest integer
; 1097 : 	newRange = (float)floor( newRange + 0.5f );

	movss	xmm0, DWORD PTR _newRange$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?floor@@YAMM@Z				; floor
	add	esp, 4
	fstp	DWORD PTR _newRange$[ebp]

; 1098 : 
; 1099 : 	// Keep our various measures of range consistent
; 1100 : 	rangeFT = newRange*NM_TO_FT;

	movss	xmm0, DWORD PTR _newRange$[ebp]
	mulss	xmm0, DWORD PTR __real@45bde1b0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+136], xmm0

; 1101 : 	rangeNM = newRange;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newRange$[ebp]
	movss	DWORD PTR [ecx+132], xmm0

; 1102 : 	invRangeFT = 1.0f/rangeFT;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [edx+136]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+140], xmm0

; 1103 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?NewRange@RadarSuperClass@@IAEXM@Z ENDP			; RadarSuperClass::NewRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cmd$ = 8						; size = 4
?SetMode@RadarSuperClass@@UAEXW4RadarMode@RadarClass@@@Z PROC ; RadarSuperClass::SetMode
; _this$ = ecx

; 1169 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1170 :    wantMode = cmd;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cmd$[ebp]
	mov	DWORD PTR [eax+168], ecx

; 1171 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetMode@RadarSuperClass@@UAEXW4RadarMode@RadarClass@@@Z ENDP ; RadarSuperClass::SetMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?IsAG@RadarSuperClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?IsAG@RadarSuperClass@@UAEHXZ PROC			; RadarSuperClass::IsAG, COMDAT
; _this$ = ecx

; 41   : 	virtual int  IsAG (void)					{ return mode != AA ? TRUE : FALSE; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 18			; 00000012H
	je	SHORT $LN3@IsAG
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsAG
$LN3@IsAG:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsAG:
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAG@RadarSuperClass@@UAEHXZ ENDP			; RadarSuperClass::IsAG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_yawTrig$ = -36						; size = 8
tv178 = -28						; size = 4
tv184 = -24						; size = 4
tv169 = -20						; size = 4
tv182 = -16						; size = 4
_cx$ = -12						; size = 4
_cy$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetAGCenter@RadarSuperClass@@UAEXPAM0@Z PROC		; RadarSuperClass::GetAGCenter
; _this$ = ecx

; 1157 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1158 : 	mlTrig yawTrig;
; 1159 : 	mlSinCos( &yawTrig, platform->Yaw() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _yawTrig$[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 1160 : 	
; 1161 : 	float cx =  cursorX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _cx$[ebp], xmm0

; 1162 : 	float cy = (cursorY + 1.0f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cy$[ebp], xmm0

; 1163 : 	
; 1164 : 	*x = (cy*yawTrig.cos - cx*yawTrig.sin) * rangeFT/2.0f + platform->XPos();

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _yawTrig$[ebp+4]
	movss	xmm1, DWORD PTR _cx$[ebp]
	mulss	xmm1, DWORD PTR _yawTrig$[ebp]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+136]
	divss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv182[ebp], xmm0
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv169[ebp]
	movss	xmm0, DWORD PTR tv182[ebp]
	addss	xmm0, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1165 : 	*y = (cy*yawTrig.sin + cx*yawTrig.cos) * rangeFT/2.0f + platform->YPos();

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _yawTrig$[ebp]
	movss	xmm1, DWORD PTR _cx$[ebp]
	mulss	xmm1, DWORD PTR _yawTrig$[ebp+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+136]
	divss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	movss	DWORD PTR tv184[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv178[ebp]
	movss	xmm0, DWORD PTR tv184[ebp]
	addss	xmm0, DWORD PTR tv178[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1166 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetAGCenter@RadarSuperClass@@UAEXPAM0@Z ENDP		; RadarSuperClass::GetAGCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?GetCursorPosition@RadarSuperClass@@UAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xPos$ = 8						; size = 4
_yPos$ = 12						; size = 4
?GetCursorPosition@RadarSuperClass@@UAEXPAM0@Z PROC	; RadarSuperClass::GetCursorPosition, COMDAT
; _this$ = ecx

; 39   : 	virtual void GetCursorPosition (float* xPos, float* yPos) {*xPos = (cursorY + 1.0F)* rangeNM * 0.5F; *yPos = cursorX * rangeNM;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+132]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _xPos$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	mulss	xmm0, DWORD PTR [ecx+132]
	mov	edx, DWORD PTR _yPos$[ebp]
	movss	DWORD PTR [edx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?GetCursorPosition@RadarSuperClass@@UAEXPAM0@Z ENDP	; RadarSuperClass::GetCursorPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?GetRange@RadarSuperClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRange@RadarSuperClass@@UAEMXZ PROC			; RadarSuperClass::GetRange, COMDAT
; _this$ = ecx

; 38   : 	virtual float GetRange (void) {return rangeNM;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+132]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRange@RadarSuperClass@@UAEMXZ ENDP			; RadarSuperClass::GetRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?StepAGmode@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAGmode@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::StepAGmode, COMDAT
; _this$ = ecx

; 37   : 	virtual void StepAGmode( void )				{ if (mode == GM) wantMode = GMT; else wantMode = GM; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 14			; 0000000eH
	jne	SHORT $LN2@StepAGmode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 16			; 00000010H
	jmp	SHORT $LN3@StepAGmode
$LN2@StepAGmode:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], 14			; 0000000eH
$LN3@StepAGmode:
	mov	esp, ebp
	pop	ebp
	ret	0
?StepAGmode@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::StepAGmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?DefaultAGMode@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultAGMode@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::DefaultAGMode, COMDAT
; _this$ = ecx

; 36   : 	virtual void DefaultAGMode( void )			{ wantMode = GM; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], 14			; 0000000eH
	mov	esp, ebp
	pop	ebp
	ret	0
?DefaultAGMode@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::DefaultAGMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?SelectACM30x20@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACM30x20@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::SelectACM30x20, COMDAT
; _this$ = ecx

; 34   : 	virtual void SelectACM30x20( void )			{ if (mode == AA)  wantLock = AUTO; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 18			; 00000012H
	jne	SHORT $LN2@SelectACM3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 1
$LN2@SelectACM3:
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACM30x20@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::SelectACM30x20
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?SelectACMSlew@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACMSlew@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::SelectACMSlew, COMDAT
; _this$ = ecx

; 33   : 	virtual void SelectACMSlew( void )			{ if (mode == AA)  wantLock = AUTO; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 18			; 00000012H
	jne	SHORT $LN2@SelectACMS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 1
$LN2@SelectACMS:
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACMSlew@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::SelectACMSlew
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?SelectACMVertical@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACMVertical@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::SelectACMVertical, COMDAT
; _this$ = ecx

; 32   : 	virtual void SelectACMVertical( void )		{ if (mode == AA)  wantLock = AUTO; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 18			; 00000012H
	jne	SHORT $LN2@SelectACMV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 1
$LN2@SelectACMV:
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACMVertical@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::SelectACMVertical
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?SelectACMBore@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACMBore@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::SelectACMBore, COMDAT
; _this$ = ecx

; 31   : 	virtual void SelectACMBore( void )			{ wantLock = BORE; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 3
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACMBore@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::SelectACMBore
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearOverride@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::ClearOverride
; _this$ = ecx

; 1147 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1148 : 	if (prevRange > 0.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+144]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@ClearOverr

; 1149 : 		wantMode = prevMode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [ecx+168], eax

; 1150 : 		wantRange = prevRange;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	DWORD PTR [ecx+164], eax

; 1151 : 		wantLock = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 0

; 1152 : 		prevRange = -1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+144], xmm0
$LN1@ClearOverr:

; 1153 : 	}
; 1154 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearOverride@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::ClearOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetMRMOverride@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::SetMRMOverride
; _this$ = ecx

; 1134 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1135 : 	if (prevRange < 0.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+144]
	jbe	SHORT $LN1@SetMRMOver

; 1136 : 		prevMode = mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+88], eax

; 1137 : 		prevRange = rangeNM;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+144], eax
$LN1@SetMRMOver:

; 1138 : 	}
; 1139 : 
; 1140 : 	wantMode = AA;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 18			; 00000012H

; 1141 : 	wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0

; 1142 : 	wantRange = 20.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [eax+164], xmm0

; 1143 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetMRMOverride@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::SetMRMOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetSRMOverride@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::SetSRMOverride
; _this$ = ecx

; 1122 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1123 : 	if (prevRange < 0.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [eax+144]
	jbe	SHORT $LN1@SetSRMOver

; 1124 : 		prevMode = mode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+88], eax

; 1125 : 		prevRange = rangeNM;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	DWORD PTR [ecx+144], eax
$LN1@SetSRMOver:

; 1126 : 	}
; 1127 : 	wantMode = AA;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 18			; 00000012H

; 1128 : 	wantLock = AUTO;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 1

; 1129 : 	wantRange = 10.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [eax+164], xmm0

; 1130 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetSRMOverride@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::SetSRMOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAAmode@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::StepAAmode
; _this$ = ecx

; 1107 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1108 : 	if (wantMode == AA) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+168], 18			; 00000012H
	jne	SHORT $LN4@StepAAmode

; 1109 : 		if (wantLock == AUTO) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+172], 1
	jne	SHORT $LN3@StepAAmode

; 1110 : 			wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0

; 1111 : 		} else {

	jmp	SHORT $LN2@StepAAmode
$LN3@StepAAmode:

; 1112 : 			wantLock = AUTO;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 1
$LN2@StepAAmode:

; 1113 : 		}
; 1114 : 	} else {

	jmp	SHORT $LN5@StepAAmode
$LN4@StepAAmode:

; 1115 : 		wantMode = AA; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 18			; 00000012H

; 1116 : 		wantLock = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0
$LN5@StepAAmode:

; 1117 : 	}
; 1118 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StepAAmode@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::StepAAmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?DefaultAAMode@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultAAMode@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::DefaultAAMode, COMDAT
; _this$ = ecx

; 25   : 	virtual void DefaultAAMode( void )			{ wantMode = AA; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], 18			; 00000012H
	mov	esp, ebp
	pop	ebp
	ret	0
?DefaultAAMode@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::DefaultAAMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?PrevTarget@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PrevTarget@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::PrevTarget, COMDAT
; _this$ = ecx

; 23   : 	virtual void PrevTarget( void )				{ wantLock = PREV; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 5
	mov	esp, ebp
	pop	ebp
	ret	0
?PrevTarget@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::PrevTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?NextTarget@RadarSuperClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextTarget@RadarSuperClass@@UAEXXZ PROC		; RadarSuperClass::NextTarget, COMDAT
; _this$ = ecx

; 22   : 	virtual void NextTarget( void )				{ wantLock = NEXT; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 4
	mov	esp, ebp
	pop	ebp
	ret	0
?NextTarget@RadarSuperClass@@UAEXXZ ENDP		; RadarSuperClass::NextTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ?RangeStep@RadarSuperClass@@UAEXH@Z
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_cmd$ = 8						; size = 4
?RangeStep@RadarSuperClass@@UAEXH@Z PROC		; RadarSuperClass::RangeStep, COMDAT
; _this$ = ecx

; 20   : 	virtual void RangeStep( int cmd )			{ wantRange = (cmd>0) ? rangeNM*2.0f: rangeNM*0.5f; };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _cmd$[ebp], 0
	jle	SHORT $LN3@RangeStep
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv70[ebp], xmm0
	jmp	SHORT $LN4@RangeStep
$LN3@RangeStep:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+132]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv70[ebp], xmm0
$LN4@RangeStep:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv70[ebp]
	movss	DWORD PTR [edx+164], xmm0
	mov	esp, ebp
	pop	ebp
	ret	4
?RangeStep@RadarSuperClass@@UAEXH@Z ENDP		; RadarSuperClass::RangeStep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_whichButton$ = 8					; size = 4
_whichMFD$ = 12						; size = 4
?PushButton@RadarSuperClass@@UAEXHH@Z PROC		; RadarSuperClass::PushButton
; _this$ = ecx

; 1065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1066 : 	switch( whichButton ) {

	mov	eax, DWORD PTR _whichButton$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 18			; 00000012H
	ja	$LN11@PushButton
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN13@PushButton[edx]
	jmp	DWORD PTR $LN14@PushButton[eax*4]
$LN8@PushButton:

; 1067 : 	case 1:
; 1068 : 		if (mode == AA) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 18			; 00000012H
	jne	SHORT $LN7@PushButton

; 1069 : 			wantLock = AUTO;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 1
$LN7@PushButton:

; 1070 : 		}
; 1071 : 		break;

	jmp	SHORT $LN11@PushButton
$LN6@PushButton:

; 1072 : 	case 2:
; 1073 : 		StepAAmode();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	call	eax

; 1074 : 		break;

	jmp	SHORT $LN11@PushButton
$LN5@PushButton:

; 1075 : 	case 3:
; 1076 : 		StepAGmode();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+152]
	call	eax

; 1077 : 		break;

	jmp	SHORT $LN11@PushButton
$LN4@PushButton:

; 1078 : 	case 13:
; 1079 : 		MfdDisplay[whichMFD]->SetNewMode(MFDClass::MfdMenu);

	push	1
	mov	ecx, DWORD PTR _whichMFD$[ebp]
	mov	ecx, DWORD PTR ?MfdDisplay@@3PAPAVMFDClass@@A[ecx*4]
	call	?SetNewMode@MFDClass@@QAEXW4MfdMode@1@@Z ; MFDClass::SetNewMode

; 1080 : 		break;

	jmp	SHORT $LN11@PushButton
$LN3@PushButton:

; 1081 : 	case 14:
; 1082 : 		MFDSwapDisplays();

	call	?MFDSwapDisplays@@YAXXZ			; MFDSwapDisplays

; 1083 : 		break;

	jmp	SHORT $LN11@PushButton
$LN2@PushButton:

; 1084 : 	case 18:
; 1085 : 		RangeStep( -1 );

	push	-1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 1086 : 		break;

	jmp	SHORT $LN11@PushButton
$LN1@PushButton:

; 1087 : 	case 19:
; 1088 : 		RangeStep( 1 );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
$LN11@PushButton:

; 1089 : 		break;
; 1090 : 	}
; 1091 : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@PushButton:
	DD	$LN8@PushButton
	DD	$LN6@PushButton
	DD	$LN5@PushButton
	DD	$LN4@PushButton
	DD	$LN3@PushButton
	DD	$LN2@PushButton
	DD	$LN1@PushButton
	DD	$LN11@PushButton
$LN13@PushButton:
	DB	0
	DB	1
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	4
	DB	7
	DB	7
	DB	7
	DB	5
	DB	6
?PushButton@RadarSuperClass@@UAEXHH@Z ENDP		; RadarSuperClass::PushButton
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_activeDisplay$ = 8					; size = 4
?Display@RadarSuperClass@@UAEXPAVVirtualDisplay@@@Z PROC ; RadarSuperClass::Display
; _this$ = ecx

; 580  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 	// For now we have to do this silly thing to placate the SMS display routine --
; 582  : 	// we really should get ride of the display/privateDisplay dicotemy.
; 583  : 	display = activeDisplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _activeDisplay$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 584  : 
; 585  : 	// Quit now if we're turned off
; 586  : 	if (!isEmitting) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+76], 0
	jne	SHORT $LN3@Display

; 587  : 		return;

	jmp	SHORT $LN4@Display

; 588  : 		display->TextCenter( 0.0f, 0.0f, "RADAR OFF" );

	push	0
	push	OFFSET ??_C@_09LGBCLDAA@RADAR?5OFF?$AA@
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+72]
	call	edx
$LN3@Display:

; 589  : 	}
; 590  : 
; 591  : 	// Now draw the radar cursors and locked target data
; 592  : //	display->SetColor( 0x0000FF00 );
; 593  : 	DrawButtons();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawButtons@RadarSuperClass@@IAEXXZ	; RadarSuperClass::DrawButtons

; 594  : 	DrawCursor();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawCursor@RadarSuperClass@@IAEXXZ	; RadarSuperClass::DrawCursor

; 595  : 	DrawWaterline();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawWaterline@RadarSuperClass@@IAEXXZ	; RadarSuperClass::DrawWaterline

; 596  : 	DrawBullseyeData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBullseyeData@RadarSuperClass@@IAEXXZ ; RadarSuperClass::DrawBullseyeData

; 597  : 
; 598  : 	// Display the appropriate targets 
; 599  : 	if (mode == AA) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 18			; 00000012H
	jne	SHORT $LN2@Display

; 600  : 		DisplayAAReturns();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayAAReturns@RadarSuperClass@@IAEXXZ ; RadarSuperClass::DisplayAAReturns

; 601  : 	} else {

	jmp	SHORT $LN1@Display
$LN2@Display:

; 602  : 		DisplayAGReturns();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisplayAGReturns@RadarSuperClass@@IAEXXZ ; RadarSuperClass::DisplayAGReturns
$LN1@Display:
$LN4@Display:

; 603  : 	}
; 604  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Display@RadarSuperClass@@UAEXPAVVirtualDisplay@@@Z ENDP ; RadarSuperClass::Display
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv635 = -92						; size = 8
tv617 = -84						; size = 8
_yawTrig$1 = -76					; size = 8
_az$2 = -68						; size = 4
_el$3 = -64						; size = 4
tv640 = -60						; size = 4
tv672 = -56						; size = 4
_z$4 = -52						; size = 4
tv622 = -48						; size = 4
tv670 = -44						; size = 4
tv611 = -40						; size = 4
tv668 = -36						; size = 4
tv604 = -32						; size = 4
tv598 = -28						; size = 4
tv593 = -24						; size = 4
_cx$5 = -20						; size = 4
_cy$6 = -16						; size = 4
_y$7 = -12						; size = 4
_x$8 = -8						; size = 4
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Exec@RadarSuperClass@@UAEPAVSimObjectType@@PAV2@@Z PROC ; RadarSuperClass::Exec
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	// Validate our locked target
; 130  : 	CheckLockedTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax

; 131  : 
; 132  : 
; 133  : 	// Quit now if we're turned off
; 134  : 	if (!isEmitting)  {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], 0
	jne	SHORT $LN8@Exec

; 135  : 		if (lockedTarget) SendTrackMsg( lockedTarget, Track_Unlock );

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN7@Exec
	push	0
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+80]
	call	edx
$LN7@Exec:

; 136  : 		ClearSensorTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 137  : 		return NULL;

	xor	eax, eax
	jmp	$LN9@Exec
$LN8@Exec:

; 138  : 	}
; 139  : 
; 140  : 	// Run the appropriate target processing
; 141  : 	if (mode == AA) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 18			; 00000012H
	jne	SHORT $LN6@Exec

; 142  : 		ExecAA();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecAA@RadarSuperClass@@IAEXXZ		; RadarSuperClass::ExecAA

; 143  : 	} else {

	jmp	SHORT $LN5@Exec
$LN6@Exec:

; 144  : 		ExecAG();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecAG@RadarSuperClass@@IAEXXZ		; RadarSuperClass::ExecAG
$LN5@Exec:

; 145  : 	}
; 146  : 
; 147  : 	if (lockedTarget) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN4@Exec

; 148  : 		// Update our seeker center of attention
; 149  : 		SetSeekerPos( TargetAz(platform, lockedTarget), TargetEl(platform, lockedTarget) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?TargetEl@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetEl
	add	esp, 4
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?TargetAz@@YAMPAVFalconEntity@@PAVSimObjectType@@@Z ; TargetAz
	add	esp, 4
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 150  : 		platform->SetRdrAz( radarData->BeamHalfAngle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetRdrAz@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrAz

; 151  : 		platform->SetRdrEl( radarData->BeamHalfAngle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetRdrEl@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrEl

; 152  : 		platform->SetRdrCycleTime (0.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetRdrCycleTime@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetRdrCycleTime

; 153  : 		platform->SetRdrAzCenter( lockedTarget->localData->az );

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+12]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetRdrAzCenter@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetRdrAzCenter

; 154  : 		platform->SetRdrElCenter( lockedTarget->localData->el );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetRdrElCenter@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetRdrElCenter

; 155  : 
; 156  : 		// Tag the target as seen this frame
; 157  : 		lockedTarget->localData->rdrLastHit = SimLibElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR [edx+136], eax

; 158  : 		//lockedTarget->localData->sensorState[Radar] = SensorTrack; // JB 010210 // JB 010318 taken out
; 159  : 	} else {

	jmp	$LN3@Exec
$LN4@Exec:

; 160  : 		if (mode == AA) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 18			; 00000012H
	jne	SHORT $LN2@Exec

; 161  : 			SetSeekerPos( 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 162  : 		} else {

	jmp	$LN1@Exec
$LN2@Exec:

; 163  : 			// Compute cursor location in world coordinates, but with us at the origin
; 164  : 			mlTrig yawTrig;
; 165  : 			
; 166  : 			mlSinCos (&yawTrig, platform->Yaw());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _yawTrig$1[ebp]
	push	ecx
	call	?mlSinCos@@YAXPAUmlTrig@@M@Z		; mlSinCos
	add	esp, 8

; 167  : 			
; 168  : 			float cx =  cursorX;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	movss	DWORD PTR _cx$5[ebp], xmm0

; 169  : 			float cy = (cursorY + 1.0f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cy$6[ebp], xmm0

; 170  : 
; 171  : 			float x = (cy*yawTrig.cos - cx*yawTrig.sin) * rangeFT/2.0f;

	movss	xmm0, DWORD PTR _cy$6[ebp]
	mulss	xmm0, DWORD PTR _yawTrig$1[ebp+4]
	movss	xmm1, DWORD PTR _cx$5[ebp]
	mulss	xmm1, DWORD PTR _yawTrig$1[ebp]
	subss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+136]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _x$8[ebp], xmm0

; 172  : 			float y = (cy*yawTrig.sin + cx*yawTrig.cos) * rangeFT/2.0f;

	movss	xmm0, DWORD PTR _cy$6[ebp]
	mulss	xmm0, DWORD PTR _yawTrig$1[ebp]
	movss	xmm1, DWORD PTR _cx$5[ebp]
	mulss	xmm1, DWORD PTR _yawTrig$1[ebp+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+136]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _y$7[ebp], xmm0

; 173  : 			
; 174  : 			// Get our height above the ground height at the cursor location
; 175  : 			float z = platform->ZPos() - OTWDriver.GetGroundLevel( x+platform->XPos(), y+platform->YPos() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR tv593[ebp]
	movss	xmm0, DWORD PTR tv593[ebp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv668[ebp], xmm0
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR tv598[ebp]
	movss	xmm0, DWORD PTR tv598[ebp]
	addss	xmm0, DWORD PTR _y$7[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR tv604[ebp]
	movss	xmm0, DWORD PTR tv604[ebp]
	addss	xmm0, DWORD PTR _x$8[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv611[ebp]
	movss	xmm0, DWORD PTR tv668[ebp]
	subss	xmm0, DWORD PTR tv611[ebp]
	movss	DWORD PTR _z$4[ebp], xmm0

; 176  : #if 0
; 177  : 			// Transform from world space into body space
; 178  : 			float rx = platform->dmx[0][0]*x + platform->dmx[0][1]*y + platform->dmx[0][2]*z;
; 179  : 			float ry = platform->dmx[1][0]*x + platform->dmx[1][1]*y + platform->dmx[1][2]*z;
; 180  : 			float rz = platform->dmx[2][0]*x + platform->dmx[2][1]*y + platform->dmx[2][2]*z;
; 181  : 			
; 182  : 			// Calculate the body relative angles required for the sensor
; 183  : 			float az	= (float)atan2(ry,rx);
; 184  : 			float el	= (float)atan2(rz,sqrt(rx*rx+ry*ry));
; 185  : #else
; 186  : 			// Calculate the pseudo-body relative angles the sensor _really_ wants right now
; 187  : 			float az	= (float)atan2(y,x) - platform->Yaw();

	cvtss2sd xmm0, DWORD PTR _x$8[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _y$7[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv617[ebp]
	movsd	xmm0, QWORD PTR tv617[ebp]
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movss	DWORD PTR tv670[ebp], xmm0
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR tv622[ebp]
	movss	xmm0, DWORD PTR tv670[ebp]
	subss	xmm0, DWORD PTR tv622[ebp]
	movss	DWORD PTR _az$2[ebp], xmm0

; 188  : 			float el	= (float)atan2(z,sqrt(x*x+y*y)) - platform->Pitch();

	movss	xmm0, DWORD PTR _x$8[ebp]
	mulss	xmm0, DWORD PTR _x$8[ebp]
	movss	xmm1, DWORD PTR _y$7[ebp]
	mulss	xmm1, DWORD PTR _y$7[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	cvtss2sd xmm0, DWORD PTR _z$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv635[ebp]
	movsd	xmm0, QWORD PTR tv635[ebp]
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	movss	DWORD PTR tv672[ebp], xmm0
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR tv640[ebp]
	movss	xmm0, DWORD PTR tv672[ebp]
	subss	xmm0, DWORD PTR tv640[ebp]
	movss	DWORD PTR _el$3[ebp], xmm0

; 189  : #endif
; 190  : 			SetSeekerPos( az, el );

	push	ecx
	movss	xmm0, DWORD PTR _el$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _az$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
$LN1@Exec:

; 191  : 		}
; 192  : 		platform->SetRdrAz( radarData->ScanHalfAngle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetRdrAz@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrAz

; 193  : 		platform->SetRdrEl( radarData->ScanHalfAngle );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetRdrEl@SimBaseClass@@QAEXM@Z		; SimBaseClass::SetRdrEl

; 194  : 		platform->SetRdrCycleTime (3.0F);

	push	ecx
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?SetRdrCycleTime@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetRdrCycleTime

; 195  : 		platform->SetRdrAzCenter( 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetRdrAzCenter@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetRdrAzCenter

; 196  : 		platform->SetRdrElCenter( 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?SetRdrElCenter@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetRdrElCenter
$LN3@Exec:

; 197  : 	}
; 198  : 
; 199  : 	return lockedTarget;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
$LN9@Exec:

; 200  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Exec@RadarSuperClass@@UAEPAVSimObjectType@@PAV2@@Z ENDP ; RadarSuperClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
tv175 = -28						; size = 4
tv174 = -24						; size = 4
tv167 = -20						; size = 4
tv135 = -16						; size = 4
tv134 = -12						; size = 4
tv95 = -8						; size = 4
_this$ = -4						; size = 4
_cursorXCmd$ = 8					; size = 4
_cursorYCmd$ = 12					; size = 4
?UpdateState@RadarSuperClass@@UAEXHH@Z PROC		; RadarSuperClass::UpdateState
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 	// Handle any requests for cursor movement
; 97   : 	if (cursorXCmd) {

	cmp	DWORD PTR _cursorXCmd$[ebp], 0
	je	$LN11@UpdateStat

; 98   : 		if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == true) && (IO.AnalogIsUsed(AXIS_CURSOR_Y) == true))

	push	11					; 0000000bH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN10@UpdateStat
	push	12					; 0000000cH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	ecx, al
	cmp	ecx, 1
	jne	SHORT $LN10@UpdateStat

; 99   : 			cursorX += (cursorXCmd / 10000.0F) * CursorRate * SimLibMajorFrameTime;

	cvtsi2ss xmm0, DWORD PTR _cursorXCmd$[ebp]
	divss	xmm0, DWORD PTR __real@461c4000
	mulss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+152]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+152], xmm0

; 100  : 		else

	jmp	SHORT $LN9@UpdateStat
$LN10@UpdateStat:

; 101  : 			cursorX += cursorXCmd * CursorRate * SimLibMajorFrameTime;

	cvtsi2ss xmm0, DWORD PTR _cursorXCmd$[ebp]
	mulss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+152]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+152], xmm0
$LN9@UpdateStat:

; 102  : 
; 103  : 		cursorX = min ( max (cursorX, -0.9F), 0.9F);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	comiss	xmm0, DWORD PTR __real@bf666666
	jbe	SHORT $LN14@UpdateStat
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+152]
	movss	DWORD PTR tv95[ebp], xmm0
	jmp	SHORT $LN15@UpdateStat
$LN14@UpdateStat:
	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR tv95[ebp], xmm0
$LN15@UpdateStat:
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv95[ebp]
	jbe	SHORT $LN18@UpdateStat
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+152]
	comiss	xmm0, DWORD PTR __real@bf666666
	jbe	SHORT $LN16@UpdateStat
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+152]
	movss	DWORD PTR tv134[ebp], xmm0
	jmp	SHORT $LN17@UpdateStat
$LN16@UpdateStat:
	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR tv134[ebp], xmm0
$LN17@UpdateStat:
	movss	xmm0, DWORD PTR tv134[ebp]
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN19@UpdateStat
$LN18@UpdateStat:
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR tv135[ebp], xmm0
$LN19@UpdateStat:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv135[ebp]
	movss	DWORD PTR [ecx+152], xmm0
$LN11@UpdateStat:

; 104  : 	}
; 105  : 
; 106  : 	if (cursorYCmd) {

	cmp	DWORD PTR _cursorYCmd$[ebp], 0
	je	$LN8@UpdateStat

; 107  : 		if ((IO.AnalogIsUsed(AXIS_CURSOR_X) == true) && (IO.AnalogIsUsed(AXIS_CURSOR_Y) == true))

	push	11					; 0000000bH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN7@UpdateStat
	push	12					; 0000000cH
	mov	ecx, OFFSET ?IO@@3VSIMLIB_IO_CLASS@@A	; IO
	call	?AnalogIsUsed@SIMLIB_IO_CLASS@@QAE_NW4GameAxis_t@@@Z ; SIMLIB_IO_CLASS::AnalogIsUsed
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN7@UpdateStat

; 108  : 			cursorY += (cursorYCmd / 10000.0F) * CursorRate * SimLibMajorFrameTime;

	cvtsi2ss xmm0, DWORD PTR _cursorYCmd$[ebp]
	divss	xmm0, DWORD PTR __real@461c4000
	mulss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+156]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 109  : 		else

	jmp	SHORT $LN6@UpdateStat
$LN7@UpdateStat:

; 110  : 			cursorY += cursorYCmd * CursorRate * SimLibMajorFrameTime;

	cvtsi2ss xmm0, DWORD PTR _cursorYCmd$[ebp]
	mulss	xmm0, DWORD PTR ?CursorRate@RadarClass@@1MB
	mulss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+156]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+156], xmm0
$LN6@UpdateStat:

; 111  : 		cursorY = min ( max (cursorY, -0.9F), 0.9F);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	comiss	xmm0, DWORD PTR __real@bf666666
	jbe	SHORT $LN20@UpdateStat
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+156]
	movss	DWORD PTR tv167[ebp], xmm0
	jmp	SHORT $LN21@UpdateStat
$LN20@UpdateStat:
	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR tv167[ebp], xmm0
$LN21@UpdateStat:
	movss	xmm0, DWORD PTR __real@3f666666
	comiss	xmm0, DWORD PTR tv167[ebp]
	jbe	SHORT $LN24@UpdateStat
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR __real@bf666666
	jbe	SHORT $LN22@UpdateStat
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+156]
	movss	DWORD PTR tv174[ebp], xmm0
	jmp	SHORT $LN23@UpdateStat
$LN22@UpdateStat:
	movss	xmm0, DWORD PTR __real@bf666666
	movss	DWORD PTR tv174[ebp], xmm0
$LN23@UpdateStat:
	movss	xmm0, DWORD PTR tv174[ebp]
	movss	DWORD PTR tv175[ebp], xmm0
	jmp	SHORT $LN25@UpdateStat
$LN24@UpdateStat:
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR tv175[ebp], xmm0
$LN25@UpdateStat:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv175[ebp]
	movss	DWORD PTR [eax+156], xmm0
$LN8@UpdateStat:

; 112  : 	}
; 113  : 
; 114  : 	// Update our display range if the cursors get too close or too far
; 115  : 	if (cursorY >=  0.8f)	RangeStep( 1 );

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	comiss	xmm0, DWORD PTR __real@3f4ccccd
	jb	SHORT $LN5@UpdateStat
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx
$LN5@UpdateStat:

; 116  : 	if (cursorY <= -0.8f)	RangeStep( -1 );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf4ccccd
	comiss	xmm0, DWORD PTR [eax+156]
	jb	SHORT $LN4@UpdateStat
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
$LN4@UpdateStat:

; 117  : 	
; 118  : 	// Note if the cursors are in motion or not
; 119  : 	if ((cursorXCmd != 0) || (cursorYCmd != 0))

	cmp	DWORD PTR _cursorXCmd$[ebp], 0
	jne	SHORT $LN2@UpdateStat
	cmp	DWORD PTR _cursorYCmd$[ebp], 0
	je	SHORT $LN3@UpdateStat
$LN2@UpdateStat:

; 120  : 		flags |= CursorMoving;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	or	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], edx

; 121  : 	else

	jmp	SHORT $LN1@UpdateStat
$LN3@UpdateStat:

; 122  : 		flags &= ~CursorMoving;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], edx
$LN1@UpdateStat:

; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateState@RadarSuperClass@@UAEXHH@Z ENDP		; RadarSuperClass::UpdateState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newDesignate$ = 8					; size = 4
_newDrop$ = 12						; size = 4
?ExecModes@RadarSuperClass@@UAEXHH@Z PROC		; RadarSuperClass::ExecModes
; _this$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	// Change modes if such has been requested
; 42   : 	if (mode != wantMode) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+84]
	cmp	edx, DWORD PTR [ecx+168]
	je	SHORT $LN11@ExecModes

; 43   : 		mode = wantMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR [eax+84], edx

; 44   : 
; 45   : 		// Drop our current target, if any
; 46   : 		ClearSensorTarget();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 47   : 
; 48   : 		// Turn off auto-targeting unless we're in AA
; 49   : 		if (mode != AA) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 18			; 00000012H
	je	SHORT $LN11@ExecModes

; 50   : 			lockCmd = NOCHANGE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+148], 0

; 51   : 			wantLock = NOCHANGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0
$LN11@ExecModes:

; 52   : 		}
; 53   : 	}
; 54   : 
; 55   : 	// Change ranges if such has been requested
; 56   : 	if (wantRange != rangeNM) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+164]
	ucomiss	xmm0, DWORD PTR [edx+132]
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN9@ExecModes

; 57   : 		if ((wantRange >= 5.0f) && (wantRange <= 40.0f)) {

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+164]
	comiss	xmm0, DWORD PTR __real@40a00000
	jb	$LN9@ExecModes
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42200000
	comiss	xmm0, DWORD PTR [ecx+164]
	jb	$LN9@ExecModes

; 58   : 
; 59   : 			// Update the cursor position
; 60   : 			if (flags & CursorMoving) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	and	eax, 1
	je	SHORT $LN8@ExecModes

; 61   : 				// Keep same real world cursor position
; 62   : 				cursorY = cursorY + 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 63   : 				cursorY *= rangeNM / wantRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+132]
	divss	xmm0, DWORD PTR [ecx+164]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+156]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+156], xmm0

; 64   : 				cursorY = cursorY - 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+156]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+156], xmm0

; 65   : 			} else {

	jmp	SHORT $LN7@ExecModes
$LN8@ExecModes:

; 66   : 				// Recenter the cursors
; 67   : 				cursorX = 0.0F;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+152], xmm0

; 68   : 				cursorY = 0.5f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+156], xmm0
$LN7@ExecModes:

; 69   : 			}
; 70   : 			NewRange( wantRange );

	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+164]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NewRange@RadarSuperClass@@IAEXM@Z	; RadarSuperClass::NewRange
$LN9@ExecModes:

; 71   : 		}
; 72   : 	}
; 73   : 
; 74   : 	// Handle targeting commands
; 75   : 	if (newDrop) {

	cmp	DWORD PTR _newDrop$[ebp], 0
	je	SHORT $LN6@ExecModes

; 76   : 		// Drop our current lock
; 77   : 		if (lockedTarget) SendTrackMsg( lockedTarget, Track_Unlock );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN5@ExecModes
	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
$LN5@ExecModes:

; 78   : 		ClearSensorTarget();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 79   : 		lockCmd = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0
	jmp	SHORT $LN2@ExecModes
$LN6@ExecModes:

; 80   : 	} else if (newDesignate) {

	cmp	DWORD PTR _newDesignate$[ebp], 0
	je	SHORT $LN3@ExecModes

; 81   : 		// Designate a new target
; 82   : 		lockCmd = CURSOR;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+148], 2

; 83   : 	} else {

	jmp	SHORT $LN2@ExecModes
$LN3@ExecModes:

; 84   : 		lockCmd = wantLock;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR [eax+148], edx
$LN2@ExecModes:

; 85   : 	}
; 86   : 
; 87   : 	// If we're in auto targeting, keep trying to get a lock
; 88   : 	if (wantLock != AUTO) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 1
	je	SHORT $LN1@ExecModes

; 89   : 		wantLock = NOCHANGE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 0
$LN1@ExecModes:

; 90   : 	}
; 91   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ExecModes@RadarSuperClass@@UAEXHH@Z ENDP		; RadarSuperClass::ExecModes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radarsuper.h
;	COMDAT ??1RadarSuperClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RadarSuperClass@@UAE@XZ PROC				; RadarSuperClass::~RadarSuperClass, COMDAT
; _this$ = ecx

; 11   : 	virtual ~RadarSuperClass()					{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RadarSuperClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RadarClass@@UAE@XZ			; RadarClass::~RadarClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1RadarSuperClass@@UAE@XZ ENDP				; RadarSuperClass::~RadarSuperClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\radar\radarsuper.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_type$ = 8						; size = 4
_parentPlatform$ = 12					; size = 4
??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z PROC	; RadarSuperClass::RadarSuperClass
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _parentPlatform$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RadarClass@@QAE@HPAVSimMoverClass@@@Z ; RadarClass::RadarClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7RadarSuperClass@@6B@

; 27   : 	wantMode = mode = AA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 18			; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+168], 18			; 00000012H

; 28   : 	wantRange = 20.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	movss	DWORD PTR [edx+164], xmm0

; 29   : 	wantLock = lockCmd = NOCHANGE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 0

; 30   : 	prevRange = -1.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [edx+144], xmm0

; 31   : 
; 32   : 	NewRange( wantRange );

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+164]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NewRange@RadarSuperClass@@IAEXM@Z	; RadarSuperClass::NewRange

; 33   : 
; 34   : 	cursorX = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+152], xmm0

; 35   : 	cursorY = 0.5f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [edx+156], xmm0

; 36   : 	flags = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 0

; 37   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1RadarClass@@UAE@XZ			; RadarClass::~RadarClass
__ehhandler$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RadarSuperClass@@QAE@HPAVSimMoverClass@@@Z ENDP	; RadarSuperClass::RadarSuperClass
; Function compile flags: /Odtp
;	COMDAT ??_GRadarClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRadarClass@@UAEPAXI@Z PROC				; RadarClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RadarClass@@UAE@XZ			; RadarClass::~RadarClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRadarClass@@UAEPAXI@Z ENDP				; RadarClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?GetRadarModeR@RadarClass@@UAE?AW4RadarMode@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarModeR@RadarClass@@UAE?AW4RadarMode@1@XZ PROC	; RadarClass::GetRadarModeR, COMDAT
; _this$ = ecx

; 115  : 	virtual RadarMode	GetRadarModeR(void)	{return mode;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+84]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarModeR@RadarClass@@UAE?AW4RadarMode@1@XZ ENDP	; RadarClass::GetRadarModeR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?ClearModeDesiredCmd@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearModeDesiredCmd@RadarClass@@UAEXXZ PROC		; RadarClass::ClearModeDesiredCmd, COMDAT
; _this$ = ecx

; 105  : 	virtual void ClearModeDesiredCmd(void)	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearModeDesiredCmd@RadarClass@@UAEXXZ ENDP		; RadarClass::ClearModeDesiredCmd
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?GetBuggedData@RadarClass@@UAEHPAM000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dir$ = 16						; size = 4
_speed$ = 20						; size = 4
?GetBuggedData@RadarClass@@UAEHPAM000@Z PROC		; RadarClass::GetBuggedData, COMDAT
; _this$ = ecx

; 99   : 	virtual int GetBuggedData (float *x, float *y, float *dir, float *speed) { return FALSE; }; // info about bugged target

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetBuggedData@RadarClass@@UAEHPAM000@Z ENDP		; RadarClass::GetBuggedData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?GetCursorPosition@RadarClass@@UAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?GetCursorPosition@RadarClass@@UAEXPAM0@Z PROC		; RadarClass::GetCursorPosition, COMDAT
; _this$ = ecx

; 98   : 	virtual void  GetCursorPosition (float*, float*) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetCursorPosition@RadarClass@@UAEXPAM0@Z ENDP		; RadarClass::GetCursorPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?GetVolume@RadarClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVolume@RadarClass@@UAEMXZ PROC			; RadarClass::GetVolume, COMDAT
; _this$ = ecx

; 97   : 	virtual float GetVolume (void)				{ return 1.0472F; };	// Default to 60 degree cone

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@3f860aa6
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVolume@RadarClass@@UAEMXZ ENDP			; RadarClass::GetVolume
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?GetRange@RadarClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRange@RadarClass@@UAEMXZ PROC			; RadarClass::GetRange, COMDAT
; _this$ = ecx

; 96   : 	virtual float GetRange(void)				{ return 10.0F; };		// Display range in NM

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@41200000
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRange@RadarClass@@UAEMXZ ENDP			; RadarClass::GetRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?GetAGCenter@RadarClass@@UAEXPAM0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?GetAGCenter@RadarClass@@UAEXPAM0@Z PROC		; RadarClass::GetAGCenter, COMDAT
; _this$ = ecx

; 95   : 	virtual void  GetAGCenter (float* x, float* y)	{*x = 0; *y = 0;};	// Center of radar ground search

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?GetAGCenter@RadarClass@@UAEXPAM0@Z ENDP		; RadarClass::GetAGCenter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?IsAG@RadarClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAG@RadarClass@@UAEHXZ PROC				; RadarClass::IsAG, COMDAT
; _this$ = ecx

; 94   : 	virtual int   IsAG (void)					{ return FALSE; };		// Is radar in A/G mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAG@RadarClass@@UAEHXZ ENDP				; RadarClass::IsAG
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SetGroundPoint@RadarClass@@UAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetGroundPoint@RadarClass@@UAEXMMM@Z PROC		; RadarClass::SetGroundPoint, COMDAT
; _this$ = ecx

; 91   : 	virtual void SetGroundPoint (float, float, float) {};	//Set center of ground map radar

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetGroundPoint@RadarClass@@UAEXMMM@Z ENDP		; RadarClass::SetGroundPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?ToggleAGcursorZero@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAGcursorZero@RadarClass@@UAEXXZ PROC		; RadarClass::ToggleAGcursorZero, COMDAT
; _this$ = ecx

; 90   : 	virtual void ToggleAGcursorZero()			{};	// Remove pilot cursor offsets

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAGcursorZero@RadarClass@@UAEXXZ ENDP		; RadarClass::ToggleAGcursorZero
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SetAGSnowPlow@RadarClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetAGSnowPlow@RadarClass@@UAEXH@Z PROC			; RadarClass::SetAGSnowPlow, COMDAT
; _this$ = ecx

; 89   : 	virtual void SetAGSnowPlow(int )				{};	// Look a fixed distance ahead of the AC

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAGSnowPlow@RadarClass@@UAEXH@Z ENDP			; RadarClass::SetAGSnowPlow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?ToggleAGsnowPlow@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAGsnowPlow@RadarClass@@UAEXXZ PROC		; RadarClass::ToggleAGsnowPlow, COMDAT
; _this$ = ecx

; 88   : 	virtual void ToggleAGsnowPlow()				{};	// Look a fixed distance ahead of the AC

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAGsnowPlow@RadarClass@@UAEXXZ ENDP		; RadarClass::ToggleAGsnowPlow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?ToggleAGfreeze@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ToggleAGfreeze@RadarClass@@UAEXXZ PROC			; RadarClass::ToggleAGfreeze, COMDAT
; _this$ = ecx

; 87   : 	virtual void ToggleAGfreeze()				{};	// Freeze radar image

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToggleAGfreeze@RadarClass@@UAEXXZ ENDP			; RadarClass::ToggleAGfreeze
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SetMode@RadarClass@@UAEXW4RadarMode@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetMode@RadarClass@@UAEXW4RadarMode@1@@Z PROC		; RadarClass::SetMode, COMDAT
; _this$ = ecx

; 85   :    virtual void SetMode(RadarMode )       {};   // Select new mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMode@RadarClass@@UAEXW4RadarMode@1@@Z ENDP		; RadarClass::SetMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAGgain@RadarClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?StepAGgain@RadarClass@@UAEXH@Z PROC			; RadarClass::StepAGgain, COMDAT
; _this$ = ecx

; 84   : 	virtual void StepAGgain( int )			{};	// Select gain on GM radar

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?StepAGgain@RadarClass@@UAEXH@Z ENDP			; RadarClass::StepAGgain
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAGfov@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAGfov@RadarClass@@UAEXXZ PROC			; RadarClass::StepAGfov, COMDAT
; _this$ = ecx

; 83   : 	virtual void StepAGfov()					{};	// Select the degree of "zoom" on GM radar

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StepAGfov@RadarClass@@UAEXXZ ENDP			; RadarClass::StepAGfov
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAGmode@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAGmode@RadarClass@@UAEXXZ PROC			; RadarClass::StepAGmode, COMDAT
; _this$ = ecx

; 81   : 	virtual void StepAGmode( void )				{};	// Enter or step AA mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StepAGmode@RadarClass@@UAEXXZ ENDP			; RadarClass::StepAGmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?DefaultAGMode@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultAGMode@RadarClass@@UAEXXZ PROC			; RadarClass::DefaultAGMode, COMDAT
; _this$ = ecx

; 80   : 	virtual void DefaultAGMode( void )			{};	// If not in AG go to default AG mode, otherwise nothing

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DefaultAGMode@RadarClass@@UAEXXZ ENDP			; RadarClass::DefaultAGMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAAelvation@RadarClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?StepAAelvation@RadarClass@@UAEXH@Z PROC		; RadarClass::StepAAelvation, COMDAT
; _this$ = ecx

; 78   : 	virtual void StepAAelvation( int )		{};	// Adjust the lookup/lookdown angle of the radar (cmd=0 means center it)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?StepAAelvation@RadarClass@@UAEXH@Z ENDP		; RadarClass::StepAAelvation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAAscanWidth@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAAscanWidth@RadarClass@@UAEXXZ PROC		; RadarClass::StepAAscanWidth, COMDAT
; _this$ = ecx

; 77   : 	virtual void StepAAscanWidth()				{};	// radar scan volume.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StepAAscanWidth@RadarClass@@UAEXXZ ENDP		; RadarClass::StepAAscanWidth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAAscanHeight@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAAscanHeight@RadarClass@@UAEXXZ PROC		; RadarClass::StepAAscanHeight, COMDAT
; _this$ = ecx

; 76   : 	virtual void StepAAscanHeight()				{};	// Adjust the width and height of the

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StepAAscanHeight@RadarClass@@UAEXXZ ENDP		; RadarClass::StepAAscanHeight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SelectACM30x20@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACM30x20@RadarClass@@UAEXXZ PROC			; RadarClass::SelectACM30x20, COMDAT
; _this$ = ecx

; 74   : 	virtual void SelectACM30x20()				{};	//  when already in an ACM mode.)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACM30x20@RadarClass@@UAEXXZ ENDP			; RadarClass::SelectACM30x20
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SelectACMSlew@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACMSlew@RadarClass@@UAEXXZ PROC			; RadarClass::SelectACMSlew, COMDAT
; _this$ = ecx

; 73   : 	virtual void SelectACMSlew()				{};	// (in hard mode, at least, this only works

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACMSlew@RadarClass@@UAEXXZ ENDP			; RadarClass::SelectACMSlew
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SelectACMBore@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACMBore@RadarClass@@UAEXXZ PROC			; RadarClass::SelectACMBore, COMDAT
; _this$ = ecx

; 72   : 	virtual void SelectACMBore()				{};	// AA mode.

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACMBore@RadarClass@@UAEXXZ ENDP			; RadarClass::SelectACMBore
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SelectACMVertical@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SelectACMVertical@RadarClass@@UAEXXZ PROC		; RadarClass::SelectACMVertical, COMDAT
; _this$ = ecx

; 71   : 	virtual void SelectACMVertical()			{};	// Go directly to the named

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectACMVertical@RadarClass@@UAEXXZ ENDP		; RadarClass::SelectACMVertical
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?ClearOverride@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearOverride@RadarClass@@UAEXXZ PROC			; RadarClass::ClearOverride, COMDAT
; _this$ = ecx

; 69   : 	virtual void ClearOverride()				{};	// Return to previous mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearOverride@RadarClass@@UAEXXZ ENDP			; RadarClass::ClearOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SetMRMOverride@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetMRMOverride@RadarClass@@UAEXXZ PROC			; RadarClass::SetMRMOverride, COMDAT
; _this$ = ecx

; 68   : 	virtual void SetMRMOverride()				{};	// Temporary pop into medium range AA mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetMRMOverride@RadarClass@@UAEXXZ ENDP			; RadarClass::SetMRMOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?SetSRMOverride@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetSRMOverride@RadarClass@@UAEXXZ PROC			; RadarClass::SetSRMOverride, COMDAT
; _this$ = ecx

; 67   : 	virtual void SetSRMOverride()				{};	// Temporary pop into short range AA mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetSRMOverride@RadarClass@@UAEXXZ ENDP			; RadarClass::SetSRMOverride
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?StepAAmode@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StepAAmode@RadarClass@@UAEXXZ PROC			; RadarClass::StepAAmode, COMDAT
; _this$ = ecx

; 66   : 	virtual void StepAAmode( void )				{};	// Enter or step AA mode

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?StepAAmode@RadarClass@@UAEXXZ ENDP			; RadarClass::StepAAmode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?DefaultAAMode@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultAAMode@RadarClass@@UAEXXZ PROC			; RadarClass::DefaultAAMode, COMDAT
; _this$ = ecx

; 65   : 	virtual void DefaultAAMode( void )			{};	// If not in AA go to default AA mode, otherwise nothing

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DefaultAAMode@RadarClass@@UAEXXZ ENDP			; RadarClass::DefaultAAMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?PrevTarget@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PrevTarget@RadarClass@@UAEXXZ PROC			; RadarClass::PrevTarget, COMDAT
; _this$ = ecx

; 61   : 	virtual void PrevTarget( void )				{};	// Step to prev available target

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?PrevTarget@RadarClass@@UAEXXZ ENDP			; RadarClass::PrevTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?NextTarget@RadarClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NextTarget@RadarClass@@UAEXXZ PROC			; RadarClass::NextTarget, COMDAT
; _this$ = ecx

; 60   : 	virtual void NextTarget( void )				{};	// Step to next available target

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?NextTarget@RadarClass@@UAEXXZ ENDP			; RadarClass::NextTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ?RangeStep@RadarClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?RangeStep@RadarClass@@UAEXH@Z PROC			; RadarClass::RangeStep, COMDAT
; _this$ = ecx

; 58   : 	virtual void RangeStep( int )			{};	// Step up/down in range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?RangeStep@RadarClass@@UAEXH@Z ENDP			; RadarClass::RangeStep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\radar.h
;	COMDAT ??1RadarClass@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RadarClass@@UAE@XZ PROC				; RadarClass::~RadarClass, COMDAT
; _this$ = ecx

; 38   : 	virtual ~RadarClass()	{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RadarClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SensorClass@@UAE@XZ			; SensorClass::~SensorClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1RadarClass@@UAE@XZ ENDP				; RadarClass::~RadarClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::ZeroRotationAboutOrigin, COMDAT
; _this$ = ecx

; 144  :     void ZeroRotationAboutOrigin( void ) { dmatrix.rotation01 = dmatrix.rotation10 = 0.0f, dmatrix.rotation00 = dmatrix.rotation11 = 1.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+84], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+80], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+88], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+76], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?ZeroRotationAboutOrigin@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::ZeroRotationAboutOrigin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\display.h
;	COMDAT ?CenterOriginInViewport@VirtualDisplay@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ PROC	; VirtualDisplay::CenterOriginInViewport, COMDAT
; _this$ = ecx

; 143  : 	void CenterOriginInViewport( void )  { dmatrix.translationX = 0.0f; dmatrix.translationY = 0.0f; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+72], xmm0
	mov	esp, ebp
	pop	ebp
	ret	0
?CenterOriginInViewport@VirtualDisplay@@QAEXXZ ENDP	; VirtualDisplay::CenterOriginInViewport
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?TStance@TeamClass@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_team$ = 8						; size = 1
?TStance@TeamClass@@QAEHE@Z PROC			; TeamClass::TStance, COMDAT
; _this$ = ecx

; 317  : 	int TStance(Team team)						{ return stance[team]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _team$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2+580]
	mov	esp, ebp
	pop	ebp
	ret	4
?TStance@TeamClass@@QAEHE@Z ENDP			; TeamClass::TStance
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ PROC ; VuBin<FalconEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ENDP ; VuBin<FalconEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\object.h
;	COMDAT ?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ PROC	; SimObjectType::BaseData, COMDAT
; _this$ = ecx

; 92   : 	FalconEntity* BaseData(void) { return baseData.get(); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$VuBin@VFalconEntity@@@@QBEPAVFalconEntity@@XZ ; VuBin<FalconEntity>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?BaseData@SimObjectType@@QAEPAVFalconEntity@@XZ ENDP	; SimObjectType::BaseData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ PROC	; SensorClass::GetDisplay, COMDAT
; _this$ = ecx

; 55   : 	VirtualDisplay*	GetDisplay(void)                        { return privateDisplay; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisplay@SensorClass@@UAEPAVVirtualDisplay@@XZ ENDP	; SensorClass::GetDisplay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ PROC	; SensorClass::TargetUnderCursor, COMDAT
; _this$ = ecx

; 53   : 	virtual VU_ID TargetUnderCursor (void)                  { return targetUnderCursor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?TargetUnderCursor@SensorClass@@UAE?AVVU_ID@@XZ ENDP	; SensorClass::TargetUnderCursor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetSeekerPos@SensorClass@@UAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newAz$ = 8						; size = 4
_newEl$ = 12						; size = 4
?SetSeekerPos@SensorClass@@UAEXMM@Z PROC		; SensorClass::SetSeekerPos, COMDAT
; _this$ = ecx

; 51   : 	virtual void SetSeekerPos (float newAz, float newEl)	{ seekerAzCenter = newAz; seekerElCenter = newEl; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newAz$[ebp]
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _newEl$[ebp]
	movss	DWORD PTR [ecx+60], xmm0
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSeekerPos@SensorClass@@UAEXMM@Z ENDP		; SensorClass::SetSeekerPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?UpdateState@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?UpdateState@SensorClass@@UAEXHH@Z PROC			; SensorClass::UpdateState, COMDAT
; _this$ = ecx

; 50   : 	virtual void UpdateState(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateState@SensorClass@@UAEXHH@Z ENDP			; SensorClass::UpdateState
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?ExecModes@SensorClass@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?ExecModes@SensorClass@@UAEXHH@Z PROC			; SensorClass::ExecModes, COMDAT
; _this$ = ecx

; 49   : 	virtual void ExecModes(int, int)						{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?ExecModes@SensorClass@@UAEXHH@Z ENDP			; SensorClass::ExecModes
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?IsOn@SensorClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOn@SensorClass@@UAEHXZ PROC				; SensorClass::IsOn, COMDAT
; _this$ = ecx

; 40   : 	virtual BOOL			IsOn(void)				{ return isOn; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOn@SensorClass@@UAEHXZ ENDP				; SensorClass::IsOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\sensclas.h
;	COMDAT ?SetType@SensorClass@@UAEXW4SensorType@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_senstype$ = 8						; size = 4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z PROC	; SensorClass::SetType, COMDAT
; _this$ = ecx

; 37   : 	virtual void	SetType(SensorType senstype)		{ sensorType = senstype; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _senstype$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetType@SensorClass@@UAEXW4SensorType@1@@Z ENDP	; SensorClass::SetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\mfd.h
;	COMDAT ?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vd$ = 8						; size = 4
?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z PROC	; MfdDrawable::Display, COMDAT
; _this$ = ecx

; 138  :       virtual void Display (VirtualDisplay*vd) { display = vd; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vd$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Display@MfdDrawable@@UAEXPAVVirtualDisplay@@@Z ENDP	; MfdDrawable::Display
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?mlSinCos@@YAXPAUmlTrig@@M@Z
_TEXT	SEGMENT
_trig$ = 8						; size = 4
_angle$ = 12						; size = 4
?mlSinCos@@YAXPAUmlTrig@@M@Z PROC			; mlSinCos, COMDAT

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   : #if defined(_MSC_VER)
; 14   : 	__asm 
; 15   : 	{
; 16   : 		__asm	mov     ecx, trig;

	mov	ecx, DWORD PTR _trig$[ebp]

; 17   : 		__asm	fld     dword ptr [angle];

	fld	DWORD PTR _angle$[ebp]

; 18   : 		__asm	fsincos;

	fsincos

; 19   : 		__asm	fstp    dword ptr [ecx]trig.cos;

	fstp	DWORD PTR [ecx+4]

; 20   : 		__asm	fstp    dword ptr [ecx]trig.sin;

	fstp	DWORD PTR [ecx]

; 21   : 	}
; 22   : #else
; 23   : 	trig->sin = (Float32)sin(angle);
; 24   : 	trig->cos = (Float32)cos(angle);
; 25   : #endif
; 26   : }

	pop	ebp
	ret	0
?mlSinCos@@YAXPAUmlTrig@@M@Z ENDP			; mlSinCos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSim@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsSim@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsSim, COMDAT
; _this$ = ecx

; 103  : 		{return (falconType & FalconSimEntity) ? TRUE : FALSE;};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	and	ecx, 2
	je	SHORT $LN3@IsSim
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsSim
$LN3@IsSim:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsSim:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSim@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsSim
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ PROC	; VuEntity::EntityType, COMDAT
; _this$ = ecx

; 176  : 	VuEntityType *EntityType() const { return const_cast<VuEntityType*>(entityTypePtr_); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+112]
	mov	esp, ebp
	pop	ebp
	ret	0
?EntityType@VuEntity@@QBEPAUVuEntityType@@XZ ENDP	; VuEntity::EntityType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_ID@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -2						; size = 1
tv73 = -1						; size = 1
_rhs$ = 8						; size = 4
??8VU_ID@@QBE_NABV0@@Z PROC				; VU_ID::operator==, COMDAT
; _this$ = ecx

; 104  : 	bool operator == (const VU_ID &rhs) const { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		return (
; 106  : 			num_ == rhs.num_ ? 
; 107  : 			(creator_ == rhs.creator_ ? true : false) : 
; 108  : 			false
; 109  : 		); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@operator
	mov	eax, DWORD PTR _rhs$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8VU_SESSION_ID@@QBEHABV0@@Z		; VU_SESSION_ID::operator==
	test	eax, eax
	je	SHORT $LN3@operator
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	BYTE PTR tv73[ebp], 0
$LN4@operator:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR tv74[ebp], cl
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	BYTE PTR tv74[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv74[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_ID@@QBE_NABV0@@Z ENDP				; VU_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??8VU_SESSION_ID@@QBEHABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_rhs$ = 8						; size = 4
??8VU_SESSION_ID@@QBEHABV0@@Z PROC			; VU_SESSION_ID::operator==, COMDAT
; _this$ = ecx

; 55   : 	int operator == (const VU_SESSION_ID &rhs) const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return (value_ == rhs.value_ ? TRUE : FALSE); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv67[ebp]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
??8VU_SESSION_ID@@QBEHABV0@@Z ENDP			; VU_SESSION_ID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 519  :         {return (floorf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	pop	ebp
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 517  :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 416  :         {return ((float)floor((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
