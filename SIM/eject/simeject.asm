; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\eject\simeject.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?F16Mode1PhysicalData@@3UEP_PHYS_DATA@@A	; F16Mode1PhysicalData
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?_classType@EjectedPilotClass@@0HA		; EjectedPilotClass::_classType
PUBLIC	?_classTypeFound@EjectedPilotClass@@0HA		; EjectedPilotClass::_classTypeFound
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
_BSS	SEGMENT
?_classType@EjectedPilotClass@@0HA DD 01H DUP (?)	; EjectedPilotClass::_classType
?_classTypeFound@EjectedPilotClass@@0HA DD 01H DUP (?)	; EjectedPilotClass::_classTypeFound
_BSS	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
_DATA	SEGMENT
?F16Mode1PhysicalData@@3UEP_PHYS_DATA@@A DD 000000000r ; 0 ; F16Mode1PhysicalData
	DD	03ca402a9r			; 0.0200208
	DD	041a472b0r			; 20.556
	DD	03fc00000r			; 1.5
	DD	03ca402a9r			; 0.0200208
	DD	041a472b0r			; 20.556
	DD	03fc00000r			; 1.5
	DD	03ca402a9r			; 0.0200208
	DD	041a472b0r			; 20.556
	DD	040f00000r			; 7.5
	DD	03e57437fr			; 0.210218
	DD	040db4396r			; 6.852
	DD	0461c4000r			; 10000
	DD	04196c1b2r			; 18.8446
	DD	040db4396r			; 6.852
	DD	0461c4000r			; 10000
	DD	03c033554r			; 0.00800832
	DD	040db4396r			; 6.852
	ORG $+24
	DD	041a00000r			; 20
	DD	043616667r			; 225.4
	DD	03fc90fdbr			; 1.5708
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03c8efa34r			; 0.0174533
	DD	041180000r			; 9.5
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
_cloudPntList DD 0c5bcc000r			; -6040
	DD	0c4070000r			; -540
	DD	0c694ac00r			; -19030
	DD	0c6de1c00r			; -28430
	DD	0c4dfc000r			; -1790
	DD	046dcc800r			; 28260
	DD	047104200r			; 36930
	DD	045732000r			; 3890
	DD	04744ea00r			; 50410
	DD	045336000r			; 2870
	DD	0c4d48000r			; -1700
	DD	04736da00r			; 46810
	DD	0c763ee00r			; -58350
	DD	0c4d48000r			; -1700
	DD	0c64c1000r			; -13060
	DD	046f2bc00r			; 31070
	DD	045480000r			; 3200
	DD	0c7293800r			; -43320
	DD	0c7bdc400r			; -97160
	DD	0c4d48000r			; -1700
	DD	04576e000r			; 3950
	DD	0c792e000r			; -75200
	DD	0c4bb8000r			; -1500
	DD	047957400r			; 76520
	DD	04759ee00r			; 55790
	DD	0c5a1e000r			; -5180
	DD	0c7a24e00r			; -83100
	DD	0c7473800r			; -51000
	DD	0c3a00000r			; -320
	DD	0c7829100r			; -66850
	DD	047733400r			; 62260
	DD	0c3a00000r			; -320
	DD	047708200r			; 61570
	DD	0c7710e00r			; -61710
	DD	0c550c000r			; -3340
	DD	046fb7c00r			; 32190
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	0c5bcc000r			; -6040
	DD	0c7495400r			; -51540
	DD	0c694ac00r			; -19030
	DD	0c6a7a800r			; -21460
	DD	0c74b0200r			; -51970
	DD	0468e8000r			; 18240
	DD	047298800r			; 43400
	DD	0c74bf200r			; -52210
	DD	046bc7000r			; 24120
	DD	0c749f400r			; -51700
	DD	0c74bc000r			; -52160
	DD	046948400r			; 19010
	DD	0c605e800r			; -8570
	DD	0c7488200r			; -51330
	DD	0c74ca600r			; -52390
	DD	04731bc00r			; 45500
	DD	0c7509800r			; -53400
	DD	0c6725800r			; -15510
	DD	0c7719a00r			; -61850
	DD	0c7483200r			; -51250
	DD	047543a00r			; 54330
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	0c7a1ae00r			; -82780
	DD	0c749ea00r			; -51690
	DD	0c7bce300r			; -96710
	DD	0c6126800r			; -9370
	DD	0c7495400r			; -51540
	DD	043cd0000r			; 410
	DD	0c6a7a800r			; -21460
	DD	0c74a8a00r			; -51850
	DD	0473fae00r			; 49070
	DD	0457c8000r			; 4040
	DD	0c74e4a00r			; -52810
	DD	047871e00r			; 69180
	DD	0c6cbc000r			; -26080
	DD	0c74bc000r			; -52160
	DD	046984400r			; 19490
	DD	0452fa000r			; 2810
	DD	0c7488200r			; -51330
	DD	0c7081800r			; -34840
	DD	0c7719a00r			; -61850
	DD	0c749d600r			; -51670
	DD	047b17600r			; 90860
	DD	047553400r			; 54580
	DD	0c74ddc00r			; -52700
	DD	0479a5600r			; 79020
	DD	047a7e400r			; 85960
	DD	0c74c5600r			; -52310
	DD	0477d4800r			; 64840
	DD	0c7c44500r			; -100490
	DD	0c74d1400r			; -52500
	DD	047ac2600r			; 88140
	DD	047c04e00r			; 98460
	DD	0c74d1400r			; -52500
	DD	0c732a200r			; -45730
	DD	0467b9000r			; 16100
	DD	0c7487800r			; -51320
	DD	0c749a400r			; -51620
	DD	047636c00r			; 58220
	DD	0c74e0400r			; -52740
	DD	0c760b000r			; -57520
	DD	0c6126800r			; -9370
	DD	0c4070000r			; -540
	DD	043cd0000r			; 410
	DD	0c4e60000r			; -1840
	DD	0c6a30c00r			; -20870
	DD	0470a6600r			; 35430
	DD	0c7230c00r			; -41740
	DD	046924000r			; 18720
	DD	04797d600r			; 77740
	DD	0460d9000r			; 9060
	DD	0c616c800r			; -9650
	DD	0c7921300r			; -74790
_lightningPosList DD 041300000r			; 11
	DD	000000000r			; 0
	DD	040e00000r			; 7
	DD	040a00000r			; 5
	DD	041100000r			; 9
	DD	041000000r			; 8
	DD	041000000r			; 8
	DD	041600000r			; 14
	DD	041800000r			; 16
	DD	041a00000r			; 20
	DD	041200000r			; 10
	DD	041c00000r			; 24
	DD	041300000r			; 11
	DD	041d80000r			; 27
	DD	040c00000r			; 6
	DD	041f00000r			; 30
	DD	040e00000r			; 7
	DD	042040000r			; 33
	DD	03f800000r			; 1
	DD	042180000r			; 38
	DD	040a00000r			; 5
	DD	042280000r			; 42
	DD	040a00000r			; 5
	DD	042340000r			; 45
	DD	041400000r			; 12
	DD	042400000r			; 48
	DD	041a00000r			; 20
	DD	042500000r			; 52
	DD	041a00000r			; 20
	DD	042680000r			; 58
	DD	041b80000r			; 23
	DD	042740000r			; 61
	DD	041b00000r			; 22
	DD	0427c0000r			; 63
	DD	041b00000r			; 22
	DD	042840000r			; 66
	DD	041c80000r			; 25
	DD	042880000r			; 68
	DD	041a00000r			; 20
	DD	0428c0000r			; 70
	DD	041c00000r			; 24
	DD	042960000r			; 75
	DD	041c00000r			; 24
	DD	0429a0000r			; 77
	DD	041f80000r			; 31
	DD	042a00000r			; 80
	DD	041f80000r			; 31
	DD	042a60000r			; 83
	DD	042040000r			; 33
	DD	042b00000r			; 88
	DD	041f80000r			; 31
	DD	042b80000r			; 92
	DD	0423c0000r			; 47
	DD	042ce0000r			; 103
	DD	042380000r			; 46
	DD	042d20000r			; 105
	DD	0423c0000r			; 47
	DD	042d60000r			; 107
	DD	042340000r			; 45
	DD	042e00000r			; 112
	DD	042400000r			; 48
	DD	042e40000r			; 114
	DD	042380000r			; 46
	DD	042ea0000r			; 117
	DD	0422c0000r			; 43
	DD	043000000r			; 128
_DATA	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?Radius@DrawableObject@@QBEMXZ			; DrawableObject::Radius
PUBLIC	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z	; DrawableObject::GetPosition
PUBLIC	?Label@DrawableBSP@@QAEPADXZ			; DrawableBSP::Label
PUBLIC	?LabelColor@DrawableBSP@@QAEKXZ			; DrawableBSP::LabelColor
PUBLIC	??0VU_SESSION_ID@@QAE@K@Z			; VU_SESSION_ID::VU_SESSION_ID
PUBLIC	??0VU_ID@@QAE@XZ				; VU_ID::VU_ID
PUBLIC	?SetYPR@VuEntity@@QAEXMMM@Z			; VuEntity::SetYPR
PUBLIC	?SetYPRDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPRDelta
PUBLIC	?Id@VuEntity@@QBE?AVVU_ID@@XZ			; VuEntity::Id
PUBLIC	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::OwnerId
PUBLIC	?Type@VuEntity@@QBEGXZ				; VuEntity::Type
PUBLIC	?XPos@VuEntity@@QBEMXZ				; VuEntity::XPos
PUBLIC	?YPos@VuEntity@@QBEMXZ				; VuEntity::YPos
PUBLIC	?ZPos@VuEntity@@QBEMXZ				; VuEntity::ZPos
PUBLIC	?XDelta@VuEntity@@QBEMXZ			; VuEntity::XDelta
PUBLIC	?YDelta@VuEntity@@QBEMXZ			; VuEntity::YDelta
PUBLIC	?ZDelta@VuEntity@@QBEMXZ			; VuEntity::ZDelta
PUBLIC	?Yaw@VuEntity@@QBEMXZ				; VuEntity::Yaw
PUBLIC	?Pitch@VuEntity@@QBEMXZ				; VuEntity::Pitch
PUBLIC	?Roll@VuEntity@@QBEMXZ				; VuEntity::Roll
PUBLIC	?YawDelta@VuEntity@@QBEMXZ			; VuEntity::YawDelta
PUBLIC	?PitchDelta@VuEntity@@QBEMXZ			; VuEntity::PitchDelta
PUBLIC	?RollDelta@VuEntity@@QBEMXZ			; VuEntity::RollDelta
PUBLIC	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ		; VuBin<VuSessionEntity>::operator bool
PUBLIC	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
PUBLIC	?NoExec@VuMaster@@UAEXK@Z			; VuMaster::NoExec
PUBLIC	?Handle@VuMaster@@UAEHPAVVuEvent@@@Z		; VuMaster::Handle
PUBLIC	?Handle@VuMaster@@UAEHPAVVuFullUpdateEvent@@@Z	; VuMaster::Handle
PUBLIC	?Handle@VuMaster@@UAEHPAVVuPositionUpdateEvent@@@Z ; VuMaster::Handle
PUBLIC	?IsCampBase@FalconEntity@@UAE_NXZ		; FalconEntity::IsCampBase
PUBLIC	?SetTypeFlag@FalconEntity@@QAEXH@Z		; FalconEntity::SetTypeFlag
PUBLIC	?IsSetFalcFlag@FalconEntity@@QAEHH@Z		; FalconEntity::IsSetFalcFlag
PUBLIC	?IsPlayer@FalconEntity@@QAEHXZ			; FalconEntity::IsPlayer
PUBLIC	?GetRadarMode@FalconEntity@@UAEHXZ		; FalconEntity::GetRadarMode
PUBLIC	?SetRadarMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetRadarMode
PUBLIC	?ReturnToSearch@FalconEntity@@UAEXXZ		; FalconEntity::ReturnToSearch
PUBLIC	?SetSearchMode@FalconEntity@@UAEXE@Z		; FalconEntity::SetSearchMode
PUBLIC	?CombatClass@FalconEntity@@UAEHXZ		; FalconEntity::CombatClass
PUBLIC	?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z	; FalconEntity::HasEntity
PUBLIC	?IsMissile@FalconEntity@@UAEHXZ			; FalconEntity::IsMissile
PUBLIC	?IsLauncher@FalconEntity@@UAEHXZ		; FalconEntity::IsLauncher
PUBLIC	?IsBomb@FalconEntity@@UAEHXZ			; FalconEntity::IsBomb
PUBLIC	?IsGun@FalconEntity@@UAEHXZ			; FalconEntity::IsGun
PUBLIC	?IsVehicle@FalconEntity@@UAEHXZ			; FalconEntity::IsVehicle
PUBLIC	?IsStatic@FalconEntity@@UAEHXZ			; FalconEntity::IsStatic
PUBLIC	?IsHelicopter@FalconEntity@@UAEHXZ		; FalconEntity::IsHelicopter
PUBLIC	?IsAirplane@FalconEntity@@UAEHXZ		; FalconEntity::IsAirplane
PUBLIC	?IsGroundVehicle@FalconEntity@@UAEHXZ		; FalconEntity::IsGroundVehicle
PUBLIC	?IsShip@FalconEntity@@UAEHXZ			; FalconEntity::IsShip
PUBLIC	?IsWeapon@FalconEntity@@UAEHXZ			; FalconEntity::IsWeapon
PUBLIC	?IsDead@FalconEntity@@UAEHXZ			; FalconEntity::IsDead
PUBLIC	?IsEmitting@FalconEntity@@UAEHXZ		; FalconEntity::IsEmitting
PUBLIC	?IsUnit@FalconEntity@@UAEHXZ			; FalconEntity::IsUnit
PUBLIC	?IsObjective@FalconEntity@@UAEHXZ		; FalconEntity::IsObjective
PUBLIC	?IsBattalion@FalconEntity@@UAEHXZ		; FalconEntity::IsBattalion
PUBLIC	?IsBrigade@FalconEntity@@UAEHXZ			; FalconEntity::IsBrigade
PUBLIC	?IsFlight@FalconEntity@@UBEHXZ			; FalconEntity::IsFlight
PUBLIC	?IsSquadron@FalconEntity@@UAEHXZ		; FalconEntity::IsSquadron
PUBLIC	?IsPackage@FalconEntity@@UAEHXZ			; FalconEntity::IsPackage
PUBLIC	?IsTeam@FalconEntity@@UAEHXZ			; FalconEntity::IsTeam
PUBLIC	?IsTaskForce@FalconEntity@@UAEHXZ		; FalconEntity::IsTaskForce
PUBLIC	?GetRCSFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetRCSFactor
PUBLIC	?GetIRFactor@FalconEntity@@UAEMXZ		; FalconEntity::GetIRFactor
PUBLIC	?SetAQUIREtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetAQUIREtimer
PUBLIC	?SetSEARCHtimer@FalconEntity@@UAEXK@Z		; FalconEntity::SetSEARCHtimer
PUBLIC	?SetStepSearchMode@FalconEntity@@UAEXE@Z	; FalconEntity::SetStepSearchMode
PUBLIC	?GetAQUIREtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetAQUIREtimer
PUBLIC	?GetSEARCHtimer@FalconEntity@@UAEKXZ		; FalconEntity::GetSEARCHtimer
PUBLIC	?checked_atan2@@YANNN@Z				; checked_atan2
PUBLIC	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
PUBLIC	?JoinFlight@SimBaseClass@@UAEXXZ		; SimBaseClass::JoinFlight
PUBLIC	?IsSimBase@SimBaseClass@@UAE_NXZ		; SimBaseClass::IsSimBase
PUBLIC	?GetCountry@SimBaseClass@@UAEEXZ		; SimBaseClass::GetCountry
PUBLIC	?OnGround@SimBaseClass@@UAEHXZ			; SimBaseClass::OnGround
PUBLIC	?IsExploding@SimBaseClass@@UAEHXZ		; SimBaseClass::IsExploding
PUBLIC	?IsDead@SimBaseClass@@UBEHXZ			; SimBaseClass::IsDead
PUBLIC	?IsAwake@SimBaseClass@@QBEHXZ			; SimBaseClass::IsAwake
PUBLIC	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
PUBLIC	?MakePlayerVehicle@SimBaseClass@@UAEXXZ		; SimBaseClass::MakePlayerVehicle
PUBLIC	?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ	; SimBaseClass::MakeNonPlayerVehicle
PUBLIC	?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ	; SimBaseClass::ConfigurePlayerAvionics
PUBLIC	?SetVuPosition@SimBaseClass@@UAEXXZ		; SimBaseClass::SetVuPosition
PUBLIC	?Regenerate@SimBaseClass@@UAEXMMMM@Z		; SimBaseClass::Regenerate
PUBLIC	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
PUBLIC	?SetLead@SimMoverClass@@UAEXH@Z			; SimMoverClass::SetLead
PUBLIC	?WeaponKeepAlive@SimMoverClass@@UAEXXZ		; SimMoverClass::WeaponKeepAlive
PUBLIC	?SetSwitch@SimMoverClass@@QAEXHH@Z		; SimMoverClass::SetSwitch
PUBLIC	?IsMover@SimMoverClass@@UAEHXZ			; SimMoverClass::IsMover
PUBLIC	?IsDigital@AircraftClass@@QAEHXZ		; AircraftClass::IsDigital
PUBLIC	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
PUBLIC	??1InvalidBufferException@@UAE@XZ		; InvalidBufferException::~InvalidBufferException
PUBLIC	??0InvalidBufferException@@QAE@ABV0@@Z		; InvalidBufferException::InvalidBufferException
PUBLIC	??_GInvalidBufferException@@UAEPAXI@Z		; InvalidBufferException::`scalar deleting destructor'
PUBLIC	?memcpychk@@YAXPAXPAPAEIPAJ@Z			; memcpychk
PUBLIC	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
PUBLIC	?MotionOn@SimulationDriver@@QAEHXZ		; SimulationDriver::MotionOn
PUBLIC	??0?$Vector_3D@M@@QAE@XZ			; Vector_3D<float>::Vector_3D<float>
PUBLIC	??0?$Vector_3D@M@@QAE@MMM@Z			; Vector_3D<float>::Vector_3D<float>
PUBLIC	??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z		; Vector_3D<float>::Vector_3D<float>
PUBLIC	??1?$Vector_3D@M@@QAE@XZ			; Vector_3D<float>::~Vector_3D<float>
PUBLIC	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z		; Vector_3D<float>::operator=
PUBLIC	??A?$Vector_3D@M@@QAEAAMH@Z			; Vector_3D<float>::operator[]
PUBLIC	??A?$Vector_3D@M@@QBEABMH@Z			; Vector_3D<float>::operator[]
PUBLIC	??Y?$Vector_3D@M@@QAEXABV0@@Z			; Vector_3D<float>::operator+=
PUBLIC	??Z?$Vector_3D@M@@QAEXABV0@@Z			; Vector_3D<float>::operator-=
PUBLIC	??X?$Vector_3D@M@@QAEXM@Z			; Vector_3D<float>::operator*=
PUBLIC	??_0?$Vector_3D@M@@QAEXM@Z			; Vector_3D<float>::operator/=
PUBLIC	?MagnitudeSquared@?$Vector_3D@M@@QBEMXZ		; Vector_3D<float>::MagnitudeSquared
PUBLIC	?Magnitude@?$Vector_3D@M@@QBEMXZ		; Vector_3D<float>::Magnitude
PUBLIC	?OOMagnitude@?$Vector_3D@M@@QBEMXZ		; Vector_3D<float>::OOMagnitude
PUBLIC	?Normalize@?$Vector_3D@M@@QAEXXZ		; Vector_3D<float>::Normalize
PUBLIC	?Invert@?$Vector_3D@M@@QAEXXZ			; Vector_3D<float>::Invert
PUBLIC	?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z	; Vector_3D<float>::GetTpoint
PUBLIC	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation
PUBLIC	?Heading@?$Vector_3D@M@@QBEMXZ			; Vector_3D<float>::Heading
PUBLIC	??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z	; EP_MODEL_DATA::EP_MODEL_DATA
PUBLIC	??1EP_MODEL_DATA@@QAE@XZ			; EP_MODEL_DATA::~EP_MODEL_DATA
PUBLIC	??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z ; EjectedPilotClass::EjectedPilotClass
PUBLIC	??0EjectedPilotClass@@QAE@PAPAEPAJ@Z		; EjectedPilotClass::EjectedPilotClass
PUBLIC	??1EjectedPilotClass@@UAE@XZ			; EjectedPilotClass::~EjectedPilotClass
PUBLIC	?InitData@EjectedPilotClass@@UAEXXZ		; EjectedPilotClass::InitData
PUBLIC	?CleanupData@EjectedPilotClass@@UAEXXZ		; EjectedPilotClass::CleanupData
PUBLIC	?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z ; EjectedPilotClass::InitLocalData
PUBLIC	?CleanupLocalData@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::CleanupLocalData
PUBLIC	?Init@EjectedPilotClass@@UAEXPAVSimInitDataClass@@@Z ; EjectedPilotClass::Init
PUBLIC	?Exec@EjectedPilotClass@@UAEHXZ			; EjectedPilotClass::Exec
PUBLIC	?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z ; EjectedPilotClass::ApplyDamage
PUBLIC	?SetDead@EjectedPilotClass@@UAEXH@Z		; EjectedPilotClass::SetDead
PUBLIC	?Wake@EjectedPilotClass@@UAEHXZ			; EjectedPilotClass::Wake
PUBLIC	?Sleep@EjectedPilotClass@@UAEHXZ		; EjectedPilotClass::Sleep
PUBLIC	?IsEject@EjectedPilotClass@@UAEHXZ		; EjectedPilotClass::IsEject
PUBLIC	?Mass@EjectedPilotClass@@UAEMXZ			; EjectedPilotClass::Mass
PUBLIC	?SaveSize@EjectedPilotClass@@UAEHXZ		; EjectedPilotClass::SaveSize
PUBLIC	?Save@EjectedPilotClass@@UAEHPAPAE@Z		; EjectedPilotClass::Save
PUBLIC	?GetTransform@EjectedPilotClass@@UAEXQAY02M@Z	; EjectedPilotClass::GetTransform
PUBLIC	?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z	; EjectedPilotClass::GetFocusPoint
PUBLIC	?ClassType@EjectedPilotClass@@SAHXZ		; EjectedPilotClass::ClassType
PUBLIC	?GetParentAircraft@EjectedPilotClass@@QAEPAVAircraftClass@@XZ ; EjectedPilotClass::GetParentAircraft
PUBLIC	?IsPlayerPilot@EjectedPilotClass@@QBEHXZ	; EjectedPilotClass::IsPlayerPilot
PUBLIC	?IsDigiPilot@EjectedPilotClass@@QBEHXZ		; EjectedPilotClass::IsDigiPilot
PUBLIC	?StageEndTime@EjectedPilotClass@@ABEMH@Z	; EjectedPilotClass::StageEndTime
PUBLIC	?StageEndTime@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::StageEndTime
PUBLIC	?DragFactor@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::DragFactor
PUBLIC	?Mass@EjectedPilotClass@@ABEMXZ			; EjectedPilotClass::Mass
PUBLIC	?EjectSpeed@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::EjectSpeed
PUBLIC	?SeatThrust@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::SeatThrust
PUBLIC	?EjectAngle@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::EjectAngle
PUBLIC	?StartPitch@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::StartPitch
PUBLIC	?PitchDecay@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::PitchDecay
PUBLIC	?YawSpeed@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::YawSpeed
PUBLIC	?SeatOffset@EjectedPilotClass@@ABE?AV?$Vector_3D@M@@XZ ; EjectedPilotClass::SeatOffset
PUBLIC	?ModelCreateTime@EjectedPilotClass@@ABEMH@Z	; EjectedPilotClass::ModelCreateTime
PUBLIC	?SetMode@EjectedPilotClass@@AAEXH@Z		; EjectedPilotClass::SetMode
PUBLIC	?AdvanceTime@EjectedPilotClass@@AAEXXZ		; EjectedPilotClass::AdvanceTime
PUBLIC	?SetStage@EjectedPilotClass@@AAEXH@Z		; EjectedPilotClass::SetStage
PUBLIC	?AdvanceStage@EjectedPilotClass@@AAEHXZ		; EjectedPilotClass::AdvanceStage
PUBLIC	?SetModel@EjectedPilotClass@@AAEXH@Z		; EjectedPilotClass::SetModel
PUBLIC	?InitJettisonCanopy@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::InitJettisonCanopy
PUBLIC	?InitEjectSeat@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::InitEjectSeat
PUBLIC	?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::InitFreeFallWithSeat
PUBLIC	?InitChuteOpening@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::InitChuteOpening
PUBLIC	?InitFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitFreeFallWithOpenChute
PUBLIC	?InitFreeFallWithCollapsedChute@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitFreeFallWithCollapsedChute
PUBLIC	?InitSafeLanding@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::InitSafeLanding
PUBLIC	?InitCrashLanding@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::InitCrashLanding
PUBLIC	?RunJettisonCanopy@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunJettisonCanopy
PUBLIC	?RunEjectSeat@EjectedPilotClass@@AAEXXZ		; EjectedPilotClass::RunEjectSeat
PUBLIC	?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::RunFreeFallWithOpenChute
PUBLIC	?RunFreeFall@EjectedPilotClass@@AAEXXZ		; EjectedPilotClass::RunFreeFall
PUBLIC	?RunCrashLanding@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunCrashLanding
PUBLIC	?RunSafeLanding@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunSafeLanding
PUBLIC	?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::CalculateAndSetPositionAndOrientationInCockpit
PUBLIC	?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateThrustVector
PUBLIC	?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateDragVector
PUBLIC	?CalculateGravityVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateGravityVector
PUBLIC	?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateEjectionVector
PUBLIC	?FixOrientationRange@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::FixOrientationRange
PUBLIC	?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::ZeroPitchAndRoll
PUBLIC	?HasHitGround@EjectedPilotClass@@ABEHXZ		; EjectedPilotClass::HasHitGround
PUBLIC	?HitGround@EjectedPilotClass@@AAEXXZ		; EjectedPilotClass::HitGround
PUBLIC	?SpewDebugData@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::SpewDebugData
PUBLIC	??_GEjectedPilotClass@@UAEPAXI@Z		; EjectedPilotClass::`scalar deleting destructor'
PUBLIC	?IsRecording@ACMIRecorder@@QAEHXZ		; ACMIRecorder::IsRecording
PUBLIC	??0SimVuDriver@@QAE@PAVVuEntity@@@Z		; SimVuDriver::SimVuDriver
PUBLIC	??1SimVuDriver@@UAE@XZ				; SimVuDriver::~SimVuDriver
PUBLIC	??_GSimVuDriver@@UAEPAXI@Z			; SimVuDriver::`scalar deleting destructor'
PUBLIC	?GetColor@TeamClass@@QAEHXZ			; TeamClass::GetColor
PUBLIC	?GenerateFastRandom@@YAJXZ			; GenerateFastRandom
PUBLIC	?PRANDFloat@@YAMXZ				; PRANDFloat
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_7InvalidBufferException@@6B@			; InvalidBufferException::`vftable'
PUBLIC	??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ ; `string'
PUBLIC	__TI4?AVInvalidBufferException@@
PUBLIC	__CTA4?AVInvalidBufferException@@
PUBLIC	??_R0?AVInvalidBufferException@@@8		; InvalidBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7EjectedPilotClass@@6B@			; EjectedPilotClass::`vftable'
PUBLIC	??_7SimVuDriver@@6B@				; SimVuDriver::`vftable'
PUBLIC	?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA	; `GenerateFastRandom'::`2'::LastRandom
PUBLIC	?F16ModelData@@3PAUEP_MODEL_DATA@@A		; F16ModelData
PUBLIC	??_C@_06EMKKHMIC@?5Pilot?$AA@			; `string'
PUBLIC	??_C@_07MIIPMLFO@?5Crew?$CFd?$AA@		; `string'
PUBLIC	??_C@_05KPLJDLMD@Pilot?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4out_of_range@std@@6B@			; std::out_of_range::`RTTI Complete Object Locator'
PUBLIC	??_R3out_of_range@std@@8			; std::out_of_range::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2out_of_range@std@@8			; std::out_of_range::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@out_of_range@std@@8		; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@VuDeadReckon@@8			; VuDeadReckon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuDeadReckon@@@8			; VuDeadReckon `RTTI Type Descriptor'
PUBLIC	??_R3VuDeadReckon@@8				; VuDeadReckon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuDeadReckon@@8				; VuDeadReckon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuDriver@@8			; VuDriver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuDriver@@@8				; VuDriver `RTTI Type Descriptor'
PUBLIC	??_R3VuDriver@@8				; VuDriver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuDriver@@8				; VuDriver::`RTTI Base Class Array'
PUBLIC	??_R4EjectedPilotClass@@6B@			; EjectedPilotClass::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVEjectedPilotClass@@@8			; EjectedPilotClass `RTTI Type Descriptor'
PUBLIC	??_R3EjectedPilotClass@@8			; EjectedPilotClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2EjectedPilotClass@@8			; EjectedPilotClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@EjectedPilotClass@@8		; EjectedPilotClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SimMoverClass@@8			; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimMoverClass@@@8			; SimMoverClass `RTTI Type Descriptor'
PUBLIC	??_R3SimMoverClass@@8				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimMoverClass@@8				; SimMoverClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimBaseClass@@8			; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimBaseClass@@@8			; SimBaseClass `RTTI Type Descriptor'
PUBLIC	??_R3SimBaseClass@@8				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimBaseClass@@8				; SimBaseClass::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FalconEntity@@8			; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFalconEntity@@@8			; FalconEntity `RTTI Type Descriptor'
PUBLIC	??_R3FalconEntity@@8				; FalconEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FalconEntity@@8				; FalconEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VuEntity@@8			; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuEntity@@@8				; VuEntity `RTTI Type Descriptor'
PUBLIC	??_R3VuEntity@@8				; VuEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuEntity@@8				; VuEntity::`RTTI Base Class Array'
PUBLIC	??_R4InvalidBufferException@@6B@		; InvalidBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidBufferException@@8			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidBufferException@@8			; InvalidBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidBufferException@@8		; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SimVuDriver@@6B@				; SimVuDriver::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSimVuDriver@@@8				; SimVuDriver `RTTI Type Descriptor'
PUBLIC	??_R3SimVuDriver@@8				; SimVuDriver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimVuDriver@@8				; SimVuDriver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimVuDriver@@8			; SimVuDriver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@VuMaster@@8			; VuMaster::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVuMaster@@@8				; VuMaster `RTTI Type Descriptor'
PUBLIC	??_R3VuMaster@@8				; VuMaster::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VuMaster@@8				; VuMaster::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c8efa34
PUBLIC	__real@3f000000
PUBLIC	__real@3f060a92
PUBLIC	__real@3f800000
PUBLIC	__real@3fc00000
PUBLIC	__real@3ff921fb54442d18
PUBLIC	__real@40000000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40400000
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@41200000
PUBLIC	__real@41400000
PUBLIC	__real@41500000
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@41f40000
PUBLIC	__real@41f80000
PUBLIC	__real@4200b53f
PUBLIC	__real@4200cccd
PUBLIC	__real@428c0000
PUBLIC	__real@42c80000
PUBLIC	__real@461c4000
PUBLIC	__real@477fff00
PUBLIC	__real@49742400
PUBLIC	__real@8000000000000000
PUBLIC	__real@bf800000
PUBLIC	__real@bff921fb54442d18
PUBLIC	__real@c0c90fdb
PUBLIC	__real@c61c4000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_atan:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_rand:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strncat:PROC
EXTRN	_strncpy:PROC
EXTRN	_sprintf:PROC
EXTRN	??0exception@std@@QAE@ABQBD@Z:PROC		; std::exception::exception
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	??1exception@std@@UAE@XZ:PROC			; std::exception::~exception
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z:PROC ; DrawableBSP::DrawableBSP
EXTRN	?SetSwitchMask@DrawableBSP@@QAEXHK@Z:PROC	; DrawableBSP::SetSwitchMask
EXTRN	??0DrawableGuys@@QAE@HPAUTpoint@@MHM@Z:PROC	; DrawableGuys::DrawableGuys
EXTRN	?SetPosition@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetPosition
EXTRN	?SetDelta@VuEntity@@QAEXMMM@Z:PROC		; VuEntity::SetDelta
EXTRN	?IsLocal@VuEntity@@QBEEXZ:PROC			; VuEntity::IsLocal
EXTRN	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z:PROC ; VuEntity::SetDriver
EXTRN	?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z:PROC ; VuEntity::CustomCollisionCheck
EXTRN	?TerrainCollisionCheck@VuEntity@@UAEEXZ:PROC	; VuEntity::TerrainCollisionCheck
EXTRN	?IsTarget@VuEntity@@UAEEXZ:PROC			; VuEntity::IsTarget
EXTRN	?IsSession@VuEntity@@UAEEXZ:PROC		; VuEntity::IsSession
EXTRN	?IsGroup@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGroup
EXTRN	?IsGame@VuEntity@@UAEEXZ:PROC			; VuEntity::IsGame
EXTRN	?IsCamera@VuEntity@@UBEEXZ:PROC			; VuEntity::IsCamera
EXTRN	?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEvent@@@Z:PROC	; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z:PROC ; VuEntity::Handle
EXTRN	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z:PROC ; VuDatabase::Find
EXTRN	?ResetLastUpdateTime@VuDriver@@UAEXK@Z:PROC	; VuDriver::ResetLastUpdateTime
EXTRN	?ExecDR@VuDeadReckon@@UAEXK@Z:PROC		; VuDeadReckon::ExecDR
EXTRN	??0VuMaster@@QAE@PAVVuEntity@@@Z:PROC		; VuMaster::VuMaster
EXTRN	??1VuMaster@@UAE@XZ:PROC			; VuMaster::~VuMaster
EXTRN	?Exec@VuMaster@@UAEXK@Z:PROC			; VuMaster::Exec
EXTRN	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ:PROC ; VuSessionEntity::Game
EXTRN	?GetDomain@FalconEntity@@UAEEXZ:PROC		; FalconEntity::GetDomain
EXTRN	?GetRadarType@FalconEntity@@UAEHXZ:PROC		; FalconEntity::GetRadarType
EXTRN	?GetDamageModifiers@FalconEntity@@UAEPAEXZ:PROC	; FalconEntity::GetDamageModifiers
EXTRN	?FalconSendMessage@@YAXPAVVuMessage@@H@Z:PROC	; FalconSendMessage
EXTRN	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z:PROC ; MatrixMult
EXTRN	?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z:PROC ; F4SoundPos::UpdatePos
EXTRN	?Sfx@F4SoundPos@@QAEXHHMM@Z:PROC		; F4SoundPos::Sfx
EXTRN	?GetTeam@SimBaseClass@@UAEEXZ:PROC		; SimBaseClass::GetTeam
EXTRN	?GetCampID@SimBaseClass@@UAEFXZ:PROC		; SimBaseClass::GetCampID
EXTRN	?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ:PROC ; SimBaseClass::GetMovementType
EXTRN	?SetExploding@SimBaseClass@@QAEXH@Z:PROC	; SimBaseClass::SetExploding
EXTRN	?IsSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::IsSPJamming
EXTRN	?IsAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::IsAreaJamming
EXTRN	?HasSPJamming@SimBaseClass@@UAEHXZ:PROC		; SimBaseClass::HasSPJamming
EXTRN	?HasAreaJamming@SimBaseClass@@UAEHXZ:PROC	; SimBaseClass::HasAreaJamming
EXTRN	?SetFlag@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetFlag
EXTRN	?SetCountry@SimBaseClass@@QAEXH@Z:PROC		; SimBaseClass::SetCountry
EXTRN	?SetPowerOutput@SimBaseClass@@QAEXM@Z:PROC	; SimBaseClass::SetPowerOutput
EXTRN	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z:PROC ; SimBaseClass::ApplyDamage
EXTRN	?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z:PROC ; SimBaseClass::ApplyDeathMessage
EXTRN	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z:PROC ; OTWDriverClass::GetGroundLevel
EXTRN	?InsertObject@OTWDriverClass@@QAEXPAVDrawableObject@@@Z:PROC ; OTWDriverClass::InsertObject
EXTRN	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z:PROC ; OTWDriverClass::RemoveObject
EXTRN	?EndFlight@OTWDriverClass@@QAEXXZ:PROC		; OTWDriverClass::EndFlight
EXTRN	?StartEjectCam@OTWDriverClass@@QAEXPAVEjectedPilotClass@@H@Z:PROC ; OTWDriverClass::StartEjectCam
EXTRN	?GetP@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetP
EXTRN	?GetQ@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetQ
EXTRN	?GetR@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetR
EXTRN	?GetAlpha@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetAlpha
EXTRN	?GetBeta@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetBeta
EXTRN	?GetNx@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNx
EXTRN	?GetNy@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNy
EXTRN	?GetNz@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetNz
EXTRN	?GetGamma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetGamma
EXTRN	?GetSigma@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetSigma
EXTRN	?GetMu@SimMoverClass@@UAEMXZ:PROC		; SimMoverClass::GetMu
EXTRN	?GetVt@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetVt
EXTRN	?GetKias@SimMoverClass@@UBEMXZ:PROC		; SimMoverClass::GetKias
EXTRN	??0SimMoverClass@@QAE@H@Z:PROC			; SimMoverClass::SimMoverClass
EXTRN	??0SimMoverClass@@QAE@PAPAEPAJ@Z:PROC		; SimMoverClass::SimMoverClass
EXTRN	??1SimMoverClass@@UAE@XZ:PROC			; SimMoverClass::~SimMoverClass
EXTRN	?InitData@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::InitData
EXTRN	?CleanupData@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::CleanupData
EXTRN	?Init@SimMoverClass@@UAEXPAVSimInitDataClass@@@Z:PROC ; SimMoverClass::Init
EXTRN	?Exec@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::Exec
EXTRN	?SetDead@SimMoverClass@@UAEXH@Z:PROC		; SimMoverClass::SetDead
EXTRN	?Sleep@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::Sleep
EXTRN	?Wake@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::Wake
EXTRN	?MakeLocal@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeLocal
EXTRN	?MakeRemote@SimMoverClass@@UAEXXZ:PROC		; SimMoverClass::MakeRemote
EXTRN	?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z:PROC	; SimMoverClass::ChangeOwner
EXTRN	?SaveSize@SimMoverClass@@UAEHXZ:PROC		; SimMoverClass::SaveSize
EXTRN	?Save@SimMoverClass@@UAEHPAPAE@Z:PROC		; SimMoverClass::Save
EXTRN	?Save@SimMoverClass@@UAEHPAU_iobuf@@@Z:PROC	; SimMoverClass::Save
EXTRN	?Handle@SimMoverClass@@UAEHPAVVuFullUpdateEvent@@@Z:PROC ; SimMoverClass::Handle
EXTRN	?Handle@SimMoverClass@@UAEHPAVVuPositionUpdateEvent@@@Z:PROC ; SimMoverClass::Handle
EXTRN	?Handle@SimMoverClass@@UAEHPAVVuTransferEvent@@@Z:PROC ; SimMoverClass::Handle
EXTRN	?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z:PROC ; SimMoverClass::FeatureCollision
EXTRN	?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckLOS
EXTRN	?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z:PROC ; SimMoverClass::CheckCompositeLOS
EXTRN	?InsertionCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::InsertionCallback
EXTRN	?RemovalCallback@SimMoverClass@@UAEHXZ:PROC	; SimMoverClass::RemovalCallback
EXTRN	?GetClassID@@YAHEEEEEEEE@Z:PROC			; GetClassID
EXTRN	??_EInvalidBufferException@@UAEPAXI@Z:PROC	; InvalidBufferException::`vector deleting destructor'
EXTRN	??0FalconDeathMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconDeathMessage::FalconDeathMessage
EXTRN	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z:PROC ; WeatherClass::WindSpeedInFeetPerSecond
EXTRN	??_EEjectedPilotClass@@UAEPAXI@Z:PROC		; EjectedPilotClass::`vector deleting destructor'
EXTRN	?Add@ACMI_Hash@@QAEJVVU_ID@@PADJ@Z:PROC		; ACMI_Hash::Add
EXTRN	?GenPositionRecord@ACMIRecorder@@QAEXPAUACMIGenPositionRecord@@@Z:PROC ; ACMIRecorder::GenPositionRecord
EXTRN	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z:PROC ; ACMIRecorder::SwitchRecord
EXTRN	?ExecModel@SimVuDriver@@UAEEK@Z:PROC		; SimVuDriver::ExecModel
EXTRN	?SendScore@SimVuDriver@@UAE?AU?$pair@W4SCORE@VuMaster@@M@std@@PBVVuSessionEntity@@K@Z:PROC ; SimVuDriver::SendScore
EXTRN	??_ESimVuDriver@@UAEPAXI@Z:PROC			; SimVuDriver::`vector deleting destructor'
EXTRN	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z:PROC ; FalconRadioChatterMessage::FalconRadioChatterMessage
EXTRN	?SimToGrid@@YAFM@Z:PROC				; SimToGrid
EXTRN	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ:PROC ; FlightClass::GetFlightLeadCallNumber
EXTRN	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ:PROC	; FlightClass::GetFlightLeadVoiceID
EXTRN	?AnnounceTransfer@GameManagerClass@@QAEXPAVSimBaseClass@@0@Z:PROC ; GameManagerClass::AnnounceTransfer
EXTRN	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z:PROC ; CalcTransformMatrix
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?vuDatabase@@3PAVVuDatabase@@A:DWORD		; vuDatabase
EXTRN	?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A:DWORD ; vuLocalSessionEntity
EXTRN	?SimLibMajorFrameTime@@3MA:DWORD		; SimLibMajorFrameTime
EXTRN	?SimLibElapsedTime@@3KA:DWORD			; SimLibElapsedTime
EXTRN	?SimLibFrameCount@@3IA:DWORD			; SimLibFrameCount
EXTRN	?OTWDriver@@3VOTWDriverClass@@A:BYTE		; OTWDriver
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?realWeather@@3PAVRealWeather@@A:DWORD		; realWeather
EXTRN	?gACMIRec@@3VACMIRecorder@@A:BYTE		; gACMIRec
EXTRN	?ACMIIDTable@@3PAVACMI_Hash@@A:DWORD		; ACMIIDTable
EXTRN	?GameManager@@3VGameManagerClass@@A:BYTE	; GameManager
EXTRN	?TeamInfo@@3PAPAVTeamClass@@A:BYTE		; TeamInfo
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
;	COMDAT ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA
_BSS	SEGMENT
?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA DD 01H DUP (?) ; `GenerateFastRandom'::`2'::LastRandom
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?F16ModelData@@3PAUEP_MODEL_DATA@@A DB 078H DUP (?)	; F16ModelData
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c61c4000
CONST	SEGMENT
__real@c61c4000 DD 0c61c4000r			; -10000
CONST	ENDS
;	COMDAT __real@c0c90fdb
CONST	SEGMENT
__real@c0c90fdb DD 0c0c90fdbr			; -6.28319
CONST	ENDS
;	COMDAT __real@bff921fb54442d18
CONST	SEGMENT
__real@bff921fb54442d18 DQ 0bff921fb54442d18r	; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@8000000000000000
CONST	SEGMENT
__real@8000000000000000 DQ 08000000000000000r	; -0
CONST	ENDS
;	COMDAT __real@49742400
CONST	SEGMENT
__real@49742400 DD 049742400r			; 1e+006
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@4200cccd
CONST	SEGMENT
__real@4200cccd DD 04200cccdr			; 32.2
CONST	ENDS
;	COMDAT __real@4200b53f
CONST	SEGMENT
__real@4200b53f DD 04200b53fr			; 32.177
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41f40000
CONST	SEGMENT
__real@41f40000 DD 041f40000r			; 30.5
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fb54442d18
CONST	SEGMENT
__real@3ff921fb54442d18 DQ 03ff921fb54442d18r	; 1.5708
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa34
CONST	SEGMENT
__real@3c8efa34 DD 03c8efa34r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2VuMaster@@8
rdata$r	SEGMENT
??_R2VuMaster@@8 DD FLAT:??_R1A@?0A@EA@VuMaster@@8	; VuMaster::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuDeadReckon@@8
	DD	FLAT:??_R1A@?0A@EA@VuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R3VuMaster@@8
rdata$r	SEGMENT
??_R3VuMaster@@8 DD 00H					; VuMaster::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2VuMaster@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuMaster@@@8
_DATA	SEGMENT
??_R0?AVVuMaster@@@8 DD FLAT:??_7type_info@@6B@		; VuMaster `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuMaster@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuMaster@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuMaster@@8 DD FLAT:??_R0?AVVuMaster@@@8	; VuMaster::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuMaster@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SimVuDriver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimVuDriver@@8 DD FLAT:??_R0?AVSimVuDriver@@@8 ; SimVuDriver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimVuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R2SimVuDriver@@8
rdata$r	SEGMENT
??_R2SimVuDriver@@8 DD FLAT:??_R1A@?0A@EA@SimVuDriver@@8 ; SimVuDriver::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuMaster@@8
	DD	FLAT:??_R1A@?0A@EA@VuDeadReckon@@8
	DD	FLAT:??_R1A@?0A@EA@VuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R3SimVuDriver@@8
rdata$r	SEGMENT
??_R3SimVuDriver@@8 DD 00H				; SimVuDriver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimVuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimVuDriver@@@8
_DATA	SEGMENT
??_R0?AVSimVuDriver@@@8 DD FLAT:??_7type_info@@6B@	; SimVuDriver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimVuDriver@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SimVuDriver@@6B@
rdata$r	SEGMENT
??_R4SimVuDriver@@6B@ DD 00H				; SimVuDriver::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSimVuDriver@@@8
	DD	FLAT:??_R3SimVuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidBufferException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidBufferException@@8 DD FLAT:??_R0?AVInvalidBufferException@@@8 ; InvalidBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidBufferException@@8
rdata$r	SEGMENT
??_R2InvalidBufferException@@8 DD FLAT:??_R1A@?0A@EA@InvalidBufferException@@8 ; InvalidBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@out_of_range@std@@8
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidBufferException@@8
rdata$r	SEGMENT
??_R3InvalidBufferException@@8 DD 00H			; InvalidBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidBufferException@@6B@
rdata$r	SEGMENT
??_R4InvalidBufferException@@6B@ DD 00H			; InvalidBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	FLAT:??_R3InvalidBufferException@@8
rdata$r	ENDS
;	COMDAT ??_R2VuEntity@@8
rdata$r	SEGMENT
??_R2VuEntity@@8 DD FLAT:??_R1A@?0A@EA@VuEntity@@8	; VuEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuEntity@@8
rdata$r	SEGMENT
??_R3VuEntity@@8 DD 00H					; VuEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuEntity@@@8
_DATA	SEGMENT
??_R0?AVVuEntity@@@8 DD FLAT:??_7type_info@@6B@		; VuEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuEntity@@8 DD FLAT:??_R0?AVVuEntity@@@8	; VuEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2FalconEntity@@8
rdata$r	SEGMENT
??_R2FalconEntity@@8 DD FLAT:??_R1A@?0A@EA@FalconEntity@@8 ; FalconEntity::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3FalconEntity@@8
rdata$r	SEGMENT
??_R3FalconEntity@@8 DD 00H				; FalconEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFalconEntity@@@8
_DATA	SEGMENT
??_R0?AVFalconEntity@@@8 DD FLAT:??_7type_info@@6B@	; FalconEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFalconEntity@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FalconEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FalconEntity@@8 DD FLAT:??_R0?AVFalconEntity@@@8 ; FalconEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FalconEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2SimBaseClass@@8
rdata$r	SEGMENT
??_R2SimBaseClass@@8 DD FLAT:??_R1A@?0A@EA@SimBaseClass@@8 ; SimBaseClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimBaseClass@@8
rdata$r	SEGMENT
??_R3SimBaseClass@@8 DD 00H				; SimBaseClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimBaseClass@@@8
_DATA	SEGMENT
??_R0?AVSimBaseClass@@@8 DD FLAT:??_7type_info@@6B@	; SimBaseClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimBaseClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimBaseClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimBaseClass@@8 DD FLAT:??_R0?AVSimBaseClass@@@8 ; SimBaseClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimBaseClass@@8
rdata$r	ENDS
;	COMDAT ??_R2SimMoverClass@@8
rdata$r	SEGMENT
??_R2SimMoverClass@@8 DD FLAT:??_R1A@?0A@EA@SimMoverClass@@8 ; SimMoverClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3SimMoverClass@@8
rdata$r	SEGMENT
??_R3SimMoverClass@@8 DD 00H				; SimMoverClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimMoverClass@@@8
_DATA	SEGMENT
??_R0?AVSimMoverClass@@@8 DD FLAT:??_7type_info@@6B@	; SimMoverClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimMoverClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@SimMoverClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimMoverClass@@8 DD FLAT:??_R0?AVSimMoverClass@@@8 ; SimMoverClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimMoverClass@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@EjectedPilotClass@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@EjectedPilotClass@@8 DD FLAT:??_R0?AVEjectedPilotClass@@@8 ; EjectedPilotClass::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3EjectedPilotClass@@8
rdata$r	ENDS
;	COMDAT ??_R2EjectedPilotClass@@8
rdata$r	SEGMENT
??_R2EjectedPilotClass@@8 DD FLAT:??_R1A@?0A@EA@EjectedPilotClass@@8 ; EjectedPilotClass::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimMoverClass@@8
	DD	FLAT:??_R1A@?0A@EA@SimBaseClass@@8
	DD	FLAT:??_R1A@?0A@EA@FalconEntity@@8
	DD	FLAT:??_R1A@?0A@EA@VuEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3EjectedPilotClass@@8
rdata$r	SEGMENT
??_R3EjectedPilotClass@@8 DD 00H			; EjectedPilotClass::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2EjectedPilotClass@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEjectedPilotClass@@@8
_DATA	SEGMENT
??_R0?AVEjectedPilotClass@@@8 DD FLAT:??_7type_info@@6B@ ; EjectedPilotClass `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEjectedPilotClass@@', 00H
_DATA	ENDS
;	COMDAT ??_R4EjectedPilotClass@@6B@
rdata$r	SEGMENT
??_R4EjectedPilotClass@@6B@ DD 00H			; EjectedPilotClass::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVEjectedPilotClass@@@8
	DD	FLAT:??_R3EjectedPilotClass@@8
rdata$r	ENDS
;	COMDAT ??_R2VuDriver@@8
rdata$r	SEGMENT
??_R2VuDriver@@8 DD FLAT:??_R1A@?0A@EA@VuDriver@@8	; VuDriver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3VuDriver@@8
rdata$r	SEGMENT
??_R3VuDriver@@8 DD 00H					; VuDriver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuDriver@@@8
_DATA	SEGMENT
??_R0?AVVuDriver@@@8 DD FLAT:??_7type_info@@6B@		; VuDriver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuDriver@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuDriver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuDriver@@8 DD FLAT:??_R0?AVVuDriver@@@8	; VuDriver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R2VuDeadReckon@@8
rdata$r	SEGMENT
??_R2VuDeadReckon@@8 DD FLAT:??_R1A@?0A@EA@VuDeadReckon@@8 ; VuDeadReckon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VuDriver@@8
rdata$r	ENDS
;	COMDAT ??_R3VuDeadReckon@@8
rdata$r	SEGMENT
??_R3VuDeadReckon@@8 DD 00H				; VuDeadReckon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2VuDeadReckon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVVuDeadReckon@@@8
_DATA	SEGMENT
??_R0?AVVuDeadReckon@@@8 DD FLAT:??_7type_info@@6B@	; VuDeadReckon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVuDeadReckon@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@VuDeadReckon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VuDeadReckon@@8 DD FLAT:??_R0?AVVuDeadReckon@@@8 ; VuDeadReckon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VuDeadReckon@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@out_of_range@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@out_of_range@std@@8 DD FLAT:??_R0?AVout_of_range@std@@@8 ; std::out_of_range::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R2out_of_range@std@@8
rdata$r	SEGMENT
??_R2out_of_range@std@@8 DD FLAT:??_R1A@?0A@EA@out_of_range@std@@8 ; std::out_of_range::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3out_of_range@std@@8
rdata$r	SEGMENT
??_R3out_of_range@std@@8 DD 00H				; std::out_of_range::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R4out_of_range@std@@6B@
rdata$r	SEGMENT
??_R4out_of_range@std@@6B@ DD 00H			; std::out_of_range::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	FLAT:??_R3out_of_range@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPLJDLMD@Pilot?$AA@
CONST	SEGMENT
??_C@_05KPLJDLMD@Pilot?$AA@ DB 'Pilot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIIPMLFO@?5Crew?$CFd?$AA@
CONST	SEGMENT
??_C@_07MIIPMLFO@?5Crew?$CFd?$AA@ DB ' Crew%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMKKHMIC@?5Pilot?$AA@
CONST	SEGMENT
??_C@_06EMKKHMIC@?5Pilot?$AA@ DB ' Pilot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7SimVuDriver@@6B@
CONST	SEGMENT
??_7SimVuDriver@@6B@ DD FLAT:??_R4SimVuDriver@@6B@	; SimVuDriver::`vftable'
	DD	FLAT:??_ESimVuDriver@@UAEPAXI@Z
	DD	FLAT:?NoExec@VuMaster@@UAEXK@Z
	DD	FLAT:?Exec@VuMaster@@UAEXK@Z
	DD	FLAT:?Handle@VuMaster@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@VuMaster@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@VuMaster@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?ResetLastUpdateTime@VuDriver@@UAEXK@Z
	DD	FLAT:?ExecDR@VuDeadReckon@@UAEXK@Z
	DD	FLAT:?ExecModel@SimVuDriver@@UAEEK@Z
	DD	FLAT:?SendScore@SimVuDriver@@UAE?AU?$pair@W4SCORE@VuMaster@@M@std@@PBVVuSessionEntity@@K@Z
CONST	ENDS
;	COMDAT ??_7EjectedPilotClass@@6B@
CONST	SEGMENT
??_7EjectedPilotClass@@6B@ DD FLAT:??_R4EjectedPilotClass@@6B@ ; EjectedPilotClass::`vftable'
	DD	FLAT:?CustomCollisionCheck@VuEntity@@UAEEPAV1@M@Z
	DD	FLAT:?TerrainCollisionCheck@VuEntity@@UAEEXZ
	DD	FLAT:?IsTarget@VuEntity@@UAEEXZ
	DD	FLAT:?IsSession@VuEntity@@UAEEXZ
	DD	FLAT:?IsGroup@VuEntity@@UAEEXZ
	DD	FLAT:?IsGame@VuEntity@@UAEEXZ
	DD	FLAT:?IsCamera@VuEntity@@UBEEXZ
	DD	FLAT:?SaveSize@EjectedPilotClass@@UAEHXZ
	DD	FLAT:?Save@SimMoverClass@@UAEHPAU_iobuf@@@Z
	DD	FLAT:?Save@EjectedPilotClass@@UAEHPAPAE@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuSessionEvent@@@Z
	DD	FLAT:?Handle@SimMoverClass@@UAEHPAVVuTransferEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEntityCollisionEvent@@@Z
	DD	FLAT:?Handle@SimMoverClass@@UAEHPAVVuPositionUpdateEvent@@@Z
	DD	FLAT:?Handle@SimMoverClass@@UAEHPAVVuFullUpdateEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuEvent@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPullRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuPushRequest@@@Z
	DD	FLAT:?Handle@VuEntity@@UAEHPAVVuErrorMessage@@@Z
	DD	FLAT:??_EEjectedPilotClass@@UAEPAXI@Z
	DD	FLAT:?InsertionCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?RemovalCallback@SimMoverClass@@UAEHXZ
	DD	FLAT:?InitData@EjectedPilotClass@@UAEXXZ
	DD	FLAT:?CleanupData@EjectedPilotClass@@UAEXXZ
	DD	FLAT:?IsSimBase@SimBaseClass@@UAE_NXZ
	DD	FLAT:?IsCampBase@FalconEntity@@UAE_NXZ
	DD	FLAT:?Wake@EjectedPilotClass@@UAEHXZ
	DD	FLAT:?Sleep@EjectedPilotClass@@UAEHXZ
	DD	FLAT:?GetCampID@SimBaseClass@@UAEFXZ
	DD	FLAT:?GetTeam@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetCountry@SimBaseClass@@UAEEXZ
	DD	FLAT:?GetDomain@FalconEntity@@UAEEXZ
	DD	FLAT:?GetRadarMode@FalconEntity@@UAEHXZ
	DD	FLAT:?SetRadarMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?ReturnToSearch@FalconEntity@@UAEXXZ
	DD	FLAT:?SetSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?CombatClass@FalconEntity@@UAEHXZ
	DD	FLAT:?OnGround@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
	DD	FLAT:?IsMissile@FalconEntity@@UAEHXZ
	DD	FLAT:?IsLauncher@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBomb@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGun@FalconEntity@@UAEHXZ
	DD	FLAT:?IsMover@SimMoverClass@@UAEHXZ
	DD	FLAT:?IsVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsStatic@FalconEntity@@UAEHXZ
	DD	FLAT:?IsHelicopter@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEject@EjectedPilotClass@@UAEHXZ
	DD	FLAT:?IsAirplane@FalconEntity@@UAEHXZ
	DD	FLAT:?IsGroundVehicle@FalconEntity@@UAEHXZ
	DD	FLAT:?IsShip@FalconEntity@@UAEHXZ
	DD	FLAT:?IsWeapon@FalconEntity@@UAEHXZ
	DD	FLAT:?IsExploding@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsDead@FalconEntity@@UAEHXZ
	DD	FLAT:?IsEmitting@FalconEntity@@UAEHXZ
	DD	FLAT:?GetVt@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetKias@SimMoverClass@@UBEMXZ
	DD	FLAT:?GetMovementType@SimBaseClass@@UAE?AW4MoveType@@XZ
	DD	FLAT:?IsUnit@FalconEntity@@UAEHXZ
	DD	FLAT:?IsObjective@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBattalion@FalconEntity@@UAEHXZ
	DD	FLAT:?IsBrigade@FalconEntity@@UAEHXZ
	DD	FLAT:?IsFlight@FalconEntity@@UBEHXZ
	DD	FLAT:?IsSquadron@FalconEntity@@UAEHXZ
	DD	FLAT:?IsPackage@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTeam@FalconEntity@@UAEHXZ
	DD	FLAT:?IsTaskForce@FalconEntity@@UAEHXZ
	DD	FLAT:?IsSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?IsAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasSPJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?HasAreaJamming@SimBaseClass@@UAEHXZ
	DD	FLAT:?GetRCSFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetIRFactor@FalconEntity@@UAEMXZ
	DD	FLAT:?GetRadarType@FalconEntity@@UAEHXZ
	DD	FLAT:?GetDamageModifiers@FalconEntity@@UAEPAEXZ
	DD	FLAT:?SetAQUIREtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetSEARCHtimer@FalconEntity@@UAEXK@Z
	DD	FLAT:?SetStepSearchMode@FalconEntity@@UAEXE@Z
	DD	FLAT:?GetAQUIREtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?GetSEARCHtimer@FalconEntity@@UAEKXZ
	DD	FLAT:?WeaponKeepAlive@SimMoverClass@@UAEXXZ
	DD	FLAT:?JoinFlight@SimBaseClass@@UAEXXZ
	DD	FLAT:?ChangeOwner@SimMoverClass@@UAEXVVU_ID@@@Z
	DD	FLAT:?MakeLocal@SimMoverClass@@UAEXXZ
	DD	FLAT:?MakeRemote@SimMoverClass@@UAEXXZ
	DD	FLAT:?IsDead@SimBaseClass@@UBEHXZ
	DD	FLAT:?Init@EjectedPilotClass@@UAEXPAVSimInitDataClass@@@Z
	DD	FLAT:?Exec@EjectedPilotClass@@UAEHXZ
	DD	FLAT:?GetTransform@EjectedPilotClass@@UAEXQAY02M@Z
	DD	FLAT:?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	FLAT:?ApplyDeathMessage@SimBaseClass@@UAEXPAVFalconDeathMessage@@@Z
	DD	FLAT:?SetDead@EjectedPilotClass@@UAEXH@Z
	DD	FLAT:?MakePlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
	DD	FLAT:?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
	DD	FLAT:?SetVuPosition@SimBaseClass@@UAEXXZ
	DD	FLAT:?Regenerate@SimBaseClass@@UAEXMMMM@Z
	DD	FLAT:?Mass@EjectedPilotClass@@UAEMXZ
	DD	FLAT:?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z
	DD	FLAT:?GetP@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetQ@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetR@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetAlpha@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetBeta@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNx@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNy@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetNz@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetGamma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetSigma@SimMoverClass@@UAEMXZ
	DD	FLAT:?GetMu@SimMoverClass@@UAEMXZ
	DD	FLAT:?SetLead@SimMoverClass@@UAEXH@Z
	DD	FLAT:?FeatureCollision@SimMoverClass@@UAEPAVSimBaseClass@@M@Z
	DD	FLAT:?CheckLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
	DD	FLAT:?CheckCompositeLOS@SimMoverClass@@UAEHPAVSimObjectType@@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVInvalidBufferException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0InvalidBufferException@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidBufferException@@@8
_DATA	SEGMENT
??_R0?AVInvalidBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; InvalidBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidBufferException@@', 00H
_DATA	ENDS
;	COMDAT __CTA4?AVInvalidBufferException@@
xdata$x	SEGMENT
__CTA4?AVInvalidBufferException@@ DD 04H
	DD	FLAT:__CT??_R0?AVInvalidBufferException@@@8??0InvalidBufferException@@QAE@ABV0@@Z12
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVInvalidBufferException@@
xdata$x	SEGMENT
__TI4?AVInvalidBufferException@@ DD 00H
	DD	FLAT:??1InvalidBufferException@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVInvalidBufferException@@
xdata$x	ENDS
;	COMDAT ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
CONST	SEGMENT
??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@ DB 'Tryi'
	DB	'ng to write %lu bytes to %ld buffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7InvalidBufferException@@6B@
CONST	SEGMENT
??_7InvalidBufferException@@6B@ DD FLAT:??_R4InvalidBufferException@@6B@ ; InvalidBufferException::`vftable'
	DD	FLAT:??_EInvalidBufferException@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_R4out_of_range@std@@6B@ ; std::out_of_range::`vftable'
	DD	FLAT:??_Eout_of_range@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__EF16ModelData@@YAXXZ DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$??__EF16ModelData@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__EF16ModelData@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$3
	DD	05H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$4
	DD	06H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$5
	DD	08H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$6
	DD	09H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$7
	DD	08H
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$7
	DD	0bH
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$8
	DD	0cH
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$9
	DD	0bH
	DD	FLAT:__unwindfunclet$??__EF16ModelData@@YAXXZ$9
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$0
__unwindtable$?InitSafeLanding@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitSafeLanding@EjectedPilotClass@@AAEXXZ$0
__unwindtable$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ$0
__unwindtable$?AdvanceTime@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AdvanceTime@EjectedPilotClass@@AAEXXZ$0
__unwindtable$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ$1
__unwindtable$?RunFreeFall@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunFreeFall@EjectedPilotClass@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RunFreeFall@EjectedPilotClass@@AAEXXZ$1
__unwindtable$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ$1
__unwindtable$?InitEjectSeat@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitEjectSeat@EjectedPilotClass@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InitEjectSeat@EjectedPilotClass@@AAEXXZ$1
__unwindtable$?SetModel@EjectedPilotClass@@AAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetModel@EjectedPilotClass@@AAEXH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetModel@EjectedPilotClass@@AAEXH@Z$1
__unwindtable$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z$1
__unwindtable$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$2
__unwindtable$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$2
__unwindtable$?RunEjectSeat@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunEjectSeat@EjectedPilotClass@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RunEjectSeat@EjectedPilotClass@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?RunEjectSeat@EjectedPilotClass@@AAEXXZ$2
__unwindtable$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$3
__ehfuncinfo$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RunFreeFall@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RunFreeFall@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?RunEjectSeat@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?RunEjectSeat@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InitSafeLanding@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitSafeLanding@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InitEjectSeat@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitEjectSeat@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SetModel@EjectedPilotClass@@AAEXH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetModel@EjectedPilotClass@@AAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AdvanceTime@EjectedPilotClass@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AdvanceTime@EjectedPilotClass@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1EjectedPilotClass@@UAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1EjectedPilotClass@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$4
__unwindtable$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$4
__unwindtable$??1EjectedPilotClass@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$5
__unwindtable$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$5
__unwindtable$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z$0
__ehfuncinfo$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Heading@?$Vector_3D@M@@QBEMXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Heading@?$Vector_3D@M@@QBEMXZ$0
__ehfuncinfo$?Heading@?$Vector_3D@M@@QBEMXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Heading@?$Vector_3D@M@@QBEMXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0
__ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_F16ModelData$initializer$ DD FLAT:??__EF16ModelData@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FF16ModelData@@YAXXZ
text$yd	SEGMENT
??__FF16ModelData@@YAXXZ PROC				; `dynamic atexit destructor for 'F16ModelData'', COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET ??1EP_MODEL_DATA@@QAE@XZ		; EP_MODEL_DATA::~EP_MODEL_DATA
	push	5
	push	24					; 00000018H
	push	OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A ; F16ModelData
	call	??_M@YGXPAXIHP6EX0@Z@Z
	pop	ebp
	ret	0
??__FF16ModelData@@YAXXZ ENDP				; `dynamic atexit destructor for 'F16ModelData''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
;	COMDAT ??__EF16ModelData@@YAXXZ
text$yc	SEGMENT
tv174 = -116						; size = 4
tv180 = -112						; size = 4
tv79 = -108						; size = 4
tv182 = -104						; size = 4
tv171 = -100						; size = 4
tv139 = -96						; size = 4
tv65 = -92						; size = 4
tv93 = -88						; size = 4
tv168 = -84						; size = 4
tv177 = -80						; size = 4
$T2 = -76						; size = 12
$T3 = -64						; size = 12
$T4 = -52						; size = 12
$T5 = -40						; size = 12
$T6 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??__EF16ModelData@@YAXXZ PROC				; `dynamic initializer for 'F16ModelData'', COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__EF16ModelData@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 154  : 	// pilot and seat.
; 155  : 	EP_MODEL_DATA
; 156  : 	(
; 157  : 		// bsp model id.
; 158  : 		VIS_EJECT2,
; 159  : 		// physical stage that this model is created in.
; 160  : 		PD_EJECT_SEAT,
; 161  : 		// camera mode.
; 162  : 		1,
; 163  : 		// focus point offset in model space.
; 164  : 		EP_VECTOR
; 165  : 		(
; 166  : 			0.0,
; 167  : 			0.0,
; 168  : 			0.0
; 169  : 		)
; 170  : 	),

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv182[ebp], eax
	mov	eax, DWORD PTR tv182[ebp]
	mov	DWORD PTR tv168[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv168[ebp]
	push	ecx
	push	1
	push	1
	push	65					; 00000041H
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A ; F16ModelData
	call	??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z ; EP_MODEL_DATA::EP_MODEL_DATA
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 171  : 	// pilot and open chute.
; 172  : 	EP_MODEL_DATA
; 173  : 	(
; 174  : 		// bsp model id.
; 175  : 		VIS_EJECT1,
; 176  : 		// physical stage that this model is created in.
; 177  : 		PD_CHUTE_OPENING,
; 178  : 		// camera mode.
; 179  : 		1,
; 180  : 		// focus point offset in model space.
; 181  : 		EP_VECTOR
; 182  : 		(
; 183  : 			0.0,
; 184  : 			0.0,
; 185  : 			70.0
; 186  : 		)
; 187  : 	),

	push	ecx
	movss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv65[ebp], eax
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv171[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv171[ebp]
	push	eax
	push	1
	push	3
	push	64					; 00000040H
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+24
	call	??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z ; EP_MODEL_DATA::EP_MODEL_DATA
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 188  : 	// pilot and collapsed chute.
; 189  : 	EP_MODEL_DATA
; 190  : 	(
; 191  : 		// bsp model id.
; 192  : 		VIS_EJECT3,
; 193  : 		// physical stage that this model is created in.
; 194  : 		PD_FREE_FALL_WITH_COLLAPSED_CHUTE,
; 195  : 		// camera mode.
; 196  : 		1,
; 197  : 		// focus point offset in model space.
; 198  : 		EP_VECTOR
; 199  : 		(
; 200  : 			0.0,
; 201  : 			0.0,
; 202  : 			70.0
; 203  : 		)
; 204  : 	),

	push	ecx
	movss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv174[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR tv174[ebp]
	push	edx
	push	1
	push	5
	push	265					; 00000109H
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+48
	call	??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z ; EP_MODEL_DATA::EP_MODEL_DATA
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 205  : 	// Safe Landing
; 206  : 	EP_MODEL_DATA
; 207  : 	(
; 208  : 		// bsp model id.
; 209  : 		VIS_EJECT4,
; 210  : 		// physical stage that this model is created in.
; 211  : 		PD_SAFE_LANDING,
; 212  : 		// camera mode.
; 213  : 		2,
; 214  : 		// focus point offset in model space.
; 215  : 		EP_VECTOR
; 216  : 		(
; 217  : 			0.0,
; 218  : 			0.0,
; 219  : 			70.0
; 220  : 		)
; 221  : 	),

	push	ecx
	movss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv93[ebp], eax
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv177[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR tv177[ebp]
	push	ecx
	push	2
	push	6
	push	267					; 0000010bH
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+72
	call	??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z ; EP_MODEL_DATA::EP_MODEL_DATA
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 222  : 	// Crash Landing
; 223  : 	EP_MODEL_DATA
; 224  : 	(
; 225  : 		// bsp model id.
; 226  : 		VIS_EJECT5,
; 227  : 		// physical stage that this model is created in.
; 228  : 		PD_CRASH_LANDING,
; 229  : 		// camera mode.
; 230  : 		2,
; 231  : 		// focus point offset in model space.
; 232  : 		EP_VECTOR
; 233  : 		(
; 234  : 			0.0,
; 235  : 			0.0,
; 236  : 			70.0
; 237  : 		)
; 238  : 	)
; 239  : };

	push	ecx
	movss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv139[ebp], eax
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR tv180[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	eax, DWORD PTR tv180[ebp]
	push	eax
	push	2
	push	7
	push	299					; 0000012bH
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+96
	call	??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z ; EP_MODEL_DATA::EP_MODEL_DATA
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ??__FF16ModelData@@YAXXZ		; `dynamic atexit destructor for 'F16ModelData''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__EF16ModelData@@YAXXZ$0:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??__EF16ModelData@@YAXXZ$1:
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A ; F16ModelData
	jmp	??1EP_MODEL_DATA@@QAE@XZ		; EP_MODEL_DATA::~EP_MODEL_DATA
__unwindfunclet$??__EF16ModelData@@YAXXZ$2:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??__EF16ModelData@@YAXXZ$3:
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+24
	jmp	??1EP_MODEL_DATA@@QAE@XZ		; EP_MODEL_DATA::~EP_MODEL_DATA
__unwindfunclet$??__EF16ModelData@@YAXXZ$4:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??__EF16ModelData@@YAXXZ$5:
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+48
	jmp	??1EP_MODEL_DATA@@QAE@XZ		; EP_MODEL_DATA::~EP_MODEL_DATA
__unwindfunclet$??__EF16ModelData@@YAXXZ$6:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??__EF16ModelData@@YAXXZ$7:
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+72
	jmp	??1EP_MODEL_DATA@@QAE@XZ		; EP_MODEL_DATA::~EP_MODEL_DATA
__unwindfunclet$??__EF16ModelData@@YAXXZ$8:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??__EF16ModelData@@YAXXZ$9:
	mov	ecx, OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A+96
	jmp	??1EP_MODEL_DATA@@QAE@XZ		; EP_MODEL_DATA::~EP_MODEL_DATA
__ehhandler$??__EF16ModelData@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__EF16ModelData@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__EF16ModelData@@YAXXZ ENDP				; `dynamic initializer for 'F16ModelData''
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?PRANDFloat@@YAMXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_x$ = -4						; size = 4
?PRANDFloat@@YAMXZ PROC					; PRANDFloat, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 144  : //	return NRAND;
; 145  : 	float	x=	(float)(GenerateFastRandom()&0xffff);

	call	?GenerateFastRandom@@YAJXZ		; GenerateFastRandom
	and	eax, 65535				; 0000ffffH
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _x$[ebp], xmm0

; 146  : 	return( 1 - 2 * x / 65535.0f);

	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@477fff00
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movss	DWORD PTR tv75[ebp], xmm1
	fld	DWORD PTR tv75[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PRANDFloat@@YAMXZ ENDP					; PRANDFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\fakerand.h
;	COMDAT ?GenerateFastRandom@@YAJXZ
_TEXT	SEGMENT
_FastRandom$ = -4					; size = 4
?GenerateFastRandom@@YAJXZ PROC				; GenerateFastRandom, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 109  : 	static long LastRandom;
; 110  : 	long	FastRandom;														// The Random Variable
; 111  : 	_asm {	
; 112  : 			push	edx

	push	edx

; 113  : 			push	eax

	push	eax

; 114  : 			RDTSC

	rdtsc

; 115  : 			add	DWORD PTR FastRandom,edx

	add	DWORD PTR _FastRandom$[ebp], edx

; 116  : 			xor	DWORD PTR FastRandom,eax

	xor	DWORD PTR _FastRandom$[ebp], eax

; 117  : 			mov	eax, DWORD PTR LastRandom

	mov	eax, DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA ; `GenerateFastRandom'::`2'::LastRandom

; 118  : 			add	DWORD PTR FastRandom,eax

	add	DWORD PTR _FastRandom$[ebp], eax

; 119  : 			add	DWORD PTR LastRandom,edx

	add	DWORD PTR ?LastRandom@?1??GenerateFastRandom@@YAJXZ@4JA, edx ; `GenerateFastRandom'::`2'::LastRandom

; 120  : 			pop	eax

	pop	eax

; 121  : 			pop	edx

	pop	edx

; 122  : 	}
; 123  : 	return(FastRandom);

	mov	eax, DWORD PTR _FastRandom$[ebp]

; 124  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateFastRandom@@YAJXZ ENDP				; GenerateFastRandom
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\campaign\include\team.h
;	COMDAT ?GetColor@TeamClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColor@TeamClass@@QAEHXZ PROC			; TeamClass::GetColor, COMDAT
; _this$ = ecx

; 329  : 	int GetColor (void)							{ return (int) teamColor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+889]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetColor@TeamClass@@QAEHXZ ENDP			; TeamClass::GetColor
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSimVuDriver@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSimVuDriver@@UAEPAXI@Z PROC				; SimVuDriver::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimVuDriver@@UAE@XZ			; SimVuDriver::~SimVuDriver
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSimVuDriver@@UAEPAXI@Z ENDP				; SimVuDriver::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simvudrv.h
;	COMDAT ??1SimVuDriver@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SimVuDriver@@UAE@XZ PROC				; SimVuDriver::~SimVuDriver, COMDAT
; _this$ = ecx

; 45   : 	~SimVuDriver (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SimVuDriver@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VuMaster@@UAE@XZ			; VuMaster::~VuMaster
	mov	esp, ebp
	pop	ebp
	ret	0
??1SimVuDriver@@UAE@XZ ENDP				; SimVuDriver::~SimVuDriver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simvudrv.h
;	COMDAT ??0SimVuDriver@@QAE@PAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_theEnt$ = 8						; size = 4
??0SimVuDriver@@QAE@PAVVuEntity@@@Z PROC		; SimVuDriver::SimVuDriver, COMDAT
; _this$ = ecx

; 44   : 	SimVuDriver (VuEntity* theEnt) : VuMaster (theEnt) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _theEnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0VuMaster@@QAE@PAVVuEntity@@@Z	; VuMaster::VuMaster
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7SimVuDriver@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0SimVuDriver@@QAE@PAVVuEntity@@@Z ENDP		; SimVuDriver::SimVuDriver
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\acmi\src\include\acmirec.h
;	COMDAT ?IsRecording@ACMIRecorder@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRecording@ACMIRecorder@@QAEHXZ PROC			; ACMIRecorder::IsRecording, COMDAT
; _this$ = ecx

; 319  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 		return _recording;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 321  : 	};

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRecording@ACMIRecorder@@QAEHXZ ENDP			; ACMIRecorder::IsRecording
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GEjectedPilotClass@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GEjectedPilotClass@@UAEPAXI@Z PROC			; EjectedPilotClass::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1EjectedPilotClass@@UAE@XZ		; EjectedPilotClass::~EjectedPilotClass
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GEjectedPilotClass@@UAEPAXI@Z ENDP			; EjectedPilotClass::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SpewDebugData@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::SpewDebugData
; _this$ = ecx

; 1828 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1829 : 	return;
; 1830 : /*
; 1831 : 	unsigned char
; 1832 : 		monoX,
; 1833 : 		monoY;
; 1834 : 
; 1835 : 	if(_isDigital)
; 1836 : 	{
; 1837 : 		return;
; 1838 : 	}
; 1839 : 
; 1840 : 	monoX = 0;
; 1841 : 	monoY = 0;
; 1842 : 
; 1843 : 	// Output miscellaneous data for aircraft.
; 1844 : 	MonoLocate(monoX, monoY++);
; 1845 : 	MonoPrint("Ejection Stage: ");
; 1846 : 	switch(_stage)
; 1847 : 	{
; 1848 : 		case PD_JETTISON_CANOPY :
; 1849 : 		{
; 1850 : 			MonoPrint("Jettison Canopy                                           \n");
; 1851 : 
; 1852 : 			break;
; 1853 : 		}
; 1854 : 		case PD_EJECT_SEAT :
; 1855 : 		{
; 1856 : 			MonoPrint("Eject Seat                                                \n");
; 1857 : 	
; 1858 : 			break;
; 1859 : 		}
; 1860 : 		case PD_FREE_FALL_WITH_SEAT :
; 1861 : 		{
; 1862 : 			MonoPrint("Free Fall 1                                               \n");
; 1863 : 			
; 1864 : 			break;
; 1865 : 		}
; 1866 : 		case PD_CHUTE_OPENING :
; 1867 : 		{
; 1868 : 			MonoPrint("Chute Opening                                             \n");
; 1869 : 			
; 1870 : 			break;
; 1871 : 		}
; 1872 : 		case PD_FREE_FALL_WITH_OPEN_CHUTE :
; 1873 : 		{
; 1874 : 			MonoPrint("Free Fall 2                                               \n");
; 1875 : 			
; 1876 : 			break;
; 1877 : 		}
; 1878 : 		default :
; 1879 : 		{
; 1880 : 			MonoPrint("Unknown Stage                                             \n");
; 1881 : 		}
; 1882 : 	}
; 1883 : 
; 1884 : 	MonoLocate(monoX, monoY++);
; 1885 : 	MonoPrint
; 1886 : 	(
; 1887 : 		"Run Time: %14.4f Delta Time : %14.4f                          \n",
; 1888 : 		_runTime,
; 1889 : 		_deltaTime
; 1890 : 	);
; 1891 : 	MonoLocate(monoX, monoY++);
; 1892 : 	MonoPrint
; 1893 : 	(
; 1894 : 		"Mass    : %14.4f Drag Factor: %14.4f                          \n",
; 1895 : 		Mass(),
; 1896 : 		DragFactor()
; 1897 : 	);
; 1898 : 	
; 1899 : 	// Output motion data for aircraft.
; 1900 : 	if(_aircraft != NULL)
; 1901 : 	{
; 1902 : 		MonoLocate(monoX, monoY++);
; 1903 : 		MonoPrint("Aircraft                                                    \n");
; 1904 : 		MonoLocate(monoX, monoY++);
; 1905 : 		MonoPrint
; 1906 : 		(
; 1907 : 			"    location        : x:%14.4f  y:%14.4f  z:%14.4f\n",
; 1908 : 			_aircraft->XPos(),
; 1909 : 			_aircraft->YPos(),
; 1910 : 			_aircraft->ZPos()
; 1911 : 		);
; 1912 : 		MonoLocate(monoX, monoY++);
; 1913 : 		MonoPrint
; 1914 : 		(
; 1915 : 			"    velocity        : x:%14.4f  y:%14.4f  z:%14.4f\n",
; 1916 : 			_aircraft->XDelta(),
; 1917 : 			_aircraft->YDelta(),
; 1918 : 			_aircraft->ZDelta()
; 1919 : 		);
; 1920 : 		MonoLocate(monoX, monoY++);
; 1921 : 		MonoPrint
; 1922 : 		(
; 1923 : 			"    angle           : y:%14.10f  p:%14.10f  r:%14.10f\n",
; 1924 : 			_aircraft->Roll(),
; 1925 : 			_aircraft->Pitch(),
; 1926 : 			_aircraft->Yaw()
; 1927 : 		);
; 1928 : 		MonoLocate(monoX, monoY++);
; 1929 : 		MonoPrint
; 1930 : 		(
; 1931 : 			"    angular velocity: y:%14.10f  p:%14.10f  r:%14.10f\n",
; 1932 : 			_aircraft->RollDelta(),
; 1933 : 			_aircraft->PitchDelta(),
; 1934 : 			_aircraft->YawDelta()
; 1935 : 		);
; 1936 : 	}
; 1937 : 
; 1938 : 	// Output motion data for pilot.
; 1939 : 	MonoLocate(monoX, monoY++);
; 1940 : 	MonoPrint("Pilot                                                       \n");
; 1941 : 	MonoLocate(monoX, monoY++);
; 1942 : 	MonoPrint
; 1943 : 	(
; 1944 : 		"    location        : x:%14.4f  y:%14.4f  z:%14.4f\n",
; 1945 : 		XPos(),
; 1946 : 		YPos(),
; 1947 : 		ZPos()
; 1948 : 	);
; 1949 : 	MonoLocate(monoX, monoY++);
; 1950 : 	MonoPrint
; 1951 : 	(
; 1952 : 		"    velocity        : x:%14.4f  y:%14.4f  z:%14.4f\n",
; 1953 : 		XDelta(),
; 1954 : 		YDelta(),
; 1955 : 		ZDelta()
; 1956 : 	);
; 1957 : 	MonoLocate(monoX, monoY++);
; 1958 : 	MonoPrint
; 1959 : 	(
; 1960 : 		"    angle           : y:%14.10f  p:%14.10f  r:%14.10f\n",
; 1961 : 		Roll(),
; 1962 : 		Pitch(),
; 1963 : 		Yaw()
; 1964 : 	);
; 1965 : 	MonoLocate(monoX, monoY++);
; 1966 : 	MonoPrint
; 1967 : 	(
; 1968 : 		"    angular velocity: y:%14.10f  p:%14.10f  r:%14.10f\n",
; 1969 : 		RollDelta(),
; 1970 : 		PitchDelta(),
; 1971 : 		YawDelta()
; 1972 : 	);
; 1973 : 	MonoLocate(monoX, monoY);
; 1974 : */
; 1975 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SpewDebugData@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::SpewDebugData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HitGround@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::HitGround
; _this$ = ecx

; 803  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 804  : 	if(drawPointer){

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN3@HitGround

; 805  : 		OTWDriver.RemoveObject(drawPointer, TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z ; OTWDriverClass::RemoveObject

; 806  : 		drawPointer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0
$LN3@HitGround:

; 807  : 	}
; 808  : 
; 809  : 	if (_stage != PD_SAFE_LANDING ){

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+692], 6
	je	SHORT $LN2@HitGround

; 810  : 		// No strength left.
; 811  : 		strength = 0.0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+240], xmm0

; 812  : 		pctStrength = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+292], xmm0

; 813  : 
; 814  : 		// Send the death message
; 815  : 		if(_deathMsg != NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+808], 0
	je	SHORT $LN1@HitGround

; 816  : 		{
; 817  : 			FalconSendMessage (_deathMsg,FALSE);

	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+808]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8

; 818  : 			_deathMsg = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 0
$LN1@HitGround:

; 819  : 		}
; 820  : 
; 821  : 		// Dead.  No countdown.  Just dead.
; 822  : 		dyingTimer = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+248], xmm0
$LN2@HitGround:

; 823  : 	}
; 824  : 
; 825  : 	// Right now, handle the same way whether dead or alive, just destroy
; 826  : 	// the object.
; 827  : 	SetDead(TRUE);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+364]
	call	eax

; 828  :     SetExploding(TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetExploding@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetExploding

; 829  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HitGround@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::HitGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv155 = -16						; size = 4
tv141 = -12						; size = 4
_testHeight$ = -8					; size = 4
_this$ = -4						; size = 4
?HasHitGround@EjectedPilotClass@@ABEHXZ PROC		; EjectedPilotClass::HasHitGround
; _this$ = ecx

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 	float testHeight;
; 776  : 
; 777  : 	// We could linearly extrapolate based on the current frame time
; 778  : 	// and velocity to keep the pilot from going underground.
; 779  : 
; 780  :    testHeight = _pos[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QBEABMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _testHeight$[ebp], xmm0

; 781  : 
; 782  :    if (_stage > PD_CHUTE_OPENING)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+692], 3
	jle	SHORT $LN3@HasHitGrou

; 783  :    {
; 784  : 	  if (drawPointer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+332], 0
	je	SHORT $LN4@HasHitGrou

; 785  : 	  {
; 786  : 		testHeight += drawPointer->Radius() * 0.5f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?Radius@DrawableObject@@QBEMXZ		; DrawableObject::Radius
	fstp	DWORD PTR tv141[ebp]
	movss	xmm0, DWORD PTR tv141[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _testHeight$[ebp]
	movss	DWORD PTR _testHeight$[ebp], xmm0

; 787  : 	  }
; 788  : 	  else

	jmp	SHORT $LN3@HasHitGrou
$LN4@HasHitGrou:

; 789  : 	  {
; 790  : 		  testHeight = 100.0f;

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _testHeight$[ebp], xmm0
$LN3@HasHitGrou:

; 791  : 	  }
; 792  :    }
; 793  :    
; 794  : 	// TODO: do a cheaper ground height check 1st
; 795  : 	if (testHeight  >= OTWDriver.GetGroundLevel(_pos[I_X], _pos[I_Y])) {

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QBEABMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QBEABMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv155[ebp]
	movss	xmm0, DWORD PTR _testHeight$[ebp]
	comiss	xmm0, DWORD PTR tv155[ebp]
	jb	SHORT $LN2@HasHitGrou

; 796  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN1@HasHitGrou

; 797  : 	} else {

	jmp	SHORT $LN1@HasHitGrou
$LN2@HasHitGrou:

; 798  : 		return FALSE;

	xor	eax, eax
$LN1@HasHitGrou:

; 799  : 	}
; 800  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasHitGround@EjectedPilotClass@@ABEHXZ ENDP		; EjectedPilotClass::HasHitGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv178 = -96						; size = 4
tv144 = -92						; size = 4
tv65 = -88						; size = 4
tv174 = -84						; size = 4
_this$ = -80						; size = 4
_rot$ = -76						; size = 36
$T2 = -40						; size = 12
_hdg$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::ZeroPitchAndRoll
; _this$ = ecx

; 1759 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1760 : 	Trotation
; 1761 : 		rot;
; 1762 : 
; 1763 : 	EP_VECTOR
; 1764 : 		hdg;

	lea	ecx, DWORD PTR _hdg$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1765 : 
; 1766 : 	_rot.GetTrotation(rot);

	lea	eax, DWORD PTR _rot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation

; 1767 : 
; 1768 : 	_rot[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1769 : 	_rot[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1770 : 
; 1771 : 	// Find heading and set yaw to current heading.
; 1772 : 	if(rot.M21 == 0.0)

	cvtss2sd xmm0, DWORD PTR _rot$[ebp+12]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@ZeroPitchA

; 1773 : 	{
; 1774 : 		_rot[I_YAW] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1775 : 	}
; 1776 : 	else

	jmp	$LN1@ZeroPitchA
$LN2@ZeroPitchA:

; 1777 : 	{
; 1778 : 		hdg = EP_VECTOR
; 1779 : 		(
; 1780 : 			rot.M11,
; 1781 : 			rot.M21,
; 1782 : 			0
; 1783 : 		);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rot$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _rot$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv144[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	lea	ecx, DWORD PTR _hdg$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1784 : 		hdg.Normalize();

	lea	ecx, DWORD PTR _hdg$[ebp]
	call	?Normalize@?$Vector_3D@M@@QAEXXZ	; Vector_3D<float>::Normalize

; 1785 : 
; 1786 : 		_rot[I_YAW] = (float)atan2(hdg[I_Y], hdg[I_X]);

	push	0
	lea	ecx, DWORD PTR _hdg$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	cvtss2sd xmm0, DWORD PTR [eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	1
	lea	ecx, DWORD PTR _hdg$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	cvtss2sd xmm0, DWORD PTR [eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv174[ebp]
	fld	DWORD PTR tv174[ebp]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv178[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv178[ebp]
	fstp	DWORD PTR [eax]
$LN1@ZeroPitchA:

; 1787 : 	}
; 1788 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _hdg$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR _hdg$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::ZeroPitchAndRoll
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv160 = -28						; size = 4
tv149 = -24						; size = 4
tv138 = -20						; size = 4
tv95 = -16						; size = 4
tv84 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?FixOrientationRange@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::FixOrientationRange
; _this$ = ecx

; 1795 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
$LN12@FixOrienta:

; 1796 : 	// This can be done with math instead of iteratively.
; 1797 : 	while(_rot[I_YAW] > TWO_PI)

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@40c90fdb
	jbe	SHORT $LN11@FixOrienta

; 1798 : 	{
; 1799 : 		_rot[I_YAW] -= TWO_PI;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	DWORD PTR tv73[ebp], eax
	mov	eax, DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR __real@40c90fdb
	mov	ecx, DWORD PTR tv73[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1800 : 	}

	jmp	SHORT $LN12@FixOrienta
$LN11@FixOrienta:

; 1801 : 	while(_rot[I_YAW] < -TWO_PI)

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c0c90fdb
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN9@FixOrienta

; 1802 : 	{
; 1803 : 		_rot[I_YAW] += TWO_PI;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	DWORD PTR tv84[ebp], eax
	mov	edx, DWORD PTR tv84[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@40c90fdb
	mov	eax, DWORD PTR tv84[ebp]
	movss	DWORD PTR [eax], xmm0

; 1804 : 	}

	jmp	SHORT $LN11@FixOrienta
$LN9@FixOrienta:

; 1805 : 	while(_rot[I_PITCH] > TWO_PI)

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@40c90fdb
	jbe	SHORT $LN7@FixOrienta

; 1806 : 	{
; 1807 : 		_rot[I_PITCH] -= TWO_PI;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR __real@40c90fdb
	mov	edx, DWORD PTR tv95[ebp]
	movss	DWORD PTR [edx], xmm0

; 1808 : 	}

	jmp	SHORT $LN9@FixOrienta
$LN7@FixOrienta:

; 1809 : 	while(_rot[I_PITCH] < -TWO_PI)

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c0c90fdb
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN5@FixOrienta

; 1810 : 	{
; 1811 : 		_rot[I_PITCH] += TWO_PI;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	DWORD PTR tv138[ebp], eax
	mov	eax, DWORD PTR tv138[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR __real@40c90fdb
	mov	ecx, DWORD PTR tv138[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1812 : 	}

	jmp	SHORT $LN7@FixOrienta
$LN5@FixOrienta:

; 1813 : 	while(_rot[I_ROLL] > TWO_PI)

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@40c90fdb
	jbe	SHORT $LN3@FixOrienta

; 1814 : 	{
; 1815 : 		_rot[I_ROLL] -= TWO_PI;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	DWORD PTR tv149[ebp], eax
	mov	edx, DWORD PTR tv149[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR __real@40c90fdb
	mov	eax, DWORD PTR tv149[ebp]
	movss	DWORD PTR [eax], xmm0

; 1816 : 	}

	jmp	SHORT $LN5@FixOrienta
$LN3@FixOrienta:

; 1817 : 	while(_rot[I_ROLL] < -TWO_PI)

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c0c90fdb
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN1@FixOrienta

; 1818 : 	{
; 1819 : 		_rot[I_ROLL] += TWO_PI;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR tv160[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR __real@40c90fdb
	mov	edx, DWORD PTR tv160[ebp]
	movss	DWORD PTR [edx], xmm0

; 1820 : 	}

	jmp	SHORT $LN3@FixOrienta
$LN1@FixOrienta:

; 1821 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FixOrientationRange@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::FixOrientationRange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv142 = -152						; size = 4
tv154 = -148						; size = 4
tv149 = -144						; size = 4
tv159 = -140						; size = 4
tv65 = -136						; size = 4
tv141 = -132						; size = 4
tv163 = -128						; size = 4
tv139 = -124						; size = 4
_fudge$ = -120						; size = 4
_this$ = -116						; size = 4
_rot$ = -112						; size = 36
$T2 = -76						; size = 12
_modelEject$ = -64					; size = 12
_worldEject$ = -52					; size = 12
$T3 = -40						; size = 12
_dir$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_result$ = 8						; size = 4
?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z PROC ; EjectedPilotClass::CalculateEjectionVector
; _this$ = ecx

; 1727 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1728 : 	Trotation
; 1729 : 		rot;
; 1730 : 
; 1731 : 	Tpoint
; 1732 : 		modelEject,
; 1733 : 		worldEject;
; 1734 : 
; 1735 : 	EP_VECTOR
; 1736 : 		dir;

	lea	ecx, DWORD PTR _dir$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1737 : 
; 1738 : 	float fudge = 30 * PRANDFloat() * DTR;

	call	?PRANDFloat@@YAMXZ			; PRANDFloat
	fstp	DWORD PTR tv149[ebp]
	movss	xmm0, DWORD PTR tv149[ebp]
	mulss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR __real@3c8efa34
	movss	DWORD PTR _fudge$[ebp], xmm0

; 1739 : 	dir = 
; 1740 : 	EP_VECTOR
; 1741 : 	(
; 1742 : 		(float)cos(EjectAngle()+fudge),
; 1743 : 		0,
; 1744 : 		-(float)sin(EjectAngle()+fudge)
; 1745 : 	);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EjectAngle@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::EjectAngle
	fstp	DWORD PTR tv154[ebp]
	movss	xmm0, DWORD PTR tv154[ebp]
	addss	xmm0, DWORD PTR _fudge$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EjectAngle@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::EjectAngle
	fstp	DWORD PTR tv163[ebp]
	movss	xmm0, DWORD PTR tv163[ebp]
	addss	xmm0, DWORD PTR _fudge$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dir$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1746 : 
; 1747 : 	_rot.GetTrotation(rot);

	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation

; 1748 : 	dir.GetTpoint(modelEject);

	lea	eax, DWORD PTR _modelEject$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	call	?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z ; Vector_3D<float>::GetTpoint

; 1749 : 	MatrixMult(&rot, &modelEject, &worldEject);

	lea	ecx, DWORD PTR _worldEject$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modelEject$[ebp]
	push	edx
	lea	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1750 : 
; 1751 : 	result = EP_VECTOR(worldEject);

	lea	ecx, DWORD PTR _worldEject$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z	; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv141[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv141[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1752 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dir$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$0:
	lea	ecx, DWORD PTR _dir$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$1:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$2:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ENDP ; EjectedPilotClass::CalculateEjectionVector
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv88 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_result$ = 8						; size = 4
?CalculateGravityVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z PROC ; EjectedPilotClass::CalculateGravityVector
; _this$ = ecx

; 1715 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1716 : 	// This one's easy.
; 1717 : 	result[I_X] = 0;

	push	0
	mov	ecx, DWORD PTR _result$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1718 : 	result[I_Y] = 0;

	push	1
	mov	ecx, DWORD PTR _result$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1719 : 	result[I_Z] = GRAVITY_ACCEL * Mass();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Mass@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::Mass
	fstp	DWORD PTR tv83[ebp]
	movss	xmm0, DWORD PTR tv83[ebp]
	mulss	xmm0, DWORD PTR __real@4200cccd
	push	2
	mov	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR tv88[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv88[ebp]
	movss	DWORD PTR [eax], xmm0

; 1720 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CalculateGravityVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ENDP ; EjectedPilotClass::CalculateGravityVector
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv237 = -100						; size = 4
tv173 = -96						; size = 4
tv65 = -92						; size = 4
tv233 = -88						; size = 4
tv176 = -84						; size = 4
tv175 = -80						; size = 4
_windHdg$ = -76						; size = 4
_relSpeed$ = -72					; size = 4
_this$ = -68						; size = 4
$T2 = -64						; size = 12
$T3 = -52						; size = 12
_pos$ = -40						; size = 12
_windVelocity$ = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_result$ = 8						; size = 4
?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z PROC ; EjectedPilotClass::CalculateDragVector
; _this$ = ecx

; 1665 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1666 : 	SIM_FLOAT
; 1667 : 		windHdg,
; 1668 : 		relSpeed;
; 1669 : 
; 1670 : 	EP_VECTOR
; 1671 : 		windVelocity;

	lea	ecx, DWORD PTR _windVelocity$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1672 : 	
; 1673 : 	 Tpoint			pos;
; 1674 : 		  pos.x = _pos[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QBEABMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _pos$[ebp], xmm0

; 1675 : 		  pos.y = _pos[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QBEABMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _pos$[ebp+4], xmm0

; 1676 : 		  pos.z = _pos[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QBEABMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _pos$[ebp+8], xmm0

; 1677 : 		 
; 1678 : 
; 1679 : 	// Find the velocity vector for the wind.
; 1680 : 	//JAM 24Nov03
; 1681 : 	windHdg = ((WeatherClass*)realWeather)->windHeading;

	mov	eax, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	movss	xmm0, DWORD PTR [eax+15728]
	movss	DWORD PTR _windHdg$[ebp], xmm0

; 1682 : 	
; 1683 : 	windVelocity = EP_VECTOR((float)cos(windHdg), (float)sin(windHdg), 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _windHdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _windHdg$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv173[ebp]
	push	edx
	lea	ecx, DWORD PTR _windVelocity$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1684 : 	windVelocity *= ((WeatherClass*)realWeather)->WindSpeedInFeetPerSecond(&pos);

	lea	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?realWeather@@3PAVRealWeather@@A ; realWeather
	call	?WindSpeedInFeetPerSecond@WeatherClass@@QAEMPBUTpoint@@@Z ; WeatherClass::WindSpeedInFeetPerSecond
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _windVelocity$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1685 : 
; 1686 : 	// Subtract the velocity of the wind from the velocity of the seat before computing drag.
; 1687 : 	result = _vel;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	push	ecx
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 1688 : 	result -= windVelocity;

	lea	edx, DWORD PTR _windVelocity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _result$[ebp]
	call	??Z?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator-=

; 1689 : 
; 1690 : 	// Get the relative speed.
; 1691 : 	relSpeed = result.Magnitude();

	mov	ecx, DWORD PTR _result$[ebp]
	call	?Magnitude@?$Vector_3D@M@@QBEMXZ	; Vector_3D<float>::Magnitude
	fstp	DWORD PTR _relSpeed$[ebp]

; 1692 : 
; 1693 : 	// Normalize.
; 1694 : 	if(relSpeed != 0.0)

	cvtss2sd xmm0, DWORD PTR _relSpeed$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@CalculateD

; 1695 : 	{
; 1696 : 		result /= relSpeed;

	push	ecx
	movss	xmm0, DWORD PTR _relSpeed$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	call	??_0?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator/=

; 1697 : 	}
; 1698 : 	else

	jmp	SHORT $LN1@CalculateD
$LN2@CalculateD:

; 1699 : 	{
; 1700 : 		result = EP_VECTOR(0.0, 0.0, 0.0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv176[ebp], eax
	mov	eax, DWORD PTR tv176[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv175[ebp]
	push	ecx
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
$LN1@CalculateD:

; 1701 : 	}
; 1702 : 
; 1703 : 	// Invert the relative velocity.  Drag opposes the velocity vector.
; 1704 : 	result.Invert();

	mov	ecx, DWORD PTR _result$[ebp]
	call	?Invert@?$Vector_3D@M@@QAEXXZ		; Vector_3D<float>::Invert

; 1705 : 
; 1706 : 	// Multiply it by the squared relative speed and drag factor.
; 1707 : 	result *= (relSpeed * relSpeed) * DragFactor() / GRAVITY;

	movss	xmm0, DWORD PTR _relSpeed$[ebp]
	mulss	xmm0, DWORD PTR _relSpeed$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv237[ebp], xmm0
	call	?DragFactor@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::DragFactor
	fstp	DWORD PTR tv233[ebp]
	movss	xmm0, DWORD PTR tv237[ebp]
	mulss	xmm0, DWORD PTR tv233[ebp]
	divss	xmm0, DWORD PTR __real@4200b53f
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1708 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _windVelocity$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$0:
	lea	ecx, DWORD PTR _windVelocity$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ENDP ; EjectedPilotClass::CalculateDragVector
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv140 = -112						; size = 4
tv85 = -108						; size = 4
tv86 = -104						; size = 4
tv136 = -100						; size = 4
tv144 = -96						; size = 4
_this$ = -92						; size = 4
_rot$ = -88						; size = 36
_worldThrust$ = -52					; size = 12
$T2 = -40						; size = 12
_modelThrust$ = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_result$ = 8						; size = 4
?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z PROC ; EjectedPilotClass::CalculateThrustVector
; _this$ = ecx

; 1641 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1642 : 	Trotation rot;
; 1643 : 
; 1644 : 	Tpoint modelThrust, worldThrust;
; 1645 : 
; 1646 : 	// Thrust is up.
; 1647 : 	modelThrust.x = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _modelThrust$[ebp], xmm0

; 1648 : 	modelThrust.y = 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _modelThrust$[ebp+4], xmm0

; 1649 : 	modelThrust.z = -1.0;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _modelThrust$[ebp+8], xmm0

; 1650 : 
; 1651 : 	// Transform to world space.
; 1652 : 	_rot.GetTrotation(rot);

	lea	eax, DWORD PTR _rot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation

; 1653 : 	MatrixMult(&rot, &modelThrust, &worldThrust);

	lea	ecx, DWORD PTR _worldThrust$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modelThrust$[ebp]
	push	edx
	lea	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1654 : 	
; 1655 : 	// Multiply it by the magnitude
; 1656 : 	result = EP_VECTOR(worldThrust);

	lea	ecx, DWORD PTR _worldThrust$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z	; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv85[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv85[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1657 : 	result *= Mass() * SeatThrust();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Mass@EjectedPilotClass@@ABEMXZ		; EjectedPilotClass::Mass
	fstp	DWORD PTR tv136[ebp]
	movss	xmm0, DWORD PTR tv136[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv144[ebp], xmm0
	call	?SeatThrust@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::SeatThrust
	fstp	DWORD PTR tv140[ebp]
	movss	xmm0, DWORD PTR tv144[ebp]
	mulss	xmm0, DWORD PTR tv140[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _result$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1658 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-104]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ENDP ; EjectedPilotClass::CalculateThrustVector
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv179 = -180						; size = 4
tv335 = -176						; size = 4
tv244 = -172						; size = 4
tv339 = -168						; size = 4
tv249 = -164						; size = 4
tv331 = -160						; size = 4
tv242 = -156						; size = 4
tv337 = -152						; size = 4
tv248 = -148						; size = 4
tv329 = -144						; size = 4
tv333 = -140						; size = 4
tv247 = -136						; size = 4
_this$ = -132						; size = 4
_aircraft$ = -128					; size = 4
_rot$ = -124						; size = 36
$T2 = -88						; size = 12
_worldOffset$ = -76					; size = 12
$T3 = -64						; size = 12
_modelOffset$ = -52					; size = 12
$T4 = -40						; size = 12
$T5 = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ PROC ; EjectedPilotClass::CalculateAndSetPositionAndOrientationInCockpit
; _this$ = ecx

; 1588 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1589 : 	Trotation
; 1590 : 		rot;
; 1591 : 
; 1592 : 	Tpoint
; 1593 : 		modelOffset,
; 1594 : 		worldOffset;
; 1595 : 
; 1596 : 	AircraftClass	*aircraft = (AircraftClass*) vuDatabase->Find(_aircraftId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	push	ecx
	mov	edx, DWORD PTR [eax+672]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _aircraft$[ebp], eax

; 1597 : 
; 1598 : 	if (!aircraft)

	cmp	DWORD PTR _aircraft$[ebp], 0
	jne	SHORT $LN1@CalculateA

; 1599 : 		return;

	jmp	$LN2@CalculateA
$LN1@CalculateA:

; 1600 : 
; 1601 : 	// Orient the seat the same way as the plane.
; 1602 : 	_rot[I_ROLL] = aircraft->Roll();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv329[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv329[ebp]
	fstp	DWORD PTR [eax]

; 1603 : 	_rot[I_PITCH] = aircraft->Pitch();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv331[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv331[ebp]
	fstp	DWORD PTR [eax]

; 1604 : 	_rot[I_YAW] = aircraft->Yaw();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv333[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv333[ebp]
	fstp	DWORD PTR [eax]

; 1605 : 
; 1606 : 	// Get the seat offset in model space.
; 1607 : 	SeatOffset().GetTpoint(modelOffset);

	lea	eax, DWORD PTR _modelOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeatOffset@EjectedPilotClass@@ABE?AV?$Vector_3D@M@@XZ ; EjectedPilotClass::SeatOffset
	mov	DWORD PTR tv248[ebp], eax
	mov	edx, DWORD PTR tv248[ebp]
	mov	DWORD PTR tv242[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv242[ebp]
	call	?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z ; Vector_3D<float>::GetTpoint
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1608 : 
; 1609 : 	// Transform to world space.
; 1610 : 	_rot.GetTrotation(rot);

	lea	eax, DWORD PTR _rot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation

; 1611 : 	MatrixMult(&rot, &modelOffset, &worldOffset);

	lea	ecx, DWORD PTR _worldOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _modelOffset$[ebp]
	push	edx
	lea	eax, DWORD PTR _rot$[ebp]
	push	eax
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 1612 : 
; 1613 : 	// Get position of aircraft + model space offset.
; 1614 : 	_pos = EP_VECTOR
; 1615 : 	(
; 1616 : 		aircraft->XPos(),
; 1617 : 		aircraft->YPos(),
; 1618 : 		aircraft->ZPos()
; 1619 : 	);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv249[ebp], eax
	mov	ecx, DWORD PTR tv249[ebp]
	mov	DWORD PTR tv244[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv244[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1620 : 	_pos += worldOffset;

	lea	eax, DWORD PTR _worldOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z	; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1621 : 
; 1622 : 	// Velocity is the velocity of the plane.
; 1623 : 	_vel = EP_VECTOR
; 1624 : 	(
; 1625 : 		aircraft->XDelta(),
; 1626 : 		aircraft->YDelta(),
; 1627 : 		aircraft->ZDelta()
; 1628 : 	);

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv179[ebp], eax
	mov	edx, DWORD PTR tv179[ebp]
	mov	DWORD PTR tv247[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv247[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 1629 : 
; 1630 : 	// Angular velocity is the same as the plane.
; 1631 : 	_aVel[I_ROLL] = aircraft->RollDelta();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?RollDelta@VuEntity@@QBEMXZ		; VuEntity::RollDelta
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv335[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv335[ebp]
	fstp	DWORD PTR [eax]

; 1632 : 	_aVel[I_PITCH] = aircraft->PitchDelta();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?PitchDelta@VuEntity@@QBEMXZ		; VuEntity::PitchDelta
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv337[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv337[ebp]
	fstp	DWORD PTR [eax]

; 1633 : 	_aVel[I_YAW] = aircraft->YawDelta();

	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?YawDelta@VuEntity@@QBEMXZ		; VuEntity::YawDelta
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv339[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv339[ebp]
	fstp	DWORD PTR [eax]
$LN2@CalculateA:

; 1634 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ$3:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ ENDP ; EjectedPilotClass::CalculateAndSetPositionAndOrientationInCockpit
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RunSafeLanding@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::RunSafeLanding
; _this$ = ecx

; 1438 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1439 : 	// all we do (thus far) is just time how long we stay around
; 1440 : 	// after hitting the ground ( 5 secs )
; 1441 : 	// once HitGround() is called we're finished
; 1442 : 	if ( _runTime - _hitGroundTime > 10.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+704]
	subss	xmm0, DWORD PTR [ecx+784]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN1@RunSafeLan

; 1443 : 		HitGround();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitGround@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::HitGround
$LN1@RunSafeLan:

; 1444 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RunSafeLanding@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::RunSafeLanding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RunCrashLanding@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::RunCrashLanding
; _this$ = ecx

; 1451 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1452 : 	// all we do (thus far) is just time how long we stay around
; 1453 : 	// after hitting the ground ( 5 secs )
; 1454 : 	// once HitGround() is called we're finished
; 1455 : 	if ( _runTime - _hitGroundTime > 10.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+704]
	subss	xmm0, DWORD PTR [ecx+784]
	comiss	xmm0, DWORD PTR __real@41200000
	jbe	SHORT $LN1@RunCrashLa

; 1456 : 		HitGround();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HitGround@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::HitGround
$LN1@RunCrashLa:

; 1457 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RunCrashLanding@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::RunCrashLanding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv295 = -64						; size = 4
tv399 = -60						; size = 4
tv304 = -56						; size = 4
tv401 = -52						; size = 4
tv397 = -48						; size = 4
_this$ = -44						; size = 4
_accelVector$ = -40					; size = 12
_dragVector$ = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RunFreeFall@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::RunFreeFall
; _this$ = ecx

; 1518 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RunFreeFall@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1519 : 	EP_VECTOR
; 1520 : 		dragVector,

	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1521 : 		accelVector;

	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1522 : 	
; 1523 : 	// Calculate all forces acting on the seat.
; 1524 : 	CalculateGravityVector(accelVector);

	lea	eax, DWORD PTR _accelVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateGravityVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateGravityVector

; 1525 : 	CalculateDragVector(dragVector);

	lea	ecx, DWORD PTR _dragVector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateDragVector

; 1526 : 
; 1527 : 	// Calculate the resultant acceleration on the seat.
; 1528 : 	F4Assert(Mass() != 0.0);
; 1529 :    dragVector *= _deltaTime/Mass();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+388]
	call	edx
	fstp	DWORD PTR tv295[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+708]
	divss	xmm0, DWORD PTR tv295[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1530 : 	accelVector *= _deltaTime/Mass();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv304[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+708]
	divss	xmm0, DWORD PTR tv304[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1531 : 
; 1532 :    // Don't cross the zero line
; 1533 :    if (dragVector[I_X] < - _vel[I_X])

	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN18@RunFreeFal

; 1534 :       dragVector[I_X] = - _vel[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv397[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv397[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN16@RunFreeFal
$LN18@RunFreeFal:

; 1535 :    else if (dragVector[I_X] > _vel[I_X])

	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN16@RunFreeFal

; 1536 :       dragVector[I_X] = _vel[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
$LN16@RunFreeFal:

; 1537 : 
; 1538 :    if (dragVector[I_Y] < - _vel[I_Y])

	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN15@RunFreeFal

; 1539 :       dragVector[I_Y] = - _vel[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv399[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv399[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN13@RunFreeFal
$LN15@RunFreeFal:

; 1540 :    else if (dragVector[I_Y] > _vel[I_Y])

	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN13@RunFreeFal

; 1541 :       dragVector[I_Y] = _vel[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
$LN13@RunFreeFal:

; 1542 : 
; 1543 :    if (dragVector[I_Z] < - _vel[I_Z])

	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN12@RunFreeFal

; 1544 :       dragVector[I_Z] = - _vel[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv401[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv401[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN10@RunFreeFal
$LN12@RunFreeFal:

; 1545 :    else if (dragVector[I_Z] > _vel[I_Z])

	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN10@RunFreeFal

; 1546 :       dragVector[I_Z] = _vel[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
$LN10@RunFreeFal:

; 1547 : 
; 1548 : 	accelVector += dragVector;

	lea	eax, DWORD PTR _dragVector$[ebp]
	push	eax
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1549 : 	
; 1550 : 	// Ajust the velocity by the acceleration.
; 1551 : 	_vel += accelVector;

	lea	ecx, DWORD PTR _accelVector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1552 :    F4Assert (_vel[I_X] <  10000.0F);
; 1553 :    F4Assert (_vel[I_X] > -10000.0F);
; 1554 :    F4Assert (_vel[I_Y] <  10000.0F);
; 1555 :    F4Assert (_vel[I_Y] > -10000.0F);
; 1556 :    F4Assert (_vel[I_Z] <  10000.0F);
; 1557 :    F4Assert (_vel[I_Z] > -10000.0F);
; 1558 : 
; 1559 :    if (_vel[I_X] > 10000.0F)

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN9@RunFreeFal

; 1560 :       _vel[I_X] = 10000.0F;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN7@RunFreeFal
$LN9@RunFreeFal:

; 1561 :    else if (_vel[I_X] < -10000.0F)

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c61c4000
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN7@RunFreeFal

; 1562 :       _vel[I_X] = -10000.0F;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR [eax], xmm0
$LN7@RunFreeFal:

; 1563 : 
; 1564 :    if (_vel[I_Y] > 10000.0F)

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN6@RunFreeFal

; 1565 :       _vel[I_Y] = 10000.0F;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN4@RunFreeFal
$LN6@RunFreeFal:

; 1566 :    else if (_vel[I_Y] < -10000.0F)

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c61c4000
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN4@RunFreeFal

; 1567 :       _vel[I_Y] = -10000.0F;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR [eax], xmm0
$LN4@RunFreeFal:

; 1568 : 
; 1569 :    if (_vel[I_Z] > 10000.0F)

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@461c4000
	jbe	SHORT $LN3@RunFreeFal

; 1570 :       _vel[I_Z] = 10000.0F;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN1@RunFreeFal
$LN3@RunFreeFal:

; 1571 :    else if (_vel[I_Z] < -10000.0F)

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c61c4000
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN1@RunFreeFal

; 1572 :       _vel[I_Z] = -10000.0F;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@c61c4000
	movss	DWORD PTR [eax], xmm0
$LN1@RunFreeFal:

; 1573 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RunFreeFall@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR _dragVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?RunFreeFall@EjectedPilotClass@@AAEXXZ$1:
	lea	ecx, DWORD PTR _accelVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?RunFreeFall@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RunFreeFall@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RunFreeFall@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::RunFreeFall
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv255 = -64						; size = 4
tv331 = -60						; size = 4
tv264 = -56						; size = 4
tv333 = -52						; size = 4
tv329 = -48						; size = 4
_this$ = -44						; size = 4
_accelVector$ = -40					; size = 12
_dragVector$ = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ PROC ; EjectedPilotClass::RunFreeFallWithOpenChute
; _this$ = ecx

; 1464 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1465 : 	EP_VECTOR
; 1466 : 		dragVector,

	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1467 : 		accelVector;

	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1468 : 	
; 1469 : 	// Calculate all forces acting on the seat.
; 1470 : 	CalculateGravityVector(accelVector);

	lea	eax, DWORD PTR _accelVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateGravityVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateGravityVector

; 1471 : 	CalculateDragVector(dragVector);

	lea	ecx, DWORD PTR _dragVector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateDragVector

; 1472 : 
; 1473 : 	// Calculate the resultant acceleration on the seat.
; 1474 : 	F4Assert(Mass() != 0.0);
; 1475 :    dragVector *= _deltaTime/Mass();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+388]
	call	edx
	fstp	DWORD PTR tv255[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+708]
	divss	xmm0, DWORD PTR tv255[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1476 : 	accelVector *= _deltaTime/Mass();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv264[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+708]
	divss	xmm0, DWORD PTR tv264[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1477 : 
; 1478 :    // Don't cross the zero line
; 1479 :    if (dragVector[I_X] < - _vel[I_X])

	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN10@RunFreeFal

; 1480 :       dragVector[I_X] = - _vel[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv329[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv329[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN8@RunFreeFal
$LN10@RunFreeFal:

; 1481 :    else if (dragVector[I_X] > _vel[I_X])

	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN8@RunFreeFal

; 1482 :       dragVector[I_X] = _vel[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
$LN8@RunFreeFal:

; 1483 : 
; 1484 :    if (dragVector[I_Y] < - _vel[I_Y])

	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN7@RunFreeFal

; 1485 :       dragVector[I_Y] = - _vel[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv331[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv331[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN5@RunFreeFal
$LN7@RunFreeFal:

; 1486 :    else if (dragVector[I_Y] > _vel[I_Y])

	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN5@RunFreeFal

; 1487 :       dragVector[I_Y] = _vel[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
$LN5@RunFreeFal:

; 1488 : 
; 1489 :    if (dragVector[I_Z] < - _vel[I_Z])

	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN4@RunFreeFal

; 1490 :       dragVector[I_Z] = - _vel[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv333[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv333[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN2@RunFreeFal
$LN4@RunFreeFal:

; 1491 :    else if (dragVector[I_Z] > _vel[I_Z])

	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN2@RunFreeFal

; 1492 :       dragVector[I_Z] = _vel[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
$LN2@RunFreeFal:

; 1493 : 
; 1494 : 	accelVector += dragVector;

	lea	eax, DWORD PTR _dragVector$[ebp]
	push	eax
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1495 : 	
; 1496 : 	// Ajust the velocity by the acceleration.
; 1497 : 	_vel += accelVector;

	lea	ecx, DWORD PTR _accelVector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1498 :    F4Assert (_vel[I_X] <  10000.0F);
; 1499 :    F4Assert (_vel[I_X] > -10000.0F);
; 1500 :    F4Assert (_vel[I_Y] <  10000.0F);
; 1501 :    F4Assert (_vel[I_Y] > -10000.0F);
; 1502 :    F4Assert (_vel[I_Z] <  10000.0F);
; 1503 :    F4Assert (_vel[I_Z] > -10000.0F);
; 1504 : 
; 1505 : 
; 1506 : 	if(_rot[I_PITCH] > 0.0)

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	cvtss2sd xmm0, DWORD PTR [eax]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN1@RunFreeFal

; 1507 : 	{
; 1508 : 		_rot[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1509 : 		_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
$LN1@RunFreeFal:

; 1510 : 	}
; 1511 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR _dragVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ$1:
	lea	ecx, DWORD PTR _accelVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ ENDP ; EjectedPilotClass::RunFreeFallWithOpenChute
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv250 = -76						; size = 4
tv320 = -72						; size = 4
tv316 = -68						; size = 4
tv259 = -64						; size = 4
tv318 = -60						; size = 4
_this$ = -56						; size = 4
_thrustVector$ = -52					; size = 12
_accelVector$ = -40					; size = 12
_dragVector$ = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RunEjectSeat@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::RunEjectSeat
; _this$ = ecx

; 1388 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RunEjectSeat@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1389 : 	EP_VECTOR
; 1390 : 		thrustVector,

	lea	ecx, DWORD PTR _thrustVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1391 : 		dragVector,

	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1392 : 		accelVector;

	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1393 : 
; 1394 : 	// Calculate all forces acting on the seat.
; 1395 : 	CalculateGravityVector(accelVector);

	lea	eax, DWORD PTR _accelVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateGravityVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateGravityVector

; 1396 : 	CalculateThrustVector(thrustVector);

	lea	ecx, DWORD PTR _thrustVector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateThrustVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateThrustVector

; 1397 : 	CalculateDragVector(dragVector);

	lea	edx, DWORD PTR _dragVector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateDragVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateDragVector

; 1398 : 
; 1399 : 	// Calculate the resultant acceleration on the seat.
; 1400 : 	F4Assert(Mass() != 0.0);
; 1401 : 	accelVector += thrustVector;

	lea	eax, DWORD PTR _thrustVector$[ebp]
	push	eax
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1402 :    dragVector *= _deltaTime/Mass();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	call	eax
	fstp	DWORD PTR tv250[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+708]
	divss	xmm0, DWORD PTR tv250[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1403 : 	accelVector *= _deltaTime/Mass();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+388]
	call	edx
	fstp	DWORD PTR tv259[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+708]
	divss	xmm0, DWORD PTR tv259[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1404 : 
; 1405 :    // Don't cross the zero line
; 1406 :    if (dragVector[I_X] < - _vel[I_X])

	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN9@RunEjectSe

; 1407 :       dragVector[I_X] = - _vel[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv316[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv316[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN7@RunEjectSe
$LN9@RunEjectSe:

; 1408 :    else if (dragVector[I_X] > _vel[I_X])

	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN7@RunEjectSe

; 1409 :       dragVector[I_X] = _vel[I_X];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
$LN7@RunEjectSe:

; 1410 : 
; 1411 :    if (dragVector[I_Y] < - _vel[I_Y])

	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN6@RunEjectSe

; 1412 :       dragVector[I_Y] = - _vel[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv318[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv318[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN4@RunEjectSe
$LN6@RunEjectSe:

; 1413 :    else if (dragVector[I_Y] > _vel[I_Y])

	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN4@RunEjectSe

; 1414 :       dragVector[I_Y] = _vel[I_Y];

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
$LN4@RunEjectSe:

; 1415 : 
; 1416 :    if (dragVector[I_Z] < - _vel[I_Z])

	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR [esi]
	jbe	SHORT $LN3@RunEjectSe

; 1417 :       dragVector[I_Z] = - _vel[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	movss	DWORD PTR tv320[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv320[ebp]
	movss	DWORD PTR [eax], xmm0
	jmp	SHORT $LN1@RunEjectSe
$LN3@RunEjectSe:

; 1418 :    else if (dragVector[I_Z] > _vel[I_Z])

	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [esi]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN1@RunEjectSe

; 1419 :       dragVector[I_Z] = _vel[I_Z];

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
$LN1@RunEjectSe:

; 1420 : 
; 1421 : 	accelVector += dragVector;

	lea	edx, DWORD PTR _dragVector$[ebp]
	push	edx
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1422 : 
; 1423 : 	// Ajust the velocity by the acceleration.
; 1424 : 	_vel += accelVector;

	lea	eax, DWORD PTR _accelVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1425 :    F4Assert (_vel[I_X] <  10000.0F);
; 1426 :    F4Assert (_vel[I_X] > -10000.0F);
; 1427 :    F4Assert (_vel[I_Y] <  10000.0F);
; 1428 :    F4Assert (_vel[I_Y] > -10000.0F);
; 1429 :    F4Assert (_vel[I_Z] <  10000.0F);
; 1430 :    F4Assert (_vel[I_Z] > -10000.0F);
; 1431 : 
; 1432 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _accelVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _dragVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _thrustVector$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?RunEjectSeat@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR _thrustVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?RunEjectSeat@EjectedPilotClass@@AAEXXZ$1:
	lea	ecx, DWORD PTR _dragVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?RunEjectSeat@EjectedPilotClass@@AAEXXZ$2:
	lea	ecx, DWORD PTR _accelVector$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?RunEjectSeat@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RunEjectSeat@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RunEjectSeat@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::RunEjectSeat
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RunJettisonCanopy@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::RunJettisonCanopy
; _this$ = ecx

; 1378 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1379 : 	// Find and set the position of the seat in the cockpit.
; 1380 : 	CalculateAndSetPositionAndOrientationInCockpit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::CalculateAndSetPositionAndOrientationInCockpit

; 1381 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RunJettisonCanopy@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::RunJettisonCanopy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv183 = -12						; size = 4
tv173 = -8						; size = 4
_this$ = -4						; size = 4
?InitCrashLanding@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::InitCrashLanding
; _this$ = ecx

; 1326 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1327 : 	F4Assert(_md != NULL);
; 1328 : 
; 1329 : 	// Set the new BSP.
; 1330 : 	SetModel(MD_CRASH_LANDING);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModel@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetModel

; 1331 : 		
; 1332 : 	// Zero the pitch and roll.
; 1333 : 	ZeroPitchAndRoll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::ZeroPitchAndRoll

; 1334 : 		
; 1335 : 	// Set angular velocity to 0.
; 1336 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1337 : 	_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1338 : 	_aVel[I_YAW] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1339 : 
; 1340 : 	// Set translational velocity to 0.
; 1341 : 	_vel[I_X] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1342 : 	_vel[I_Y] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1343 : 	_vel[I_Z] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1344 : 
; 1345 : 	// for new set Z on ground
; 1346 : 	_pos[I_Z] = OTWDriver.GetGroundLevel(_pos[I_X], _pos[I_Y]) - 3.0f;

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv173[ebp]
	subss	xmm0, DWORD PTR __real@40400000
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	movss	DWORD PTR tv183[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv183[ebp]
	movss	DWORD PTR [eax], xmm0

; 1347 : 
; 1348 : 	// Set the time that we hit ground
; 1349 : 	_hitGroundTime = _runTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+704]
	mov	DWORD PTR [eax+784], edx

; 1350 : 
; 1351 : 	_stageTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 1352 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitCrashLanding@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::InitCrashLanding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 8
$T3 = -56						; size = 8
tv347 = -48						; size = 4
tv337 = -44						; size = 4
$T4 = -40						; size = 4
tv139 = -36						; size = 4
$T5 = -32						; size = 4
tv128 = -28						; size = 4
_flight$ = -24						; size = 4
_radioMessage$6 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitSafeLanding@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::InitSafeLanding
; _this$ = ecx

; 1276 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitSafeLanding@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1277 : 	F4Assert(_md != NULL);
; 1278 : 
; 1279 :    // PlayRadioMessage (rcAIRMANDOWND)
; 1280 :    // _aircraft is pointer to the plane the pilot came from.
; 1281 :    // check _aircraft->flightPtr for someone in the flight to see the landing
; 1282 : 
; 1283 : 	Flight flight;
; 1284 : 	flight = (Flight) vuDatabase->Find(_flightId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	push	ecx
	mov	edx, DWORD PTR [eax+680]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$[ebp], eax

; 1285 : 
; 1286 : 	if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN1@InitSafeLa

; 1287 : 	{
; 1288 : 		FalconRadioChatterMessage *radioMessage = new FalconRadioChatterMessage( flight->Id(), FalconLocalGame );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@InitSafeLa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@InitSafeLa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN5@InitSafeLa
$LN4@InitSafeLa:
	mov	DWORD PTR tv128[ebp], 0
$LN5@InitSafeLa:
	push	1
	mov	ecx, DWORD PTR tv128[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN7@InitSafeLa
$LN6@InitSafeLa:
	mov	DWORD PTR tv139[ebp], 0
$LN7@InitSafeLa:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$6[ebp], ecx

; 1289 : 		radioMessage->dataBlock.from = flight->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$6[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 1290 : 		radioMessage->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	mov	BYTE PTR [ecx+60], 1

; 1291 : 		radioMessage->dataBlock.voice_id = flight->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	edx, DWORD PTR _radioMessage$6[ebp]
	mov	BYTE PTR [edx+61], al

; 1292 : 		radioMessage->dataBlock.message = rcAIRMANDOWND;

	mov	eax, 9
	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [ecx+62], ax

; 1293 : 		radioMessage->dataBlock.edata[0] = flight->callsign_id;

	mov	edx, DWORD PTR _flight$[ebp]
	movzx	ax, BYTE PTR [edx+425]
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1294 : 		radioMessage->dataBlock.edata[1] = flight->GetFlightLeadCallNumber();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadCallNumber@FlightClass@@QAEHXZ ; FlightClass::GetFlightLeadCallNumber
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1295 : 		radioMessage->dataBlock.edata[2] = SimToGrid(YPos()); // MN Fix - need SimToGrid, not FloatToInt32 as previoiusly..and reversed X/YPos

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1296 : 		radioMessage->dataBlock.edata[3] = SimToGrid(XPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [edx+ecx+64], ax

; 1297 : 		FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	eax, DWORD PTR _radioMessage$6[ebp]
	push	eax
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN1@InitSafeLa:

; 1298 : 	}
; 1299 : 
; 1300 :    // Set the new BSP.
; 1301 : 	SetModel(MD_SAFE_LANDING);

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModel@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetModel

; 1302 : 		
; 1303 : 	// Zero the pitch and roll.
; 1304 : 	ZeroPitchAndRoll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::ZeroPitchAndRoll

; 1305 : 		
; 1306 : 	// Set angular velocity to 0.
; 1307 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1308 : 	_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1309 : 	_aVel[I_YAW] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1310 : 
; 1311 : 	// Set translational velocity to 0.
; 1312 : 	_vel[I_X] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1313 : 	_vel[I_Y] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1314 : 	_vel[I_Z] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1315 : 
; 1316 : 	// for new set Z on ground
; 1317 : 	_pos[I_Z] = OTWDriver.GetGroundLevel(_pos[I_X], _pos[I_Y]) - 3.0f;

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?GetGroundLevel@OTWDriverClass@@QAEMMMPAUTpoint@@@Z ; OTWDriverClass::GetGroundLevel
	fstp	DWORD PTR tv337[ebp]
	movss	xmm0, DWORD PTR tv337[ebp]
	subss	xmm0, DWORD PTR __real@40400000
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	movss	DWORD PTR tv347[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv347[ebp]
	movss	DWORD PTR [eax], xmm0

; 1318 : 
; 1319 : 	// Set the time that we hit ground
; 1320 : 	_hitGroundTime = _runTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+704]
	mov	DWORD PTR [ecx+784], eax

; 1321 : 
; 1322 : 	_stageTimer = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+716], xmm0

; 1323 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitSafeLanding@EjectedPilotClass@@AAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitSafeLanding@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitSafeLanding@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitSafeLanding@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::InitSafeLanding
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitFreeFallWithCollapsedChute@EjectedPilotClass@@AAEXXZ PROC ; EjectedPilotClass::InitFreeFallWithCollapsedChute
; _this$ = ecx

; 1354 : void EjectedPilotClass::InitFreeFallWithCollapsedChute(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1355 : 	F4Assert(_md != NULL);
; 1356 : 
; 1357 : 	// Set the new BSP.
; 1358 : 	SetModel(MD_PILOT_AND_COLLAPSED_CHUTE);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModel@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetModel

; 1359 : 		
; 1360 : 	// Zero the pitch and roll.
; 1361 : 	ZeroPitchAndRoll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::ZeroPitchAndRoll

; 1362 : 		
; 1363 : 	// Set angular velocity to 0.
; 1364 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1365 : 	_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1366 : 	_aVel[I_YAW] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1367 : 
; 1368 : 	// Set the time that the chute collapsed.
; 1369 : 	_chuteCollapsedTime = _runTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+704]
	mov	DWORD PTR [eax+792], edx

; 1370 : 	_stageTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 1371 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitFreeFallWithCollapsedChute@EjectedPilotClass@@AAEXXZ ENDP ; EjectedPilotClass::InitFreeFallWithCollapsedChute
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv142 = -16						; size = 4
tv140 = -12						; size = 4
tv138 = -8						; size = 4
_this$ = -4						; size = 4
?InitFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ PROC ; EjectedPilotClass::InitFreeFallWithOpenChute
; _this$ = ecx

; 1262 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1263 : 	// Give the pilot a slight pitch.
; 1264 : 	ZeroPitchAndRoll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::ZeroPitchAndRoll

; 1265 : 	_rot[I_PITCH] = StartPitch();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartPitch@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::StartPitch
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv138[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv138[ebp]
	fstp	DWORD PTR [eax]

; 1266 : 	
; 1267 : 	// Set angular velocity to 0, except for yaw.
; 1268 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1269 : 	_aVel[I_PITCH] = PitchDecay();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PitchDecay@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::PitchDecay
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv140[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv140[ebp]
	fstp	DWORD PTR [eax]

; 1270 : 	_aVel[I_YAW] = YawSpeed();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YawSpeed@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::YawSpeed
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv142[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv142[ebp]
	fstp	DWORD PTR [eax]

; 1271 : 	_stageTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 1272 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ ENDP ; EjectedPilotClass::InitFreeFallWithOpenChute
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv164 = -8						; size = 4
_this$ = -4						; size = 4
?InitChuteOpening@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::InitChuteOpening
; _this$ = ecx

; 1237 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1238 : 	// Set the new BSP.
; 1239 : 	SetModel(MD_PILOT_AND_OPEN_CHUTE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModel@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetModel

; 1240 : 	
; 1241 : 	// Set the orientation to upright
; 1242 : 	_rot[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1243 : 	_rot[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1244 : 	_rot[I_YAW] = _vel.Heading();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	?Heading@?$Vector_3D@M@@QBEMXZ		; Vector_3D<float>::Heading
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv164[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv164[ebp]
	fstp	DWORD PTR [eax]

; 1245 : 
; 1246 : 	// Set angular velocity to 0.
; 1247 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1248 : 	_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1249 : 	_aVel[I_YAW] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1250 : 
; 1251 : 	// play the sound
; 1252 : #ifdef MLR_NEWSNDCODE	
; 1253 : 	SoundPos.Sfx( SFX_CHUTE, 0, 1.0f , 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	106					; 0000006aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 1254 : #else
; 1255 : 	F4SoundFXSetPos( SFX_CHUTE, TRUE, XPos(), YPos(), ZPos(), 1.0f , 0 , XDelta(),YDelta(),ZDelta());
; 1256 : #endif
; 1257 : 
; 1258 : 	_stageTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 1259 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitChuteOpening@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::InitChuteOpening
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 8
$T3 = -48						; size = 8
$T4 = -40						; size = 4
tv139 = -36						; size = 4
$T5 = -32						; size = 4
tv128 = -28						; size = 4
_flight$ = -24						; size = 4
_this$ = -20						; size = 4
_radioMessage$6 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::InitFreeFallWithSeat
; _this$ = ecx

; 1196 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1197 :    // PlayRadioMessage (rcAIRMANDOWNA)
; 1198 :    // PlayRadioMessage (rcAIRMANDOWNE)
; 1199 :    // PlayRadioMessage (rcAIRMANDOWNF)
; 1200 :    // _aircraft is pointer to the plane the pilot came from.
; 1201 :    // check _aircraft->flightPtr for someone in the flight to see the chute
; 1202 :    // Randomize these three (i think)
; 1203 : 	Flight flight;
; 1204 : 	flight = (Flight) vuDatabase->Find(_flightId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	push	ecx
	mov	edx, DWORD PTR [eax+680]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$[ebp], eax

; 1205 : 
; 1206 : 	if(flight)

	cmp	DWORD PTR _flight$[ebp], 0
	je	$LN3@InitFreeFa

; 1207 : 	{
; 1208 : 		FalconRadioChatterMessage *radioMessage = new FalconRadioChatterMessage( flight->Id(), FalconLocalGame );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN8@InitFreeFa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@InitFreeFa
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN7@InitFreeFa
$LN6@InitFreeFa:
	mov	DWORD PTR tv128[ebp], 0
$LN7@InitFreeFa:
	push	1
	mov	ecx, DWORD PTR tv128[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN9@InitFreeFa
$LN8@InitFreeFa:
	mov	DWORD PTR tv139[ebp], 0
$LN9@InitFreeFa:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR _radioMessage$6[ebp], ecx

; 1209 : 		radioMessage->dataBlock.from = flight->Id();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$6[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 1210 : 		radioMessage->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	mov	BYTE PTR [ecx+60], 1

; 1211 : 		radioMessage->dataBlock.voice_id = flight->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _flight$[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	edx, DWORD PTR _radioMessage$6[ebp]
	mov	BYTE PTR [edx+61], al

; 1212 : 		if(rand() %2)

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN12@InitFreeFa
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN12@InitFreeFa:
	test	eax, eax
	je	SHORT $LN2@InitFreeFa

; 1213 : 		{
; 1214 : 			radioMessage->dataBlock.message = rcAIRMANDOWNE;

	mov	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [ecx+62], ax

; 1215 : 			radioMessage->dataBlock.edata[0] = SimToGrid(YPos());// MN Fix - need SimToGrid, not FloatToInt32 as previoiusly..

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	imul	edx, 0
	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1216 : 			radioMessage->dataBlock.edata[1] = SimToGrid(XPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SimToGrid@@YAFM@Z			; SimToGrid
	add	esp, 4
	mov	edx, 2
	shl	edx, 0
	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 1217 : 		}
; 1218 : 		else

	jmp	SHORT $LN1@InitFreeFa
$LN2@InitFreeFa:

; 1219 : 		{
; 1220 : 			radioMessage->dataBlock.message = rcAIRMANDOWNA;

	mov	edx, 7
	mov	eax, DWORD PTR _radioMessage$6[ebp]
	mov	WORD PTR [eax+62], dx
$LN1@InitFreeFa:

; 1221 : 		}
; 1222 : 		
; 1223 : 		FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	ecx, DWORD PTR _radioMessage$6[ebp]
	push	ecx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN3@InitFreeFa:

; 1224 : 	}
; 1225 : 
; 1226 : 	// Pitch and roll should be zero.
; 1227 : 	ZeroPitchAndRoll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZeroPitchAndRoll@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::ZeroPitchAndRoll

; 1228 : 		
; 1229 : 	// Set angular velocity to 0, except for yaw.
; 1230 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1231 : 	_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1232 : 	_aVel[I_YAW] = PI/6.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@3f060a92
	movss	DWORD PTR [eax], xmm0

; 1233 : 	_stageTimer = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+716], xmm0

; 1234 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::InitFreeFallWithSeat
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -44						; size = 4
_ejectVec$ = -40					; size = 12
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InitEjectSeat@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::InitEjectSeat
; _this$ = ecx

; 1158 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitEjectSeat@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1159 : 	EP_VECTOR
; 1160 : 		ejectVec;

	lea	ecx, DWORD PTR _ejectVec$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1161 : 
; 1162 : 	// Find and set the position of the seat in the cockpit.
; 1163 : 	CalculateAndSetPositionAndOrientationInCockpit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::CalculateAndSetPositionAndOrientationInCockpit

; 1164 : 
; 1165 : 	// Calculate the ejection vector
; 1166 : 	CalculateEjectionVector(ejectVec);

	lea	eax, DWORD PTR _ejectVec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateEjectionVector@EjectedPilotClass@@ABEXAAV?$Vector_3D@M@@@Z ; EjectedPilotClass::CalculateEjectionVector

; 1167 : 	
; 1168 : 	// Apply initial velocity of n ft/sec, at eject angle.
; 1169 : 	// Add the velocity of the plane.
; 1170 : //XX	_vel += ejectVec * EjectSpeed();
; 1171 : 	EP_VECTOR p;

	lea	ecx, DWORD PTR _p$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1172 : 	p = ejectVec;

	lea	ecx, DWORD PTR _ejectVec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _p$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 1173 : 	p *= EjectSpeed();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EjectSpeed@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::EjectSpeed
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _p$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 1174 : 	_vel += p;

	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 1175 : 
; 1176 :    F4Assert (_vel[I_X] <  10000.0F);
; 1177 :    F4Assert (_vel[I_X] > -10000.0F);
; 1178 :    F4Assert (_vel[I_Y] <  10000.0F);
; 1179 :    F4Assert (_vel[I_Y] > -10000.0F);
; 1180 :    F4Assert (_vel[I_Z] <  10000.0F);
; 1181 :    F4Assert (_vel[I_Z] > -10000.0F);
; 1182 : 	
; 1183 : 	// No angular velocity.
; 1184 : 	_aVel[I_ROLL] = 0.0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1185 : 	_aVel[I_PITCH] = 0.0;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1186 : 	_aVel[I_YAW] = 0.0;

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 1187 : 	_stageTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 1188 : 
; 1189 : 	if(IsPlayerPilot())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayerPilot@EjectedPilotClass@@QBEHXZ ; EjectedPilotClass::IsPlayerPilot
	test	eax, eax
	je	SHORT $LN1@InitEjectS

; 1190 : 	{
; 1191 : 		OTWDriver.StartEjectCam(this);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?StartEjectCam@OTWDriverClass@@QAEXPAVEjectedPilotClass@@H@Z ; OTWDriverClass::StartEjectCam
$LN1@InitEjectS:

; 1192 : 	}
; 1193 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _p$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ejectVec$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitEjectSeat@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR _ejectVec$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?InitEjectSeat@EjectedPilotClass@@AAEXXZ$1:
	lea	ecx, DWORD PTR _p$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?InitEjectSeat@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitEjectSeat@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitEjectSeat@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::InitEjectSeat
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T1 = -20						; size = 8
_session$2 = -12					; size = 4
_aircraft$ = -8						; size = 4
_this$ = -4						; size = 4
?InitJettisonCanopy@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::InitJettisonCanopy
; _this$ = ecx

; 1125 : void EjectedPilotClass::InitJettisonCanopy(){

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1126 : 	AircraftClass	*aircraft = (AircraftClass*) vuDatabase->Find(_aircraftId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	push	ecx
	mov	edx, DWORD PTR [eax+672]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _aircraft$[ebp], eax

; 1127 : 
; 1128 : 	_stageTimer = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+716], xmm0

; 1129 : 
; 1130 : 	if (aircraft)

	cmp	DWORD PTR _aircraft$[ebp], 0
	je	SHORT $LN1@InitJettis

; 1131 : 	{
; 1132 : 		FalconSessionEntity *session = (FalconSessionEntity*) vuDatabase->Find(OwnerId());

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ	; VuEntity::OwnerId
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _session$2[ebp], eax

; 1133 : 
; 1134 : 		// Turn off the canopy.
; 1135 : 		aircraft->SetSwitch(SIMP_CANOPY, FALSE);

	push	0
	push	5
	mov	ecx, DWORD PTR _aircraft$[ebp]
	call	?SetSwitch@SimMoverClass@@QAEXHH@Z	; SimMoverClass::SetSwitch

; 1136 : 
; 1137 : 		// Find and set the position of the seat in the cockpit.
; 1138 : 		CalculateAndSetPositionAndOrientationInCockpit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAndSetPositionAndOrientationInCockpit@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::CalculateAndSetPositionAndOrientationInCockpit

; 1139 : 
; 1140 : 		// Create the drawable bsp here.
; 1141 : 		// SCR 5/27/98  At this point a drawable was already created based on class table data in 
; 1142 : 		// the OTWDriver::CreateVisualObject() function.  It might be okay to just use that if it
; 1143 : 		// is always correcct, but for now I'll go ahead and let the existing draw pointer get 
; 1144 : 		// deleted and a new one created in its place in the SetModel() call...
; 1145 : 		SetModel(MD_PILOT_AND_SEAT);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModel@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetModel

; 1146 : 
; 1147 : 		if(IsPlayerPilot() && session == FalconLocalSession)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayerPilot@EjectedPilotClass@@QBEHXZ ; EjectedPilotClass::IsPlayerPilot
	test	eax, eax
	je	SHORT $LN1@InitJettis
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	cmp	DWORD PTR _session$2[ebp], eax
	jne	SHORT $LN1@InitJettis

; 1148 : 		{
; 1149 : 			// The sim driver now needs to know that the ejected pilot is the player entity.
; 1150 : 			// KCK: We unfortunately need to do this outside of our exec loop, since it will
; 1151 : 			// destroy our driver. So send a message which we'll handle later in the sim cycle.
; 1152 : 			GameManager.AnnounceTransfer(aircraft,this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aircraft$[ebp]
	push	edx
	mov	ecx, OFFSET ?GameManager@@3VGameManagerClass@@A ; GameManager
	call	?AnnounceTransfer@GameManagerClass@@QAEXPAVSimBaseClass@@0@Z ; GameManagerClass::AnnounceTransfer
$LN1@InitJettis:

; 1153 : 		}
; 1154 : 	}
; 1155 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitJettisonCanopy@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::InitJettisonCanopy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 4
tv191 = -84						; size = 4
$T4 = -80						; size = 4
$T5 = -76						; size = 4
tv241 = -72						; size = 4
_this$ = -68						; size = 4
_rot$ = -64						; size = 36
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_model$ = 8						; size = 4
?SetModel@EjectedPilotClass@@AAEXH@Z PROC		; EjectedPilotClass::SetModel
; _this$ = ecx

; 1074 : void EjectedPilotClass::SetModel(int model){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetModel@EjectedPilotClass@@AAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1075 : 	Trotation rot;
; 1076 : 	Tpoint pos;
; 1077 : 	// Destroy the current bsp.
; 1078 : 	if(drawPointer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN7@SetModel

; 1079 : 	{
; 1080 : 		drawPointer->GetPosition (&pos);

	lea	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ; DrawableObject::GetPosition

; 1081 : 		OTWDriver.RemoveObject(drawPointer, TRUE);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?RemoveObject@OTWDriverClass@@QAEXPAVDrawableObject@@H@Z ; OTWDriverClass::RemoveObject

; 1082 : 		drawPointer = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+332], 0

; 1083 : 	}
; 1084 : 	else

	jmp	SHORT $LN6@SetModel
$LN7@SetModel:

; 1085 : 	{
; 1086 : 		pos.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _pos$[ebp]

; 1087 : 		pos.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _pos$[ebp+4]

; 1088 : 		pos.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _pos$[ebp+8]
$LN6@SetModel:

; 1089 : 	}
; 1090 : 
; 1091 : 	// Set our new model.
; 1092 : 	_model = model;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _model$[ebp]
	mov	DWORD PTR [eax+700], ecx

; 1093 : 	
; 1094 : 	// Create the new bsp.
; 1095 : 	_rot.GetTrotation(rot);

	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation

; 1096 : 	if ( _md[_model].bsp == VIS_GUYDIE || _md[_model].bsp == VIS_DOWN_PILOT )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	cmp	DWORD PTR [eax+ecx], 556		; 0000022cH
	je	SHORT $LN4@SetModel
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+700]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+696]
	cmp	DWORD PTR [ecx+edx], 557		; 0000022dH
	jne	$LN5@SetModel
$LN4@SetModel:

; 1097 : 	{
; 1098 :       if (pos.z > 0.0F)

	movss	xmm0, DWORD PTR _pos$[ebp+8]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@SetModel

; 1099 :          pos.z = 0.0F;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _pos$[ebp+8], xmm0
$LN3@SetModel:

; 1100 : 		drawPointer = new DrawableGuys(_md[_model].bsp, &pos, Yaw(), 1, 1.0 );

	push	200					; 000000c8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN10@SetModel
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0DrawableGuys@@QAE@HPAUTpoint@@MHM@Z	; DrawableGuys::DrawableGuys
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN11@SetModel
$LN10@SetModel:
	mov	DWORD PTR tv191[ebp], 0
$LN11@SetModel:
	mov	edx, DWORD PTR tv191[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+332], ecx

; 1101 : 		((DrawableBSP *)drawPointer)->SetSwitchMask( 0, 1 );

	push	1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 1102 : 		((DrawableBSP *)drawPointer)->SetSwitchMask( 1, 1 );

	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask

; 1103 : 	}
; 1104 : 	/*
; 1105 : 	** edg: better to show nothing than the crappy oval shadow
; 1106 : 	else if ( _md[_model].bsp == VIS_EJECT1  )
; 1107 : 	{
; 1108 : 		drawPointer = new DrawableShadowed(_md[_model].bsp, &pos, &rot, 1.0, VIS_PCHUTESH);
; 1109 : 	}
; 1110 : 	*/
; 1111 : 	else 

	jmp	SHORT $LN2@SetModel
$LN5@SetModel:

; 1112 : 	{
; 1113 : 		drawPointer = new DrawableBSP(_md[_model].bsp, &pos, &rot, 1.0 );

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN12@SetModel
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rot$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0DrawableBSP@@QAE@HPBUTpoint@@PBUTrotation@@M@Z ; DrawableBSP::DrawableBSP
	mov	DWORD PTR tv241[ebp], eax
	jmp	SHORT $LN13@SetModel
$LN12@SetModel:
	mov	DWORD PTR tv241[ebp], 0
$LN13@SetModel:
	mov	edx, DWORD PTR tv241[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+332], ecx
$LN2@SetModel:

; 1114 : 	}
; 1115 : 	F4Assert(drawPointer != NULL);
; 1116 : 
; 1117 : 	// Set the label.
; 1118 : 	if(drawPointer && strlen(_label) > 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN1@SetModel
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 812				; 0000032cH
	push	eax
	call	_strlen
	add	esp, 4
	test	eax, eax
	jbe	SHORT $LN1@SetModel

; 1119 : 	{
; 1120 : 		drawPointer->SetLabel(_label, _labelColor);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 812				; 0000032cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+332]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 1121 : 		OTWDriver.InsertObject(drawPointer);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+332]
	push	edx
	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?InsertObject@OTWDriverClass@@QAEXPAVDrawableObject@@@Z ; OTWDriverClass::InsertObject
$LN1@SetModel:

; 1122 : 	}
; 1123 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetModel@EjectedPilotClass@@AAEXH@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?SetModel@EjectedPilotClass@@AAEXH@Z$1:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetModel@EjectedPilotClass@@AAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetModel@EjectedPilotClass@@AAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetModel@EjectedPilotClass@@AAEXH@Z ENDP		; EjectedPilotClass::SetModel
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?AdvanceStage@EjectedPilotClass@@AAEHXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?AdvanceStage@EjectedPilotClass@@AAEHXZ PROC		; EjectedPilotClass::AdvanceStage, COMDAT
; _this$ = ecx

; 213  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 	SetStage(++_stage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+692]
	add	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR [edx+692], eax
	mov	ecx, DWORD PTR tv67[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStage@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetStage

; 215  : 	return _stage;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+692]

; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?AdvanceStage@EjectedPilotClass@@AAEHXZ ENDP		; EjectedPilotClass::AdvanceStage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?SetStage@EjectedPilotClass@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stage$ = 8						; size = 4
?SetStage@EjectedPilotClass@@AAEXH@Z PROC		; EjectedPilotClass::SetStage, COMDAT
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  : 	_stage = stage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stage$[ebp]
	mov	DWORD PTR [eax+692], ecx

; 206  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStage@EjectedPilotClass@@AAEXH@Z ENDP		; EjectedPilotClass::SetStage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv232 = -52						; size = 4
tv223 = -48						; size = 4
tv230 = -44						; size = 4
tv174 = -40						; size = 4
tv67 = -36						; size = 4
_this$ = -32						; size = 4
_p$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?AdvanceTime@EjectedPilotClass@@AAEXXZ PROC		; EjectedPilotClass::AdvanceTime
; _this$ = ecx

; 971  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AdvanceTime@EjectedPilotClass@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 972  : 	// Get delta time.
; 973  : 	_deltaTime = 
; 974  : 	(
; 975  : 		_stage == PD_START ?
; 976  : 		0.0F :
; 977  : 		SimLibMajorFrameTime
; 978  : 	);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+692], -1
	jne	SHORT $LN20@AdvanceTim
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv67[ebp], xmm0
	jmp	SHORT $LN21@AdvanceTim
$LN20@AdvanceTim:
	movss	xmm0, DWORD PTR ?SimLibMajorFrameTime@@3MA
	movss	DWORD PTR tv67[ebp], xmm0
$LN21@AdvanceTim:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv67[ebp]
	movss	DWORD PTR [ecx+708], xmm0

; 979  : 
; 980  : 	// Update position.
; 981  : //XX	_pos += _vel * _deltaTime;
; 982  : 		EP_VECTOR p;

	lea	ecx, DWORD PTR _p$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 983  : 		p = _vel;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 748				; 000002ecH
	push	edx
	lea	ecx, DWORD PTR _p$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 984  : 		p *= _deltaTime;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+708]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _p$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 985  : 		_pos += p;

	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 986  : 	
; 987  : 	// Update orientation.
; 988  :    // Set roll velocity to -roll angle, tilt back towards the sun
; 989  :    // Set pitch velocity to -pitch angle, tilt back towards the sun
; 990  :    _aVel[I_PITCH] = -_rot[I_PITCH]*1.5F;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3fc00000
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	movss	DWORD PTR tv230[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv230[ebp]
	movss	DWORD PTR [eax], xmm0

; 991  :    _aVel[I_ROLL] = -_rot[I_ROLL]*1.5F;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@3fc00000
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	movss	DWORD PTR tv232[ebp], xmm0
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	movss	xmm0, DWORD PTR tv232[ebp]
	movss	DWORD PTR [eax], xmm0

; 992  : //XX	_rot += _aVel * _deltaTime;
; 993  :    p = _aVel;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 760				; 000002f8H
	push	edx
	lea	ecx, DWORD PTR _p$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 994  :    p *= _deltaTime;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+708]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _p$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 995  :    _rot += p;

	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=

; 996  : //MonoPrint ("Pitch %.2f rate %.2f\n", _rot[I_PITCH]*RTD, _aVel[I_PITCH]*RTD);
; 997  : 	
; 998  : 	// Increment total run time.
; 999  : 	_runTime += _deltaTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+704]
	addss	xmm0, DWORD PTR [eax+708]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+704], xmm0

; 1000 : 	
; 1001 : 	// Advance stage if necessary.
; 1002 : 	if(!_hitGround && _collapseChute && _stage != PD_FREE_FALL_WITH_COLLAPSED_CHUTE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+780], 0
	jne	SHORT $LN17@AdvanceTim
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+788], 0
	je	SHORT $LN17@AdvanceTim
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+692], 5
	je	SHORT $LN17@AdvanceTim

; 1003 : 	{
; 1004 : 		SetStage(PD_FREE_FALL_WITH_COLLAPSED_CHUTE);

	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStage@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetStage

; 1005 : 		InitFreeFallWithCollapsedChute();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitFreeFallWithCollapsedChute@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitFreeFallWithCollapsedChute
	jmp	$LN9@AdvanceTim
$LN17@AdvanceTim:

; 1006 : 	}
; 1007 : 	// advance when ground has been hit
; 1008 : 	else if ( _hitGround )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+780], 0
	je	SHORT $LN15@AdvanceTim

; 1009 : 	{
; 1010 : 		if ( _stage < PD_SAFE_LANDING )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+692], 6
	jge	SHORT $LN12@AdvanceTim

; 1011 : 		{
; 1012 : 			// only open chute results in safe landing
; 1013 : 			if ( _stage == PD_FREE_FALL_WITH_OPEN_CHUTE )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+692], 4
	jne	SHORT $LN13@AdvanceTim

; 1014 : 			{
; 1015 : 				SetStage(PD_SAFE_LANDING);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStage@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetStage

; 1016 : 				InitSafeLanding();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitSafeLanding@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitSafeLanding

; 1017 : 			}
; 1018 : 			else

	jmp	SHORT $LN12@AdvanceTim
$LN13@AdvanceTim:

; 1019 : 			{
; 1020 : 				SetStage(PD_CRASH_LANDING);

	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStage@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetStage

; 1021 : 				InitCrashLanding();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitCrashLanding@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitCrashLanding
$LN12@AdvanceTim:

; 1022 : 			}
; 1023 : 		}
; 1024 : 	}
; 1025 : 	else

	jmp	SHORT $LN9@AdvanceTim
$LN15@AdvanceTim:

; 1026 : 	{
; 1027 : 		while(_stage < PD_FREE_FALL_WITH_OPEN_CHUTE && _runTime >= StageEndTime())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+692], 4
	jge	SHORT $LN9@AdvanceTim
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StageEndTime@EjectedPilotClass@@ABEMXZ	; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv223[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+704]
	comiss	xmm0, DWORD PTR tv223[ebp]
	jb	SHORT $LN9@AdvanceTim

; 1028 : 		{
; 1029 : 			switch(AdvanceStage())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceStage@EjectedPilotClass@@AAEHXZ	; EjectedPilotClass::AdvanceStage
	mov	DWORD PTR tv174[ebp], eax
	cmp	DWORD PTR tv174[ebp], 4
	ja	SHORT $LN1@AdvanceTim
	mov	ecx, DWORD PTR tv174[ebp]
	jmp	DWORD PTR $LN24@AdvanceTim[ecx*4]
$LN6@AdvanceTim:

; 1030 : 			{
; 1031 : 				case PD_JETTISON_CANOPY :
; 1032 : 				{
; 1033 : 					InitJettisonCanopy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitJettisonCanopy@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitJettisonCanopy

; 1034 : 	
; 1035 : 					break;

	jmp	SHORT $LN7@AdvanceTim
$LN5@AdvanceTim:

; 1036 : 				}
; 1037 : 				case PD_EJECT_SEAT :
; 1038 : 				{
; 1039 : 					InitEjectSeat();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitEjectSeat@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitEjectSeat

; 1040 : 	
; 1041 : 					break;

	jmp	SHORT $LN7@AdvanceTim
$LN4@AdvanceTim:

; 1042 : 				}
; 1043 : 				case PD_FREE_FALL_WITH_SEAT :
; 1044 : 				{
; 1045 : 					InitFreeFallWithSeat();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitFreeFallWithSeat@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitFreeFallWithSeat

; 1046 : 	
; 1047 : 					break;

	jmp	SHORT $LN7@AdvanceTim
$LN3@AdvanceTim:

; 1048 : 				}
; 1049 : 				case PD_CHUTE_OPENING :
; 1050 : 				{
; 1051 : 					InitChuteOpening();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitChuteOpening@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitChuteOpening

; 1052 : 	
; 1053 : 					break;

	jmp	SHORT $LN7@AdvanceTim
$LN2@AdvanceTim:

; 1054 : 				}
; 1055 : 				case PD_FREE_FALL_WITH_OPEN_CHUTE :
; 1056 : 				{
; 1057 : 					InitFreeFallWithOpenChute();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::InitFreeFallWithOpenChute
$LN1@AdvanceTim:
$LN7@AdvanceTim:

; 1058 : 	
; 1059 : 					break;
; 1060 : 				}
; 1061 : 				default :
; 1062 : 				{
; 1063 : 					ShiWarning ("Bad Eject Mode");
; 1064 : 				}
; 1065 : 			}
; 1066 : 		}

	jmp	SHORT $LN15@AdvanceTim
$LN9@AdvanceTim:

; 1067 : 
; 1068 : #if DEBUG_EJECTION_SEQUENCE
; 1069 : 		SpewDebugData();
; 1070 : #endif // DEBUG_EJECTION_SEQUENCE
; 1071 : 	}
; 1072 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _p$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@AdvanceTim:
	DD	$LN6@AdvanceTim
	DD	$LN5@AdvanceTim
	DD	$LN4@AdvanceTim
	DD	$LN3@AdvanceTim
	DD	$LN2@AdvanceTim
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AdvanceTime@EjectedPilotClass@@AAEXXZ$0:
	lea	ecx, DWORD PTR _p$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?AdvanceTime@EjectedPilotClass@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AdvanceTime@EjectedPilotClass@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AdvanceTime@EjectedPilotClass@@AAEXXZ ENDP		; EjectedPilotClass::AdvanceTime
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SetMode@EjectedPilotClass@@AAEXH@Z PROC		; EjectedPilotClass::SetMode
; _this$ = ecx

; 929  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 	// Point us to the correct physical data.
; 931  : 	switch(mode){

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN2@SetMode
	jmp	SHORT $LN5@SetMode
$LN2@SetMode:

; 932  : 		case EM_F16_MODE1: {
; 933  : 			_pd = &F16Mode1PhysicalData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+688], OFFSET ?F16Mode1PhysicalData@@3UEP_PHYS_DATA@@A ; F16Mode1PhysicalData

; 934  : 			_md = F16ModelData;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+696], OFFSET ?F16ModelData@@3PAUEP_MODEL_DATA@@A ; F16ModelData
$LN5@SetMode:

; 935  : 
; 936  : 			break;
; 937  : 		}
; 938  : 		default: {
; 939  : 			ShiWarning("Bad Eject Mode");
; 940  : 		}
; 941  : 	}
; 942  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetMode@EjectedPilotClass@@AAEXH@Z ENDP		; EjectedPilotClass::SetMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?ModelCreateTime@EjectedPilotClass@@ABEMH@Z
_TEXT	SEGMENT
tv74 = -12						; size = 4
_creationStage$ = -8					; size = 4
_this$ = -4						; size = 4
_model$ = 8						; size = 4
?ModelCreateTime@EjectedPilotClass@@ABEMH@Z PROC	; EjectedPilotClass::ModelCreateTime, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	int creationStage;
; 187  : 
; 188  : 	F4Assert(_md != NULL);
; 189  : 
; 190  : 	creationStage = _md[model].creationStage;

	mov	eax, DWORD PTR _model$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+696]
	mov	eax, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _creationStage$[ebp], eax

; 191  : 	return 
; 192  : 	(
; 193  : 		creationStage == PD_FREE_FALL_WITH_COLLAPSED_CHUTE ?
; 194  : 		_chuteCollapsedTime : 
; 195  : 		StageEndTime(creationStage - 1)
; 196  : 	);

	cmp	DWORD PTR _creationStage$[ebp], 5
	jne	SHORT $LN3@ModelCreat
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+792]
	movss	DWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN4@ModelCreat
$LN3@ModelCreat:
	mov	edx, DWORD PTR _creationStage$[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv74[ebp]
$LN4@ModelCreat:
	fld	DWORD PTR tv74[ebp]

; 197  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ModelCreateTime@EjectedPilotClass@@ABEMH@Z ENDP	; EjectedPilotClass::ModelCreateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?SeatOffset@EjectedPilotClass@@ABE?AV?$Vector_3D@M@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?SeatOffset@EjectedPilotClass@@ABE?AV?$Vector_3D@M@@XZ PROC ; EjectedPilotClass::SeatOffset, COMDAT
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 168  : 	// Do some assertions.
; 169  : 	F4Assert(_pd != NULL);
; 170  : 
; 171  : 	// Give us the data that we want.
; 172  : 	return EP_VECTOR
; 173  : 	(
; 174  : 		_pd->seatXOffset,
; 175  : 		_pd->seatYOffset,
; 176  : 		_pd->seatZOffset
; 177  : 	);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+128]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+688]
	push	ecx
	movss	xmm0, DWORD PTR [eax+124]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	push	ecx
	movss	xmm0, DWORD PTR [edx+120]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 178  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SeatOffset@EjectedPilotClass@@ABE?AV?$Vector_3D@M@@XZ ENDP ; EjectedPilotClass::SeatOffset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?YawSpeed@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?YawSpeed@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::YawSpeed, COMDAT
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 	// Do some assertions.
; 156  : 	F4Assert(_pd != NULL);
; 157  : 
; 158  : 	// Give us the data that we want.
; 159  : 	return (_pd->yawSpeed);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	movss	xmm0, DWORD PTR [ecx+116]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 160  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?YawSpeed@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::YawSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?PitchDecay@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?PitchDecay@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::PitchDecay, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 	// Do some assertions.
; 143  : 	F4Assert(_pd != NULL);
; 144  : 
; 145  : 	// Give us the data that we want.
; 146  : 	return (_pd->pitchDecay);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	movss	xmm0, DWORD PTR [ecx+112]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?PitchDecay@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::PitchDecay
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?StartPitch@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?StartPitch@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::StartPitch, COMDAT
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	// Do some assertions.
; 130  : 	F4Assert(_pd != NULL);
; 131  : 
; 132  : 	// Give us the data that we want.
; 133  : 	return (_pd->startPitch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	movss	xmm0, DWORD PTR [ecx+108]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartPitch@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::StartPitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?EjectAngle@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?EjectAngle@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::EjectAngle, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 	// Do some assertions.
; 117  : 	F4Assert(_pd != NULL);
; 118  : 
; 119  : 	// Give us the data that we want.
; 120  : 	return (_pd->ejectAngle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	movss	xmm0, DWORD PTR [ecx+104]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 121  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EjectAngle@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::EjectAngle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?SeatThrust@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?SeatThrust@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::SeatThrust, COMDAT
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	// Do some assertions.
; 104  : 	F4Assert(_pd != NULL);
; 105  : 
; 106  : 	// Give us the data that we want.
; 107  : 	return (_pd->seatThrust);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	movss	xmm0, DWORD PTR [ecx+100]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 108  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SeatThrust@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::SeatThrust
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?EjectSpeed@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?EjectSpeed@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::EjectSpeed, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	// Do some assertions.
; 91   : 	F4Assert(_pd != NULL);
; 92   : 
; 93   : 	// Give us the data that we want.
; 94   : 	return (_pd->ejectSpeed);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	movss	xmm0, DWORD PTR [ecx+96]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 95   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EjectSpeed@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::EjectSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?Mass@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?Mass@EjectedPilotClass@@ABEMXZ PROC			; EjectedPilotClass::Mass, COMDAT
; _this$ = ecx

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 	// Do some assertions.
; 78   : 	F4Assert(_pd != NULL);
; 79   : 	
; 80   : 	// Give us the data that we want.
; 81   : 	return (_pd->stageData[_stage][SDPD_MASS_INDEX]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+692]
	imul	eax, 12					; 0000000cH
	add	ecx, eax
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Mass@EjectedPilotClass@@ABEMXZ ENDP			; EjectedPilotClass::Mass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?DragFactor@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?DragFactor@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::DragFactor, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	// Do some assertions.
; 65   : 	F4Assert(_pd != NULL);
; 66   : 
; 67   : 	// Give us the data that we want.
; 68   : 	return (_pd->stageData[_stage][SDPD_DRAG_FACTOR_INDEX]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+692]
	imul	eax, 12					; 0000000cH
	add	ecx, eax
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR [ecx+edx]
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]

; 69   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DragFactor@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::DragFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?StageEndTime@EjectedPilotClass@@ABEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StageEndTime@EjectedPilotClass@@ABEMXZ PROC		; EjectedPilotClass::StageEndTime, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	return StageEndTime(_stage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+692]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime

; 56   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StageEndTime@EjectedPilotClass@@ABEMXZ ENDP		; EjectedPilotClass::StageEndTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?StageEndTime@EjectedPilotClass@@ABEMH@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_stage$ = 8						; size = 4
?StageEndTime@EjectedPilotClass@@ABEMH@Z PROC		; EjectedPilotClass::StageEndTime, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	// Do some assertions.
; 38   : 	F4Assert(_pd != NULL);
; 39   : 
; 40   : 	// Give us the data that we want.
; 41   : 	return 
; 42   : 	(
; 43   : 		stage <= PD_START ?
; 44   : 		0.0F :
; 45   : 		_pd->stageData[stage][SDPD_END_TIME_INDEX] + _endStageTimeAdjust
; 46   : 	);

	cmp	DWORD PTR _stage$[ebp], -1
	jg	SHORT $LN3@StageEndTi
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN4@StageEndTi
$LN3@StageEndTi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+688]
	mov	edx, DWORD PTR _stage$[ebp]
	imul	edx, 12					; 0000000cH
	add	ecx, edx
	mov	eax, 4
	imul	eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	addss	xmm0, DWORD PTR [edx+712]
	movss	DWORD PTR tv73[ebp], xmm0
$LN4@StageEndTi:
	fld	DWORD PTR tv73[ebp]

; 47   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?StageEndTime@EjectedPilotClass@@ABEMH@Z ENDP		; EjectedPilotClass::StageEndTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?IsDigiPilot@EjectedPilotClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsDigiPilot@EjectedPilotClass@@QBEHXZ PROC		; EjectedPilotClass::IsDigiPilot, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 248  : 	return
; 249  : 	(
; 250  : 		_isDigital ? TRUE : FALSE
; 251  : 	);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+772], 0
	je	SHORT $LN3@IsDigiPilo
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsDigiPilo
$LN3@IsDigiPilo:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsDigiPilo:
	mov	eax, DWORD PTR tv66[ebp]

; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsDigiPilot@EjectedPilotClass@@QBEHXZ ENDP		; EjectedPilotClass::IsDigiPilot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ?IsPlayerPilot@EjectedPilotClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsPlayerPilot@EjectedPilotClass@@QBEHXZ PROC		; EjectedPilotClass::IsPlayerPilot, COMDAT
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 	return
; 237  : 	(
; 238  : 		_isPlayer ? TRUE : FALSE
; 239  : 	);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+776], 0
	je	SHORT $LN3@IsPlayerPi
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsPlayerPi
$LN3@IsPlayerPi:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsPlayerPi:
	mov	eax, DWORD PTR tv66[ebp]

; 240  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayerPilot@EjectedPilotClass@@QBEHXZ ENDP		; EjectedPilotClass::IsPlayerPilot
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetParentAircraft@EjectedPilotClass@@QAEPAVAircraftClass@@XZ PROC ; EjectedPilotClass::GetParentAircraft
; _this$ = ecx

; 966  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 967  : 	return (AircraftClass*) vuDatabase->Find(_aircraftId); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	push	ecx
	mov	edx, DWORD PTR [eax+672]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find

; 968  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetParentAircraft@EjectedPilotClass@@QAEPAVAircraftClass@@XZ ENDP ; EjectedPilotClass::GetParentAircraft
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
?ClassType@EjectedPilotClass@@SAHXZ PROC		; EjectedPilotClass::ClassType

; 945  : {

	push	ebp
	mov	ebp, esp

; 946  : 	if(_classTypeFound == FALSE)

	cmp	DWORD PTR ?_classTypeFound@EjectedPilotClass@@0HA, 0 ; EjectedPilotClass::_classTypeFound
	jne	SHORT $LN1@ClassType

; 947  : 	{
; 948  : 		_classType = GetClassID 
; 949  : 		(
; 950  : 			DOMAIN_AIR,
; 951  : 			CLASS_VEHICLE,
; 952  : 			TYPE_EJECT,
; 953  : 			STYPE_EJECT1,
; 954  : 			SPTYPE_ANY,
; 955  : 			VU_ANY,
; 956  : 			VU_ANY,
; 957  : 			VU_ANY
; 958  : 		) + VU_LAST_ENTITY_TYPE;

	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	255					; 000000ffH
	push	1
	push	9
	push	7
	push	2
	call	?GetClassID@@YAHEEEEEEEE@Z		; GetClassID
	add	esp, 32					; 00000020H
	add	eax, 100				; 00000064H
	mov	DWORD PTR ?_classType@EjectedPilotClass@@0HA, eax ; EjectedPilotClass::_classType

; 959  : 		_classTypeFound = TRUE;

	mov	DWORD PTR ?_classTypeFound@EjectedPilotClass@@0HA, 1 ; EjectedPilotClass::_classTypeFound
$LN1@ClassType:

; 960  : 	}
; 961  : 
; 962  : 	return _classType;

	mov	eax, DWORD PTR ?_classType@EjectedPilotClass@@0HA ; EjectedPilotClass::_classType

; 963  : }

	pop	ebp
	ret	0
?ClassType@EjectedPilotClass@@SAHXZ ENDP		; EjectedPilotClass::ClassType
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv214 = -180						; size = 4
tv216 = -176						; size = 4
tv71 = -172						; size = 4
tv231 = -168						; size = 4
$T2 = -164						; size = 4
tv68 = -160						; size = 4
tv85 = -156						; size = 4
_totalTime$ = -152					; size = 4
tv135 = -148						; size = 4
_startTime$ = -144					; size = 4
_this$ = -140						; size = 4
_rot$ = -136						; size = 36
_worldSpaceOffset$ = -100				; size = 12
$T3 = -88						; size = 12
$T4 = -76						; size = 12
_modelSpaceOffset$ = -64				; size = 12
_finalFocus$ = -52					; size = 12
_deltaFocusPoint$ = -40					; size = 12
_pos$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z PROC	; EjectedPilotClass::GetFocusPoint
; _this$ = ecx

; 836  : void EjectedPilotClass::GetFocusPoint(BIG_SCALAR &x, BIG_SCALAR &y, BIG_SCALAR &z){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 837  : 	SIM_FLOAT startTime, totalTime;
; 838  : 
; 839  : 	EP_VECTOR deltaFocusPoint, finalFocus, pos;

	lea	ecx, DWORD PTR _deltaFocusPoint$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _finalFocus$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 840  : 
; 841  : 	Trotation rot; 
; 842  : 
; 843  : 	Tpoint modelSpaceOffset, worldSpaceOffset;
; 844  : 
; 845  : 	F4Assert(_model != MD_START);
; 846  : 
; 847  : 	/*
; 848  : 	x = XPos() + _md[_model].focusOffset[I_X];
; 849  : 	y = YPos() + _md[_model].focusOffset[I_Y];
; 850  : 	z = ZPos() + _md[_model].focusOffset[I_Z];
; 851  : 
; 852  : 	return;
; 853  : 	switch(_stage)
; 854  : 	{
; 855  : 		case PD_FREE_FALL_WITH_OPEN_CHUTE :
; 856  : 		case PD_FREE_FALL_WITH_COLLAPSED_CHUTE :
; 857  : 		case PD_SAFE_LANDING :
; 858  : 		case PD_CRASH_LANDING :
; 859  : 			x = XPos() + _md[_model].focusOffset[I_X];
; 860  : 			y = YPos() + _md[_model].focusOffset[I_Y];
; 861  : 			z = ZPos() + _md[_model].focusOffset[I_Z];
; 862  : 			break;
; 863  : 		case PD_JETTISON_CANOPY :
; 864  : 		case PD_EJECT_SEAT :
; 865  : 		case PD_FREE_FALL_WITH_SEAT :
; 866  : 		case PD_CHUTE_OPENING :
; 867  : 		default :
; 868  : 			x = XPos();
; 869  : 			y = YPos();
; 870  : 			z = ZPos();
; 871  : 			break;
; 872  : 	}
; 873  : 
; 874  : 	return;
; 875  : 	*/
; 876  : 
; 877  : 	// Get the model space offset here.  We should linearly interpolate
; 878  : 	// over time so that the focus point doesnt jump around.
; 879  : 	startTime = ModelCreateTime(_model);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ModelCreateTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::ModelCreateTime
	fstp	DWORD PTR _startTime$[ebp]

; 880  : 	totalTime =
; 881  : 	(
; 882  : 		_model >= MD_PILOT_AND_OPEN_CHUTE ?
; 883  : 		5.0F :
; 884  : 		ModelCreateTime(_model + 1) - startTime
; 885  : 	);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+700], 1
	jl	SHORT $LN6@GetFocusPo
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN7@GetFocusPo
$LN6@GetFocusPo:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ModelCreateTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::ModelCreateTime
	fstp	DWORD PTR tv231[ebp]
	movss	xmm0, DWORD PTR tv231[ebp]
	subss	xmm0, DWORD PTR _startTime$[ebp]
	movss	DWORD PTR tv85[ebp], xmm0
$LN7@GetFocusPo:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _totalTime$[ebp], xmm0

; 886  : 	F4Assert(totalTime > 0.0F);
; 887  : 	finalFocus = 
; 888  : 	(
; 889  : 		_model >= MD_PILOT_AND_OPEN_CHUTE ?
; 890  : 		_md[_model].focusOffset :
; 891  : 		_md[_model + 1].focusOffset
; 892  : 	);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+700], 1
	jl	SHORT $LN8@GetFocusPo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+700]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+696]
	lea	ecx, DWORD PTR [eax+ecx+12]
	mov	DWORD PTR tv135[ebp], ecx
	jmp	SHORT $LN9@GetFocusPo
$LN8@GetFocusPo:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+700]
	add	eax, 1
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+696]
	lea	eax, DWORD PTR [edx+eax+12]
	mov	DWORD PTR tv135[ebp], eax
$LN9@GetFocusPo:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	ecx, DWORD PTR _finalFocus$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 893  : 	if(_runTime > startTime + totalTime)

	movss	xmm0, DWORD PTR _startTime$[ebp]
	addss	xmm0, DWORD PTR _totalTime$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+704]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@GetFocusPo

; 894  : 	{
; 895  : 		_focusPoint = finalFocus;			

	lea	ecx, DWORD PTR _finalFocus$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	jmp	SHORT $LN1@GetFocusPo
$LN3@GetFocusPo:

; 896  : 	}
; 897  : 	else if(_runTime > startTime)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+704]
	comiss	xmm0, DWORD PTR _startTime$[ebp]
	jbe	SHORT $LN1@GetFocusPo

; 898  : 	{
; 899  : //XX		deltaFocusPoint = finalFocus - _focusPoint;
; 900  : 		deltaFocusPoint = finalFocus;

	lea	eax, DWORD PTR _finalFocus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _deltaFocusPoint$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 901  : 		deltaFocusPoint -= _focusPoint;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	push	ecx
	lea	ecx, DWORD PTR _deltaFocusPoint$[ebp]
	call	??Z?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator-=

; 902  : 
; 903  : 		deltaFocusPoint *= (_runTime - startTime) / totalTime;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+704]
	subss	xmm0, DWORD PTR _startTime$[ebp]
	divss	xmm0, DWORD PTR _totalTime$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _deltaFocusPoint$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 904  : 		_focusPoint += deltaFocusPoint;

	lea	eax, DWORD PTR _deltaFocusPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=
$LN1@GetFocusPo:

; 905  : 	}
; 906  : 	_focusPoint.GetTpoint(modelSpaceOffset);

	lea	ecx, DWORD PTR _modelSpaceOffset$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	call	?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z ; Vector_3D<float>::GetTpoint

; 907  : 
; 908  : 	// Transform the model space offset into a world space offset.
; 909  : 	_rot.GetTrotation(rot);

	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ; Vector_3D<float>::GetTrotation

; 910  : 	MatrixMult
; 911  : 	(
; 912  : 		&rot,
; 913  : 		&modelSpaceOffset,
; 914  : 		&worldSpaceOffset
; 915  : 	);

	lea	eax, DWORD PTR _worldSpaceOffset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _modelSpaceOffset$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rot$[ebp]
	push	edx
	call	?MatrixMult@@YAXPBUTrotation@@PBUTpoint@@PAU2@@Z ; MatrixMult
	add	esp, 12					; 0000000cH

; 916  : 
; 917  : 	// Find the focus point in world space by adding the world space
; 918  : 	// offset to the position
; 919  : 	pos = EP_VECTOR(XPos(), YPos(), ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv214[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv214[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 920  : 	pos += EP_VECTOR(worldSpaceOffset);

	lea	edx, DWORD PTR _worldSpaceOffset$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z	; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv216[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv216[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??Y?$Vector_3D@M@@QAEXABV0@@Z		; Vector_3D<float>::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 921  : 
; 922  : 	// return our result
; 923  : 	x = (BIG_SCALAR)pos[I_X];

	push	0
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 924  : 	y = (BIG_SCALAR)pos[I_Y];

	push	1
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 925  : 	z = (BIG_SCALAR)pos[I_Z];

	push	2
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 926  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _finalFocus$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _deltaFocusPoint$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$0:
	lea	ecx, DWORD PTR _deltaFocusPoint$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$1:
	lea	ecx, DWORD PTR _finalFocus$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$2:
	lea	ecx, DWORD PTR _pos$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$3:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFocusPoint@EjectedPilotClass@@UAEXAAM00@Z ENDP	; EjectedPilotClass::GetFocusPoint
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tMat$ = 8						; size = 4
?GetTransform@EjectedPilotClass@@UAEXQAY02M@Z PROC	; EjectedPilotClass::GetTransform
; _this$ = ecx

; 832  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 833  : 	memcpy (tMat, dmx, sizeof (TransformMatrix));

	push	36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	push	eax
	mov	ecx, DWORD PTR _tMat$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 834  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTransform@EjectedPilotClass@@UAEXQAY02M@Z ENDP	; EjectedPilotClass::GetTransform
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_saveSize$ = -12					; size = 4
_startMode$ = -8					; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?Save@EjectedPilotClass@@UAEHPAPAE@Z PROC		; EjectedPilotClass::Save
; _this$ = ecx

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 266  : int saveSize = SimMoverClass::Save (stream);

	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@SimMoverClass@@UAEHPAPAE@Z	; SimMoverClass::Save
	mov	DWORD PTR _saveSize$[ebp], eax

; 267  : int startMode = EM_F16_MODE1;

	mov	DWORD PTR _startMode$[ebp], 0

; 268  : 
; 269  :    memcpy (*stream, &_aircraftId, sizeof (VU_ID));

	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 672				; 000002a0H
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 270  :    *stream += sizeof (VU_ID);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 8
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 271  :    memcpy (*stream, &startMode, sizeof (int));

	push	4
	lea	ecx, DWORD PTR _startMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 272  :    *stream += sizeof (int);

	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], edx

; 273  :    return (saveSize + sizeof(VU_ID) + sizeof (int));

	mov	eax, DWORD PTR _saveSize$[ebp]
	add	eax, 12					; 0000000cH

; 274  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Save@EjectedPilotClass@@UAEHPAPAE@Z ENDP		; EjectedPilotClass::Save
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveSize@EjectedPilotClass@@UAEHXZ PROC		; EjectedPilotClass::SaveSize
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 259  :    return SimMoverClass::SaveSize() +
; 260  :    		  sizeof (VU_ID) +
; 261  : 		  sizeof( int );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveSize@SimMoverClass@@UAEHXZ		; SimMoverClass::SaveSize
	add	eax, 12					; 0000000cH

; 262  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SaveSize@EjectedPilotClass@@UAEHXZ ENDP		; EjectedPilotClass::SaveSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simeject.h
;	COMDAT ?Mass@EjectedPilotClass@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Mass@EjectedPilotClass@@UAEMXZ PROC			; EjectedPilotClass::Mass, COMDAT
; _this$ = ecx

; 144  : 	virtual float Mass(void)		{return 20.0F;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@41a00000
	mov	esp, ebp
	pop	ebp
	ret	0
?Mass@EjectedPilotClass@@UAEMXZ ENDP			; EjectedPilotClass::Mass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simeject.h
;	COMDAT ?IsEject@EjectedPilotClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEject@EjectedPilotClass@@UAEHXZ PROC			; EjectedPilotClass::IsEject, COMDAT
; _this$ = ecx

; 143  : 	virtual int IsEject (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEject@EjectedPilotClass@@UAEHXZ ENDP			; EjectedPilotClass::IsEject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?Sleep@EjectedPilotClass@@UAEHXZ PROC			; EjectedPilotClass::Sleep
; _this$ = ecx

; 491  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 492  : int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 493  : 
; 494  : 	if (!IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	jne	SHORT $LN1@Sleep

; 495  : 		return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	jmp	SHORT $LN2@Sleep
$LN1@Sleep:

; 496  : 
; 497  : 	return SimMoverClass::Sleep();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sleep@SimMoverClass@@UAEHXZ		; SimMoverClass::Sleep
$LN2@Sleep:

; 498  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Sleep@EjectedPilotClass@@UAEHXZ ENDP			; EjectedPilotClass::Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_retval$ = -8						; size = 4
_this$ = -4						; size = 4
?Wake@EjectedPilotClass@@UAEHXZ PROC			; EjectedPilotClass::Wake
; _this$ = ecx

; 481  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 482  : 	int retval = 0;

	mov	DWORD PTR _retval$[ebp], 0

; 483  : 
; 484  : 	if (IsAwake())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAwake@SimBaseClass@@QBEHXZ		; SimBaseClass::IsAwake
	test	eax, eax
	je	SHORT $LN1@Wake

; 485  : 		return retval;

	mov	eax, DWORD PTR _retval$[ebp]
	jmp	SHORT $LN2@Wake
$LN1@Wake:

; 486  : 
; 487  : 	return SimMoverClass::Wake();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wake@SimMoverClass@@UAEHXZ		; SimMoverClass::Wake
$LN2@Wake:

; 488  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Wake@EjectedPilotClass@@UAEHXZ ENDP			; EjectedPilotClass::Wake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetDead@EjectedPilotClass@@UAEXH@Z PROC		; EjectedPilotClass::SetDead
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 	if (flag){

	cmp	DWORD PTR _flag$[ebp], 0
	je	SHORT $LN2@SetDead

; 761  : 		if (IsPlayer()){

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPlayer@FalconEntity@@QAEHXZ		; FalconEntity::IsPlayer
	test	eax, eax
	je	SHORT $LN2@SetDead

; 762  : 		//End the sim
; 763  : 			OTWDriver.EndFlight();

	mov	ecx, OFFSET ?OTWDriver@@3VOTWDriverClass@@A ; OTWDriver
	call	?EndFlight@OTWDriverClass@@QAEXXZ	; OTWDriverClass::EndFlight
$LN2@SetDead:

; 764  : 		}
; 765  : 	}
; 766  : 	SimMoverClass::SetDead(flag);

	mov	eax, DWORD PTR _flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDead@SimMoverClass@@UAEXH@Z		; SimMoverClass::SetDead

; 767  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetDead@EjectedPilotClass@@UAEXH@Z ENDP		; EjectedPilotClass::SetDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 8
$T3 = -76						; size = 8
$T4 = -68						; size = 8
$T5 = -60						; size = 8
$T6 = -52						; size = 4
$T7 = -48						; size = 4
tv205 = -44						; size = 4
$T8 = -40						; size = 4
tv194 = -36						; size = 4
tv142 = -32						; size = 4
$T9 = -28						; size = 4
_flight$10 = -24					; size = 4
_radioMessage$11 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_damageMsg$ = 8						; size = 4
?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z PROC ; EjectedPilotClass::ApplyDamage
; _this$ = ecx

; 696  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 697  : 	if(_stage >= PD_CHUTE_OPENING)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+692], 3
	jl	$LN3@ApplyDamag

; 698  : 	{
; 699  : 	   SimMoverClass::ApplyDamage(damageMsg);

	mov	ecx, DWORD PTR _damageMsg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyDamage@SimBaseClass@@UAEXPAVFalconDamageMessage@@@Z ; SimBaseClass::ApplyDamage

; 700  : 
; 701  : 		if(_collapseChute == FALSE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+788], 0
	jne	$LN2@ApplyDamag

; 702  : 		{
; 703  : 			// PlayRadioMessage (rcAIRMANDOWNB)
; 704  : 			// _flightId is the VU_ID of the flight the pilot ejected from
; 705  : 			
; 706  : 			Flight flight;
; 707  : 			flight = (Flight) vuDatabase->Find(_flightId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	push	ecx
	mov	edx, DWORD PTR [eax+680]
	push	edx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _flight$10[ebp], eax

; 708  : 
; 709  : 			if(flight)

	cmp	DWORD PTR _flight$10[ebp], 0
	je	$LN1@ApplyDamag

; 710  : 			{
; 711  : 				FalconRadioChatterMessage *radioMessage = new FalconRadioChatterMessage( flight->Id(), FalconLocalSession );

	push	84					; 00000054H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN6@ApplyDamag
	push	1
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	push	eax
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _flight$10[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0FalconRadioChatterMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconRadioChatterMessage::FalconRadioChatterMessage
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN7@ApplyDamag
$LN6@ApplyDamag:
	mov	DWORD PTR tv142[ebp], 0
$LN7@ApplyDamag:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR _radioMessage$11[ebp], ecx

; 712  : 				radioMessage->dataBlock.from = flight->Id();

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _flight$10[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _radioMessage$11[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx

; 713  : 				radioMessage->dataBlock.to = MESSAGE_FOR_TEAM;

	mov	ecx, DWORD PTR _radioMessage$11[ebp]
	mov	BYTE PTR [ecx+60], 1

; 714  : 				radioMessage->dataBlock.voice_id = flight->GetFlightLeadVoiceID();

	mov	ecx, DWORD PTR _flight$10[ebp]
	call	?GetFlightLeadVoiceID@FlightClass@@QAEEXZ ; FlightClass::GetFlightLeadVoiceID
	mov	edx, DWORD PTR _radioMessage$11[ebp]
	mov	BYTE PTR [edx+61], al

; 715  : 				radioMessage->dataBlock.message = rcAIRMANDOWNB;

	mov	eax, 8
	mov	ecx, DWORD PTR _radioMessage$11[ebp]
	mov	WORD PTR [ecx+62], ax

; 716  : 				//M.N. changed to 32767 -> flexibly use randomized values of max available eval indexes
; 717  : 				radioMessage->dataBlock.edata[0] = 32767;

	mov	edx, 2
	imul	edx, 0
	mov	eax, 32767				; 00007fffH
	mov	ecx, DWORD PTR _radioMessage$11[ebp]
	mov	WORD PTR [ecx+edx+64], ax

; 718  : 				
; 719  : 				FalconSendMessage(radioMessage, FALSE);

	push	0
	mov	edx, DWORD PTR _radioMessage$11[ebp]
	push	edx
	call	?FalconSendMessage@@YAXPAVVuMessage@@H@Z ; FalconSendMessage
	add	esp, 8
$LN1@ApplyDamag:

; 720  : 			}
; 721  : 
; 722  : 			F4Assert(_deathMsg == NULL);
; 723  : 
; 724  : 			// Create death message. 
; 725  : 			_deathMsg = new FalconDeathMessage (Id(), FalconLocalGame);

	push	94					; 0000005eH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN10@ApplyDamag
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ	; VuBin<VuSessionEntity>::operator bool
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@ApplyDamag
	mov	ecx, OFFSET ?vuLocalSessionEntity@@3V?$VuBin@VVuSessionEntity@@@@A ; vuLocalSessionEntity
	call	?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ; VuBin<VuSessionEntity>::get
	mov	ecx, eax
	call	?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ; FalconSessionEntity::GetGame
	mov	DWORD PTR tv194[ebp], eax
	jmp	SHORT $LN9@ApplyDamag
$LN8@ApplyDamag:
	mov	DWORD PTR tv194[ebp], 0
$LN9@ApplyDamag:
	push	1
	mov	ecx, DWORD PTR tv194[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0FalconDeathMessage@@QAE@VVU_ID@@PAVVuTargetEntity@@E@Z ; FalconDeathMessage::FalconDeathMessage
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN11@ApplyDamag
$LN10@ApplyDamag:
	mov	DWORD PTR tv205[ebp], 0
$LN11@ApplyDamag:
	mov	eax, DWORD PTR tv205[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+808], edx

; 726  : 
; 727  : 			// ahhhhhhhhhhhhhhhhh
; 728  : #ifdef MLR_NEWSNDCODE			
; 729  : 			SoundPos.Sfx( SFX_SCREAM, 0, 1, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	0
	push	135					; 00000087H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?Sfx@F4SoundPos@@QAEXHHMM@Z		; F4SoundPos::Sfx

; 730  : #else
; 731  : 			F4SoundFXSetPos( SFX_SCREAM, TRUE, XPos(), YPos(), ZPos(), 1.0f , 0 , XDelta(),YDelta(),ZDelta());
; 732  : #endif
; 733  :       
; 734  : 			_deathMsg->dataBlock.damageType = damageMsg->dataBlock.damageType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	mov	edx, DWORD PTR _damageMsg$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax

; 735  : 			_deathMsg->dataBlock.dEntityID  = Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+808]
	mov	DWORD PTR [ecx+56], edx
	mov	DWORD PTR [ecx+60], eax

; 736  : 			_deathMsg->dataBlock.dCampID = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+808]
	xor	ecx, ecx
	mov	WORD PTR [eax+64], cx

; 737  : 			_deathMsg->dataBlock.dSide   = GetCountry();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	mov	BYTE PTR [edx+69], al

; 738  : 			_deathMsg->dataBlock.dPilotID   = pilotSlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+665]
	mov	BYTE PTR [ecx+66], al

; 739  : 			_deathMsg->dataBlock.dIndex     = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	mov	WORD PTR [edx+67], ax

; 740  : 
; 741  : 			_deathMsg->dataBlock.fEntityID  = damageMsg->dataBlock.fEntityID;

	mov	eax, DWORD PTR _damageMsg$[ebp]
	mov	ecx, DWORD PTR [eax+74]
	mov	edx, DWORD PTR [eax+78]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+808]
	mov	DWORD PTR [eax+70], ecx
	mov	DWORD PTR [eax+74], edx

; 742  : 			_deathMsg->dataBlock.fCampID    = damageMsg->dataBlock.fCampID;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	mov	eax, DWORD PTR _damageMsg$[ebp]
	mov	cx, WORD PTR [eax+82]
	mov	WORD PTR [edx+78], cx

; 743  : 			_deathMsg->dataBlock.fSide      = damageMsg->dataBlock.fSide;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+808]
	mov	ecx, DWORD PTR _damageMsg$[ebp]
	mov	dl, BYTE PTR [ecx+87]
	mov	BYTE PTR [eax+83], dl

; 744  : 			_deathMsg->dataBlock.fPilotID   = damageMsg->dataBlock.fPilotID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	mov	edx, DWORD PTR _damageMsg$[ebp]
	mov	al, BYTE PTR [edx+84]
	mov	BYTE PTR [ecx+80], al

; 745  : 			_deathMsg->dataBlock.fIndex     = damageMsg->dataBlock.fIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+808]
	mov	eax, DWORD PTR _damageMsg$[ebp]
	mov	cx, WORD PTR [eax+85]
	mov	WORD PTR [edx+81], cx

; 746  : 			_deathMsg->dataBlock.fWeaponID  = damageMsg->dataBlock.fWeaponID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+808]
	mov	ecx, DWORD PTR _damageMsg$[ebp]
	mov	dx, WORD PTR [ecx+88]
	mov	WORD PTR [eax+84], dx

; 747  : 			_deathMsg->dataBlock.fWeaponUID = damageMsg->dataBlock.fWeaponUID;

	mov	eax, DWORD PTR _damageMsg$[ebp]
	mov	ecx, DWORD PTR [eax+90]
	mov	edx, DWORD PTR [eax+94]
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+808]
	mov	DWORD PTR [eax+86], ecx
	mov	DWORD PTR [eax+90], edx
$LN2@ApplyDamag:

; 748  : 		}
; 749  : 
; 750  : 		_collapseChute = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+788], 1
$LN3@ApplyDamag:

; 751  : 	}
; 752  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z$0:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z$1:
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ApplyDamage@EjectedPilotClass@@UAEXPAVFalconDamageMessage@@@Z ENDP ; EjectedPilotClass::ApplyDamage
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T1 = -192						; size = 8
$T2 = -184						; size = 8
tv723 = -176						; size = 8
tv613 = -168						; size = 8
tv574 = -160						; size = 4
tv601 = -156						; size = 4
tv769 = -152						; size = 4
tv579 = -148						; size = 4
tv596 = -144						; size = 4
tv763 = -140						; size = 4
tv765 = -136						; size = 4
tv590 = -132						; size = 4
_percent$3 = -128					; size = 4
tv566 = -124						; size = 4
_percent$4 = -120					; size = 4
tv767 = -116						; size = 4
tv761 = -112						; size = 4
tv609 = -108						; size = 4
tv719 = -104						; size = 4
tv143 = -100						; size = 4
_percent$5 = -96					; size = 4
_frame$6 = -92						; size = 4
_frame$7 = -88						; size = 4
_prevframe$8 = -84					; size = 4
_frame$9 = -80						; size = 4
_this$ = -76						; size = 4
_genPos$ = -72						; size = 37
_acmiSwitch$ = -32					; size = 25
__$ArrayPad$ = -4					; size = 4
?Exec@EjectedPilotClass@@UAEHXZ PROC			; EjectedPilotClass::Exec
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 502  :    	ACMIGenPositionRecord genPos;
; 503  : 	ACMISwitchRecord acmiSwitch;
; 504  : 
; 505  : 	SoundPos.UpdatePos(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?UpdatePos@F4SoundPos@@QAEXPAVSimBaseClass@@@Z ; F4SoundPos::UpdatePos

; 506  : 
; 507  : 	if (IsDead())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+340]
	call	eax
	test	eax, eax
	je	SHORT $LN32@Exec

; 508  : 		return TRUE;

	mov	eax, 1
	jmp	$LN33@Exec
$LN32@Exec:

; 509  : 	
; 510  : 		// Call superclass Exec.
; 511  : 		SimMoverClass::Exec();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Exec@SimMoverClass@@UAEHXZ		; SimMoverClass::Exec

; 512  : 
; 513  :       if (!SimDriver.MotionOn())

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?MotionOn@SimulationDriver@@QAEHXZ	; SimulationDriver::MotionOn
	test	eax, eax
	jne	SHORT $LN31@Exec

; 514  :          return IsLocal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	jmp	$LN33@Exec
$LN31@Exec:

; 515  : 
; 516  :       if (_delayTime > SimLibElapsedTime) { // not time yet

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+720]
	cmp	edx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	jbe	SHORT $LN30@Exec

; 517  : 		RunJettisonCanopy(); // stay with it

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunJettisonCanopy@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::RunJettisonCanopy

; 518  : 		return IsLocal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	jmp	$LN33@Exec
$LN30@Exec:

; 519  :       }
; 520  : 
; 521  : 		// Advance time
; 522  : 		AdvanceTime();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdvanceTime@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::AdvanceTime

; 523  : 
; 524  : 		// Simulate the ejected pilot here.
; 525  : 		switch(_stage)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+692]
	mov	DWORD PTR tv143[ebp], ecx
	cmp	DWORD PTR tv143[ebp], 7
	ja	$LN3@Exec
	mov	edx, DWORD PTR tv143[ebp]
	jmp	DWORD PTR $LN35@Exec[edx*4]
$LN27@Exec:

; 526  : 		{
; 527  : 			case PD_JETTISON_CANOPY :
; 528  : 			{
; 529  : 				RunJettisonCanopy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunJettisonCanopy@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::RunJettisonCanopy

; 530  : 				
; 531  : 				break;

	jmp	$LN28@Exec
$LN26@Exec:

; 532  : 			}
; 533  : 			case PD_EJECT_SEAT :
; 534  : 			{
; 535  : 				RunEjectSeat();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunEjectSeat@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunEjectSeat

; 536  : 
; 537  : 				break;

	jmp	$LN28@Exec
$LN25@Exec:

; 538  : 			}
; 539  : 			case PD_FREE_FALL_WITH_SEAT :
; 540  : 			{
; 541  : 				RunFreeFall();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunFreeFall@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunFreeFall

; 542  : 
; 543  : 				break;

	jmp	$LN28@Exec
$LN24@Exec:

; 544  : 			}
; 545  : 			case PD_CHUTE_OPENING :
; 546  : 			{
; 547  : 				RunFreeFall();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunFreeFall@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunFreeFall

; 548  : 
; 549  : 				// Here we run our little switch based animation...
; 550  : 				static const int NUM_FRAMES = 31;
; 551  : 
; 552  : 				float percent = (_runTime             - StageEndTime(_stage-1)) /
; 553  : 					            (StageEndTime(_stage) - StageEndTime(_stage-1));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+692]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv566[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+704]
	subss	xmm0, DWORD PTR tv566[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+692]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv761[ebp], xmm0
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv574[ebp]
	movss	xmm0, DWORD PTR tv574[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+692]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv763[ebp], xmm0
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv579[ebp]
	movss	xmm0, DWORD PTR tv763[ebp]
	subss	xmm0, DWORD PTR tv579[ebp]
	movss	xmm1, DWORD PTR tv761[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _percent$5[ebp], xmm1

; 554  : 				int	frame = FloatToInt32(percent * (NUM_FRAMES-0.5f));

	movss	xmm0, DWORD PTR _percent$5[ebp]
	mulss	xmm0, DWORD PTR __real@41f40000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _frame$9[ebp], eax

; 555  : 
; 556  : 				if ( frame < 0 )

	cmp	DWORD PTR _frame$9[ebp], 0
	jge	SHORT $LN23@Exec

; 557  : 					frame = 0;

	mov	DWORD PTR _frame$9[ebp], 0
	jmp	SHORT $LN21@Exec
$LN23@Exec:

; 558  : 				else if ( frame > NUM_FRAMES )

	cmp	DWORD PTR _frame$9[ebp], 31		; 0000001fH
	jle	SHORT $LN21@Exec

; 559  : 					frame = NUM_FRAMES;

	mov	DWORD PTR _frame$9[ebp], 31		; 0000001fH
$LN21@Exec:

; 560  : 
; 561  : 				percent = ((_runTime  - _deltaTime )           - StageEndTime(_stage-1)) /
; 562  : 					       (StageEndTime(_stage) - StageEndTime(_stage-1));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+704]
	subss	xmm0, DWORD PTR [edx+708]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+692]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv765[ebp], xmm0
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv590[ebp]
	movss	xmm0, DWORD PTR tv765[ebp]
	subss	xmm0, DWORD PTR tv590[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+692]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv767[ebp], xmm0
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv596[ebp]
	movss	xmm0, DWORD PTR tv596[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+692]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv769[ebp], xmm0
	call	?StageEndTime@EjectedPilotClass@@ABEMH@Z ; EjectedPilotClass::StageEndTime
	fstp	DWORD PTR tv601[ebp]
	movss	xmm0, DWORD PTR tv769[ebp]
	subss	xmm0, DWORD PTR tv601[ebp]
	movss	xmm1, DWORD PTR tv767[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _percent$5[ebp], xmm1

; 563  : 
; 564  : 				int	prevframe = FloatToInt32(percent * ((float)NUM_FRAMES-0.5f));

	movss	xmm0, DWORD PTR __real@41f80000
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _percent$5[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _prevframe$8[ebp], eax

; 565  : 				if ( prevframe < 0 )

	cmp	DWORD PTR _prevframe$8[ebp], 0
	jge	SHORT $LN20@Exec

; 566  : 					prevframe = 0;

	mov	DWORD PTR _prevframe$8[ebp], 0
	jmp	SHORT $LN18@Exec
$LN20@Exec:

; 567  : 				else if ( prevframe > NUM_FRAMES )

	cmp	DWORD PTR _prevframe$8[ebp], 31		; 0000001fH
	jle	SHORT $LN18@Exec

; 568  : 					prevframe = NUM_FRAMES;

	mov	DWORD PTR _prevframe$8[ebp], 31		; 0000001fH
$LN18@Exec:

; 569  : 
; 570  : 				if ( gACMIRec.IsRecording() && prevframe != frame)

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN17@Exec
	mov	eax, DWORD PTR _prevframe$8[ebp]
	cmp	eax, DWORD PTR _frame$9[ebp]
	je	$LN17@Exec

; 571  : 				{
; 572  : 						acmiSwitch.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv609[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv609[ebp]
	mov	edx, DWORD PTR tv609[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv613[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv613[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR _acmiSwitch$[ebp+1], xmm0

; 573  : 						acmiSwitch.data.type = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	eax, ax
	mov	DWORD PTR _acmiSwitch$[ebp+5], eax

; 574  : 						acmiSwitch.data.uniqueID = ACMIIDTable->Add(Id(),NULL,0);//.num_;

	push	0
	push	0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ?ACMIIDTable@@3PAVACMI_Hash@@A ; ACMIIDTable
	call	?Add@ACMI_Hash@@QAEJVVU_ID@@PADJ@Z	; ACMI_Hash::Add
	mov	DWORD PTR _acmiSwitch$[ebp+9], eax

; 575  : 						acmiSwitch.data.switchNum = 0;

	mov	DWORD PTR _acmiSwitch$[ebp+13], 0

; 576  : 						acmiSwitch.data.prevSwitchVal = 1<<prevframe;

	mov	edx, 1
	mov	ecx, DWORD PTR _prevframe$8[ebp]
	shl	edx, cl
	mov	DWORD PTR _acmiSwitch$[ebp+21], edx

; 577  : 						acmiSwitch.data.switchVal = 1<<frame;

	mov	eax, 1
	mov	ecx, DWORD PTR _frame$9[ebp]
	shl	eax, cl
	mov	DWORD PTR _acmiSwitch$[ebp+17], eax

; 578  : 						gACMIRec.SwitchRecord( &acmiSwitch );

	lea	ecx, DWORD PTR _acmiSwitch$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?SwitchRecord@ACMIRecorder@@QAEXPAUACMISwitchRecord@@@Z ; ACMIRecorder::SwitchRecord
$LN17@Exec:

; 579  : 				}
; 580  : 					
; 581  : 				if ( drawPointer )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN16@Exec

; 582  : 					((DrawableBSP*)drawPointer)->SetSwitchMask( 0, 1<<frame );

	mov	eax, 1
	mov	ecx, DWORD PTR _frame$9[ebp]
	shl	eax, cl
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN16@Exec:

; 583  : 
; 584  : 				break;

	jmp	$LN28@Exec
$LN15@Exec:

; 585  : 			}
; 586  : 			case PD_FREE_FALL_WITH_OPEN_CHUTE :
; 587  : 			{
; 588  : 				RunFreeFallWithOpenChute();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunFreeFallWithOpenChute@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::RunFreeFallWithOpenChute

; 589  : 	
; 590  : 				break;

	jmp	$LN28@Exec
$LN14@Exec:

; 591  : 			}
; 592  : 			case PD_FREE_FALL_WITH_COLLAPSED_CHUTE :
; 593  : 			{
; 594  : 				RunFreeFall();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunFreeFall@EjectedPilotClass@@AAEXXZ	; EjectedPilotClass::RunFreeFall

; 595  : 	
; 596  : 				break;

	jmp	$LN28@Exec
$LN13@Exec:

; 597  : 			}
; 598  : 			case PD_SAFE_LANDING :
; 599  : 			{
; 600  : 				RunSafeLanding();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunSafeLanding@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::RunSafeLanding

; 601  : 
; 602  : 				_stageTimer += _deltaTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+716]
	addss	xmm0, DWORD PTR [eax+708]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+716], xmm0

; 603  : 
; 604  : 				static const int NUM_FRAMES = 13;
; 605  : 				float percent = _stageTimer/2.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+716]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _percent$4[ebp], xmm0

; 606  : 				int	frame = FloatToInt32(percent * ((float)NUM_FRAMES-0.5f));

	movss	xmm0, DWORD PTR __real@41500000
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _percent$4[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _frame$7[ebp], eax

; 607  : 
; 608  : 				if ( frame < 0 )

	cmp	DWORD PTR _frame$7[ebp], 0
	jge	SHORT $LN12@Exec

; 609  : 					frame = 0;

	mov	DWORD PTR _frame$7[ebp], 0
	jmp	SHORT $LN10@Exec
$LN12@Exec:

; 610  : 				else if ( frame > NUM_FRAMES )

	cmp	DWORD PTR _frame$7[ebp], 13		; 0000000dH
	jle	SHORT $LN10@Exec

; 611  : 					frame = NUM_FRAMES;

	mov	DWORD PTR _frame$7[ebp], 13		; 0000000dH
$LN10@Exec:

; 612  : 
; 613  : 				if ( drawPointer )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+332], 0
	je	SHORT $LN9@Exec

; 614  : 					((DrawableBSP*)drawPointer)->SetSwitchMask( 0, 1<<frame );

	mov	edx, 1
	mov	ecx, DWORD PTR _frame$7[ebp]
	shl	edx, cl
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN9@Exec:

; 615  : 	
; 616  : 				break;

	jmp	$LN28@Exec
$LN8@Exec:

; 617  : 			}
; 618  : 			case PD_CRASH_LANDING :
; 619  : 			{
; 620  : 				RunCrashLanding();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RunCrashLanding@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::RunCrashLanding

; 621  : 
; 622  : 				_stageTimer += _deltaTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+716]
	addss	xmm0, DWORD PTR [edx+708]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+716], xmm0

; 623  : 
; 624  : 				static const int NUM_FRAMES = 12;
; 625  : 				float percent = _stageTimer/2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+716]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _percent$3[ebp], xmm0

; 626  : 				int	frame = FloatToInt32(percent * ((float)NUM_FRAMES-0.5f));

	movss	xmm0, DWORD PTR __real@41400000
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _percent$3[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?FloatToInt32@@YAHM@Z			; FloatToInt32
	add	esp, 4
	mov	DWORD PTR _frame$6[ebp], eax

; 627  : 
; 628  : 				if ( frame < 0 )

	cmp	DWORD PTR _frame$6[ebp], 0
	jge	SHORT $LN7@Exec

; 629  : 					frame = 0;

	mov	DWORD PTR _frame$6[ebp], 0
	jmp	SHORT $LN5@Exec
$LN7@Exec:

; 630  : 				else if ( frame > NUM_FRAMES )

	cmp	DWORD PTR _frame$6[ebp], 12		; 0000000cH
	jle	SHORT $LN5@Exec

; 631  : 					frame = NUM_FRAMES;

	mov	DWORD PTR _frame$6[ebp], 12		; 0000000cH
$LN5@Exec:

; 632  : 
; 633  : 				if ( drawPointer )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+332], 0
	je	SHORT $LN4@Exec

; 634  : 					((DrawableBSP*)drawPointer)->SetSwitchMask( 0, 1<<frame );

	mov	eax, 1
	mov	ecx, DWORD PTR _frame$6[ebp]
	shl	eax, cl
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+332]
	call	?SetSwitchMask@DrawableBSP@@QAEXHK@Z	; DrawableBSP::SetSwitchMask
$LN4@Exec:
$LN3@Exec:
$LN28@Exec:

; 635  : 	
; 636  : 				break;
; 637  : 			}
; 638  : 			default :
; 639  : 			{
; 640  : 				ShiWarning ("Bad Eject Mode");
; 641  : 			}
; 642  : 		}
; 643  : 
; 644  : 		// Make sure all components of orientation are in range ( 0 <= n <= TWO_PI).
; 645  : 		FixOrientationRange();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixOrientationRange@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::FixOrientationRange

; 646  : 
; 647  : 		// Update shared data.
; 648  : 		SetPosition(_pos[I_X], _pos[I_Y], _pos[I_Z]);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 649  : 		SetDelta(_vel[I_X], _vel[I_Y], _vel[I_Z]);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 650  : 		SetYPR(_rot[I_YAW], _rot[I_PITCH], _rot[I_ROLL]);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 651  : 		SetYPRDelta(_aVel[I_YAW], _aVel[I_PITCH], _aVel[I_ROLL]);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 652  : 		if (gACMIRec.IsRecording() && (SimLibFrameCount & 3 ) == 0)

	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?IsRecording@ACMIRecorder@@QAEHXZ	; ACMIRecorder::IsRecording
	test	eax, eax
	je	$LN2@Exec
	mov	edx, DWORD PTR ?SimLibFrameCount@@3IA	; SimLibFrameCount
	and	edx, 3
	jne	$LN2@Exec

; 653  : 		{
; 654  : 			genPos.hdr.time = SimLibElapsedTime * MSEC_TO_SEC + OTWDriver.todOffset;

	mov	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	DWORD PTR tv719[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv719[ebp]
	mov	ecx, DWORD PTR tv719[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv723[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv723[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	addss	xmm0, DWORD PTR ?OTWDriver@@3VOTWDriverClass@@A+32052
	movss	DWORD PTR _genPos$[ebp+1], xmm0

; 655  : 			genPos.data.type = Type();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Type@VuEntity@@QBEGXZ			; VuEntity::Type
	movzx	edx, ax
	mov	DWORD PTR _genPos$[ebp+5], edx

; 656  : 			genPos.data.uniqueID = ACMIIDTable->Add(Id(),NULL,TeamInfo[GetTeam()]->GetColor());//.num_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	movzx	ecx, al
	mov	ecx, DWORD PTR ?TeamInfo@@3PAPAVTeamClass@@A[ecx*4]
	call	?GetColor@TeamClass@@QAEHXZ		; TeamClass::GetColor
	push	eax
	push	0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR ?ACMIIDTable@@3PAVACMI_Hash@@A ; ACMIIDTable
	call	?Add@ACMI_Hash@@QAEJVVU_ID@@PADJ@Z	; ACMI_Hash::Add
	mov	DWORD PTR _genPos$[ebp+9], eax

; 657  : 			genPos.data.x = XPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	fstp	DWORD PTR _genPos$[ebp+13]

; 658  : 			genPos.data.y = YPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	fstp	DWORD PTR _genPos$[ebp+17]

; 659  : 			genPos.data.z = ZPos();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	fstp	DWORD PTR _genPos$[ebp+21]

; 660  : 			genPos.data.roll = Roll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	fstp	DWORD PTR _genPos$[ebp+33]

; 661  : 			genPos.data.pitch = Pitch();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	fstp	DWORD PTR _genPos$[ebp+29]

; 662  : 			genPos.data.yaw = Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	fstp	DWORD PTR _genPos$[ebp+25]

; 663  : // remove			genPos.data.teamColor = TeamInfo[GetTeam()]->GetColor();
; 664  : 			gACMIRec.GenPositionRecord( &genPos );

	lea	eax, DWORD PTR _genPos$[ebp]
	push	eax
	mov	ecx, OFFSET ?gACMIRec@@3VACMIRecorder@@A ; gACMIRec
	call	?GenPositionRecord@ACMIRecorder@@QAEXPAUACMIGenPositionRecord@@@Z ; ACMIRecorder::GenPositionRecord
$LN2@Exec:

; 665  : 		}
; 666  : 
; 667  : 		// Update matrices for geometry.
; 668  : 		CalcTransformMatrix((SimMoverClass *)this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 669  : 
; 670  : 		// See if it hit the ground.
; 671  : 		if ( _hitGround == FALSE )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+780], 0
	jne	SHORT $LN1@Exec

; 672  : 			_hitGround = HasHitGround();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasHitGround@EjectedPilotClass@@ABEHXZ	; EjectedPilotClass::HasHitGround
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+780], eax
$LN1@Exec:

; 673  : 
; 674  : 		/*
; 675  : 		** We now do completion in the safe or crash landing stages
; 676  : 		** (by calling HitGround() )
; 677  : 		if (HasHitGround())
; 678  : 		{
; 679  : 			HitGround();
; 680  : 		}
; 681  : 		*/
; 682  : 
; 683  : 		// Display some debug data.
; 684  : #if DEBUG_EJECTION_SEQUENCE
; 685  : 		SpewDebugData();
; 686  : #endif // DEBUG_EJECTION_SEQUENCE
; 687  : 
; 688  : 	return IsLocal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
$LN33@Exec:

; 689  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN35@Exec:
	DD	$LN27@Exec
	DD	$LN26@Exec
	DD	$LN25@Exec
	DD	$LN24@Exec
	DD	$LN15@Exec
	DD	$LN14@Exec
	DD	$LN13@Exec
	DD	$LN8@Exec
?Exec@EjectedPilotClass@@UAEHXZ ENDP			; EjectedPilotClass::Exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?Init@EjectedPilotClass@@UAEXPAVSimInitDataClass@@@Z PROC ; EjectedPilotClass::Init
; _this$ = ecx

; 476  : void EjectedPilotClass::Init(SimInitDataClass *){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 477  : 	SimMoverClass::Init(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@SimMoverClass@@UAEXPAVSimInitDataClass@@@Z ; SimMoverClass::Init

; 478  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Init@EjectedPilotClass@@UAEXPAVSimInitDataClass@@@Z ENDP ; EjectedPilotClass::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
tv79 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?CleanupLocalData@EjectedPilotClass@@AAEXXZ PROC	; EjectedPilotClass::CleanupLocalData
; _this$ = ecx

; 463  : void EjectedPilotClass::CleanupLocalData(){

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 	_pd = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+688], 0

; 465  : 	_md = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+696], 0

; 466  : 
; 467  : 	// Delete the death message if it still exists.
; 468  : 	if(_deathMsg != NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+808], 0
	je	SHORT $LN2@CleanupLoc

; 469  : 	{
; 470  : 		delete _deathMsg;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+808]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@CleanupLoc
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN5@CleanupLoc
$LN4@CleanupLoc:
	mov	DWORD PTR tv79[ebp], 0
$LN5@CleanupLoc:

; 471  : 		_deathMsg = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 0
$LN2@CleanupLoc:

; 472  : 	}
; 473  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupLocalData@EjectedPilotClass@@AAEXXZ ENDP	; EjectedPilotClass::CleanupLocalData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
$T2 = -220						; size = 8
$T3 = -212						; size = 8
tv892 = -204						; size = 4
tv620 = -200						; size = 4
tv890 = -196						; size = 4
tv628 = -192						; size = 4
tv888 = -188						; size = 4
tv900 = -184						; size = 4
tv618 = -180						; size = 4
tv896 = -176						; size = 4
tv629 = -172						; size = 4
tv627 = -168						; size = 4
tv904 = -164						; size = 4
tv902 = -160						; size = 4
$T4 = -156						; size = 4
tv622 = -152						; size = 4
tv910 = -148						; size = 4
tv626 = -144						; size = 4
tv908 = -140						; size = 4
tv894 = -136						; size = 4
tv906 = -132						; size = 4
tv624 = -128						; size = 4
tv898 = -124						; size = 4
tv370 = -120						; size = 4
tv363 = -116						; size = 4
tv599 = -112						; size = 4
$T5 = -108						; size = 4
tv394 = -104						; size = 4
_labelLen$ = -100					; size = 4
_drive$6 = -96						; size = 4
_acBSP$ = -92						; size = 4
_this$ = -88						; size = 4
$T7 = -84						; size = 12
$T8 = -72						; size = 12
$T9 = -60						; size = 12
$T10 = -48						; size = 12
_crewstr$11 = -36					; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ac$ = 8						; size = 4
_mode$ = 12						; size = 4
_no$ = 16						; size = 4
?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z PROC ; EjectedPilotClass::InitLocalData
; _this$ = ecx

; 292  : void EjectedPilotClass::InitLocalData(AircraftClass *ac, int mode, int no){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 293  : 	DrawableBSP		*acBSP;
; 294  : 	int				labelLen;
; 295  : 
; 296  : 	_delayTime = SimLibElapsedTime + no * 2 * CampaignSeconds;

	mov	eax, DWORD PTR _no$[ebp]
	shl	eax, 1
	imul	eax, 1000				; 000003e8H
	add	eax, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+720], eax

; 297  : 	// Initialize position, rotation, velocity, angular velocity.
; 298  : 	if (ac)

	cmp	DWORD PTR _ac$[ebp], 0
	je	$LN15@InitLocalD

; 299  : 	{
; 300  : 		_pos = EP_VECTOR(ac->XPos(),ac->YPos(),ac->ZPos());

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ac$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ac$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T9[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv626[ebp], eax
	mov	edx, DWORD PTR tv626[ebp]
	mov	DWORD PTR tv618[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv618[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 301  : 
; 302  : 		_rot[I_ROLL] =	ac->Roll();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv888[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv888[ebp]
	fstp	DWORD PTR [eax]

; 303  : 		_rot[I_PITCH] = ac->Pitch();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv890[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv890[ebp]
	fstp	DWORD PTR [eax]

; 304  : 		_rot[I_YAW] = ac->Yaw();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv892[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv892[ebp]
	fstp	DWORD PTR [eax]

; 305  : 		
; 306  : 		_vel = EP_VECTOR(ac->XDelta(),ac->YDelta(),ac->ZDelta());

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ac$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ac$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv627[ebp], eax
	mov	ecx, DWORD PTR tv627[ebp]
	mov	DWORD PTR tv620[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv620[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 307  : 
; 308  : 		_aVel[I_ROLL] = ac->RollDelta();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?RollDelta@VuEntity@@QBEMXZ		; VuEntity::RollDelta
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv894[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv894[ebp]
	fstp	DWORD PTR [eax]

; 309  : 		_aVel[I_PITCH] = ac->PitchDelta();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?PitchDelta@VuEntity@@QBEMXZ		; VuEntity::PitchDelta
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv896[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv896[ebp]
	fstp	DWORD PTR [eax]

; 310  : 		_aVel[I_YAW] = ac->YawDelta();

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?YawDelta@VuEntity@@QBEMXZ		; VuEntity::YawDelta
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv898[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv898[ebp]
	fstp	DWORD PTR [eax]

; 311  : 	}
; 312  : 	else

	jmp	$LN14@InitLocalD
$LN15@InitLocalD:

; 313  : 	{
; 314  : 
; 315  : 		_pos = EP_VECTOR(XPos(),YPos(),ZPos());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZPos@VuEntity@@QBEMXZ			; VuEntity::ZPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YPos@VuEntity@@QBEMXZ			; VuEntity::YPos
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XPos@VuEntity@@QBEMXZ			; VuEntity::XPos
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T8[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv628[ebp], eax
	mov	eax, DWORD PTR tv628[ebp]
	mov	DWORD PTR tv622[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv622[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 316  : 
; 317  : 		_rot[I_ROLL] =	Roll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Roll@VuEntity@@QBEMXZ			; VuEntity::Roll
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv900[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv900[ebp]
	fstp	DWORD PTR [eax]

; 318  : 		_rot[I_PITCH] = Pitch();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pitch@VuEntity@@QBEMXZ			; VuEntity::Pitch
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv902[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv902[ebp]
	fstp	DWORD PTR [eax]

; 319  : 		_rot[I_YAW] = Yaw();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Yaw@VuEntity@@QBEMXZ			; VuEntity::Yaw
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	fstp	DWORD PTR tv904[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv904[ebp]
	fstp	DWORD PTR [eax]

; 320  : 		
; 321  : 		_vel = EP_VECTOR(XDelta(),YDelta(),ZDelta());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ZDelta@VuEntity@@QBEMXZ		; VuEntity::ZDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?YDelta@VuEntity@@QBEMXZ		; VuEntity::YDelta
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XDelta@VuEntity@@QBEMXZ		; VuEntity::XDelta
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T10[ebp]
	call	??0?$Vector_3D@M@@QAE@MMM@Z		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR tv629[ebp], eax
	mov	edx, DWORD PTR tv629[ebp]
	mov	DWORD PTR tv624[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv624[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T10[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>

; 322  : 
; 323  : 		_aVel[I_ROLL] = RollDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RollDelta@VuEntity@@QBEMXZ		; VuEntity::RollDelta
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv906[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv906[ebp]
	fstp	DWORD PTR [eax]

; 324  : 		_aVel[I_PITCH] = PitchDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PitchDelta@VuEntity@@QBEMXZ		; VuEntity::PitchDelta
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv908[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv908[ebp]
	fstp	DWORD PTR [eax]

; 325  : 		_aVel[I_YAW] = YawDelta();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?YawDelta@VuEntity@@QBEMXZ		; VuEntity::YawDelta
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	fstp	DWORD PTR tv910[ebp]
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	fld	DWORD PTR tv910[ebp]
	fstp	DWORD PTR [eax]
$LN14@InitLocalD:

; 326  : 	}
; 327  : 
; 328  : 	// Play with this value to change the signature of an
; 329  : 	// ejected pilot on the IR.
; 330  : 	SetPowerOutput(0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPowerOutput@SimBaseClass@@QAEXM@Z	; SimBaseClass::SetPowerOutput

; 331  : 	// sfr: not setters on this anymore
; 332  : 	//SetVt(0);
; 333  : 	//SetKias(0);
; 334  : 
; 335  : 	// Initialize physical data.
; 336  : 	_pd = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+688], 0

; 337  : 	_stage = PD_START;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+692], -1

; 338  : 
; 339  : 	// Initialize model data to NULL.
; 340  : 	_md = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+696], 0

; 341  : 	_model = MD_START;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+700], -1

; 342  : 
; 343  : 	// Set the ejection mode.
; 344  : 	SetMode(mode);

	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMode@EjectedPilotClass@@AAEXH@Z	; EjectedPilotClass::SetMode

; 345  : 
; 346  : 	// Initialize run time and delta time.
; 347  : 	_runTime = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+704], xmm0

; 348  : 	_deltaTime = 0.0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+708], xmm0

; 349  : 
; 350  : 	// We just set the type flag to "FalconSimEntity".
; 351  : 	SetTypeFlag(FalconEntity::FalconSimEntity);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTypeFlag@FalconEntity@@QAEXH@Z	; FalconEntity::SetTypeFlag

; 352  : 
; 353  : 	// Is it ourselves - Find out from the aircraft.
; 354  : 	if (ac && no == 0){

	cmp	DWORD PTR _ac$[ebp], 0
	je	SHORT $LN13@InitLocalD
	cmp	DWORD PTR _no$[ebp], 0
	jne	SHORT $LN13@InitLocalD

; 355  : 		_isPlayer = (SimDriver.GetPlayerEntity() == ac) ? TRUE : FALSE;

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ; SimulationDriver::GetPlayerEntity
	cmp	eax, DWORD PTR _ac$[ebp]
	jne	SHORT $LN18@InitLocalD
	mov	DWORD PTR tv363[ebp], 1
	jmp	SHORT $LN19@InitLocalD
$LN18@InitLocalD:
	mov	DWORD PTR tv363[ebp], 0
$LN19@InitLocalD:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv363[ebp]
	mov	DWORD PTR [edx+776], eax

; 356  : 	}
; 357  : 	else {

	jmp	SHORT $LN12@InitLocalD
$LN13@InitLocalD:

; 358  : 		_isPlayer = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+776], 0
$LN12@InitLocalD:

; 359  : 	}
; 360  : 
; 361  : 	// Is it a player - Find out from the aircraft.
; 362  : 	if (ac){

	cmp	DWORD PTR _ac$[ebp], 0
	je	SHORT $LN11@InitLocalD

; 363  : 		_isDigital = ac->IsDigital() ? TRUE : FALSE;

	mov	ecx, DWORD PTR _ac$[ebp]
	call	?IsDigital@AircraftClass@@QAEHXZ	; AircraftClass::IsDigital
	test	eax, eax
	je	SHORT $LN20@InitLocalD
	mov	DWORD PTR tv370[ebp], 1
	jmp	SHORT $LN21@InitLocalD
$LN20@InitLocalD:
	mov	DWORD PTR tv370[ebp], 0
$LN21@InitLocalD:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv370[ebp]
	mov	DWORD PTR [edx+772], eax

; 364  : 	}
; 365  : 	else{

	jmp	SHORT $LN10@InitLocalD
$LN11@InitLocalD:

; 366  : 		_isDigital = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+772], 1
$LN10@InitLocalD:

; 367  : 	}
; 368  : 
; 369  : 	// Set team/country
; 370  : 	if (ac){

	cmp	DWORD PTR _ac$[ebp], 0
	je	SHORT $LN9@InitLocalD

; 371  :       SetCountry (ac->GetCountry());

	mov	edx, DWORD PTR _ac$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ac$[ebp]
	mov	edx, DWORD PTR [eax+120]
	call	edx
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCountry@SimBaseClass@@QAEXH@Z	; SimBaseClass::SetCountry
$LN9@InitLocalD:

; 372  : 	}
; 373  : 
; 374  : 	_endStageTimeAdjust = 
; 375  : 	(
; 376  : 		IsDigiPilot() ?
; 377  : 		0.0F :
; 378  : 		_pd->humanPilotEndStageTimeAdjust
; 379  : 	);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsDigiPilot@EjectedPilotClass@@QBEHXZ	; EjectedPilotClass::IsDigiPilot
	test	eax, eax
	je	SHORT $LN22@InitLocalD
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv394[ebp], xmm0
	jmp	SHORT $LN23@InitLocalD
$LN22@InitLocalD:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+688]
	movss	xmm0, DWORD PTR [edx+132]
	movss	DWORD PTR tv394[ebp], xmm0
$LN23@InitLocalD:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	movss	DWORD PTR [eax+712], xmm0

; 380  : 	
; 381  : 	// It hasn't hit the ground yet.
; 382  : 	_hitGround = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+780], 0

; 383  : 
; 384  : 	// The chute isn't collapsed yet.
; 385  : 	_collapseChute = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+788], 0

; 386  : 	_chuteCollapsedTime = 1000000.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@49742400
	movss	DWORD PTR [eax+792], xmm0

; 387  : 
; 388  : 	// No death message yet.
; 389  : 	_deathMsg = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+808], 0

; 390  : 
; 391  : 	// Update shared data.
; 392  : 	SetPosition(_pos[I_X], _pos[I_Y], _pos[I_Z]);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetPosition@VuEntity@@QAEXMMM@Z	; VuEntity::SetPosition

; 393  : 	SetDelta(_vel[I_X], _vel[I_Y], _vel[I_Z]);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDelta@VuEntity@@QAEXMMM@Z		; VuEntity::SetDelta

; 394  : 	SetYPR(_rot[I_YAW], _rot[I_PITCH], _rot[I_ROLL]);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPR@VuEntity@@QAEXMMM@Z		; VuEntity::SetYPR

; 395  : 	SetYPRDelta(_aVel[I_YAW], _aVel[I_PITCH], _aVel[I_ROLL]);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??A?$Vector_3D@M@@QAEAAMH@Z		; Vector_3D<float>::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetYPRDelta@VuEntity@@QAEXMMM@Z	; VuEntity::SetYPRDelta

; 396  : 
; 397  : 	// Update matrices for geometry.
; 398  : 	CalcTransformMatrix((SimMoverClass *)this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?CalcTransformMatrix@@YAXPAVSimBaseClass@@@Z ; CalcTransformMatrix
	add	esp, 4

; 399  : 
; 400  : 	// Set up our label.
; 401  : 	if (ac)

	cmp	DWORD PTR _ac$[ebp], 0
	je	$LN8@InitLocalD

; 402  : 	{
; 403  : 		acBSP = (DrawableBSP *)ac->drawPointer;

	mov	eax, DWORD PTR _ac$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR _acBSP$[ebp], ecx

; 404  : 		if(acBSP != NULL)

	cmp	DWORD PTR _acBSP$[ebp], 0
	je	$LN7@InitLocalD

; 405  : 		{
; 406  : 			strncpy(_label, acBSP->Label(), 32);

	push	32					; 00000020H
	mov	ecx, DWORD PTR _acBSP$[ebp]
	call	?Label@DrawableBSP@@QAEPADXZ		; DrawableBSP::Label
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 812				; 0000032cH
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 407  : 			labelLen = strlen(acBSP->Label());

	mov	ecx, DWORD PTR _acBSP$[ebp]
	call	?Label@DrawableBSP@@QAEPADXZ		; DrawableBSP::Label
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _labelLen$[ebp], eax

; 408  : 			if (no == 0){

	cmp	DWORD PTR _no$[ebp], 0
	jne	SHORT $LN6@InitLocalD

; 409  : 			    strncat(_label, " Pilot", 32 - labelLen);

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _labelLen$[ebp]
	push	eax
	push	OFFSET ??_C@_06EMKKHMIC@?5Pilot?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	push	ecx
	call	_strncat
	add	esp, 12					; 0000000cH

; 410  : 			}
; 411  : 			else {

	jmp	SHORT $LN5@InitLocalD
$LN6@InitLocalD:

; 412  : 			    char crewstr[20];
; 413  : 			    sprintf (crewstr, " Crew%d", no);

	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_07MIIPMLFO@?5Crew?$CFd?$AA@
	lea	eax, DWORD PTR _crewstr$11[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 414  : 			    strncat(_label, crewstr, 32 - labelLen);

	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR _labelLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _crewstr$11[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 812				; 0000032cH
	push	eax
	call	_strncat
	add	esp, 12					; 0000000cH
$LN5@InitLocalD:

; 415  : 			}
; 416  : 			_label[31] = 0;

	mov	ecx, 1
	imul	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+812], 0

; 417  : 			_labelColor = acBSP->LabelColor();

	mov	ecx, DWORD PTR _acBSP$[ebp]
	call	?LabelColor@DrawableBSP@@QAEKXZ		; DrawableBSP::LabelColor
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+844], eax

; 418  : 		}
; 419  : 		else

	jmp	SHORT $LN4@InitLocalD
$LN7@InitLocalD:

; 420  : 		{
; 421  : 			_label[0] = 0;

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+812], 0

; 422  : 			_labelColor = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+844], 0
$LN4@InitLocalD:

; 423  : 		}
; 424  : 	}
; 425  : 	else

	jmp	SHORT $LN3@InitLocalD
$LN8@InitLocalD:

; 426  : 	{
; 427  : 		strcpy(_label, "Pilot");

	push	OFFSET ??_C@_05KPLJDLMD@Pilot?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 812				; 0000032cH
	push	edx
	call	_strcpy
	add	esp, 8

; 428  : 		labelLen = strlen(_label);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 812				; 0000032cH
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _labelLen$[ebp], eax

; 429  : 		_labelColor = 0;//acBSP->LabelColor();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+844], 0
$LN3@InitLocalD:

; 430  : 	}
; 431  : 	
; 432  : 	_execCalledFromAircraft = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+848], 0

; 433  : 	
; 434  : 	// Point to the aircraft that I ejected from.
; 435  : 	if (ac)

	cmp	DWORD PTR _ac$[ebp], 0
	je	SHORT $LN2@InitLocalD

; 436  : 	{
; 437  : 		_aircraftId = ac->Id();

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _ac$[ebp]
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+672], ecx
	mov	DWORD PTR [eax+676], edx

; 438  : 		_flightId = ac->GetCampaignObject()->Id();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ac$[ebp]
	call	?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ; SimBaseClass::GetCampaignObject
	mov	ecx, eax
	call	?Id@VuEntity@@QBE?AVVU_ID@@XZ		; VuEntity::Id
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+680], edx
	mov	DWORD PTR [ecx+684], eax
$LN2@InitLocalD:

; 439  : 	}
; 440  : 
; 441  : 	// Update exec transfer synching data.
; 442  : 	_lastFrameCount = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+852], 0

; 443  : 	//	_execCount = 0;
; 444  : 
; 445  :    // Act like a bomb, so nobody sees you
; 446  :    // edg: yuck, we now have an eject pilot motion
; 447  :    SetFlag(MOTION_BMB_AI);

	push	1048576					; 00100000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 448  : 
; 449  :    SetFlag(MOTION_EJECT_PILOT);

	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFlag@SimBaseClass@@QAEXH@Z		; SimBaseClass::SetFlag

; 450  : 
; 451  :    if (IsLocal()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsLocal@VuEntity@@QBEEXZ		; VuEntity::IsLocal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@InitLocalD

; 452  :       SimVuDriver *drive = new SimVuDriver(this);

	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN24@InitLocalD
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0SimVuDriver@@QAE@PAVVuEntity@@@Z	; SimVuDriver::SimVuDriver
	mov	DWORD PTR tv599[ebp], eax
	jmp	SHORT $LN25@InitLocalD
$LN24@InitLocalD:
	mov	DWORD PTR tv599[ebp], 0
$LN25@InitLocalD:
	mov	edx, DWORD PTR tv599[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _drive$6[ebp], eax

; 453  :       drive->ExecDR(SimLibElapsedTime);

	mov	ecx, DWORD PTR ?SimLibElapsedTime@@3KA	; SimLibElapsedTime
	push	ecx
	mov	edx, DWORD PTR _drive$6[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _drive$6[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx

; 454  :       SetDriver (drive);

	mov	eax, DWORD PTR _drive$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDriver@VuEntity@@QAEPAVVuDriver@@PAV2@@Z ; VuEntity::SetDriver
$LN1@InitLocalD:

; 455  :    }
; 456  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$0:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$1:
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$2:
	lea	ecx, DWORD PTR $T8[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$3:
	lea	ecx, DWORD PTR $T10[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z$4:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-212]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z ENDP ; EjectedPilotClass::InitLocalData
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CleanupData@EjectedPilotClass@@UAEXXZ PROC		; EjectedPilotClass::CleanupData
; _this$ = ecx

; 458  : void EjectedPilotClass::CleanupData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 459  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::CleanupLocalData

; 460  : 	SimMoverClass::CleanupData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupData@SimMoverClass@@UAEXXZ	; SimMoverClass::CleanupData

; 461  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupData@EjectedPilotClass@@UAEXXZ ENDP		; EjectedPilotClass::CleanupData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitData@EjectedPilotClass@@UAEXXZ PROC		; EjectedPilotClass::InitData
; _this$ = ecx

; 287  : void EjectedPilotClass::InitData(){

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 288  : 	SimMoverClass::InitData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitData@SimMoverClass@@UAEXXZ		; SimMoverClass::InitData

; 289  : 	InitLocalData(NULL, EM_F16_MODE1, 0);

	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z ; EjectedPilotClass::InitLocalData

; 290  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitData@EjectedPilotClass@@UAEXXZ ENDP		; EjectedPilotClass::InitData
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1EjectedPilotClass@@UAE@XZ PROC			; EjectedPilotClass::~EjectedPilotClass
; _this$ = ecx

; 283  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1EjectedPilotClass@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7EjectedPilotClass@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 284  : 	CleanupLocalData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupLocalData@EjectedPilotClass@@AAEXXZ ; EjectedPilotClass::CleanupLocalData

; 285  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??1EjectedPilotClass@@UAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$??1EjectedPilotClass@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1EjectedPilotClass@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1EjectedPilotClass@@UAE@XZ ENDP			; EjectedPilotClass::~EjectedPilotClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_airVuId$ = -32						; size = 8
_parent$ = -24						; size = 4
_ejMode$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_rem$ = 12						; size = 4
??0EjectedPilotClass@@QAE@PAPAEPAJ@Z PROC		; EjectedPilotClass::EjectedPilotClass
; _this$ = ecx

; 242  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimMoverClass@@QAE@PAPAEPAJ@Z	; SimMoverClass::SimMoverClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7EjectedPilotClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 672				; 000002a0H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 680				; 000002a8H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 243  :    VU_ID airVuId;

	lea	ecx, DWORD PTR _airVuId$[ebp]
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID

; 244  :    int ejMode;
; 245  :    AircraftClass *parent;
; 246  : 
; 247  :    memcpychk (&airVuId, stream, sizeof (VU_ID), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _airVuId$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 248  :    memcpychk (&ejMode, stream, sizeof (int), rem);

	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ejMode$[ebp]
	push	edx
	call	?memcpychk@@YAXPAXPAPAEIPAJ@Z		; memcpychk
	add	esp, 16					; 00000010H

; 249  : 
; 250  :    parent = (AircraftClass *)vuDatabase->Find( airVuId );

	mov	eax, DWORD PTR _airVuId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _airVuId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?vuDatabase@@3PAVVuDatabase@@A ; vuDatabase
	call	?Find@VuDatabase@@QBEPAVVuEntity@@VVU_ID@@@Z ; VuDatabase::Find
	mov	DWORD PTR _parent$[ebp], eax

; 251  : 
; 252  :    InitLocalData( parent, ejMode, 0);

	push	0
	mov	edx, DWORD PTR _ejMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z ; EjectedPilotClass::InitLocalData

; 253  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0EjectedPilotClass@@QAE@PAPAEPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0EjectedPilotClass@@QAE@PAPAEPAJ@Z ENDP		; EjectedPilotClass::EjectedPilotClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\eject\simeject.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ac$ = 8						; size = 4
_mode$ = 12						; size = 4
_no$ = 16						; size = 4
??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z PROC	; EjectedPilotClass::EjectedPilotClass
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	call	?ClassType@EjectedPilotClass@@SAHXZ	; EjectedPilotClass::ClassType
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SimMoverClass@@QAE@H@Z		; SimMoverClass::SimMoverClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7EjectedPilotClass@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 672				; 000002a0H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 680				; 000002a8H
	call	??0VU_ID@@QAE@XZ			; VU_ID::VU_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 279  : 	InitLocalData(ac, mode, no);

	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _ac$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitLocalData@EjectedPilotClass@@AAEXPAVAircraftClass@@HH@Z ; EjectedPilotClass::InitLocalData

; 280  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SimMoverClass@@UAE@XZ		; SimMoverClass::~SimMoverClass
__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 724				; 000002d4H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 736				; 000002e0H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 748				; 000002ecH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 760				; 000002f8H
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__unwindfunclet$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 796				; 0000031cH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0EjectedPilotClass@@QAE@PAVAircraftClass@@HH@Z ENDP	; EjectedPilotClass::EjectedPilotClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ??1EP_MODEL_DATA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1EP_MODEL_DATA@@QAE@XZ PROC				; EP_MODEL_DATA::~EP_MODEL_DATA, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	mov	esp, ebp
	pop	ebp
	ret	0
??1EP_MODEL_DATA@@QAE@XZ ENDP				; EP_MODEL_DATA::~EP_MODEL_DATA
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simejinl.cpp
;	COMDAT ??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bsp_$ = 8						; size = 4
_creationStage_$ = 12					; size = 4
_chaseMode_$ = 16					; size = 4
_focusOffset_$ = 20					; size = 4
??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z PROC	; EP_MODEL_DATA::EP_MODEL_DATA, COMDAT
; _this$ = ecx

; 14   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 15   : 	bsp = bsp_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bsp_$[ebp]
	mov	DWORD PTR [eax], ecx

; 16   : 	creationStage = creationStage_;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _creationStage_$[ebp]
	mov	DWORD PTR [edx+4], eax

; 17   : 	chaseMode = chaseMode_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _chaseMode_$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 18   : 	focusOffset = focusOffset_;

	mov	eax, DWORD PTR _focusOffset_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 19   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0EP_MODEL_DATA@@QAE@HHHABV?$Vector_3D@M@@@Z ENDP	; EP_MODEL_DATA::EP_MODEL_DATA
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?Heading@?$Vector_3D@M@@QBEMXZ
_TEXT	SEGMENT
$T2 = -40						; size = 4
$T3 = -36						; size = 4
_this$ = -32						; size = 4
_v1$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Heading@?$Vector_3D@M@@QBEMXZ PROC			; Vector_3D<float>::Heading, COMDAT
; _this$ = ecx

; 546  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Heading@?$Vector_3D@M@@QBEMXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 	Vector_3D<RealType>
; 548  : 		v1;

	lea	ecx, DWORD PTR _v1$[ebp]
	call	??0?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::Vector_3D<float>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 549  : 
; 550  : 	if(_cmp[1] == 0.0)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Heading

; 551  : 	{
; 552  : 		return 0.0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T3[ebp], xmm0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _v1$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	fld	DWORD PTR $T3[ebp]
	jmp	SHORT $LN2@Heading
$LN1@Heading:

; 553  : 	}
; 554  : 
; 555  : 	v1 = *this;

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _v1$[ebp]
	call	??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z	; Vector_3D<float>::operator=

; 556  : 	v1._cmp[2] = 0.0;

	mov	eax, 4
	shl	eax, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _v1$[ebp+eax], xmm0

; 557  : 	v1.Normalize();

	lea	ecx, DWORD PTR _v1$[ebp]
	call	?Normalize@?$Vector_3D@M@@QAEXXZ	; Vector_3D<float>::Normalize

; 558  : 	
; 559  : 	return (float)atan2(v1._cmp[1], v1._cmp[0]);

	mov	ecx, 4
	imul	ecx, 0
	cvtss2sd xmm0, DWORD PTR _v1$[ebp+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	cvtss2sd xmm0, DWORD PTR _v1$[ebp+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?checked_atan2@@YANNN@Z			; checked_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _v1$[ebp]
	call	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
	fld	DWORD PTR $T2[ebp]
$LN2@Heading:

; 560  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Heading@?$Vector_3D@M@@QBEMXZ$0:
	lea	ecx, DWORD PTR _v1$[ebp]
	jmp	??1?$Vector_3D@M@@QAE@XZ		; Vector_3D<float>::~Vector_3D<float>
__ehhandler$?Heading@?$Vector_3D@M@@QBEMXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Heading@?$Vector_3D@M@@QBEMXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Heading@?$Vector_3D@M@@QBEMXZ ENDP			; Vector_3D<float>::Heading
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z
_TEXT	SEGMENT
_cp$ = -28						; size = 4
_cr$ = -24						; size = 4
_sp$ = -20						; size = 4
_sy$ = -16						; size = 4
_sr$ = -12						; size = 4
_cy$ = -8						; size = 4
_this$ = -4						; size = 4
_result$ = 8						; size = 4
?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z PROC	; Vector_3D<float>::GetTrotation, COMDAT
; _this$ = ecx

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 487  : 	float
; 488  : 		cr,
; 489  : 		sr,
; 490  : 		cp,
; 491  : 		sp,
; 492  : 		cy,
; 493  : 		sy;
; 494  : 
; 495  : 	// Construct Roll matrix.
; 496  : 	cr = (float)cos((float)_cmp[0]);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cr$[ebp]

; 497  : 	sr = (float)sin((float)_cmp[0]);

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sr$[ebp]

; 498  : 
; 499  : 	// Construct Pitch matrix.
; 500  : 	cp = (float)cos((float)_cmp[1]);

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cp$[ebp]

; 501  : 	sp = (float)sin((float)_cmp[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sp$[ebp]

; 502  : 
; 503  : 	// Construct Yaw matrix.
; 504  : 	cy = (float)cos((float)_cmp[2]);

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR _cy$[ebp]

; 505  : 	sy = (float)sin((float)_cmp[2]);

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _sy$[ebp]

; 506  : 
; 507  : 	result.M11 = cy*cp;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	movss	DWORD PTR [eax], xmm0

; 508  :    result.M21 = sy*cp;

	movss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _cp$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 509  :    result.M31 = -sp;			

	movss	xmm0, DWORD PTR _sp$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _result$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 510  : 	
; 511  :    result.M12 = -sy*cr + cy*sp*sr;

	movss	xmm0, DWORD PTR _sy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cr$[ebp]
	movss	xmm1, DWORD PTR _cy$[ebp]
	mulss	xmm1, DWORD PTR _sp$[ebp]
	mulss	xmm1, DWORD PTR _sr$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _result$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 512  :    result.M22 = cy*cr + sy*sp*sr;

	movss	xmm0, DWORD PTR _cy$[ebp]
	mulss	xmm0, DWORD PTR _cr$[ebp]
	movss	xmm1, DWORD PTR _sy$[ebp]
	mulss	xmm1, DWORD PTR _sp$[ebp]
	mulss	xmm1, DWORD PTR _sr$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 513  :    result.M32 = cp*sr;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _sr$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 514  : 	
; 515  :    result.M13 = sy*sr + cy*sp*cr;

	movss	xmm0, DWORD PTR _sy$[ebp]
	mulss	xmm0, DWORD PTR _sr$[ebp]
	movss	xmm1, DWORD PTR _cy$[ebp]
	mulss	xmm1, DWORD PTR _sp$[ebp]
	mulss	xmm1, DWORD PTR _cr$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _result$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 516  :    result.M23 = -cy*sr + sy*sp*cr;

	movss	xmm0, DWORD PTR _cy$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sr$[ebp]
	movss	xmm1, DWORD PTR _sy$[ebp]
	mulss	xmm1, DWORD PTR _sp$[ebp]
	mulss	xmm1, DWORD PTR _cr$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 517  :    result.M33 = cp*cr;

	movss	xmm0, DWORD PTR _cp$[ebp]
	mulss	xmm0, DWORD PTR _cr$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 518  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTrotation@?$Vector_3D@M@@QBEXAAUTrotation@@@Z ENDP	; Vector_3D<float>::GetTrotation
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z PROC	; Vector_3D<float>::GetTpoint, COMDAT
; _this$ = ecx

; 474  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 475  : 	p.x = (float)_cmp[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], eax

; 476  : 	p.y = (float)_cmp[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+4], ecx

; 477  : 	p.z = (float)_cmp[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+8], edx

; 478  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTpoint@?$Vector_3D@M@@QBEXAAUTpoint@@@Z ENDP	; Vector_3D<float>::GetTpoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?Invert@?$Vector_3D@M@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Invert@?$Vector_3D@M@@QAEXXZ PROC			; Vector_3D<float>::Invert, COMDAT
; _this$ = ecx

; 435  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 	_cmp[0] = -_cmp[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 437  : 	_cmp[1] = -_cmp[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 438  : 	_cmp[2] = -_cmp[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 439  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Invert@?$Vector_3D@M@@QAEXXZ ENDP			; Vector_3D<float>::Invert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?Normalize@?$Vector_3D@M@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Normalize@?$Vector_3D@M@@QAEXXZ PROC			; Vector_3D<float>::Normalize, COMDAT
; _this$ = ecx

; 425  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 426  : 	operator*=(OOMagnitude());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OOMagnitude@?$Vector_3D@M@@QBEMXZ	; Vector_3D<float>::OOMagnitude
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 427  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@?$Vector_3D@M@@QAEXXZ ENDP			; Vector_3D<float>::Normalize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?OOMagnitude@?$Vector_3D@M@@QBEMXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv68 = -8						; size = 4
_mag$ = -4						; size = 4
?OOMagnitude@?$Vector_3D@M@@QBEMXZ PROC			; Vector_3D<float>::OOMagnitude, COMDAT
; _this$ = ecx

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 412  : 	RealType
; 413  : 		mag;
; 414  : 
; 415  : 	mag = Magnitude();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Magnitude@?$Vector_3D@M@@QBEMXZ	; Vector_3D<float>::Magnitude
	fstp	DWORD PTR _mag$[ebp]

; 416  : 	return(mag == 0.0F ? 0.0F : 1.0F / mag);

	movss	xmm0, DWORD PTR _mag$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@OOMagnitud
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN4@OOMagnitud
$LN3@OOMagnitud:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _mag$[ebp]
	movss	DWORD PTR tv68[ebp], xmm0
$LN4@OOMagnitud:
	fld	DWORD PTR tv68[ebp]

; 417  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?OOMagnitude@?$Vector_3D@M@@QBEMXZ ENDP			; Vector_3D<float>::OOMagnitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?Magnitude@?$Vector_3D@M@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Magnitude@?$Vector_3D@M@@QBEMXZ PROC			; Vector_3D<float>::Magnitude, COMDAT
; _this$ = ecx

; 397  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 398  : 	return((float)sqrt(MagnitudeSquared()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MagnitudeSquared@?$Vector_3D@M@@QBEMXZ	; Vector_3D<float>::MagnitudeSquared
	push	ecx
	fstp	DWORD PTR [esp]
	call	?SqrtSSE@@YAMM@Z			; SqrtSSE
	add	esp, 4

; 399  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Magnitude@?$Vector_3D@M@@QBEMXZ ENDP			; Vector_3D<float>::Magnitude
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ?MagnitudeSquared@?$Vector_3D@M@@QBEMXZ
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
?MagnitudeSquared@?$Vector_3D@M@@QBEMXZ PROC		; Vector_3D<float>::MagnitudeSquared, COMDAT
; _this$ = ecx

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 383  : 	return
; 384  : 	(
; 385  : 		_cmp[0] * _cmp[0] + 
; 386  : 		_cmp[1] * _cmp[1] + 
; 387  : 		_cmp[2] * _cmp[2]
; 388  : 	);

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	mulss	xmm0, DWORD PTR [esi+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+eax]
	mulss	xmm1, DWORD PTR [esi+ecx]
	addss	xmm0, xmm1
	movss	DWORD PTR tv136[ebp], xmm0
	fld	DWORD PTR tv136[ebp]

; 389  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?MagnitudeSquared@?$Vector_3D@M@@QBEMXZ ENDP		; Vector_3D<float>::MagnitudeSquared
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??_0?$Vector_3D@M@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??_0?$Vector_3D@M@@QAEXM@Z PROC				; Vector_3D<float>::operator/=, COMDAT
; _this$ = ecx

; 250  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 	F4Assert(n != (RealType)0.0)
; 252  : 		operator*=((RealType)1.0/n);

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _n$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??X?$Vector_3D@M@@QAEXM@Z		; Vector_3D<float>::operator*=

; 253  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??_0?$Vector_3D@M@@QAEXM@Z ENDP				; Vector_3D<float>::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??X?$Vector_3D@M@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??X?$Vector_3D@M@@QAEXM@Z PROC				; Vector_3D<float>::operator*=, COMDAT
; _this$ = ecx

; 238  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 239  : 	_cmp[0] *= n;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR _n$[ebp]
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 240  : 	_cmp[1] *= n;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	mulss	xmm0, DWORD PTR _n$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 241  : 	_cmp[2] *= n;

	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	mulss	xmm0, DWORD PTR _n$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 242  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??X?$Vector_3D@M@@QAEXM@Z ENDP				; Vector_3D<float>::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??Z?$Vector_3D@M@@QAEXABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??Z?$Vector_3D@M@@QAEXABV0@@Z PROC			; Vector_3D<float>::operator-=, COMDAT
; _this$ = ecx

; 226  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 	_cmp[0] -= v._cmp[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	subss	xmm0, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 228  : 	_cmp[1] -= v._cmp[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	subss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 229  : 	_cmp[2] -= v._cmp[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	subss	xmm0, DWORD PTR [esi+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 230  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$Vector_3D@M@@QAEXABV0@@Z ENDP			; Vector_3D<float>::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??Y?$Vector_3D@M@@QAEXABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??Y?$Vector_3D@M@@QAEXABV0@@Z PROC			; Vector_3D<float>::operator+=, COMDAT
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	_cmp[0] += v._cmp[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	addss	xmm0, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 216  : 	_cmp[1] += v._cmp[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	addss	xmm0, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 217  : 	_cmp[2] += v._cmp[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	addss	xmm0, DWORD PTR [esi+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 218  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$Vector_3D@M@@QAEXABV0@@Z ENDP			; Vector_3D<float>::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??A?$Vector_3D@M@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$Vector_3D@M@@QBEABMH@Z PROC			; Vector_3D<float>::operator[], COMDAT
; _this$ = ecx

; 188  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  : 	return _cmp[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 190  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector_3D@M@@QBEABMH@Z ENDP			; Vector_3D<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??A?$Vector_3D@M@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$Vector_3D@M@@QAEAAMH@Z PROC			; Vector_3D<float>::operator[], COMDAT
; _this$ = ecx

; 178  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 	return _cmp[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 180  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$Vector_3D@M@@QAEAAMH@Z ENDP			; Vector_3D<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z PROC			; Vector_3D<float>::operator=, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	_cmp[0] = v._cmp[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	mov	DWORD PTR [edx+ecx], eax

; 166  : 	_cmp[1] = v._cmp[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [eax+edx], ecx

; 167  : 	_cmp[2] = v._cmp[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	mov	DWORD PTR [ecx+eax], edx

; 168  : 
; 169  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 170  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$Vector_3D@M@@QAEAAV0@ABV0@@Z ENDP			; Vector_3D<float>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??1?$Vector_3D@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Vector_3D@M@@QAE@XZ PROC				; Vector_3D<float>::~Vector_3D<float>, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Vector_3D@M@@QAE@XZ ENDP				; Vector_3D<float>::~Vector_3D<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z PROC		; Vector_3D<float>::Vector_3D<float>, COMDAT
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 	_cmp[0] = p.x;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax], edx

; 145  : 	_cmp[1] = p.y;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx

; 146  : 	_cmp[2] = p.z;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax], edx

; 147  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$Vector_3D@M@@QAE@ABUTpoint@@@Z ENDP		; Vector_3D<float>::Vector_3D<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??0?$Vector_3D@M@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_j$ = 12						; size = 4
_k$ = 16						; size = 4
??0?$Vector_3D@M@@QAE@MMM@Z PROC			; Vector_3D<float>::Vector_3D<float>, COMDAT
; _this$ = ecx

; 119  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 	_cmp[0] = i;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _i$[ebp]
	movss	DWORD PTR [ecx+eax], xmm0

; 121  : 	_cmp[1] = j;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _j$[ebp]
	movss	DWORD PTR [eax+edx], xmm0

; 122  : 	_cmp[2] = k;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _k$[ebp]
	movss	DWORD PTR [edx+ecx], xmm0

; 123  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$Vector_3D@M@@QAE@MMM@Z ENDP			; Vector_3D<float>::Vector_3D<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\vector.h
;	COMDAT ??0?$Vector_3D@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Vector_3D@M@@QAE@XZ PROC				; Vector_3D<float>::Vector_3D<float>, COMDAT
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	_cmp[0] = (RealType)0.0;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0

; 104  : 	_cmp[1] = (RealType)0.0;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0

; 105  : 	_cmp[2] = (RealType)0.0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx], xmm0

; 106  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Vector_3D@M@@QAE@XZ ENDP				; Vector_3D<float>::Vector_3D<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?MotionOn@SimulationDriver@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MotionOn@SimulationDriver@@QAEHXZ PROC			; SimulationDriver::MotionOn, COMDAT
; _this$ = ecx

; 98   : 	int MotionOn(void) {return motionOn;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+352]
	mov	esp, ebp
	pop	ebp
	ret	0
?MotionOn@SimulationDriver@@QAEHXZ ENDP			; SimulationDriver::MotionOn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simdrive.h
;	COMDAT ?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ PROC ; SimulationDriver::GetPlayerEntity, COMDAT
; _this$ = ecx

; 76   : 	SimMoverClass *GetPlayerEntity() const { return const_cast<SimMoverClass*>(playerEntity); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerEntity@SimulationDriver@@QBEPAVSimMoverClass@@XZ ENDP ; SimulationDriver::GetPlayerEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ?memcpychk@@YAXPAXPAPAEIPAJ@Z
_TEXT	SEGMENT
$T2 = -152						; size = 12
_s$3 = -140						; size = 24
_err$4 = -116						; size = 100
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
_rem$ = 20						; size = 4
?memcpychk@@YAXPAXPAPAEIPAJ@Z PROC			; memcpychk, COMDAT

; 25   : inline void memcpychk(void *dst, VU_BYTE **src, size_t size, long *rem){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 26   : 	if ((size_t)*rem < size){

	mov	eax, DWORD PTR _rem$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@memcpychk

; 27   : 		char err[100];
; 28   : 		sprintf(err, "Trying to write %lu bytes to %ld buffer", static_cast<unsigned long>(size), *rem);

	mov	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@MPKJAHJH@Trying?5to?5write?5?$CFlu?5bytes?5to?5?$CFld@
	lea	edx, DWORD PTR _err$4[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 29   : 		std::string s(err);

	lea	eax, DWORD PTR _err$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 		throw InvalidBufferException(s);

	lea	ecx, DWORD PTR _s$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; InvalidBufferException::InvalidBufferException
	push	OFFSET __TI4?AVInvalidBufferException@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 31   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@memcpychk:

; 32   : 	memcpy(dst, *src, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	*rem -= size;

	mov	ecx, DWORD PTR _rem$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [eax], edx

; 34   : 	*src += size;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _src$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@memcpychk:

; 35   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?memcpychk@@YAXPAXPAPAEIPAJ@Z$0:
	lea	ecx, DWORD PTR _s$3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?memcpychk@@YAXPAXPAPAEIPAJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?memcpychk@@YAXPAXPAPAEIPAJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?memcpychk@@YAXPAXPAPAEIPAJ@Z ENDP			; memcpychk
; Function compile flags: /Odtp
;	COMDAT ??_GInvalidBufferException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidBufferException@@UAEPAXI@Z PROC		; InvalidBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InvalidBufferException@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInvalidBufferException@@UAEPAXI@Z ENDP		; InvalidBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0InvalidBufferException@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV0@@Z PROC		; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV0@@Z ENDP		; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1InvalidBufferException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidBufferException@@UAE@XZ PROC			; InvalidBufferException::~InvalidBufferException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1InvalidBufferException@@UAE@XZ ENDP			; InvalidBufferException::~InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\invalidbufferexception.h
;	COMDAT ??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_msg$ = 8						; size = 4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; InvalidBufferException::InvalidBufferException, COMDAT
; _this$ = ecx

; 19   : 	InvalidBufferException(const std::string &msg) : out_of_range(msg){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7InvalidBufferException@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0InvalidBufferException@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; InvalidBufferException::InvalidBufferException
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\aircrft.h
;	COMDAT ?IsDigital@AircraftClass@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDigital@AircraftClass@@QAEHXZ PROC			; AircraftClass::IsDigital, COMDAT
; _this$ = ecx

; 385  : 	int IsDigital() { return isDigital; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+948]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDigital@AircraftClass@@QAEHXZ ENDP			; AircraftClass::IsDigital
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?IsMover@SimMoverClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMover@SimMoverClass@@UAEHXZ PROC			; SimMoverClass::IsMover, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsMover (void) {return TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMover@SimMoverClass@@UAEHXZ ENDP			; SimMoverClass::IsMover
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetSwitch@SimMoverClass@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
_val$ = 12						; size = 4
?SetSwitch@SimMoverClass@@QAEXHH@Z PROC			; SimMoverClass::SetSwitch, COMDAT
; _this$ = ecx

; 134  : 	void SetSwitch (int num, int val) { ShiAssert(num < numSwitches); if (num < numSwitches) { switchData[num] = val; switchChange[num] = TRUE;} }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR [eax+604]
	jge	SHORT $LN2@SetSwitch
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+592]
	mov	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+596]
	mov	edx, DWORD PTR _num$[ebp]
	mov	DWORD PTR [ecx+edx*4], 1
$LN2@SetSwitch:
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSwitch@SimMoverClass@@QAEXHH@Z ENDP			; SimMoverClass::SetSwitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?WeaponKeepAlive@SimMoverClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WeaponKeepAlive@SimMoverClass@@UAEXXZ PROC		; SimMoverClass::WeaponKeepAlive, COMDAT
; _this$ = ecx

; 109  : 	virtual void WeaponKeepAlive() { return; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?WeaponKeepAlive@SimMoverClass@@UAEXXZ ENDP		; SimMoverClass::WeaponKeepAlive
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simmover.h
;	COMDAT ?SetLead@SimMoverClass@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?SetLead@SimMoverClass@@UAEXH@Z PROC			; SimMoverClass::SetLead, COMDAT
; _this$ = ecx

; 87   : 	virtual void SetLead (int) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLead@SimMoverClass@@UAEXH@Z ENDP			; SimMoverClass::SetLead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcsess.h
;	COMDAT ?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ PROC ; FalconSessionEntity::GetGame, COMDAT
; _this$ = ecx

; 154  : 	FalconGameEntity* GetGame (void)              { return (FalconGameEntity*)VuSessionEntity::Game(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Game@VuSessionEntity@@QAEPAVVuGameEntity@@XZ ; VuSessionEntity::Game
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGame@FalconSessionEntity@@QAEPAVFalconGameEntity@@XZ ENDP ; FalconSessionEntity::GetGame
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?Regenerate@SimBaseClass@@UAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Regenerate@SimBaseClass@@UAEXMMMM@Z PROC		; SimBaseClass::Regenerate, COMDAT
; _this$ = ecx

; 261  : 	virtual void Regenerate(float, float, float, float) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Regenerate@SimBaseClass@@UAEXMMMM@Z ENDP		; SimBaseClass::Regenerate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?SetVuPosition@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetVuPosition@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::SetVuPosition, COMDAT
; _this$ = ecx

; 260  : 	virtual void SetVuPosition() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetVuPosition@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::SetVuPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ PROC	; SimBaseClass::ConfigurePlayerAvionics, COMDAT
; _this$ = ecx

; 259  : 	virtual void ConfigurePlayerAvionics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ConfigurePlayerAvionics@SimBaseClass@@UAEXXZ ENDP	; SimBaseClass::ConfigurePlayerAvionics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakeNonPlayerVehicle, COMDAT
; _this$ = ecx

; 258  : 	virtual void MakeNonPlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeNonPlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakeNonPlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?MakePlayerVehicle@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakePlayerVehicle@SimBaseClass@@UAEXXZ PROC		; SimBaseClass::MakePlayerVehicle, COMDAT
; _this$ = ecx

; 257  : 	virtual void MakePlayerVehicle() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakePlayerVehicle@SimBaseClass@@UAEXXZ ENDP		; SimBaseClass::MakePlayerVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ PROC ; SimBaseClass::GetCampaignObject, COMDAT
; _this$ = ecx

; 212  : 	CampBaseClass *GetCampaignObject (void) { return campaignObject.get(); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ; VuBin<CampBaseClass>::get
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCampaignObject@SimBaseClass@@QAEPAVCampBaseClass@@XZ ENDP ; SimBaseClass::GetCampaignObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsAwake@SimBaseClass@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAwake@SimBaseClass@@QBEHXZ PROC			; SimBaseClass::IsAwake, COMDAT
; _this$ = ecx

; 177  : 	int IsAwake() const { return localFlags & OBJ_AWAKE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+284]
	and	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAwake@SimBaseClass@@QBEHXZ ENDP			; SimBaseClass::IsAwake
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsDead@SimBaseClass@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsDead@SimBaseClass@@UBEHXZ PROC			; SimBaseClass::IsDead, COMDAT
; _this$ = ecx

; 174  : 	virtual int IsDead() const { return (specialData.flags & OBJ_DEAD ? true : false); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@IsDead
	mov	BYTE PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsDead
$LN3@IsDead:
	mov	BYTE PTR tv68[ebp], 0
$LN4@IsDead:
	movzx	eax, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@SimBaseClass@@UBEHXZ ENDP			; SimBaseClass::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsExploding@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?IsExploding@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::IsExploding, COMDAT
; _this$ = ecx

; 173  : 	virtual int IsExploding () { return (specialData.flags & OBJ_EXPLODING ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 16					; 00000010H
	je	SHORT $LN3@IsExplodin
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsExplodin
$LN3@IsExplodin:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsExplodin:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsExploding@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::IsExploding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?OnGround@SimBaseClass@@UAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv68 = -4						; size = 4
?OnGround@SimBaseClass@@UAEHXZ PROC			; SimBaseClass::OnGround, COMDAT
; _this$ = ecx

; 172  : 	virtual int OnGround () { return (specialData.flags & ON_GROUND ? TRUE : FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@OnGround
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@OnGround
$LN3@OnGround:
	mov	DWORD PTR tv68[ebp], 0
$LN4@OnGround:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?OnGround@SimBaseClass@@UAEHXZ ENDP			; SimBaseClass::OnGround
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?GetCountry@SimBaseClass@@UAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCountry@SimBaseClass@@UAEEXZ PROC			; SimBaseClass::GetCountry, COMDAT
; _this$ = ecx

; 157  : 	virtual uchar GetCountry() { return (uchar)specialData.country; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCountry@SimBaseClass@@UAEEXZ ENDP			; SimBaseClass::GetCountry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?IsSimBase@SimBaseClass@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimBase@SimBaseClass@@UAE_NXZ PROC			; SimBaseClass::IsSimBase, COMDAT
; _this$ = ecx

; 152  : 	virtual bool IsSimBase() { return true; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	al, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimBase@SimBaseClass@@UAE_NXZ ENDP			; SimBaseClass::IsSimBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\simbase.h
;	COMDAT ?JoinFlight@SimBaseClass@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?JoinFlight@SimBaseClass@@UAEXXZ PROC			; SimBaseClass::JoinFlight, COMDAT
; _this$ = ecx

; 139  : 	virtual void JoinFlight (void) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoinFlight@SimBaseClass@@UAEXXZ ENDP			; SimBaseClass::JoinFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ PROC ; VuBin<CampBaseClass>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VCampBaseClass@@@@QBEPAVCampBaseClass@@XZ ENDP ; VuBin<CampBaseClass>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\mltrig.h
;	COMDAT ?checked_atan2@@YANNN@Z
_TEXT	SEGMENT
_z$ = -8						; size = 8
_y$ = 8							; size = 8
_x$ = 16						; size = 8
?checked_atan2@@YANNN@Z PROC				; checked_atan2, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 47   : 	double z;
; 48   : 	
; 49   : 	if (x == -0.0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@8000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@checked_at

; 50   : 		x = 0.0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _x$[ebp], xmm0
$LN8@checked_at:

; 51   : 	
; 52   : 	if (x != 0)

	movsd	xmm0, QWORD PTR _x$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@checked_at

; 53   : 		z = atan(y / x);

	movsd	xmm0, QWORD PTR _y$[ebp]
	divsd	xmm0, QWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan
	add	esp, 8
	fstp	QWORD PTR _z$[ebp]
	jmp	SHORT $LN4@checked_at
$LN7@checked_at:

; 54   : 	else if (y > 0)

	movsd	xmm0, QWORD PTR _y$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@checked_at

; 55   : 		z = HALF_DPI;

	movsd	xmm0, QWORD PTR __real@3ff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 56   : 	else

	jmp	SHORT $LN4@checked_at
$LN5@checked_at:

; 57   : 		z = -HALF_DPI;

	movsd	xmm0, QWORD PTR __real@bff921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN4@checked_at:

; 58   : 
; 59   : 	if (x < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _x$[ebp]
	jbe	SHORT $LN1@checked_at

; 60   : 	{
; 61   : 		if (y < 0)

	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR _y$[ebp]
	jbe	SHORT $LN2@checked_at

; 62   : 			z -= DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	subsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0

; 63   : 		else

	jmp	SHORT $LN1@checked_at
$LN2@checked_at:

; 64   : 			z += DPI;

	movsd	xmm0, QWORD PTR _z$[ebp]
	addsd	xmm0, QWORD PTR __real@400921fb54442d18
	movsd	QWORD PTR _z$[ebp], xmm0
$LN1@checked_at:

; 65   : 	}
; 66   : 
; 67   : 	return z;

	fld	QWORD PTR _z$[ebp]

; 68   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?checked_atan2@@YANNN@Z ENDP				; checked_atan2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetSEARCHtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSEARCHtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetSEARCHtimer, COMDAT
; _this$ = ecx

; 198  : 	virtual VU_TIME GetSEARCHtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSEARCHtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetAQUIREtimer@FalconEntity@@UAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAQUIREtimer@FalconEntity@@UAEKXZ PROC		; FalconEntity::GetAQUIREtimer, COMDAT
; _this$ = ecx

; 197  : 	virtual VU_TIME GetAQUIREtimer(void)				{ return 0; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAQUIREtimer@FalconEntity@@UAEKXZ ENDP		; FalconEntity::GetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetStepSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetStepSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetStepSearchMode, COMDAT
; _this$ = ecx

; 196  : 	virtual void SetStepSearchMode(uchar)					{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStepSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetStepSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSEARCHtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetSEARCHtimer, COMDAT
; _this$ = ecx

; 194  : 	virtual void SetSEARCHtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSEARCHtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetSEARCHtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetAQUIREtimer@FalconEntity@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newTime$ = 8						; size = 4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z PROC		; FalconEntity::SetAQUIREtimer, COMDAT
; _this$ = ecx

; 193  : 	virtual void SetAQUIREtimer(VU_TIME newTime)		{ };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAQUIREtimer@FalconEntity@@UAEXK@Z ENDP		; FalconEntity::SetAQUIREtimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetIRFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIRFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetIRFactor, COMDAT
; _this$ = ecx

; 164  : 	virtual float GetIRFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetIRFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetIRFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRCSFactor@FalconEntity@@UAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRCSFactor@FalconEntity@@UAEMXZ PROC			; FalconEntity::GetRCSFactor, COMDAT
; _this$ = ecx

; 163  : 	virtual float GetRCSFactor (void)			{ return 0.0f; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRCSFactor@FalconEntity@@UAEMXZ ENDP			; FalconEntity::GetRCSFactor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTaskForce@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTaskForce@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTaskForce, COMDAT
; _this$ = ecx

; 158  : 	virtual int IsTaskForce (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTaskForce@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTaskForce
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsTeam@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTeam@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsTeam, COMDAT
; _this$ = ecx

; 157  : 	virtual int IsTeam (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTeam@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsTeam
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPackage@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPackage@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsPackage, COMDAT
; _this$ = ecx

; 156  : 	virtual int IsPackage (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPackage@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsPackage
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSquadron@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSquadron@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsSquadron, COMDAT
; _this$ = ecx

; 155  : 	virtual int IsSquadron (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSquadron@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsSquadron
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsFlight@FalconEntity@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlight@FalconEntity@@UBEHXZ PROC			; FalconEntity::IsFlight, COMDAT
; _this$ = ecx

; 154  : 	virtual int IsFlight() const				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlight@FalconEntity@@UBEHXZ ENDP			; FalconEntity::IsFlight
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBrigade@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBrigade@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBrigade, COMDAT
; _this$ = ecx

; 153  : 	virtual int IsBrigade (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBrigade@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBrigade
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBattalion@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBattalion@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBattalion, COMDAT
; _this$ = ecx

; 152  : 	virtual int IsBattalion (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBattalion@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBattalion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsObjective@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsObjective@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsObjective, COMDAT
; _this$ = ecx

; 151  : 	virtual int IsObjective (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjective@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsObjective
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsUnit@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUnit@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsUnit, COMDAT
; _this$ = ecx

; 150  : 	virtual int IsUnit (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnit@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsUnit
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsEmitting@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmitting@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsEmitting, COMDAT
; _this$ = ecx

; 145  : 	virtual int IsEmitting (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmitting@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsEmitting
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsDead@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDead@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsDead, COMDAT
; _this$ = ecx

; 144  : 	virtual int IsDead (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsWeapon@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWeapon@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsWeapon, COMDAT
; _this$ = ecx

; 142  : 	virtual int IsWeapon (void)   				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWeapon@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsWeapon
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsShip@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsShip@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsShip, COMDAT
; _this$ = ecx

; 141  : 	virtual int IsShip (void) 			        { return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShip@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsShip
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGroundVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGroundVehicle@FalconEntity@@UAEHXZ PROC		; FalconEntity::IsGroundVehicle, COMDAT
; _this$ = ecx

; 140  : 	virtual int IsGroundVehicle (void) 			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGroundVehicle@FalconEntity@@UAEHXZ ENDP		; FalconEntity::IsGroundVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsAirplane@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsAirplane@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsAirplane, COMDAT
; _this$ = ecx

; 139  : 	virtual int IsAirplane (void)	   			{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAirplane@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsAirplane
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsHelicopter@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsHelicopter@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsHelicopter, COMDAT
; _this$ = ecx

; 137  : 	virtual int IsHelicopter (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsHelicopter@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsHelicopter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsStatic@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStatic@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsStatic, COMDAT
; _this$ = ecx

; 136  : 	virtual int IsStatic (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStatic@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsVehicle@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsVehicle@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsVehicle, COMDAT
; _this$ = ecx

; 135  : 	virtual int IsVehicle (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsVehicle@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsVehicle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsGun@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsGun@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsGun, COMDAT
; _this$ = ecx

; 133  : 	virtual int IsGun (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsGun@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsGun
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsBomb@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBomb@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsBomb, COMDAT
; _this$ = ecx

; 132  : 	virtual int IsBomb (void)					{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBomb@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsBomb
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsLauncher@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLauncher@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsLauncher, COMDAT
; _this$ = ecx

; 131  : 	virtual int IsLauncher (void)               { return FALSE; } // MLR 3/4/2004 - rocket pods

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLauncher@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsLauncher
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsMissile@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMissile@FalconEntity@@UAEHXZ PROC			; FalconEntity::IsMissile, COMDAT
; _this$ = ecx

; 130  : 	virtual int IsMissile (void)				{ return FALSE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMissile@FalconEntity@@UAEHXZ ENDP			; FalconEntity::IsMissile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv69 = -4						; size = 4
_e$ = 8							; size = 4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z PROC	; FalconEntity::HasEntity, COMDAT
; _this$ = ecx

; 129  : 	virtual int HasEntity(VuEntity *e) const    { return this == e; } // sfr: added for new driver

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _e$[ebp]
	jne	SHORT $LN3@HasEntity
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@HasEntity
$LN3@HasEntity:
	mov	DWORD PTR tv69[ebp], 0
$LN4@HasEntity:
	mov	eax, DWORD PTR tv69[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?HasEntity@FalconEntity@@UBEHPAVVuEntity@@@Z ENDP	; FalconEntity::HasEntity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?CombatClass@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CombatClass@FalconEntity@@UAEHXZ PROC			; FalconEntity::CombatClass, COMDAT
; _this$ = ecx

; 127  : 	virtual int CombatClass (void)				{ return 999; } // 2002-02-25 ADDED BY S.G. No combat class for non flight or non aircraft class

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 999				; 000003e7H
	mov	esp, ebp
	pop	ebp
	ret	0
?CombatClass@FalconEntity@@UAEHXZ ENDP			; FalconEntity::CombatClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetSearchMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetSearchMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetSearchMode, COMDAT
; _this$ = ecx

; 126  : 	virtual void SetSearchMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSearchMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetSearchMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?ReturnToSearch@FalconEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReturnToSearch@FalconEntity@@UAEXXZ PROC		; FalconEntity::ReturnToSearch, COMDAT
; _this$ = ecx

; 124  : 	virtual void ReturnToSearch (void)			{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReturnToSearch@FalconEntity@@UAEXXZ ENDP		; FalconEntity::ReturnToSearch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetRadarMode@FalconEntity@@UAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?SetRadarMode@FalconEntity@@UAEXE@Z PROC		; FalconEntity::SetRadarMode, COMDAT
; _this$ = ecx

; 123  : 	virtual void SetRadarMode (uchar)		{};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadarMode@FalconEntity@@UAEXE@Z ENDP		; FalconEntity::SetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?GetRadarMode@FalconEntity@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRadarMode@FalconEntity@@UAEHXZ PROC			; FalconEntity::GetRadarMode, COMDAT
; _this$ = ecx

; 121  : 	virtual int GetRadarMode (void)				{ return FEC_RADAR_OFF; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRadarMode@FalconEntity@@UAEHXZ ENDP			; FalconEntity::GetRadarMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsPlayer@FalconEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPlayer@FalconEntity@@QAEHXZ PROC			; FalconEntity::IsPlayer, COMDAT
; _this$ = ecx

; 113  : 	int IsPlayer (void)							{ return IsSetFalcFlag(FEC_HASPLAYERS); };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsSetFalcFlag@FalconEntity@@QAEHH@Z	; FalconEntity::IsSetFalcFlag
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPlayer@FalconEntity@@QAEHXZ ENDP			; FalconEntity::IsPlayer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsSetFalcFlag@FalconEntity@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z PROC		; FalconEntity::IsSetFalcFlag, COMDAT
; _this$ = ecx

; 112  : 	int IsSetFalcFlag (int flag)				{ return falconFlags & flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+136]
	and	eax, DWORD PTR _flag$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSetFalcFlag@FalconEntity@@QAEHH@Z ENDP		; FalconEntity::IsSetFalcFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?SetTypeFlag@FalconEntity@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
?SetTypeFlag@FalconEntity@@QAEXH@Z PROC			; FalconEntity::SetTypeFlag, COMDAT
; _this$ = ecx

; 108  : 	void SetTypeFlag (int flag)					{ falconType |= flag; };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+137]
	or	ecx, DWORD PTR _flag$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+137], cl
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTypeFlag@FalconEntity@@QAEXH@Z ENDP			; FalconEntity::SetTypeFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\falcent.h
;	COMDAT ?IsCampBase@FalconEntity@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCampBase@FalconEntity@@UAE_NXZ PROC			; FalconEntity::IsCampBase, COMDAT
; _this$ = ecx

; 99   : 	virtual bool IsCampBase() { return false; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCampBase@FalconEntity@@UAE_NXZ ENDP			; FalconEntity::IsCampBase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vudriver.h
;	COMDAT ?Handle@VuMaster@@UAEHPAVVuPositionUpdateEvent@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@VuMaster@@UAEHPAVVuPositionUpdateEvent@@@Z PROC	; VuMaster::Handle, COMDAT
; _this$ = ecx

; 156  : 	virtual VU_ERRCODE Handle(VuPositionUpdateEvent *event){ return VU_NO_OP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@VuMaster@@UAEHPAVVuPositionUpdateEvent@@@Z ENDP	; VuMaster::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vudriver.h
;	COMDAT ?Handle@VuMaster@@UAEHPAVVuFullUpdateEvent@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@VuMaster@@UAEHPAVVuFullUpdateEvent@@@Z PROC	; VuMaster::Handle, COMDAT
; _this$ = ecx

; 155  : 	virtual VU_ERRCODE Handle(VuFullUpdateEvent *event){ return VU_NO_OP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@VuMaster@@UAEHPAVVuFullUpdateEvent@@@Z ENDP	; VuMaster::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vudriver.h
;	COMDAT ?Handle@VuMaster@@UAEHPAVVuEvent@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_event$ = 8						; size = 4
?Handle@VuMaster@@UAEHPAVVuEvent@@@Z PROC		; VuMaster::Handle, COMDAT
; _this$ = ecx

; 154  : 	virtual VU_ERRCODE Handle(VuEvent *event){ return VU_NO_OP; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	4
?Handle@VuMaster@@UAEHPAVVuEvent@@@Z ENDP		; VuMaster::Handle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vudriver.h
;	COMDAT ?NoExec@VuMaster@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_timestamp$ = 8						; size = 4
?NoExec@VuMaster@@UAEXK@Z PROC				; VuMaster::NoExec, COMDAT
; _this$ = ecx

; 144  : 	virtual void NoExec(VU_TIME timestamp){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?NoExec@VuMaster@@UAEXK@Z ENDP				; VuMaster::NoExec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ PROC ; VuBin<VuSessionEntity>::get, COMDAT
; _this$ = ecx

; 55   : 	E *get() const{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 		return e;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$VuBin@VVuSessionEntity@@@@QBEPAVVuSessionEntity@@XZ ENDP ; VuBin<VuSessionEntity>::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vu_templates.h
;	COMDAT ??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ PROC		; VuBin<VuSessionEntity>::operator bool, COMDAT
; _this$ = ecx

; 40   : 	operator bool() const{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 		return e != NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv66[ebp]

; 42   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$VuBin@VVuSessionEntity@@@@QBE_NXZ ENDP		; VuBin<VuSessionEntity>::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?RollDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RollDelta@VuEntity@@QBEMXZ PROC			; VuEntity::RollDelta, COMDAT
; _this$ = ecx

; 169  : 	SM_SCALAR RollDelta() const { return orient_.droll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+80]
	mov	esp, ebp
	pop	ebp
	ret	0
?RollDelta@VuEntity@@QBEMXZ ENDP			; VuEntity::RollDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?PitchDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PitchDelta@VuEntity@@QBEMXZ PROC			; VuEntity::PitchDelta, COMDAT
; _this$ = ecx

; 168  : 	SM_SCALAR PitchDelta() const { return orient_.dpitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+76]
	mov	esp, ebp
	pop	ebp
	ret	0
?PitchDelta@VuEntity@@QBEMXZ ENDP			; VuEntity::PitchDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YawDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YawDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YawDelta, COMDAT
; _this$ = ecx

; 167  : 	SM_SCALAR YawDelta() const { return orient_.dyaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+72]
	mov	esp, ebp
	pop	ebp
	ret	0
?YawDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YawDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Roll@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Roll@VuEntity@@QBEMXZ PROC				; VuEntity::Roll, COMDAT
; _this$ = ecx

; 166  : 	SM_SCALAR Roll() const { return orient_.roll_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?Roll@VuEntity@@QBEMXZ ENDP				; VuEntity::Roll
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Pitch@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Pitch@VuEntity@@QBEMXZ PROC				; VuEntity::Pitch, COMDAT
; _this$ = ecx

; 165  : 	SM_SCALAR Pitch() const { return orient_.pitch_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	mov	esp, ebp
	pop	ebp
	ret	0
?Pitch@VuEntity@@QBEMXZ ENDP				; VuEntity::Pitch
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Yaw@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Yaw@VuEntity@@QBEMXZ PROC				; VuEntity::Yaw, COMDAT
; _this$ = ecx

; 164  : 	SM_SCALAR Yaw() const { return orient_.yaw_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+60]
	mov	esp, ebp
	pop	ebp
	ret	0
?Yaw@VuEntity@@QBEMXZ ENDP				; VuEntity::Yaw
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZDelta@VuEntity@@QBEMXZ PROC				; VuEntity::ZDelta, COMDAT
; _this$ = ecx

; 163  : 	SM_SCALAR ZDelta() const { return pos_.dz_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+56]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::ZDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YDelta@VuEntity@@QBEMXZ PROC				; VuEntity::YDelta, COMDAT
; _this$ = ecx

; 162  : 	SM_SCALAR YDelta() const { return pos_.dy_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+52]
	mov	esp, ebp
	pop	ebp
	ret	0
?YDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::YDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XDelta@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XDelta@VuEntity@@QBEMXZ PROC				; VuEntity::XDelta, COMDAT
; _this$ = ecx

; 161  : 	SM_SCALAR XDelta() const { return pos_.dx_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	mov	esp, ebp
	pop	ebp
	ret	0
?XDelta@VuEntity@@QBEMXZ ENDP				; VuEntity::XDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?ZPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ZPos@VuEntity@@QBEMXZ PROC				; VuEntity::ZPos, COMDAT
; _this$ = ecx

; 160  : 	BIG_SCALAR ZPos()	const { return pos_.z_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+44]
	mov	esp, ebp
	pop	ebp
	ret	0
?ZPos@VuEntity@@QBEMXZ ENDP				; VuEntity::ZPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?YPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?YPos@VuEntity@@QBEMXZ PROC				; VuEntity::YPos, COMDAT
; _this$ = ecx

; 159  : 	BIG_SCALAR YPos()	const { return pos_.y_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+40]
	mov	esp, ebp
	pop	ebp
	ret	0
?YPos@VuEntity@@QBEMXZ ENDP				; VuEntity::YPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?XPos@VuEntity@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?XPos@VuEntity@@QBEMXZ PROC				; VuEntity::XPos, COMDAT
; _this$ = ecx

; 158  : 	BIG_SCALAR XPos() const { return pos_.x_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?XPos@VuEntity@@QBEMXZ ENDP				; VuEntity::XPos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Type@VuEntity@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@VuEntity@@QBEGXZ PROC				; VuEntity::Type, COMDAT
; _this$ = ecx

; 154  : 	ushort Type() const       { return share_.entityType_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@VuEntity@@QBEGXZ ENDP				; VuEntity::Type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::OwnerId, COMDAT
; _this$ = ecx

; 152  : 	VU_ID OwnerId() const     { return share_.ownerId_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?OwnerId@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::OwnerId
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?Id@VuEntity@@QBE?AVVU_ID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Id@VuEntity@@QBE?AVVU_ID@@XZ PROC			; VuEntity::Id, COMDAT
; _this$ = ecx

; 131  : 	VU_ID Id() const	{ return share_.id_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Id@VuEntity@@QBE?AVVU_ID@@XZ ENDP			; VuEntity::Id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPRDelta@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dyaw$ = 8						; size = 4
_dpitch$ = 12						; size = 4
_droll$ = 16						; size = 4
?SetYPRDelta@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPRDelta, COMDAT
; _this$ = ecx

; 116  : 	void SetYPRDelta(SM_SCALAR dyaw, SM_SCALAR dpitch,SM_SCALAR droll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		orient_.dyaw_ = dyaw; orient_.dpitch_ = dpitch; orient_.droll_=droll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dyaw$[ebp]
	movss	DWORD PTR [eax+72], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _dpitch$[ebp]
	movss	DWORD PTR [ecx+76], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _droll$[ebp]
	movss	DWORD PTR [edx+80], xmm0

; 118  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPRDelta@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPRDelta
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\vu2\include\vuentity.h
;	COMDAT ?SetYPR@VuEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_yaw$ = 8						; size = 4
_pitch$ = 12						; size = 4
_roll$ = 16						; size = 4
?SetYPR@VuEntity@@QAEXMMM@Z PROC			; VuEntity::SetYPR, COMDAT
; _this$ = ecx

; 113  : 	void SetYPR(SM_SCALAR yaw, SM_SCALAR pitch, SM_SCALAR roll){ 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		orient_.yaw_ = yaw; orient_.pitch_ = pitch; orient_.roll_ = roll; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [ecx+64], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _roll$[ebp]
	movss	DWORD PTR [edx+68], xmm0

; 115  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetYPR@VuEntity@@QAEXMMM@Z ENDP			; VuEntity::SetYPR
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_ID@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VU_ID@@QAE@XZ PROC					; VU_ID::VU_ID, COMDAT
; _this$ = ecx

; 100  : 	VU_ID() : num_(0), creator_(0){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0VU_SESSION_ID@@QAE@K@Z		; VU_SESSION_ID::VU_SESSION_ID
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0VU_ID@@QAE@XZ ENDP					; VU_ID::VU_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\falclib\include\vutypes.h
;	COMDAT ??0VU_SESSION_ID@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0VU_SESSION_ID@@QAE@K@Z PROC				; VU_SESSION_ID::VU_SESSION_ID, COMDAT
; _this$ = ecx

; 53   : 	VU_SESSION_ID(unsigned long value) : value_((unsigned long)value) { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0VU_SESSION_ID@@QAE@K@Z ENDP				; VU_SESSION_ID::VU_SESSION_ID
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?LabelColor@DrawableBSP@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?LabelColor@DrawableBSP@@QAEKXZ PROC			; DrawableBSP::LabelColor, COMDAT
; _this$ = ecx

; 63   : 	DWORD LabelColor()										{ return labelColor; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+164]
	mov	esp, ebp
	pop	ebp
	ret	0
?LabelColor@DrawableBSP@@QAEKXZ ENDP			; DrawableBSP::LabelColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawbsp.h
;	COMDAT ?Label@DrawableBSP@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Label@DrawableBSP@@QAEPADXZ PROC			; DrawableBSP::Label, COMDAT
; _this$ = ecx

; 62   : 	char *Label()											{ return label; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	mov	esp, ebp
	pop	ebp
	ret	0
?Label@DrawableBSP@@QAEPADXZ ENDP			; DrawableBSP::Label
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z PROC	; DrawableObject::GetPosition, COMDAT
; _this$ = ecx

; 28   : 	void GetPosition(Tpoint* pos){ *pos = position; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPosition@DrawableObject@@QAEXPAUTpoint@@@Z ENDP	; DrawableObject::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\graphics\include\drawobj.h
;	COMDAT ?Radius@DrawableObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Radius@DrawableObject@@QBEMXZ PROC			; DrawableObject::Radius, COMDAT
; _this$ = ecx

; 27   : 	float Radius() const { return radius; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	mov	esp, ebp
	pop	ebp
	ret	0
?Radius@DrawableObject@@QBEMXZ ENDP			; DrawableObject::Radius
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	edx, DWORD PTR __Errval$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
tv69 = -8						; size = 4
__Name$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	ecx, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv65 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1out_of_range@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 146  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2272 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Ptr$1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Ptr$1[ebp], eax

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$1[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -12						; size = 4
tv129 = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	edx, BYTE PTR __Trim$[ebp]
	test	edx, edx
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -48						; size = 4
tv204 = -44						; size = 4
tv203 = -40						; size = 4
tv202 = -36						; size = 4
__Ptr$ = -32						; size = 4
__Newres$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], ecx
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+20]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR __Newres$[ebp], eax

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR __Newres$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], ecx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], edx

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2213 : 		_Eos(_Oldlen);

	mov	ecx, DWORD PTR __Oldlen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv75 = -12						; size = 4
__Num$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	ecx, DWORD PTR __Num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 1734 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -12					; size = 4
__Ptr$2 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Off$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], eax

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	sub	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$2[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN3@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@assign:

; 1139 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], ecx
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	ecx, DWORD PTR __Num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	edx, DWORD PTR __Num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 635  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 636  : 		{	// construct allocator from _Al
; 637  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 499  : 		_Myres = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 38   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@

; 39   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	push	ecx

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	push	ecx

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 65   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?FloatToInt32@@YAHM@Z PROC				; FloatToInt32

; 179  : {

	push	ebp
	mov	ebp, esp

; 180  : #if WIN32
; 181  :   __asm {
; 182  :     fld dword ptr [x];

	fld	DWORD PTR _x$[ebp]

; 183  :     fistp dword ptr [x];

	fistp	DWORD PTR _x$[ebp]

; 184  :     mov eax,dword ptr [x];

	mov	eax, DWORD PTR _x$[ebp]

; 185  :   }
; 186  : #else 
; 187  : 	return static_cast<int>(x);	
; 188  : #endif
; 189  : }

	pop	ebp
	ret	0
?FloatToInt32@@YAHM@Z ENDP				; FloatToInt32
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\mathlib\math.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
?SqrtSSE@@YAMM@Z PROC					; SqrtSSE

; 91   : static inline float SqrtSSE(float x){ 

	push	ebp
	mov	ebp, esp

; 92   :     __asm 
; 93   :     { 
; 94   :         sqrtss xmm0,x 

	sqrtss	xmm0, DWORD PTR _x$[ebp]

; 95   :         movss x,xmm0 

	movss	XMMWORD PTR _x$[ebp], xmm0

; 96   :     } 
; 97   : 
; 98   :     return x; 

	fld	DWORD PTR _x$[ebp]

; 99   : } 

	pop	ebp
	ret	0
?SqrtSSE@@YAMM@Z ENDP					; SqrtSSE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 537  :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 511  :         {return (cosf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv74 = -12						; size = 8
tv76 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
END
