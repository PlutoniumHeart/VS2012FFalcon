; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.51106.1 

	TITLE	C:\Users\Zhitao Li\Documents\Visual Studio 2012\Projects\Freefalcon\SIM\FAULTS\fack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::SIMDIRTYDATA_INTERVAL
PUBLIC	?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB	; FalconEntity::CMPDIRTYDATA_INTERVAL
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
_L_2	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?CMPDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::CMPDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB
CONST	SEGMENT
?SIMDIRTYDATA_INTERVAL@FalconEntity@@2KB DD 0c8H	; FalconEntity::SIMDIRTYDATA_INTERVAL
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
PUBLIC	?IsFlagSet@FackClass@@QAEHXZ			; FackClass::IsFlagSet
PUBLIC	?ClearFlag@FackClass@@QAEXXZ			; FackClass::ClearFlag
PUBLIC	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault
PUBLIC	?SetFault@FackClass@@QAEXHH@Z			; FackClass::SetFault
PUBLIC	?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z	; FackClass::SetFault
PUBLIC	?ClearFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@@Z ; FackClass::ClearFault
PUBLIC	?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::ClearFault
PUBLIC	?GetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@PAUstr_FEntry@3@@Z ; FackClass::GetFault
PUBLIC	?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ; FackClass::GetFault
PUBLIC	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z	; FackClass::GetFault
PUBLIC	?ClearMasterCaution@FackClass@@QAEXXZ		; FackClass::ClearMasterCaution
PUBLIC	?SetMasterCaution@FackClass@@QAEXXZ		; FackClass::SetMasterCaution
PUBLIC	?TotalPowerFailure@FackClass@@QAEXXZ		; FackClass::TotalPowerFailure
PUBLIC	?RandomFailure@FackClass@@QAEXXZ		; FackClass::RandomFailure
PUBLIC	?ClearWarnReset@FackClass@@QAEXXZ		; FackClass::ClearWarnReset
PUBLIC	?SetWarnReset@FackClass@@QAEXXZ			; FackClass::SetWarnReset
PUBLIC	?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetWarning
PUBLIC	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution
PUBLIC	?GetFaultNames@FackClass@@QAEXW4type_FSubSystem@FaultClass@@HPAUstr_FNames@3@@Z ; FackClass::GetFaultNames
PUBLIC	??0FackClass@@QAE@XZ				; FackClass::FackClass
PUBLIC	??1FackClass@@QAE@XZ				; FackClass::~FackClass
PUBLIC	?IsSet@FlightData@@QAEHH@Z			; FlightData::IsSet
PUBLIC	??_C@_0N@BFJBHDAI@remove?5call?6?$AA@		; `string'
EXTRN	_MonoPrint:PROC
EXTRN	?PickFunction@FaultClass@@QAE?AW4type_FFunction@1@W4type_FSubSystem@1@@Z:PROC ; FaultClass::PickFunction
EXTRN	?PickSubSystem@FaultClass@@QAE?AW4type_FSubSystem@1@H@Z:PROC ; FaultClass::PickSubSystem
EXTRN	?SetFault@FaultClass@@QAEXW4type_FSubSystem@1@W4type_FFunction@1@W4type_FSeverity@1@H@Z:PROC ; FaultClass::SetFault
EXTRN	?ClearFault@FaultClass@@QAEXW4type_FSubSystem@1@@Z:PROC ; FaultClass::ClearFault
EXTRN	?GetFault@FaultClass@@QAEXW4type_FSubSystem@1@PAUstr_FEntry@1@@Z:PROC ; FaultClass::GetFault
EXTRN	?GetFault@FaultClass@@QAEHW4type_FSubSystem@1@@Z:PROC ; FaultClass::GetFault
EXTRN	?GetFaultNames@FaultClass@@QAEXW4type_FSubSystem@1@HPAUstr_FNames@1@@Z:PROC ; FaultClass::GetFaultNames
EXTRN	?TotalPowerFailure@FaultClass@@QAEXXZ:PROC	; FaultClass::TotalPowerFailure
EXTRN	?RandomFailure@FaultClass@@QAEXXZ:PROC		; FaultClass::RandomFailure
EXTRN	??0FaultClass@@QAE@XZ:PROC			; FaultClass::FaultClass
EXTRN	??1FaultClass@@QAE@XZ:PROC			; FaultClass::~FaultClass
EXTRN	?IsFlagSet@CautionClass@@QAEHXZ:PROC		; CautionClass::IsFlagSet
EXTRN	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z:PROC ; CautionClass::SetCaution
EXTRN	?ClearCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z:PROC ; CautionClass::ClearCaution
EXTRN	?GetCaution@CautionClass@@QAEHW4type_CSubSystem@@@Z:PROC ; CautionClass::GetCaution
EXTRN	??0CautionClass@@QAE@XZ:PROC			; CautionClass::CautionClass
EXTRN	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ:PROC ; SimulationDriver::GetPlayerAircraft
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?vuxGameTime@@3KA:DWORD				; vuxGameTime
EXTRN	?SimDriver@@3VSimulationDriver@@A:BYTE		; SimDriver
EXTRN	?cockpitFlightData@@3VFlightData@@A:BYTE	; cockpitFlightData
EXTRN	?g_bRealisticAvionics@@3_NA:BYTE		; g_bRealisticAvionics
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT ??_C@_0N@BFJBHDAI@remove?5call?6?$AA@
CONST	SEGMENT
??_C@_0N@BFJBHDAI@remove?5call?6?$AA@ DB 'remove call', 0aH, 00H ; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0FackClass@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FackClass@@QAE@XZ$0
__ehfuncinfo$??0FackClass@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FackClass@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\flightdata.h
;	COMDAT ?IsSet@FlightData@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_newBit$ = 8						; size = 4
?IsSet@FlightData@@QAEHH@Z PROC				; FlightData::IsSet, COMDAT
; _this$ = ecx

; 276  :     int  IsSet (int newBit) {return ((lightBits & newBit) ? TRUE : FALSE);};

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	and	ecx, DWORD PTR _newBit$[ebp]
	je	SHORT $LN3@IsSet
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsSet
$LN3@IsSet:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsSet:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSet@FlightData@@QAEHH@Z ENDP				; FlightData::IsSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FackClass@@QAE@XZ PROC				; FackClass::~FackClass
; _this$ = ecx

; 25   : FackClass::~FackClass() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1FaultClass@@QAE@XZ			; FaultClass::~FaultClass
	mov	esp, ebp
	pop	ebp
	ret	0
??1FackClass@@QAE@XZ ENDP				; FackClass::~FackClass
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0FackClass@@QAE@XZ PROC				; FackClass::FackClass
; _this$ = ecx

; 17   : FackClass::FackClass() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0FackClass@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0FaultClass@@QAE@XZ			; FaultClass::FaultClass
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	??0CautionClass@@QAE@XZ			; CautionClass::CautionClass

; 18   : 
; 19   :    mMasterCaution = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 20   :    NeedsWarnReset = 0;	//MI Warn reset switch

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 21   :    DidManWarnReset = 0;	//MI Warn reset switch

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 22   : 	NeedAckAvioncFault = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+560], 0

; 23   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0FackClass@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1FaultClass@@QAE@XZ			; FaultClass::~FaultClass
__ehhandler$??0FackClass@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0FackClass@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0FackClass@@QAE@XZ ENDP				; FackClass::FackClass
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
_funcNum$ = 12						; size = 4
_pnames$ = 16						; size = 4
?GetFaultNames@FackClass@@QAEXW4type_FSubSystem@FaultClass@@HPAUstr_FNames@3@@Z PROC ; FackClass::GetFaultNames
; _this$ = ecx

; 346  : void	FackClass::GetFaultNames(FaultClass::type_FSubSystem subsystem, int funcNum, FaultClass::str_FNames* pnames) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 
; 348  : 	mFaults.GetFaultNames(subsystem, funcNum, pnames);

	mov	eax, DWORD PTR _pnames$[ebp]
	push	eax
	mov	ecx, DWORD PTR _funcNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _subsystem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetFaultNames@FaultClass@@QAEXW4type_FSubSystem@1@HPAUstr_FNames@1@@Z ; FaultClass::GetFaultNames

; 349  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetFaultNames@FackClass@@QAEXW4type_FSubSystem@FaultClass@@HPAUstr_FNames@3@@Z ENDP ; FackClass::GetFaultNames
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerAC$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z PROC	; FackClass::SetCaution
; _this$ = ecx

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 435  : 	if (playerAC == NULL){ 

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN3@SetCaution

; 436  : 		return;

	jmp	SHORT $LN4@SetCaution
$LN3@SetCaution:

; 437  : 	}
; 438  : 
; 439  : 	ShiAssert(playerAC->mFaults == this); // should only apply to us
; 440  : 	if(!mCautions.GetCaution(subsystem)) 

	mov	eax, DWORD PTR _subsystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?GetCaution@CautionClass@@QAEHW4type_CSubSystem@@@Z ; CautionClass::GetCaution
	test	eax, eax
	jne	SHORT $LN4@SetCaution

; 441  : 	{
; 442  : 		mCautions.SetCaution(subsystem);

	mov	ecx, DWORD PTR _subsystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 443  : 
; 444  : 		if(!playerAC->NeedsToPlayCaution && !cockpitFlightData.IsSet(FlightData::MasterCaution)){ 

	mov	edx, DWORD PTR _playerAC$[ebp]
	movzx	eax, BYTE PTR [edx+1504]
	test	eax, eax
	jne	SHORT $LN1@SetCaution
	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?IsSet@FlightData@@QAEHH@Z		; FlightData::IsSet
	test	eax, eax
	jne	SHORT $LN1@SetCaution

; 445  : 			playerAC->WhenToPlayCaution = vuxGameTime + 7*CampaignSeconds;

	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	ecx, 7000				; 00001b58H
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [edx+1508], ecx
$LN1@SetCaution:

; 446  : 		}
; 447  : 		playerAC->NeedsToPlayCaution = TRUE;//caution

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [eax+1504], 1

; 448  : 		SetMasterCaution();	//set our MasterCaution immediately

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMasterCaution@FackClass@@QAEXXZ	; FackClass::SetMasterCaution
$LN4@SetCaution:

; 449  : 	}
; 450  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ENDP	; FackClass::SetCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z PROC	; FackClass::SetWarning
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 415  : 	if (playerAC == NULL){ 

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN4@SetWarning

; 416  : 		return;

	jmp	SHORT $LN5@SetWarning
$LN4@SetWarning:

; 417  : 	}
; 418  : 
; 419  : 	ShiAssert(playerAC->mFaults == this); // should only apply to us
; 420  : 	if(!mCautions.GetCaution(subsystem)) 

	mov	eax, DWORD PTR _subsystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?GetCaution@CautionClass@@QAEHW4type_CSubSystem@@@Z ; CautionClass::GetCaution
	test	eax, eax
	jne	SHORT $LN5@SetWarning

; 421  : 	{
; 422  : 		mCautions.SetCaution(subsystem);

	mov	ecx, DWORD PTR _subsystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 423  : 
; 424  : 		if(!playerAC->NeedsToPlayWarning)

	mov	edx, DWORD PTR _playerAC$[ebp]
	movzx	eax, BYTE PTR [edx+1505]
	test	eax, eax
	jne	SHORT $LN2@SetWarning

; 425  : 			playerAC->WhenToPlayWarning = vuxGameTime + (unsigned long) 1.5*CampaignSeconds;

	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	ecx, 1000				; 000003e8H
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [edx+1512], ecx
$LN2@SetWarning:

; 426  : 		if(!GetFault(fuel_low_fault) &&
; 427  : 			!GetFault(fuel_home))//no betty for bingo

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN1@SetWarning
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN1@SetWarning

; 428  : 			playerAC->NeedsToPlayWarning = TRUE;// warning

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [eax+1505], 1
$LN1@SetWarning:

; 429  : 		SetWarnReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWarnReset@FackClass@@QAEXXZ		; FackClass::SetWarnReset
$LN5@SetWarning:

; 430  : 	}
; 431  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetWarning@FackClass@@QAEXW4type_CSubSystem@@@Z ENDP	; FackClass::SetWarning
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?SetWarnReset@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetWarnReset@FackClass@@QAEXXZ PROC			; FackClass::SetWarnReset, COMDAT
; _this$ = ecx

; 46   :     void	SetWarnReset(void) {NeedsWarnReset = TRUE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?SetWarnReset@FackClass@@QAEXXZ ENDP			; FackClass::SetWarnReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?ClearWarnReset@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearWarnReset@FackClass@@QAEXXZ PROC			; FackClass::ClearWarnReset, COMDAT
; _this$ = ecx

; 45   :     void	ClearWarnReset(void) {NeedsWarnReset = FALSE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearWarnReset@FackClass@@QAEXXZ ENDP			; FackClass::ClearWarnReset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RandomFailure@FackClass@@QAEXXZ PROC			; FackClass::RandomFailure
; _this$ = ecx

; 383  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 384  :     mFaults.RandomFailure(); // THW Same as above, just for random failure

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?RandomFailure@FaultClass@@QAEXXZ	; FaultClass::RandomFailure

; 385  : 	
; 386  : //Wombat778 2-25-04 Removed because if the fault is random, surely we shouldnt be setting these cautions every time.
; 387  : 
; 388  : /*	if(g_bRealisticAvionics)
; 389  : 	{
; 390  : 		SetCaution(radar_alt_fault);
; 391  : 		SetCaution(le_flaps_fault);
; 392  : 		SetCaution(hook_fault);
; 393  : 		SetCaution(nws_fault);
; 394  : 		SetCaution(ecm_fault);
; 395  : 		SetCaution(iff_fault);
; 396  : 	}
; 397  : 	else
; 398  : 	{
; 399  : 		mCautions.SetCaution(radar_alt_fault);
; 400  : 		mCautions.SetCaution(le_flaps_fault);
; 401  : 		mCautions.SetCaution(hook_fault);
; 402  : 		mCautions.SetCaution(nws_fault);
; 403  : 		mCautions.SetCaution(ecm_fault);
; 404  : 		mCautions.SetCaution(iff_fault);
; 405  : 	}*/
; 406  : 
; 407  :   if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN2@RandomFail

; 408  : 	mMasterCaution = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 1
$LN2@RandomFail:

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RandomFailure@FackClass@@QAEXXZ ENDP			; FackClass::RandomFailure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TotalPowerFailure@FackClass@@QAEXXZ PROC		; FackClass::TotalPowerFailure
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  :     mFaults.TotalPowerFailure(); // JPO

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?TotalPowerFailure@FaultClass@@QAEXXZ	; FaultClass::TotalPowerFailure

; 354  : 	//MI need to route these thru the appropriate function
; 355  : 	//since we have electrics in non realistic mode, we have to go this way....
; 356  : 	if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	SHORT $LN3@TotalPower

; 357  : 	{
; 358  : 		SetCaution(radar_alt_fault);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 359  : 		SetCaution(le_flaps_fault);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 360  : 		SetCaution(hook_fault);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 361  : 		SetCaution(nws_fault);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 362  : 		SetCaution(ecm_fault);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 363  : 		SetCaution(iff_fault);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCaution@FackClass@@QAEXW4type_CSubSystem@@@Z ; FackClass::SetCaution

; 364  : 	}
; 365  : 	else

	jmp	SHORT $LN2@TotalPower
$LN3@TotalPower:

; 366  : 	{
; 367  : 		mCautions.SetCaution(radar_alt_fault);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 368  : 		mCautions.SetCaution(le_flaps_fault);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 369  : 		mCautions.SetCaution(hook_fault);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 370  : 		mCautions.SetCaution(nws_fault);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 371  : 		mCautions.SetCaution(ecm_fault);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 372  : 		mCautions.SetCaution(iff_fault);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution
$LN2@TotalPower:

; 373  : 	}
; 374  : 
; 375  : 	if(!g_bRealisticAvionics)

	movzx	ecx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	ecx, ecx
	jne	SHORT $LN4@TotalPower

; 376  : 		mMasterCaution = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 1
$LN4@TotalPower:

; 377  : 	/*if(!SimDriver.GetPlayerEntity()->NeedsToPlayCaution)
; 378  : 		SimDriver.GetPlayerEntity()->WhenToPlayCaution = vuxGameTime + 7*CampaignSeconds;
; 379  : 	SimDriver.GetPlayerEntity()->NeedsToPlayCaution = TRUE;*/
; 380  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?TotalPowerFailure@FackClass@@QAEXXZ ENDP		; FackClass::TotalPowerFailure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?SetMasterCaution@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetMasterCaution@FackClass@@QAEXXZ PROC		; FackClass::SetMasterCaution, COMDAT
; _this$ = ecx

; 38   :     void        SetMasterCaution (void) {mMasterCaution = TRUE; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1
	mov	esp, ebp
	pop	ebp
	ret	0
?SetMasterCaution@FackClass@@QAEXXZ ENDP		; FackClass::SetMasterCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\include\fack.h
;	COMDAT ?ClearMasterCaution@FackClass@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearMasterCaution@FackClass@@QAEXXZ PROC		; FackClass::ClearMasterCaution, COMDAT
; _this$ = ecx

; 37   :     void        ClearMasterCaution(void) {mMasterCaution = FALSE;};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearMasterCaution@FackClass@@QAEXXZ ENDP		; FackClass::ClearMasterCaution
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z PROC	; FackClass::GetFault
; _this$ = ecx

; 337  : BOOL	FackClass::GetFault(type_CSubSystem subsystem) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 	
; 339  : 	return mCautions.GetCaution(subsystem);

	mov	eax, DWORD PTR _subsystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?GetCaution@CautionClass@@QAEHW4type_CSubSystem@@@Z ; CautionClass::GetCaution

; 340  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ENDP	; FackClass::GetFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z PROC ; FackClass::GetFault
; _this$ = ecx

; 328  : BOOL	FackClass::GetFault(FaultClass::type_FSubSystem subsystem) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 
; 330  : 	return mFaults.GetFault(subsystem);

	mov	eax, DWORD PTR _subsystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetFault@FaultClass@@QAEHW4type_FSubSystem@1@@Z ; FaultClass::GetFault

; 331  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFault@FackClass@@QAEHW4type_FSubSystem@FaultClass@@@Z ENDP ; FackClass::GetFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
_pentry$ = 12						; size = 4
?GetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@PAUstr_FEntry@3@@Z PROC ; FackClass::GetFault
; _this$ = ecx

; 319  : void	FackClass::GetFault(FaultClass::type_FSubSystem subsystem, FaultClass::str_FEntry* pentry) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 
; 321  : 	mFaults.GetFault(subsystem, pentry);

	mov	eax, DWORD PTR _pentry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subsystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetFault@FaultClass@@QAEXW4type_FSubSystem@1@PAUstr_FEntry@1@@Z ; FaultClass::GetFault

; 322  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@PAUstr_FEntry@3@@Z ENDP ; FackClass::GetFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z PROC	; FackClass::ClearFault
; _this$ = ecx

; 262  : void	FackClass::ClearFault(type_CSubSystem subsystem) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 
; 264  : 	if(g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	je	$LN3@ClearFault

; 265  : 	{
; 266  : 		//warnings
; 267  : 		if(!GetFault(tf_fail) &&	//never get's set currently
; 268  : 			!GetFault(obs_wrn) && //never get's set currently
; 269  : 			!GetFault(eng_fire) &&
; 270  : 			!GetFault(eng2_fire) && //TJL 01/24/04 multi-engine
; 271  : 			!GetFault(hyd) &&
; 272  : 			!GetFault(oil_press) &&
; 273  : 			!GetFault(dual_fc) &&
; 274  : 			!GetFault(to_ldg_config) &&
; 275  : 			!GetFault(fuel_low_fault) && 
; 276  : 			!GetFault(fuel_trapped) && 
; 277  : 			!GetFault(fuel_home))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN2@ClearFault
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN2@ClearFault
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN2@ClearFault

; 278  : 		{
; 279  : 			ClearWarnReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearWarnReset@FackClass@@QAEXXZ	; FackClass::ClearWarnReset
$LN2@ClearFault:

; 280  : 		}
; 281  : 		//Cautions
; 282  : 		if(!GetFault(stores_config_fault) &&
; 283  : 			!GetFault(flt_cont_fault) &&
; 284  : 			!GetFault(le_flaps_fault) &&
; 285  : 			!GetFault(engine) &&
; 286  : 			!GetFault(overheat_fault) &&
; 287  : 			!GetFault(avionics_fault) &&
; 288  : 			!GetFault(radar_alt_fault) &&
; 289  : 			!GetFault(iff_fault) &&
; 290  : 			!GetFault(ecm_fault) &&
; 291  : 			!GetFault(hook_fault) &&
; 292  : 			!GetFault(nws_fault) &&
; 293  : 			!GetFault(cabin_press_fault) &&
; 294  : 			!GetFault(fwd_fuel_low_fault) &&
; 295  : 			!GetFault(aft_fuel_low_fault) &&
; 296  : 			!GetFault(probeheat_fault) &&
; 297  : 			!GetFault(seat_notarmed_fault) &&
; 298  : 			!GetFault(buc_fault) &&
; 299  : 			!GetFault(fueloil_hot_fault) &&
; 300  : 			!GetFault(anti_skid_fault) &&
; 301  : 			!GetFault(nws_fault) &&
; 302  : 			!GetFault(oxy_low_fault)&&
; 303  : 			!GetFault(sec_fault) &&
; 304  : 			!GetFault(elec_fault) &&
; 305  : 			!GetFault(lef_fault) &&
; 306  : 			!NeedAckAvioncFault) 

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@ClearFault
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	31					; 0000001fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	34					; 00000022H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	push	35					; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@ClearFault
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+560], 0
	jne	SHORT $LN3@ClearFault

; 307  : 		{
; 308  : 			ClearMasterCaution();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearMasterCaution@FackClass@@QAEXXZ	; FackClass::ClearMasterCaution
$LN3@ClearFault:

; 309  : 			
; 310  : 		}
; 311  : 	}
; 312  : 	mCautions.ClearCaution(subsystem);

	mov	edx, DWORD PTR _subsystem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?ClearCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::ClearCaution

; 313  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFault@FackClass@@QAEXW4type_CSubSystem@@@Z ENDP	; FackClass::ClearFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?ClearFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@@Z PROC ; FackClass::ClearFault
; _this$ = ecx

; 243  : void	FackClass::ClearFault(FaultClass::type_FSubSystem subsystem) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 
; 245  : 	mFaults.ClearFault(subsystem);

	mov	eax, DWORD PTR _subsystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ClearFault@FaultClass@@QAEXW4type_FSubSystem@1@@Z ; FaultClass::ClearFault

; 246  : 
; 247  : 	if(subsystem == FaultClass::eng_fault) {

	cmp	DWORD PTR _subsystem$[ebp], 8
	jne	SHORT $LN5@ClearFault

; 248  : 		mCautions.ClearCaution(engine);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?ClearCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::ClearCaution
	jmp	SHORT $LN6@ClearFault
$LN5@ClearFault:

; 249  : 	}
; 250  : 	//TJL 01/16/04 multi-engine
; 251  : 	else if(subsystem == FaultClass::eng2_fault) {

	cmp	DWORD PTR _subsystem$[ebp], 9
	jne	SHORT $LN3@ClearFault

; 252  : 		mCautions.ClearCaution(engine);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?ClearCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::ClearCaution
	jmp	SHORT $LN6@ClearFault
$LN3@ClearFault:

; 253  : 	}
; 254  : 	else if(subsystem == FaultClass::iff_fault) {

	cmp	DWORD PTR _subsystem$[ebp], 19		; 00000013H
	jne	SHORT $LN6@ClearFault

; 255  : 		mCautions.ClearCaution(iff_fault);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?ClearCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::ClearCaution
$LN6@ClearFault:

; 256  : 	}
; 257  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@@Z ENDP ; FackClass::ClearFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z PROC	; FackClass::SetFault
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 160  : 	if (!playerAC){ 

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN13@SetFault

; 161  : 		return;

	jmp	$LN14@SetFault
$LN13@SetFault:

; 162  : 	}
; 163  : 
; 164  : 	//ShiAssert(SimDriver.GetPlayerEntity()->mFaults == this); // should only apply to us
; 165  : 	if(!mCautions.GetCaution(subsystem)) 

	mov	eax, DWORD PTR _subsystem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?GetCaution@CautionClass@@QAEHW4type_CSubSystem@@@Z ; CautionClass::GetCaution
	test	eax, eax
	jne	$LN14@SetFault

; 166  : 	{
; 167  : 		mCautions.SetCaution(subsystem);

	mov	ecx, DWORD PTR _subsystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution

; 168  : 
; 169  : 		// No Master Caution for low_altitude warming - just bitchin' betty :-) - RH
; 170  : 		if (subsystem != alt_low)

	cmp	DWORD PTR _subsystem$[ebp], 2
	je	$LN14@SetFault

; 171  : 		{
; 172  : 			if(!g_bRealisticAvionics)

	movzx	edx, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	edx, edx
	jne	SHORT $LN10@SetFault

; 173  : 			{
; 174  : 				mMasterCaution = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 175  : 				NeedsWarnReset = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 176  : 			}
; 177  : 			else

	jmp	$LN14@SetFault
$LN10@SetFault:

; 178  : 			{
; 179  : 	 			//these are warnings
; 180  : 				if (GetFault(tf_fail) ||	//never get's set currently
; 181  : 					GetFault(obs_wrn) || //never get's set currently
; 182  : 					GetFault(eng_fire) ||
; 183  : 					GetFault(eng2_fire) || //TJL 01/24/04 multi-engine
; 184  : 					GetFault(hyd) ||
; 185  : 					GetFault(oil_press) ||
; 186  : 					GetFault(dual_fc) ||
; 187  : 					GetFault(to_ldg_config))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN7@SetFault
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN8@SetFault
$LN7@SetFault:

; 188  : 				{
; 189  : 					if(!playerAC->NeedsToPlayWarning){

	mov	edx, DWORD PTR _playerAC$[ebp]
	movzx	eax, BYTE PTR [edx+1505]
	test	eax, eax
	jne	SHORT $LN6@SetFault

; 190  : 						playerAC->WhenToPlayWarning = vuxGameTime + (unsigned long) 1.5*CampaignSeconds;

	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	ecx, 1000				; 000003e8H
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [edx+1512], ecx
$LN6@SetFault:

; 191  : 					}
; 192  : 					playerAC->NeedsToPlayWarning = TRUE;// warning

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [eax+1505], 1

; 193  : 					SetWarnReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWarnReset@FackClass@@QAEXXZ		; FackClass::SetWarnReset
$LN8@SetFault:

; 194  : 				}
; 195  : 				//these are actually cautions
; 196  : 				if(subsystem != fuel_low_fault)

	cmp	DWORD PTR _subsystem$[ebp], 13		; 0000000dH
	je	$LN5@SetFault

; 197  : 				{
; 198  : 					if(GetFault(stores_config_fault) ||
; 199  : 						GetFault(flt_cont_fault) ||
; 200  : 						GetFault(le_flaps_fault) ||
; 201  : 						GetFault(engine) ||
; 202  : 						GetFault(overheat_fault) ||
; 203  : 						GetFault(avionics_fault) ||
; 204  : 						GetFault(radar_alt_fault) ||
; 205  : 						GetFault(iff_fault) ||
; 206  : 						GetFault(ecm_fault) ||
; 207  : 						GetFault(hook_fault) ||
; 208  : 						GetFault(nws_fault) ||
; 209  : 						GetFault(cabin_press_fault) ||
; 210  : 						GetFault(fwd_fuel_low_fault) ||
; 211  : 						GetFault(aft_fuel_low_fault) ||
; 212  : 						GetFault(probeheat_fault) ||
; 213  : 						GetFault(seat_notarmed_fault) ||
; 214  : 						GetFault(buc_fault) ||
; 215  : 						GetFault(fueloil_hot_fault) ||
; 216  : 						GetFault(anti_skid_fault) ||
; 217  : 						GetFault(nws_fault) ||
; 218  : 						GetFault(oxy_low_fault)||
; 219  : 						GetFault(sec_fault) ||
; 220  : 						GetFault(lef_fault))

	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	$LN3@SetFault
	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	31					; 0000001fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	jne	SHORT $LN3@SetFault
	push	35					; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEHW4type_CSubSystem@@@Z ; FackClass::GetFault
	test	eax, eax
	je	SHORT $LN5@SetFault
$LN3@SetFault:

; 221  : 					{
; 222  : 						if(!playerAC->NeedsToPlayCaution && !cockpitFlightData.IsSet(FlightData::MasterCaution))

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+1504]
	test	edx, edx
	jne	SHORT $LN2@SetFault
	push	1
	mov	ecx, OFFSET ?cockpitFlightData@@3VFlightData@@A ; cockpitFlightData
	call	?IsSet@FlightData@@QAEHH@Z		; FlightData::IsSet
	test	eax, eax
	jne	SHORT $LN2@SetFault

; 223  : 						{ 
; 224  : 							playerAC->WhenToPlayCaution = vuxGameTime + 7*CampaignSeconds;

	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	eax, 7000				; 00001b58H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [ecx+1508], eax
$LN2@SetFault:

; 225  : 						}
; 226  : 						playerAC->NeedsToPlayCaution = TRUE;//caution

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [edx+1504], 1

; 227  : 						SetMasterCaution();	//set our MasterCaution immediately

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMasterCaution@FackClass@@QAEXXZ	; FackClass::SetMasterCaution
$LN5@SetFault:

; 228  : 					}
; 229  : 				}
; 230  : 				if(subsystem == fuel_low_fault){

	cmp	DWORD PTR _subsystem$[ebp], 13		; 0000000dH
	jne	SHORT $LN14@SetFault

; 231  : 					//MI need flashing on HUD
; 232  : 					SetWarnReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWarnReset@FackClass@@QAEXXZ		; FackClass::SetWarnReset
$LN14@SetFault:

; 233  : 				}
; 234  : 			}
; 235  : 		}
; 236  : 	}
; 237  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFault@FackClass@@QAEXW4type_CSubSystem@@@Z ENDP	; FackClass::SetFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_function$ = -12					; size = 4
_subSystem$ = -8					; size = 4
_this$ = -4						; size = 4
_systemBits$ = 8					; size = 4
_doWarningMsg$ = 12					; size = 4
?SetFault@FackClass@@QAEXHH@Z PROC			; FackClass::SetFault
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	FaultClass::type_FSubSystem subSystem = mFaults.PickSubSystem (systemBits);

	mov	eax, DWORD PTR _systemBits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?PickSubSystem@FaultClass@@QAE?AW4type_FSubSystem@1@H@Z ; FaultClass::PickSubSystem
	mov	DWORD PTR _subSystem$[ebp], eax

; 51   : 	FaultClass::type_FFunction	function = mFaults.PickFunction(subSystem);

	mov	ecx, DWORD PTR _subSystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?PickFunction@FaultClass@@QAE?AW4type_FFunction@1@W4type_FSubSystem@1@@Z ; FaultClass::PickFunction
	mov	DWORD PTR _function$[ebp], eax

; 52   : 
; 53   : 
; 54   : 	//TJL 01/11/04 Added Additional ENUM list
; 55   : 	SetFault (subSystem, function, FaultClass::fail, doWarningMsg);

	mov	edx, DWORD PTR _doWarningMsg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _function$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subSystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ; FackClass::SetFault

; 56   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetFault@FackClass@@QAEXHH@Z ENDP			; FackClass::SetFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_entry$ = -16						; size = 8
_playerAC$ = -8						; size = 4
_this$ = -4						; size = 4
_subsystem$ = 8						; size = 4
_function$ = 12						; size = 4
_severity$ = 16						; size = 4
_doWarningMsg$ = 20					; size = 4
?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z PROC ; FackClass::SetFault
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	AircraftClass *playerAC = SimDriver.GetPlayerAircraft();

	mov	ecx, OFFSET ?SimDriver@@3VSimulationDriver@@A ; SimDriver
	call	?GetPlayerAircraft@SimulationDriver@@QBEPAVAircraftClass@@XZ ; SimulationDriver::GetPlayerAircraft
	mov	DWORD PTR _playerAC$[ebp], eax

; 65   : 	if (playerAC == NULL) return;

	cmp	DWORD PTR _playerAC$[ebp], 0
	jne	SHORT $LN14@SetFault
	jmp	$LN15@SetFault
$LN14@SetFault:

; 66   : 
; 67   : 	FaultClass::str_FEntry	entry;
; 68   : 
; 69   : 	//ShiAssert(doWarningMsg == 0 || SimDriver.GetPlayerEntity()->mFaults == this); // should only apply to us
; 70   : 	GetFault(subsystem, &entry);

	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _subsystem$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@PAUstr_FEntry@3@@Z ; FackClass::GetFault

; 71   : 
; 72   :    // Set the fault
; 73   : 	mFaults.SetFault(subsystem, function, severity, doWarningMsg);

	mov	edx, DWORD PTR _doWarningMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _severity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _function$[ebp]
	push	ecx
	mov	edx, DWORD PTR _subsystem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?SetFault@FaultClass@@QAEXW4type_FSubSystem@1@W4type_FFunction@1@W4type_FSeverity@1@H@Z ; FaultClass::SetFault

; 74   : 
; 75   :    // Adjust needed cautions
; 76   : 	if(entry.elFunction == FaultClass::nofault) 

	cmp	DWORD PTR _entry$[ebp], 0
	jne	SHORT $LN13@SetFault

; 77   : 	{
; 78   : 		if(subsystem == FaultClass::eng_fault) 

	cmp	DWORD PTR _subsystem$[ebp], 8
	jne	SHORT $LN12@SetFault

; 79   : 		{
; 80   : 			mCautions.SetCaution(engine);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution
	jmp	SHORT $LN13@SetFault
$LN12@SetFault:

; 81   : 		}
; 82   : 		//TJL 01/16/04 multi-engine
; 83   : 		else if(subsystem == FaultClass::eng2_fault) 

	cmp	DWORD PTR _subsystem$[ebp], 9
	jne	SHORT $LN10@SetFault

; 84   : 		{
; 85   : 			mCautions.SetCaution(engine);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution
	jmp	SHORT $LN13@SetFault
$LN10@SetFault:

; 86   : 		}
; 87   : 
; 88   : 		else if(subsystem == FaultClass::iff_fault) 

	cmp	DWORD PTR _subsystem$[ebp], 19		; 00000013H
	jne	SHORT $LN13@SetFault

; 89   : 		{
; 90   : 			mCautions.SetCaution(iff_fault);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?SetCaution@CautionClass@@QAEXW4type_CSubSystem@@@Z ; CautionClass::SetCaution
$LN13@SetFault:

; 91   : 		}		
; 92   : 	}
; 93   : 	if(!g_bRealisticAvionics)

	movzx	eax, BYTE PTR ?g_bRealisticAvionics@@3_NA ; g_bRealisticAvionics
	test	eax, eax
	jne	SHORT $LN7@SetFault

; 94   : 	{
; 95   : 		mMasterCaution = TRUE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 1

; 96   : 		NeedsWarnReset = TRUE; //MI Warn Reset

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1
	jmp	$LN15@SetFault
$LN7@SetFault:

; 97   : 	}
; 98   : 	else if (doWarningMsg)

	cmp	DWORD PTR _doWarningMsg$[ebp], 0
	je	$LN15@SetFault

; 99   : 	{
; 100  : 		//TJL 01/24/04 Added Eng2
; 101  : 		if(subsystem == FaultClass::amux_fault || 
; 102  : 			subsystem == FaultClass::blkr_fault ||
; 103  : 			subsystem == FaultClass::bmux_fault ||
; 104  : 			subsystem == FaultClass::cadc_fault ||
; 105  : 			subsystem == FaultClass::cmds_fault ||
; 106  : 			subsystem == FaultClass::dlnk_fault ||
; 107  : 			subsystem == FaultClass::dmux_fault ||
; 108  : 			subsystem == FaultClass::dte_fault ||
; 109  : 			subsystem == FaultClass::eng_fault ||
; 110  : 			subsystem == FaultClass::eng2_fault ||
; 111  : 			subsystem == FaultClass::epod_fault ||
; 112  : 			subsystem == FaultClass::fcc_fault ||
; 113  : 			subsystem == FaultClass::fcr_fault ||
; 114  : 			subsystem == FaultClass::flcs_fault ||
; 115  : 			subsystem == FaultClass::fms_fault ||
; 116  : 			subsystem == FaultClass::gear_fault ||
; 117  : 			subsystem == FaultClass::gps_fault ||
; 118  : 			subsystem == FaultClass::harm_fault ||
; 119  : 			subsystem == FaultClass::hud_fault ||
; 120  : 			subsystem == FaultClass::iff_fault ||
; 121  : 			subsystem == FaultClass::ins_fault ||
; 122  : 			subsystem == FaultClass::isa_fault ||
; 123  : 			subsystem == FaultClass::mfds_fault ||
; 124  : 			subsystem == FaultClass::msl_fault ||
; 125  : 			subsystem == FaultClass::ralt_fault ||
; 126  : 			subsystem == FaultClass::rwr_fault ||
; 127  : 			subsystem == FaultClass::sms_fault ||
; 128  : 			subsystem == FaultClass::tcn_fault ||
; 129  : 			subsystem == FaultClass::ufc_fault)

	cmp	DWORD PTR _subsystem$[ebp], 0
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 1
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 2
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 3
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 4
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 5
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 6
	je	$LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 7
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 8
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 9
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 10		; 0000000aH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 11		; 0000000bH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 12		; 0000000cH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 13		; 0000000dH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 14		; 0000000eH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 15		; 0000000fH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 16		; 00000010H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 17		; 00000011H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 18		; 00000012H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 19		; 00000013H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 20		; 00000014H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 21		; 00000015H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 22		; 00000016H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 23		; 00000017H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 24		; 00000018H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 25		; 00000019H
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 26		; 0000001aH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 27		; 0000001bH
	je	SHORT $LN3@SetFault
	cmp	DWORD PTR _subsystem$[ebp], 28		; 0000001cH
	jne	SHORT $LN4@SetFault
$LN3@SetFault:

; 130  : 		{
; 131  : 			playerAC->NeedsToPlayCaution = TRUE;//caution

	mov	eax, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [eax+1504], 1

; 132  : 			SetMasterCaution();	//set our MasterCaution immediately

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMasterCaution@FackClass@@QAEXXZ	; FackClass::SetMasterCaution

; 133  : 			playerAC->WhenToPlayCaution = vuxGameTime + 7*CampaignSeconds;

	mov	ecx, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	ecx, 7000				; 00001b58H
	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [edx+1508], ecx

; 134  : 			NeedAckAvioncFault = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+560], 1

; 135  : 		}
; 136  : 		else

	jmp	SHORT $LN15@SetFault
$LN4@SetFault:

; 137  : 		{
; 138  : 		/*//these are warnings
; 139  : 		if(function == FaultClass::dual ||
; 140  : 			function == FaultClass::efire ||
; 141  : 			function == FaultClass::hydr)
; 142  : 		{ */
; 143  : 			// sfr: this was inverted
; 144  : 			if(!playerAC->NeedsToPlayWarning){

	mov	ecx, DWORD PTR _playerAC$[ebp]
	movzx	edx, BYTE PTR [ecx+1505]
	test	edx, edx
	jne	SHORT $LN1@SetFault

; 145  : 				playerAC->WhenToPlayWarning = vuxGameTime + (unsigned long) 1.5*CampaignSeconds;

	mov	eax, DWORD PTR ?vuxGameTime@@3KA	; vuxGameTime
	add	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _playerAC$[ebp]
	mov	DWORD PTR [ecx+1512], eax
$LN1@SetFault:

; 146  : 			}
; 147  : 			SetWarnReset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWarnReset@FackClass@@QAEXXZ		; FackClass::SetWarnReset

; 148  : 			playerAC->NeedsToPlayWarning = TRUE;// warning

	mov	edx, DWORD PTR _playerAC$[ebp]
	mov	BYTE PTR [edx+1505], 1
$LN15@SetFault:

; 149  : 		}
; 150  : 	}
; 151  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetFault@FackClass@@QAEXW4type_FSubSystem@FaultClass@@W4type_FFunction@3@W4type_FSeverity@3@H@Z ENDP ; FackClass::SetFault
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearFlag@FackClass@@QAEXXZ PROC			; FackClass::ClearFlag
; _this$ = ecx

; 40   : void	FackClass::ClearFlag() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	MonoPrint("remove call\n");

	push	OFFSET ??_C@_0N@BFJBHDAI@remove?5call?6?$AA@
	call	_MonoPrint
	add	esp, 4

; 42   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearFlag@FackClass@@QAEXXZ ENDP			; FackClass::ClearFlag
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\zhitao li\documents\visual studio 2012\projects\freefalcon\sim\faults\fack.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFlagSet@FackClass@@QAEHXZ PROC			; FackClass::IsFlagSet
; _this$ = ecx

; 32   : BOOL	FackClass::IsFlagSet() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   : 	
; 34   : 	return mCautions.IsFlagSet();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	call	?IsFlagSet@CautionClass@@QAEHXZ		; CautionClass::IsFlagSet

; 35   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFlagSet@FackClass@@QAEHXZ ENDP			; FackClass::IsFlagSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
